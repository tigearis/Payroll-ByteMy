name: E2E Tests

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]

jobs:
  test:
    timeout-minutes: 60
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: payroll_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
      - uses: actions/checkout@v4

      - uses: pnpm/action-setup@v4
        with:
          version: 10.12.1

      - uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: "pnpm"

      - name: Install dependencies
        run: pnpm install

      - name: Install Playwright Browsers
        run: pnpx playwright install --with-deps

      - name: Set up test environment
        env:
          E2E_TEST_EMAIL: ${{ secrets.E2E_TEST_EMAIL }}
          E2E_TEST_PASSWORD: ${{ secrets.E2E_TEST_PASSWORD }}
          E2E_DEVELOPER_EMAIL: ${{ secrets.E2E_DEVELOPER_EMAIL }}
          E2E_DEVELOPER_PASSWORD: ${{ secrets.E2E_DEVELOPER_PASSWORD }}
          E2E_ORG_ADMIN_EMAIL: ${{ secrets.E2E_ORG_ADMIN_EMAIL }}
          E2E_ORG_ADMIN_PASSWORD: ${{ secrets.E2E_ORG_ADMIN_PASSWORD }}
          E2E_MANAGER_EMAIL: ${{ secrets.E2E_MANAGER_EMAIL }}
          E2E_MANAGER_PASSWORD: ${{ secrets.E2E_MANAGER_PASSWORD }}
          E2E_CONSULTANT_EMAIL: ${{ secrets.E2E_CONSULTANT_EMAIL }}
          E2E_CONSULTANT_PASSWORD: ${{ secrets.E2E_CONSULTANT_PASSWORD }}
          E2E_VIEWER_EMAIL: ${{ secrets.E2E_VIEWER_EMAIL }}
          E2E_VIEWER_PASSWORD: ${{ secrets.E2E_VIEWER_PASSWORD }}
        run: |
          cp .env.test.example .env.test
          # Set test-specific environment variables
          echo "BASE_URL=http://localhost:3000" >> .env.test
          echo "E2E_TEST_EMAIL=$E2E_TEST_EMAIL" >> .env.test
          echo "E2E_TEST_PASSWORD=$E2E_TEST_PASSWORD" >> .env.test
          echo "E2E_DEVELOPER_EMAIL=$E2E_DEVELOPER_EMAIL" >> .env.test
          echo "E2E_DEVELOPER_PASSWORD=$E2E_DEVELOPER_PASSWORD" >> .env.test
          echo "E2E_ORG_ADMIN_EMAIL=$E2E_ORG_ADMIN_EMAIL" >> .env.test
          echo "E2E_ORG_ADMIN_PASSWORD=$E2E_ORG_ADMIN_PASSWORD" >> .env.test
          echo "E2E_MANAGER_EMAIL=$E2E_MANAGER_EMAIL" >> .env.test
          echo "E2E_MANAGER_PASSWORD=$E2E_MANAGER_PASSWORD" >> .env.test
          echo "E2E_CONSULTANT_EMAIL=$E2E_CONSULTANT_EMAIL" >> .env.test
          echo "E2E_CONSULTANT_PASSWORD=$E2E_CONSULTANT_PASSWORD" >> .env.test
          echo "E2E_VIEWER_EMAIL=$E2E_VIEWER_EMAIL" >> .env.test
          echo "E2E_VIEWER_PASSWORD=$E2E_VIEWER_PASSWORD" >> .env.test

      - name: Build application
        run: pnpm build

      - name: Run Playwright tests
        run: pnpm test:e2e
        env:
          CI: true

      - uses: actions/upload-artifact@v4
        if: always()
        with:
          name: playwright-report
          path: playwright-report/
          retention-days: 30

      - uses: actions/upload-artifact@v4
        if: always()
        with:
          name: test-results
          path: test-results/
          retention-days: 30

  security-scan:
    runs-on: ubuntu-latest
    needs: test
    if: always()

    steps:
      - uses: actions/checkout@v4

      - name: Run security audit
        run: |
          # Check for exposed secrets in test files
          grep -r "password\|secret\|key" e2e/ --exclude-dir=node_modules || true

          # Validate test environment setup
          if [ -f ".env.test" ]; then
            echo "Warning: .env.test file should not be committed"
            exit 1
          fi

      - name: Validate test user permissions
        run: |
          echo "Validating test setup doesn't expose production credentials..."
          # Add any additional security validations here
