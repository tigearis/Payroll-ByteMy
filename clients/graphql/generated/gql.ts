/* eslint-disable */
import * as types from './graphql';
import { TypedDocumentNode as DocumentNode } from '@graphql-typed-document-node/core';

/**
 * Map of all GraphQL operations in the project.
 *
 * This map has several performance disadvantages:
 * 1. It is not tree-shakeable, so it will include all operations in the project.
 * 2. It is not minifiable, so the string of a GraphQL query will be multiple times inside the bundle.
 * 3. It does not support dead code elimination, so it will add unused operations.
 *
 * Therefore it is highly recommended to use the babel or swc plugin for production.
 * Learn more about it here: https://the-guild.dev/graphql/codegen/plugins/presets/preset-client#reducing-bundle-size
 */
type Documents = {
    "fragment ClientBasic on clients {\n  id\n  name\n  active\n  created_at\n}\n\nfragment ClientDetailed on clients {\n  id\n  name\n  contact_person\n  contact_email\n  contact_phone\n  active\n  created_at\n  updated_at\n  payrolls_aggregate {\n    aggregate {\n      count\n    }\n  }\n}\n\nfragment ClientListItem on clients {\n  id\n  name\n  contact_person\n  contact_email\n  active\n  created_at\n  payrolls_aggregate {\n    aggregate {\n      count\n    }\n  }\n}\n\nfragment ClientWithPayrolls on clients {\n  id\n  name\n  contact_person\n  contact_email\n  contact_phone\n  active\n  created_at\n  updated_at\n  payrolls(order_by: {name: asc}) {\n    id\n    name\n    status\n    date_value\n    employee_count\n    primary_consultant_user_id\n    superseded_date\n    go_live_date\n    version_number\n    created_at\n    updated_at\n    userByPrimaryConsultantUserId {\n      id\n      name\n      email\n    }\n    payroll_cycle {\n      name\n    }\n    payroll_date_type {\n      name\n    }\n    payroll_dates(order_by: {adjusted_eft_date: desc}, limit: 5) {\n      id\n      adjusted_eft_date\n      created_at\n      updated_at\n    }\n  }\n}": typeof types.ClientBasicFragmentDoc,
    "mutation CreateClient($name: String!, $contactPerson: String, $contactEmail: String, $contactPhone: String) {\n  insert_clients_one(\n    object: {name: $name, contact_person: $contactPerson, contact_email: $contactEmail, contact_phone: $contactPhone, active: true}\n  ) {\n    ...ClientDetailed\n  }\n}\n\nmutation UpdateClient($id: uuid!, $name: String, $contactPerson: String, $contactEmail: String, $contactPhone: String, $active: Boolean) {\n  update_clients_by_pk(\n    pk_columns: {id: $id}\n    _set: {name: $name, contact_person: $contactPerson, contact_email: $contactEmail, contact_phone: $contactPhone, active: $active, updated_at: \"now()\"}\n  ) {\n    ...ClientDetailed\n  }\n}\n\nmutation DeleteClient($id: uuid!) {\n  update_clients_by_pk(pk_columns: {id: $id}, _set: {active: false}) {\n    id\n    name\n    active\n  }\n}\n\nmutation DeactivateClient($id: uuid!) {\n  update_clients_by_pk(pk_columns: {id: $id}, _set: {active: false}) {\n    id\n    name\n    active\n  }\n}\n\nmutation HardDeleteClient($id: uuid!) {\n  delete_clients_by_pk(id: $id) {\n    id\n    name\n  }\n}": typeof types.CreateClientDocument,
    "query GetClientById($id: uuid!) {\n  clients_by_pk(id: $id) {\n    ...ClientWithPayrolls\n  }\n}\n\nquery GetClients {\n  clients(order_by: {name: asc}) {\n    ...ClientListItem\n    payrolls {\n      id\n      name\n      status\n      employee_count\n      payroll_cycle {\n        name\n      }\n      payroll_date_type {\n        name\n      }\n      payroll_dates(order_by: {adjusted_eft_date: desc}, limit: 1) {\n        adjusted_eft_date\n      }\n    }\n  }\n}\n\nquery ListClients($limit: Int = 10, $offset: Int = 0, $where: clients_bool_exp = {}, $order_by: [clients_order_by!] = [{name: asc}]) {\n  clients(limit: $limit, offset: $offset, where: $where, order_by: $order_by) {\n    ...ClientListItem\n  }\n  clients_aggregate(where: $where) {\n    aggregate {\n      count\n    }\n  }\n}\n\nquery SearchClients($search: String!, $limit: Int = 10) {\n  clients(\n    limit: $limit\n    where: {name: {_ilike: $search}, active: {_eq: true}}\n    order_by: {name: asc}\n  ) {\n    ...ClientBasic\n  }\n}\n\nquery GetActiveClients {\n  clients(where: {active: {_eq: true}}, order_by: {name: asc}) {\n    ...ClientBasic\n  }\n}\n\nquery GetClientWithPayrolls($id: uuid!) {\n  clients_by_pk(id: $id) {\n    ...ClientWithPayrolls\n  }\n}": typeof types.GetClientByIdDocument,
    "subscription ClientsSubscription {\n  clients(order_by: {name: asc}) {\n    ...ClientListItem\n  }\n}\n\nsubscription ClientSubscription($id: uuid!) {\n  clients_by_pk(id: $id) {\n    ...ClientDetailed\n  }\n}\n\nsubscription ActiveClientsSubscription {\n  clients(where: {active: {_eq: true}}, order_by: {name: asc}) {\n    ...ClientBasic\n  }\n}\n\nsubscription ClientPayrollsSubscription($clientId: uuid!) {\n  clients_by_pk(id: $clientId) {\n    id\n    name\n    payrolls(order_by: {name: asc}) {\n      id\n      name\n      status\n      employee_count\n      updated_at\n    }\n  }\n}": typeof types.ClientsSubscriptionDocument,
};
const documents: Documents = {
    "fragment ClientBasic on clients {\n  id\n  name\n  active\n  created_at\n}\n\nfragment ClientDetailed on clients {\n  id\n  name\n  contact_person\n  contact_email\n  contact_phone\n  active\n  created_at\n  updated_at\n  payrolls_aggregate {\n    aggregate {\n      count\n    }\n  }\n}\n\nfragment ClientListItem on clients {\n  id\n  name\n  contact_person\n  contact_email\n  active\n  created_at\n  payrolls_aggregate {\n    aggregate {\n      count\n    }\n  }\n}\n\nfragment ClientWithPayrolls on clients {\n  id\n  name\n  contact_person\n  contact_email\n  contact_phone\n  active\n  created_at\n  updated_at\n  payrolls(order_by: {name: asc}) {\n    id\n    name\n    status\n    date_value\n    employee_count\n    primary_consultant_user_id\n    superseded_date\n    go_live_date\n    version_number\n    created_at\n    updated_at\n    userByPrimaryConsultantUserId {\n      id\n      name\n      email\n    }\n    payroll_cycle {\n      name\n    }\n    payroll_date_type {\n      name\n    }\n    payroll_dates(order_by: {adjusted_eft_date: desc}, limit: 5) {\n      id\n      adjusted_eft_date\n      created_at\n      updated_at\n    }\n  }\n}": types.ClientBasicFragmentDoc,
    "mutation CreateClient($name: String!, $contactPerson: String, $contactEmail: String, $contactPhone: String) {\n  insert_clients_one(\n    object: {name: $name, contact_person: $contactPerson, contact_email: $contactEmail, contact_phone: $contactPhone, active: true}\n  ) {\n    ...ClientDetailed\n  }\n}\n\nmutation UpdateClient($id: uuid!, $name: String, $contactPerson: String, $contactEmail: String, $contactPhone: String, $active: Boolean) {\n  update_clients_by_pk(\n    pk_columns: {id: $id}\n    _set: {name: $name, contact_person: $contactPerson, contact_email: $contactEmail, contact_phone: $contactPhone, active: $active, updated_at: \"now()\"}\n  ) {\n    ...ClientDetailed\n  }\n}\n\nmutation DeleteClient($id: uuid!) {\n  update_clients_by_pk(pk_columns: {id: $id}, _set: {active: false}) {\n    id\n    name\n    active\n  }\n}\n\nmutation DeactivateClient($id: uuid!) {\n  update_clients_by_pk(pk_columns: {id: $id}, _set: {active: false}) {\n    id\n    name\n    active\n  }\n}\n\nmutation HardDeleteClient($id: uuid!) {\n  delete_clients_by_pk(id: $id) {\n    id\n    name\n  }\n}": types.CreateClientDocument,
    "query GetClientById($id: uuid!) {\n  clients_by_pk(id: $id) {\n    ...ClientWithPayrolls\n  }\n}\n\nquery GetClients {\n  clients(order_by: {name: asc}) {\n    ...ClientListItem\n    payrolls {\n      id\n      name\n      status\n      employee_count\n      payroll_cycle {\n        name\n      }\n      payroll_date_type {\n        name\n      }\n      payroll_dates(order_by: {adjusted_eft_date: desc}, limit: 1) {\n        adjusted_eft_date\n      }\n    }\n  }\n}\n\nquery ListClients($limit: Int = 10, $offset: Int = 0, $where: clients_bool_exp = {}, $order_by: [clients_order_by!] = [{name: asc}]) {\n  clients(limit: $limit, offset: $offset, where: $where, order_by: $order_by) {\n    ...ClientListItem\n  }\n  clients_aggregate(where: $where) {\n    aggregate {\n      count\n    }\n  }\n}\n\nquery SearchClients($search: String!, $limit: Int = 10) {\n  clients(\n    limit: $limit\n    where: {name: {_ilike: $search}, active: {_eq: true}}\n    order_by: {name: asc}\n  ) {\n    ...ClientBasic\n  }\n}\n\nquery GetActiveClients {\n  clients(where: {active: {_eq: true}}, order_by: {name: asc}) {\n    ...ClientBasic\n  }\n}\n\nquery GetClientWithPayrolls($id: uuid!) {\n  clients_by_pk(id: $id) {\n    ...ClientWithPayrolls\n  }\n}": types.GetClientByIdDocument,
    "subscription ClientsSubscription {\n  clients(order_by: {name: asc}) {\n    ...ClientListItem\n  }\n}\n\nsubscription ClientSubscription($id: uuid!) {\n  clients_by_pk(id: $id) {\n    ...ClientDetailed\n  }\n}\n\nsubscription ActiveClientsSubscription {\n  clients(where: {active: {_eq: true}}, order_by: {name: asc}) {\n    ...ClientBasic\n  }\n}\n\nsubscription ClientPayrollsSubscription($clientId: uuid!) {\n  clients_by_pk(id: $clientId) {\n    id\n    name\n    payrolls(order_by: {name: asc}) {\n      id\n      name\n      status\n      employee_count\n      updated_at\n    }\n  }\n}": types.ClientsSubscriptionDocument,
};

/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 *
 *
 * @example
 * ```ts
 * const query = graphql(`query GetUser($id: ID!) { user(id: $id) { name } }`);
 * ```
 *
 * The query argument is unknown!
 * Please regenerate the types.
 */
export function graphql(source: string): unknown;

/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "fragment ClientBasic on clients {\n  id\n  name\n  active\n  created_at\n}\n\nfragment ClientDetailed on clients {\n  id\n  name\n  contact_person\n  contact_email\n  contact_phone\n  active\n  created_at\n  updated_at\n  payrolls_aggregate {\n    aggregate {\n      count\n    }\n  }\n}\n\nfragment ClientListItem on clients {\n  id\n  name\n  contact_person\n  contact_email\n  active\n  created_at\n  payrolls_aggregate {\n    aggregate {\n      count\n    }\n  }\n}\n\nfragment ClientWithPayrolls on clients {\n  id\n  name\n  contact_person\n  contact_email\n  contact_phone\n  active\n  created_at\n  updated_at\n  payrolls(order_by: {name: asc}) {\n    id\n    name\n    status\n    date_value\n    employee_count\n    primary_consultant_user_id\n    superseded_date\n    go_live_date\n    version_number\n    created_at\n    updated_at\n    userByPrimaryConsultantUserId {\n      id\n      name\n      email\n    }\n    payroll_cycle {\n      name\n    }\n    payroll_date_type {\n      name\n    }\n    payroll_dates(order_by: {adjusted_eft_date: desc}, limit: 5) {\n      id\n      adjusted_eft_date\n      created_at\n      updated_at\n    }\n  }\n}"): (typeof documents)["fragment ClientBasic on clients {\n  id\n  name\n  active\n  created_at\n}\n\nfragment ClientDetailed on clients {\n  id\n  name\n  contact_person\n  contact_email\n  contact_phone\n  active\n  created_at\n  updated_at\n  payrolls_aggregate {\n    aggregate {\n      count\n    }\n  }\n}\n\nfragment ClientListItem on clients {\n  id\n  name\n  contact_person\n  contact_email\n  active\n  created_at\n  payrolls_aggregate {\n    aggregate {\n      count\n    }\n  }\n}\n\nfragment ClientWithPayrolls on clients {\n  id\n  name\n  contact_person\n  contact_email\n  contact_phone\n  active\n  created_at\n  updated_at\n  payrolls(order_by: {name: asc}) {\n    id\n    name\n    status\n    date_value\n    employee_count\n    primary_consultant_user_id\n    superseded_date\n    go_live_date\n    version_number\n    created_at\n    updated_at\n    userByPrimaryConsultantUserId {\n      id\n      name\n      email\n    }\n    payroll_cycle {\n      name\n    }\n    payroll_date_type {\n      name\n    }\n    payroll_dates(order_by: {adjusted_eft_date: desc}, limit: 5) {\n      id\n      adjusted_eft_date\n      created_at\n      updated_at\n    }\n  }\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "mutation CreateClient($name: String!, $contactPerson: String, $contactEmail: String, $contactPhone: String) {\n  insert_clients_one(\n    object: {name: $name, contact_person: $contactPerson, contact_email: $contactEmail, contact_phone: $contactPhone, active: true}\n  ) {\n    ...ClientDetailed\n  }\n}\n\nmutation UpdateClient($id: uuid!, $name: String, $contactPerson: String, $contactEmail: String, $contactPhone: String, $active: Boolean) {\n  update_clients_by_pk(\n    pk_columns: {id: $id}\n    _set: {name: $name, contact_person: $contactPerson, contact_email: $contactEmail, contact_phone: $contactPhone, active: $active, updated_at: \"now()\"}\n  ) {\n    ...ClientDetailed\n  }\n}\n\nmutation DeleteClient($id: uuid!) {\n  update_clients_by_pk(pk_columns: {id: $id}, _set: {active: false}) {\n    id\n    name\n    active\n  }\n}\n\nmutation DeactivateClient($id: uuid!) {\n  update_clients_by_pk(pk_columns: {id: $id}, _set: {active: false}) {\n    id\n    name\n    active\n  }\n}\n\nmutation HardDeleteClient($id: uuid!) {\n  delete_clients_by_pk(id: $id) {\n    id\n    name\n  }\n}"): (typeof documents)["mutation CreateClient($name: String!, $contactPerson: String, $contactEmail: String, $contactPhone: String) {\n  insert_clients_one(\n    object: {name: $name, contact_person: $contactPerson, contact_email: $contactEmail, contact_phone: $contactPhone, active: true}\n  ) {\n    ...ClientDetailed\n  }\n}\n\nmutation UpdateClient($id: uuid!, $name: String, $contactPerson: String, $contactEmail: String, $contactPhone: String, $active: Boolean) {\n  update_clients_by_pk(\n    pk_columns: {id: $id}\n    _set: {name: $name, contact_person: $contactPerson, contact_email: $contactEmail, contact_phone: $contactPhone, active: $active, updated_at: \"now()\"}\n  ) {\n    ...ClientDetailed\n  }\n}\n\nmutation DeleteClient($id: uuid!) {\n  update_clients_by_pk(pk_columns: {id: $id}, _set: {active: false}) {\n    id\n    name\n    active\n  }\n}\n\nmutation DeactivateClient($id: uuid!) {\n  update_clients_by_pk(pk_columns: {id: $id}, _set: {active: false}) {\n    id\n    name\n    active\n  }\n}\n\nmutation HardDeleteClient($id: uuid!) {\n  delete_clients_by_pk(id: $id) {\n    id\n    name\n  }\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "query GetClientById($id: uuid!) {\n  clients_by_pk(id: $id) {\n    ...ClientWithPayrolls\n  }\n}\n\nquery GetClients {\n  clients(order_by: {name: asc}) {\n    ...ClientListItem\n    payrolls {\n      id\n      name\n      status\n      employee_count\n      payroll_cycle {\n        name\n      }\n      payroll_date_type {\n        name\n      }\n      payroll_dates(order_by: {adjusted_eft_date: desc}, limit: 1) {\n        adjusted_eft_date\n      }\n    }\n  }\n}\n\nquery ListClients($limit: Int = 10, $offset: Int = 0, $where: clients_bool_exp = {}, $order_by: [clients_order_by!] = [{name: asc}]) {\n  clients(limit: $limit, offset: $offset, where: $where, order_by: $order_by) {\n    ...ClientListItem\n  }\n  clients_aggregate(where: $where) {\n    aggregate {\n      count\n    }\n  }\n}\n\nquery SearchClients($search: String!, $limit: Int = 10) {\n  clients(\n    limit: $limit\n    where: {name: {_ilike: $search}, active: {_eq: true}}\n    order_by: {name: asc}\n  ) {\n    ...ClientBasic\n  }\n}\n\nquery GetActiveClients {\n  clients(where: {active: {_eq: true}}, order_by: {name: asc}) {\n    ...ClientBasic\n  }\n}\n\nquery GetClientWithPayrolls($id: uuid!) {\n  clients_by_pk(id: $id) {\n    ...ClientWithPayrolls\n  }\n}"): (typeof documents)["query GetClientById($id: uuid!) {\n  clients_by_pk(id: $id) {\n    ...ClientWithPayrolls\n  }\n}\n\nquery GetClients {\n  clients(order_by: {name: asc}) {\n    ...ClientListItem\n    payrolls {\n      id\n      name\n      status\n      employee_count\n      payroll_cycle {\n        name\n      }\n      payroll_date_type {\n        name\n      }\n      payroll_dates(order_by: {adjusted_eft_date: desc}, limit: 1) {\n        adjusted_eft_date\n      }\n    }\n  }\n}\n\nquery ListClients($limit: Int = 10, $offset: Int = 0, $where: clients_bool_exp = {}, $order_by: [clients_order_by!] = [{name: asc}]) {\n  clients(limit: $limit, offset: $offset, where: $where, order_by: $order_by) {\n    ...ClientListItem\n  }\n  clients_aggregate(where: $where) {\n    aggregate {\n      count\n    }\n  }\n}\n\nquery SearchClients($search: String!, $limit: Int = 10) {\n  clients(\n    limit: $limit\n    where: {name: {_ilike: $search}, active: {_eq: true}}\n    order_by: {name: asc}\n  ) {\n    ...ClientBasic\n  }\n}\n\nquery GetActiveClients {\n  clients(where: {active: {_eq: true}}, order_by: {name: asc}) {\n    ...ClientBasic\n  }\n}\n\nquery GetClientWithPayrolls($id: uuid!) {\n  clients_by_pk(id: $id) {\n    ...ClientWithPayrolls\n  }\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "subscription ClientsSubscription {\n  clients(order_by: {name: asc}) {\n    ...ClientListItem\n  }\n}\n\nsubscription ClientSubscription($id: uuid!) {\n  clients_by_pk(id: $id) {\n    ...ClientDetailed\n  }\n}\n\nsubscription ActiveClientsSubscription {\n  clients(where: {active: {_eq: true}}, order_by: {name: asc}) {\n    ...ClientBasic\n  }\n}\n\nsubscription ClientPayrollsSubscription($clientId: uuid!) {\n  clients_by_pk(id: $clientId) {\n    id\n    name\n    payrolls(order_by: {name: asc}) {\n      id\n      name\n      status\n      employee_count\n      updated_at\n    }\n  }\n}"): (typeof documents)["subscription ClientsSubscription {\n  clients(order_by: {name: asc}) {\n    ...ClientListItem\n  }\n}\n\nsubscription ClientSubscription($id: uuid!) {\n  clients_by_pk(id: $id) {\n    ...ClientDetailed\n  }\n}\n\nsubscription ActiveClientsSubscription {\n  clients(where: {active: {_eq: true}}, order_by: {name: asc}) {\n    ...ClientBasic\n  }\n}\n\nsubscription ClientPayrollsSubscription($clientId: uuid!) {\n  clients_by_pk(id: $clientId) {\n    id\n    name\n    payrolls(order_by: {name: asc}) {\n      id\n      name\n      status\n      employee_count\n      updated_at\n    }\n  }\n}"];

export function graphql(source: string) {
  return (documents as any)[source] ?? {};
}

export type DocumentType<TDocumentNode extends DocumentNode<any, any>> = TDocumentNode extends DocumentNode<  infer TType,  any>  ? TType  : never;