---
description: 
globs: 
alwaysApply: false
---
Rightio, let's get this GraphQL documentation shipshape with some Aussie spelling and clearer wording.

---

# 📜 GraphQL Standards

## Rule Type: `always`

### ✅ Enforced Requirements

-   **Operation Storage**
    All GraphQL operations must be defined solely in `.graphql` files, never inline within `.ts`, `.tsx`, or `.js` files.

-   **Domain Organisation**
    Group operations by type within the appropriate files inside each domain folder:
    -   `queries.graphql`
    -   `mutations.graphql`
    -   `fragments.graphql`
    -   `subscriptions.graphql`

-   **Code Generation**
    Every `.graphql` file must be included in the GraphQL Code Generator pipeline. No operation should bypass Codegen.

-   **Centralised Type Output**
    All shared GraphQL types must be generated to:
    `shared/types/generated/graphql.ts`
    This includes enums, scalars, inputs, and operation result types.

-   **Component Integration**
    Do **not** use `gql` literals or inline query strings inside React components or hooks. Instead, import operations and hooks from Codegen's output (e.g., `useGetPayrollByIdQuery`).

### 🚫 Prohibited

-   Inline `gql` definitions in React components.
-   Fragment definitions mixed into query or mutation files.
-   Skipping Codegen for any GraphQL operation or fragment.
-   Defining operations in TypeScript files.

---

### 📁 Example Structure (Per Domain)

```
domains/payrolls/graphql/
├── fragments.graphql
├── queries.graphql
├── mutations.graphql
└── subscriptions.graphql
```

**Generated output:**

```
domains/payrolls/graphql/generated/
├── graphql.ts ← Apollo hooks + ops
├── gql.ts ← Raw gql documents
├── fragments.ts ← Fragment exports
└── index.ts ← Barrel file
```

**Shared output:**

`shared/types/generated/graphql.ts`

---

# 🔄 GraphQL Hook & Fragment Usage

## Rule Type: `always`

### ✅ Enforced Requirements

---

## 🔹 Hook Usage

-   **Generated Hooks Only**
    All GraphQL hooks (`useQuery`, `useMutation`, `useSubscription`) must be imported from Codegen's output. Do **not** define hooks using raw `gql` strings or inline documents in `.ts/.tsx` files.

-   **Import from Barrel File**
    Import hooks from the domain’s `index.ts` barrel file:

    #### ✅ Good

    ```typescript
    import { useGetPayrollByIdQuery } from '@/domains/payrolls/graphql/generated';
    ```

    #### 🚫 Bad

    ```typescript
    import { gql } from '@apollo/client';
    import { useQuery } from '@apollo/client';
    const MY_QUERY = gql`...`
    ```

-   **Naming Convention**
    -   Queries: `use<GetOperationName>Query`
    -   Mutations: `use<OperationName>Mutation`
    -   Subscriptions: `use<OperationName>Subscription`

-   **Collocate by Domain**
    Hooks should only be used within components or utilities in the same domain. Shared use cases must wrap hooks inside domain-agnostic functions within `lib/hooks/`.

-   **Encapsulation Preferred**
    Custom hooks should be created to isolate business logic or transform raw GraphQL results.

    #### ✅ Example

    ```typescript
    export function useActivePayrolls() {
      const { data, loading } = useGetActivePayrollsQuery();
      return data?.payrolls ?? [];
    }
    ```

-   **Use Typed Options**
    Always use `Apollo.QueryHookOptions` or `MutationHookOptions` from Codegen-generated types to enforce strict type safety.

---

## 🔹 Fragment Usage

-   **Separate `.graphql` File**
    Define all reusable fragments in the domain’s `fragments.graphql` file. Do not embed fragments inside query or mutation files.

-   **Codegen Output Only**
    Fragment documents must be imported from the generated `fragments.ts` file:

    #### ✅ Good

    ```typescript
    import { PayrollFieldsFragmentDoc } from '@/domains/payrolls/graphql/generated';
    ```

-   **Naming Convention**
    -   Fragment names: `PascalCase + Fragment` (e.g., `PayrollFieldsFragment`)
    -   Fragment documents: include `FragmentDoc` suffix (e.g., `PayrollFieldsFragmentDoc`)

-   **Use in Operations Only**
    Fragments should only be composed inside `.graphql` operations. Do not reference fields across files without a defined fragment.

    #### ✅ Example Fragment

    ```graphql
    fragment PayrollFields on payrolls {
      id
      pay_period_start
      pay_period_end
      status
    }
    ```

    #### ✅ Example Query using Fragment

    ```graphql
    query GetPayrollById($id: uuid!) {
      payrolls_by_pk(id: $id) {
        ...PayrollFields
      }
    }
    ```

-   **Generated Output**
    All fragments are exported from:

    ```
    domains/<domain>/graphql/generated/fragments.ts
    ```

---

### 📁 Example File Structure

```
domains/payrolls/graphql/
├── fragments.graphql
├── queries.graphql
├── mutations.graphql
└── generated/
    ├── graphql.ts
    ├── fragments.ts
    ├── gql.ts
    └── index.ts
```

### 🚫 Prohibited

-   Inline `gql` strings in components.
-   Fragment reuse without declaration in `fragments.graphql`.
-   Importing from raw `graphql.ts` instead of the barrel file.
-   Manually constructing Apollo hooks.

### ✅ Do This

```typescript
import { useGetPayrollByIdQuery } from '@/domains/payrolls/graphql/generated';

export function usePayroll(id: string) {
  const { data, loading } = useGetPayrollByIdQuery({ variables: { id } });
  return data?.payrolls_by_pk;
}
```