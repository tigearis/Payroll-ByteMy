# Critical Admin Operations
# CRITICAL sensitivity - admin only with full audit logging

"""
Get all users with auth details
@securityLevel: CRITICAL
@requiredRole: admin
@rateLimit: 5/minute
@audit: true
@compliance: SOC2-CC6.1, SOC2-CC7.1
@mfa: required
"""
query GetAllUsersAdmin($limit: Int = 100, $offset: Int = 0) {
  users(
    limit: $limit
    offset: $offset
    order_by: { updated_at: desc }
  ) {
    ...UserAdminDetails
  }
  users_aggregate {
    aggregate {
      count
    }
  }
}

"""
Export user data for compliance
@securityLevel: CRITICAL
@requiredRole: admin
@rateLimit: 1/hour
@audit: true
@compliance: SOC2-CC6.7, GDPR-Article-20
@mfa: required
@approval: required
"""
query ExportUserData($userId: UUID!) {
  users_by_pk(id: $userId) {
    ...UserAdminDetails
    leaves {
      id
      start_date
      end_date
      leave_type
      status
      reason # HIGH - PII
    }
    work_schedules {
      id
      work_day
      work_hours
    }
    notes_written {
      id
      entity_type
      entity_id
      content # HIGH - Potentially sensitive
      created_at
    }
  }
}

"""
Bulk update user roles
@securityLevel: CRITICAL
@requiredRole: admin
@rateLimit: 1/hour
@audit: true
@compliance: SOC2-CC6.1, SOC2-CC7.1
@mfa: required
"""
mutation BulkUpdateUserRoles($updates: [users_updates!]!) {
  update_users_many(updates: $updates) {
    affected_rows
    returning {
      id
      email
      role
    }
  }
}

"""
Delete user and all related data
@securityLevel: CRITICAL
@requiredRole: admin
@rateLimit: 1/day
@audit: true
@compliance: SOC2-CC6.1, GDPR-Article-17
@mfa: required
@approval: required
"""
mutation DeleteUserComplete($userId: UUID!) {
  # Delete in correct order to respect foreign keys
  delete_work_schedule(where: { user_id: { _eq: $userId } }) {
    affected_rows
  }
  delete_leave(where: { user_id: { _eq: $userId } }) {
    affected_rows
  }
  delete_notes(where: { user_id: { _eq: $userId } }) {
    affected_rows
  }
  # Reassign payrolls before deletion
  update_payrolls(
    where: { primary_consultant_user_id: { _eq: $userId } }
    _set: { primary_consultant_user_id: null }
  ) {
    affected_rows
  }
  update_payrolls(
    where: { backup_consultant_user_id: { _eq: $userId } }
    _set: { backup_consultant_user_id: null }
  ) {
    affected_rows
  }
  update_payrolls(
    where: { manager_user_id: { _eq: $userId } }
    _set: { manager_user_id: null }
  ) {
    affected_rows
  }
  # Finally delete the user
  delete_users_by_pk(id: $userId) {
    id
    email
  }
}

"""
System health check with sensitive metrics
@securityLevel: CRITICAL
@requiredRole: admin
@rateLimit: 10/minute
@audit: true
@compliance: SOC2-A1.1
"""
query SystemHealthCheck {
  users_aggregate {
    aggregate {
      count
    }
    nodes {
      role
    }
  }
  payrolls_aggregate {
    aggregate {
      count
      sum {
        employee_count # HIGH - Sensitive metric
      }
    }
  }
  audit_log_aggregate(
    where: { 
      created_at: { _gte: "now() - interval '24 hours'" }
    }
  ) {
    aggregate {
      count
    }
    nodes {
      action
      success
    }
  }
  security_event_log_aggregate(
    where: { 
      created_at: { _gte: "now() - interval '24 hours'" }
      resolved: { _eq: false }
    }
  ) {
    aggregate {
      count
    }
    nodes {
      event_type
      severity
    }
  }
}