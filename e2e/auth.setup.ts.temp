import { test as setup, expect } from '@playwright/test';
import fs from 'fs';
import path from 'path';
import { 
  STORAGE_STATE_ADMIN, 
  STORAGE_STATE_MANAGER, 
  STORAGE_STATE_CONSULTANT, 
  STORAGE_STATE_VIEWER,
  TEST_USERS,
  TEST_SELECTORS,
  TIMEOUTS
} from './utils/test-config';

async function authenticateUser(email: string, password: string, page: any, role: string) {
  console.log(`🔐 Authenticating user: ${email} (${role})`);
  
  try {
    // Navigate to sign-in page
    await page.goto('/sign-in', { waitUntil: 'networkidle' });
    
    // Wait for Clerk to initialize and form to appear
    await page.waitForFunction(() => {
      const emailInput = document.querySelector('input[name="email"]') || 
                        document.querySelector('input[type="email"]') ||
                        document.querySelector('input[name="identifier"]');
      const loadingText = document.body.textContent?.includes('Loading authentication...');
      return emailInput && !loadingText;
    }, { timeout: TIMEOUTS.authentication });
    
    // Wait a bit more for any dynamic loading
    await page.waitForTimeout(2000);
    
    // Fill email field using enhanced selectors
    const emailSelectors = TEST_SELECTORS.emailInput.split(', ');
    let emailFilled = false;
    
    for (const selector of emailSelectors) {
      try {
        const emailInput = page.locator(selector).first();
        if (await emailInput.isVisible({ timeout: 1000 })) {
          await emailInput.clear();
          await emailInput.fill(email);
          emailFilled = true;
          console.log(`✅ Email filled using selector: ${selector}`);
          break;
        }
      } catch (error) {
        // Try next selector
      }
    }
    
    if (!emailFilled) {
      await page.screenshot({ path: `e2e/debug-email-field-${role}.png` });
      throw new Error(`Could not find email input field for ${email}`);
    }
    
    // Fill password field using enhanced selectors
    const passwordSelectors = TEST_SELECTORS.passwordInput.split(', ');
    let passwordFilled = false;
    
    for (const selector of passwordSelectors) {
      try {
        const passwordInput = page.locator(selector).first();
        if (await passwordInput.isVisible({ timeout: 1000 })) {
          await passwordInput.clear();
          await passwordInput.fill(password);
          passwordFilled = true;
          console.log(`✅ Password filled using selector: ${selector}`);
          break;
        }
      } catch (error) {
        // Try next selector
      }
    }
    
    if (!passwordFilled) {
      await page.screenshot({ path: `e2e/debug-password-field-${role}.png` });
      throw new Error(`Could not find password input field for ${email}`);
    }
    
    // Submit the form using enhanced selectors
    const submitSelectors = TEST_SELECTORS.signInButton.split(', ');
    let submitted = false;
    
    for (const selector of submitSelectors) {
      try {
        const submitButton = page.locator(selector).first();
        if (await submitButton.isVisible({ timeout: 1000 })) {
          await submitButton.click();
          submitted = true;
          console.log(`✅ Form submitted using selector: ${selector}`);
          break;
        }
      } catch (error) {
        // Try next selector
      }
    }
    
    if (!submitted) {
      await page.screenshot({ path: `e2e/debug-submit-button-${role}.png` });
      throw new Error(`Could not find submit button for ${email}`);
    }
    
    // Wait for successful authentication and redirect
    await page.waitForURL(/\/dashboard/, { timeout: TIMEOUTS.authentication });
    console.log(`✅ Successfully authenticated ${email} and redirected to dashboard`);
    
    // Verify we're actually logged in by checking for authenticated content
    await page.waitForSelector(TEST_SELECTORS.mainContent, { timeout: TIMEOUTS.pageLoad });
    
    // Additional verification - check for user-specific content
    const pageContent = await page.textContent('body');
    if (pageContent?.includes('sign in') || pageContent?.includes('Sign In')) {
      throw new Error(`Authentication may have failed - still seeing sign in content for ${email}`);
    }
    
    console.log(`✅ Authentication verified successfully for ${email} (${role})`);
    
  } catch (error) {
    console.error(`❌ Authentication failed for ${email} (${role}):`, error.message);
    
    // Take detailed screenshot for debugging
    await page.screenshot({ 
      path: `e2e/debug-auth-failure-${role}-${Date.now()}.png`,
      fullPage: true 
    });
    
    // Log page content for debugging
    const pageContent = await page.textContent('body').catch(() => 'Could not get page content');
    console.error(`Page content preview: ${pageContent?.substring(0, 500)}...`);
    
    throw error;
  }
}

// Ensure auth directory exists
const authDir = path.dirname(STORAGE_STATE_ADMIN);
if (!fs.existsSync(authDir)) {
  fs.mkdirSync(authDir, { recursive: true });
  console.log(`✅ Created auth directory: ${authDir}`);
}

setup('authenticate as admin', async ({ page }) => {
  await authenticateUser(TEST_USERS.admin.email, TEST_USERS.admin.password, page, 'admin');
  await page.context().storageState({ path: STORAGE_STATE_ADMIN });
});

setup('authenticate as manager', async ({ page }) => {
  await authenticateUser(TEST_USERS.manager.email, TEST_USERS.manager.password, page, 'manager');
  await page.context().storageState({ path: STORAGE_STATE_MANAGER });
});

setup('authenticate as consultant', async ({ page }) => {
  await authenticateUser(TEST_USERS.consultant.email, TEST_USERS.consultant.password, page, 'consultant');
  await page.context().storageState({ path: STORAGE_STATE_CONSULTANT });
});

setup('authenticate as viewer', async ({ page }) => {
  await authenticateUser(TEST_USERS.viewer.email, TEST_USERS.viewer.password, page, 'viewer');
  await page.context().storageState({ path: STORAGE_STATE_VIEWER });
});