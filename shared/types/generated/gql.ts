/* eslint-disable */
import * as types from './graphql';
import { TypedDocumentNode as DocumentNode } from '@graphql-typed-document-node/core';

/**
 * Map of all GraphQL operations in the project.
 *
 * This map has several performance disadvantages:
 * 1. It is not tree-shakeable, so it will include all operations in the project.
 * 2. It is not minifiable, so the string of a GraphQL query will be multiple times inside the bundle.
 * 3. It does not support dead code elimination, so it will add unused operations.
 *
 * Therefore it is highly recommended to use the babel or swc plugin for production.
 * Learn more about it here: https://the-guild.dev/graphql/codegen/plugins/presets/preset-client#reducing-bundle-size
 */
type Documents = {
    "fragment UserCore on users {\n  id\n  name\n  email\n  username\n  role\n  isActive\n  isStaff\n  clerkUserId\n  createdAt\n  updatedAt\n}\n\nfragment UserBasic on users {\n  id\n  name\n  email\n  role\n  isActive\n}\n\nfragment UserWithManager on users {\n  ...UserCore\n  managerId\n  managerUser {\n    ...UserBasic\n  }\n}\n\nfragment RoleCore on roles {\n  id\n  name\n  description\n  displayName\n  priority\n  isSystemRole\n  createdAt\n}\n\nfragment PermissionCore on permissions {\n  id\n  action\n  description\n  resourceId\n  createdAt\n  updatedAt\n}\n\nfragment PermissionWithResource on permissions {\n  ...PermissionCore\n  relatedResource {\n    id\n    name\n    description\n  }\n}\n\nfragment ClientCore on clients {\n  id\n  name\n  contactEmail\n  contactPerson\n  contactPhone\n  active\n  createdAt\n  updatedAt\n}\n\nfragment ClientBasic on clients {\n  id\n  name\n  active\n}\n\nfragment ResourceCore on resources {\n  id\n  name\n  displayName\n  description\n  createdAt\n  updatedAt\n}\n\nfragment UserRoleCore on userRoles {\n  id\n  userId\n  roleId\n  createdAt\n  updatedAt\n}\n\nfragment RolePermissionCore on rolePermissions {\n  id\n  roleId\n  permissionId\n  conditions\n  createdAt\n  updatedAt\n}\n\nfragment AuditFields on auditLogs {\n  id\n  eventTime\n  action\n  resourceType\n  resourceId\n  userId\n  ipAddress\n  userAgent\n  success\n  userEmail\n  userRole\n}": typeof types.UserCoreFragmentDoc,
    "mutation PlaceholderMutation {\n  __typename\n}": typeof types.PlaceholderMutationDocument,
    "query GetDashboardStats {\n  clients_aggregate: clientsAggregate {\n    aggregate {\n      count\n    }\n  }\n  payrollsAggregate: payrollsAggregate {\n    aggregate {\n      count\n    }\n  }\n  active_payrolls: payrollsAggregate(where: {supersededDate: {_isNull: true}}) {\n    aggregate {\n      count\n    }\n  }\n  processing_queue: payrollsAggregate(\n    where: {supersededDate: {_isNull: true}, status: {_in: [\"Implementation\"]}}\n  ) {\n    aggregate {\n      count\n    }\n  }\n}\n\nquery GetSystemStats {\n  total_payrolls: payrollsAggregate {\n    aggregate {\n      count\n    }\n  }\n  total_clients: clientsAggregate {\n    aggregate {\n      count\n    }\n  }\n  total_users: usersAggregate {\n    aggregate {\n      count\n    }\n  }\n}\n\nquery GetUpcomingPayrolls($from_date: date!, $limit: Int = 10) {\n  payrolls(\n    where: {supersededDate: {_isNull: true}, payrollDates: {adjustedEftDate: {_gte: $from_date}}}\n    orderBy: {payrollDatesAggregate: {min: {adjustedEftDate: ASC}}}\n    limit: $limit\n  ) {\n    id\n    name\n    status\n    client {\n      id\n      name\n    }\n    payrollDates(\n      where: {adjustedEftDate: {_gte: $from_date}}\n      orderBy: {adjustedEftDate: ASC}\n      limit: 1\n    ) {\n      id\n      adjustedEftDate\n      processingDate\n    }\n  }\n}\n\nquery GetUnifiedDashboardData($from_date: date!, $limit: Int = 5) {\n  clients_aggregate: clientsAggregate {\n    aggregate {\n      count\n    }\n  }\n  payrollsAggregate: payrollsAggregate {\n    aggregate {\n      count\n    }\n  }\n  active_payrolls: payrollsAggregate(where: {supersededDate: {_isNull: true}}) {\n    aggregate {\n      count\n    }\n  }\n  processing_queue: payrollsAggregate(where: {supersededDate: {_isNull: true}}) {\n    aggregate {\n      count\n    }\n  }\n  active_users: usersAggregate(where: {isActive: {_eq: true}}) {\n    aggregate {\n      count\n    }\n  }\n  upcoming_payrolls: payrolls(\n    where: {supersededDate: {_isNull: true}, payrollDates: {adjustedEftDate: {_gte: $from_date}}}\n    orderBy: {payrollDatesAggregate: {min: {adjustedEftDate: ASC}}}\n    limit: $limit\n  ) {\n    id\n    name\n    status\n    employeeCount\n    client {\n      id\n      name\n    }\n    primaryConsultant {\n      id\n      name\n    }\n    payrollDates(\n      where: {adjustedEftDate: {_gte: $from_date}}\n      orderBy: {adjustedEftDate: ASC}\n      limit: 1\n    ) {\n      id\n      adjustedEftDate\n      processingDate\n    }\n  }\n  recent_payroll_updates: payrolls(\n    where: {supersededDate: {_isNull: true}}\n    orderBy: {updatedAt: DESC}\n    limit: 3\n  ) {\n    id\n    name\n    status\n    updatedAt\n    client {\n      name\n    }\n  }\n}\n\nquery GetDashboardStatsMinimal {\n  clientCount: clientsAggregate {\n    aggregate {\n      count\n    }\n  }\n  payrollCount: payrollsAggregate(where: {supersededDate: {_isNull: true}}) {\n    aggregate {\n      count\n    }\n  }\n  userCount: usersAggregate(where: {isActive: {_eq: true}}) {\n    aggregate {\n      count\n    }\n  }\n}\n\nquery GetUpcomingPayrollsMinimal($from_date: date!, $limit: Int = 5) {\n  payrolls(\n    where: {supersededDate: {_isNull: true}, payrollDates: {adjustedEftDate: {_gte: $from_date}}}\n    orderBy: {payrollDatesAggregate: {min: {adjustedEftDate: ASC}}}\n    limit: $limit\n  ) {\n    id\n    name\n    status\n    client {\n      name\n    }\n    nextDate: payrollDates(\n      where: {adjustedEftDate: {_gte: $from_date}}\n      orderBy: {adjustedEftDate: ASC}\n      limit: 1\n    ) {\n      adjustedEftDate\n    }\n  }\n}\n\nquery GetRecentActivityMinimal($limit: Int = 10) {\n  payrolls(\n    where: {supersededDate: {_isNull: true}}\n    orderBy: {updatedAt: DESC}\n    limit: $limit\n  ) {\n    id\n    name\n    status\n    updatedAt\n    client {\n      name\n    }\n  }\n}\n\nquery GetQuickStatsOnly {\n  totals: payrollsAggregate(where: {supersededDate: {_isNull: true}}) {\n    aggregate {\n      count\n    }\n  }\n  activeClients: clientsAggregate(where: {active: {_eq: true}}) {\n    aggregate {\n      count\n    }\n  }\n  activeUsers: usersAggregate(where: {isActive: {_eq: true}}) {\n    aggregate {\n      count\n    }\n  }\n}": typeof types.GetDashboardStatsDocument,
    "subscription ClientCountUpdates {\n  clientsAggregate(where: {active: {_eq: true}}) {\n    aggregate {\n      count\n    }\n  }\n}\n\nsubscription PayrollCountUpdates {\n  payrollsAggregate(where: {supersededDate: {_isNull: true}}) {\n    aggregate {\n      count\n    }\n  }\n}\n\nsubscription UserCountUpdates {\n  usersAggregate(where: {isActive: {_eq: true}}) {\n    aggregate {\n      count\n    }\n  }\n}\n\nsubscription RecentPayrollActivity {\n  payrolls(\n    where: {supersededDate: {_isNull: true}}\n    orderBy: {updatedAt: DESC}\n    limit: 5\n  ) {\n    id\n    name\n    status\n    updatedAt\n    client {\n      name\n    }\n  }\n}\n\nsubscription RecentUserActivity {\n  users(where: {isActive: {_eq: true}}, orderBy: {updatedAt: DESC}, limit: 3) {\n    id\n    name\n    role\n    updatedAt\n  }\n}\n\nsubscription CriticalPayrollNotifications {\n  payrolls(\n    where: {supersededDate: {_isNull: true}, status: {_in: [\"Issue\", \"Critical\"]}}\n    orderBy: {updatedAt: DESC}\n    limit: 10\n  ) {\n    id\n    name\n    status\n    client {\n      name\n    }\n    primaryConsultant {\n      name\n    }\n  }\n}\n\nsubscription UpcomingPayrollsUpdates($fromDate: date!) {\n  payrolls(\n    where: {supersededDate: {_isNull: true}, payrollDates: {adjustedEftDate: {_gte: $fromDate}}}\n    orderBy: {payrollDatesAggregate: {min: {adjustedEftDate: ASC}}}\n    limit: 5\n  ) {\n    id\n    name\n    status\n    client {\n      name\n    }\n    nextDate: payrollDates(\n      where: {adjustedEftDate: {_gte: $fromDate}}\n      orderBy: {adjustedEftDate: ASC}\n      limit: 1\n    ) {\n      adjustedEftDate\n    }\n  }\n}": typeof types.ClientCountUpdatesDocument,
};
const documents: Documents = {
    "fragment UserCore on users {\n  id\n  name\n  email\n  username\n  role\n  isActive\n  isStaff\n  clerkUserId\n  createdAt\n  updatedAt\n}\n\nfragment UserBasic on users {\n  id\n  name\n  email\n  role\n  isActive\n}\n\nfragment UserWithManager on users {\n  ...UserCore\n  managerId\n  managerUser {\n    ...UserBasic\n  }\n}\n\nfragment RoleCore on roles {\n  id\n  name\n  description\n  displayName\n  priority\n  isSystemRole\n  createdAt\n}\n\nfragment PermissionCore on permissions {\n  id\n  action\n  description\n  resourceId\n  createdAt\n  updatedAt\n}\n\nfragment PermissionWithResource on permissions {\n  ...PermissionCore\n  relatedResource {\n    id\n    name\n    description\n  }\n}\n\nfragment ClientCore on clients {\n  id\n  name\n  contactEmail\n  contactPerson\n  contactPhone\n  active\n  createdAt\n  updatedAt\n}\n\nfragment ClientBasic on clients {\n  id\n  name\n  active\n}\n\nfragment ResourceCore on resources {\n  id\n  name\n  displayName\n  description\n  createdAt\n  updatedAt\n}\n\nfragment UserRoleCore on userRoles {\n  id\n  userId\n  roleId\n  createdAt\n  updatedAt\n}\n\nfragment RolePermissionCore on rolePermissions {\n  id\n  roleId\n  permissionId\n  conditions\n  createdAt\n  updatedAt\n}\n\nfragment AuditFields on auditLogs {\n  id\n  eventTime\n  action\n  resourceType\n  resourceId\n  userId\n  ipAddress\n  userAgent\n  success\n  userEmail\n  userRole\n}": types.UserCoreFragmentDoc,
    "mutation PlaceholderMutation {\n  __typename\n}": types.PlaceholderMutationDocument,
    "query GetDashboardStats {\n  clients_aggregate: clientsAggregate {\n    aggregate {\n      count\n    }\n  }\n  payrollsAggregate: payrollsAggregate {\n    aggregate {\n      count\n    }\n  }\n  active_payrolls: payrollsAggregate(where: {supersededDate: {_isNull: true}}) {\n    aggregate {\n      count\n    }\n  }\n  processing_queue: payrollsAggregate(\n    where: {supersededDate: {_isNull: true}, status: {_in: [\"Implementation\"]}}\n  ) {\n    aggregate {\n      count\n    }\n  }\n}\n\nquery GetSystemStats {\n  total_payrolls: payrollsAggregate {\n    aggregate {\n      count\n    }\n  }\n  total_clients: clientsAggregate {\n    aggregate {\n      count\n    }\n  }\n  total_users: usersAggregate {\n    aggregate {\n      count\n    }\n  }\n}\n\nquery GetUpcomingPayrolls($from_date: date!, $limit: Int = 10) {\n  payrolls(\n    where: {supersededDate: {_isNull: true}, payrollDates: {adjustedEftDate: {_gte: $from_date}}}\n    orderBy: {payrollDatesAggregate: {min: {adjustedEftDate: ASC}}}\n    limit: $limit\n  ) {\n    id\n    name\n    status\n    client {\n      id\n      name\n    }\n    payrollDates(\n      where: {adjustedEftDate: {_gte: $from_date}}\n      orderBy: {adjustedEftDate: ASC}\n      limit: 1\n    ) {\n      id\n      adjustedEftDate\n      processingDate\n    }\n  }\n}\n\nquery GetUnifiedDashboardData($from_date: date!, $limit: Int = 5) {\n  clients_aggregate: clientsAggregate {\n    aggregate {\n      count\n    }\n  }\n  payrollsAggregate: payrollsAggregate {\n    aggregate {\n      count\n    }\n  }\n  active_payrolls: payrollsAggregate(where: {supersededDate: {_isNull: true}}) {\n    aggregate {\n      count\n    }\n  }\n  processing_queue: payrollsAggregate(where: {supersededDate: {_isNull: true}}) {\n    aggregate {\n      count\n    }\n  }\n  active_users: usersAggregate(where: {isActive: {_eq: true}}) {\n    aggregate {\n      count\n    }\n  }\n  upcoming_payrolls: payrolls(\n    where: {supersededDate: {_isNull: true}, payrollDates: {adjustedEftDate: {_gte: $from_date}}}\n    orderBy: {payrollDatesAggregate: {min: {adjustedEftDate: ASC}}}\n    limit: $limit\n  ) {\n    id\n    name\n    status\n    employeeCount\n    client {\n      id\n      name\n    }\n    primaryConsultant {\n      id\n      name\n    }\n    payrollDates(\n      where: {adjustedEftDate: {_gte: $from_date}}\n      orderBy: {adjustedEftDate: ASC}\n      limit: 1\n    ) {\n      id\n      adjustedEftDate\n      processingDate\n    }\n  }\n  recent_payroll_updates: payrolls(\n    where: {supersededDate: {_isNull: true}}\n    orderBy: {updatedAt: DESC}\n    limit: 3\n  ) {\n    id\n    name\n    status\n    updatedAt\n    client {\n      name\n    }\n  }\n}\n\nquery GetDashboardStatsMinimal {\n  clientCount: clientsAggregate {\n    aggregate {\n      count\n    }\n  }\n  payrollCount: payrollsAggregate(where: {supersededDate: {_isNull: true}}) {\n    aggregate {\n      count\n    }\n  }\n  userCount: usersAggregate(where: {isActive: {_eq: true}}) {\n    aggregate {\n      count\n    }\n  }\n}\n\nquery GetUpcomingPayrollsMinimal($from_date: date!, $limit: Int = 5) {\n  payrolls(\n    where: {supersededDate: {_isNull: true}, payrollDates: {adjustedEftDate: {_gte: $from_date}}}\n    orderBy: {payrollDatesAggregate: {min: {adjustedEftDate: ASC}}}\n    limit: $limit\n  ) {\n    id\n    name\n    status\n    client {\n      name\n    }\n    nextDate: payrollDates(\n      where: {adjustedEftDate: {_gte: $from_date}}\n      orderBy: {adjustedEftDate: ASC}\n      limit: 1\n    ) {\n      adjustedEftDate\n    }\n  }\n}\n\nquery GetRecentActivityMinimal($limit: Int = 10) {\n  payrolls(\n    where: {supersededDate: {_isNull: true}}\n    orderBy: {updatedAt: DESC}\n    limit: $limit\n  ) {\n    id\n    name\n    status\n    updatedAt\n    client {\n      name\n    }\n  }\n}\n\nquery GetQuickStatsOnly {\n  totals: payrollsAggregate(where: {supersededDate: {_isNull: true}}) {\n    aggregate {\n      count\n    }\n  }\n  activeClients: clientsAggregate(where: {active: {_eq: true}}) {\n    aggregate {\n      count\n    }\n  }\n  activeUsers: usersAggregate(where: {isActive: {_eq: true}}) {\n    aggregate {\n      count\n    }\n  }\n}": types.GetDashboardStatsDocument,
    "subscription ClientCountUpdates {\n  clientsAggregate(where: {active: {_eq: true}}) {\n    aggregate {\n      count\n    }\n  }\n}\n\nsubscription PayrollCountUpdates {\n  payrollsAggregate(where: {supersededDate: {_isNull: true}}) {\n    aggregate {\n      count\n    }\n  }\n}\n\nsubscription UserCountUpdates {\n  usersAggregate(where: {isActive: {_eq: true}}) {\n    aggregate {\n      count\n    }\n  }\n}\n\nsubscription RecentPayrollActivity {\n  payrolls(\n    where: {supersededDate: {_isNull: true}}\n    orderBy: {updatedAt: DESC}\n    limit: 5\n  ) {\n    id\n    name\n    status\n    updatedAt\n    client {\n      name\n    }\n  }\n}\n\nsubscription RecentUserActivity {\n  users(where: {isActive: {_eq: true}}, orderBy: {updatedAt: DESC}, limit: 3) {\n    id\n    name\n    role\n    updatedAt\n  }\n}\n\nsubscription CriticalPayrollNotifications {\n  payrolls(\n    where: {supersededDate: {_isNull: true}, status: {_in: [\"Issue\", \"Critical\"]}}\n    orderBy: {updatedAt: DESC}\n    limit: 10\n  ) {\n    id\n    name\n    status\n    client {\n      name\n    }\n    primaryConsultant {\n      name\n    }\n  }\n}\n\nsubscription UpcomingPayrollsUpdates($fromDate: date!) {\n  payrolls(\n    where: {supersededDate: {_isNull: true}, payrollDates: {adjustedEftDate: {_gte: $fromDate}}}\n    orderBy: {payrollDatesAggregate: {min: {adjustedEftDate: ASC}}}\n    limit: 5\n  ) {\n    id\n    name\n    status\n    client {\n      name\n    }\n    nextDate: payrollDates(\n      where: {adjustedEftDate: {_gte: $fromDate}}\n      orderBy: {adjustedEftDate: ASC}\n      limit: 1\n    ) {\n      adjustedEftDate\n    }\n  }\n}": types.ClientCountUpdatesDocument,
};

/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 *
 *
 * @example
 * ```ts
 * const query = gql(`query GetUser($id: ID!) { user(id: $id) { name } }`);
 * ```
 *
 * The query argument is unknown!
 * Please regenerate the types.
 */
export function gql(source: string): unknown;

/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "fragment UserCore on users {\n  id\n  name\n  email\n  username\n  role\n  isActive\n  isStaff\n  clerkUserId\n  createdAt\n  updatedAt\n}\n\nfragment UserBasic on users {\n  id\n  name\n  email\n  role\n  isActive\n}\n\nfragment UserWithManager on users {\n  ...UserCore\n  managerId\n  managerUser {\n    ...UserBasic\n  }\n}\n\nfragment RoleCore on roles {\n  id\n  name\n  description\n  displayName\n  priority\n  isSystemRole\n  createdAt\n}\n\nfragment PermissionCore on permissions {\n  id\n  action\n  description\n  resourceId\n  createdAt\n  updatedAt\n}\n\nfragment PermissionWithResource on permissions {\n  ...PermissionCore\n  relatedResource {\n    id\n    name\n    description\n  }\n}\n\nfragment ClientCore on clients {\n  id\n  name\n  contactEmail\n  contactPerson\n  contactPhone\n  active\n  createdAt\n  updatedAt\n}\n\nfragment ClientBasic on clients {\n  id\n  name\n  active\n}\n\nfragment ResourceCore on resources {\n  id\n  name\n  displayName\n  description\n  createdAt\n  updatedAt\n}\n\nfragment UserRoleCore on userRoles {\n  id\n  userId\n  roleId\n  createdAt\n  updatedAt\n}\n\nfragment RolePermissionCore on rolePermissions {\n  id\n  roleId\n  permissionId\n  conditions\n  createdAt\n  updatedAt\n}\n\nfragment AuditFields on auditLogs {\n  id\n  eventTime\n  action\n  resourceType\n  resourceId\n  userId\n  ipAddress\n  userAgent\n  success\n  userEmail\n  userRole\n}"): (typeof documents)["fragment UserCore on users {\n  id\n  name\n  email\n  username\n  role\n  isActive\n  isStaff\n  clerkUserId\n  createdAt\n  updatedAt\n}\n\nfragment UserBasic on users {\n  id\n  name\n  email\n  role\n  isActive\n}\n\nfragment UserWithManager on users {\n  ...UserCore\n  managerId\n  managerUser {\n    ...UserBasic\n  }\n}\n\nfragment RoleCore on roles {\n  id\n  name\n  description\n  displayName\n  priority\n  isSystemRole\n  createdAt\n}\n\nfragment PermissionCore on permissions {\n  id\n  action\n  description\n  resourceId\n  createdAt\n  updatedAt\n}\n\nfragment PermissionWithResource on permissions {\n  ...PermissionCore\n  relatedResource {\n    id\n    name\n    description\n  }\n}\n\nfragment ClientCore on clients {\n  id\n  name\n  contactEmail\n  contactPerson\n  contactPhone\n  active\n  createdAt\n  updatedAt\n}\n\nfragment ClientBasic on clients {\n  id\n  name\n  active\n}\n\nfragment ResourceCore on resources {\n  id\n  name\n  displayName\n  description\n  createdAt\n  updatedAt\n}\n\nfragment UserRoleCore on userRoles {\n  id\n  userId\n  roleId\n  createdAt\n  updatedAt\n}\n\nfragment RolePermissionCore on rolePermissions {\n  id\n  roleId\n  permissionId\n  conditions\n  createdAt\n  updatedAt\n}\n\nfragment AuditFields on auditLogs {\n  id\n  eventTime\n  action\n  resourceType\n  resourceId\n  userId\n  ipAddress\n  userAgent\n  success\n  userEmail\n  userRole\n}"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "mutation PlaceholderMutation {\n  __typename\n}"): (typeof documents)["mutation PlaceholderMutation {\n  __typename\n}"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "query GetDashboardStats {\n  clients_aggregate: clientsAggregate {\n    aggregate {\n      count\n    }\n  }\n  payrollsAggregate: payrollsAggregate {\n    aggregate {\n      count\n    }\n  }\n  active_payrolls: payrollsAggregate(where: {supersededDate: {_isNull: true}}) {\n    aggregate {\n      count\n    }\n  }\n  processing_queue: payrollsAggregate(\n    where: {supersededDate: {_isNull: true}, status: {_in: [\"Implementation\"]}}\n  ) {\n    aggregate {\n      count\n    }\n  }\n}\n\nquery GetSystemStats {\n  total_payrolls: payrollsAggregate {\n    aggregate {\n      count\n    }\n  }\n  total_clients: clientsAggregate {\n    aggregate {\n      count\n    }\n  }\n  total_users: usersAggregate {\n    aggregate {\n      count\n    }\n  }\n}\n\nquery GetUpcomingPayrolls($from_date: date!, $limit: Int = 10) {\n  payrolls(\n    where: {supersededDate: {_isNull: true}, payrollDates: {adjustedEftDate: {_gte: $from_date}}}\n    orderBy: {payrollDatesAggregate: {min: {adjustedEftDate: ASC}}}\n    limit: $limit\n  ) {\n    id\n    name\n    status\n    client {\n      id\n      name\n    }\n    payrollDates(\n      where: {adjustedEftDate: {_gte: $from_date}}\n      orderBy: {adjustedEftDate: ASC}\n      limit: 1\n    ) {\n      id\n      adjustedEftDate\n      processingDate\n    }\n  }\n}\n\nquery GetUnifiedDashboardData($from_date: date!, $limit: Int = 5) {\n  clients_aggregate: clientsAggregate {\n    aggregate {\n      count\n    }\n  }\n  payrollsAggregate: payrollsAggregate {\n    aggregate {\n      count\n    }\n  }\n  active_payrolls: payrollsAggregate(where: {supersededDate: {_isNull: true}}) {\n    aggregate {\n      count\n    }\n  }\n  processing_queue: payrollsAggregate(where: {supersededDate: {_isNull: true}}) {\n    aggregate {\n      count\n    }\n  }\n  active_users: usersAggregate(where: {isActive: {_eq: true}}) {\n    aggregate {\n      count\n    }\n  }\n  upcoming_payrolls: payrolls(\n    where: {supersededDate: {_isNull: true}, payrollDates: {adjustedEftDate: {_gte: $from_date}}}\n    orderBy: {payrollDatesAggregate: {min: {adjustedEftDate: ASC}}}\n    limit: $limit\n  ) {\n    id\n    name\n    status\n    employeeCount\n    client {\n      id\n      name\n    }\n    primaryConsultant {\n      id\n      name\n    }\n    payrollDates(\n      where: {adjustedEftDate: {_gte: $from_date}}\n      orderBy: {adjustedEftDate: ASC}\n      limit: 1\n    ) {\n      id\n      adjustedEftDate\n      processingDate\n    }\n  }\n  recent_payroll_updates: payrolls(\n    where: {supersededDate: {_isNull: true}}\n    orderBy: {updatedAt: DESC}\n    limit: 3\n  ) {\n    id\n    name\n    status\n    updatedAt\n    client {\n      name\n    }\n  }\n}\n\nquery GetDashboardStatsMinimal {\n  clientCount: clientsAggregate {\n    aggregate {\n      count\n    }\n  }\n  payrollCount: payrollsAggregate(where: {supersededDate: {_isNull: true}}) {\n    aggregate {\n      count\n    }\n  }\n  userCount: usersAggregate(where: {isActive: {_eq: true}}) {\n    aggregate {\n      count\n    }\n  }\n}\n\nquery GetUpcomingPayrollsMinimal($from_date: date!, $limit: Int = 5) {\n  payrolls(\n    where: {supersededDate: {_isNull: true}, payrollDates: {adjustedEftDate: {_gte: $from_date}}}\n    orderBy: {payrollDatesAggregate: {min: {adjustedEftDate: ASC}}}\n    limit: $limit\n  ) {\n    id\n    name\n    status\n    client {\n      name\n    }\n    nextDate: payrollDates(\n      where: {adjustedEftDate: {_gte: $from_date}}\n      orderBy: {adjustedEftDate: ASC}\n      limit: 1\n    ) {\n      adjustedEftDate\n    }\n  }\n}\n\nquery GetRecentActivityMinimal($limit: Int = 10) {\n  payrolls(\n    where: {supersededDate: {_isNull: true}}\n    orderBy: {updatedAt: DESC}\n    limit: $limit\n  ) {\n    id\n    name\n    status\n    updatedAt\n    client {\n      name\n    }\n  }\n}\n\nquery GetQuickStatsOnly {\n  totals: payrollsAggregate(where: {supersededDate: {_isNull: true}}) {\n    aggregate {\n      count\n    }\n  }\n  activeClients: clientsAggregate(where: {active: {_eq: true}}) {\n    aggregate {\n      count\n    }\n  }\n  activeUsers: usersAggregate(where: {isActive: {_eq: true}}) {\n    aggregate {\n      count\n    }\n  }\n}"): (typeof documents)["query GetDashboardStats {\n  clients_aggregate: clientsAggregate {\n    aggregate {\n      count\n    }\n  }\n  payrollsAggregate: payrollsAggregate {\n    aggregate {\n      count\n    }\n  }\n  active_payrolls: payrollsAggregate(where: {supersededDate: {_isNull: true}}) {\n    aggregate {\n      count\n    }\n  }\n  processing_queue: payrollsAggregate(\n    where: {supersededDate: {_isNull: true}, status: {_in: [\"Implementation\"]}}\n  ) {\n    aggregate {\n      count\n    }\n  }\n}\n\nquery GetSystemStats {\n  total_payrolls: payrollsAggregate {\n    aggregate {\n      count\n    }\n  }\n  total_clients: clientsAggregate {\n    aggregate {\n      count\n    }\n  }\n  total_users: usersAggregate {\n    aggregate {\n      count\n    }\n  }\n}\n\nquery GetUpcomingPayrolls($from_date: date!, $limit: Int = 10) {\n  payrolls(\n    where: {supersededDate: {_isNull: true}, payrollDates: {adjustedEftDate: {_gte: $from_date}}}\n    orderBy: {payrollDatesAggregate: {min: {adjustedEftDate: ASC}}}\n    limit: $limit\n  ) {\n    id\n    name\n    status\n    client {\n      id\n      name\n    }\n    payrollDates(\n      where: {adjustedEftDate: {_gte: $from_date}}\n      orderBy: {adjustedEftDate: ASC}\n      limit: 1\n    ) {\n      id\n      adjustedEftDate\n      processingDate\n    }\n  }\n}\n\nquery GetUnifiedDashboardData($from_date: date!, $limit: Int = 5) {\n  clients_aggregate: clientsAggregate {\n    aggregate {\n      count\n    }\n  }\n  payrollsAggregate: payrollsAggregate {\n    aggregate {\n      count\n    }\n  }\n  active_payrolls: payrollsAggregate(where: {supersededDate: {_isNull: true}}) {\n    aggregate {\n      count\n    }\n  }\n  processing_queue: payrollsAggregate(where: {supersededDate: {_isNull: true}}) {\n    aggregate {\n      count\n    }\n  }\n  active_users: usersAggregate(where: {isActive: {_eq: true}}) {\n    aggregate {\n      count\n    }\n  }\n  upcoming_payrolls: payrolls(\n    where: {supersededDate: {_isNull: true}, payrollDates: {adjustedEftDate: {_gte: $from_date}}}\n    orderBy: {payrollDatesAggregate: {min: {adjustedEftDate: ASC}}}\n    limit: $limit\n  ) {\n    id\n    name\n    status\n    employeeCount\n    client {\n      id\n      name\n    }\n    primaryConsultant {\n      id\n      name\n    }\n    payrollDates(\n      where: {adjustedEftDate: {_gte: $from_date}}\n      orderBy: {adjustedEftDate: ASC}\n      limit: 1\n    ) {\n      id\n      adjustedEftDate\n      processingDate\n    }\n  }\n  recent_payroll_updates: payrolls(\n    where: {supersededDate: {_isNull: true}}\n    orderBy: {updatedAt: DESC}\n    limit: 3\n  ) {\n    id\n    name\n    status\n    updatedAt\n    client {\n      name\n    }\n  }\n}\n\nquery GetDashboardStatsMinimal {\n  clientCount: clientsAggregate {\n    aggregate {\n      count\n    }\n  }\n  payrollCount: payrollsAggregate(where: {supersededDate: {_isNull: true}}) {\n    aggregate {\n      count\n    }\n  }\n  userCount: usersAggregate(where: {isActive: {_eq: true}}) {\n    aggregate {\n      count\n    }\n  }\n}\n\nquery GetUpcomingPayrollsMinimal($from_date: date!, $limit: Int = 5) {\n  payrolls(\n    where: {supersededDate: {_isNull: true}, payrollDates: {adjustedEftDate: {_gte: $from_date}}}\n    orderBy: {payrollDatesAggregate: {min: {adjustedEftDate: ASC}}}\n    limit: $limit\n  ) {\n    id\n    name\n    status\n    client {\n      name\n    }\n    nextDate: payrollDates(\n      where: {adjustedEftDate: {_gte: $from_date}}\n      orderBy: {adjustedEftDate: ASC}\n      limit: 1\n    ) {\n      adjustedEftDate\n    }\n  }\n}\n\nquery GetRecentActivityMinimal($limit: Int = 10) {\n  payrolls(\n    where: {supersededDate: {_isNull: true}}\n    orderBy: {updatedAt: DESC}\n    limit: $limit\n  ) {\n    id\n    name\n    status\n    updatedAt\n    client {\n      name\n    }\n  }\n}\n\nquery GetQuickStatsOnly {\n  totals: payrollsAggregate(where: {supersededDate: {_isNull: true}}) {\n    aggregate {\n      count\n    }\n  }\n  activeClients: clientsAggregate(where: {active: {_eq: true}}) {\n    aggregate {\n      count\n    }\n  }\n  activeUsers: usersAggregate(where: {isActive: {_eq: true}}) {\n    aggregate {\n      count\n    }\n  }\n}"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "subscription ClientCountUpdates {\n  clientsAggregate(where: {active: {_eq: true}}) {\n    aggregate {\n      count\n    }\n  }\n}\n\nsubscription PayrollCountUpdates {\n  payrollsAggregate(where: {supersededDate: {_isNull: true}}) {\n    aggregate {\n      count\n    }\n  }\n}\n\nsubscription UserCountUpdates {\n  usersAggregate(where: {isActive: {_eq: true}}) {\n    aggregate {\n      count\n    }\n  }\n}\n\nsubscription RecentPayrollActivity {\n  payrolls(\n    where: {supersededDate: {_isNull: true}}\n    orderBy: {updatedAt: DESC}\n    limit: 5\n  ) {\n    id\n    name\n    status\n    updatedAt\n    client {\n      name\n    }\n  }\n}\n\nsubscription RecentUserActivity {\n  users(where: {isActive: {_eq: true}}, orderBy: {updatedAt: DESC}, limit: 3) {\n    id\n    name\n    role\n    updatedAt\n  }\n}\n\nsubscription CriticalPayrollNotifications {\n  payrolls(\n    where: {supersededDate: {_isNull: true}, status: {_in: [\"Issue\", \"Critical\"]}}\n    orderBy: {updatedAt: DESC}\n    limit: 10\n  ) {\n    id\n    name\n    status\n    client {\n      name\n    }\n    primaryConsultant {\n      name\n    }\n  }\n}\n\nsubscription UpcomingPayrollsUpdates($fromDate: date!) {\n  payrolls(\n    where: {supersededDate: {_isNull: true}, payrollDates: {adjustedEftDate: {_gte: $fromDate}}}\n    orderBy: {payrollDatesAggregate: {min: {adjustedEftDate: ASC}}}\n    limit: 5\n  ) {\n    id\n    name\n    status\n    client {\n      name\n    }\n    nextDate: payrollDates(\n      where: {adjustedEftDate: {_gte: $fromDate}}\n      orderBy: {adjustedEftDate: ASC}\n      limit: 1\n    ) {\n      adjustedEftDate\n    }\n  }\n}"): (typeof documents)["subscription ClientCountUpdates {\n  clientsAggregate(where: {active: {_eq: true}}) {\n    aggregate {\n      count\n    }\n  }\n}\n\nsubscription PayrollCountUpdates {\n  payrollsAggregate(where: {supersededDate: {_isNull: true}}) {\n    aggregate {\n      count\n    }\n  }\n}\n\nsubscription UserCountUpdates {\n  usersAggregate(where: {isActive: {_eq: true}}) {\n    aggregate {\n      count\n    }\n  }\n}\n\nsubscription RecentPayrollActivity {\n  payrolls(\n    where: {supersededDate: {_isNull: true}}\n    orderBy: {updatedAt: DESC}\n    limit: 5\n  ) {\n    id\n    name\n    status\n    updatedAt\n    client {\n      name\n    }\n  }\n}\n\nsubscription RecentUserActivity {\n  users(where: {isActive: {_eq: true}}, orderBy: {updatedAt: DESC}, limit: 3) {\n    id\n    name\n    role\n    updatedAt\n  }\n}\n\nsubscription CriticalPayrollNotifications {\n  payrolls(\n    where: {supersededDate: {_isNull: true}, status: {_in: [\"Issue\", \"Critical\"]}}\n    orderBy: {updatedAt: DESC}\n    limit: 10\n  ) {\n    id\n    name\n    status\n    client {\n      name\n    }\n    primaryConsultant {\n      name\n    }\n  }\n}\n\nsubscription UpcomingPayrollsUpdates($fromDate: date!) {\n  payrolls(\n    where: {supersededDate: {_isNull: true}, payrollDates: {adjustedEftDate: {_gte: $fromDate}}}\n    orderBy: {payrollDatesAggregate: {min: {adjustedEftDate: ASC}}}\n    limit: 5\n  ) {\n    id\n    name\n    status\n    client {\n      name\n    }\n    nextDate: payrollDates(\n      where: {adjustedEftDate: {_gte: $fromDate}}\n      orderBy: {adjustedEftDate: ASC}\n      limit: 1\n    ) {\n      adjustedEftDate\n    }\n  }\n}"];

export function gql(source: string) {
  return (documents as any)[source] ?? {};
}

export type DocumentType<TDocumentNode extends DocumentNode<any, any>> = TDocumentNode extends DocumentNode<  infer TType,  any>  ? TType  : never;