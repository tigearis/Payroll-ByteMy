# Shared GraphQL Fragments
# Updated to match standardized naming conventions (Priority 3 technical debt resolution)
# Following {EntityName}{Purpose} naming pattern

# ============================================
# User Fragments (Hierarchical: Minimal → Core → Basic → Extended → Complete)
# ============================================

# Minimal user info for references (1-3 fields)
fragment UserMinimal on users {
  id
  firstName
  lastName
  computedName
  email
}

# Core user fields for basic operations (4-6 fields) - SHARED VERSION
fragment UserCoreShared on users {
  ...UserMinimal
  role
  isActive
}

# Standard user info for lists and basic operations (7-8 fields)
fragment UserBasic on users {
  ...UserCoreShared
  clerkUserId
  createdAt
  updatedAt
}

# @deprecated Use UserBasic instead for consistency
fragment UserBase on users {
  ...UserBasic
}

# Extended user info with role relationships (9-12 fields) - SIMPLIFIED
fragment UserWithRole on users {
  ...UserBasic
  username
  isStaff
}

# Comprehensive user profile (13+ fields) - SIMPLIFIED
fragment UserProfile on users {
  ...UserWithRole
  clerkUserId
  image
  managerId
  deactivatedAt
  deactivatedBy
  managerUser {
    ...UserMinimal
  }
}

# User search result format (domain-specific fragments are in users/graphql/fragments.graphql)
fragment UserSearchResult on users {
  ...UserCoreShared
  username
  isStaff
}

# ============================================
# Client Fragments (domain-specific fragments are in clients/graphql/fragments.graphql)
# ============================================

# Minimal client info for shared use
fragment ClientMinimal on clients {
  id
  name
}

# Basic client info for lists
fragment ClientBase on clients {
  id
  name
  active
  contactEmail
  contactPerson
  contactPhone
  createdAt
}

# Client with statistics
fragment ClientWithStats on clients {
  ...ClientBase
  # Current employee count
  currentEmployeeCount: payrollsAggregate(
    where: {supersededDate: {_isNull: true}}
  ) {
    aggregate {
      sum {
        employeeCount
      }
    }
  }
  # Active payroll count
  activePayrollCount: payrollsAggregate(
    where: {
      supersededDate: {_isNull: true}
      status: {_eq: "Active"}
    }
  ) {
    aggregate {
      count
    }
  }
}

# Client list base for shared queries (use domain-specific ClientListItem for detailed lists)
fragment ClientListBase on clients {
  ...ClientBase
  # Basic payroll statistics
  payrollCount: payrollsAggregate(
    where: {supersededDate: {_isNull: true}}
  ) {
    aggregate {
      count
    }
  }
}

# ============================================
# Payroll Fragments
# ============================================

# Minimal payroll info
fragment PayrollMinimal on payrolls {
  id
  name
  employeeCount
  status
}

# Basic payroll info
fragment PayrollBase on payrolls {
  id
  name
  employeeCount
  status
  payrollSystem
  processingTime
  processingDaysBeforeEft
  versionNumber
  supersededDate
  createdAt
  updatedAt
}

# Payroll with client info
fragment PayrollWithClient on payrolls {
  ...PayrollBase
  clientId
  client {
    id
    name
    active
  }
}

# Payroll list item (for tables)
fragment PayrollListItem on payrolls {
  ...PayrollWithClient
  primaryConsultantUserId
  backupConsultantUserId
  managerUserId
  createdByUserId
  # Schedule information
  cycleId
  dateTypeId
  dateValue
  payrollCycle {
    id
    name
    description
  }
  payrollDateType {
    id
    name
    description
  }
  # User relationships
  primaryConsultant {
    ...UserMinimal
  }
  backupConsultant {
    ...UserMinimal
  }
  manager {
    ...UserMinimal
  }
  # createdBy relationship not available in schema
}

# Payroll with dates
fragment PayrollWithDates on payrolls {
  ...PayrollBase
  goLiveDate
  payrollDates(orderBy: {originalEftDate: ASC}) {
    id
    originalEftDate
    adjustedEftDate
    notes
  }
}

# Full payroll detail
fragment PayrollFullDetail on payrolls {
  ...PayrollWithDates
  ...PayrollWithClient
  dateTypeId
  cycleId
  dateValue
  versionReason
  supersededDate
  parentPayrollId
  
  # Version tracking
  parentPayroll {
    id
    versionNumber
  }
  childPayrolls(orderBy: {versionNumber: DESC}) {
    id
    versionNumber
    versionReason
    createdAt
    # createdBy relationship not available
  }
  
  # People
  primaryConsultant {
    ...UserMinimal
  }
  backupConsultant {
    ...UserMinimal
  }
  manager {
    ...UserMinimal
  }
  # createdBy relationship not available in schema
  
  # Related data - notes relationship not available in schema
}

# ============================================
# Note Fragments
# ============================================

# Note with author
fragment NoteWithAuthor on notes {
  id
  content
  isImportant
  createdAt
  entityId
  entityType
  authorUser {
    ...UserMinimal
  }
}

# ============================================
# Permission Fragments
# ============================================

# Basic permission
fragment PermissionBase on permissions {
  id
  resourceId
  description
  legacyPermissionName
  action
}

# Role with permissions
fragment RoleWithPermissions on roles {
  id
  name
  displayName
  description
  isSystemRole
  priority
  assignedPermissions {
    grantedPermission {
      ...PermissionBase
    }
  }
}

# ============================================
# Audit Fragments
# ============================================

# Audit log entry
fragment AuditLogEntry on auditLogs {
  id
  userId
  userEmail
  userRole
  action
  resourceType
  resourceId
  eventTime
  success
  errorMessage
  ipAddress
  userAgent
  requestId
  sessionId
  metadata
  oldValues
  newValues
  createdAt
}

# Auth event
fragment AuthEvent on authEvents {
  id
  userId
  userEmail
  eventType
  eventTime
  success
  failureReason
  ipAddress
  userAgent
  metadata
}

# Data access log
fragment DataAccessLog on dataAccessLogs {
  id
  userId
  resourceType
  resourceId
  accessType
  accessedAt
  dataClassification
  fieldsAccessed
  rowCount
  ipAddress
  metadata
}

# Permission change
fragment PermissionChange on permissionChanges {
  id
  changedAt
  changedByUserId
  targetUserId
  targetRoleId
  changeType
  permissionType
  oldPermissions
  newPermissions
  reason
  approvedByUserId
}

# ============================================
# Payroll Date Fragments
# ============================================

# Payroll date info
fragment PayrollDateInfo on payrollDates {
  id
  originalEftDate
  adjustedEftDate
  notes
  createdAt
}

# ============================================
# Permission Override Fragments
# ============================================

# Permission override info
fragment PermissionOverrideInfo on permissionOverrides {
  id
  userId
  role
  resource
  operation
  granted
  reason
  conditions
  expiresAt
  createdBy
  createdAt
  # user relationships not available in schema
}