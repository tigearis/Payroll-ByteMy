# Shared GraphQL Fragments
# Updated to match standardized naming conventions (Priority 3 technical debt resolution)
# Following {EntityName}{Purpose} naming pattern

# ============================================
# User Fragments (Hierarchical: Minimal → Core → Basic → Extended → Complete)
# ============================================

# Minimal user info for references (1-3 fields)
fragment UserMinimal on Users {
  id
  firstName
  lastName
  computedName
  email
}

# Core user fields for basic operations (4-6 fields) - SHARED VERSION
fragment UserCoreShared on Users {
  ...UserMinimal
  role
  isActive
}

# Standard user info for lists and basic operations (7-8 fields)
fragment UserBasic on Users {
  ...UserCoreShared
  clerkUserId
  createdAt
  updatedAt
}

# @deprecated Use UserBasic instead for consistency
fragment UserBase on Users {
  ...UserBasic
}

# Extended user info with role relationships (9-12 fields) - SIMPLIFIED
fragment UserWithRole on Users {
  ...UserBasic
  username
  isStaff
}

# Comprehensive user profile (13+ fields) - SIMPLIFIED
fragment UserProfile on Users {
  ...UserWithRole
  clerkUserId
  image
  managerId
  deactivatedAt
  deactivatedBy
  manager {
    ...UserMinimal
  }
}

# User search result format (domain-specific fragments are in users/graphql/fragments.graphql)
fragment UserSearchResult on Users {
  ...UserCoreShared
  username
  isStaff
}

# ============================================
# Client Fragments (domain-specific fragments are in clients/graphql/fragments.graphql)
# ============================================

# Minimal client info for shared use
fragment ClientMinimal on Clients {
  id
  name
}

# Basic client info for lists
fragment ClientBase on Clients {
  id
  name
  active
  contactEmail
  contactPerson
  contactPhone
  createdAt
}

# Client with statistics
fragment ClientWithStats on Clients {
  ...ClientBase
  # Current employee count
  currentEmployeeCount: payrollsAggregate(
    where: {supersededDate: {_isNull: true}}
  ) {
    aggregate {
      sum {
        employeeCount
      }
    }
  }
  # Active payroll count
  activePayrollCount: payrollsAggregate(
    where: {
      supersededDate: {_isNull: true}
      status: {_eq: "Active"}
    }
  ) {
    aggregate {
      count
    }
  }
}

# Client list base for shared queries (use domain-specific ClientListItem for detailed lists)
fragment ClientListBase on Clients {
  ...ClientBase
  # Basic payroll statistics
  payrollCount: payrollsAggregate(
    where: {supersededDate: {_isNull: true}}
  ) {
    aggregate {
      count
    }
  }
}

# ============================================
# Payroll Fragments
# ============================================

# Minimal payroll info
fragment PayrollMinimal on Payrolls {
  id
  name
  employeeCount
  status
}

# Basic payroll info
fragment PayrollBase on Payrolls {
  id
  name
  employeeCount
  status
  payrollSystem
  processingTime
  processingDaysBeforeEft
  versionNumber
  supersededDate
  createdAt
  updatedAt
}

# Payroll with client info
fragment PayrollWithClient on Payrolls {
  ...PayrollBase
  clientId
  client {
    id
    name
    active
  }
}

# Payroll list item (for tables)
fragment PayrollListItem on Payrolls {
  ...PayrollWithClient
  primaryConsultantUserId
  backupConsultantUserId
  managerUserId
  createdByUserId
  # Schedule information
  cycleId
  dateTypeId
  dateValue
  payrollCycle {
    id
    name
    description
  }
  payrollDateType {
    id
    name
    description
  }
  # User relationships
  primaryConsultant {
    ...UserMinimal
  }
  backupConsultant {
    ...UserMinimal
  }
  assignedManager {
    ...UserMinimal
  }
  # createdBy relationship not available in schema
}

# Payroll with dates
fragment PayrollWithDates on Payrolls {
  ...PayrollBase
  goLiveDate
  payrollDates(orderBy: {originalEftDate: ASC}) {
    id
    originalEftDate
    adjustedEftDate
    notes
  }
}

# Full payroll detail
fragment PayrollFullDetail on Payrolls {
  ...PayrollWithDates
  ...PayrollWithClient
  dateTypeId
  cycleId
  dateValue
  versionReason
  supersededDate
  parentPayrollId
  
  # Version tracking
  parentPayroll {
    id
    versionNumber
  }
  childPayrolls(orderBy: {versionNumber: DESC}) {
    id
    versionNumber
    versionReason
    createdAt
    # createdBy relationship not available
  }
  
  # People
  primaryConsultant {
    ...UserMinimal
  }
  backupConsultant {
    ...UserMinimal
  }
  assignedManager {
    ...UserMinimal
  }
  # createdBy relationship not available in schema
  
  # Related data - notes relationship not available in schema
}

# ============================================
# Note Fragments
# ============================================

# Note with author
fragment NoteWithAuthor on Notes {
  id
  content
  isImportant
  createdAt
  entityId
  entityType
  author {
    ...UserMinimal
  }
}

# ============================================
# Permission Fragments
# ============================================

# Basic permission
fragment PermissionBase on Permissions {
  id
  resourceId
  description
  legacyPermissionName
  action
}

# Role with permissions
fragment RoleWithPermissions on Roles {
  id
  name
  displayName
  description
  isSystemRole
  priority
  rolePermissions {
    permission {
      ...PermissionBase
    }
  }
}

# ============================================
# Audit Fragments
# ============================================

# Audit log entry
fragment AuditLogEntry on AuditAuditLog {
  id
  userId
  userEmail
  userRole
  action
  resourceType
  resourceId
  eventTime
  success
  errorMessage
  ipAddress
  userAgent
  requestId
  sessionId
  metadata
  oldValues
  newValues
  createdAt
}

# Auth event
fragment AuthEvent on AuditAuthEvents {
  id
  userId
  userEmail
  eventType
  eventTime
  success
  failureReason
  ipAddress
  userAgent
  metadata
}

# Data access log
fragment DataAccessLog on AuditDataAccessLog {
  id
  userId
  resourceType
  resourceId
  accessType
  accessedAt
  dataClassification
  fieldsAccessed
  rowCount
  ipAddress
  metadata
}

# Permission change
fragment PermissionChange on AuditPermissionChanges {
  id
  changedAt
  changedByUserId
  targetUserId
  targetRoleId
  changeType
  permissionType
  oldPermissions
  newPermissions
  reason
  approvedByUserId
}

# ============================================
# Payroll Date Fragments
# ============================================

# Payroll date info
fragment PayrollDateInfo on PayrollDates {
  id
  originalEftDate
  adjustedEftDate
  notes
  createdAt
}

# ============================================
# Permission Override Fragments
# ============================================

# Permission override info
fragment PermissionOverrideInfo on PermissionOverrides {
  id
  userId
  role
  resource
  operation
  granted
  reason
  conditions
  expiresAt
  createdBy
  createdAt
  # user relationships not available in schema
}

# ============================================
# Shared Payroll Table Fragments
# ============================================

# Payroll table row - used across domains
fragment PayrollTableRow on Payrolls {
  ...PayrollListItem
  goLiveDate
  processingTime
  versionNumber

  # Payroll cycle for schedule column
  cycleId
  payrollCycle {
    id
    name
    description
  }

  # Next EFT date - use adjusted if present, otherwise original; match detail page behavior
  nextPayrollDate: payrollDates(
    where: {
      _or: [
        { adjustedEftDate: { _gte: "now()" } }
        { originalEftDate: { _gte: "now()" } }
      ]
    }
    orderBy: [{ adjustedEftDate: ASC }, { originalEftDate: ASC }]
    limit: 1
  ) {
    originalEftDate
    adjustedEftDate
    processingDate
  }
}

# ============================================
# Billing Fragments
# ============================================

# Minimal billing item info
fragment BillingItemMinimal on BillingItems {
  id
  description
  amount
  status
  createdAt
}

# Basic billing item info for lists
fragment BillingItemBase on BillingItems {
  ...BillingItemMinimal
  clientId
  staffUserId
  isApproved
  approvalDate
  approvedBy
  createdAt
  updatedAt
}

# Billing item with client info
fragment BillingItemWithClient on BillingItems {
  ...BillingItemBase
  client {
    ...ClientMinimal
  }
  staffUser {
    ...UserMinimal
  }
  approver: approvedByUser {
    ...UserMinimal
  }
}

# Invoice minimal info
fragment InvoiceMinimal on Invoices {
  id
  invoiceNumber
  totalAmount
  status
  dueDate
}

# Invoice base info
fragment InvoiceBase on Invoices {
  ...InvoiceMinimal
  clientId
  invoiceDate
  taxAmount
  subtotal
  notes
  createdAt
  updatedAt
}

# Invoice with client
fragment InvoiceWithClient on Invoices {
  ...InvoiceBase
  client {
    ...ClientMinimal
  }
}

# ============================================
# Leave Management Fragments
# ============================================

# Leave fragments moved to domains/leave/graphql/fragments.graphql to avoid duplicates
# Use domain-specific Leave fragments instead

# ============================================
# Work Schedule Fragments
# ============================================

# Work schedule fragments moved to domains/work-schedule/graphql/fragments.graphql to avoid duplicates
# Use domain-specific WorkSchedule fragments instead

# ============================================
# Email Template Fragments
# ============================================

# Email template fragments moved to domains/email/graphql/fragments.graphql to avoid duplicates
# Use domain-specific EmailTemplate fragments instead

# ============================================
# File Management Fragments
# ============================================

# File minimal info
fragment FileMinimal on Files {
  id
  filename
  size
  mimetype
  url
}

# File base info
fragment FileBase on Files {
  ...FileMinimal
  bucket
  objectKey
  uploadedBy
  category
  fileType
  isPublic
  createdAt
}

# File with uploader
fragment FileWithUploader on Files {
  ...FileBase
  uploadedByUser {
    ...UserMinimal
  }
}

# ============================================
# Invitation Fragments
# ============================================

# Invitation minimal
fragment InvitationMinimal on UserInvitations {
  id
  email
  invitedRole
  invitationStatus
}

# Invitation base
fragment InvitationBase on UserInvitations {
  ...InvitationMinimal
  invitedBy
  expiresAt
  acceptedAt
  revokedAt
  createdAt
}

# Invitation with inviter
fragment InvitationWithInviter on UserInvitations {
  ...InvitationBase
  invitedByUser {
    ...UserMinimal
  }
}

# ============================================
# Common Search and Filter Fragments
# ============================================

# Generic count aggregate for search results - DEPRECATED: Use specific aggregates instead
# fragment CountAggregate on IntAggregateFunctions {
#   count
# }

# Generic list metadata for pagination - DEPRECATED: Use query-specific aggregates instead
# fragment ListMetadata on Query {
#   totalCount: usersAggregate {
#     aggregate {
#       count
#     }
#   }
# }

# ============================================
# Dashboard Statistics Fragments
# ============================================

# Client dashboard stats
fragment ClientDashboardStats on Clients {
  ...ClientMinimal
  totalPayrolls: payrollsAggregate {
    aggregate {
      count
    }
  }
  activePayrolls: payrollsAggregate(
    where: { status: { _eq: "Active" } }
  ) {
    aggregate {
      count
    }
  }
  totalEmployees: payrollsAggregate {
    aggregate {
      sum {
        employeeCount
      }
    }
  }
}

# User activity stats
fragment UserActivityStats on Users {
  ...UserMinimal
  staffBillingItems(
    orderBy: { createdAt: DESC }
    limit: 5
  ) {
    ...BillingItemMinimal
  }
  # notes relationship not available - use authoredNotes instead
  authoredNotes(
    orderBy: { createdAt: DESC }
    limit: 3
  ) {
    ...NoteWithAuthor
  }
}

# System health stats (for admin dashboard) - DEPRECATED: Use query-specific fields instead
# fragment SystemHealthStats on Query {
#   totalUsers: usersAggregate {
#     aggregate {
#       count
#     }
#   }
#   activeUsers: usersAggregate(
#     where: { isActive: { _eq: true } }
#   ) {
#     aggregate {
#       count
#     }
#   }
#   totalClients: clientsAggregate {
#     aggregate {
#       count
#     }
#   }
#   activeClients: clientsAggregate(
#     where: { active: { _eq: true } }
#   ) {
#     aggregate {
#       count
#     }
#   }
#   totalPayrolls: payrollsAggregate {
#     aggregate {
#       count
#     }
#   }
#   activePayrolls: payrollsAggregate(
#     where: { status: { _eq: "Active" } }
#   ) {
#     aggregate {
#       count
#     }
#   }
# }

# ============================================
# Time-based Fragments for Reporting
# ============================================

# Last 30 days activity - DEPRECATED: Audit tables not available as user relationships
# fragment RecentActivity on Users {
#   recentLogins: auditAuthEvents(
#     where: { eventTime: { _gte: "30 days ago" } }
#     orderBy: { eventTime: DESC }
#     limit: 10
#   ) {
#     ...AuthEvent
#   }
#   recentActions: auditAuditLog(
#     where: { eventTime: { _gte: "30 days ago" } }
#     orderBy: { eventTime: DESC }
#     limit: 10
#   ) {
#     ...AuditLogEntry
#   }
# }

# Monthly revenue stats - DEPRECATED: Use query-level aggregates instead
# fragment MonthlyRevenueStats on BillingItems {
#   thisMonthRevenue: billingItemsAggregate(
#     where: {
#       createdAt: { _gte: "start of month" }
#       status: { _eq: "confirmed" }
#     }
#   ) {
#     aggregate {
#       sum {
#         amount
#       }
#     }
#   }
#   lastMonthRevenue: billingItemsAggregate(
#     where: {
#       createdAt: { _gte: "start of last month", _lt: "start of month" }
#       status: { _eq: "confirmed" }
#     }
#   ) {
#     aggregate {
#       sum {
#         amount
#       }
#     }
#   }
# }