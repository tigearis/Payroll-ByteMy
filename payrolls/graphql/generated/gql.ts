/* eslint-disable */
import * as types from './graphql';
import { TypedDocumentNode as DocumentNode } from '@graphql-typed-document-node/core';

/**
 * Map of all GraphQL operations in the project.
 *
 * This map has several performance disadvantages:
 * 1. It is not tree-shakeable, so it will include all operations in the project.
 * 2. It is not minifiable, so the string of a GraphQL query will be multiple times inside the bundle.
 * 3. It does not support dead code elimination, so it will add unused operations.
 *
 * Therefore it is highly recommended to use the babel or swc plugin for production.
 * Learn more about it here: https://the-guild.dev/graphql/codegen/plugins/presets/preset-client#reducing-bundle-size
 */
type Documents = {
    "fragment PayrollBasicInfo on payrolls {\n  id\n  name\n  status\n  employee_count\n  processing_time\n  created_at\n  updated_at\n}\n\nfragment PayrollFullDetails on payrolls {\n  id\n  name\n  status\n  employee_count\n  processing_time\n  processing_days_before_eft\n  payroll_system\n  date_value\n  version_number\n  parent_payroll_id\n  go_live_date\n  superseded_date\n  version_reason\n  created_by_user_id\n  created_at\n  updated_at\n}\n\nfragment PayrollWithRelations on payrolls {\n  ...PayrollFullDetails\n  client {\n    id\n    name\n  }\n  payroll_cycle {\n    id\n    name\n  }\n  payroll_date_type {\n    id\n    name\n  }\n  userByPrimaryConsultantUserId {\n    id\n    name\n    email\n  }\n  userByBackupConsultantUserId {\n    id\n    name\n    email\n  }\n  userByManagerUserId {\n    id\n    name\n    email\n  }\n}\n\nfragment PayrollDate on payroll_dates {\n  id\n  payroll_id\n  original_eft_date\n  adjusted_eft_date\n  processing_date\n  notes\n  created_at\n  updated_at\n}\n\nfragment PayrollWithDates on payrolls {\n  ...PayrollWithRelations\n  payroll_dates(order_by: {adjusted_eft_date: asc}) {\n    ...PayrollDate\n  }\n}": typeof types.PayrollBasicInfoFragmentDoc,
    "mutation CreatePayroll($name: String!, $clientId: uuid!, $cycleId: uuid!, $dateTypeId: uuid!, $dateValue: Int, $primaryConsultantId: uuid!, $backupConsultantId: uuid, $managerId: uuid!, $processingDaysBeforeEft: Int!, $payrollSystem: String, $employeeCount: Int) {\n  insert_payrolls_one(\n    object: {name: $name, client_id: $clientId, cycle_id: $cycleId, date_type_id: $dateTypeId, date_value: $dateValue, primary_consultant_user_id: $primaryConsultantId, backup_consultant_user_id: $backupConsultantId, manager_user_id: $managerId, processing_days_before_eft: $processingDaysBeforeEft, payroll_system: $payrollSystem, employee_count: $employeeCount, status: \"Implementation\", version_number: 1}\n  ) {\n    ...PayrollWithRelations\n  }\n}\n\nmutation UpdatePayroll($id: uuid!, $name: String, $cycleId: uuid, $dateTypeId: uuid, $dateValue: Int, $primaryConsultantId: uuid, $backupConsultantId: uuid, $managerId: uuid, $processingDaysBeforeEft: Int, $payrollSystem: String, $employeeCount: Int, $status: payroll_status) {\n  update_payrolls_by_pk(\n    pk_columns: {id: $id}\n    _set: {name: $name, cycle_id: $cycleId, date_type_id: $dateTypeId, date_value: $dateValue, primary_consultant_user_id: $primaryConsultantId, backup_consultant_user_id: $backupConsultantId, manager_user_id: $managerId, processing_days_before_eft: $processingDaysBeforeEft, payroll_system: $payrollSystem, employee_count: $employeeCount, status: $status, updated_at: \"now()\"}\n  ) {\n    ...PayrollWithRelations\n  }\n}\n\nmutation UpdatePayrollStatus($id: uuid!, $status: payroll_status!) {\n  update_payrolls_by_pk(\n    pk_columns: {id: $id}\n    _set: {status: $status, updated_at: \"now()\"}\n  ) {\n    id\n    status\n    updated_at\n  }\n}\n\nmutation CreatePayrollVersion($parentId: uuid!, $name: String!, $clientId: uuid!, $cycleId: uuid!, $dateTypeId: uuid!, $dateValue: Int, $primaryConsultantId: uuid!, $backupConsultantId: uuid, $managerId: uuid!, $processingDaysBeforeEft: Int!, $payrollSystem: String, $employeeCount: Int, $status: payroll_status!, $versionNumber: Int!, $goLiveDate: date, $versionReason: String!, $createdByUserId: uuid!) {\n  update_payrolls_by_pk(\n    pk_columns: {id: $parentId}\n    _set: {superseded_date: \"now()\"}\n  ) {\n    id\n  }\n  insert_payrolls_one(\n    object: {parent_payroll_id: $parentId, name: $name, client_id: $clientId, cycle_id: $cycleId, date_type_id: $dateTypeId, date_value: $dateValue, primary_consultant_user_id: $primaryConsultantId, backup_consultant_user_id: $backupConsultantId, manager_user_id: $managerId, processing_days_before_eft: $processingDaysBeforeEft, payroll_system: $payrollSystem, employee_count: $employeeCount, status: $status, version_number: $versionNumber, go_live_date: $goLiveDate, version_reason: $versionReason, created_by_user_id: $createdByUserId}\n  ) {\n    ...PayrollWithRelations\n  }\n}\n\nmutation DeletePayroll($id: uuid!) {\n  delete_payrolls_by_pk(id: $id) {\n    id\n  }\n}\n\nmutation UpdatePayrollConsultants($updates: [payrolls_updates!]!) {\n  update_payrolls_many(updates: $updates) {\n    affected_rows\n    returning {\n      id\n      name\n      primary_consultant_user_id\n      backup_consultant_user_id\n      userByPrimaryConsultantUserId {\n        id\n        name\n      }\n      userByBackupConsultantUserId {\n        id\n        name\n      }\n      updated_at\n    }\n  }\n}": typeof types.CreatePayrollDocument,
    "query GetPayrolls {\n  payrolls(\n    where: {superseded_date: {_is_null: true}}\n    order_by: {updated_at: desc}\n  ) {\n    ...PayrollWithDates\n  }\n}\n\nquery GetPayrollById($id: uuid!) {\n  payrolls_by_pk(id: $id) {\n    ...PayrollWithDates\n  }\n}\n\nquery GetPayrollsByClient($clientId: uuid!) {\n  payrolls(\n    where: {client_id: {_eq: $clientId}, superseded_date: {_is_null: true}}\n    order_by: {updated_at: desc}\n  ) {\n    ...PayrollWithDates\n  }\n}\n\nquery GetPayrollsByMonth($startDate: date!, $endDate: date!) {\n  payrolls(\n    where: {superseded_date: {_is_null: true}, payroll_dates: {adjusted_eft_date: {_gte: $startDate, _lte: $endDate}}}\n    order_by: {updated_at: desc}\n  ) {\n    ...PayrollWithDates\n  }\n}\n\nquery GetPayrollDates($payrollId: uuid!) {\n  payroll_dates(\n    where: {payroll_id: {_eq: $payrollId}}\n    order_by: {adjusted_eft_date: asc}\n  ) {\n    ...PayrollDate\n  }\n}\n\nquery GetPayrollFamilyDates($payrollId: uuid!) {\n  payrolls(\n    where: {_or: [{id: {_eq: $payrollId}}, {parent_payroll_id: {_eq: $payrollId}}]}\n    order_by: {version_number: asc}\n  ) {\n    id\n    version_number\n    payroll_dates(order_by: {adjusted_eft_date: asc}) {\n      ...PayrollDate\n    }\n  }\n}\n\nquery GetPayrollsMissingDates {\n  payrolls(where: {superseded_date: {_is_null: true}, _not: {payroll_dates: {}}}) {\n    id\n    name\n    client {\n      name\n    }\n  }\n}\n\nquery CheckPayrollVersion($id: uuid!) {\n  payrolls_by_pk(id: $id) {\n    id\n    superseded_date\n    version_number\n  }\n  latest: payrolls(\n    where: {parent_payroll_id: {_eq: $id}, superseded_date: {_is_null: true}}\n    limit: 1\n  ) {\n    id\n  }\n}\n\nquery GetPayrollData($start_date: date!, $end_date: date!) {\n  payrolls {\n    id\n    name\n    employee_count\n    processing_time\n    status\n    client {\n      id\n      name\n    }\n    userByPrimaryConsultantUserId {\n      id\n      name\n      leaves {\n        id\n        start_date\n        end_date\n        leave_type\n        reason\n        status\n      }\n    }\n    userByBackupConsultantUserId {\n      id\n      name\n      leaves {\n        id\n        start_date\n        end_date\n        leave_type\n        reason\n        status\n      }\n    }\n  }\n  payroll_dates(where: {adjusted_eft_date: {_gte: $start_date, _lte: $end_date}}) {\n    id\n    payroll_id\n    original_eft_date\n    adjusted_eft_date\n    processing_date\n    payroll {\n      id\n      name\n      employee_count\n      processing_time\n      client {\n        name\n      }\n      userByPrimaryConsultantUserId {\n        id\n        name\n      }\n      userByBackupConsultantUserId {\n        id\n        name\n      }\n    }\n  }\n  holidays(where: {date: {_gte: $start_date, _lte: $end_date}}) {\n    id\n    date\n    local_name\n    types\n    region\n    country_code\n  }\n}": typeof types.GetPayrollsDocument,
    "subscription PayrollUpdates($id: uuid!) {\n  payrolls_by_pk(id: $id) {\n    ...PayrollWithDates\n  }\n}\n\nsubscription PayrollListUpdates {\n  payrolls(\n    where: {superseded_date: {_is_null: true}}\n    order_by: {updated_at: desc}\n  ) {\n    ...PayrollBasicInfo\n  }\n}\n\nsubscription PayrollDateUpdates($payrollId: uuid!) {\n  payroll_dates(\n    where: {payroll_id: {_eq: $payrollId}}\n    order_by: {adjusted_eft_date: asc}\n  ) {\n    ...PayrollDate\n  }\n}": typeof types.PayrollUpdatesDocument,
};
const documents: Documents = {
    "fragment PayrollBasicInfo on payrolls {\n  id\n  name\n  status\n  employee_count\n  processing_time\n  created_at\n  updated_at\n}\n\nfragment PayrollFullDetails on payrolls {\n  id\n  name\n  status\n  employee_count\n  processing_time\n  processing_days_before_eft\n  payroll_system\n  date_value\n  version_number\n  parent_payroll_id\n  go_live_date\n  superseded_date\n  version_reason\n  created_by_user_id\n  created_at\n  updated_at\n}\n\nfragment PayrollWithRelations on payrolls {\n  ...PayrollFullDetails\n  client {\n    id\n    name\n  }\n  payroll_cycle {\n    id\n    name\n  }\n  payroll_date_type {\n    id\n    name\n  }\n  userByPrimaryConsultantUserId {\n    id\n    name\n    email\n  }\n  userByBackupConsultantUserId {\n    id\n    name\n    email\n  }\n  userByManagerUserId {\n    id\n    name\n    email\n  }\n}\n\nfragment PayrollDate on payroll_dates {\n  id\n  payroll_id\n  original_eft_date\n  adjusted_eft_date\n  processing_date\n  notes\n  created_at\n  updated_at\n}\n\nfragment PayrollWithDates on payrolls {\n  ...PayrollWithRelations\n  payroll_dates(order_by: {adjusted_eft_date: asc}) {\n    ...PayrollDate\n  }\n}": types.PayrollBasicInfoFragmentDoc,
    "mutation CreatePayroll($name: String!, $clientId: uuid!, $cycleId: uuid!, $dateTypeId: uuid!, $dateValue: Int, $primaryConsultantId: uuid!, $backupConsultantId: uuid, $managerId: uuid!, $processingDaysBeforeEft: Int!, $payrollSystem: String, $employeeCount: Int) {\n  insert_payrolls_one(\n    object: {name: $name, client_id: $clientId, cycle_id: $cycleId, date_type_id: $dateTypeId, date_value: $dateValue, primary_consultant_user_id: $primaryConsultantId, backup_consultant_user_id: $backupConsultantId, manager_user_id: $managerId, processing_days_before_eft: $processingDaysBeforeEft, payroll_system: $payrollSystem, employee_count: $employeeCount, status: \"Implementation\", version_number: 1}\n  ) {\n    ...PayrollWithRelations\n  }\n}\n\nmutation UpdatePayroll($id: uuid!, $name: String, $cycleId: uuid, $dateTypeId: uuid, $dateValue: Int, $primaryConsultantId: uuid, $backupConsultantId: uuid, $managerId: uuid, $processingDaysBeforeEft: Int, $payrollSystem: String, $employeeCount: Int, $status: payroll_status) {\n  update_payrolls_by_pk(\n    pk_columns: {id: $id}\n    _set: {name: $name, cycle_id: $cycleId, date_type_id: $dateTypeId, date_value: $dateValue, primary_consultant_user_id: $primaryConsultantId, backup_consultant_user_id: $backupConsultantId, manager_user_id: $managerId, processing_days_before_eft: $processingDaysBeforeEft, payroll_system: $payrollSystem, employee_count: $employeeCount, status: $status, updated_at: \"now()\"}\n  ) {\n    ...PayrollWithRelations\n  }\n}\n\nmutation UpdatePayrollStatus($id: uuid!, $status: payroll_status!) {\n  update_payrolls_by_pk(\n    pk_columns: {id: $id}\n    _set: {status: $status, updated_at: \"now()\"}\n  ) {\n    id\n    status\n    updated_at\n  }\n}\n\nmutation CreatePayrollVersion($parentId: uuid!, $name: String!, $clientId: uuid!, $cycleId: uuid!, $dateTypeId: uuid!, $dateValue: Int, $primaryConsultantId: uuid!, $backupConsultantId: uuid, $managerId: uuid!, $processingDaysBeforeEft: Int!, $payrollSystem: String, $employeeCount: Int, $status: payroll_status!, $versionNumber: Int!, $goLiveDate: date, $versionReason: String!, $createdByUserId: uuid!) {\n  update_payrolls_by_pk(\n    pk_columns: {id: $parentId}\n    _set: {superseded_date: \"now()\"}\n  ) {\n    id\n  }\n  insert_payrolls_one(\n    object: {parent_payroll_id: $parentId, name: $name, client_id: $clientId, cycle_id: $cycleId, date_type_id: $dateTypeId, date_value: $dateValue, primary_consultant_user_id: $primaryConsultantId, backup_consultant_user_id: $backupConsultantId, manager_user_id: $managerId, processing_days_before_eft: $processingDaysBeforeEft, payroll_system: $payrollSystem, employee_count: $employeeCount, status: $status, version_number: $versionNumber, go_live_date: $goLiveDate, version_reason: $versionReason, created_by_user_id: $createdByUserId}\n  ) {\n    ...PayrollWithRelations\n  }\n}\n\nmutation DeletePayroll($id: uuid!) {\n  delete_payrolls_by_pk(id: $id) {\n    id\n  }\n}\n\nmutation UpdatePayrollConsultants($updates: [payrolls_updates!]!) {\n  update_payrolls_many(updates: $updates) {\n    affected_rows\n    returning {\n      id\n      name\n      primary_consultant_user_id\n      backup_consultant_user_id\n      userByPrimaryConsultantUserId {\n        id\n        name\n      }\n      userByBackupConsultantUserId {\n        id\n        name\n      }\n      updated_at\n    }\n  }\n}": types.CreatePayrollDocument,
    "query GetPayrolls {\n  payrolls(\n    where: {superseded_date: {_is_null: true}}\n    order_by: {updated_at: desc}\n  ) {\n    ...PayrollWithDates\n  }\n}\n\nquery GetPayrollById($id: uuid!) {\n  payrolls_by_pk(id: $id) {\n    ...PayrollWithDates\n  }\n}\n\nquery GetPayrollsByClient($clientId: uuid!) {\n  payrolls(\n    where: {client_id: {_eq: $clientId}, superseded_date: {_is_null: true}}\n    order_by: {updated_at: desc}\n  ) {\n    ...PayrollWithDates\n  }\n}\n\nquery GetPayrollsByMonth($startDate: date!, $endDate: date!) {\n  payrolls(\n    where: {superseded_date: {_is_null: true}, payroll_dates: {adjusted_eft_date: {_gte: $startDate, _lte: $endDate}}}\n    order_by: {updated_at: desc}\n  ) {\n    ...PayrollWithDates\n  }\n}\n\nquery GetPayrollDates($payrollId: uuid!) {\n  payroll_dates(\n    where: {payroll_id: {_eq: $payrollId}}\n    order_by: {adjusted_eft_date: asc}\n  ) {\n    ...PayrollDate\n  }\n}\n\nquery GetPayrollFamilyDates($payrollId: uuid!) {\n  payrolls(\n    where: {_or: [{id: {_eq: $payrollId}}, {parent_payroll_id: {_eq: $payrollId}}]}\n    order_by: {version_number: asc}\n  ) {\n    id\n    version_number\n    payroll_dates(order_by: {adjusted_eft_date: asc}) {\n      ...PayrollDate\n    }\n  }\n}\n\nquery GetPayrollsMissingDates {\n  payrolls(where: {superseded_date: {_is_null: true}, _not: {payroll_dates: {}}}) {\n    id\n    name\n    client {\n      name\n    }\n  }\n}\n\nquery CheckPayrollVersion($id: uuid!) {\n  payrolls_by_pk(id: $id) {\n    id\n    superseded_date\n    version_number\n  }\n  latest: payrolls(\n    where: {parent_payroll_id: {_eq: $id}, superseded_date: {_is_null: true}}\n    limit: 1\n  ) {\n    id\n  }\n}\n\nquery GetPayrollData($start_date: date!, $end_date: date!) {\n  payrolls {\n    id\n    name\n    employee_count\n    processing_time\n    status\n    client {\n      id\n      name\n    }\n    userByPrimaryConsultantUserId {\n      id\n      name\n      leaves {\n        id\n        start_date\n        end_date\n        leave_type\n        reason\n        status\n      }\n    }\n    userByBackupConsultantUserId {\n      id\n      name\n      leaves {\n        id\n        start_date\n        end_date\n        leave_type\n        reason\n        status\n      }\n    }\n  }\n  payroll_dates(where: {adjusted_eft_date: {_gte: $start_date, _lte: $end_date}}) {\n    id\n    payroll_id\n    original_eft_date\n    adjusted_eft_date\n    processing_date\n    payroll {\n      id\n      name\n      employee_count\n      processing_time\n      client {\n        name\n      }\n      userByPrimaryConsultantUserId {\n        id\n        name\n      }\n      userByBackupConsultantUserId {\n        id\n        name\n      }\n    }\n  }\n  holidays(where: {date: {_gte: $start_date, _lte: $end_date}}) {\n    id\n    date\n    local_name\n    types\n    region\n    country_code\n  }\n}": types.GetPayrollsDocument,
    "subscription PayrollUpdates($id: uuid!) {\n  payrolls_by_pk(id: $id) {\n    ...PayrollWithDates\n  }\n}\n\nsubscription PayrollListUpdates {\n  payrolls(\n    where: {superseded_date: {_is_null: true}}\n    order_by: {updated_at: desc}\n  ) {\n    ...PayrollBasicInfo\n  }\n}\n\nsubscription PayrollDateUpdates($payrollId: uuid!) {\n  payroll_dates(\n    where: {payroll_id: {_eq: $payrollId}}\n    order_by: {adjusted_eft_date: asc}\n  ) {\n    ...PayrollDate\n  }\n}": types.PayrollUpdatesDocument,
};

/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 *
 *
 * @example
 * ```ts
 * const query = graphql(`query GetUser($id: ID!) { user(id: $id) { name } }`);
 * ```
 *
 * The query argument is unknown!
 * Please regenerate the types.
 */
export function graphql(source: string): unknown;

/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "fragment PayrollBasicInfo on payrolls {\n  id\n  name\n  status\n  employee_count\n  processing_time\n  created_at\n  updated_at\n}\n\nfragment PayrollFullDetails on payrolls {\n  id\n  name\n  status\n  employee_count\n  processing_time\n  processing_days_before_eft\n  payroll_system\n  date_value\n  version_number\n  parent_payroll_id\n  go_live_date\n  superseded_date\n  version_reason\n  created_by_user_id\n  created_at\n  updated_at\n}\n\nfragment PayrollWithRelations on payrolls {\n  ...PayrollFullDetails\n  client {\n    id\n    name\n  }\n  payroll_cycle {\n    id\n    name\n  }\n  payroll_date_type {\n    id\n    name\n  }\n  userByPrimaryConsultantUserId {\n    id\n    name\n    email\n  }\n  userByBackupConsultantUserId {\n    id\n    name\n    email\n  }\n  userByManagerUserId {\n    id\n    name\n    email\n  }\n}\n\nfragment PayrollDate on payroll_dates {\n  id\n  payroll_id\n  original_eft_date\n  adjusted_eft_date\n  processing_date\n  notes\n  created_at\n  updated_at\n}\n\nfragment PayrollWithDates on payrolls {\n  ...PayrollWithRelations\n  payroll_dates(order_by: {adjusted_eft_date: asc}) {\n    ...PayrollDate\n  }\n}"): (typeof documents)["fragment PayrollBasicInfo on payrolls {\n  id\n  name\n  status\n  employee_count\n  processing_time\n  created_at\n  updated_at\n}\n\nfragment PayrollFullDetails on payrolls {\n  id\n  name\n  status\n  employee_count\n  processing_time\n  processing_days_before_eft\n  payroll_system\n  date_value\n  version_number\n  parent_payroll_id\n  go_live_date\n  superseded_date\n  version_reason\n  created_by_user_id\n  created_at\n  updated_at\n}\n\nfragment PayrollWithRelations on payrolls {\n  ...PayrollFullDetails\n  client {\n    id\n    name\n  }\n  payroll_cycle {\n    id\n    name\n  }\n  payroll_date_type {\n    id\n    name\n  }\n  userByPrimaryConsultantUserId {\n    id\n    name\n    email\n  }\n  userByBackupConsultantUserId {\n    id\n    name\n    email\n  }\n  userByManagerUserId {\n    id\n    name\n    email\n  }\n}\n\nfragment PayrollDate on payroll_dates {\n  id\n  payroll_id\n  original_eft_date\n  adjusted_eft_date\n  processing_date\n  notes\n  created_at\n  updated_at\n}\n\nfragment PayrollWithDates on payrolls {\n  ...PayrollWithRelations\n  payroll_dates(order_by: {adjusted_eft_date: asc}) {\n    ...PayrollDate\n  }\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "mutation CreatePayroll($name: String!, $clientId: uuid!, $cycleId: uuid!, $dateTypeId: uuid!, $dateValue: Int, $primaryConsultantId: uuid!, $backupConsultantId: uuid, $managerId: uuid!, $processingDaysBeforeEft: Int!, $payrollSystem: String, $employeeCount: Int) {\n  insert_payrolls_one(\n    object: {name: $name, client_id: $clientId, cycle_id: $cycleId, date_type_id: $dateTypeId, date_value: $dateValue, primary_consultant_user_id: $primaryConsultantId, backup_consultant_user_id: $backupConsultantId, manager_user_id: $managerId, processing_days_before_eft: $processingDaysBeforeEft, payroll_system: $payrollSystem, employee_count: $employeeCount, status: \"Implementation\", version_number: 1}\n  ) {\n    ...PayrollWithRelations\n  }\n}\n\nmutation UpdatePayroll($id: uuid!, $name: String, $cycleId: uuid, $dateTypeId: uuid, $dateValue: Int, $primaryConsultantId: uuid, $backupConsultantId: uuid, $managerId: uuid, $processingDaysBeforeEft: Int, $payrollSystem: String, $employeeCount: Int, $status: payroll_status) {\n  update_payrolls_by_pk(\n    pk_columns: {id: $id}\n    _set: {name: $name, cycle_id: $cycleId, date_type_id: $dateTypeId, date_value: $dateValue, primary_consultant_user_id: $primaryConsultantId, backup_consultant_user_id: $backupConsultantId, manager_user_id: $managerId, processing_days_before_eft: $processingDaysBeforeEft, payroll_system: $payrollSystem, employee_count: $employeeCount, status: $status, updated_at: \"now()\"}\n  ) {\n    ...PayrollWithRelations\n  }\n}\n\nmutation UpdatePayrollStatus($id: uuid!, $status: payroll_status!) {\n  update_payrolls_by_pk(\n    pk_columns: {id: $id}\n    _set: {status: $status, updated_at: \"now()\"}\n  ) {\n    id\n    status\n    updated_at\n  }\n}\n\nmutation CreatePayrollVersion($parentId: uuid!, $name: String!, $clientId: uuid!, $cycleId: uuid!, $dateTypeId: uuid!, $dateValue: Int, $primaryConsultantId: uuid!, $backupConsultantId: uuid, $managerId: uuid!, $processingDaysBeforeEft: Int!, $payrollSystem: String, $employeeCount: Int, $status: payroll_status!, $versionNumber: Int!, $goLiveDate: date, $versionReason: String!, $createdByUserId: uuid!) {\n  update_payrolls_by_pk(\n    pk_columns: {id: $parentId}\n    _set: {superseded_date: \"now()\"}\n  ) {\n    id\n  }\n  insert_payrolls_one(\n    object: {parent_payroll_id: $parentId, name: $name, client_id: $clientId, cycle_id: $cycleId, date_type_id: $dateTypeId, date_value: $dateValue, primary_consultant_user_id: $primaryConsultantId, backup_consultant_user_id: $backupConsultantId, manager_user_id: $managerId, processing_days_before_eft: $processingDaysBeforeEft, payroll_system: $payrollSystem, employee_count: $employeeCount, status: $status, version_number: $versionNumber, go_live_date: $goLiveDate, version_reason: $versionReason, created_by_user_id: $createdByUserId}\n  ) {\n    ...PayrollWithRelations\n  }\n}\n\nmutation DeletePayroll($id: uuid!) {\n  delete_payrolls_by_pk(id: $id) {\n    id\n  }\n}\n\nmutation UpdatePayrollConsultants($updates: [payrolls_updates!]!) {\n  update_payrolls_many(updates: $updates) {\n    affected_rows\n    returning {\n      id\n      name\n      primary_consultant_user_id\n      backup_consultant_user_id\n      userByPrimaryConsultantUserId {\n        id\n        name\n      }\n      userByBackupConsultantUserId {\n        id\n        name\n      }\n      updated_at\n    }\n  }\n}"): (typeof documents)["mutation CreatePayroll($name: String!, $clientId: uuid!, $cycleId: uuid!, $dateTypeId: uuid!, $dateValue: Int, $primaryConsultantId: uuid!, $backupConsultantId: uuid, $managerId: uuid!, $processingDaysBeforeEft: Int!, $payrollSystem: String, $employeeCount: Int) {\n  insert_payrolls_one(\n    object: {name: $name, client_id: $clientId, cycle_id: $cycleId, date_type_id: $dateTypeId, date_value: $dateValue, primary_consultant_user_id: $primaryConsultantId, backup_consultant_user_id: $backupConsultantId, manager_user_id: $managerId, processing_days_before_eft: $processingDaysBeforeEft, payroll_system: $payrollSystem, employee_count: $employeeCount, status: \"Implementation\", version_number: 1}\n  ) {\n    ...PayrollWithRelations\n  }\n}\n\nmutation UpdatePayroll($id: uuid!, $name: String, $cycleId: uuid, $dateTypeId: uuid, $dateValue: Int, $primaryConsultantId: uuid, $backupConsultantId: uuid, $managerId: uuid, $processingDaysBeforeEft: Int, $payrollSystem: String, $employeeCount: Int, $status: payroll_status) {\n  update_payrolls_by_pk(\n    pk_columns: {id: $id}\n    _set: {name: $name, cycle_id: $cycleId, date_type_id: $dateTypeId, date_value: $dateValue, primary_consultant_user_id: $primaryConsultantId, backup_consultant_user_id: $backupConsultantId, manager_user_id: $managerId, processing_days_before_eft: $processingDaysBeforeEft, payroll_system: $payrollSystem, employee_count: $employeeCount, status: $status, updated_at: \"now()\"}\n  ) {\n    ...PayrollWithRelations\n  }\n}\n\nmutation UpdatePayrollStatus($id: uuid!, $status: payroll_status!) {\n  update_payrolls_by_pk(\n    pk_columns: {id: $id}\n    _set: {status: $status, updated_at: \"now()\"}\n  ) {\n    id\n    status\n    updated_at\n  }\n}\n\nmutation CreatePayrollVersion($parentId: uuid!, $name: String!, $clientId: uuid!, $cycleId: uuid!, $dateTypeId: uuid!, $dateValue: Int, $primaryConsultantId: uuid!, $backupConsultantId: uuid, $managerId: uuid!, $processingDaysBeforeEft: Int!, $payrollSystem: String, $employeeCount: Int, $status: payroll_status!, $versionNumber: Int!, $goLiveDate: date, $versionReason: String!, $createdByUserId: uuid!) {\n  update_payrolls_by_pk(\n    pk_columns: {id: $parentId}\n    _set: {superseded_date: \"now()\"}\n  ) {\n    id\n  }\n  insert_payrolls_one(\n    object: {parent_payroll_id: $parentId, name: $name, client_id: $clientId, cycle_id: $cycleId, date_type_id: $dateTypeId, date_value: $dateValue, primary_consultant_user_id: $primaryConsultantId, backup_consultant_user_id: $backupConsultantId, manager_user_id: $managerId, processing_days_before_eft: $processingDaysBeforeEft, payroll_system: $payrollSystem, employee_count: $employeeCount, status: $status, version_number: $versionNumber, go_live_date: $goLiveDate, version_reason: $versionReason, created_by_user_id: $createdByUserId}\n  ) {\n    ...PayrollWithRelations\n  }\n}\n\nmutation DeletePayroll($id: uuid!) {\n  delete_payrolls_by_pk(id: $id) {\n    id\n  }\n}\n\nmutation UpdatePayrollConsultants($updates: [payrolls_updates!]!) {\n  update_payrolls_many(updates: $updates) {\n    affected_rows\n    returning {\n      id\n      name\n      primary_consultant_user_id\n      backup_consultant_user_id\n      userByPrimaryConsultantUserId {\n        id\n        name\n      }\n      userByBackupConsultantUserId {\n        id\n        name\n      }\n      updated_at\n    }\n  }\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "query GetPayrolls {\n  payrolls(\n    where: {superseded_date: {_is_null: true}}\n    order_by: {updated_at: desc}\n  ) {\n    ...PayrollWithDates\n  }\n}\n\nquery GetPayrollById($id: uuid!) {\n  payrolls_by_pk(id: $id) {\n    ...PayrollWithDates\n  }\n}\n\nquery GetPayrollsByClient($clientId: uuid!) {\n  payrolls(\n    where: {client_id: {_eq: $clientId}, superseded_date: {_is_null: true}}\n    order_by: {updated_at: desc}\n  ) {\n    ...PayrollWithDates\n  }\n}\n\nquery GetPayrollsByMonth($startDate: date!, $endDate: date!) {\n  payrolls(\n    where: {superseded_date: {_is_null: true}, payroll_dates: {adjusted_eft_date: {_gte: $startDate, _lte: $endDate}}}\n    order_by: {updated_at: desc}\n  ) {\n    ...PayrollWithDates\n  }\n}\n\nquery GetPayrollDates($payrollId: uuid!) {\n  payroll_dates(\n    where: {payroll_id: {_eq: $payrollId}}\n    order_by: {adjusted_eft_date: asc}\n  ) {\n    ...PayrollDate\n  }\n}\n\nquery GetPayrollFamilyDates($payrollId: uuid!) {\n  payrolls(\n    where: {_or: [{id: {_eq: $payrollId}}, {parent_payroll_id: {_eq: $payrollId}}]}\n    order_by: {version_number: asc}\n  ) {\n    id\n    version_number\n    payroll_dates(order_by: {adjusted_eft_date: asc}) {\n      ...PayrollDate\n    }\n  }\n}\n\nquery GetPayrollsMissingDates {\n  payrolls(where: {superseded_date: {_is_null: true}, _not: {payroll_dates: {}}}) {\n    id\n    name\n    client {\n      name\n    }\n  }\n}\n\nquery CheckPayrollVersion($id: uuid!) {\n  payrolls_by_pk(id: $id) {\n    id\n    superseded_date\n    version_number\n  }\n  latest: payrolls(\n    where: {parent_payroll_id: {_eq: $id}, superseded_date: {_is_null: true}}\n    limit: 1\n  ) {\n    id\n  }\n}\n\nquery GetPayrollData($start_date: date!, $end_date: date!) {\n  payrolls {\n    id\n    name\n    employee_count\n    processing_time\n    status\n    client {\n      id\n      name\n    }\n    userByPrimaryConsultantUserId {\n      id\n      name\n      leaves {\n        id\n        start_date\n        end_date\n        leave_type\n        reason\n        status\n      }\n    }\n    userByBackupConsultantUserId {\n      id\n      name\n      leaves {\n        id\n        start_date\n        end_date\n        leave_type\n        reason\n        status\n      }\n    }\n  }\n  payroll_dates(where: {adjusted_eft_date: {_gte: $start_date, _lte: $end_date}}) {\n    id\n    payroll_id\n    original_eft_date\n    adjusted_eft_date\n    processing_date\n    payroll {\n      id\n      name\n      employee_count\n      processing_time\n      client {\n        name\n      }\n      userByPrimaryConsultantUserId {\n        id\n        name\n      }\n      userByBackupConsultantUserId {\n        id\n        name\n      }\n    }\n  }\n  holidays(where: {date: {_gte: $start_date, _lte: $end_date}}) {\n    id\n    date\n    local_name\n    types\n    region\n    country_code\n  }\n}"): (typeof documents)["query GetPayrolls {\n  payrolls(\n    where: {superseded_date: {_is_null: true}}\n    order_by: {updated_at: desc}\n  ) {\n    ...PayrollWithDates\n  }\n}\n\nquery GetPayrollById($id: uuid!) {\n  payrolls_by_pk(id: $id) {\n    ...PayrollWithDates\n  }\n}\n\nquery GetPayrollsByClient($clientId: uuid!) {\n  payrolls(\n    where: {client_id: {_eq: $clientId}, superseded_date: {_is_null: true}}\n    order_by: {updated_at: desc}\n  ) {\n    ...PayrollWithDates\n  }\n}\n\nquery GetPayrollsByMonth($startDate: date!, $endDate: date!) {\n  payrolls(\n    where: {superseded_date: {_is_null: true}, payroll_dates: {adjusted_eft_date: {_gte: $startDate, _lte: $endDate}}}\n    order_by: {updated_at: desc}\n  ) {\n    ...PayrollWithDates\n  }\n}\n\nquery GetPayrollDates($payrollId: uuid!) {\n  payroll_dates(\n    where: {payroll_id: {_eq: $payrollId}}\n    order_by: {adjusted_eft_date: asc}\n  ) {\n    ...PayrollDate\n  }\n}\n\nquery GetPayrollFamilyDates($payrollId: uuid!) {\n  payrolls(\n    where: {_or: [{id: {_eq: $payrollId}}, {parent_payroll_id: {_eq: $payrollId}}]}\n    order_by: {version_number: asc}\n  ) {\n    id\n    version_number\n    payroll_dates(order_by: {adjusted_eft_date: asc}) {\n      ...PayrollDate\n    }\n  }\n}\n\nquery GetPayrollsMissingDates {\n  payrolls(where: {superseded_date: {_is_null: true}, _not: {payroll_dates: {}}}) {\n    id\n    name\n    client {\n      name\n    }\n  }\n}\n\nquery CheckPayrollVersion($id: uuid!) {\n  payrolls_by_pk(id: $id) {\n    id\n    superseded_date\n    version_number\n  }\n  latest: payrolls(\n    where: {parent_payroll_id: {_eq: $id}, superseded_date: {_is_null: true}}\n    limit: 1\n  ) {\n    id\n  }\n}\n\nquery GetPayrollData($start_date: date!, $end_date: date!) {\n  payrolls {\n    id\n    name\n    employee_count\n    processing_time\n    status\n    client {\n      id\n      name\n    }\n    userByPrimaryConsultantUserId {\n      id\n      name\n      leaves {\n        id\n        start_date\n        end_date\n        leave_type\n        reason\n        status\n      }\n    }\n    userByBackupConsultantUserId {\n      id\n      name\n      leaves {\n        id\n        start_date\n        end_date\n        leave_type\n        reason\n        status\n      }\n    }\n  }\n  payroll_dates(where: {adjusted_eft_date: {_gte: $start_date, _lte: $end_date}}) {\n    id\n    payroll_id\n    original_eft_date\n    adjusted_eft_date\n    processing_date\n    payroll {\n      id\n      name\n      employee_count\n      processing_time\n      client {\n        name\n      }\n      userByPrimaryConsultantUserId {\n        id\n        name\n      }\n      userByBackupConsultantUserId {\n        id\n        name\n      }\n    }\n  }\n  holidays(where: {date: {_gte: $start_date, _lte: $end_date}}) {\n    id\n    date\n    local_name\n    types\n    region\n    country_code\n  }\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "subscription PayrollUpdates($id: uuid!) {\n  payrolls_by_pk(id: $id) {\n    ...PayrollWithDates\n  }\n}\n\nsubscription PayrollListUpdates {\n  payrolls(\n    where: {superseded_date: {_is_null: true}}\n    order_by: {updated_at: desc}\n  ) {\n    ...PayrollBasicInfo\n  }\n}\n\nsubscription PayrollDateUpdates($payrollId: uuid!) {\n  payroll_dates(\n    where: {payroll_id: {_eq: $payrollId}}\n    order_by: {adjusted_eft_date: asc}\n  ) {\n    ...PayrollDate\n  }\n}"): (typeof documents)["subscription PayrollUpdates($id: uuid!) {\n  payrolls_by_pk(id: $id) {\n    ...PayrollWithDates\n  }\n}\n\nsubscription PayrollListUpdates {\n  payrolls(\n    where: {superseded_date: {_is_null: true}}\n    order_by: {updated_at: desc}\n  ) {\n    ...PayrollBasicInfo\n  }\n}\n\nsubscription PayrollDateUpdates($payrollId: uuid!) {\n  payroll_dates(\n    where: {payroll_id: {_eq: $payrollId}}\n    order_by: {adjusted_eft_date: asc}\n  ) {\n    ...PayrollDate\n  }\n}"];

export function graphql(source: string) {
  return (documents as any)[source] ?? {};
}

export type DocumentType<TDocumentNode extends DocumentNode<any, any>> = TDocumentNode extends DocumentNode<  infer TType,  any>  ? TType  : never;