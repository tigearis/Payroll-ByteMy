/* eslint-disable */
import * as types from './graphql';
import { TypedDocumentNode as DocumentNode } from '@graphql-typed-document-node/core';

/**
 * Map of all GraphQL operations in the project.
 *
 * This map has several performance disadvantages:
 * 1. It is not tree-shakeable, so it will include all operations in the project.
 * 2. It is not minifiable, so the string of a GraphQL query will be multiple times inside the bundle.
 * 3. It does not support dead code elimination, so it will add unused operations.
 *
 * Therefore it is highly recommended to use the babel or swc plugin for production.
 * Learn more about it here: https://the-guild.dev/graphql/codegen/plugins/presets/preset-client#reducing-bundle-size
 */
type Documents = {
    "fragment AuditLogCore on audit_audit_log {\n  id\n  event_time\n  user_id\n  user_email\n  user_role\n  action\n  resource_type\n  resource_id\n  old_values\n  new_values\n  ip_address\n  user_agent\n  session_id\n  request_id\n  success\n  error_message\n  created_at\n}\n\nfragment AuditLogWithUser on audit_audit_log {\n  ...AuditLogCore\n}\n\nfragment DataAccessLogCore on audit_data_access_log {\n  id\n  accessed_at\n  user_id\n  resource_type\n  resource_id\n  access_type\n  data_classification\n  fields_accessed\n  query_executed\n  row_count\n  ip_address\n  session_id\n  metadata\n}\n\nfragment DataAccessLogWithUser on audit_data_access_log {\n  ...DataAccessLogCore\n}\n\nfragment SecurityEventLogCore on audit_auth_events {\n  id\n  event_time\n  event_type\n  user_id\n  user_email\n  ip_address\n  user_agent\n  success\n  failure_reason\n  metadata\n  created_at\n}\n\nfragment SecurityEventLogWithUser on audit_auth_events {\n  ...SecurityEventLogCore\n}\n\nfragment PermissionChangeCore on audit_permission_changes {\n  id\n  changed_at\n  changed_by_user_id\n  target_user_id\n  target_role_id\n  change_type\n  permission_type\n  old_permissions\n  new_permissions\n  reason\n  approved_by_user_id\n  metadata\n}": typeof types.AuditLogCoreFragmentDoc,
    "mutation CreateSecurityEvent($object: audit_auth_events_insert_input!) {\n  insert_audit_auth_events_one(object: $object) {\n    ...SecurityEventLogCore\n  }\n}\n\nmutation ResolveSecurityEvent($id: uuid!, $resolution_notes: String!) {\n  update_audit_auth_events_by_pk(\n    pk_columns: {id: $id}\n    _set: {metadata: {resolution_notes: $resolution_notes, resolved: true, resolved_at: \"now()\"}}\n  ) {\n    ...SecurityEventLogWithUser\n  }\n}\n\nmutation UpdateSecurityEventSeverity($id: uuid!, $severity: String!) {\n  update_audit_auth_events_by_pk(\n    pk_columns: {id: $id}\n    _set: {metadata: {severity: $severity}}\n  ) {\n    ...SecurityEventLogCore\n  }\n}\n\nmutation CreateDataAccessLog($object: audit_data_access_log_insert_input!) {\n  insert_audit_data_access_log_one(object: $object) {\n    ...DataAccessLogCore\n  }\n}\n\nmutation CreateAuditLog($object: audit_audit_log_insert_input!) {\n  insert_audit_audit_log_one(object: $object) {\n    ...AuditLogCore\n  }\n}\n\nmutation LogPermissionChange($object: audit_permission_changes_insert_input!) {\n  insert_audit_permission_changes_one(object: $object) {\n    ...PermissionChangeCore\n  }\n}\n\nmutation BulkResolveSecurityEvents($event_ids: [uuid!]!, $resolution_notes: String!) {\n  update_audit_auth_events(\n    where: {id: {_in: $event_ids}}\n    _set: {metadata: {resolution_notes: $resolution_notes, resolved: true, resolved_at: \"now()\"}}\n  ) {\n    affected_rows\n    returning {\n      ...SecurityEventLogCore\n    }\n  }\n}": typeof types.CreateSecurityEventDocument,
    "query GetAuditLogs($where: audit_audit_log_bool_exp, $order_by: [audit_audit_log_order_by!], $limit: Int, $offset: Int) {\n  audit_audit_log(\n    where: $where\n    order_by: $order_by\n    limit: $limit\n    offset: $offset\n  ) {\n    ...AuditLogWithUser\n  }\n  audit_audit_log_aggregate(where: $where) {\n    aggregate {\n      count\n    }\n  }\n}\n\nquery GetAuditLogsByEntity($resource_type: String!, $resource_id: String!, $limit: Int = 50) {\n  audit_audit_log(\n    where: {resource_type: {_eq: $resource_type}, resource_id: {_eq: $resource_id}}\n    order_by: {created_at: desc}\n    limit: $limit\n  ) {\n    ...AuditLogWithUser\n  }\n}\n\nquery GetAuditLogsByUser($user_id: uuid!, $start_date: timestamptz, $end_date: timestamptz) {\n  audit_audit_log(\n    where: {user_id: {_eq: $user_id}, created_at: {_gte: $start_date, _lte: $end_date}}\n    order_by: {created_at: desc}\n  ) {\n    ...AuditLogCore\n  }\n}\n\nquery GetFailedAuditLogs($start_date: timestamptz!, $end_date: timestamptz!) {\n  audit_audit_log(\n    where: {success: {_eq: false}, created_at: {_gte: $start_date, _lte: $end_date}}\n    order_by: {created_at: desc}\n  ) {\n    ...AuditLogWithUser\n  }\n}\n\nquery GetDataAccessLogs($where: audit_data_access_log_bool_exp, $order_by: [audit_data_access_log_order_by!], $limit: Int, $offset: Int) {\n  audit_data_access_log(\n    where: $where\n    order_by: $order_by\n    limit: $limit\n    offset: $offset\n  ) {\n    ...DataAccessLogWithUser\n  }\n  audit_data_access_log_aggregate(where: $where) {\n    aggregate {\n      count\n      sum {\n        row_count\n      }\n    }\n  }\n}\n\nquery GetDataExports($start_date: timestamptz!, $end_date: timestamptz!) {\n  audit_data_access_log(\n    where: {access_type: {_eq: \"export\"}, accessed_at: {_gte: $start_date, _lte: $end_date}}\n    order_by: {accessed_at: desc}\n  ) {\n    ...DataAccessLogWithUser\n  }\n}\n\nquery GetSecurityEvents($where: audit_auth_events_bool_exp, $order_by: [audit_auth_events_order_by!], $limit: Int, $offset: Int) {\n  audit_auth_events(\n    where: $where\n    order_by: $order_by\n    limit: $limit\n    offset: $offset\n  ) {\n    ...SecurityEventLogWithUser\n  }\n  audit_auth_events_aggregate(where: $where) {\n    aggregate {\n      count\n    }\n  }\n}\n\nquery GetUnresolvedSecurityEvents {\n  audit_auth_events(\n    where: {_not: {metadata: {_has_key: \"resolved\"}}}\n    order_by: {created_at: desc}\n  ) {\n    ...SecurityEventLogWithUser\n  }\n}\n\nquery GetSecurityEventsByUser($user_id: uuid!) {\n  audit_auth_events(\n    where: {user_id: {_eq: $user_id}}\n    order_by: {created_at: desc}\n  ) {\n    ...SecurityEventLogCore\n  }\n}\n\nquery GetPermissionChanges($where: audit_permission_changes_bool_exp, $order_by: [audit_permission_changes_order_by!]) {\n  audit_permission_changes(where: $where, order_by: $order_by) {\n    ...PermissionChangeCore\n  }\n}\n\nquery GetUserPermissionChanges($user_id: uuid!, $limit: Int = 50) {\n  audit_permission_changes(\n    where: {target_user_id: {_eq: $user_id}}\n    order_by: {changed_at: desc}\n    limit: $limit\n  ) {\n    ...PermissionChangeCore\n  }\n}\n\nquery GetAuditAnalytics($start_date: timestamptz!, $end_date: timestamptz!) {\n  actions_by_type: audit_audit_log_aggregate(\n    where: {created_at: {_gte: $start_date, _lte: $end_date}}\n  ) {\n    nodes {\n      action\n    }\n    aggregate {\n      count\n    }\n  }\n  actions_by_resource: audit_audit_log_aggregate(\n    where: {created_at: {_gte: $start_date, _lte: $end_date}}\n  ) {\n    nodes {\n      resource_type\n    }\n    aggregate {\n      count\n    }\n  }\n  failed_actions: audit_audit_log_aggregate(\n    where: {success: {_eq: false}, created_at: {_gte: $start_date, _lte: $end_date}}\n  ) {\n    aggregate {\n      count\n    }\n  }\n  security_events_by_type: audit_auth_events_aggregate(\n    where: {created_at: {_gte: $start_date, _lte: $end_date}}\n  ) {\n    nodes {\n      event_type\n    }\n    aggregate {\n      count\n    }\n  }\n}": typeof types.GetAuditLogsDocument,
    "subscription SubscribeToAuditLogs($resource_type: String, $resource_id: String) {\n  audit_audit_log(\n    where: {resource_type: {_eq: $resource_type}, resource_id: {_eq: $resource_id}}\n    order_by: {created_at: desc}\n    limit: 10\n  ) {\n    ...AuditLogWithUser\n  }\n}\n\nsubscription SubscribeToSecurityEvents {\n  audit_auth_events(\n    where: {_not: {metadata: {_has_key: \"resolved\"}}}\n    order_by: {created_at: desc}\n  ) {\n    ...SecurityEventLogWithUser\n  }\n}\n\nsubscription SubscribeToUserAuditActivity($user_id: uuid!) {\n  audit_audit_log(\n    where: {user_id: {_eq: $user_id}}\n    order_by: {created_at: desc}\n    limit: 20\n  ) {\n    ...AuditLogCore\n  }\n}\n\nsubscription SubscribeToDataExports {\n  audit_data_access_log(\n    where: {access_type: {_eq: \"export\"}}\n    order_by: {accessed_at: desc}\n    limit: 10\n  ) {\n    ...DataAccessLogWithUser\n  }\n}": typeof types.SubscribeToAuditLogsDocument,
};
const documents: Documents = {
    "fragment AuditLogCore on audit_audit_log {\n  id\n  event_time\n  user_id\n  user_email\n  user_role\n  action\n  resource_type\n  resource_id\n  old_values\n  new_values\n  ip_address\n  user_agent\n  session_id\n  request_id\n  success\n  error_message\n  created_at\n}\n\nfragment AuditLogWithUser on audit_audit_log {\n  ...AuditLogCore\n}\n\nfragment DataAccessLogCore on audit_data_access_log {\n  id\n  accessed_at\n  user_id\n  resource_type\n  resource_id\n  access_type\n  data_classification\n  fields_accessed\n  query_executed\n  row_count\n  ip_address\n  session_id\n  metadata\n}\n\nfragment DataAccessLogWithUser on audit_data_access_log {\n  ...DataAccessLogCore\n}\n\nfragment SecurityEventLogCore on audit_auth_events {\n  id\n  event_time\n  event_type\n  user_id\n  user_email\n  ip_address\n  user_agent\n  success\n  failure_reason\n  metadata\n  created_at\n}\n\nfragment SecurityEventLogWithUser on audit_auth_events {\n  ...SecurityEventLogCore\n}\n\nfragment PermissionChangeCore on audit_permission_changes {\n  id\n  changed_at\n  changed_by_user_id\n  target_user_id\n  target_role_id\n  change_type\n  permission_type\n  old_permissions\n  new_permissions\n  reason\n  approved_by_user_id\n  metadata\n}": types.AuditLogCoreFragmentDoc,
    "mutation CreateSecurityEvent($object: audit_auth_events_insert_input!) {\n  insert_audit_auth_events_one(object: $object) {\n    ...SecurityEventLogCore\n  }\n}\n\nmutation ResolveSecurityEvent($id: uuid!, $resolution_notes: String!) {\n  update_audit_auth_events_by_pk(\n    pk_columns: {id: $id}\n    _set: {metadata: {resolution_notes: $resolution_notes, resolved: true, resolved_at: \"now()\"}}\n  ) {\n    ...SecurityEventLogWithUser\n  }\n}\n\nmutation UpdateSecurityEventSeverity($id: uuid!, $severity: String!) {\n  update_audit_auth_events_by_pk(\n    pk_columns: {id: $id}\n    _set: {metadata: {severity: $severity}}\n  ) {\n    ...SecurityEventLogCore\n  }\n}\n\nmutation CreateDataAccessLog($object: audit_data_access_log_insert_input!) {\n  insert_audit_data_access_log_one(object: $object) {\n    ...DataAccessLogCore\n  }\n}\n\nmutation CreateAuditLog($object: audit_audit_log_insert_input!) {\n  insert_audit_audit_log_one(object: $object) {\n    ...AuditLogCore\n  }\n}\n\nmutation LogPermissionChange($object: audit_permission_changes_insert_input!) {\n  insert_audit_permission_changes_one(object: $object) {\n    ...PermissionChangeCore\n  }\n}\n\nmutation BulkResolveSecurityEvents($event_ids: [uuid!]!, $resolution_notes: String!) {\n  update_audit_auth_events(\n    where: {id: {_in: $event_ids}}\n    _set: {metadata: {resolution_notes: $resolution_notes, resolved: true, resolved_at: \"now()\"}}\n  ) {\n    affected_rows\n    returning {\n      ...SecurityEventLogCore\n    }\n  }\n}": types.CreateSecurityEventDocument,
    "query GetAuditLogs($where: audit_audit_log_bool_exp, $order_by: [audit_audit_log_order_by!], $limit: Int, $offset: Int) {\n  audit_audit_log(\n    where: $where\n    order_by: $order_by\n    limit: $limit\n    offset: $offset\n  ) {\n    ...AuditLogWithUser\n  }\n  audit_audit_log_aggregate(where: $where) {\n    aggregate {\n      count\n    }\n  }\n}\n\nquery GetAuditLogsByEntity($resource_type: String!, $resource_id: String!, $limit: Int = 50) {\n  audit_audit_log(\n    where: {resource_type: {_eq: $resource_type}, resource_id: {_eq: $resource_id}}\n    order_by: {created_at: desc}\n    limit: $limit\n  ) {\n    ...AuditLogWithUser\n  }\n}\n\nquery GetAuditLogsByUser($user_id: uuid!, $start_date: timestamptz, $end_date: timestamptz) {\n  audit_audit_log(\n    where: {user_id: {_eq: $user_id}, created_at: {_gte: $start_date, _lte: $end_date}}\n    order_by: {created_at: desc}\n  ) {\n    ...AuditLogCore\n  }\n}\n\nquery GetFailedAuditLogs($start_date: timestamptz!, $end_date: timestamptz!) {\n  audit_audit_log(\n    where: {success: {_eq: false}, created_at: {_gte: $start_date, _lte: $end_date}}\n    order_by: {created_at: desc}\n  ) {\n    ...AuditLogWithUser\n  }\n}\n\nquery GetDataAccessLogs($where: audit_data_access_log_bool_exp, $order_by: [audit_data_access_log_order_by!], $limit: Int, $offset: Int) {\n  audit_data_access_log(\n    where: $where\n    order_by: $order_by\n    limit: $limit\n    offset: $offset\n  ) {\n    ...DataAccessLogWithUser\n  }\n  audit_data_access_log_aggregate(where: $where) {\n    aggregate {\n      count\n      sum {\n        row_count\n      }\n    }\n  }\n}\n\nquery GetDataExports($start_date: timestamptz!, $end_date: timestamptz!) {\n  audit_data_access_log(\n    where: {access_type: {_eq: \"export\"}, accessed_at: {_gte: $start_date, _lte: $end_date}}\n    order_by: {accessed_at: desc}\n  ) {\n    ...DataAccessLogWithUser\n  }\n}\n\nquery GetSecurityEvents($where: audit_auth_events_bool_exp, $order_by: [audit_auth_events_order_by!], $limit: Int, $offset: Int) {\n  audit_auth_events(\n    where: $where\n    order_by: $order_by\n    limit: $limit\n    offset: $offset\n  ) {\n    ...SecurityEventLogWithUser\n  }\n  audit_auth_events_aggregate(where: $where) {\n    aggregate {\n      count\n    }\n  }\n}\n\nquery GetUnresolvedSecurityEvents {\n  audit_auth_events(\n    where: {_not: {metadata: {_has_key: \"resolved\"}}}\n    order_by: {created_at: desc}\n  ) {\n    ...SecurityEventLogWithUser\n  }\n}\n\nquery GetSecurityEventsByUser($user_id: uuid!) {\n  audit_auth_events(\n    where: {user_id: {_eq: $user_id}}\n    order_by: {created_at: desc}\n  ) {\n    ...SecurityEventLogCore\n  }\n}\n\nquery GetPermissionChanges($where: audit_permission_changes_bool_exp, $order_by: [audit_permission_changes_order_by!]) {\n  audit_permission_changes(where: $where, order_by: $order_by) {\n    ...PermissionChangeCore\n  }\n}\n\nquery GetUserPermissionChanges($user_id: uuid!, $limit: Int = 50) {\n  audit_permission_changes(\n    where: {target_user_id: {_eq: $user_id}}\n    order_by: {changed_at: desc}\n    limit: $limit\n  ) {\n    ...PermissionChangeCore\n  }\n}\n\nquery GetAuditAnalytics($start_date: timestamptz!, $end_date: timestamptz!) {\n  actions_by_type: audit_audit_log_aggregate(\n    where: {created_at: {_gte: $start_date, _lte: $end_date}}\n  ) {\n    nodes {\n      action\n    }\n    aggregate {\n      count\n    }\n  }\n  actions_by_resource: audit_audit_log_aggregate(\n    where: {created_at: {_gte: $start_date, _lte: $end_date}}\n  ) {\n    nodes {\n      resource_type\n    }\n    aggregate {\n      count\n    }\n  }\n  failed_actions: audit_audit_log_aggregate(\n    where: {success: {_eq: false}, created_at: {_gte: $start_date, _lte: $end_date}}\n  ) {\n    aggregate {\n      count\n    }\n  }\n  security_events_by_type: audit_auth_events_aggregate(\n    where: {created_at: {_gte: $start_date, _lte: $end_date}}\n  ) {\n    nodes {\n      event_type\n    }\n    aggregate {\n      count\n    }\n  }\n}": types.GetAuditLogsDocument,
    "subscription SubscribeToAuditLogs($resource_type: String, $resource_id: String) {\n  audit_audit_log(\n    where: {resource_type: {_eq: $resource_type}, resource_id: {_eq: $resource_id}}\n    order_by: {created_at: desc}\n    limit: 10\n  ) {\n    ...AuditLogWithUser\n  }\n}\n\nsubscription SubscribeToSecurityEvents {\n  audit_auth_events(\n    where: {_not: {metadata: {_has_key: \"resolved\"}}}\n    order_by: {created_at: desc}\n  ) {\n    ...SecurityEventLogWithUser\n  }\n}\n\nsubscription SubscribeToUserAuditActivity($user_id: uuid!) {\n  audit_audit_log(\n    where: {user_id: {_eq: $user_id}}\n    order_by: {created_at: desc}\n    limit: 20\n  ) {\n    ...AuditLogCore\n  }\n}\n\nsubscription SubscribeToDataExports {\n  audit_data_access_log(\n    where: {access_type: {_eq: \"export\"}}\n    order_by: {accessed_at: desc}\n    limit: 10\n  ) {\n    ...DataAccessLogWithUser\n  }\n}": types.SubscribeToAuditLogsDocument,
};

/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 *
 *
 * @example
 * ```ts
 * const query = graphql(`query GetUser($id: ID!) { user(id: $id) { name } }`);
 * ```
 *
 * The query argument is unknown!
 * Please regenerate the types.
 */
export function graphql(source: string): unknown;

/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "fragment AuditLogCore on audit_audit_log {\n  id\n  event_time\n  user_id\n  user_email\n  user_role\n  action\n  resource_type\n  resource_id\n  old_values\n  new_values\n  ip_address\n  user_agent\n  session_id\n  request_id\n  success\n  error_message\n  created_at\n}\n\nfragment AuditLogWithUser on audit_audit_log {\n  ...AuditLogCore\n}\n\nfragment DataAccessLogCore on audit_data_access_log {\n  id\n  accessed_at\n  user_id\n  resource_type\n  resource_id\n  access_type\n  data_classification\n  fields_accessed\n  query_executed\n  row_count\n  ip_address\n  session_id\n  metadata\n}\n\nfragment DataAccessLogWithUser on audit_data_access_log {\n  ...DataAccessLogCore\n}\n\nfragment SecurityEventLogCore on audit_auth_events {\n  id\n  event_time\n  event_type\n  user_id\n  user_email\n  ip_address\n  user_agent\n  success\n  failure_reason\n  metadata\n  created_at\n}\n\nfragment SecurityEventLogWithUser on audit_auth_events {\n  ...SecurityEventLogCore\n}\n\nfragment PermissionChangeCore on audit_permission_changes {\n  id\n  changed_at\n  changed_by_user_id\n  target_user_id\n  target_role_id\n  change_type\n  permission_type\n  old_permissions\n  new_permissions\n  reason\n  approved_by_user_id\n  metadata\n}"): (typeof documents)["fragment AuditLogCore on audit_audit_log {\n  id\n  event_time\n  user_id\n  user_email\n  user_role\n  action\n  resource_type\n  resource_id\n  old_values\n  new_values\n  ip_address\n  user_agent\n  session_id\n  request_id\n  success\n  error_message\n  created_at\n}\n\nfragment AuditLogWithUser on audit_audit_log {\n  ...AuditLogCore\n}\n\nfragment DataAccessLogCore on audit_data_access_log {\n  id\n  accessed_at\n  user_id\n  resource_type\n  resource_id\n  access_type\n  data_classification\n  fields_accessed\n  query_executed\n  row_count\n  ip_address\n  session_id\n  metadata\n}\n\nfragment DataAccessLogWithUser on audit_data_access_log {\n  ...DataAccessLogCore\n}\n\nfragment SecurityEventLogCore on audit_auth_events {\n  id\n  event_time\n  event_type\n  user_id\n  user_email\n  ip_address\n  user_agent\n  success\n  failure_reason\n  metadata\n  created_at\n}\n\nfragment SecurityEventLogWithUser on audit_auth_events {\n  ...SecurityEventLogCore\n}\n\nfragment PermissionChangeCore on audit_permission_changes {\n  id\n  changed_at\n  changed_by_user_id\n  target_user_id\n  target_role_id\n  change_type\n  permission_type\n  old_permissions\n  new_permissions\n  reason\n  approved_by_user_id\n  metadata\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "mutation CreateSecurityEvent($object: audit_auth_events_insert_input!) {\n  insert_audit_auth_events_one(object: $object) {\n    ...SecurityEventLogCore\n  }\n}\n\nmutation ResolveSecurityEvent($id: uuid!, $resolution_notes: String!) {\n  update_audit_auth_events_by_pk(\n    pk_columns: {id: $id}\n    _set: {metadata: {resolution_notes: $resolution_notes, resolved: true, resolved_at: \"now()\"}}\n  ) {\n    ...SecurityEventLogWithUser\n  }\n}\n\nmutation UpdateSecurityEventSeverity($id: uuid!, $severity: String!) {\n  update_audit_auth_events_by_pk(\n    pk_columns: {id: $id}\n    _set: {metadata: {severity: $severity}}\n  ) {\n    ...SecurityEventLogCore\n  }\n}\n\nmutation CreateDataAccessLog($object: audit_data_access_log_insert_input!) {\n  insert_audit_data_access_log_one(object: $object) {\n    ...DataAccessLogCore\n  }\n}\n\nmutation CreateAuditLog($object: audit_audit_log_insert_input!) {\n  insert_audit_audit_log_one(object: $object) {\n    ...AuditLogCore\n  }\n}\n\nmutation LogPermissionChange($object: audit_permission_changes_insert_input!) {\n  insert_audit_permission_changes_one(object: $object) {\n    ...PermissionChangeCore\n  }\n}\n\nmutation BulkResolveSecurityEvents($event_ids: [uuid!]!, $resolution_notes: String!) {\n  update_audit_auth_events(\n    where: {id: {_in: $event_ids}}\n    _set: {metadata: {resolution_notes: $resolution_notes, resolved: true, resolved_at: \"now()\"}}\n  ) {\n    affected_rows\n    returning {\n      ...SecurityEventLogCore\n    }\n  }\n}"): (typeof documents)["mutation CreateSecurityEvent($object: audit_auth_events_insert_input!) {\n  insert_audit_auth_events_one(object: $object) {\n    ...SecurityEventLogCore\n  }\n}\n\nmutation ResolveSecurityEvent($id: uuid!, $resolution_notes: String!) {\n  update_audit_auth_events_by_pk(\n    pk_columns: {id: $id}\n    _set: {metadata: {resolution_notes: $resolution_notes, resolved: true, resolved_at: \"now()\"}}\n  ) {\n    ...SecurityEventLogWithUser\n  }\n}\n\nmutation UpdateSecurityEventSeverity($id: uuid!, $severity: String!) {\n  update_audit_auth_events_by_pk(\n    pk_columns: {id: $id}\n    _set: {metadata: {severity: $severity}}\n  ) {\n    ...SecurityEventLogCore\n  }\n}\n\nmutation CreateDataAccessLog($object: audit_data_access_log_insert_input!) {\n  insert_audit_data_access_log_one(object: $object) {\n    ...DataAccessLogCore\n  }\n}\n\nmutation CreateAuditLog($object: audit_audit_log_insert_input!) {\n  insert_audit_audit_log_one(object: $object) {\n    ...AuditLogCore\n  }\n}\n\nmutation LogPermissionChange($object: audit_permission_changes_insert_input!) {\n  insert_audit_permission_changes_one(object: $object) {\n    ...PermissionChangeCore\n  }\n}\n\nmutation BulkResolveSecurityEvents($event_ids: [uuid!]!, $resolution_notes: String!) {\n  update_audit_auth_events(\n    where: {id: {_in: $event_ids}}\n    _set: {metadata: {resolution_notes: $resolution_notes, resolved: true, resolved_at: \"now()\"}}\n  ) {\n    affected_rows\n    returning {\n      ...SecurityEventLogCore\n    }\n  }\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "query GetAuditLogs($where: audit_audit_log_bool_exp, $order_by: [audit_audit_log_order_by!], $limit: Int, $offset: Int) {\n  audit_audit_log(\n    where: $where\n    order_by: $order_by\n    limit: $limit\n    offset: $offset\n  ) {\n    ...AuditLogWithUser\n  }\n  audit_audit_log_aggregate(where: $where) {\n    aggregate {\n      count\n    }\n  }\n}\n\nquery GetAuditLogsByEntity($resource_type: String!, $resource_id: String!, $limit: Int = 50) {\n  audit_audit_log(\n    where: {resource_type: {_eq: $resource_type}, resource_id: {_eq: $resource_id}}\n    order_by: {created_at: desc}\n    limit: $limit\n  ) {\n    ...AuditLogWithUser\n  }\n}\n\nquery GetAuditLogsByUser($user_id: uuid!, $start_date: timestamptz, $end_date: timestamptz) {\n  audit_audit_log(\n    where: {user_id: {_eq: $user_id}, created_at: {_gte: $start_date, _lte: $end_date}}\n    order_by: {created_at: desc}\n  ) {\n    ...AuditLogCore\n  }\n}\n\nquery GetFailedAuditLogs($start_date: timestamptz!, $end_date: timestamptz!) {\n  audit_audit_log(\n    where: {success: {_eq: false}, created_at: {_gte: $start_date, _lte: $end_date}}\n    order_by: {created_at: desc}\n  ) {\n    ...AuditLogWithUser\n  }\n}\n\nquery GetDataAccessLogs($where: audit_data_access_log_bool_exp, $order_by: [audit_data_access_log_order_by!], $limit: Int, $offset: Int) {\n  audit_data_access_log(\n    where: $where\n    order_by: $order_by\n    limit: $limit\n    offset: $offset\n  ) {\n    ...DataAccessLogWithUser\n  }\n  audit_data_access_log_aggregate(where: $where) {\n    aggregate {\n      count\n      sum {\n        row_count\n      }\n    }\n  }\n}\n\nquery GetDataExports($start_date: timestamptz!, $end_date: timestamptz!) {\n  audit_data_access_log(\n    where: {access_type: {_eq: \"export\"}, accessed_at: {_gte: $start_date, _lte: $end_date}}\n    order_by: {accessed_at: desc}\n  ) {\n    ...DataAccessLogWithUser\n  }\n}\n\nquery GetSecurityEvents($where: audit_auth_events_bool_exp, $order_by: [audit_auth_events_order_by!], $limit: Int, $offset: Int) {\n  audit_auth_events(\n    where: $where\n    order_by: $order_by\n    limit: $limit\n    offset: $offset\n  ) {\n    ...SecurityEventLogWithUser\n  }\n  audit_auth_events_aggregate(where: $where) {\n    aggregate {\n      count\n    }\n  }\n}\n\nquery GetUnresolvedSecurityEvents {\n  audit_auth_events(\n    where: {_not: {metadata: {_has_key: \"resolved\"}}}\n    order_by: {created_at: desc}\n  ) {\n    ...SecurityEventLogWithUser\n  }\n}\n\nquery GetSecurityEventsByUser($user_id: uuid!) {\n  audit_auth_events(\n    where: {user_id: {_eq: $user_id}}\n    order_by: {created_at: desc}\n  ) {\n    ...SecurityEventLogCore\n  }\n}\n\nquery GetPermissionChanges($where: audit_permission_changes_bool_exp, $order_by: [audit_permission_changes_order_by!]) {\n  audit_permission_changes(where: $where, order_by: $order_by) {\n    ...PermissionChangeCore\n  }\n}\n\nquery GetUserPermissionChanges($user_id: uuid!, $limit: Int = 50) {\n  audit_permission_changes(\n    where: {target_user_id: {_eq: $user_id}}\n    order_by: {changed_at: desc}\n    limit: $limit\n  ) {\n    ...PermissionChangeCore\n  }\n}\n\nquery GetAuditAnalytics($start_date: timestamptz!, $end_date: timestamptz!) {\n  actions_by_type: audit_audit_log_aggregate(\n    where: {created_at: {_gte: $start_date, _lte: $end_date}}\n  ) {\n    nodes {\n      action\n    }\n    aggregate {\n      count\n    }\n  }\n  actions_by_resource: audit_audit_log_aggregate(\n    where: {created_at: {_gte: $start_date, _lte: $end_date}}\n  ) {\n    nodes {\n      resource_type\n    }\n    aggregate {\n      count\n    }\n  }\n  failed_actions: audit_audit_log_aggregate(\n    where: {success: {_eq: false}, created_at: {_gte: $start_date, _lte: $end_date}}\n  ) {\n    aggregate {\n      count\n    }\n  }\n  security_events_by_type: audit_auth_events_aggregate(\n    where: {created_at: {_gte: $start_date, _lte: $end_date}}\n  ) {\n    nodes {\n      event_type\n    }\n    aggregate {\n      count\n    }\n  }\n}"): (typeof documents)["query GetAuditLogs($where: audit_audit_log_bool_exp, $order_by: [audit_audit_log_order_by!], $limit: Int, $offset: Int) {\n  audit_audit_log(\n    where: $where\n    order_by: $order_by\n    limit: $limit\n    offset: $offset\n  ) {\n    ...AuditLogWithUser\n  }\n  audit_audit_log_aggregate(where: $where) {\n    aggregate {\n      count\n    }\n  }\n}\n\nquery GetAuditLogsByEntity($resource_type: String!, $resource_id: String!, $limit: Int = 50) {\n  audit_audit_log(\n    where: {resource_type: {_eq: $resource_type}, resource_id: {_eq: $resource_id}}\n    order_by: {created_at: desc}\n    limit: $limit\n  ) {\n    ...AuditLogWithUser\n  }\n}\n\nquery GetAuditLogsByUser($user_id: uuid!, $start_date: timestamptz, $end_date: timestamptz) {\n  audit_audit_log(\n    where: {user_id: {_eq: $user_id}, created_at: {_gte: $start_date, _lte: $end_date}}\n    order_by: {created_at: desc}\n  ) {\n    ...AuditLogCore\n  }\n}\n\nquery GetFailedAuditLogs($start_date: timestamptz!, $end_date: timestamptz!) {\n  audit_audit_log(\n    where: {success: {_eq: false}, created_at: {_gte: $start_date, _lte: $end_date}}\n    order_by: {created_at: desc}\n  ) {\n    ...AuditLogWithUser\n  }\n}\n\nquery GetDataAccessLogs($where: audit_data_access_log_bool_exp, $order_by: [audit_data_access_log_order_by!], $limit: Int, $offset: Int) {\n  audit_data_access_log(\n    where: $where\n    order_by: $order_by\n    limit: $limit\n    offset: $offset\n  ) {\n    ...DataAccessLogWithUser\n  }\n  audit_data_access_log_aggregate(where: $where) {\n    aggregate {\n      count\n      sum {\n        row_count\n      }\n    }\n  }\n}\n\nquery GetDataExports($start_date: timestamptz!, $end_date: timestamptz!) {\n  audit_data_access_log(\n    where: {access_type: {_eq: \"export\"}, accessed_at: {_gte: $start_date, _lte: $end_date}}\n    order_by: {accessed_at: desc}\n  ) {\n    ...DataAccessLogWithUser\n  }\n}\n\nquery GetSecurityEvents($where: audit_auth_events_bool_exp, $order_by: [audit_auth_events_order_by!], $limit: Int, $offset: Int) {\n  audit_auth_events(\n    where: $where\n    order_by: $order_by\n    limit: $limit\n    offset: $offset\n  ) {\n    ...SecurityEventLogWithUser\n  }\n  audit_auth_events_aggregate(where: $where) {\n    aggregate {\n      count\n    }\n  }\n}\n\nquery GetUnresolvedSecurityEvents {\n  audit_auth_events(\n    where: {_not: {metadata: {_has_key: \"resolved\"}}}\n    order_by: {created_at: desc}\n  ) {\n    ...SecurityEventLogWithUser\n  }\n}\n\nquery GetSecurityEventsByUser($user_id: uuid!) {\n  audit_auth_events(\n    where: {user_id: {_eq: $user_id}}\n    order_by: {created_at: desc}\n  ) {\n    ...SecurityEventLogCore\n  }\n}\n\nquery GetPermissionChanges($where: audit_permission_changes_bool_exp, $order_by: [audit_permission_changes_order_by!]) {\n  audit_permission_changes(where: $where, order_by: $order_by) {\n    ...PermissionChangeCore\n  }\n}\n\nquery GetUserPermissionChanges($user_id: uuid!, $limit: Int = 50) {\n  audit_permission_changes(\n    where: {target_user_id: {_eq: $user_id}}\n    order_by: {changed_at: desc}\n    limit: $limit\n  ) {\n    ...PermissionChangeCore\n  }\n}\n\nquery GetAuditAnalytics($start_date: timestamptz!, $end_date: timestamptz!) {\n  actions_by_type: audit_audit_log_aggregate(\n    where: {created_at: {_gte: $start_date, _lte: $end_date}}\n  ) {\n    nodes {\n      action\n    }\n    aggregate {\n      count\n    }\n  }\n  actions_by_resource: audit_audit_log_aggregate(\n    where: {created_at: {_gte: $start_date, _lte: $end_date}}\n  ) {\n    nodes {\n      resource_type\n    }\n    aggregate {\n      count\n    }\n  }\n  failed_actions: audit_audit_log_aggregate(\n    where: {success: {_eq: false}, created_at: {_gte: $start_date, _lte: $end_date}}\n  ) {\n    aggregate {\n      count\n    }\n  }\n  security_events_by_type: audit_auth_events_aggregate(\n    where: {created_at: {_gte: $start_date, _lte: $end_date}}\n  ) {\n    nodes {\n      event_type\n    }\n    aggregate {\n      count\n    }\n  }\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "subscription SubscribeToAuditLogs($resource_type: String, $resource_id: String) {\n  audit_audit_log(\n    where: {resource_type: {_eq: $resource_type}, resource_id: {_eq: $resource_id}}\n    order_by: {created_at: desc}\n    limit: 10\n  ) {\n    ...AuditLogWithUser\n  }\n}\n\nsubscription SubscribeToSecurityEvents {\n  audit_auth_events(\n    where: {_not: {metadata: {_has_key: \"resolved\"}}}\n    order_by: {created_at: desc}\n  ) {\n    ...SecurityEventLogWithUser\n  }\n}\n\nsubscription SubscribeToUserAuditActivity($user_id: uuid!) {\n  audit_audit_log(\n    where: {user_id: {_eq: $user_id}}\n    order_by: {created_at: desc}\n    limit: 20\n  ) {\n    ...AuditLogCore\n  }\n}\n\nsubscription SubscribeToDataExports {\n  audit_data_access_log(\n    where: {access_type: {_eq: \"export\"}}\n    order_by: {accessed_at: desc}\n    limit: 10\n  ) {\n    ...DataAccessLogWithUser\n  }\n}"): (typeof documents)["subscription SubscribeToAuditLogs($resource_type: String, $resource_id: String) {\n  audit_audit_log(\n    where: {resource_type: {_eq: $resource_type}, resource_id: {_eq: $resource_id}}\n    order_by: {created_at: desc}\n    limit: 10\n  ) {\n    ...AuditLogWithUser\n  }\n}\n\nsubscription SubscribeToSecurityEvents {\n  audit_auth_events(\n    where: {_not: {metadata: {_has_key: \"resolved\"}}}\n    order_by: {created_at: desc}\n  ) {\n    ...SecurityEventLogWithUser\n  }\n}\n\nsubscription SubscribeToUserAuditActivity($user_id: uuid!) {\n  audit_audit_log(\n    where: {user_id: {_eq: $user_id}}\n    order_by: {created_at: desc}\n    limit: 20\n  ) {\n    ...AuditLogCore\n  }\n}\n\nsubscription SubscribeToDataExports {\n  audit_data_access_log(\n    where: {access_type: {_eq: \"export\"}}\n    order_by: {accessed_at: desc}\n    limit: 10\n  ) {\n    ...DataAccessLogWithUser\n  }\n}"];

export function graphql(source: string) {
  return (documents as any)[source] ?? {};
}

export type DocumentType<TDocumentNode extends DocumentNode<any, any>> = TDocumentNode extends DocumentNode<  infer TType,  any>  ? TType  : never;