# Create or update user (upsert)
mutation UpsertUser(
  $clerkId: String!
  $name: String!
  $email: String!
  $role: user_role = viewer
  $isStaff: Boolean = false
  $managerId: uuid
) {
  insert_users_one(
    object: {
      clerk_user_id: $clerkId
      name: $name
      email: $email
      role: $role
      is_staff: $isStaff
      manager_id: $managerId
    }
    on_conflict: {
      constraint: users_clerk_user_id_key
      update_columns: [name, email, updated_at]
    }
  ) {
    id
    name
    email
    role
    clerk_user_id
    is_staff
    manager_id
    created_at
    updated_at
  }
}

# Update user role and manager
mutation UpdateUserRole(
  $id: uuid!
  $role: user_role!
  $managerId: uuid
  $isStaff: Boolean
) {
  update_users_by_pk(
    pk_columns: { id: $id }
    _set: {
      role: $role
      manager_id: $managerId
      is_staff: $isStaff
      updated_at: "now()"
    }
  ) {
    id
    name
    email
    role
    is_staff
    manager_id
    updated_at
    manager {
      id
      name
      email
    }
  }
}

# Update user by Clerk ID
mutation UpdateUserByClerkId(
  $clerkId: String!
  $name: String
  $email: String
  $role: user_role
  $managerId: uuid
  $isStaff: Boolean
) {
  update_users(
    where: { clerk_user_id: { _eq: $clerkId } }
    _set: {
      name: $name
      email: $email
      role: $role
      manager_id: $managerId
      is_staff: $isStaff
      updated_at: "now()"
    }
  ) {
    affected_rows
    returning {
      id
      name
      email
      role
      clerk_user_id
      is_staff
      manager_id
      updated_at
    }
  }
}

# Delete user
mutation DeleteUser($id: uuid!) {
  delete_users_by_pk(id: $id) {
    id
    name
    email
    clerk_user_id
  }
}

# Delete user by Clerk ID
mutation DeleteUserByClerkId($clerkId: String!) {
  delete_users(where: { clerk_user_id: { _eq: $clerkId } }) {
    affected_rows
    returning {
      id
      name
      email
      clerk_user_id
    }
  }
}

# Bulk update users
mutation BulkUpdateUsers($updates: [users_updates!]!) {
  update_users_many(updates: $updates) {
    affected_rows
    returning {
      id
      name
      email
      role
      updated_at
    }
  }
}
