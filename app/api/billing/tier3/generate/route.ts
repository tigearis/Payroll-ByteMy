import { NextRequest, NextResponse } from 'next/server';
import { serverApolloClient } from '@/lib/apollo/unified-client';
import { withAuth } from '@/lib/auth/api-auth';
import { logger, DataClassification } from "@/lib/logging/enterprise-logger";
import {
  CheckClientApiTier3Document,
  CheckMonthlyCompletionApiTier3Document,
  GetTier3ServicesForApiDocument,
  CheckExistingTier3BillingApiDocument,
  CreateBillingItemApiDocument,
  GetEmployeeCountApiTier3Document,
  LogBillingEventApiDocument,
  UpdateMonthlyCompletionApiTier3Document,
  type CheckClientApiTier3Query,
  type CheckClientApiTier3QueryVariables,
  type CheckMonthlyCompletionApiTier3Query,
  type CheckMonthlyCompletionApiTier3QueryVariables,
  type GetTier3ServicesForApiQuery,
  type GetTier3ServicesForApiQueryVariables,
  type CheckExistingTier3BillingApiQuery,
  type CheckExistingTier3BillingApiQueryVariables,
  type CreateBillingItemApiMutation,
  type CreateBillingItemApiMutationVariables,
  type GetEmployeeCountApiTier3Query,
  type GetEmployeeCountApiTier3QueryVariables,
  type LogBillingEventApiMutation,
  type LogBillingEventApiMutationVariables,
  type UpdateMonthlyCompletionApiTier3Mutation,
  type UpdateMonthlyCompletionApiTier3MutationVariables,
} from '@/domains/billing/graphql/generated/graphql';

interface GenerateTier3BillingRequest {
  clientId: string;
  billingMonth: string; // YYYY-MM-DD format (first day of month)
  generatedBy: string;
}

interface GenerateTier3BillingResponse {
  success: boolean;
  tier: number;
  clientId: string;
  billingMonth: string;
  itemsCreated: number;
  totalAmount: number;
  message: string;
  error?: string;
}

/**
 * Generate Tier 3 Billing (Monthly Client Level)
 * Generates monthly recurring services billing when all payroll dates are completed
 */
async function POST(request: NextRequest) {
  try {
    const body = await request.json() as GenerateTier3BillingRequest;
    const { clientId, billingMonth, generatedBy } = body;

    if (!clientId) {
      return NextResponse.json(
        { success: false, error: 'Client ID is required' },
        { status: 400 }
      );
    }

    if (!billingMonth) {
      return NextResponse.json(
        { success: false, error: 'Billing month is required' },
        { status: 400 }
      );
    }

    if (!generatedBy) {
      return NextResponse.json(
        { success: false, error: 'Generated By user ID is required' },
        { status: 400 }
      );
    }

    const client = serverApolloClient;

    // First, verify the client exists
    const { data: clientData } = await client.query<
      CheckClientApiTier3Query,
      CheckClientApiTier3QueryVariables
    >({
      query: CheckClientApiTier3Document,
      variables: { id: clientId },
      fetchPolicy: 'network-only'
    });

    if (!clientData?.clientsByPk) {
      return NextResponse.json(
        { success: false, error: 'Client not found' },
        { status: 404 }
      );
    }

    const clientInfo = clientData.clientsByPk;

    // Check monthly billing completion status
    const { data: completionData } = await client.query<
      CheckMonthlyCompletionApiTier3Query,
      CheckMonthlyCompletionApiTier3QueryVariables
    >({
      query: CheckMonthlyCompletionApiTier3Document,
      variables: { clientId, billingMonth },
      fetchPolicy: 'network-only'
    });

    const billingCompletion = completionData?.monthlyBillingCompletion?.[0];

    if (!billingCompletion || billingCompletion.status !== 'ready_to_bill') {
      return NextResponse.json(
        { success: false, error: 'Monthly billing not ready - all payroll dates must be completed' },
        { status: 400 }
      );
    }

    // Get tier 3 services (monthly client services)
    const { data: servicesData } = await client.query<
      GetTier3ServicesForApiQuery,
      GetTier3ServicesForApiQueryVariables
    >({
      query: GetTier3ServicesForApiDocument,
      variables: { clientId },
      fetchPolicy: 'network-only'
    });

    const serviceAgreements = servicesData?.clientServiceAgreements || [];
    let itemsCreated = 0;
    let totalAmount = 0;

    // Create billing items for each applicable service
    for (const agreement of serviceAgreements) {
      // Check if billing item already exists for this client + month + service
      const billingMonthStart = new Date(billingMonth);
      const billingMonthEnd = new Date(billingMonthStart.getFullYear(), billingMonthStart.getMonth() + 1, 0);

      const { data: existingData } = await client.query<
        CheckExistingTier3BillingApiQuery,
        CheckExistingTier3BillingApiQueryVariables
      >({
        query: CheckExistingTier3BillingApiDocument,
        variables: { 
          clientId,
          serviceId: agreement.serviceId,
          monthStart: billingMonthStart.toISOString(),
          monthEnd: billingMonthEnd.toISOString()
        },
        fetchPolicy: 'network-only'
      });

      if (existingData?.billingItems?.length > 0) {
        continue; // Skip if already billed
      }

      // Calculate billing details
      const effectiveRate = agreement.customRate || agreement.service.defaultRate || 0;
      
      // Calculate quantity based on billing unit
      let quantity = 1;
      if (agreement.service.billingUnit === 'Per Payroll') {
        quantity = billingCompletion.completedPayrolls || 1;
      } else if (agreement.service.billingUnit === 'Per Employee') {
        // Get average employee count for this month
        const { data: employeeData } = await client.query<
          GetEmployeeCountApiTier3Query,
          GetEmployeeCountApiTier3QueryVariables
        >({
          query: GetEmployeeCountApiTier3Document,
          variables: { clientId, billingMonth },
          fetchPolicy: 'network-only'
        });

        if (employeeData?.payrolls?.length > 0) {
          const avgEmployees = employeeData.payrolls.reduce((sum: number, p: any) => sum + (p.employeeCount || 0), 0) / employeeData.payrolls.length;
          quantity = Math.ceil(avgEmployees);
        }
      }

      const itemAmount = quantity * effectiveRate;

      // Create billing item
      const monthYear = new Date(billingMonth).toLocaleDateString('en-AU', { month: 'short', year: 'numeric' });
      const description = `${agreement.service.name} - ${clientInfo.name} (${monthYear})`;

      try {
        await client.mutate<
          CreateBillingItemApiMutation,
          CreateBillingItemApiMutationVariables
        >({
          mutation: CreateBillingItemApiDocument,
          variables: {
            input: {
              clientId,
              serviceId: agreement.serviceId,
              serviceName: agreement.service.name,
              description,
              quantity,
              unitPrice: effectiveRate,
              totalAmount: itemAmount,
              staffUserId: generatedBy,
              status: 'confirmed'
            }
          }
        });

        itemsCreated++;
        totalAmount += itemAmount;
      } catch (error) {
        logger.error('Failed to create billing item', {
          namespace: 'billing_tier3_api',
          operation: 'create_billing_item',
          classification: DataClassification.CONFIDENTIAL,
          error: error instanceof Error ? error.message : 'Unknown error',
          metadata: {
            clientId,
            serviceId: agreement.serviceId,
            serviceName: agreement.service.name,
            errorName: error instanceof Error ? error.name : 'UnknownError',
            timestamp: new Date().toISOString()
          }
        });
      }
    }

    // Update monthly billing completion status to billed
    await client.mutate<
      UpdateMonthlyCompletionApiTier3Mutation,
      UpdateMonthlyCompletionApiTier3MutationVariables
    >({
      mutation: UpdateMonthlyCompletionApiTier3Document,
      variables: { clientId, billingMonth }
    });

    // Log the billing generation event
    await client.mutate<
      LogBillingEventApiMutation,
      LogBillingEventApiMutationVariables
    >({
      mutation: LogBillingEventApiDocument,
      variables: {
        input: {
          eventType: 'tier3_billing_generated',
          message: `Generated ${itemsCreated} tier 3 billing items for client ${clientId} (${billingMonth}, total: $${totalAmount})`,
          createdBy: generatedBy
        }
      }
    });

    const result: GenerateTier3BillingResponse = {
      success: true,
      tier: 3,
      clientId,
      billingMonth,
      itemsCreated,
      totalAmount,
      message: 'Tier 3 billing items generated successfully'
    };

    return NextResponse.json(result);

  } catch (error) {
    logger.error('Error generating tier 3 billing', {
      namespace: 'billing_tier3_api',
      operation: 'generate_tier3_billing',
      classification: DataClassification.CONFIDENTIAL,
      error: error instanceof Error ? error.message : 'Unknown error',
      metadata: {
        errorName: error instanceof Error ? error.name : 'UnknownError',
        timestamp: new Date().toISOString()
      }
    });
    return NextResponse.json(
      { success: false, error: 'Internal server error' },
      { status: 500 }
    );
  }
}

export { POST };
export default withAuth(POST);