/* eslint-disable */
import * as types from './graphql';
import { TypedDocumentNode as DocumentNode } from '@graphql-typed-document-node/core';

/**
 * Map of all GraphQL operations in the project.
 *
 * This map has several performance disadvantages:
 * 1. It is not tree-shakeable, so it will include all operations in the project.
 * 2. It is not minifiable, so the string of a GraphQL query will be multiple times inside the bundle.
 * 3. It does not support dead code elimination, so it will add unused operations.
 *
 * Therefore it is highly recommended to use the babel or swc plugin for production.
 * Learn more about it here: https://the-guild.dev/graphql/codegen/plugins/presets/preset-client#reducing-bundle-size
 */
type Documents = {
    "fragment UserRoleInfo on user_roles {\n  id\n  created_at\n  updated_at\n  role {\n    id\n    name\n    display_name\n    description\n    priority\n    is_system_role\n  }\n}\n\nfragment RolePermissionInfo on role_permissions {\n  id\n  role_id\n  permission_id\n  conditions\n  created_at\n  updated_at\n  permission {\n    id\n    action\n    description\n    resource {\n      id\n      name\n      display_name\n      description\n    }\n  }\n  role {\n    id\n    name\n    display_name\n    description\n    priority\n  }\n}\n\nfragment BasicPermissionInfo on permissions {\n  id\n  action\n  description\n  created_at\n  updated_at\n  resource {\n    id\n    name\n    display_name\n    description\n  }\n}\n\nfragment BasicRoleInfo on roles {\n  id\n  name\n  display_name\n  description\n  priority\n  is_system_role\n  created_at\n  updated_at\n}\n\nfragment BasicUserInfo on users {\n  id\n  email\n  is_active\n  is_staff\n  created_at\n  updated_at\n}": typeof types.UserRoleInfoFragmentDoc,
    "mutation AssignRoleToUser($userId: uuid!, $roleId: uuid!) {\n  insert_user_roles_one(object: {user_id: $userId, role_id: $roleId}) {\n    id\n    user_id\n    role_id\n    created_at\n    role {\n      name\n      display_name\n      priority\n    }\n  }\n}\n\nmutation RemoveRoleFromUser($userRoleId: uuid!) {\n  delete_user_roles_by_pk(id: $userRoleId) {\n    id\n    user_id\n    role_id\n  }\n}\n\nmutation SetUserRoles($userId: uuid!, $roleIds: [user_roles_insert_input!]!) {\n  delete_user_roles(where: {user_id: {_eq: $userId}}) {\n    affected_rows\n  }\n  insert_user_roles(objects: $roleIds) {\n    affected_rows\n    returning {\n      id\n      role {\n        name\n        display_name\n        priority\n      }\n    }\n  }\n}\n\nmutation CreateUserCustomPermission($userId: uuid!, $roleName: String!, $roleDescription: String!, $permissionId: uuid!, $conditions: jsonb = null) {\n  insert_roles_one(\n    object: {name: $roleName, display_name: $roleName, description: $roleDescription, priority: 1, is_system_role: false}\n  ) {\n    id\n    name\n    display_name\n    created_at\n  }\n}\n\nmutation AddPermissionToRole($roleId: uuid!, $permissionId: uuid!, $conditions: jsonb = null) {\n  insert_role_permissions_one(\n    object: {role_id: $roleId, permission_id: $permissionId, conditions: $conditions}\n  ) {\n    id\n    role_id\n    permission_id\n    conditions\n    created_at\n    permission {\n      id\n      action\n      description\n      resource {\n        name\n        display_name\n      }\n    }\n    role {\n      name\n      display_name\n    }\n  }\n}\n\nmutation UpdateRolePermission($rolePermissionId: uuid!, $conditions: jsonb = null) {\n  update_role_permissions_by_pk(\n    pk_columns: {id: $rolePermissionId}\n    _set: {conditions: $conditions, updated_at: \"now()\"}\n  ) {\n    id\n    role_id\n    permission_id\n    conditions\n    updated_at\n    permission {\n      action\n      resource {\n        name\n        display_name\n      }\n    }\n    role {\n      name\n      display_name\n    }\n  }\n}\n\nmutation RemoveRolePermission($rolePermissionId: uuid!) {\n  delete_role_permissions_by_pk(id: $rolePermissionId) {\n    id\n    role_id\n    permission_id\n    role {\n      name\n      display_name\n    }\n    permission {\n      action\n      resource {\n        name\n        display_name\n      }\n    }\n  }\n}\n\nmutation CreateCustomRole($name: String!, $displayName: String!, $description: String!, $priority: Int!) {\n  insert_roles_one(\n    object: {name: $name, display_name: $displayName, description: $description, priority: $priority, is_system_role: false}\n  ) {\n    id\n    name\n    display_name\n    description\n    priority\n    is_system_role\n    created_at\n  }\n}\n\nmutation UpdateRole($id: uuid!, $displayName: String = null, $description: String = null, $priority: Int = null) {\n  update_roles_by_pk(\n    pk_columns: {id: $id}\n    _set: {display_name: $displayName, description: $description, priority: $priority, updated_at: \"now()\"}\n  ) {\n    id\n    name\n    display_name\n    description\n    priority\n    updated_at\n  }\n}\n\nmutation DeleteCustomRole($id: uuid!) {\n  delete_roles_by_pk(id: $id) {\n    id\n    name\n    display_name\n  }\n}\n\nmutation AssignPermissionToRole($roleId: uuid!, $permissionId: uuid!, $conditions: jsonb = null) {\n  insert_role_permissions_one(\n    object: {role_id: $roleId, permission_id: $permissionId, conditions: $conditions}\n  ) {\n    id\n    role_id\n    permission_id\n    conditions\n    permission {\n      action\n      resource {\n        name\n        display_name\n      }\n    }\n    role {\n      name\n      display_name\n    }\n  }\n}\n\nmutation RemovePermissionFromRole($rolePermissionId: uuid!) {\n  delete_role_permissions_by_pk(id: $rolePermissionId) {\n    id\n    role_id\n    permission_id\n  }\n}\n\nmutation UpdateRolePermissionConditions($rolePermissionId: uuid!, $conditions: jsonb = null) {\n  update_role_permissions_by_pk(\n    pk_columns: {id: $rolePermissionId}\n    _set: {conditions: $conditions, updated_at: \"now()\"}\n  ) {\n    id\n    conditions\n    updated_at\n    permission {\n      action\n      resource {\n        name\n        display_name\n      }\n    }\n  }\n}\n\nmutation BulkUpdateUserRoles($userId: uuid!, $newRoleIds: [uuid!]!, $reason: String = null) {\n  delete_user_roles(where: {user_id: {_eq: $userId}}) {\n    affected_rows\n  }\n  insert_user_roles(objects: []) {\n    affected_rows\n    returning {\n      id\n      role {\n        name\n        display_name\n        priority\n      }\n    }\n  }\n}\n\nmutation EmergencyRevokeUserAccess($userId: uuid!, $reason: String!) {\n  delete_user_roles(where: {user_id: {_eq: $userId}}) {\n    affected_rows\n  }\n}\n\nmutation RestoreUserAccess($userId: uuid!, $viewerRoleId: uuid!) {\n  insert_user_roles_one(object: {user_id: $userId, role_id: $viewerRoleId}) {\n    id\n    user_id\n    role_id\n    created_at\n    role {\n      name\n      display_name\n      priority\n    }\n  }\n}": typeof types.AssignRoleToUserDocument,
    "query GetCurrentUserRoles {\n  users(limit: 1) {\n    id\n    email\n    is_active\n    is_staff\n    user_roles {\n      role {\n        id\n        name\n        display_name\n        description\n        priority\n        is_system_role\n        role_permissions {\n          permission {\n            id\n            action\n            description\n            resource {\n              id\n              name\n              display_name\n              description\n            }\n          }\n          conditions\n        }\n      }\n      created_at\n      updated_at\n    }\n  }\n}\n\nquery GetUserEffectivePermissions($userId: uuid!) {\n  user_roles(where: {user_id: {_eq: $userId}}) {\n    role {\n      name\n      display_name\n      priority\n      role_permissions {\n        permission {\n          action\n          resource {\n            name\n            display_name\n          }\n        }\n        conditions\n      }\n    }\n  }\n}\n\nquery CanUserPerformAction($userId: uuid!, $resourceName: String!, $actionName: permission_action!) {\n  user_roles(\n    where: {user_id: {_eq: $userId}, role: {role_permissions: {permission: {resource: {name: {_eq: $resourceName}}, action: {_eq: $actionName}}}}}\n  ) {\n    role {\n      name\n      role_permissions(\n        where: {permission: {resource: {name: {_eq: $resourceName}}, action: {_eq: $actionName}}}\n      ) {\n        conditions\n        permission {\n          action\n          resource {\n            name\n          }\n        }\n      }\n    }\n  }\n}\n\nquery GetUserForHasuraClaims($clerkUserId: String!) {\n  users(where: {clerk_user_id: {_eq: $clerkUserId}}) {\n    id\n    email\n    is_active\n    is_staff\n    user_roles {\n      role {\n        name\n        priority\n        role_permissions {\n          permission {\n            action\n            resource {\n              name\n            }\n          }\n        }\n      }\n    }\n  }\n}\n\nquery GetAllRoles {\n  roles(order_by: {priority: desc}) {\n    id\n    name\n    display_name\n    description\n    priority\n    is_system_role\n    created_at\n    updated_at\n    role_permissions {\n      id\n      conditions\n      permission {\n        id\n        action\n        description\n        resource {\n          id\n          name\n          display_name\n          description\n        }\n      }\n    }\n  }\n}\n\nquery GetResourcesAndPermissions {\n  resources(order_by: {name: asc}) {\n    id\n    name\n    display_name\n    description\n    permissions {\n      id\n      action\n      description\n    }\n  }\n}\n\nquery GetUsersWithRoles($limit: Int = 50, $offset: Int = 0) {\n  users(limit: $limit, offset: $offset, order_by: {created_at: desc}) {\n    id\n    email\n    is_active\n    is_staff\n    created_at\n    user_roles {\n      id\n      created_at\n      role {\n        id\n        name\n        display_name\n        priority\n      }\n    }\n  }\n}\n\nquery GetUserCustomPermissions($userId: uuid!) {\n  user_roles(\n    where: {user_id: {_eq: $userId}, role: {is_system_role: {_eq: false}}}\n    order_by: {created_at: desc}\n  ) {\n    id\n    created_at\n    role {\n      id\n      name\n      display_name\n      description\n      role_permissions {\n        id\n        conditions\n        permission {\n          id\n          action\n          description\n          resource {\n            name\n            display_name\n          }\n        }\n      }\n    }\n  }\n}\n\nquery GetRolePermissions($roleName: String!) {\n  roles(where: {name: {_eq: $roleName}}) {\n    id\n    name\n    display_name\n    description\n    role_permissions(order_by: {created_at: desc}) {\n      id\n      conditions\n      created_at\n      updated_at\n      permission {\n        id\n        action\n        description\n        resource {\n          id\n          name\n          display_name\n          description\n        }\n      }\n    }\n  }\n}\n\nquery SearchUsersByEmail($emailPattern: String!) {\n  users(\n    where: {email: {_ilike: $emailPattern}}\n    limit: 10\n    order_by: {email: asc}\n  ) {\n    id\n    email\n    is_active\n    user_roles {\n      role {\n        name\n        display_name\n      }\n    }\n  }\n}\n\nquery GetRoleHierarchy {\n  roles(order_by: {priority: desc}) {\n    id\n    name\n    display_name\n    description\n    priority\n    is_system_role\n    role_permissions_aggregate {\n      aggregate {\n        count\n      }\n    }\n    user_roles_aggregate {\n      aggregate {\n        count\n      }\n    }\n  }\n}\n\nquery GetUserRoleHistory($limit: Int = 50, $offset: Int = 0, $userId: uuid = null) {\n  user_roles(\n    limit: $limit\n    offset: $offset\n    order_by: {created_at: desc}\n    where: {user_id: {_eq: $userId}}\n  ) {\n    id\n    user_id\n    role_id\n    created_at\n    updated_at\n    role {\n      name\n      display_name\n      description\n      priority\n    }\n    user {\n      email\n    }\n  }\n}": typeof types.GetCurrentUserRolesDocument,
    "subscription UserRoleChanges($userId: uuid!) {\n  user_roles(where: {user_id: {_eq: $userId}}) {\n    ...UserRoleInfo\n  }\n}\n\nsubscription UserRolePermissionChanges($userId: uuid!) {\n  user_roles(where: {user_id: {_eq: $userId}}) {\n    role {\n      role_permissions {\n        ...RolePermissionInfo\n      }\n    }\n  }\n}\n\nsubscription RoleChanges {\n  roles {\n    ...BasicRoleInfo\n    role_permissions {\n      ...RolePermissionInfo\n    }\n  }\n}\n\nsubscription UserRoleAuditEvents($userId: uuid = null) {\n  user_roles(\n    where: {user_id: {_eq: $userId}}\n    order_by: {created_at: desc}\n    limit: 50\n  ) {\n    id\n    user_id\n    role_id\n    created_at\n    updated_at\n    role {\n      name\n      display_name\n      description\n    }\n    user {\n      email\n    }\n  }\n}": typeof types.UserRoleChangesDocument,
};
const documents: Documents = {
    "fragment UserRoleInfo on user_roles {\n  id\n  created_at\n  updated_at\n  role {\n    id\n    name\n    display_name\n    description\n    priority\n    is_system_role\n  }\n}\n\nfragment RolePermissionInfo on role_permissions {\n  id\n  role_id\n  permission_id\n  conditions\n  created_at\n  updated_at\n  permission {\n    id\n    action\n    description\n    resource {\n      id\n      name\n      display_name\n      description\n    }\n  }\n  role {\n    id\n    name\n    display_name\n    description\n    priority\n  }\n}\n\nfragment BasicPermissionInfo on permissions {\n  id\n  action\n  description\n  created_at\n  updated_at\n  resource {\n    id\n    name\n    display_name\n    description\n  }\n}\n\nfragment BasicRoleInfo on roles {\n  id\n  name\n  display_name\n  description\n  priority\n  is_system_role\n  created_at\n  updated_at\n}\n\nfragment BasicUserInfo on users {\n  id\n  email\n  is_active\n  is_staff\n  created_at\n  updated_at\n}": types.UserRoleInfoFragmentDoc,
    "mutation AssignRoleToUser($userId: uuid!, $roleId: uuid!) {\n  insert_user_roles_one(object: {user_id: $userId, role_id: $roleId}) {\n    id\n    user_id\n    role_id\n    created_at\n    role {\n      name\n      display_name\n      priority\n    }\n  }\n}\n\nmutation RemoveRoleFromUser($userRoleId: uuid!) {\n  delete_user_roles_by_pk(id: $userRoleId) {\n    id\n    user_id\n    role_id\n  }\n}\n\nmutation SetUserRoles($userId: uuid!, $roleIds: [user_roles_insert_input!]!) {\n  delete_user_roles(where: {user_id: {_eq: $userId}}) {\n    affected_rows\n  }\n  insert_user_roles(objects: $roleIds) {\n    affected_rows\n    returning {\n      id\n      role {\n        name\n        display_name\n        priority\n      }\n    }\n  }\n}\n\nmutation CreateUserCustomPermission($userId: uuid!, $roleName: String!, $roleDescription: String!, $permissionId: uuid!, $conditions: jsonb = null) {\n  insert_roles_one(\n    object: {name: $roleName, display_name: $roleName, description: $roleDescription, priority: 1, is_system_role: false}\n  ) {\n    id\n    name\n    display_name\n    created_at\n  }\n}\n\nmutation AddPermissionToRole($roleId: uuid!, $permissionId: uuid!, $conditions: jsonb = null) {\n  insert_role_permissions_one(\n    object: {role_id: $roleId, permission_id: $permissionId, conditions: $conditions}\n  ) {\n    id\n    role_id\n    permission_id\n    conditions\n    created_at\n    permission {\n      id\n      action\n      description\n      resource {\n        name\n        display_name\n      }\n    }\n    role {\n      name\n      display_name\n    }\n  }\n}\n\nmutation UpdateRolePermission($rolePermissionId: uuid!, $conditions: jsonb = null) {\n  update_role_permissions_by_pk(\n    pk_columns: {id: $rolePermissionId}\n    _set: {conditions: $conditions, updated_at: \"now()\"}\n  ) {\n    id\n    role_id\n    permission_id\n    conditions\n    updated_at\n    permission {\n      action\n      resource {\n        name\n        display_name\n      }\n    }\n    role {\n      name\n      display_name\n    }\n  }\n}\n\nmutation RemoveRolePermission($rolePermissionId: uuid!) {\n  delete_role_permissions_by_pk(id: $rolePermissionId) {\n    id\n    role_id\n    permission_id\n    role {\n      name\n      display_name\n    }\n    permission {\n      action\n      resource {\n        name\n        display_name\n      }\n    }\n  }\n}\n\nmutation CreateCustomRole($name: String!, $displayName: String!, $description: String!, $priority: Int!) {\n  insert_roles_one(\n    object: {name: $name, display_name: $displayName, description: $description, priority: $priority, is_system_role: false}\n  ) {\n    id\n    name\n    display_name\n    description\n    priority\n    is_system_role\n    created_at\n  }\n}\n\nmutation UpdateRole($id: uuid!, $displayName: String = null, $description: String = null, $priority: Int = null) {\n  update_roles_by_pk(\n    pk_columns: {id: $id}\n    _set: {display_name: $displayName, description: $description, priority: $priority, updated_at: \"now()\"}\n  ) {\n    id\n    name\n    display_name\n    description\n    priority\n    updated_at\n  }\n}\n\nmutation DeleteCustomRole($id: uuid!) {\n  delete_roles_by_pk(id: $id) {\n    id\n    name\n    display_name\n  }\n}\n\nmutation AssignPermissionToRole($roleId: uuid!, $permissionId: uuid!, $conditions: jsonb = null) {\n  insert_role_permissions_one(\n    object: {role_id: $roleId, permission_id: $permissionId, conditions: $conditions}\n  ) {\n    id\n    role_id\n    permission_id\n    conditions\n    permission {\n      action\n      resource {\n        name\n        display_name\n      }\n    }\n    role {\n      name\n      display_name\n    }\n  }\n}\n\nmutation RemovePermissionFromRole($rolePermissionId: uuid!) {\n  delete_role_permissions_by_pk(id: $rolePermissionId) {\n    id\n    role_id\n    permission_id\n  }\n}\n\nmutation UpdateRolePermissionConditions($rolePermissionId: uuid!, $conditions: jsonb = null) {\n  update_role_permissions_by_pk(\n    pk_columns: {id: $rolePermissionId}\n    _set: {conditions: $conditions, updated_at: \"now()\"}\n  ) {\n    id\n    conditions\n    updated_at\n    permission {\n      action\n      resource {\n        name\n        display_name\n      }\n    }\n  }\n}\n\nmutation BulkUpdateUserRoles($userId: uuid!, $newRoleIds: [uuid!]!, $reason: String = null) {\n  delete_user_roles(where: {user_id: {_eq: $userId}}) {\n    affected_rows\n  }\n  insert_user_roles(objects: []) {\n    affected_rows\n    returning {\n      id\n      role {\n        name\n        display_name\n        priority\n      }\n    }\n  }\n}\n\nmutation EmergencyRevokeUserAccess($userId: uuid!, $reason: String!) {\n  delete_user_roles(where: {user_id: {_eq: $userId}}) {\n    affected_rows\n  }\n}\n\nmutation RestoreUserAccess($userId: uuid!, $viewerRoleId: uuid!) {\n  insert_user_roles_one(object: {user_id: $userId, role_id: $viewerRoleId}) {\n    id\n    user_id\n    role_id\n    created_at\n    role {\n      name\n      display_name\n      priority\n    }\n  }\n}": types.AssignRoleToUserDocument,
    "query GetCurrentUserRoles {\n  users(limit: 1) {\n    id\n    email\n    is_active\n    is_staff\n    user_roles {\n      role {\n        id\n        name\n        display_name\n        description\n        priority\n        is_system_role\n        role_permissions {\n          permission {\n            id\n            action\n            description\n            resource {\n              id\n              name\n              display_name\n              description\n            }\n          }\n          conditions\n        }\n      }\n      created_at\n      updated_at\n    }\n  }\n}\n\nquery GetUserEffectivePermissions($userId: uuid!) {\n  user_roles(where: {user_id: {_eq: $userId}}) {\n    role {\n      name\n      display_name\n      priority\n      role_permissions {\n        permission {\n          action\n          resource {\n            name\n            display_name\n          }\n        }\n        conditions\n      }\n    }\n  }\n}\n\nquery CanUserPerformAction($userId: uuid!, $resourceName: String!, $actionName: permission_action!) {\n  user_roles(\n    where: {user_id: {_eq: $userId}, role: {role_permissions: {permission: {resource: {name: {_eq: $resourceName}}, action: {_eq: $actionName}}}}}\n  ) {\n    role {\n      name\n      role_permissions(\n        where: {permission: {resource: {name: {_eq: $resourceName}}, action: {_eq: $actionName}}}\n      ) {\n        conditions\n        permission {\n          action\n          resource {\n            name\n          }\n        }\n      }\n    }\n  }\n}\n\nquery GetUserForHasuraClaims($clerkUserId: String!) {\n  users(where: {clerk_user_id: {_eq: $clerkUserId}}) {\n    id\n    email\n    is_active\n    is_staff\n    user_roles {\n      role {\n        name\n        priority\n        role_permissions {\n          permission {\n            action\n            resource {\n              name\n            }\n          }\n        }\n      }\n    }\n  }\n}\n\nquery GetAllRoles {\n  roles(order_by: {priority: desc}) {\n    id\n    name\n    display_name\n    description\n    priority\n    is_system_role\n    created_at\n    updated_at\n    role_permissions {\n      id\n      conditions\n      permission {\n        id\n        action\n        description\n        resource {\n          id\n          name\n          display_name\n          description\n        }\n      }\n    }\n  }\n}\n\nquery GetResourcesAndPermissions {\n  resources(order_by: {name: asc}) {\n    id\n    name\n    display_name\n    description\n    permissions {\n      id\n      action\n      description\n    }\n  }\n}\n\nquery GetUsersWithRoles($limit: Int = 50, $offset: Int = 0) {\n  users(limit: $limit, offset: $offset, order_by: {created_at: desc}) {\n    id\n    email\n    is_active\n    is_staff\n    created_at\n    user_roles {\n      id\n      created_at\n      role {\n        id\n        name\n        display_name\n        priority\n      }\n    }\n  }\n}\n\nquery GetUserCustomPermissions($userId: uuid!) {\n  user_roles(\n    where: {user_id: {_eq: $userId}, role: {is_system_role: {_eq: false}}}\n    order_by: {created_at: desc}\n  ) {\n    id\n    created_at\n    role {\n      id\n      name\n      display_name\n      description\n      role_permissions {\n        id\n        conditions\n        permission {\n          id\n          action\n          description\n          resource {\n            name\n            display_name\n          }\n        }\n      }\n    }\n  }\n}\n\nquery GetRolePermissions($roleName: String!) {\n  roles(where: {name: {_eq: $roleName}}) {\n    id\n    name\n    display_name\n    description\n    role_permissions(order_by: {created_at: desc}) {\n      id\n      conditions\n      created_at\n      updated_at\n      permission {\n        id\n        action\n        description\n        resource {\n          id\n          name\n          display_name\n          description\n        }\n      }\n    }\n  }\n}\n\nquery SearchUsersByEmail($emailPattern: String!) {\n  users(\n    where: {email: {_ilike: $emailPattern}}\n    limit: 10\n    order_by: {email: asc}\n  ) {\n    id\n    email\n    is_active\n    user_roles {\n      role {\n        name\n        display_name\n      }\n    }\n  }\n}\n\nquery GetRoleHierarchy {\n  roles(order_by: {priority: desc}) {\n    id\n    name\n    display_name\n    description\n    priority\n    is_system_role\n    role_permissions_aggregate {\n      aggregate {\n        count\n      }\n    }\n    user_roles_aggregate {\n      aggregate {\n        count\n      }\n    }\n  }\n}\n\nquery GetUserRoleHistory($limit: Int = 50, $offset: Int = 0, $userId: uuid = null) {\n  user_roles(\n    limit: $limit\n    offset: $offset\n    order_by: {created_at: desc}\n    where: {user_id: {_eq: $userId}}\n  ) {\n    id\n    user_id\n    role_id\n    created_at\n    updated_at\n    role {\n      name\n      display_name\n      description\n      priority\n    }\n    user {\n      email\n    }\n  }\n}": types.GetCurrentUserRolesDocument,
    "subscription UserRoleChanges($userId: uuid!) {\n  user_roles(where: {user_id: {_eq: $userId}}) {\n    ...UserRoleInfo\n  }\n}\n\nsubscription UserRolePermissionChanges($userId: uuid!) {\n  user_roles(where: {user_id: {_eq: $userId}}) {\n    role {\n      role_permissions {\n        ...RolePermissionInfo\n      }\n    }\n  }\n}\n\nsubscription RoleChanges {\n  roles {\n    ...BasicRoleInfo\n    role_permissions {\n      ...RolePermissionInfo\n    }\n  }\n}\n\nsubscription UserRoleAuditEvents($userId: uuid = null) {\n  user_roles(\n    where: {user_id: {_eq: $userId}}\n    order_by: {created_at: desc}\n    limit: 50\n  ) {\n    id\n    user_id\n    role_id\n    created_at\n    updated_at\n    role {\n      name\n      display_name\n      description\n    }\n    user {\n      email\n    }\n  }\n}": types.UserRoleChangesDocument,
};

/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 *
 *
 * @example
 * ```ts
 * const query = graphql(`query GetUser($id: ID!) { user(id: $id) { name } }`);
 * ```
 *
 * The query argument is unknown!
 * Please regenerate the types.
 */
export function graphql(source: string): unknown;

/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "fragment UserRoleInfo on user_roles {\n  id\n  created_at\n  updated_at\n  role {\n    id\n    name\n    display_name\n    description\n    priority\n    is_system_role\n  }\n}\n\nfragment RolePermissionInfo on role_permissions {\n  id\n  role_id\n  permission_id\n  conditions\n  created_at\n  updated_at\n  permission {\n    id\n    action\n    description\n    resource {\n      id\n      name\n      display_name\n      description\n    }\n  }\n  role {\n    id\n    name\n    display_name\n    description\n    priority\n  }\n}\n\nfragment BasicPermissionInfo on permissions {\n  id\n  action\n  description\n  created_at\n  updated_at\n  resource {\n    id\n    name\n    display_name\n    description\n  }\n}\n\nfragment BasicRoleInfo on roles {\n  id\n  name\n  display_name\n  description\n  priority\n  is_system_role\n  created_at\n  updated_at\n}\n\nfragment BasicUserInfo on users {\n  id\n  email\n  is_active\n  is_staff\n  created_at\n  updated_at\n}"): (typeof documents)["fragment UserRoleInfo on user_roles {\n  id\n  created_at\n  updated_at\n  role {\n    id\n    name\n    display_name\n    description\n    priority\n    is_system_role\n  }\n}\n\nfragment RolePermissionInfo on role_permissions {\n  id\n  role_id\n  permission_id\n  conditions\n  created_at\n  updated_at\n  permission {\n    id\n    action\n    description\n    resource {\n      id\n      name\n      display_name\n      description\n    }\n  }\n  role {\n    id\n    name\n    display_name\n    description\n    priority\n  }\n}\n\nfragment BasicPermissionInfo on permissions {\n  id\n  action\n  description\n  created_at\n  updated_at\n  resource {\n    id\n    name\n    display_name\n    description\n  }\n}\n\nfragment BasicRoleInfo on roles {\n  id\n  name\n  display_name\n  description\n  priority\n  is_system_role\n  created_at\n  updated_at\n}\n\nfragment BasicUserInfo on users {\n  id\n  email\n  is_active\n  is_staff\n  created_at\n  updated_at\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "mutation AssignRoleToUser($userId: uuid!, $roleId: uuid!) {\n  insert_user_roles_one(object: {user_id: $userId, role_id: $roleId}) {\n    id\n    user_id\n    role_id\n    created_at\n    role {\n      name\n      display_name\n      priority\n    }\n  }\n}\n\nmutation RemoveRoleFromUser($userRoleId: uuid!) {\n  delete_user_roles_by_pk(id: $userRoleId) {\n    id\n    user_id\n    role_id\n  }\n}\n\nmutation SetUserRoles($userId: uuid!, $roleIds: [user_roles_insert_input!]!) {\n  delete_user_roles(where: {user_id: {_eq: $userId}}) {\n    affected_rows\n  }\n  insert_user_roles(objects: $roleIds) {\n    affected_rows\n    returning {\n      id\n      role {\n        name\n        display_name\n        priority\n      }\n    }\n  }\n}\n\nmutation CreateUserCustomPermission($userId: uuid!, $roleName: String!, $roleDescription: String!, $permissionId: uuid!, $conditions: jsonb = null) {\n  insert_roles_one(\n    object: {name: $roleName, display_name: $roleName, description: $roleDescription, priority: 1, is_system_role: false}\n  ) {\n    id\n    name\n    display_name\n    created_at\n  }\n}\n\nmutation AddPermissionToRole($roleId: uuid!, $permissionId: uuid!, $conditions: jsonb = null) {\n  insert_role_permissions_one(\n    object: {role_id: $roleId, permission_id: $permissionId, conditions: $conditions}\n  ) {\n    id\n    role_id\n    permission_id\n    conditions\n    created_at\n    permission {\n      id\n      action\n      description\n      resource {\n        name\n        display_name\n      }\n    }\n    role {\n      name\n      display_name\n    }\n  }\n}\n\nmutation UpdateRolePermission($rolePermissionId: uuid!, $conditions: jsonb = null) {\n  update_role_permissions_by_pk(\n    pk_columns: {id: $rolePermissionId}\n    _set: {conditions: $conditions, updated_at: \"now()\"}\n  ) {\n    id\n    role_id\n    permission_id\n    conditions\n    updated_at\n    permission {\n      action\n      resource {\n        name\n        display_name\n      }\n    }\n    role {\n      name\n      display_name\n    }\n  }\n}\n\nmutation RemoveRolePermission($rolePermissionId: uuid!) {\n  delete_role_permissions_by_pk(id: $rolePermissionId) {\n    id\n    role_id\n    permission_id\n    role {\n      name\n      display_name\n    }\n    permission {\n      action\n      resource {\n        name\n        display_name\n      }\n    }\n  }\n}\n\nmutation CreateCustomRole($name: String!, $displayName: String!, $description: String!, $priority: Int!) {\n  insert_roles_one(\n    object: {name: $name, display_name: $displayName, description: $description, priority: $priority, is_system_role: false}\n  ) {\n    id\n    name\n    display_name\n    description\n    priority\n    is_system_role\n    created_at\n  }\n}\n\nmutation UpdateRole($id: uuid!, $displayName: String = null, $description: String = null, $priority: Int = null) {\n  update_roles_by_pk(\n    pk_columns: {id: $id}\n    _set: {display_name: $displayName, description: $description, priority: $priority, updated_at: \"now()\"}\n  ) {\n    id\n    name\n    display_name\n    description\n    priority\n    updated_at\n  }\n}\n\nmutation DeleteCustomRole($id: uuid!) {\n  delete_roles_by_pk(id: $id) {\n    id\n    name\n    display_name\n  }\n}\n\nmutation AssignPermissionToRole($roleId: uuid!, $permissionId: uuid!, $conditions: jsonb = null) {\n  insert_role_permissions_one(\n    object: {role_id: $roleId, permission_id: $permissionId, conditions: $conditions}\n  ) {\n    id\n    role_id\n    permission_id\n    conditions\n    permission {\n      action\n      resource {\n        name\n        display_name\n      }\n    }\n    role {\n      name\n      display_name\n    }\n  }\n}\n\nmutation RemovePermissionFromRole($rolePermissionId: uuid!) {\n  delete_role_permissions_by_pk(id: $rolePermissionId) {\n    id\n    role_id\n    permission_id\n  }\n}\n\nmutation UpdateRolePermissionConditions($rolePermissionId: uuid!, $conditions: jsonb = null) {\n  update_role_permissions_by_pk(\n    pk_columns: {id: $rolePermissionId}\n    _set: {conditions: $conditions, updated_at: \"now()\"}\n  ) {\n    id\n    conditions\n    updated_at\n    permission {\n      action\n      resource {\n        name\n        display_name\n      }\n    }\n  }\n}\n\nmutation BulkUpdateUserRoles($userId: uuid!, $newRoleIds: [uuid!]!, $reason: String = null) {\n  delete_user_roles(where: {user_id: {_eq: $userId}}) {\n    affected_rows\n  }\n  insert_user_roles(objects: []) {\n    affected_rows\n    returning {\n      id\n      role {\n        name\n        display_name\n        priority\n      }\n    }\n  }\n}\n\nmutation EmergencyRevokeUserAccess($userId: uuid!, $reason: String!) {\n  delete_user_roles(where: {user_id: {_eq: $userId}}) {\n    affected_rows\n  }\n}\n\nmutation RestoreUserAccess($userId: uuid!, $viewerRoleId: uuid!) {\n  insert_user_roles_one(object: {user_id: $userId, role_id: $viewerRoleId}) {\n    id\n    user_id\n    role_id\n    created_at\n    role {\n      name\n      display_name\n      priority\n    }\n  }\n}"): (typeof documents)["mutation AssignRoleToUser($userId: uuid!, $roleId: uuid!) {\n  insert_user_roles_one(object: {user_id: $userId, role_id: $roleId}) {\n    id\n    user_id\n    role_id\n    created_at\n    role {\n      name\n      display_name\n      priority\n    }\n  }\n}\n\nmutation RemoveRoleFromUser($userRoleId: uuid!) {\n  delete_user_roles_by_pk(id: $userRoleId) {\n    id\n    user_id\n    role_id\n  }\n}\n\nmutation SetUserRoles($userId: uuid!, $roleIds: [user_roles_insert_input!]!) {\n  delete_user_roles(where: {user_id: {_eq: $userId}}) {\n    affected_rows\n  }\n  insert_user_roles(objects: $roleIds) {\n    affected_rows\n    returning {\n      id\n      role {\n        name\n        display_name\n        priority\n      }\n    }\n  }\n}\n\nmutation CreateUserCustomPermission($userId: uuid!, $roleName: String!, $roleDescription: String!, $permissionId: uuid!, $conditions: jsonb = null) {\n  insert_roles_one(\n    object: {name: $roleName, display_name: $roleName, description: $roleDescription, priority: 1, is_system_role: false}\n  ) {\n    id\n    name\n    display_name\n    created_at\n  }\n}\n\nmutation AddPermissionToRole($roleId: uuid!, $permissionId: uuid!, $conditions: jsonb = null) {\n  insert_role_permissions_one(\n    object: {role_id: $roleId, permission_id: $permissionId, conditions: $conditions}\n  ) {\n    id\n    role_id\n    permission_id\n    conditions\n    created_at\n    permission {\n      id\n      action\n      description\n      resource {\n        name\n        display_name\n      }\n    }\n    role {\n      name\n      display_name\n    }\n  }\n}\n\nmutation UpdateRolePermission($rolePermissionId: uuid!, $conditions: jsonb = null) {\n  update_role_permissions_by_pk(\n    pk_columns: {id: $rolePermissionId}\n    _set: {conditions: $conditions, updated_at: \"now()\"}\n  ) {\n    id\n    role_id\n    permission_id\n    conditions\n    updated_at\n    permission {\n      action\n      resource {\n        name\n        display_name\n      }\n    }\n    role {\n      name\n      display_name\n    }\n  }\n}\n\nmutation RemoveRolePermission($rolePermissionId: uuid!) {\n  delete_role_permissions_by_pk(id: $rolePermissionId) {\n    id\n    role_id\n    permission_id\n    role {\n      name\n      display_name\n    }\n    permission {\n      action\n      resource {\n        name\n        display_name\n      }\n    }\n  }\n}\n\nmutation CreateCustomRole($name: String!, $displayName: String!, $description: String!, $priority: Int!) {\n  insert_roles_one(\n    object: {name: $name, display_name: $displayName, description: $description, priority: $priority, is_system_role: false}\n  ) {\n    id\n    name\n    display_name\n    description\n    priority\n    is_system_role\n    created_at\n  }\n}\n\nmutation UpdateRole($id: uuid!, $displayName: String = null, $description: String = null, $priority: Int = null) {\n  update_roles_by_pk(\n    pk_columns: {id: $id}\n    _set: {display_name: $displayName, description: $description, priority: $priority, updated_at: \"now()\"}\n  ) {\n    id\n    name\n    display_name\n    description\n    priority\n    updated_at\n  }\n}\n\nmutation DeleteCustomRole($id: uuid!) {\n  delete_roles_by_pk(id: $id) {\n    id\n    name\n    display_name\n  }\n}\n\nmutation AssignPermissionToRole($roleId: uuid!, $permissionId: uuid!, $conditions: jsonb = null) {\n  insert_role_permissions_one(\n    object: {role_id: $roleId, permission_id: $permissionId, conditions: $conditions}\n  ) {\n    id\n    role_id\n    permission_id\n    conditions\n    permission {\n      action\n      resource {\n        name\n        display_name\n      }\n    }\n    role {\n      name\n      display_name\n    }\n  }\n}\n\nmutation RemovePermissionFromRole($rolePermissionId: uuid!) {\n  delete_role_permissions_by_pk(id: $rolePermissionId) {\n    id\n    role_id\n    permission_id\n  }\n}\n\nmutation UpdateRolePermissionConditions($rolePermissionId: uuid!, $conditions: jsonb = null) {\n  update_role_permissions_by_pk(\n    pk_columns: {id: $rolePermissionId}\n    _set: {conditions: $conditions, updated_at: \"now()\"}\n  ) {\n    id\n    conditions\n    updated_at\n    permission {\n      action\n      resource {\n        name\n        display_name\n      }\n    }\n  }\n}\n\nmutation BulkUpdateUserRoles($userId: uuid!, $newRoleIds: [uuid!]!, $reason: String = null) {\n  delete_user_roles(where: {user_id: {_eq: $userId}}) {\n    affected_rows\n  }\n  insert_user_roles(objects: []) {\n    affected_rows\n    returning {\n      id\n      role {\n        name\n        display_name\n        priority\n      }\n    }\n  }\n}\n\nmutation EmergencyRevokeUserAccess($userId: uuid!, $reason: String!) {\n  delete_user_roles(where: {user_id: {_eq: $userId}}) {\n    affected_rows\n  }\n}\n\nmutation RestoreUserAccess($userId: uuid!, $viewerRoleId: uuid!) {\n  insert_user_roles_one(object: {user_id: $userId, role_id: $viewerRoleId}) {\n    id\n    user_id\n    role_id\n    created_at\n    role {\n      name\n      display_name\n      priority\n    }\n  }\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "query GetCurrentUserRoles {\n  users(limit: 1) {\n    id\n    email\n    is_active\n    is_staff\n    user_roles {\n      role {\n        id\n        name\n        display_name\n        description\n        priority\n        is_system_role\n        role_permissions {\n          permission {\n            id\n            action\n            description\n            resource {\n              id\n              name\n              display_name\n              description\n            }\n          }\n          conditions\n        }\n      }\n      created_at\n      updated_at\n    }\n  }\n}\n\nquery GetUserEffectivePermissions($userId: uuid!) {\n  user_roles(where: {user_id: {_eq: $userId}}) {\n    role {\n      name\n      display_name\n      priority\n      role_permissions {\n        permission {\n          action\n          resource {\n            name\n            display_name\n          }\n        }\n        conditions\n      }\n    }\n  }\n}\n\nquery CanUserPerformAction($userId: uuid!, $resourceName: String!, $actionName: permission_action!) {\n  user_roles(\n    where: {user_id: {_eq: $userId}, role: {role_permissions: {permission: {resource: {name: {_eq: $resourceName}}, action: {_eq: $actionName}}}}}\n  ) {\n    role {\n      name\n      role_permissions(\n        where: {permission: {resource: {name: {_eq: $resourceName}}, action: {_eq: $actionName}}}\n      ) {\n        conditions\n        permission {\n          action\n          resource {\n            name\n          }\n        }\n      }\n    }\n  }\n}\n\nquery GetUserForHasuraClaims($clerkUserId: String!) {\n  users(where: {clerk_user_id: {_eq: $clerkUserId}}) {\n    id\n    email\n    is_active\n    is_staff\n    user_roles {\n      role {\n        name\n        priority\n        role_permissions {\n          permission {\n            action\n            resource {\n              name\n            }\n          }\n        }\n      }\n    }\n  }\n}\n\nquery GetAllRoles {\n  roles(order_by: {priority: desc}) {\n    id\n    name\n    display_name\n    description\n    priority\n    is_system_role\n    created_at\n    updated_at\n    role_permissions {\n      id\n      conditions\n      permission {\n        id\n        action\n        description\n        resource {\n          id\n          name\n          display_name\n          description\n        }\n      }\n    }\n  }\n}\n\nquery GetResourcesAndPermissions {\n  resources(order_by: {name: asc}) {\n    id\n    name\n    display_name\n    description\n    permissions {\n      id\n      action\n      description\n    }\n  }\n}\n\nquery GetUsersWithRoles($limit: Int = 50, $offset: Int = 0) {\n  users(limit: $limit, offset: $offset, order_by: {created_at: desc}) {\n    id\n    email\n    is_active\n    is_staff\n    created_at\n    user_roles {\n      id\n      created_at\n      role {\n        id\n        name\n        display_name\n        priority\n      }\n    }\n  }\n}\n\nquery GetUserCustomPermissions($userId: uuid!) {\n  user_roles(\n    where: {user_id: {_eq: $userId}, role: {is_system_role: {_eq: false}}}\n    order_by: {created_at: desc}\n  ) {\n    id\n    created_at\n    role {\n      id\n      name\n      display_name\n      description\n      role_permissions {\n        id\n        conditions\n        permission {\n          id\n          action\n          description\n          resource {\n            name\n            display_name\n          }\n        }\n      }\n    }\n  }\n}\n\nquery GetRolePermissions($roleName: String!) {\n  roles(where: {name: {_eq: $roleName}}) {\n    id\n    name\n    display_name\n    description\n    role_permissions(order_by: {created_at: desc}) {\n      id\n      conditions\n      created_at\n      updated_at\n      permission {\n        id\n        action\n        description\n        resource {\n          id\n          name\n          display_name\n          description\n        }\n      }\n    }\n  }\n}\n\nquery SearchUsersByEmail($emailPattern: String!) {\n  users(\n    where: {email: {_ilike: $emailPattern}}\n    limit: 10\n    order_by: {email: asc}\n  ) {\n    id\n    email\n    is_active\n    user_roles {\n      role {\n        name\n        display_name\n      }\n    }\n  }\n}\n\nquery GetRoleHierarchy {\n  roles(order_by: {priority: desc}) {\n    id\n    name\n    display_name\n    description\n    priority\n    is_system_role\n    role_permissions_aggregate {\n      aggregate {\n        count\n      }\n    }\n    user_roles_aggregate {\n      aggregate {\n        count\n      }\n    }\n  }\n}\n\nquery GetUserRoleHistory($limit: Int = 50, $offset: Int = 0, $userId: uuid = null) {\n  user_roles(\n    limit: $limit\n    offset: $offset\n    order_by: {created_at: desc}\n    where: {user_id: {_eq: $userId}}\n  ) {\n    id\n    user_id\n    role_id\n    created_at\n    updated_at\n    role {\n      name\n      display_name\n      description\n      priority\n    }\n    user {\n      email\n    }\n  }\n}"): (typeof documents)["query GetCurrentUserRoles {\n  users(limit: 1) {\n    id\n    email\n    is_active\n    is_staff\n    user_roles {\n      role {\n        id\n        name\n        display_name\n        description\n        priority\n        is_system_role\n        role_permissions {\n          permission {\n            id\n            action\n            description\n            resource {\n              id\n              name\n              display_name\n              description\n            }\n          }\n          conditions\n        }\n      }\n      created_at\n      updated_at\n    }\n  }\n}\n\nquery GetUserEffectivePermissions($userId: uuid!) {\n  user_roles(where: {user_id: {_eq: $userId}}) {\n    role {\n      name\n      display_name\n      priority\n      role_permissions {\n        permission {\n          action\n          resource {\n            name\n            display_name\n          }\n        }\n        conditions\n      }\n    }\n  }\n}\n\nquery CanUserPerformAction($userId: uuid!, $resourceName: String!, $actionName: permission_action!) {\n  user_roles(\n    where: {user_id: {_eq: $userId}, role: {role_permissions: {permission: {resource: {name: {_eq: $resourceName}}, action: {_eq: $actionName}}}}}\n  ) {\n    role {\n      name\n      role_permissions(\n        where: {permission: {resource: {name: {_eq: $resourceName}}, action: {_eq: $actionName}}}\n      ) {\n        conditions\n        permission {\n          action\n          resource {\n            name\n          }\n        }\n      }\n    }\n  }\n}\n\nquery GetUserForHasuraClaims($clerkUserId: String!) {\n  users(where: {clerk_user_id: {_eq: $clerkUserId}}) {\n    id\n    email\n    is_active\n    is_staff\n    user_roles {\n      role {\n        name\n        priority\n        role_permissions {\n          permission {\n            action\n            resource {\n              name\n            }\n          }\n        }\n      }\n    }\n  }\n}\n\nquery GetAllRoles {\n  roles(order_by: {priority: desc}) {\n    id\n    name\n    display_name\n    description\n    priority\n    is_system_role\n    created_at\n    updated_at\n    role_permissions {\n      id\n      conditions\n      permission {\n        id\n        action\n        description\n        resource {\n          id\n          name\n          display_name\n          description\n        }\n      }\n    }\n  }\n}\n\nquery GetResourcesAndPermissions {\n  resources(order_by: {name: asc}) {\n    id\n    name\n    display_name\n    description\n    permissions {\n      id\n      action\n      description\n    }\n  }\n}\n\nquery GetUsersWithRoles($limit: Int = 50, $offset: Int = 0) {\n  users(limit: $limit, offset: $offset, order_by: {created_at: desc}) {\n    id\n    email\n    is_active\n    is_staff\n    created_at\n    user_roles {\n      id\n      created_at\n      role {\n        id\n        name\n        display_name\n        priority\n      }\n    }\n  }\n}\n\nquery GetUserCustomPermissions($userId: uuid!) {\n  user_roles(\n    where: {user_id: {_eq: $userId}, role: {is_system_role: {_eq: false}}}\n    order_by: {created_at: desc}\n  ) {\n    id\n    created_at\n    role {\n      id\n      name\n      display_name\n      description\n      role_permissions {\n        id\n        conditions\n        permission {\n          id\n          action\n          description\n          resource {\n            name\n            display_name\n          }\n        }\n      }\n    }\n  }\n}\n\nquery GetRolePermissions($roleName: String!) {\n  roles(where: {name: {_eq: $roleName}}) {\n    id\n    name\n    display_name\n    description\n    role_permissions(order_by: {created_at: desc}) {\n      id\n      conditions\n      created_at\n      updated_at\n      permission {\n        id\n        action\n        description\n        resource {\n          id\n          name\n          display_name\n          description\n        }\n      }\n    }\n  }\n}\n\nquery SearchUsersByEmail($emailPattern: String!) {\n  users(\n    where: {email: {_ilike: $emailPattern}}\n    limit: 10\n    order_by: {email: asc}\n  ) {\n    id\n    email\n    is_active\n    user_roles {\n      role {\n        name\n        display_name\n      }\n    }\n  }\n}\n\nquery GetRoleHierarchy {\n  roles(order_by: {priority: desc}) {\n    id\n    name\n    display_name\n    description\n    priority\n    is_system_role\n    role_permissions_aggregate {\n      aggregate {\n        count\n      }\n    }\n    user_roles_aggregate {\n      aggregate {\n        count\n      }\n    }\n  }\n}\n\nquery GetUserRoleHistory($limit: Int = 50, $offset: Int = 0, $userId: uuid = null) {\n  user_roles(\n    limit: $limit\n    offset: $offset\n    order_by: {created_at: desc}\n    where: {user_id: {_eq: $userId}}\n  ) {\n    id\n    user_id\n    role_id\n    created_at\n    updated_at\n    role {\n      name\n      display_name\n      description\n      priority\n    }\n    user {\n      email\n    }\n  }\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "subscription UserRoleChanges($userId: uuid!) {\n  user_roles(where: {user_id: {_eq: $userId}}) {\n    ...UserRoleInfo\n  }\n}\n\nsubscription UserRolePermissionChanges($userId: uuid!) {\n  user_roles(where: {user_id: {_eq: $userId}}) {\n    role {\n      role_permissions {\n        ...RolePermissionInfo\n      }\n    }\n  }\n}\n\nsubscription RoleChanges {\n  roles {\n    ...BasicRoleInfo\n    role_permissions {\n      ...RolePermissionInfo\n    }\n  }\n}\n\nsubscription UserRoleAuditEvents($userId: uuid = null) {\n  user_roles(\n    where: {user_id: {_eq: $userId}}\n    order_by: {created_at: desc}\n    limit: 50\n  ) {\n    id\n    user_id\n    role_id\n    created_at\n    updated_at\n    role {\n      name\n      display_name\n      description\n    }\n    user {\n      email\n    }\n  }\n}"): (typeof documents)["subscription UserRoleChanges($userId: uuid!) {\n  user_roles(where: {user_id: {_eq: $userId}}) {\n    ...UserRoleInfo\n  }\n}\n\nsubscription UserRolePermissionChanges($userId: uuid!) {\n  user_roles(where: {user_id: {_eq: $userId}}) {\n    role {\n      role_permissions {\n        ...RolePermissionInfo\n      }\n    }\n  }\n}\n\nsubscription RoleChanges {\n  roles {\n    ...BasicRoleInfo\n    role_permissions {\n      ...RolePermissionInfo\n    }\n  }\n}\n\nsubscription UserRoleAuditEvents($userId: uuid = null) {\n  user_roles(\n    where: {user_id: {_eq: $userId}}\n    order_by: {created_at: desc}\n    limit: 50\n  ) {\n    id\n    user_id\n    role_id\n    created_at\n    updated_at\n    role {\n      name\n      display_name\n      description\n    }\n    user {\n      email\n    }\n  }\n}"];

export function graphql(source: string) {
  return (documents as any)[source] ?? {};
}

export type DocumentType<TDocumentNode extends DocumentNode<any, any>> = TDocumentNode extends DocumentNode<  infer TType,  any>  ? TType  : never;