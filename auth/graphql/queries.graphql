# ================================
# RBAC SYSTEM GRAPHQL QUERIES
# Following project GraphQL standards
# ================================

# Get current user's roles and permissions
query GetCurrentUserRoles {
  users(limit: 1) {
    id
    email
    is_active
    is_staff
    user_roles {
      role {
        id
        name
        display_name
        description
        priority
        is_system_role
        role_permissions {
          permission {
            id
            action
            description
            resource {
              id
              name
              display_name
              description
            }
          }
          conditions
        }
      }
      created_at
      updated_at
    }
  }
}

# Get user's effective permissions (through role relationships)
# Note: get_user_effective_permissions function doesn't exist, using role-based approach
query GetUserEffectivePermissions($userId: uuid!) {
  user_roles(where: { user_id: { _eq: $userId } }) {
    role {
      name
      display_name
      priority
      role_permissions {
        permission {
          action
          resource {
            name
            display_name
          }
        }
        conditions
      }
    }
  }
}

# Check if user has permission through their roles
# Note: user_can_perform_action function doesn't exist, using role-based lookup
query CanUserPerformAction(
  $userId: uuid!
  $resourceName: String!
  $actionName: permission_action!
) {
  user_roles(
    where: { 
      user_id: { _eq: $userId },
      role: {
        role_permissions: {
          permission: {
            resource: { name: { _eq: $resourceName } },
            action: { _eq: $actionName }
          }
        }
      }
    }
  ) {
    role {
      name
      role_permissions(
        where: {
          permission: {
            resource: { name: { _eq: $resourceName } },
            action: { _eq: $actionName }
          }
        }
      ) {
        conditions
        permission {
          action
          resource {
            name
          }
        }
      }
    }
  }
}

# Get user information for Hasura JWT claims
# Note: get_hasura_claims function doesn't exist, getting user data directly
query GetUserForHasuraClaims($clerkUserId: String!) {
  users(where: { clerk_user_id: { _eq: $clerkUserId } }) {
    id
    email
    is_active
    is_staff
    user_roles {
      role {
        name
        priority
        role_permissions {
          permission {
            action
            resource {
              name
            }
          }
        }
      }
    }
  }
}

# Get all available roles (for admin interfaces)
query GetAllRoles {
  roles(order_by: { priority: desc }) {
    id
    name
    display_name
    description
    priority
    is_system_role
    created_at
    updated_at
    role_permissions {
      id
      conditions
      permission {
        id
        action
        description
        resource {
          id
          name
          display_name
          description
        }
      }
    }
  }
}

# Get all resources and their permissions
query GetResourcesAndPermissions {
  resources(order_by: { name: asc }) {
    id
    name
    display_name
    description
    permissions {
      id
      action
      description
    }
  }
}

# Get users with their role assignments (admin view)
query GetUsersWithRoles($limit: Int = 50, $offset: Int = 0) {
  users(limit: $limit, offset: $offset, order_by: { created_at: desc }) {
    id
    email
    is_active
    is_staff
    created_at
    user_roles {
      id
      created_at
      role {
        id
        name
        display_name
        priority
      }
    }
  }
}

# Get custom roles and permissions for a user
# This replaces permission overrides functionality
query GetUserCustomPermissions($userId: uuid!) {
  user_roles(
    where: { 
      user_id: { _eq: $userId },
      role: { is_system_role: { _eq: false } }
    }
    order_by: { created_at: desc }
  ) {
    id
    created_at
    role {
      id
      name
      display_name
      description
      role_permissions {
        id
        conditions
        permission {
          id
          action
          description
          resource {
            name
            display_name
          }
        }
      }
    }
  }
}

# Get permissions for a specific role
# This replaces role-based permission overrides
query GetRolePermissions($roleName: String!) {
  roles(
    where: { name: { _eq: $roleName } }
  ) {
    id
    name
    display_name
    description
    role_permissions(order_by: { created_at: desc }) {
      id
      conditions
      created_at
      updated_at
      permission {
        id
        action
        description
        resource {
          id
          name
          display_name
          description
        }
      }
    }
  }
}

# Search users by email (for role assignment)
query SearchUsersByEmail($emailPattern: String!) {
  users(
    where: { email: { _ilike: $emailPattern } }
    limit: 10
    order_by: { email: asc }
  ) {
    id
    email
    is_active
    user_roles {
      role {
        name
        display_name
      }
    }
  }
}

# Get role hierarchy with inheritance visualization
query GetRoleHierarchy {
  roles(order_by: { priority: desc }) {
    id
    name
    display_name
    description
    priority
    is_system_role
    # Count of direct permissions
    role_permissions_aggregate {
      aggregate {
        count
      }
    }
    # Count of users with this role
    user_roles_aggregate {
      aggregate {
        count
      }
    }
  }
}

# Get role assignment history for users
# This provides audit trail for permission changes through role assignments
query GetUserRoleHistory(
  $limit: Int = 50
  $offset: Int = 0
  $userId: uuid = null
) {
  user_roles(
    limit: $limit
    offset: $offset
    order_by: { created_at: desc }
    where: { user_id: { _eq: $userId } }
  ) {
    id
    user_id
    role_id
    created_at
    updated_at
    role {
      name
      display_name
      description
      priority
    }
    user {
      email
    }
  }
}
