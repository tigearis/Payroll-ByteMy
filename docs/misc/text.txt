Files you should check and update:

middleware.ts - Update to use Clerk's authentication instead of NextAuth
app/(auth)/sign-in/page.tsx - Replace with Clerk's sign-in component
app/(auth)/auth-layout.tsx - Update to use Clerk's providers
app/layout.tsx - Ensure it uses Clerk's provider
app/providers.tsx - Remove NextAuth provider, add Clerk provider if needed
app/api/graphql/route.ts - Update authentication checks to use Clerk
app/api/payrolls/route.ts & app/api/payrolls/[id]/route.ts - Update authentication
components/user-nav.tsx - Update to use Clerk's user data
components/sidebar.tsx - Update permission checks if any
components/client-hasura-role-gate.tsx & components/hasura-role-gate.tsx - Consider replacing with Clerk's Protect component

New files you'll need:

app/api/users/route.ts - For creating users with roles
app/api/set-user-role/route.ts - For updating user roles
Make sure your types/globals.d.ts exists and is configured correctly

Important configuration files to update:

lib/apollo-client.ts - Ensure it's using Clerk's authentication for Hasura
Check tsconfig.json to make sure it includes your new type definitions

Let me summarize what we've accomplished so far:

1. **Analyzed your Hasura metadata and permissions system**:
   - You have a robust role-based permission system set up in Hasura with roles like org_admin, manager, consultant, and viewer
   - Each role has specific permissions for different database tables and operations

2. **Decided on an authentication approach**:
   - We're replacing NextAuth with Clerk for authentication
   - We're integrating Clerk's JWT tokens with Hasura's permission system
   - This requires setting up a specific JWT template in Clerk with Hasura claims

3. **Updated Apollo client configuration**:
   - Modified `lib/apollo-client.ts` to fetch tokens from Clerk
   - Set up functions for both client-side and server-side GraphQL operations
   - Added support for admin operations that bypass Hasura permissions

4. **Set up TypeScript interfaces**:
   - Created `types/globals.d.ts` to define custom types for Clerk
   - Added interfaces for Hasura JWT claims and role types

5. **Planned role-based protection**:
   - Decided to use Clerk's built-in `Protect` component for UI-level permissions
   - Discussed updating the middleware for route-level protection

6. **Planned API routes for user management**:
   - Designed routes for creating users with roles
   - Designed routes for updating user roles

7. **Identified files to remove or update**:
   - Identified NextAuth-related files that should be removed
   - Identified files that need to be updated to use Clerk instead of NextAuth

Next steps would be to implement these changes and test the authentication and authorization flow to ensure it works correctly with your Hasura GraphQL API.