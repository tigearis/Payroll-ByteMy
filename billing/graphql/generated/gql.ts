/* eslint-disable */
import * as types from './graphql';
import { TypedDocumentNode as DocumentNode } from '@graphql-typed-document-node/core';

/**
 * Map of all GraphQL operations in the project.
 *
 * This map has several performance disadvantages:
 * 1. It is not tree-shakeable, so it will include all operations in the project.
 * 2. It is not minifiable, so the string of a GraphQL query will be multiple times inside the bundle.
 * 3. It does not support dead code elimination, so it will add unused operations.
 *
 * Therefore it is highly recommended to use the babel or swc plugin for production.
 * Learn more about it here: https://the-guild.dev/graphql/codegen/plugins/presets/preset-client#reducing-bundle-size
 */
type Documents = {
    "fragment BillingPlanCore on billing_plan {\n  id\n  name\n  description\n  rate_per_payroll\n  currency\n  created_at\n  updated_at\n}\n\nfragment BillingInvoiceCore on billing_invoice {\n  id\n  client_id\n  billing_period_start\n  billing_period_end\n  issued_date\n  due_date\n  status\n  notes\n  total_amount\n  currency\n  created_at\n  updated_at\n}\n\nfragment BillingInvoiceWithItems on billing_invoice {\n  ...BillingInvoiceCore\n  billing_invoice_items {\n    ...BillingInvoiceItemCore\n  }\n  client {\n    id\n    name\n    contact_email\n  }\n}\n\nfragment BillingInvoiceItemCore on billing_invoice_item {\n  id\n  invoice_id\n  description\n  quantity\n  unit_price\n  amount\n  created_at\n  updated_at\n}\n\nfragment ClientBillingAssignmentCore on client_billing_assignment {\n  id\n  client_id\n  billing_plan_id\n  start_date\n  end_date\n  is_active\n  created_at\n  updated_at\n}\n\nfragment ClientBillingAssignmentWithRelations on client_billing_assignment {\n  ...ClientBillingAssignmentCore\n  billing_plan {\n    ...BillingPlanCore\n  }\n  client {\n    id\n    name\n  }\n}\n\nfragment BillingEventLogCore on billing_event_log {\n  id\n  invoice_id\n  event_type\n  message\n  created_by\n  created_at\n}\n\nfragment BillingEventLogWithRelations on billing_event_log {\n  ...BillingEventLogCore\n  billing_invoice {\n    id\n    status\n  }\n  user {\n    id\n    name\n    email\n  }\n}": typeof types.BillingPlanCoreFragmentDoc,
    "mutation CreateBillingPlan($object: billing_plan_insert_input!) {\n  insert_billing_plan_one(object: $object) {\n    ...BillingPlanCore\n  }\n}\n\nmutation UpdateBillingPlan($id: uuid!, $set: billing_plan_set_input!) {\n  update_billing_plan_by_pk(pk_columns: {id: $id}, _set: $set) {\n    ...BillingPlanCore\n  }\n}\n\nmutation DeleteBillingPlan($id: uuid!) {\n  delete_billing_plan_by_pk(id: $id) {\n    id\n  }\n}\n\nmutation CreateBillingInvoice($object: billing_invoice_insert_input!) {\n  insert_billing_invoice_one(object: $object) {\n    ...BillingInvoiceWithItems\n  }\n}\n\nmutation UpdateBillingInvoice($id: uuid!, $set: billing_invoice_set_input!) {\n  update_billing_invoice_by_pk(pk_columns: {id: $id}, _set: $set) {\n    ...BillingInvoiceWithItems\n  }\n}\n\nmutation UpdateInvoiceStatus($id: uuid!, $status: String!, $event_message: String!, $user_id: uuid!) {\n  update_billing_invoice_by_pk(pk_columns: {id: $id}, _set: {status: $status}) {\n    ...BillingInvoiceCore\n  }\n  insert_billing_event_log_one(\n    object: {invoice_id: $id, event_type: $status, message: $event_message, created_by: $user_id}\n  ) {\n    ...BillingEventLogCore\n  }\n}\n\nmutation DeleteBillingInvoice($id: uuid!) {\n  delete_billing_invoice_by_pk(id: $id) {\n    id\n  }\n}\n\nmutation CreateBillingInvoiceItem($object: billing_invoice_item_insert_input!) {\n  insert_billing_invoice_item_one(object: $object) {\n    ...BillingInvoiceItemCore\n  }\n}\n\nmutation CreateBillingInvoiceItems($objects: [billing_invoice_item_insert_input!]!) {\n  insert_billing_invoice_item(objects: $objects) {\n    returning {\n      ...BillingInvoiceItemCore\n    }\n    affected_rows\n  }\n}\n\nmutation UpdateBillingInvoiceItem($id: uuid!, $set: billing_invoice_item_set_input!) {\n  update_billing_invoice_item_by_pk(pk_columns: {id: $id}, _set: $set) {\n    ...BillingInvoiceItemCore\n  }\n}\n\nmutation DeleteBillingInvoiceItem($id: uuid!) {\n  delete_billing_invoice_item_by_pk(id: $id) {\n    id\n  }\n}\n\nmutation CreateClientBillingAssignment($object: client_billing_assignment_insert_input!) {\n  insert_client_billing_assignment_one(object: $object) {\n    ...ClientBillingAssignmentWithRelations\n  }\n}\n\nmutation UpdateClientBillingAssignment($id: uuid!, $set: client_billing_assignment_set_input!) {\n  update_client_billing_assignment_by_pk(pk_columns: {id: $id}, _set: $set) {\n    ...ClientBillingAssignmentWithRelations\n  }\n}\n\nmutation DeactivateClientBillingAssignment($id: uuid!, $end_date: date!) {\n  update_client_billing_assignment_by_pk(\n    pk_columns: {id: $id}\n    _set: {is_active: false, end_date: $end_date}\n  ) {\n    ...ClientBillingAssignmentCore\n  }\n}\n\nmutation DeleteClientBillingAssignment($id: uuid!) {\n  delete_client_billing_assignment_by_pk(id: $id) {\n    id\n  }\n}\n\nmutation BulkCreateInvoices($invoices: [billing_invoice_insert_input!]!) {\n  insert_billing_invoice(objects: $invoices) {\n    affected_rows\n    returning {\n      id\n      total_amount\n    }\n  }\n}\n\nmutation BulkUpdateInvoiceStatus($invoice_ids: [uuid!]!, $status: String!, $user_id: uuid!) {\n  update_billing_invoice(\n    where: {id: {_in: $invoice_ids}}\n    _set: {status: $status}\n  ) {\n    affected_rows\n    returning {\n      ...BillingInvoiceCore\n    }\n  }\n}": typeof types.CreateBillingPlanDocument,
    "query GetBillingPlans($where: billing_plan_bool_exp, $order_by: [billing_plan_order_by!], $limit: Int, $offset: Int) {\n  billing_plan(where: $where, order_by: $order_by, limit: $limit, offset: $offset) {\n    ...BillingPlanCore\n  }\n  billing_plan_aggregate(where: $where) {\n    aggregate {\n      count\n    }\n  }\n}\n\nquery GetBillingPlanById($id: uuid!) {\n  billing_plan_by_pk(id: $id) {\n    ...BillingPlanCore\n    client_billing_assignments(where: {is_active: {_eq: true}}) {\n      ...ClientBillingAssignmentWithRelations\n    }\n  }\n}\n\nquery GetBillingInvoices($where: billing_invoice_bool_exp, $order_by: [billing_invoice_order_by!], $limit: Int, $offset: Int) {\n  billing_invoice(\n    where: $where\n    order_by: $order_by\n    limit: $limit\n    offset: $offset\n  ) {\n    ...BillingInvoiceWithItems\n  }\n  billing_invoice_aggregate(where: $where) {\n    aggregate {\n      count\n      sum {\n        total_amount\n      }\n    }\n  }\n}\n\nquery GetBillingInvoiceById($id: uuid!) {\n  billing_invoice_by_pk(id: $id) {\n    ...BillingInvoiceWithItems\n    billing_event_logs(order_by: {created_at: desc}) {\n      ...BillingEventLogWithRelations\n    }\n  }\n}\n\nquery GetInvoicesByClient($client_id: uuid!, $start_date: date, $end_date: date) {\n  billing_invoice(\n    where: {client_id: {_eq: $client_id}, _and: [{billing_period_start: {_gte: $start_date}}, {billing_period_end: {_lte: $end_date}}]}\n    order_by: {issued_date: desc}\n  ) {\n    ...BillingInvoiceWithItems\n  }\n}\n\nquery GetOverdueInvoices($today: date!) {\n  billing_invoice(\n    where: {status: {_neq: \"paid\"}, due_date: {_lt: $today}}\n    order_by: {due_date: asc}\n  ) {\n    ...BillingInvoiceWithItems\n  }\n}\n\nquery GetClientBillingAssignments($where: client_billing_assignment_bool_exp, $order_by: [client_billing_assignment_order_by!]) {\n  client_billing_assignment(where: $where, order_by: $order_by) {\n    ...ClientBillingAssignmentWithRelations\n  }\n}\n\nquery GetActiveClientBillingAssignment($client_id: uuid!, $date: date!) {\n  client_billing_assignment(\n    where: {client_id: {_eq: $client_id}, is_active: {_eq: true}, start_date: {_lte: $date}, _or: [{end_date: {_is_null: true}}, {end_date: {_gte: $date}}]}\n    limit: 1\n  ) {\n    ...ClientBillingAssignmentWithRelations\n  }\n}\n\nquery GetBillingAnalytics($start_date: date!, $end_date: date!) {\n  total_revenue: billing_invoice_aggregate(\n    where: {status: {_eq: \"paid\"}, issued_date: {_gte: $start_date, _lte: $end_date}}\n  ) {\n    aggregate {\n      sum {\n        total_amount\n      }\n      count\n    }\n  }\n  outstanding_revenue: billing_invoice_aggregate(\n    where: {status: {_neq: \"paid\"}, issued_date: {_gte: $start_date, _lte: $end_date}}\n  ) {\n    aggregate {\n      sum {\n        total_amount\n      }\n      count\n    }\n  }\n  revenue_by_client: billing_invoice(\n    where: {issued_date: {_gte: $start_date, _lte: $end_date}}\n  ) {\n    client {\n      id\n      name\n    }\n    total_amount\n    status\n  }\n}": typeof types.GetBillingPlansDocument,
    "subscription SubscribeToBillingInvoices($client_id: uuid) {\n  billing_invoice(\n    where: {client_id: {_eq: $client_id}}\n    order_by: {updated_at: desc}\n  ) {\n    ...BillingInvoiceWithItems\n  }\n}\n\nsubscription SubscribeToInvoiceStatus($invoice_id: uuid!) {\n  billing_invoice_by_pk(id: $invoice_id) {\n    id\n    status\n    updated_at\n    billing_event_logs(order_by: {created_at: desc}, limit: 5) {\n      ...BillingEventLogWithRelations\n    }\n  }\n}\n\nsubscription SubscribeToClientBillingAssignments($client_id: uuid!) {\n  client_billing_assignment(\n    where: {client_id: {_eq: $client_id}}\n    order_by: {created_at: desc}\n  ) {\n    ...ClientBillingAssignmentWithRelations\n  }\n}\n\nsubscription SubscribeToBillingPlans {\n  billing_plan(order_by: {updated_at: desc}) {\n    ...BillingPlanCore\n  }\n}": typeof types.SubscribeToBillingInvoicesDocument,
};
const documents: Documents = {
    "fragment BillingPlanCore on billing_plan {\n  id\n  name\n  description\n  rate_per_payroll\n  currency\n  created_at\n  updated_at\n}\n\nfragment BillingInvoiceCore on billing_invoice {\n  id\n  client_id\n  billing_period_start\n  billing_period_end\n  issued_date\n  due_date\n  status\n  notes\n  total_amount\n  currency\n  created_at\n  updated_at\n}\n\nfragment BillingInvoiceWithItems on billing_invoice {\n  ...BillingInvoiceCore\n  billing_invoice_items {\n    ...BillingInvoiceItemCore\n  }\n  client {\n    id\n    name\n    contact_email\n  }\n}\n\nfragment BillingInvoiceItemCore on billing_invoice_item {\n  id\n  invoice_id\n  description\n  quantity\n  unit_price\n  amount\n  created_at\n  updated_at\n}\n\nfragment ClientBillingAssignmentCore on client_billing_assignment {\n  id\n  client_id\n  billing_plan_id\n  start_date\n  end_date\n  is_active\n  created_at\n  updated_at\n}\n\nfragment ClientBillingAssignmentWithRelations on client_billing_assignment {\n  ...ClientBillingAssignmentCore\n  billing_plan {\n    ...BillingPlanCore\n  }\n  client {\n    id\n    name\n  }\n}\n\nfragment BillingEventLogCore on billing_event_log {\n  id\n  invoice_id\n  event_type\n  message\n  created_by\n  created_at\n}\n\nfragment BillingEventLogWithRelations on billing_event_log {\n  ...BillingEventLogCore\n  billing_invoice {\n    id\n    status\n  }\n  user {\n    id\n    name\n    email\n  }\n}": types.BillingPlanCoreFragmentDoc,
    "mutation CreateBillingPlan($object: billing_plan_insert_input!) {\n  insert_billing_plan_one(object: $object) {\n    ...BillingPlanCore\n  }\n}\n\nmutation UpdateBillingPlan($id: uuid!, $set: billing_plan_set_input!) {\n  update_billing_plan_by_pk(pk_columns: {id: $id}, _set: $set) {\n    ...BillingPlanCore\n  }\n}\n\nmutation DeleteBillingPlan($id: uuid!) {\n  delete_billing_plan_by_pk(id: $id) {\n    id\n  }\n}\n\nmutation CreateBillingInvoice($object: billing_invoice_insert_input!) {\n  insert_billing_invoice_one(object: $object) {\n    ...BillingInvoiceWithItems\n  }\n}\n\nmutation UpdateBillingInvoice($id: uuid!, $set: billing_invoice_set_input!) {\n  update_billing_invoice_by_pk(pk_columns: {id: $id}, _set: $set) {\n    ...BillingInvoiceWithItems\n  }\n}\n\nmutation UpdateInvoiceStatus($id: uuid!, $status: String!, $event_message: String!, $user_id: uuid!) {\n  update_billing_invoice_by_pk(pk_columns: {id: $id}, _set: {status: $status}) {\n    ...BillingInvoiceCore\n  }\n  insert_billing_event_log_one(\n    object: {invoice_id: $id, event_type: $status, message: $event_message, created_by: $user_id}\n  ) {\n    ...BillingEventLogCore\n  }\n}\n\nmutation DeleteBillingInvoice($id: uuid!) {\n  delete_billing_invoice_by_pk(id: $id) {\n    id\n  }\n}\n\nmutation CreateBillingInvoiceItem($object: billing_invoice_item_insert_input!) {\n  insert_billing_invoice_item_one(object: $object) {\n    ...BillingInvoiceItemCore\n  }\n}\n\nmutation CreateBillingInvoiceItems($objects: [billing_invoice_item_insert_input!]!) {\n  insert_billing_invoice_item(objects: $objects) {\n    returning {\n      ...BillingInvoiceItemCore\n    }\n    affected_rows\n  }\n}\n\nmutation UpdateBillingInvoiceItem($id: uuid!, $set: billing_invoice_item_set_input!) {\n  update_billing_invoice_item_by_pk(pk_columns: {id: $id}, _set: $set) {\n    ...BillingInvoiceItemCore\n  }\n}\n\nmutation DeleteBillingInvoiceItem($id: uuid!) {\n  delete_billing_invoice_item_by_pk(id: $id) {\n    id\n  }\n}\n\nmutation CreateClientBillingAssignment($object: client_billing_assignment_insert_input!) {\n  insert_client_billing_assignment_one(object: $object) {\n    ...ClientBillingAssignmentWithRelations\n  }\n}\n\nmutation UpdateClientBillingAssignment($id: uuid!, $set: client_billing_assignment_set_input!) {\n  update_client_billing_assignment_by_pk(pk_columns: {id: $id}, _set: $set) {\n    ...ClientBillingAssignmentWithRelations\n  }\n}\n\nmutation DeactivateClientBillingAssignment($id: uuid!, $end_date: date!) {\n  update_client_billing_assignment_by_pk(\n    pk_columns: {id: $id}\n    _set: {is_active: false, end_date: $end_date}\n  ) {\n    ...ClientBillingAssignmentCore\n  }\n}\n\nmutation DeleteClientBillingAssignment($id: uuid!) {\n  delete_client_billing_assignment_by_pk(id: $id) {\n    id\n  }\n}\n\nmutation BulkCreateInvoices($invoices: [billing_invoice_insert_input!]!) {\n  insert_billing_invoice(objects: $invoices) {\n    affected_rows\n    returning {\n      id\n      total_amount\n    }\n  }\n}\n\nmutation BulkUpdateInvoiceStatus($invoice_ids: [uuid!]!, $status: String!, $user_id: uuid!) {\n  update_billing_invoice(\n    where: {id: {_in: $invoice_ids}}\n    _set: {status: $status}\n  ) {\n    affected_rows\n    returning {\n      ...BillingInvoiceCore\n    }\n  }\n}": types.CreateBillingPlanDocument,
    "query GetBillingPlans($where: billing_plan_bool_exp, $order_by: [billing_plan_order_by!], $limit: Int, $offset: Int) {\n  billing_plan(where: $where, order_by: $order_by, limit: $limit, offset: $offset) {\n    ...BillingPlanCore\n  }\n  billing_plan_aggregate(where: $where) {\n    aggregate {\n      count\n    }\n  }\n}\n\nquery GetBillingPlanById($id: uuid!) {\n  billing_plan_by_pk(id: $id) {\n    ...BillingPlanCore\n    client_billing_assignments(where: {is_active: {_eq: true}}) {\n      ...ClientBillingAssignmentWithRelations\n    }\n  }\n}\n\nquery GetBillingInvoices($where: billing_invoice_bool_exp, $order_by: [billing_invoice_order_by!], $limit: Int, $offset: Int) {\n  billing_invoice(\n    where: $where\n    order_by: $order_by\n    limit: $limit\n    offset: $offset\n  ) {\n    ...BillingInvoiceWithItems\n  }\n  billing_invoice_aggregate(where: $where) {\n    aggregate {\n      count\n      sum {\n        total_amount\n      }\n    }\n  }\n}\n\nquery GetBillingInvoiceById($id: uuid!) {\n  billing_invoice_by_pk(id: $id) {\n    ...BillingInvoiceWithItems\n    billing_event_logs(order_by: {created_at: desc}) {\n      ...BillingEventLogWithRelations\n    }\n  }\n}\n\nquery GetInvoicesByClient($client_id: uuid!, $start_date: date, $end_date: date) {\n  billing_invoice(\n    where: {client_id: {_eq: $client_id}, _and: [{billing_period_start: {_gte: $start_date}}, {billing_period_end: {_lte: $end_date}}]}\n    order_by: {issued_date: desc}\n  ) {\n    ...BillingInvoiceWithItems\n  }\n}\n\nquery GetOverdueInvoices($today: date!) {\n  billing_invoice(\n    where: {status: {_neq: \"paid\"}, due_date: {_lt: $today}}\n    order_by: {due_date: asc}\n  ) {\n    ...BillingInvoiceWithItems\n  }\n}\n\nquery GetClientBillingAssignments($where: client_billing_assignment_bool_exp, $order_by: [client_billing_assignment_order_by!]) {\n  client_billing_assignment(where: $where, order_by: $order_by) {\n    ...ClientBillingAssignmentWithRelations\n  }\n}\n\nquery GetActiveClientBillingAssignment($client_id: uuid!, $date: date!) {\n  client_billing_assignment(\n    where: {client_id: {_eq: $client_id}, is_active: {_eq: true}, start_date: {_lte: $date}, _or: [{end_date: {_is_null: true}}, {end_date: {_gte: $date}}]}\n    limit: 1\n  ) {\n    ...ClientBillingAssignmentWithRelations\n  }\n}\n\nquery GetBillingAnalytics($start_date: date!, $end_date: date!) {\n  total_revenue: billing_invoice_aggregate(\n    where: {status: {_eq: \"paid\"}, issued_date: {_gte: $start_date, _lte: $end_date}}\n  ) {\n    aggregate {\n      sum {\n        total_amount\n      }\n      count\n    }\n  }\n  outstanding_revenue: billing_invoice_aggregate(\n    where: {status: {_neq: \"paid\"}, issued_date: {_gte: $start_date, _lte: $end_date}}\n  ) {\n    aggregate {\n      sum {\n        total_amount\n      }\n      count\n    }\n  }\n  revenue_by_client: billing_invoice(\n    where: {issued_date: {_gte: $start_date, _lte: $end_date}}\n  ) {\n    client {\n      id\n      name\n    }\n    total_amount\n    status\n  }\n}": types.GetBillingPlansDocument,
    "subscription SubscribeToBillingInvoices($client_id: uuid) {\n  billing_invoice(\n    where: {client_id: {_eq: $client_id}}\n    order_by: {updated_at: desc}\n  ) {\n    ...BillingInvoiceWithItems\n  }\n}\n\nsubscription SubscribeToInvoiceStatus($invoice_id: uuid!) {\n  billing_invoice_by_pk(id: $invoice_id) {\n    id\n    status\n    updated_at\n    billing_event_logs(order_by: {created_at: desc}, limit: 5) {\n      ...BillingEventLogWithRelations\n    }\n  }\n}\n\nsubscription SubscribeToClientBillingAssignments($client_id: uuid!) {\n  client_billing_assignment(\n    where: {client_id: {_eq: $client_id}}\n    order_by: {created_at: desc}\n  ) {\n    ...ClientBillingAssignmentWithRelations\n  }\n}\n\nsubscription SubscribeToBillingPlans {\n  billing_plan(order_by: {updated_at: desc}) {\n    ...BillingPlanCore\n  }\n}": types.SubscribeToBillingInvoicesDocument,
};

/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 *
 *
 * @example
 * ```ts
 * const query = graphql(`query GetUser($id: ID!) { user(id: $id) { name } }`);
 * ```
 *
 * The query argument is unknown!
 * Please regenerate the types.
 */
export function graphql(source: string): unknown;

/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "fragment BillingPlanCore on billing_plan {\n  id\n  name\n  description\n  rate_per_payroll\n  currency\n  created_at\n  updated_at\n}\n\nfragment BillingInvoiceCore on billing_invoice {\n  id\n  client_id\n  billing_period_start\n  billing_period_end\n  issued_date\n  due_date\n  status\n  notes\n  total_amount\n  currency\n  created_at\n  updated_at\n}\n\nfragment BillingInvoiceWithItems on billing_invoice {\n  ...BillingInvoiceCore\n  billing_invoice_items {\n    ...BillingInvoiceItemCore\n  }\n  client {\n    id\n    name\n    contact_email\n  }\n}\n\nfragment BillingInvoiceItemCore on billing_invoice_item {\n  id\n  invoice_id\n  description\n  quantity\n  unit_price\n  amount\n  created_at\n  updated_at\n}\n\nfragment ClientBillingAssignmentCore on client_billing_assignment {\n  id\n  client_id\n  billing_plan_id\n  start_date\n  end_date\n  is_active\n  created_at\n  updated_at\n}\n\nfragment ClientBillingAssignmentWithRelations on client_billing_assignment {\n  ...ClientBillingAssignmentCore\n  billing_plan {\n    ...BillingPlanCore\n  }\n  client {\n    id\n    name\n  }\n}\n\nfragment BillingEventLogCore on billing_event_log {\n  id\n  invoice_id\n  event_type\n  message\n  created_by\n  created_at\n}\n\nfragment BillingEventLogWithRelations on billing_event_log {\n  ...BillingEventLogCore\n  billing_invoice {\n    id\n    status\n  }\n  user {\n    id\n    name\n    email\n  }\n}"): (typeof documents)["fragment BillingPlanCore on billing_plan {\n  id\n  name\n  description\n  rate_per_payroll\n  currency\n  created_at\n  updated_at\n}\n\nfragment BillingInvoiceCore on billing_invoice {\n  id\n  client_id\n  billing_period_start\n  billing_period_end\n  issued_date\n  due_date\n  status\n  notes\n  total_amount\n  currency\n  created_at\n  updated_at\n}\n\nfragment BillingInvoiceWithItems on billing_invoice {\n  ...BillingInvoiceCore\n  billing_invoice_items {\n    ...BillingInvoiceItemCore\n  }\n  client {\n    id\n    name\n    contact_email\n  }\n}\n\nfragment BillingInvoiceItemCore on billing_invoice_item {\n  id\n  invoice_id\n  description\n  quantity\n  unit_price\n  amount\n  created_at\n  updated_at\n}\n\nfragment ClientBillingAssignmentCore on client_billing_assignment {\n  id\n  client_id\n  billing_plan_id\n  start_date\n  end_date\n  is_active\n  created_at\n  updated_at\n}\n\nfragment ClientBillingAssignmentWithRelations on client_billing_assignment {\n  ...ClientBillingAssignmentCore\n  billing_plan {\n    ...BillingPlanCore\n  }\n  client {\n    id\n    name\n  }\n}\n\nfragment BillingEventLogCore on billing_event_log {\n  id\n  invoice_id\n  event_type\n  message\n  created_by\n  created_at\n}\n\nfragment BillingEventLogWithRelations on billing_event_log {\n  ...BillingEventLogCore\n  billing_invoice {\n    id\n    status\n  }\n  user {\n    id\n    name\n    email\n  }\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "mutation CreateBillingPlan($object: billing_plan_insert_input!) {\n  insert_billing_plan_one(object: $object) {\n    ...BillingPlanCore\n  }\n}\n\nmutation UpdateBillingPlan($id: uuid!, $set: billing_plan_set_input!) {\n  update_billing_plan_by_pk(pk_columns: {id: $id}, _set: $set) {\n    ...BillingPlanCore\n  }\n}\n\nmutation DeleteBillingPlan($id: uuid!) {\n  delete_billing_plan_by_pk(id: $id) {\n    id\n  }\n}\n\nmutation CreateBillingInvoice($object: billing_invoice_insert_input!) {\n  insert_billing_invoice_one(object: $object) {\n    ...BillingInvoiceWithItems\n  }\n}\n\nmutation UpdateBillingInvoice($id: uuid!, $set: billing_invoice_set_input!) {\n  update_billing_invoice_by_pk(pk_columns: {id: $id}, _set: $set) {\n    ...BillingInvoiceWithItems\n  }\n}\n\nmutation UpdateInvoiceStatus($id: uuid!, $status: String!, $event_message: String!, $user_id: uuid!) {\n  update_billing_invoice_by_pk(pk_columns: {id: $id}, _set: {status: $status}) {\n    ...BillingInvoiceCore\n  }\n  insert_billing_event_log_one(\n    object: {invoice_id: $id, event_type: $status, message: $event_message, created_by: $user_id}\n  ) {\n    ...BillingEventLogCore\n  }\n}\n\nmutation DeleteBillingInvoice($id: uuid!) {\n  delete_billing_invoice_by_pk(id: $id) {\n    id\n  }\n}\n\nmutation CreateBillingInvoiceItem($object: billing_invoice_item_insert_input!) {\n  insert_billing_invoice_item_one(object: $object) {\n    ...BillingInvoiceItemCore\n  }\n}\n\nmutation CreateBillingInvoiceItems($objects: [billing_invoice_item_insert_input!]!) {\n  insert_billing_invoice_item(objects: $objects) {\n    returning {\n      ...BillingInvoiceItemCore\n    }\n    affected_rows\n  }\n}\n\nmutation UpdateBillingInvoiceItem($id: uuid!, $set: billing_invoice_item_set_input!) {\n  update_billing_invoice_item_by_pk(pk_columns: {id: $id}, _set: $set) {\n    ...BillingInvoiceItemCore\n  }\n}\n\nmutation DeleteBillingInvoiceItem($id: uuid!) {\n  delete_billing_invoice_item_by_pk(id: $id) {\n    id\n  }\n}\n\nmutation CreateClientBillingAssignment($object: client_billing_assignment_insert_input!) {\n  insert_client_billing_assignment_one(object: $object) {\n    ...ClientBillingAssignmentWithRelations\n  }\n}\n\nmutation UpdateClientBillingAssignment($id: uuid!, $set: client_billing_assignment_set_input!) {\n  update_client_billing_assignment_by_pk(pk_columns: {id: $id}, _set: $set) {\n    ...ClientBillingAssignmentWithRelations\n  }\n}\n\nmutation DeactivateClientBillingAssignment($id: uuid!, $end_date: date!) {\n  update_client_billing_assignment_by_pk(\n    pk_columns: {id: $id}\n    _set: {is_active: false, end_date: $end_date}\n  ) {\n    ...ClientBillingAssignmentCore\n  }\n}\n\nmutation DeleteClientBillingAssignment($id: uuid!) {\n  delete_client_billing_assignment_by_pk(id: $id) {\n    id\n  }\n}\n\nmutation BulkCreateInvoices($invoices: [billing_invoice_insert_input!]!) {\n  insert_billing_invoice(objects: $invoices) {\n    affected_rows\n    returning {\n      id\n      total_amount\n    }\n  }\n}\n\nmutation BulkUpdateInvoiceStatus($invoice_ids: [uuid!]!, $status: String!, $user_id: uuid!) {\n  update_billing_invoice(\n    where: {id: {_in: $invoice_ids}}\n    _set: {status: $status}\n  ) {\n    affected_rows\n    returning {\n      ...BillingInvoiceCore\n    }\n  }\n}"): (typeof documents)["mutation CreateBillingPlan($object: billing_plan_insert_input!) {\n  insert_billing_plan_one(object: $object) {\n    ...BillingPlanCore\n  }\n}\n\nmutation UpdateBillingPlan($id: uuid!, $set: billing_plan_set_input!) {\n  update_billing_plan_by_pk(pk_columns: {id: $id}, _set: $set) {\n    ...BillingPlanCore\n  }\n}\n\nmutation DeleteBillingPlan($id: uuid!) {\n  delete_billing_plan_by_pk(id: $id) {\n    id\n  }\n}\n\nmutation CreateBillingInvoice($object: billing_invoice_insert_input!) {\n  insert_billing_invoice_one(object: $object) {\n    ...BillingInvoiceWithItems\n  }\n}\n\nmutation UpdateBillingInvoice($id: uuid!, $set: billing_invoice_set_input!) {\n  update_billing_invoice_by_pk(pk_columns: {id: $id}, _set: $set) {\n    ...BillingInvoiceWithItems\n  }\n}\n\nmutation UpdateInvoiceStatus($id: uuid!, $status: String!, $event_message: String!, $user_id: uuid!) {\n  update_billing_invoice_by_pk(pk_columns: {id: $id}, _set: {status: $status}) {\n    ...BillingInvoiceCore\n  }\n  insert_billing_event_log_one(\n    object: {invoice_id: $id, event_type: $status, message: $event_message, created_by: $user_id}\n  ) {\n    ...BillingEventLogCore\n  }\n}\n\nmutation DeleteBillingInvoice($id: uuid!) {\n  delete_billing_invoice_by_pk(id: $id) {\n    id\n  }\n}\n\nmutation CreateBillingInvoiceItem($object: billing_invoice_item_insert_input!) {\n  insert_billing_invoice_item_one(object: $object) {\n    ...BillingInvoiceItemCore\n  }\n}\n\nmutation CreateBillingInvoiceItems($objects: [billing_invoice_item_insert_input!]!) {\n  insert_billing_invoice_item(objects: $objects) {\n    returning {\n      ...BillingInvoiceItemCore\n    }\n    affected_rows\n  }\n}\n\nmutation UpdateBillingInvoiceItem($id: uuid!, $set: billing_invoice_item_set_input!) {\n  update_billing_invoice_item_by_pk(pk_columns: {id: $id}, _set: $set) {\n    ...BillingInvoiceItemCore\n  }\n}\n\nmutation DeleteBillingInvoiceItem($id: uuid!) {\n  delete_billing_invoice_item_by_pk(id: $id) {\n    id\n  }\n}\n\nmutation CreateClientBillingAssignment($object: client_billing_assignment_insert_input!) {\n  insert_client_billing_assignment_one(object: $object) {\n    ...ClientBillingAssignmentWithRelations\n  }\n}\n\nmutation UpdateClientBillingAssignment($id: uuid!, $set: client_billing_assignment_set_input!) {\n  update_client_billing_assignment_by_pk(pk_columns: {id: $id}, _set: $set) {\n    ...ClientBillingAssignmentWithRelations\n  }\n}\n\nmutation DeactivateClientBillingAssignment($id: uuid!, $end_date: date!) {\n  update_client_billing_assignment_by_pk(\n    pk_columns: {id: $id}\n    _set: {is_active: false, end_date: $end_date}\n  ) {\n    ...ClientBillingAssignmentCore\n  }\n}\n\nmutation DeleteClientBillingAssignment($id: uuid!) {\n  delete_client_billing_assignment_by_pk(id: $id) {\n    id\n  }\n}\n\nmutation BulkCreateInvoices($invoices: [billing_invoice_insert_input!]!) {\n  insert_billing_invoice(objects: $invoices) {\n    affected_rows\n    returning {\n      id\n      total_amount\n    }\n  }\n}\n\nmutation BulkUpdateInvoiceStatus($invoice_ids: [uuid!]!, $status: String!, $user_id: uuid!) {\n  update_billing_invoice(\n    where: {id: {_in: $invoice_ids}}\n    _set: {status: $status}\n  ) {\n    affected_rows\n    returning {\n      ...BillingInvoiceCore\n    }\n  }\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "query GetBillingPlans($where: billing_plan_bool_exp, $order_by: [billing_plan_order_by!], $limit: Int, $offset: Int) {\n  billing_plan(where: $where, order_by: $order_by, limit: $limit, offset: $offset) {\n    ...BillingPlanCore\n  }\n  billing_plan_aggregate(where: $where) {\n    aggregate {\n      count\n    }\n  }\n}\n\nquery GetBillingPlanById($id: uuid!) {\n  billing_plan_by_pk(id: $id) {\n    ...BillingPlanCore\n    client_billing_assignments(where: {is_active: {_eq: true}}) {\n      ...ClientBillingAssignmentWithRelations\n    }\n  }\n}\n\nquery GetBillingInvoices($where: billing_invoice_bool_exp, $order_by: [billing_invoice_order_by!], $limit: Int, $offset: Int) {\n  billing_invoice(\n    where: $where\n    order_by: $order_by\n    limit: $limit\n    offset: $offset\n  ) {\n    ...BillingInvoiceWithItems\n  }\n  billing_invoice_aggregate(where: $where) {\n    aggregate {\n      count\n      sum {\n        total_amount\n      }\n    }\n  }\n}\n\nquery GetBillingInvoiceById($id: uuid!) {\n  billing_invoice_by_pk(id: $id) {\n    ...BillingInvoiceWithItems\n    billing_event_logs(order_by: {created_at: desc}) {\n      ...BillingEventLogWithRelations\n    }\n  }\n}\n\nquery GetInvoicesByClient($client_id: uuid!, $start_date: date, $end_date: date) {\n  billing_invoice(\n    where: {client_id: {_eq: $client_id}, _and: [{billing_period_start: {_gte: $start_date}}, {billing_period_end: {_lte: $end_date}}]}\n    order_by: {issued_date: desc}\n  ) {\n    ...BillingInvoiceWithItems\n  }\n}\n\nquery GetOverdueInvoices($today: date!) {\n  billing_invoice(\n    where: {status: {_neq: \"paid\"}, due_date: {_lt: $today}}\n    order_by: {due_date: asc}\n  ) {\n    ...BillingInvoiceWithItems\n  }\n}\n\nquery GetClientBillingAssignments($where: client_billing_assignment_bool_exp, $order_by: [client_billing_assignment_order_by!]) {\n  client_billing_assignment(where: $where, order_by: $order_by) {\n    ...ClientBillingAssignmentWithRelations\n  }\n}\n\nquery GetActiveClientBillingAssignment($client_id: uuid!, $date: date!) {\n  client_billing_assignment(\n    where: {client_id: {_eq: $client_id}, is_active: {_eq: true}, start_date: {_lte: $date}, _or: [{end_date: {_is_null: true}}, {end_date: {_gte: $date}}]}\n    limit: 1\n  ) {\n    ...ClientBillingAssignmentWithRelations\n  }\n}\n\nquery GetBillingAnalytics($start_date: date!, $end_date: date!) {\n  total_revenue: billing_invoice_aggregate(\n    where: {status: {_eq: \"paid\"}, issued_date: {_gte: $start_date, _lte: $end_date}}\n  ) {\n    aggregate {\n      sum {\n        total_amount\n      }\n      count\n    }\n  }\n  outstanding_revenue: billing_invoice_aggregate(\n    where: {status: {_neq: \"paid\"}, issued_date: {_gte: $start_date, _lte: $end_date}}\n  ) {\n    aggregate {\n      sum {\n        total_amount\n      }\n      count\n    }\n  }\n  revenue_by_client: billing_invoice(\n    where: {issued_date: {_gte: $start_date, _lte: $end_date}}\n  ) {\n    client {\n      id\n      name\n    }\n    total_amount\n    status\n  }\n}"): (typeof documents)["query GetBillingPlans($where: billing_plan_bool_exp, $order_by: [billing_plan_order_by!], $limit: Int, $offset: Int) {\n  billing_plan(where: $where, order_by: $order_by, limit: $limit, offset: $offset) {\n    ...BillingPlanCore\n  }\n  billing_plan_aggregate(where: $where) {\n    aggregate {\n      count\n    }\n  }\n}\n\nquery GetBillingPlanById($id: uuid!) {\n  billing_plan_by_pk(id: $id) {\n    ...BillingPlanCore\n    client_billing_assignments(where: {is_active: {_eq: true}}) {\n      ...ClientBillingAssignmentWithRelations\n    }\n  }\n}\n\nquery GetBillingInvoices($where: billing_invoice_bool_exp, $order_by: [billing_invoice_order_by!], $limit: Int, $offset: Int) {\n  billing_invoice(\n    where: $where\n    order_by: $order_by\n    limit: $limit\n    offset: $offset\n  ) {\n    ...BillingInvoiceWithItems\n  }\n  billing_invoice_aggregate(where: $where) {\n    aggregate {\n      count\n      sum {\n        total_amount\n      }\n    }\n  }\n}\n\nquery GetBillingInvoiceById($id: uuid!) {\n  billing_invoice_by_pk(id: $id) {\n    ...BillingInvoiceWithItems\n    billing_event_logs(order_by: {created_at: desc}) {\n      ...BillingEventLogWithRelations\n    }\n  }\n}\n\nquery GetInvoicesByClient($client_id: uuid!, $start_date: date, $end_date: date) {\n  billing_invoice(\n    where: {client_id: {_eq: $client_id}, _and: [{billing_period_start: {_gte: $start_date}}, {billing_period_end: {_lte: $end_date}}]}\n    order_by: {issued_date: desc}\n  ) {\n    ...BillingInvoiceWithItems\n  }\n}\n\nquery GetOverdueInvoices($today: date!) {\n  billing_invoice(\n    where: {status: {_neq: \"paid\"}, due_date: {_lt: $today}}\n    order_by: {due_date: asc}\n  ) {\n    ...BillingInvoiceWithItems\n  }\n}\n\nquery GetClientBillingAssignments($where: client_billing_assignment_bool_exp, $order_by: [client_billing_assignment_order_by!]) {\n  client_billing_assignment(where: $where, order_by: $order_by) {\n    ...ClientBillingAssignmentWithRelations\n  }\n}\n\nquery GetActiveClientBillingAssignment($client_id: uuid!, $date: date!) {\n  client_billing_assignment(\n    where: {client_id: {_eq: $client_id}, is_active: {_eq: true}, start_date: {_lte: $date}, _or: [{end_date: {_is_null: true}}, {end_date: {_gte: $date}}]}\n    limit: 1\n  ) {\n    ...ClientBillingAssignmentWithRelations\n  }\n}\n\nquery GetBillingAnalytics($start_date: date!, $end_date: date!) {\n  total_revenue: billing_invoice_aggregate(\n    where: {status: {_eq: \"paid\"}, issued_date: {_gte: $start_date, _lte: $end_date}}\n  ) {\n    aggregate {\n      sum {\n        total_amount\n      }\n      count\n    }\n  }\n  outstanding_revenue: billing_invoice_aggregate(\n    where: {status: {_neq: \"paid\"}, issued_date: {_gte: $start_date, _lte: $end_date}}\n  ) {\n    aggregate {\n      sum {\n        total_amount\n      }\n      count\n    }\n  }\n  revenue_by_client: billing_invoice(\n    where: {issued_date: {_gte: $start_date, _lte: $end_date}}\n  ) {\n    client {\n      id\n      name\n    }\n    total_amount\n    status\n  }\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "subscription SubscribeToBillingInvoices($client_id: uuid) {\n  billing_invoice(\n    where: {client_id: {_eq: $client_id}}\n    order_by: {updated_at: desc}\n  ) {\n    ...BillingInvoiceWithItems\n  }\n}\n\nsubscription SubscribeToInvoiceStatus($invoice_id: uuid!) {\n  billing_invoice_by_pk(id: $invoice_id) {\n    id\n    status\n    updated_at\n    billing_event_logs(order_by: {created_at: desc}, limit: 5) {\n      ...BillingEventLogWithRelations\n    }\n  }\n}\n\nsubscription SubscribeToClientBillingAssignments($client_id: uuid!) {\n  client_billing_assignment(\n    where: {client_id: {_eq: $client_id}}\n    order_by: {created_at: desc}\n  ) {\n    ...ClientBillingAssignmentWithRelations\n  }\n}\n\nsubscription SubscribeToBillingPlans {\n  billing_plan(order_by: {updated_at: desc}) {\n    ...BillingPlanCore\n  }\n}"): (typeof documents)["subscription SubscribeToBillingInvoices($client_id: uuid) {\n  billing_invoice(\n    where: {client_id: {_eq: $client_id}}\n    order_by: {updated_at: desc}\n  ) {\n    ...BillingInvoiceWithItems\n  }\n}\n\nsubscription SubscribeToInvoiceStatus($invoice_id: uuid!) {\n  billing_invoice_by_pk(id: $invoice_id) {\n    id\n    status\n    updated_at\n    billing_event_logs(order_by: {created_at: desc}, limit: 5) {\n      ...BillingEventLogWithRelations\n    }\n  }\n}\n\nsubscription SubscribeToClientBillingAssignments($client_id: uuid!) {\n  client_billing_assignment(\n    where: {client_id: {_eq: $client_id}}\n    order_by: {created_at: desc}\n  ) {\n    ...ClientBillingAssignmentWithRelations\n  }\n}\n\nsubscription SubscribeToBillingPlans {\n  billing_plan(order_by: {updated_at: desc}) {\n    ...BillingPlanCore\n  }\n}"];

export function graphql(source: string) {
  return (documents as any)[source] ?? {};
}

export type DocumentType<TDocumentNode extends DocumentNode<any, any>> = TDocumentNode extends DocumentNode<  infer TType,  any>  ? TType  : never;