# Permissions Domain Mutations

# Resources
mutation CreateSystemResource($object: resourcesInsertInput!) {
  insertResource(object: $object) {
    ...ResourceCore
  }
}

mutation UpdateSystemResource($id: uuid!, $set: resourcesSetInput!) {
  updateResourceById(pkColumns: { id: $id }, _set: $set) {
    ...ResourceCore
  }
}

mutation DeleteSystemResource($id: uuid!) {
  deleteResourceById(id: $id) {
    id
    name
  }
}

# Permissions
mutation CreateSystemPermission($object: permissionsInsertInput!) {
  insertPermission(object: $object) {
    ...PermissionCore
  }
}

mutation UpdateSystemPermission($id: uuid!, $set: permissionsSetInput!) {
  updatePermissionById(pkColumns: { id: $id }, _set: $set) {
    ...PermissionCore
  }
}

mutation DeleteSystemPermission($id: uuid!) {
  deletePermissionById(id: $id) {
    id
    action
  }
}

# Roles
mutation CreateSystemRole($object: rolesInsertInput!) {
  insertRole(object: $object) {
    ...RoleCore
  }
}

mutation UpdateSystemRole($id: uuid!, $set: rolesSetInput!) {
  updateRoleById(pkColumns: { id: $id }, _set: $set) {
    ...RoleCore
  }
}

mutation DeleteSystemRole($id: uuid!) {
  deleteRoleById(id: $id) {
    id
    name
  }
}

# Role Permissions
mutation AssignPermissionToRole($object: rolePermissionsInsertInput!) {
  insertRolePermission(object: $object) {
    ...RolePermissionWithDetails
  }
}

mutation RemovePermissionFromRole($id: uuid!) {
  deleteRolePermissionById(id: $id) {
    id
    roleId
    permissionId
  }
}

mutation UpdateSystemRolePermission($id: uuid!, $set: rolePermissionsSetInput!) {
  updateRolePermissionById(pkColumns: { id: $id }, _set: $set) {
    ...RolePermissionWithDetails
  }
}

# User Roles
mutation AssignSystemRoleToUser($object: userRolesInsertInput!) {
  insertUserRole(object: $object) {
    ...UserRoleWithDetails
  }
}

mutation RemoveSystemRoleFromUser($id: uuid!) {
  deleteUserRoleById(id: $id) {
    id
    userId
    roleId
  }
}

mutation UpdateSystemUserRole($id: uuid!, $set: userRolesSetInput!) {
  updateUserRoleById(pkColumns: { id: $id }, _set: $set) {
    ...UserRoleWithDetails
  }
}

# Feature Flags
mutation CreateFeatureFlag($object: featureFlagsInsertInput!) {
  insertFeatureFlag(object: $object) {
    ...FeatureFlagCore
  }
}

mutation UpdateFeatureFlag($id: uuid!, $set: featureFlagsSetInput!) {
  updateFeatureFlagById(pkColumns: { id: $id }, _set: $set) {
    ...FeatureFlagCore
  }
}

mutation DeleteFeatureFlag($id: uuid!) {
  deleteFeatureFlagById(id: $id) {
    id
    featureName
  }
}

# App Settings
mutation UpdateAppSettings($id: String!, $permissions: jsonb!) {
  updateAppSettingById(
    pkColumns: { id: $id }
    _set: { permissions: $permissions }
  ) {
    ...AppSettingsCore
  }
}

# Enhanced Permission Override Management

# Grant specific permission to user
mutation GrantUserPermission(
  $userId: uuid!
  $resource: String!
  $operation: String!
  $reason: String!
  $expiresAt: timestamptz
  $conditions: jsonb
) {
  insertPermissionOverride(
    object: {
      userId: $userId
      resource: $resource
      operation: $operation
      granted: true
      reason: $reason
      expiresAt: $expiresAt
      conditions: $conditions
    }
  ) {
    id
    userId
    resource
    operation
    granted
    reason
    expiresAt
    conditions
    createdAt
    createdBy
    targetUser {
      id
      name
      email
    }
    createdByUser {
      id
      name
      email
    }
  }
}

# Restrict specific permission from user
mutation RestrictUserPermission(
  $userId: uuid!
  $resource: String!
  $operation: String!
  $reason: String!
  $expiresAt: timestamptz
  $conditions: jsonb
) {
  insertPermissionOverride(
    object: {
      userId: $userId
      resource: $resource
      operation: $operation
      granted: false
      reason: $reason
      expiresAt: $expiresAt
      conditions: $conditions
    }
  ) {
    id
    userId
    resource
    operation
    granted
    reason
    expiresAt
    conditions
    createdAt
    createdBy
    targetUser {
      id
      name
      email
    }
    createdByUser {
      id
      name
      email
    }
  }
}

# Grant permission to entire role
mutation GrantRolePermission(
  $role: String!
  $resource: String!
  $operation: String!
  $reason: String!
  $expiresAt: timestamptz
  $conditions: jsonb
) {
  insertPermissionOverride(
    object: {
      role: $role
      resource: $resource
      operation: $operation
      granted: true
      reason: $reason
      expiresAt: $expiresAt
      conditions: $conditions
    }
  ) {
    id
    role
    resource
    operation
    granted
    reason
    expiresAt
    conditions
    createdAt
    createdBy
    createdByUser {
      id
      name
      email
    }
  }
}

# Restrict permission from entire role
mutation RestrictRolePermission(
  $role: String!
  $resource: String!
  $operation: String!
  $reason: String!
  $expiresAt: timestamptz
  $conditions: jsonb
) {
  insertPermissionOverride(
    object: {
      role: $role
      resource: $resource
      operation: $operation
      granted: false
      reason: $reason
      expiresAt: $expiresAt
      conditions: $conditions
    }
  ) {
    id
    role
    resource
    operation
    granted
    reason
    expiresAt
    conditions
    createdAt
    createdBy
    createdByUser {
      id
      name
      email
    }
  }
}

# Update permission override
mutation UpdatePermissionOverride(
  $id: uuid!
  $reason: String
  $expiresAt: timestamptz
  $conditions: jsonb
) {
  updatePermissionOverrideById(
    pkColumns: { id: $id }
    _set: {
      reason: $reason
      expiresAt: $expiresAt
      conditions: $conditions
      updatedAt: "now()"
    }
  ) {
    id
    userId
    role
    resource
    operation
    granted
    reason
    expiresAt
    conditions
    createdAt
    updatedAt
    createdBy
    targetUser {
      id
      name
      email
    }
    createdByUser {
      id
      name
      email
    }
  }
}

# Remove permission override
mutation RemovePermissionOverride($id: uuid!) {
  deletePermissionOverrideById(id: $id) {
    id
    userId
    role
    resource
    operation
    granted
    reason
  }
}

# Bulk grant permissions to user
mutation BulkGrantUserPermissions(
  $objects: [permissionOverridesInsertInput!]!
) {
  bulkInsertPermissionOverrides(objects: $objects) {
    returning {
      id
      userId
      resource
      operation
      granted
      reason
      expiresAt
      createdAt
    }
    affectedRows
  }
}

# Bulk remove permission overrides
mutation BulkRemovePermissionOverrides(
  $where: permissionOverridesBoolExp!
) {
  bulkDeletePermissionOverrides(where: $where) {
    returning {
      id
      userId
      role
      resource
      operation
    }
    affectedRows
  }
}

# Extend permission expiration
mutation ExtendPermissionExpiration(
  $id: uuid!
  $newExpiresAt: timestamptz!
  $reason: String!
) {
  updatePermissionOverrideById(
    pkColumns: { id: $id }
    _set: { 
      expiresAt: $newExpiresAt
      reason: $reason
      updatedAt: "now()"
    }
  ) {
    id
    userId
    role
    resource
    operation
    granted
    expiresAt
    reason
    updatedAt
  }
}

# Revoke expired permissions (cleanup)
mutation RevokeExpiredPermissions {
  bulkDeletePermissionOverrides(
    where: { expiresAt: { _lte: "now()" } }
  ) {
    returning {
      id
      userId
      role
      resource
      operation
      expiresAt
    }
    affectedRows
  }
}
