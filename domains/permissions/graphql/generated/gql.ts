/* eslint-disable */
import * as types from './graphql';
import type { TypedDocumentNode as DocumentNode } from '@graphql-typed-document-node/core';

/**
 * Map of all GraphQL operations in the project.
 *
 * This map has several performance disadvantages:
 * 1. It is not tree-shakeable, so it will include all operations in the project.
 * 2. It is not minifiable, so the string of a GraphQL query will be multiple times inside the bundle.
 * 3. It does not support dead code elimination, so it will add unused operations.
 *
 * Therefore it is highly recommended to use the babel or swc plugin for production.
 * Learn more about it here: https://the-guild.dev/graphql/codegen/plugins/presets/preset-client#reducing-bundle-size
 */
type Documents = {
    "fragment PermissionsPermissionWithResource on permissions {\n  ...PermissionCore\n  legacy_permission_name\n  resource {\n    ...ResourceCore\n  }\n}\n\nfragment RoleWithPermissions on roles {\n  ...RoleCore\n  rolePermissions {\n    id\n    conditions\n    permission {\n      ...PermissionsPermissionWithResource\n    }\n  }\n  rolePermissions_aggregate {\n    aggregate {\n      count\n    }\n  }\n}\n\nfragment RolePermissionWithDetails on role_permissions {\n  ...RolePermissionCore\n  role {\n    ...RoleCore\n  }\n  permission {\n    ...PermissionsPermissionWithResource\n  }\n}\n\nfragment UserRoleWithDetails on user_roles {\n  ...UserRoleCore\n  role {\n    ...RoleWithPermissions\n  }\n  user {\n    id\n    name\n    email\n    isStaff\n    isActive\n  }\n}\n\nfragment FeatureFlagCore on feature_flags {\n  id\n  feature_name\n  is_enabled\n  allowed_roles\n}\n\nfragment AppSettingsCore on app_settings {\n  id\n  permissions\n}": typeof types.PermissionsPermissionWithResourceFragmentDoc,
    "mutation CreateResource($object: resources_insert_input!) {\n  insertResource(object: $object) {\n    ...ResourceCore\n  }\n}\n\nmutation UpdateResource($id: uuid!, $set: resources_set_input!) {\n  updateResource(pk_columns: {id: $id}, _set: $set) {\n    ...ResourceCore\n  }\n}\n\nmutation DeleteResource($id: uuid!) {\n  deleteResource(id: $id) {\n    id\n  }\n}\n\nmutation CreatePermission($object: permissions_insert_input!) {\n  insertPermission(object: $object) {\n    ...PermissionCore\n  }\n}\n\nmutation UpdatePermission($id: uuid!, $set: permissions_set_input!) {\n  updatePermission(pk_columns: {id: $id}, _set: $set) {\n    ...PermissionCore\n  }\n}\n\nmutation DeletePermission($id: uuid!) {\n  deletePermission(id: $id) {\n    id\n  }\n}\n\nmutation CreateRole($object: roles_insert_input!) {\n  insertRole(object: $object) {\n    ...RoleCore\n  }\n}\n\nmutation UpdateRole($id: uuid!, $set: roles_set_input!) {\n  updateRole(pk_columns: {id: $id}, _set: $set) {\n    ...RoleCore\n  }\n}\n\nmutation DeleteRole($id: uuid!) {\n  deleteRole(id: $id) {\n    id\n  }\n}\n\nmutation AssignPermissionToRole($object: role_permissions_insert_input!) {\n  insertRolePermission(object: $object) {\n    ...RolePermissionCore\n  }\n}\n\nmutation RemovePermissionFromRole($roleId: uuid!, $permissionId: uuid!) {\n  deleteRolePermissions(\n    where: {roleId: {_eq: $roleId}, permissionId: {_eq: $permissionId}}\n  ) {\n    affected_rows\n  }\n}\n\nmutation UpdateRolePermission($id: uuid!, $set: role_permissions_set_input!) {\n  updateRolePermission(pk_columns: {id: $id}, _set: $set) {\n    ...RolePermissionCore\n  }\n}\n\nmutation AssignRoleToUser($userId: uuid!, $roleId: uuid!) {\n  insertUserRole(object: {userId: $userId, roleId: $roleId}) {\n    ...UserRoleWithDetails\n  }\n}\n\nmutation RemoveRoleFromUser($userId: uuid!, $roleId: uuid!) {\n  deleteUserRoles(where: {userId: {_eq: $userId}, roleId: {_eq: $roleId}}) {\n    affected_rows\n  }\n}\n\nmutation RemoveAllRolesFromUser($userId: uuid!) {\n  deleteUserRoles(where: {userId: {_eq: $userId}}) {\n    affected_rows\n  }\n}\n\nmutation ReplaceUserRoles($userId: uuid!, $objects: [user_roles_insert_input!]!) {\n  deleteUserRoles(where: {userId: {_eq: $userId}}) {\n    affected_rows\n  }\n  insertUserRoles(objects: $objects) {\n    returning {\n      ...UserRoleWithDetails\n    }\n  }\n}\n\nmutation CreateFeatureFlag($object: feature_flags_insert_input!) {\n  insert_feature_flags_one(object: $object) {\n    ...FeatureFlagCore\n  }\n}\n\nmutation UpdateFeatureFlag($id: uuid!, $set: feature_flags_set_input!) {\n  update_feature_flags_by_pk(pk_columns: {id: $id}, _set: $set) {\n    ...FeatureFlagCore\n  }\n}\n\nmutation ToggleFeatureFlag($id: uuid!, $is_enabled: Boolean!) {\n  update_feature_flags_by_pk(\n    pk_columns: {id: $id}\n    _set: {is_enabled: $is_enabled}\n  ) {\n    ...FeatureFlagCore\n  }\n}\n\nmutation DeleteFeatureFlag($id: uuid!) {\n  delete_feature_flags_by_pk(id: $id) {\n    id\n  }\n}\n\nmutation UpdateAppSettings($id: String!, $permissions: jsonb!) {\n  update_app_settings_by_pk(\n    pk_columns: {id: $id}\n    _set: {permissions: $permissions}\n  ) {\n    ...AppSettingsCore\n  }\n}": typeof types.CreateResourceDocument,
    "query GetResources($where: resources_bool_exp, $order_by: [resources_order_by!]) {\n  resources(where: $where, order_by: $order_by) {\n    ...ResourceCore\n    permissions {\n      ...PermissionCore\n    }\n  }\n}\n\nquery GetResourceById($id: uuid!) {\n  resource(id: $id) {\n    ...ResourceCore\n    permissions(order_by: {action: asc}) {\n      ...PermissionCore\n    }\n  }\n}\n\nquery GetPermissions($where: permissions_bool_exp, $order_by: [permissions_order_by!]) {\n  permissions(where: $where, order_by: $order_by) {\n    ...PermissionsPermissionWithResource\n  }\n}\n\nquery GetPermissionsByResource($resource_name: String!) {\n  permissions(\n    where: {resource: {name: {_eq: $resource_name}}}\n    order_by: {action: asc}\n  ) {\n    ...PermissionCore\n  }\n}\n\nquery GetRoles($where: roles_bool_exp, $order_by: [roles_order_by!]) {\n  roles(where: $where, order_by: $order_by) {\n    ...RoleWithPermissions\n    userRoles_aggregate {\n      aggregate {\n        count\n      }\n    }\n  }\n}\n\nquery GetRoleById($id: uuid!) {\n  role(id: $id) {\n    ...RoleWithPermissions\n    userRoles {\n      ...UserRoleWithDetails\n    }\n  }\n}\n\nquery GetSystemRoles {\n  roles(where: {isSystemRole: {_eq: true}}, order_by: {priority: asc}) {\n    ...RoleCore\n  }\n}\n\nquery GetUserRoles($userId: uuid!) {\n  userRoles(where: {userId: {_eq: $userId}}) {\n    ...UserRoleWithDetails\n  }\n}\n\nquery GetUsersWithRole($roleId: uuid!) {\n  userRoles(where: {roleId: {_eq: $roleId}}) {\n    ...UserRoleWithDetails\n  }\n}\n\nquery GetFeatureFlags($where: feature_flags_bool_exp) {\n  feature_flags(where: $where, order_by: {feature_name: asc}) {\n    ...FeatureFlagCore\n  }\n}\n\nquery GetEnabledFeatures($roles: jsonb!) {\n  feature_flags(\n    where: {is_enabled: {_eq: true}, _or: [{allowed_roles: {_eq: []}}, {allowed_roles: {_contains: $roles}}]}\n  ) {\n    ...FeatureFlagCore\n  }\n}\n\nquery GetAppSettings {\n  app_settings {\n    ...AppSettingsCore\n  }\n}\n\nquery GetPermissionAnalytics {\n  roles_count: rolesAggregate {\n    aggregate {\n      count\n    }\n  }\n  permissions_count: permissionsAggregate {\n    aggregate {\n      count\n    }\n  }\n  resources_count: resourcesAggregate {\n    aggregate {\n      count\n    }\n  }\n  user_roles_count: userRolesAggregate {\n    aggregate {\n      count\n    }\n  }\n  roles_by_priority: roles(order_by: {priority: asc}) {\n    name\n    displayName\n    priority\n    userRoles_aggregate {\n      aggregate {\n        count\n      }\n    }\n  }\n}": typeof types.GetResourcesDocument,
    "subscription RolesUpdated {\n  roles(order_by: {updatedAt: desc}) {\n    ...RoleCore\n  }\n}\n\nsubscription UserRolesUpdated($userId: uuid!) {\n  userRoles(where: {userId: {_eq: $userId}}) {\n    ...UserRoleWithDetails\n  }\n}\n\nsubscription RolePermissionsUpdated($roleId: uuid!) {\n  rolePermissions(where: {roleId: {_eq: $roleId}}) {\n    ...RolePermissionWithDetails\n  }\n}\n\nsubscription PermissionsUpdated {\n  permissions(order_by: {updatedAt: desc}) {\n    ...PermissionsPermissionWithResource\n  }\n}\n\nsubscription ResourcesUpdated {\n  resources(order_by: {updatedAt: desc}) {\n    ...ResourceCore\n  }\n}": typeof types.RolesUpdatedDocument,
    "fragment UserCore on users {\n  id\n  name\n  email\n  username\n  role\n  isActive\n  isStaff\n  clerkUserId\n  createdAt\n  updatedAt\n}\n\nfragment UserBasic on users {\n  id\n  name\n  email\n  role\n  isActive\n}\n\nfragment UserWithManager on users {\n  ...UserCore\n  managerId\n  manager {\n    ...UserBasic\n  }\n}\n\nfragment RoleCore on roles {\n  id\n  name\n  description\n  displayName\n  priority\n  isSystemRole\n  createdAt\n}\n\nfragment PermissionCore on permissions {\n  id\n  action\n  description\n  resourceId\n  createdAt\n  updatedAt\n}\n\nfragment PermissionWithResource on permissions {\n  ...PermissionCore\n  resource {\n    id\n    name\n    description\n  }\n}\n\nfragment ClientCore on clients {\n  id\n  name\n  contactEmail\n  contactPerson\n  contactPhone\n  active\n  createdAt\n  updatedAt\n}\n\nfragment ClientBasic on clients {\n  id\n  name\n  active\n}\n\nfragment PayrollCore on payrolls {\n  id\n  name\n  status\n  clientId\n  primaryConsultantUserId\n  managerUserId\n  createdAt\n  updatedAt\n}\n\nfragment PayrollBasic on payrolls {\n  id\n  name\n  status\n  clientId\n}\n\nfragment ResourceCore on resources {\n  id\n  name\n  displayName\n  description\n  createdAt\n  updatedAt\n}\n\nfragment UserRoleCore on user_roles {\n  id\n  userId\n  roleId\n  createdAt\n  updatedAt\n}\n\nfragment RolePermissionCore on role_permissions {\n  id\n  roleId\n  permissionId\n  conditions\n  createdAt\n  updatedAt\n}\n\nfragment AuditFields on audit_audit_log {\n  id\n  eventTime\n  action\n  resourceType\n  resourceId\n  userId\n  ipAddress\n  userAgent\n  success\n  userEmail\n  userRole\n}": typeof types.UserCoreFragmentDoc,
};
const documents: Documents = {
    "fragment PermissionsPermissionWithResource on permissions {\n  ...PermissionCore\n  legacy_permission_name\n  resource {\n    ...ResourceCore\n  }\n}\n\nfragment RoleWithPermissions on roles {\n  ...RoleCore\n  rolePermissions {\n    id\n    conditions\n    permission {\n      ...PermissionsPermissionWithResource\n    }\n  }\n  rolePermissions_aggregate {\n    aggregate {\n      count\n    }\n  }\n}\n\nfragment RolePermissionWithDetails on role_permissions {\n  ...RolePermissionCore\n  role {\n    ...RoleCore\n  }\n  permission {\n    ...PermissionsPermissionWithResource\n  }\n}\n\nfragment UserRoleWithDetails on user_roles {\n  ...UserRoleCore\n  role {\n    ...RoleWithPermissions\n  }\n  user {\n    id\n    name\n    email\n    isStaff\n    isActive\n  }\n}\n\nfragment FeatureFlagCore on feature_flags {\n  id\n  feature_name\n  is_enabled\n  allowed_roles\n}\n\nfragment AppSettingsCore on app_settings {\n  id\n  permissions\n}": types.PermissionsPermissionWithResourceFragmentDoc,
    "mutation CreateResource($object: resources_insert_input!) {\n  insertResource(object: $object) {\n    ...ResourceCore\n  }\n}\n\nmutation UpdateResource($id: uuid!, $set: resources_set_input!) {\n  updateResource(pk_columns: {id: $id}, _set: $set) {\n    ...ResourceCore\n  }\n}\n\nmutation DeleteResource($id: uuid!) {\n  deleteResource(id: $id) {\n    id\n  }\n}\n\nmutation CreatePermission($object: permissions_insert_input!) {\n  insertPermission(object: $object) {\n    ...PermissionCore\n  }\n}\n\nmutation UpdatePermission($id: uuid!, $set: permissions_set_input!) {\n  updatePermission(pk_columns: {id: $id}, _set: $set) {\n    ...PermissionCore\n  }\n}\n\nmutation DeletePermission($id: uuid!) {\n  deletePermission(id: $id) {\n    id\n  }\n}\n\nmutation CreateRole($object: roles_insert_input!) {\n  insertRole(object: $object) {\n    ...RoleCore\n  }\n}\n\nmutation UpdateRole($id: uuid!, $set: roles_set_input!) {\n  updateRole(pk_columns: {id: $id}, _set: $set) {\n    ...RoleCore\n  }\n}\n\nmutation DeleteRole($id: uuid!) {\n  deleteRole(id: $id) {\n    id\n  }\n}\n\nmutation AssignPermissionToRole($object: role_permissions_insert_input!) {\n  insertRolePermission(object: $object) {\n    ...RolePermissionCore\n  }\n}\n\nmutation RemovePermissionFromRole($roleId: uuid!, $permissionId: uuid!) {\n  deleteRolePermissions(\n    where: {roleId: {_eq: $roleId}, permissionId: {_eq: $permissionId}}\n  ) {\n    affected_rows\n  }\n}\n\nmutation UpdateRolePermission($id: uuid!, $set: role_permissions_set_input!) {\n  updateRolePermission(pk_columns: {id: $id}, _set: $set) {\n    ...RolePermissionCore\n  }\n}\n\nmutation AssignRoleToUser($userId: uuid!, $roleId: uuid!) {\n  insertUserRole(object: {userId: $userId, roleId: $roleId}) {\n    ...UserRoleWithDetails\n  }\n}\n\nmutation RemoveRoleFromUser($userId: uuid!, $roleId: uuid!) {\n  deleteUserRoles(where: {userId: {_eq: $userId}, roleId: {_eq: $roleId}}) {\n    affected_rows\n  }\n}\n\nmutation RemoveAllRolesFromUser($userId: uuid!) {\n  deleteUserRoles(where: {userId: {_eq: $userId}}) {\n    affected_rows\n  }\n}\n\nmutation ReplaceUserRoles($userId: uuid!, $objects: [user_roles_insert_input!]!) {\n  deleteUserRoles(where: {userId: {_eq: $userId}}) {\n    affected_rows\n  }\n  insertUserRoles(objects: $objects) {\n    returning {\n      ...UserRoleWithDetails\n    }\n  }\n}\n\nmutation CreateFeatureFlag($object: feature_flags_insert_input!) {\n  insert_feature_flags_one(object: $object) {\n    ...FeatureFlagCore\n  }\n}\n\nmutation UpdateFeatureFlag($id: uuid!, $set: feature_flags_set_input!) {\n  update_feature_flags_by_pk(pk_columns: {id: $id}, _set: $set) {\n    ...FeatureFlagCore\n  }\n}\n\nmutation ToggleFeatureFlag($id: uuid!, $is_enabled: Boolean!) {\n  update_feature_flags_by_pk(\n    pk_columns: {id: $id}\n    _set: {is_enabled: $is_enabled}\n  ) {\n    ...FeatureFlagCore\n  }\n}\n\nmutation DeleteFeatureFlag($id: uuid!) {\n  delete_feature_flags_by_pk(id: $id) {\n    id\n  }\n}\n\nmutation UpdateAppSettings($id: String!, $permissions: jsonb!) {\n  update_app_settings_by_pk(\n    pk_columns: {id: $id}\n    _set: {permissions: $permissions}\n  ) {\n    ...AppSettingsCore\n  }\n}": types.CreateResourceDocument,
    "query GetResources($where: resources_bool_exp, $order_by: [resources_order_by!]) {\n  resources(where: $where, order_by: $order_by) {\n    ...ResourceCore\n    permissions {\n      ...PermissionCore\n    }\n  }\n}\n\nquery GetResourceById($id: uuid!) {\n  resource(id: $id) {\n    ...ResourceCore\n    permissions(order_by: {action: asc}) {\n      ...PermissionCore\n    }\n  }\n}\n\nquery GetPermissions($where: permissions_bool_exp, $order_by: [permissions_order_by!]) {\n  permissions(where: $where, order_by: $order_by) {\n    ...PermissionsPermissionWithResource\n  }\n}\n\nquery GetPermissionsByResource($resource_name: String!) {\n  permissions(\n    where: {resource: {name: {_eq: $resource_name}}}\n    order_by: {action: asc}\n  ) {\n    ...PermissionCore\n  }\n}\n\nquery GetRoles($where: roles_bool_exp, $order_by: [roles_order_by!]) {\n  roles(where: $where, order_by: $order_by) {\n    ...RoleWithPermissions\n    userRoles_aggregate {\n      aggregate {\n        count\n      }\n    }\n  }\n}\n\nquery GetRoleById($id: uuid!) {\n  role(id: $id) {\n    ...RoleWithPermissions\n    userRoles {\n      ...UserRoleWithDetails\n    }\n  }\n}\n\nquery GetSystemRoles {\n  roles(where: {isSystemRole: {_eq: true}}, order_by: {priority: asc}) {\n    ...RoleCore\n  }\n}\n\nquery GetUserRoles($userId: uuid!) {\n  userRoles(where: {userId: {_eq: $userId}}) {\n    ...UserRoleWithDetails\n  }\n}\n\nquery GetUsersWithRole($roleId: uuid!) {\n  userRoles(where: {roleId: {_eq: $roleId}}) {\n    ...UserRoleWithDetails\n  }\n}\n\nquery GetFeatureFlags($where: feature_flags_bool_exp) {\n  feature_flags(where: $where, order_by: {feature_name: asc}) {\n    ...FeatureFlagCore\n  }\n}\n\nquery GetEnabledFeatures($roles: jsonb!) {\n  feature_flags(\n    where: {is_enabled: {_eq: true}, _or: [{allowed_roles: {_eq: []}}, {allowed_roles: {_contains: $roles}}]}\n  ) {\n    ...FeatureFlagCore\n  }\n}\n\nquery GetAppSettings {\n  app_settings {\n    ...AppSettingsCore\n  }\n}\n\nquery GetPermissionAnalytics {\n  roles_count: rolesAggregate {\n    aggregate {\n      count\n    }\n  }\n  permissions_count: permissionsAggregate {\n    aggregate {\n      count\n    }\n  }\n  resources_count: resourcesAggregate {\n    aggregate {\n      count\n    }\n  }\n  user_roles_count: userRolesAggregate {\n    aggregate {\n      count\n    }\n  }\n  roles_by_priority: roles(order_by: {priority: asc}) {\n    name\n    displayName\n    priority\n    userRoles_aggregate {\n      aggregate {\n        count\n      }\n    }\n  }\n}": types.GetResourcesDocument,
    "subscription RolesUpdated {\n  roles(order_by: {updatedAt: desc}) {\n    ...RoleCore\n  }\n}\n\nsubscription UserRolesUpdated($userId: uuid!) {\n  userRoles(where: {userId: {_eq: $userId}}) {\n    ...UserRoleWithDetails\n  }\n}\n\nsubscription RolePermissionsUpdated($roleId: uuid!) {\n  rolePermissions(where: {roleId: {_eq: $roleId}}) {\n    ...RolePermissionWithDetails\n  }\n}\n\nsubscription PermissionsUpdated {\n  permissions(order_by: {updatedAt: desc}) {\n    ...PermissionsPermissionWithResource\n  }\n}\n\nsubscription ResourcesUpdated {\n  resources(order_by: {updatedAt: desc}) {\n    ...ResourceCore\n  }\n}": types.RolesUpdatedDocument,
    "fragment UserCore on users {\n  id\n  name\n  email\n  username\n  role\n  isActive\n  isStaff\n  clerkUserId\n  createdAt\n  updatedAt\n}\n\nfragment UserBasic on users {\n  id\n  name\n  email\n  role\n  isActive\n}\n\nfragment UserWithManager on users {\n  ...UserCore\n  managerId\n  manager {\n    ...UserBasic\n  }\n}\n\nfragment RoleCore on roles {\n  id\n  name\n  description\n  displayName\n  priority\n  isSystemRole\n  createdAt\n}\n\nfragment PermissionCore on permissions {\n  id\n  action\n  description\n  resourceId\n  createdAt\n  updatedAt\n}\n\nfragment PermissionWithResource on permissions {\n  ...PermissionCore\n  resource {\n    id\n    name\n    description\n  }\n}\n\nfragment ClientCore on clients {\n  id\n  name\n  contactEmail\n  contactPerson\n  contactPhone\n  active\n  createdAt\n  updatedAt\n}\n\nfragment ClientBasic on clients {\n  id\n  name\n  active\n}\n\nfragment PayrollCore on payrolls {\n  id\n  name\n  status\n  clientId\n  primaryConsultantUserId\n  managerUserId\n  createdAt\n  updatedAt\n}\n\nfragment PayrollBasic on payrolls {\n  id\n  name\n  status\n  clientId\n}\n\nfragment ResourceCore on resources {\n  id\n  name\n  displayName\n  description\n  createdAt\n  updatedAt\n}\n\nfragment UserRoleCore on user_roles {\n  id\n  userId\n  roleId\n  createdAt\n  updatedAt\n}\n\nfragment RolePermissionCore on role_permissions {\n  id\n  roleId\n  permissionId\n  conditions\n  createdAt\n  updatedAt\n}\n\nfragment AuditFields on audit_audit_log {\n  id\n  eventTime\n  action\n  resourceType\n  resourceId\n  userId\n  ipAddress\n  userAgent\n  success\n  userEmail\n  userRole\n}": types.UserCoreFragmentDoc,
};

/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 *
 *
 * @example
 * ```ts
 * const query = graphql(`query GetUser($id: ID!) { user(id: $id) { name } }`);
 * ```
 *
 * The query argument is unknown!
 * Please regenerate the types.
 */
export function graphql(source: string): unknown;

/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "fragment PermissionsPermissionWithResource on permissions {\n  ...PermissionCore\n  legacy_permission_name\n  resource {\n    ...ResourceCore\n  }\n}\n\nfragment RoleWithPermissions on roles {\n  ...RoleCore\n  rolePermissions {\n    id\n    conditions\n    permission {\n      ...PermissionsPermissionWithResource\n    }\n  }\n  rolePermissions_aggregate {\n    aggregate {\n      count\n    }\n  }\n}\n\nfragment RolePermissionWithDetails on role_permissions {\n  ...RolePermissionCore\n  role {\n    ...RoleCore\n  }\n  permission {\n    ...PermissionsPermissionWithResource\n  }\n}\n\nfragment UserRoleWithDetails on user_roles {\n  ...UserRoleCore\n  role {\n    ...RoleWithPermissions\n  }\n  user {\n    id\n    name\n    email\n    isStaff\n    isActive\n  }\n}\n\nfragment FeatureFlagCore on feature_flags {\n  id\n  feature_name\n  is_enabled\n  allowed_roles\n}\n\nfragment AppSettingsCore on app_settings {\n  id\n  permissions\n}"): (typeof documents)["fragment PermissionsPermissionWithResource on permissions {\n  ...PermissionCore\n  legacy_permission_name\n  resource {\n    ...ResourceCore\n  }\n}\n\nfragment RoleWithPermissions on roles {\n  ...RoleCore\n  rolePermissions {\n    id\n    conditions\n    permission {\n      ...PermissionsPermissionWithResource\n    }\n  }\n  rolePermissions_aggregate {\n    aggregate {\n      count\n    }\n  }\n}\n\nfragment RolePermissionWithDetails on role_permissions {\n  ...RolePermissionCore\n  role {\n    ...RoleCore\n  }\n  permission {\n    ...PermissionsPermissionWithResource\n  }\n}\n\nfragment UserRoleWithDetails on user_roles {\n  ...UserRoleCore\n  role {\n    ...RoleWithPermissions\n  }\n  user {\n    id\n    name\n    email\n    isStaff\n    isActive\n  }\n}\n\nfragment FeatureFlagCore on feature_flags {\n  id\n  feature_name\n  is_enabled\n  allowed_roles\n}\n\nfragment AppSettingsCore on app_settings {\n  id\n  permissions\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "mutation CreateResource($object: resources_insert_input!) {\n  insertResource(object: $object) {\n    ...ResourceCore\n  }\n}\n\nmutation UpdateResource($id: uuid!, $set: resources_set_input!) {\n  updateResource(pk_columns: {id: $id}, _set: $set) {\n    ...ResourceCore\n  }\n}\n\nmutation DeleteResource($id: uuid!) {\n  deleteResource(id: $id) {\n    id\n  }\n}\n\nmutation CreatePermission($object: permissions_insert_input!) {\n  insertPermission(object: $object) {\n    ...PermissionCore\n  }\n}\n\nmutation UpdatePermission($id: uuid!, $set: permissions_set_input!) {\n  updatePermission(pk_columns: {id: $id}, _set: $set) {\n    ...PermissionCore\n  }\n}\n\nmutation DeletePermission($id: uuid!) {\n  deletePermission(id: $id) {\n    id\n  }\n}\n\nmutation CreateRole($object: roles_insert_input!) {\n  insertRole(object: $object) {\n    ...RoleCore\n  }\n}\n\nmutation UpdateRole($id: uuid!, $set: roles_set_input!) {\n  updateRole(pk_columns: {id: $id}, _set: $set) {\n    ...RoleCore\n  }\n}\n\nmutation DeleteRole($id: uuid!) {\n  deleteRole(id: $id) {\n    id\n  }\n}\n\nmutation AssignPermissionToRole($object: role_permissions_insert_input!) {\n  insertRolePermission(object: $object) {\n    ...RolePermissionCore\n  }\n}\n\nmutation RemovePermissionFromRole($roleId: uuid!, $permissionId: uuid!) {\n  deleteRolePermissions(\n    where: {roleId: {_eq: $roleId}, permissionId: {_eq: $permissionId}}\n  ) {\n    affected_rows\n  }\n}\n\nmutation UpdateRolePermission($id: uuid!, $set: role_permissions_set_input!) {\n  updateRolePermission(pk_columns: {id: $id}, _set: $set) {\n    ...RolePermissionCore\n  }\n}\n\nmutation AssignRoleToUser($userId: uuid!, $roleId: uuid!) {\n  insertUserRole(object: {userId: $userId, roleId: $roleId}) {\n    ...UserRoleWithDetails\n  }\n}\n\nmutation RemoveRoleFromUser($userId: uuid!, $roleId: uuid!) {\n  deleteUserRoles(where: {userId: {_eq: $userId}, roleId: {_eq: $roleId}}) {\n    affected_rows\n  }\n}\n\nmutation RemoveAllRolesFromUser($userId: uuid!) {\n  deleteUserRoles(where: {userId: {_eq: $userId}}) {\n    affected_rows\n  }\n}\n\nmutation ReplaceUserRoles($userId: uuid!, $objects: [user_roles_insert_input!]!) {\n  deleteUserRoles(where: {userId: {_eq: $userId}}) {\n    affected_rows\n  }\n  insertUserRoles(objects: $objects) {\n    returning {\n      ...UserRoleWithDetails\n    }\n  }\n}\n\nmutation CreateFeatureFlag($object: feature_flags_insert_input!) {\n  insert_feature_flags_one(object: $object) {\n    ...FeatureFlagCore\n  }\n}\n\nmutation UpdateFeatureFlag($id: uuid!, $set: feature_flags_set_input!) {\n  update_feature_flags_by_pk(pk_columns: {id: $id}, _set: $set) {\n    ...FeatureFlagCore\n  }\n}\n\nmutation ToggleFeatureFlag($id: uuid!, $is_enabled: Boolean!) {\n  update_feature_flags_by_pk(\n    pk_columns: {id: $id}\n    _set: {is_enabled: $is_enabled}\n  ) {\n    ...FeatureFlagCore\n  }\n}\n\nmutation DeleteFeatureFlag($id: uuid!) {\n  delete_feature_flags_by_pk(id: $id) {\n    id\n  }\n}\n\nmutation UpdateAppSettings($id: String!, $permissions: jsonb!) {\n  update_app_settings_by_pk(\n    pk_columns: {id: $id}\n    _set: {permissions: $permissions}\n  ) {\n    ...AppSettingsCore\n  }\n}"): (typeof documents)["mutation CreateResource($object: resources_insert_input!) {\n  insertResource(object: $object) {\n    ...ResourceCore\n  }\n}\n\nmutation UpdateResource($id: uuid!, $set: resources_set_input!) {\n  updateResource(pk_columns: {id: $id}, _set: $set) {\n    ...ResourceCore\n  }\n}\n\nmutation DeleteResource($id: uuid!) {\n  deleteResource(id: $id) {\n    id\n  }\n}\n\nmutation CreatePermission($object: permissions_insert_input!) {\n  insertPermission(object: $object) {\n    ...PermissionCore\n  }\n}\n\nmutation UpdatePermission($id: uuid!, $set: permissions_set_input!) {\n  updatePermission(pk_columns: {id: $id}, _set: $set) {\n    ...PermissionCore\n  }\n}\n\nmutation DeletePermission($id: uuid!) {\n  deletePermission(id: $id) {\n    id\n  }\n}\n\nmutation CreateRole($object: roles_insert_input!) {\n  insertRole(object: $object) {\n    ...RoleCore\n  }\n}\n\nmutation UpdateRole($id: uuid!, $set: roles_set_input!) {\n  updateRole(pk_columns: {id: $id}, _set: $set) {\n    ...RoleCore\n  }\n}\n\nmutation DeleteRole($id: uuid!) {\n  deleteRole(id: $id) {\n    id\n  }\n}\n\nmutation AssignPermissionToRole($object: role_permissions_insert_input!) {\n  insertRolePermission(object: $object) {\n    ...RolePermissionCore\n  }\n}\n\nmutation RemovePermissionFromRole($roleId: uuid!, $permissionId: uuid!) {\n  deleteRolePermissions(\n    where: {roleId: {_eq: $roleId}, permissionId: {_eq: $permissionId}}\n  ) {\n    affected_rows\n  }\n}\n\nmutation UpdateRolePermission($id: uuid!, $set: role_permissions_set_input!) {\n  updateRolePermission(pk_columns: {id: $id}, _set: $set) {\n    ...RolePermissionCore\n  }\n}\n\nmutation AssignRoleToUser($userId: uuid!, $roleId: uuid!) {\n  insertUserRole(object: {userId: $userId, roleId: $roleId}) {\n    ...UserRoleWithDetails\n  }\n}\n\nmutation RemoveRoleFromUser($userId: uuid!, $roleId: uuid!) {\n  deleteUserRoles(where: {userId: {_eq: $userId}, roleId: {_eq: $roleId}}) {\n    affected_rows\n  }\n}\n\nmutation RemoveAllRolesFromUser($userId: uuid!) {\n  deleteUserRoles(where: {userId: {_eq: $userId}}) {\n    affected_rows\n  }\n}\n\nmutation ReplaceUserRoles($userId: uuid!, $objects: [user_roles_insert_input!]!) {\n  deleteUserRoles(where: {userId: {_eq: $userId}}) {\n    affected_rows\n  }\n  insertUserRoles(objects: $objects) {\n    returning {\n      ...UserRoleWithDetails\n    }\n  }\n}\n\nmutation CreateFeatureFlag($object: feature_flags_insert_input!) {\n  insert_feature_flags_one(object: $object) {\n    ...FeatureFlagCore\n  }\n}\n\nmutation UpdateFeatureFlag($id: uuid!, $set: feature_flags_set_input!) {\n  update_feature_flags_by_pk(pk_columns: {id: $id}, _set: $set) {\n    ...FeatureFlagCore\n  }\n}\n\nmutation ToggleFeatureFlag($id: uuid!, $is_enabled: Boolean!) {\n  update_feature_flags_by_pk(\n    pk_columns: {id: $id}\n    _set: {is_enabled: $is_enabled}\n  ) {\n    ...FeatureFlagCore\n  }\n}\n\nmutation DeleteFeatureFlag($id: uuid!) {\n  delete_feature_flags_by_pk(id: $id) {\n    id\n  }\n}\n\nmutation UpdateAppSettings($id: String!, $permissions: jsonb!) {\n  update_app_settings_by_pk(\n    pk_columns: {id: $id}\n    _set: {permissions: $permissions}\n  ) {\n    ...AppSettingsCore\n  }\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "query GetResources($where: resources_bool_exp, $order_by: [resources_order_by!]) {\n  resources(where: $where, order_by: $order_by) {\n    ...ResourceCore\n    permissions {\n      ...PermissionCore\n    }\n  }\n}\n\nquery GetResourceById($id: uuid!) {\n  resource(id: $id) {\n    ...ResourceCore\n    permissions(order_by: {action: asc}) {\n      ...PermissionCore\n    }\n  }\n}\n\nquery GetPermissions($where: permissions_bool_exp, $order_by: [permissions_order_by!]) {\n  permissions(where: $where, order_by: $order_by) {\n    ...PermissionsPermissionWithResource\n  }\n}\n\nquery GetPermissionsByResource($resource_name: String!) {\n  permissions(\n    where: {resource: {name: {_eq: $resource_name}}}\n    order_by: {action: asc}\n  ) {\n    ...PermissionCore\n  }\n}\n\nquery GetRoles($where: roles_bool_exp, $order_by: [roles_order_by!]) {\n  roles(where: $where, order_by: $order_by) {\n    ...RoleWithPermissions\n    userRoles_aggregate {\n      aggregate {\n        count\n      }\n    }\n  }\n}\n\nquery GetRoleById($id: uuid!) {\n  role(id: $id) {\n    ...RoleWithPermissions\n    userRoles {\n      ...UserRoleWithDetails\n    }\n  }\n}\n\nquery GetSystemRoles {\n  roles(where: {isSystemRole: {_eq: true}}, order_by: {priority: asc}) {\n    ...RoleCore\n  }\n}\n\nquery GetUserRoles($userId: uuid!) {\n  userRoles(where: {userId: {_eq: $userId}}) {\n    ...UserRoleWithDetails\n  }\n}\n\nquery GetUsersWithRole($roleId: uuid!) {\n  userRoles(where: {roleId: {_eq: $roleId}}) {\n    ...UserRoleWithDetails\n  }\n}\n\nquery GetFeatureFlags($where: feature_flags_bool_exp) {\n  feature_flags(where: $where, order_by: {feature_name: asc}) {\n    ...FeatureFlagCore\n  }\n}\n\nquery GetEnabledFeatures($roles: jsonb!) {\n  feature_flags(\n    where: {is_enabled: {_eq: true}, _or: [{allowed_roles: {_eq: []}}, {allowed_roles: {_contains: $roles}}]}\n  ) {\n    ...FeatureFlagCore\n  }\n}\n\nquery GetAppSettings {\n  app_settings {\n    ...AppSettingsCore\n  }\n}\n\nquery GetPermissionAnalytics {\n  roles_count: rolesAggregate {\n    aggregate {\n      count\n    }\n  }\n  permissions_count: permissionsAggregate {\n    aggregate {\n      count\n    }\n  }\n  resources_count: resourcesAggregate {\n    aggregate {\n      count\n    }\n  }\n  user_roles_count: userRolesAggregate {\n    aggregate {\n      count\n    }\n  }\n  roles_by_priority: roles(order_by: {priority: asc}) {\n    name\n    displayName\n    priority\n    userRoles_aggregate {\n      aggregate {\n        count\n      }\n    }\n  }\n}"): (typeof documents)["query GetResources($where: resources_bool_exp, $order_by: [resources_order_by!]) {\n  resources(where: $where, order_by: $order_by) {\n    ...ResourceCore\n    permissions {\n      ...PermissionCore\n    }\n  }\n}\n\nquery GetResourceById($id: uuid!) {\n  resource(id: $id) {\n    ...ResourceCore\n    permissions(order_by: {action: asc}) {\n      ...PermissionCore\n    }\n  }\n}\n\nquery GetPermissions($where: permissions_bool_exp, $order_by: [permissions_order_by!]) {\n  permissions(where: $where, order_by: $order_by) {\n    ...PermissionsPermissionWithResource\n  }\n}\n\nquery GetPermissionsByResource($resource_name: String!) {\n  permissions(\n    where: {resource: {name: {_eq: $resource_name}}}\n    order_by: {action: asc}\n  ) {\n    ...PermissionCore\n  }\n}\n\nquery GetRoles($where: roles_bool_exp, $order_by: [roles_order_by!]) {\n  roles(where: $where, order_by: $order_by) {\n    ...RoleWithPermissions\n    userRoles_aggregate {\n      aggregate {\n        count\n      }\n    }\n  }\n}\n\nquery GetRoleById($id: uuid!) {\n  role(id: $id) {\n    ...RoleWithPermissions\n    userRoles {\n      ...UserRoleWithDetails\n    }\n  }\n}\n\nquery GetSystemRoles {\n  roles(where: {isSystemRole: {_eq: true}}, order_by: {priority: asc}) {\n    ...RoleCore\n  }\n}\n\nquery GetUserRoles($userId: uuid!) {\n  userRoles(where: {userId: {_eq: $userId}}) {\n    ...UserRoleWithDetails\n  }\n}\n\nquery GetUsersWithRole($roleId: uuid!) {\n  userRoles(where: {roleId: {_eq: $roleId}}) {\n    ...UserRoleWithDetails\n  }\n}\n\nquery GetFeatureFlags($where: feature_flags_bool_exp) {\n  feature_flags(where: $where, order_by: {feature_name: asc}) {\n    ...FeatureFlagCore\n  }\n}\n\nquery GetEnabledFeatures($roles: jsonb!) {\n  feature_flags(\n    where: {is_enabled: {_eq: true}, _or: [{allowed_roles: {_eq: []}}, {allowed_roles: {_contains: $roles}}]}\n  ) {\n    ...FeatureFlagCore\n  }\n}\n\nquery GetAppSettings {\n  app_settings {\n    ...AppSettingsCore\n  }\n}\n\nquery GetPermissionAnalytics {\n  roles_count: rolesAggregate {\n    aggregate {\n      count\n    }\n  }\n  permissions_count: permissionsAggregate {\n    aggregate {\n      count\n    }\n  }\n  resources_count: resourcesAggregate {\n    aggregate {\n      count\n    }\n  }\n  user_roles_count: userRolesAggregate {\n    aggregate {\n      count\n    }\n  }\n  roles_by_priority: roles(order_by: {priority: asc}) {\n    name\n    displayName\n    priority\n    userRoles_aggregate {\n      aggregate {\n        count\n      }\n    }\n  }\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "subscription RolesUpdated {\n  roles(order_by: {updatedAt: desc}) {\n    ...RoleCore\n  }\n}\n\nsubscription UserRolesUpdated($userId: uuid!) {\n  userRoles(where: {userId: {_eq: $userId}}) {\n    ...UserRoleWithDetails\n  }\n}\n\nsubscription RolePermissionsUpdated($roleId: uuid!) {\n  rolePermissions(where: {roleId: {_eq: $roleId}}) {\n    ...RolePermissionWithDetails\n  }\n}\n\nsubscription PermissionsUpdated {\n  permissions(order_by: {updatedAt: desc}) {\n    ...PermissionsPermissionWithResource\n  }\n}\n\nsubscription ResourcesUpdated {\n  resources(order_by: {updatedAt: desc}) {\n    ...ResourceCore\n  }\n}"): (typeof documents)["subscription RolesUpdated {\n  roles(order_by: {updatedAt: desc}) {\n    ...RoleCore\n  }\n}\n\nsubscription UserRolesUpdated($userId: uuid!) {\n  userRoles(where: {userId: {_eq: $userId}}) {\n    ...UserRoleWithDetails\n  }\n}\n\nsubscription RolePermissionsUpdated($roleId: uuid!) {\n  rolePermissions(where: {roleId: {_eq: $roleId}}) {\n    ...RolePermissionWithDetails\n  }\n}\n\nsubscription PermissionsUpdated {\n  permissions(order_by: {updatedAt: desc}) {\n    ...PermissionsPermissionWithResource\n  }\n}\n\nsubscription ResourcesUpdated {\n  resources(order_by: {updatedAt: desc}) {\n    ...ResourceCore\n  }\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "fragment UserCore on users {\n  id\n  name\n  email\n  username\n  role\n  isActive\n  isStaff\n  clerkUserId\n  createdAt\n  updatedAt\n}\n\nfragment UserBasic on users {\n  id\n  name\n  email\n  role\n  isActive\n}\n\nfragment UserWithManager on users {\n  ...UserCore\n  managerId\n  manager {\n    ...UserBasic\n  }\n}\n\nfragment RoleCore on roles {\n  id\n  name\n  description\n  displayName\n  priority\n  isSystemRole\n  createdAt\n}\n\nfragment PermissionCore on permissions {\n  id\n  action\n  description\n  resourceId\n  createdAt\n  updatedAt\n}\n\nfragment PermissionWithResource on permissions {\n  ...PermissionCore\n  resource {\n    id\n    name\n    description\n  }\n}\n\nfragment ClientCore on clients {\n  id\n  name\n  contactEmail\n  contactPerson\n  contactPhone\n  active\n  createdAt\n  updatedAt\n}\n\nfragment ClientBasic on clients {\n  id\n  name\n  active\n}\n\nfragment PayrollCore on payrolls {\n  id\n  name\n  status\n  clientId\n  primaryConsultantUserId\n  managerUserId\n  createdAt\n  updatedAt\n}\n\nfragment PayrollBasic on payrolls {\n  id\n  name\n  status\n  clientId\n}\n\nfragment ResourceCore on resources {\n  id\n  name\n  displayName\n  description\n  createdAt\n  updatedAt\n}\n\nfragment UserRoleCore on user_roles {\n  id\n  userId\n  roleId\n  createdAt\n  updatedAt\n}\n\nfragment RolePermissionCore on role_permissions {\n  id\n  roleId\n  permissionId\n  conditions\n  createdAt\n  updatedAt\n}\n\nfragment AuditFields on audit_audit_log {\n  id\n  eventTime\n  action\n  resourceType\n  resourceId\n  userId\n  ipAddress\n  userAgent\n  success\n  userEmail\n  userRole\n}"): (typeof documents)["fragment UserCore on users {\n  id\n  name\n  email\n  username\n  role\n  isActive\n  isStaff\n  clerkUserId\n  createdAt\n  updatedAt\n}\n\nfragment UserBasic on users {\n  id\n  name\n  email\n  role\n  isActive\n}\n\nfragment UserWithManager on users {\n  ...UserCore\n  managerId\n  manager {\n    ...UserBasic\n  }\n}\n\nfragment RoleCore on roles {\n  id\n  name\n  description\n  displayName\n  priority\n  isSystemRole\n  createdAt\n}\n\nfragment PermissionCore on permissions {\n  id\n  action\n  description\n  resourceId\n  createdAt\n  updatedAt\n}\n\nfragment PermissionWithResource on permissions {\n  ...PermissionCore\n  resource {\n    id\n    name\n    description\n  }\n}\n\nfragment ClientCore on clients {\n  id\n  name\n  contactEmail\n  contactPerson\n  contactPhone\n  active\n  createdAt\n  updatedAt\n}\n\nfragment ClientBasic on clients {\n  id\n  name\n  active\n}\n\nfragment PayrollCore on payrolls {\n  id\n  name\n  status\n  clientId\n  primaryConsultantUserId\n  managerUserId\n  createdAt\n  updatedAt\n}\n\nfragment PayrollBasic on payrolls {\n  id\n  name\n  status\n  clientId\n}\n\nfragment ResourceCore on resources {\n  id\n  name\n  displayName\n  description\n  createdAt\n  updatedAt\n}\n\nfragment UserRoleCore on user_roles {\n  id\n  userId\n  roleId\n  createdAt\n  updatedAt\n}\n\nfragment RolePermissionCore on role_permissions {\n  id\n  roleId\n  permissionId\n  conditions\n  createdAt\n  updatedAt\n}\n\nfragment AuditFields on audit_audit_log {\n  id\n  eventTime\n  action\n  resourceType\n  resourceId\n  userId\n  ipAddress\n  userAgent\n  success\n  userEmail\n  userRole\n}"];

export function graphql(source: string) {
  return (documents as any)[source] ?? {};
}

export type DocumentType<TDocumentNode extends DocumentNode<any, any>> = TDocumentNode extends DocumentNode<  infer TType,  any>  ? TType  : never;