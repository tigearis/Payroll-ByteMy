/* eslint-disable */
import * as types from './graphql';
import { TypedDocumentNode as DocumentNode } from '@graphql-typed-document-node/core';

/**
 * Map of all GraphQL operations in the project.
 *
 * This map has several performance disadvantages:
 * 1. It is not tree-shakeable, so it will include all operations in the project.
 * 2. It is not minifiable, so the string of a GraphQL query will be multiple times inside the bundle.
 * 3. It does not support dead code elimination, so it will add unused operations.
 *
 * Therefore it is highly recommended to use the babel or swc plugin for production.
 * Learn more about it here: https://the-guild.dev/graphql/codegen/plugins/presets/preset-client#reducing-bundle-size
 */
type Documents = {
    "fragment ResourceCore on resources {\n  id\n  name\n  displayName\n  description\n}\n\nfragment PermissionCore on permissions {\n  id\n  resourceId\n  action\n  description\n  legacyPermissionName\n  relatedResource {\n    ...ResourceCore\n  }\n}\n\nfragment PermissionWithResource on permissions {\n  ...PermissionCore\n}\n\nfragment RoleCore on roles {\n  id\n  name\n  displayName\n  description\n  isSystemRole\n  priority\n}\n\nfragment RolePermissionWithDetails on rolePermissions {\n  id\n  roleId\n  permissionId\n  conditions\n  createdAt\n  grantedToRole {\n    ...RoleCore\n  }\n  grantedPermission {\n    ...PermissionCore\n  }\n}\n\nfragment UserRoleWithDetails on userRoles {\n  id\n  userId\n  roleId\n  createdAt\n  roleUser {\n    ...UserMinimal\n  }\n  assignedRole {\n    ...RoleCore\n  }\n}\n\nfragment FeatureFlagCore on featureFlags {\n  id\n  featureName\n  isEnabled\n  allowedRoles\n  updatedAt\n}\n\nfragment AppSettingsCore on appSettings {\n  id\n  permissions\n}": typeof types.ResourceCoreFragmentDoc,
    "mutation CreateSystemResource($object: resourcesInsertInput!) {\n  insertResource(object: $object) {\n    ...ResourceCore\n  }\n}\n\nmutation UpdateSystemResource($id: uuid!, $set: resourcesSetInput!) {\n  updateResourceById(pkColumns: {id: $id}, _set: $set) {\n    ...ResourceCore\n  }\n}\n\nmutation DeleteSystemResource($id: uuid!) {\n  deleteResourceById(id: $id) {\n    id\n    name\n  }\n}\n\nmutation CreateSystemPermission($object: permissionsInsertInput!) {\n  insertPermission(object: $object) {\n    ...PermissionCore\n  }\n}\n\nmutation UpdateSystemPermission($id: uuid!, $set: permissionsSetInput!) {\n  updatePermissionById(pkColumns: {id: $id}, _set: $set) {\n    ...PermissionCore\n  }\n}\n\nmutation DeleteSystemPermission($id: uuid!) {\n  deletePermissionById(id: $id) {\n    id\n    action\n  }\n}\n\nmutation CreateSystemRole($object: rolesInsertInput!) {\n  insertRole(object: $object) {\n    ...RoleCore\n  }\n}\n\nmutation UpdateSystemRole($id: uuid!, $set: rolesSetInput!) {\n  updateRoleById(pkColumns: {id: $id}, _set: $set) {\n    ...RoleCore\n  }\n}\n\nmutation DeleteSystemRole($id: uuid!) {\n  deleteRoleById(id: $id) {\n    id\n    name\n  }\n}\n\nmutation AssignPermissionToRole($object: rolePermissionsInsertInput!) {\n  insertRolePermission(object: $object) {\n    ...RolePermissionWithDetails\n  }\n}\n\nmutation RemovePermissionFromRole($id: uuid!) {\n  deleteRolePermissionById(id: $id) {\n    id\n    roleId\n    permissionId\n  }\n}\n\nmutation UpdateSystemRolePermission($id: uuid!, $set: rolePermissionsSetInput!) {\n  updateRolePermissionById(pkColumns: {id: $id}, _set: $set) {\n    ...RolePermissionWithDetails\n  }\n}\n\nmutation AssignSystemRoleToUser($object: userRolesInsertInput!) {\n  insertUserRole(object: $object) {\n    ...UserRoleWithDetails\n  }\n}\n\nmutation RemoveSystemRoleFromUser($id: uuid!) {\n  deleteUserRoleById(id: $id) {\n    id\n    userId\n    roleId\n  }\n}\n\nmutation UpdateSystemUserRole($id: uuid!, $set: userRolesSetInput!) {\n  updateUserRoleById(pkColumns: {id: $id}, _set: $set) {\n    ...UserRoleWithDetails\n  }\n}\n\nmutation CreateFeatureFlag($object: featureFlagsInsertInput!) {\n  insertFeatureFlag(object: $object) {\n    ...FeatureFlagCore\n  }\n}\n\nmutation UpdateFeatureFlag($id: uuid!, $set: featureFlagsSetInput!) {\n  updateFeatureFlagById(pkColumns: {id: $id}, _set: $set) {\n    ...FeatureFlagCore\n  }\n}\n\nmutation DeleteFeatureFlag($id: uuid!) {\n  deleteFeatureFlagById(id: $id) {\n    id\n    featureName\n  }\n}\n\nmutation UpdateAppSettings($id: String!, $permissions: jsonb!) {\n  updateAppSettingById(pkColumns: {id: $id}, _set: {permissions: $permissions}) {\n    ...AppSettingsCore\n  }\n}\n\nmutation GrantUserPermission($userId: uuid!, $resource: String!, $operation: String!, $reason: String!, $expiresAt: timestamptz, $conditions: jsonb) {\n  insertPermissionOverride(\n    object: {userId: $userId, resource: $resource, operation: $operation, granted: true, reason: $reason, expiresAt: $expiresAt, conditions: $conditions}\n  ) {\n    id\n    userId\n    resource\n    operation\n    granted\n    reason\n    expiresAt\n    conditions\n    createdAt\n    createdBy\n    targetUser {\n      id\n      name\n      email\n    }\n    createdByUser {\n      id\n      name\n      email\n    }\n  }\n}\n\nmutation RestrictUserPermission($userId: uuid!, $resource: String!, $operation: String!, $reason: String!, $expiresAt: timestamptz, $conditions: jsonb) {\n  insertPermissionOverride(\n    object: {userId: $userId, resource: $resource, operation: $operation, granted: false, reason: $reason, expiresAt: $expiresAt, conditions: $conditions}\n  ) {\n    id\n    userId\n    resource\n    operation\n    granted\n    reason\n    expiresAt\n    conditions\n    createdAt\n    createdBy\n    targetUser {\n      id\n      name\n      email\n    }\n    createdByUser {\n      id\n      name\n      email\n    }\n  }\n}\n\nmutation GrantRolePermission($role: String!, $resource: String!, $operation: String!, $reason: String!, $expiresAt: timestamptz, $conditions: jsonb) {\n  insertPermissionOverride(\n    object: {role: $role, resource: $resource, operation: $operation, granted: true, reason: $reason, expiresAt: $expiresAt, conditions: $conditions}\n  ) {\n    id\n    role\n    resource\n    operation\n    granted\n    reason\n    expiresAt\n    conditions\n    createdAt\n    createdBy\n    createdByUser {\n      id\n      name\n      email\n    }\n  }\n}\n\nmutation RestrictRolePermission($role: String!, $resource: String!, $operation: String!, $reason: String!, $expiresAt: timestamptz, $conditions: jsonb) {\n  insertPermissionOverride(\n    object: {role: $role, resource: $resource, operation: $operation, granted: false, reason: $reason, expiresAt: $expiresAt, conditions: $conditions}\n  ) {\n    id\n    role\n    resource\n    operation\n    granted\n    reason\n    expiresAt\n    conditions\n    createdAt\n    createdBy\n    createdByUser {\n      id\n      name\n      email\n    }\n  }\n}\n\nmutation UpdatePermissionOverride($id: uuid!, $reason: String, $expiresAt: timestamptz, $conditions: jsonb) {\n  updatePermissionOverrideById(\n    pkColumns: {id: $id}\n    _set: {reason: $reason, expiresAt: $expiresAt, conditions: $conditions, updatedAt: \"now()\"}\n  ) {\n    id\n    userId\n    role\n    resource\n    operation\n    granted\n    reason\n    expiresAt\n    conditions\n    createdAt\n    updatedAt\n    createdBy\n    targetUser {\n      id\n      name\n      email\n    }\n    createdByUser {\n      id\n      name\n      email\n    }\n  }\n}\n\nmutation RemovePermissionOverride($id: uuid!) {\n  deletePermissionOverrideById(id: $id) {\n    id\n    userId\n    role\n    resource\n    operation\n    granted\n    reason\n  }\n}\n\nmutation BulkGrantUserPermissions($objects: [permissionOverridesInsertInput!]!) {\n  bulkInsertPermissionOverrides(objects: $objects) {\n    returning {\n      id\n      userId\n      resource\n      operation\n      granted\n      reason\n      expiresAt\n      createdAt\n    }\n    affectedRows\n  }\n}\n\nmutation BulkRemovePermissionOverrides($where: permissionOverridesBoolExp!) {\n  bulkDeletePermissionOverrides(where: $where) {\n    returning {\n      id\n      userId\n      role\n      resource\n      operation\n    }\n    affectedRows\n  }\n}\n\nmutation ExtendPermissionExpiration($id: uuid!, $newExpiresAt: timestamptz!, $reason: String!) {\n  updatePermissionOverrideById(\n    pkColumns: {id: $id}\n    _set: {expiresAt: $newExpiresAt, reason: $reason, updatedAt: \"now()\"}\n  ) {\n    id\n    userId\n    role\n    resource\n    operation\n    granted\n    expiresAt\n    reason\n    updatedAt\n  }\n}\n\nmutation RevokeExpiredPermissions {\n  bulkDeletePermissionOverrides(where: {expiresAt: {_lte: \"now()\"}}) {\n    returning {\n      id\n      userId\n      role\n      resource\n      operation\n      expiresAt\n    }\n    affectedRows\n  }\n}": typeof types.CreateSystemResourceDocument,
    "query GetResources {\n  resources(orderBy: {name: ASC}) {\n    ...ResourceCore\n  }\n}\n\nquery GetResourceById($id: uuid!) {\n  resourceById(id: $id) {\n    ...ResourceCore\n  }\n}\n\nquery GetPermissions {\n  permissions(orderBy: {resourceId: ASC}) {\n    ...PermissionWithResource\n  }\n}\n\nquery GetPermissionById($id: uuid!) {\n  permissionById(id: $id) {\n    ...PermissionWithResource\n  }\n}\n\nquery GetRoles($where: rolesBoolExp, $orderBy: [rolesOrderBy!]) {\n  roles(where: $where, orderBy: $orderBy) {\n    ...RoleCore\n  }\n}\n\nquery GetRoleById($id: uuid!) {\n  roleById(id: $id) {\n    ...RoleCore\n    assignedPermissions {\n      ...RolePermissionWithDetails\n    }\n  }\n}\n\nquery GetRolePermissions($roleId: uuid!) {\n  rolePermissions(where: {roleId: {_eq: $roleId}}) {\n    ...RolePermissionWithDetails\n  }\n}\n\nquery GetSystemRoles {\n  roles(where: {isSystemRole: {_eq: true}}, orderBy: {priority: ASC}) {\n    ...RoleCore\n  }\n}\n\nquery GetUserRoles($userId: uuid!) {\n  userRoles(where: {userId: {_eq: $userId}}) {\n    ...UserRoleWithDetails\n  }\n}\n\nquery GetUsersWithRole($roleId: uuid!) {\n  userRoles(where: {roleId: {_eq: $roleId}}) {\n    ...UserRoleWithDetails\n  }\n}\n\nquery GetFeatureFlags($where: featureFlagsBoolExp) {\n  featureFlags(where: $where) {\n    ...FeatureFlagCore\n  }\n}\n\nquery GetFeatureFlagById($id: uuid!) {\n  featureFlagById(id: $id) {\n    ...FeatureFlagCore\n  }\n}\n\nquery GetAppSettings {\n  appSettings {\n    ...AppSettingsCore\n  }\n}\n\nquery GetUserEffectivePermissions($userId: uuid!) {\n  userRoles(where: {userId: {_eq: $userId}}) {\n    roleId\n    createdAt\n  }\n  permissionOverrides(\n    where: {userId: {_eq: $userId}, _or: [{expiresAt: {_isNull: true}}, {expiresAt: {_gt: \"now()\"}}]}\n  ) {\n    resource\n    operation\n    granted\n    conditions\n  }\n}\n\nquery GetUserPermissionOverrides($userId: uuid!) {\n  permissionOverrides(\n    where: {userId: {_eq: $userId}, _or: [{expiresAt: {_isNull: true}}, {expiresAt: {_gt: \"now()\"}}]}\n    orderBy: {createdAt: DESC}\n  ) {\n    id\n    userId\n    role\n    resource\n    operation\n    granted\n    conditions\n    reason\n    createdBy\n    expiresAt\n    createdAt\n    updatedAt\n    createdByUser {\n      id\n      name\n      email\n    }\n  }\n}\n\nquery GetRolePermissionOverrides($role: String!) {\n  permissionOverrides(\n    where: {role: {_eq: $role}, _or: [{expiresAt: {_isNull: true}}, {expiresAt: {_gt: \"now()\"}}]}\n    orderBy: {createdAt: DESC}\n  ) {\n    id\n    userId\n    role\n    resource\n    operation\n    granted\n    conditions\n    reason\n    createdBy\n    expiresAt\n    createdAt\n    updatedAt\n    createdByUser {\n      id\n      name\n      email\n    }\n  }\n}\n\nquery GetRoleByName($name: String!) {\n  roles(where: {name: {_eq: $name}}) {\n    id\n    name\n    displayName\n    description\n    priority\n    isSystemRole\n    assignedPermissions {\n      id\n      permissionId\n      conditions\n    }\n  }\n}\n\nquery GetPermissionsByResource($resourceId: uuid!) {\n  permissions(where: {resourceId: {_eq: $resourceId}}, orderBy: {action: ASC}) {\n    id\n    action\n    description\n    legacyPermissionName\n    resourceId\n    createdAt\n    updatedAt\n  }\n}\n\nquery GetPermissionAuditLog($limit: Int = 50, $offset: Int = 0, $userId: uuid, $targetUserId: uuid) {\n  permissionOverrides(\n    where: {_or: [{createdBy: {_eq: $userId}}, {userId: {_eq: $targetUserId}}]}\n    orderBy: {createdAt: DESC}\n    limit: $limit\n    offset: $offset\n  ) {\n    id\n    userId\n    role\n    resource\n    operation\n    granted\n    reason\n    createdAt\n    createdBy\n    createdByUser {\n      id\n      name\n      email\n    }\n  }\n}\n\nquery SearchPermissionOverrides($searchTerm: String!, $limit: Int = 50, $offset: Int = 0) {\n  permissionOverrides(\n    where: {_or: [{reason: {_ilike: $searchTerm}}, {resource: {_ilike: $searchTerm}}, {operation: {_ilike: $searchTerm}}]}\n    orderBy: {createdAt: DESC}\n    limit: $limit\n    offset: $offset\n  ) {\n    id\n    userId\n    role\n    resource\n    operation\n    granted\n    conditions\n    reason\n    createdBy\n    expiresAt\n    createdAt\n    updatedAt\n    createdByUser {\n      id\n      name\n      email\n    }\n    targetUser {\n      id\n      name\n      email\n    }\n  }\n}\n\nquery GetExpiringPermissions {\n  permissionOverrides(\n    where: {expiresAt: {_isNull: false, _gt: \"now()\"}}\n    orderBy: {expiresAt: ASC}\n  ) {\n    id\n    userId\n    role\n    resource\n    operation\n    granted\n    reason\n    expiresAt\n    createdAt\n    createdByUser {\n      id\n      name\n      email\n    }\n    targetUser {\n      id\n      name\n      email\n    }\n  }\n}\n\nquery GetPermissionAnalytics {\n  roles_count: rolesAggregate {\n    aggregate {\n      count\n    }\n  }\n  permissions_count: permissionsAggregate {\n    aggregate {\n      count\n    }\n  }\n  resources_count: resourcesAggregate {\n    aggregate {\n      count\n    }\n  }\n  userRoles_count: userRolesAggregate {\n    aggregate {\n      count\n    }\n  }\n  totalOverrides: permissionOverridesAggregate {\n    aggregate {\n      count\n    }\n  }\n  activeOverrides: permissionOverridesAggregate(\n    where: {_or: [{expiresAt: {_isNull: true}}, {expiresAt: {_gt: \"now()\"}}]}\n  ) {\n    aggregate {\n      count\n    }\n  }\n  expiredOverrides: permissionOverridesAggregate(\n    where: {expiresAt: {_lte: \"now()\"}}\n  ) {\n    aggregate {\n      count\n    }\n  }\n  roles_by_priority: roles(orderBy: {priority: ASC}) {\n    name\n    displayName\n    priority\n    assignedToUsersAggregate {\n      aggregate {\n        count\n      }\n    }\n  }\n}": typeof types.GetResourcesDocument,
    "subscription RolesUpdated {\n  roles(orderBy: {updatedAt: DESC}) {\n    ...RoleCore\n  }\n}\n\nsubscription UserRolesUpdated($userId: uuid!) {\n  userRoles(where: {userId: {_eq: $userId}}) {\n    ...UserRoleWithDetails\n  }\n}\n\nsubscription RolePermissionsUpdated($roleId: uuid!) {\n  rolePermissions(where: {roleId: {_eq: $roleId}}) {\n    ...RolePermissionWithDetails\n  }\n}\n\nsubscription PermissionsUpdated {\n  permissions(orderBy: {updatedAt: DESC}) {\n    ...PermissionWithResource\n  }\n}\n\nsubscription ResourcesUpdated {\n  resources(orderBy: {updatedAt: DESC}) {\n    ...ResourceCore\n  }\n}": typeof types.RolesUpdatedDocument,
    "fragment UserMinimal on users {\n  id\n  name\n  email\n}\n\nfragment UserCoreShared on users {\n  ...UserMinimal\n  role\n  isActive\n}\n\nfragment UserBasic on users {\n  ...UserCoreShared\n  createdAt\n  updatedAt\n}\n\nfragment UserBase on users {\n  ...UserBasic\n}\n\nfragment UserWithRole on users {\n  ...UserBasic\n  assignedRoles {\n    assignedRole {\n      id\n      name\n      displayName\n    }\n  }\n}\n\nfragment UserProfile on users {\n  ...UserWithRole\n  username\n  clerkUserId\n  image\n  isStaff\n  managerId\n  deactivatedAt\n  deactivatedBy\n  managerUser {\n    ...UserMinimal\n  }\n}\n\nfragment UserSearchResult on users {\n  ...UserCoreShared\n  username\n  isStaff\n}\n\nfragment ClientMinimal on clients {\n  id\n  name\n}\n\nfragment ClientBase on clients {\n  id\n  name\n  active\n  contactEmail\n  contactPerson\n  contactPhone\n  createdAt\n}\n\nfragment ClientWithStats on clients {\n  ...ClientBase\n  currentEmployeeCount: payrollsAggregate(\n    where: {supersededDate: {_isNull: true}}\n  ) {\n    aggregate {\n      sum {\n        employeeCount\n      }\n    }\n  }\n  activePayrollCount: payrollsAggregate(\n    where: {supersededDate: {_isNull: true}, status: {_eq: \"Active\"}}\n  ) {\n    aggregate {\n      count\n    }\n  }\n}\n\nfragment ClientListBase on clients {\n  ...ClientBase\n  payrollCount: payrollsAggregate(where: {supersededDate: {_isNull: true}}) {\n    aggregate {\n      count\n    }\n  }\n}\n\nfragment PayrollMinimal on payrolls {\n  id\n  name\n  employeeCount\n  status\n}\n\nfragment PayrollBase on payrolls {\n  id\n  name\n  employeeCount\n  status\n  payrollSystem\n  processingTime\n  processingDaysBeforeEft\n  versionNumber\n  createdAt\n  updatedAt\n}\n\nfragment PayrollWithClient on payrolls {\n  ...PayrollBase\n  clientId\n  client {\n    id\n    name\n    active\n  }\n}\n\nfragment PayrollListItem on payrolls {\n  ...PayrollWithClient\n  primaryConsultantUserId\n  backupConsultantUserId\n  managerUserId\n  createdByUserId\n  primaryConsultant {\n    ...UserMinimal\n  }\n  manager {\n    ...UserMinimal\n  }\n}\n\nfragment PayrollWithDates on payrolls {\n  ...PayrollBase\n  goLiveDate\n  payrollDates(orderBy: {originalEftDate: ASC}) {\n    id\n    originalEftDate\n    adjustedEftDate\n    notes\n  }\n}\n\nfragment PayrollFullDetail on payrolls {\n  ...PayrollWithDates\n  ...PayrollWithClient\n  dateTypeId\n  cycleId\n  dateValue\n  versionReason\n  supersededDate\n  parentPayrollId\n  parentPayroll {\n    id\n    versionNumber\n  }\n  childPayrolls(orderBy: {versionNumber: DESC}) {\n    id\n    versionNumber\n    versionReason\n    createdAt\n  }\n  primaryConsultant {\n    ...UserMinimal\n  }\n  backupConsultant {\n    ...UserMinimal\n  }\n  manager {\n    ...UserMinimal\n  }\n}\n\nfragment NoteWithAuthor on notes {\n  id\n  content\n  isImportant\n  createdAt\n  entityId\n  entityType\n  authorUser {\n    ...UserMinimal\n  }\n}\n\nfragment PermissionBase on permissions {\n  id\n  resourceId\n  description\n  legacyPermissionName\n  action\n}\n\nfragment RoleWithPermissions on roles {\n  id\n  name\n  displayName\n  description\n  isSystemRole\n  priority\n  assignedPermissions {\n    grantedPermission {\n      ...PermissionBase\n    }\n  }\n}\n\nfragment AuditLogEntry on auditLogs {\n  id\n  userId\n  userEmail\n  userRole\n  action\n  resourceType\n  resourceId\n  eventTime\n  success\n  errorMessage\n  ipAddress\n  userAgent\n  metadata\n}\n\nfragment AuthEvent on authEvents {\n  id\n  userId\n  userEmail\n  eventType\n  eventTime\n  success\n  failureReason\n  ipAddress\n  userAgent\n  metadata\n}\n\nfragment DataAccessLog on dataAccessLogs {\n  id\n  userId\n  resourceType\n  resourceId\n  accessType\n  accessedAt\n  dataClassification\n  fieldsAccessed\n  rowCount\n  ipAddress\n  metadata\n}\n\nfragment PermissionChange on permissionChanges {\n  id\n  changedAt\n  changedByUserId\n  targetUserId\n  targetRoleId\n  changeType\n  permissionType\n  oldPermissions\n  newPermissions\n  reason\n  approvedByUserId\n}\n\nfragment PayrollDateInfo on payrollDates {\n  id\n  originalEftDate\n  adjustedEftDate\n  notes\n  createdAt\n}\n\nfragment PermissionOverrideInfo on permissionOverrides {\n  id\n  userId\n  role\n  resource\n  operation\n  granted\n  reason\n  conditions\n  expiresAt\n  createdBy\n  createdAt\n}": typeof types.UserMinimalFragmentDoc,
    "mutation LogAuditEvent($input: auditLogsInsertInput!) {\n  insertAuditLogsOne: insertAuditLog(object: $input) {\n    id\n    eventTime\n  }\n}\n\nmutation RefreshData {\n  __typename\n}": typeof types.LogAuditEventDocument,
    "query GetDashboardMetrics($userId: uuid!) {\n  clientsAggregate(where: {active: {_eq: true}}) {\n    aggregate {\n      count\n    }\n  }\n  activePayrollsAggregate: payrollsAggregate(\n    where: {supersededDate: {_isNull: true}, status: {_nin: [\"Completed\", \"Failed\"]}}\n  ) {\n    aggregate {\n      count\n    }\n  }\n  totalEmployeesAggregate: payrollsAggregate(\n    where: {supersededDate: {_isNull: true}}\n  ) {\n    aggregate {\n      sum {\n        employeeCount\n      }\n    }\n  }\n  upcomingPayrolls: payrolls(\n    where: {supersededDate: {_isNull: true}, status: {_nin: [\"Completed\", \"Failed\", \"Cancelled\"]}}\n    orderBy: {updatedAt: DESC}\n    limit: 5\n  ) {\n    ...PayrollMinimal\n    client {\n      ...ClientMinimal\n    }\n  }\n}\n\nquery GetDashboardStatsOptimized($limit: Int = 10) {\n  clientsAggregate {\n    aggregate {\n      count\n    }\n  }\n  totalPayrolls: payrollsAggregate(where: {supersededDate: {_isNull: true}}) {\n    aggregate {\n      count\n    }\n  }\n  activePayrolls: payrollsAggregate(\n    where: {supersededDate: {_isNull: true}, status: {_eq: \"active\"}}\n  ) {\n    aggregate {\n      count\n    }\n  }\n  processingPayrolls: payrollsAggregate(\n    where: {supersededDate: {_isNull: true}, status: {_eq: \"processing\"}}\n  ) {\n    aggregate {\n      count\n    }\n  }\n  upcomingPayrolls: payrolls(\n    where: {supersededDate: {_isNull: true}, status: {_eq: \"active\"}}\n    orderBy: {updatedAt: DESC}\n    limit: $limit\n  ) {\n    id\n    name\n    status\n    client {\n      id\n      name\n    }\n  }\n}\n\nquery GetClientsDashboardStats {\n  activeClientsCount: clientsAggregate(where: {active: {_eq: true}}) {\n    aggregate {\n      count\n    }\n  }\n  payrollsAggregate(where: {supersededDate: {_isNull: true}}) {\n    aggregate {\n      sum {\n        employeeCount\n      }\n    }\n  }\n  clientsNeedingAttention: clients(\n    where: {active: {_eq: true}, _not: {payrolls: {supersededDate: {_isNull: true}}}}\n  ) {\n    ...ClientMinimal\n  }\n}\n\nquery GetCurrentUser($userId: uuid!) {\n  user: userById(id: $userId) {\n    ...UserProfile\n  }\n}\n\nquery GetUsersForDropdown($role: user_role) {\n  users(where: {isActive: {_eq: true}, role: {_eq: $role}}, orderBy: {name: ASC}) {\n    ...UserMinimal\n  }\n}\n\nquery GetSystemHealth {\n  databaseHealth: users(limit: 1) {\n    id\n  }\n  recentActivity: auditLogsAggregate(\n    where: {eventTime: {_gte: \"now() - interval '1 hour'\"}}\n  ) {\n    aggregate {\n      count\n    }\n  }\n}\n\nquery GlobalSearch($searchTerm: String!) {\n  clients(\n    where: {_or: [{name: {_ilike: $searchTerm}}, {contactEmail: {_ilike: $searchTerm}}]}\n    limit: 5\n  ) {\n    ...ClientMinimal\n  }\n  users(\n    where: {_or: [{name: {_ilike: $searchTerm}}, {email: {_ilike: $searchTerm}}]}\n    limit: 5\n  ) {\n    ...UserMinimal\n  }\n  payrolls(\n    where: {client: {name: {_ilike: $searchTerm}}, supersededDate: {_isNull: true}}\n    limit: 5\n  ) {\n    ...PayrollMinimal\n    client {\n      ...ClientMinimal\n    }\n  }\n}": typeof types.GetDashboardMetricsDocument,
    "subscription RecentActivity($resourceTypes: [String!]) {\n  auditLogs(\n    where: {resourceType: {_in: $resourceTypes}, eventTime: {_gte: \"now() - interval '5 minutes'\"}}\n    orderBy: {eventTime: DESC}\n    limit: 20\n  ) {\n    ...AuditLogEntry\n  }\n}\n\nsubscription AuthenticationEvents($userId: uuid) {\n  authEvents(\n    where: {userId: {_eq: $userId}, eventTime: {_gte: \"now() - interval '10 minutes'\"}}\n    orderBy: {eventTime: DESC}\n  ) {\n    ...AuthEvent\n  }\n}\n\nsubscription SensitiveDataAccess($resourceTypes: [String!]!) {\n  dataAccessLogs(\n    where: {resourceType: {_in: $resourceTypes}, accessedAt: {_gte: \"now() - interval '10 minutes'\"}}\n    orderBy: {accessedAt: DESC}\n  ) {\n    ...DataAccessLog\n  }\n}\n\nsubscription PermissionChangeStream {\n  permissionChanges(orderBy: {changedAt: DESC}, limit: 10) {\n    ...PermissionChange\n  }\n}": typeof types.RecentActivityDocument,
};
const documents: Documents = {
    "fragment ResourceCore on resources {\n  id\n  name\n  displayName\n  description\n}\n\nfragment PermissionCore on permissions {\n  id\n  resourceId\n  action\n  description\n  legacyPermissionName\n  relatedResource {\n    ...ResourceCore\n  }\n}\n\nfragment PermissionWithResource on permissions {\n  ...PermissionCore\n}\n\nfragment RoleCore on roles {\n  id\n  name\n  displayName\n  description\n  isSystemRole\n  priority\n}\n\nfragment RolePermissionWithDetails on rolePermissions {\n  id\n  roleId\n  permissionId\n  conditions\n  createdAt\n  grantedToRole {\n    ...RoleCore\n  }\n  grantedPermission {\n    ...PermissionCore\n  }\n}\n\nfragment UserRoleWithDetails on userRoles {\n  id\n  userId\n  roleId\n  createdAt\n  roleUser {\n    ...UserMinimal\n  }\n  assignedRole {\n    ...RoleCore\n  }\n}\n\nfragment FeatureFlagCore on featureFlags {\n  id\n  featureName\n  isEnabled\n  allowedRoles\n  updatedAt\n}\n\nfragment AppSettingsCore on appSettings {\n  id\n  permissions\n}": types.ResourceCoreFragmentDoc,
    "mutation CreateSystemResource($object: resourcesInsertInput!) {\n  insertResource(object: $object) {\n    ...ResourceCore\n  }\n}\n\nmutation UpdateSystemResource($id: uuid!, $set: resourcesSetInput!) {\n  updateResourceById(pkColumns: {id: $id}, _set: $set) {\n    ...ResourceCore\n  }\n}\n\nmutation DeleteSystemResource($id: uuid!) {\n  deleteResourceById(id: $id) {\n    id\n    name\n  }\n}\n\nmutation CreateSystemPermission($object: permissionsInsertInput!) {\n  insertPermission(object: $object) {\n    ...PermissionCore\n  }\n}\n\nmutation UpdateSystemPermission($id: uuid!, $set: permissionsSetInput!) {\n  updatePermissionById(pkColumns: {id: $id}, _set: $set) {\n    ...PermissionCore\n  }\n}\n\nmutation DeleteSystemPermission($id: uuid!) {\n  deletePermissionById(id: $id) {\n    id\n    action\n  }\n}\n\nmutation CreateSystemRole($object: rolesInsertInput!) {\n  insertRole(object: $object) {\n    ...RoleCore\n  }\n}\n\nmutation UpdateSystemRole($id: uuid!, $set: rolesSetInput!) {\n  updateRoleById(pkColumns: {id: $id}, _set: $set) {\n    ...RoleCore\n  }\n}\n\nmutation DeleteSystemRole($id: uuid!) {\n  deleteRoleById(id: $id) {\n    id\n    name\n  }\n}\n\nmutation AssignPermissionToRole($object: rolePermissionsInsertInput!) {\n  insertRolePermission(object: $object) {\n    ...RolePermissionWithDetails\n  }\n}\n\nmutation RemovePermissionFromRole($id: uuid!) {\n  deleteRolePermissionById(id: $id) {\n    id\n    roleId\n    permissionId\n  }\n}\n\nmutation UpdateSystemRolePermission($id: uuid!, $set: rolePermissionsSetInput!) {\n  updateRolePermissionById(pkColumns: {id: $id}, _set: $set) {\n    ...RolePermissionWithDetails\n  }\n}\n\nmutation AssignSystemRoleToUser($object: userRolesInsertInput!) {\n  insertUserRole(object: $object) {\n    ...UserRoleWithDetails\n  }\n}\n\nmutation RemoveSystemRoleFromUser($id: uuid!) {\n  deleteUserRoleById(id: $id) {\n    id\n    userId\n    roleId\n  }\n}\n\nmutation UpdateSystemUserRole($id: uuid!, $set: userRolesSetInput!) {\n  updateUserRoleById(pkColumns: {id: $id}, _set: $set) {\n    ...UserRoleWithDetails\n  }\n}\n\nmutation CreateFeatureFlag($object: featureFlagsInsertInput!) {\n  insertFeatureFlag(object: $object) {\n    ...FeatureFlagCore\n  }\n}\n\nmutation UpdateFeatureFlag($id: uuid!, $set: featureFlagsSetInput!) {\n  updateFeatureFlagById(pkColumns: {id: $id}, _set: $set) {\n    ...FeatureFlagCore\n  }\n}\n\nmutation DeleteFeatureFlag($id: uuid!) {\n  deleteFeatureFlagById(id: $id) {\n    id\n    featureName\n  }\n}\n\nmutation UpdateAppSettings($id: String!, $permissions: jsonb!) {\n  updateAppSettingById(pkColumns: {id: $id}, _set: {permissions: $permissions}) {\n    ...AppSettingsCore\n  }\n}\n\nmutation GrantUserPermission($userId: uuid!, $resource: String!, $operation: String!, $reason: String!, $expiresAt: timestamptz, $conditions: jsonb) {\n  insertPermissionOverride(\n    object: {userId: $userId, resource: $resource, operation: $operation, granted: true, reason: $reason, expiresAt: $expiresAt, conditions: $conditions}\n  ) {\n    id\n    userId\n    resource\n    operation\n    granted\n    reason\n    expiresAt\n    conditions\n    createdAt\n    createdBy\n    targetUser {\n      id\n      name\n      email\n    }\n    createdByUser {\n      id\n      name\n      email\n    }\n  }\n}\n\nmutation RestrictUserPermission($userId: uuid!, $resource: String!, $operation: String!, $reason: String!, $expiresAt: timestamptz, $conditions: jsonb) {\n  insertPermissionOverride(\n    object: {userId: $userId, resource: $resource, operation: $operation, granted: false, reason: $reason, expiresAt: $expiresAt, conditions: $conditions}\n  ) {\n    id\n    userId\n    resource\n    operation\n    granted\n    reason\n    expiresAt\n    conditions\n    createdAt\n    createdBy\n    targetUser {\n      id\n      name\n      email\n    }\n    createdByUser {\n      id\n      name\n      email\n    }\n  }\n}\n\nmutation GrantRolePermission($role: String!, $resource: String!, $operation: String!, $reason: String!, $expiresAt: timestamptz, $conditions: jsonb) {\n  insertPermissionOverride(\n    object: {role: $role, resource: $resource, operation: $operation, granted: true, reason: $reason, expiresAt: $expiresAt, conditions: $conditions}\n  ) {\n    id\n    role\n    resource\n    operation\n    granted\n    reason\n    expiresAt\n    conditions\n    createdAt\n    createdBy\n    createdByUser {\n      id\n      name\n      email\n    }\n  }\n}\n\nmutation RestrictRolePermission($role: String!, $resource: String!, $operation: String!, $reason: String!, $expiresAt: timestamptz, $conditions: jsonb) {\n  insertPermissionOverride(\n    object: {role: $role, resource: $resource, operation: $operation, granted: false, reason: $reason, expiresAt: $expiresAt, conditions: $conditions}\n  ) {\n    id\n    role\n    resource\n    operation\n    granted\n    reason\n    expiresAt\n    conditions\n    createdAt\n    createdBy\n    createdByUser {\n      id\n      name\n      email\n    }\n  }\n}\n\nmutation UpdatePermissionOverride($id: uuid!, $reason: String, $expiresAt: timestamptz, $conditions: jsonb) {\n  updatePermissionOverrideById(\n    pkColumns: {id: $id}\n    _set: {reason: $reason, expiresAt: $expiresAt, conditions: $conditions, updatedAt: \"now()\"}\n  ) {\n    id\n    userId\n    role\n    resource\n    operation\n    granted\n    reason\n    expiresAt\n    conditions\n    createdAt\n    updatedAt\n    createdBy\n    targetUser {\n      id\n      name\n      email\n    }\n    createdByUser {\n      id\n      name\n      email\n    }\n  }\n}\n\nmutation RemovePermissionOverride($id: uuid!) {\n  deletePermissionOverrideById(id: $id) {\n    id\n    userId\n    role\n    resource\n    operation\n    granted\n    reason\n  }\n}\n\nmutation BulkGrantUserPermissions($objects: [permissionOverridesInsertInput!]!) {\n  bulkInsertPermissionOverrides(objects: $objects) {\n    returning {\n      id\n      userId\n      resource\n      operation\n      granted\n      reason\n      expiresAt\n      createdAt\n    }\n    affectedRows\n  }\n}\n\nmutation BulkRemovePermissionOverrides($where: permissionOverridesBoolExp!) {\n  bulkDeletePermissionOverrides(where: $where) {\n    returning {\n      id\n      userId\n      role\n      resource\n      operation\n    }\n    affectedRows\n  }\n}\n\nmutation ExtendPermissionExpiration($id: uuid!, $newExpiresAt: timestamptz!, $reason: String!) {\n  updatePermissionOverrideById(\n    pkColumns: {id: $id}\n    _set: {expiresAt: $newExpiresAt, reason: $reason, updatedAt: \"now()\"}\n  ) {\n    id\n    userId\n    role\n    resource\n    operation\n    granted\n    expiresAt\n    reason\n    updatedAt\n  }\n}\n\nmutation RevokeExpiredPermissions {\n  bulkDeletePermissionOverrides(where: {expiresAt: {_lte: \"now()\"}}) {\n    returning {\n      id\n      userId\n      role\n      resource\n      operation\n      expiresAt\n    }\n    affectedRows\n  }\n}": types.CreateSystemResourceDocument,
    "query GetResources {\n  resources(orderBy: {name: ASC}) {\n    ...ResourceCore\n  }\n}\n\nquery GetResourceById($id: uuid!) {\n  resourceById(id: $id) {\n    ...ResourceCore\n  }\n}\n\nquery GetPermissions {\n  permissions(orderBy: {resourceId: ASC}) {\n    ...PermissionWithResource\n  }\n}\n\nquery GetPermissionById($id: uuid!) {\n  permissionById(id: $id) {\n    ...PermissionWithResource\n  }\n}\n\nquery GetRoles($where: rolesBoolExp, $orderBy: [rolesOrderBy!]) {\n  roles(where: $where, orderBy: $orderBy) {\n    ...RoleCore\n  }\n}\n\nquery GetRoleById($id: uuid!) {\n  roleById(id: $id) {\n    ...RoleCore\n    assignedPermissions {\n      ...RolePermissionWithDetails\n    }\n  }\n}\n\nquery GetRolePermissions($roleId: uuid!) {\n  rolePermissions(where: {roleId: {_eq: $roleId}}) {\n    ...RolePermissionWithDetails\n  }\n}\n\nquery GetSystemRoles {\n  roles(where: {isSystemRole: {_eq: true}}, orderBy: {priority: ASC}) {\n    ...RoleCore\n  }\n}\n\nquery GetUserRoles($userId: uuid!) {\n  userRoles(where: {userId: {_eq: $userId}}) {\n    ...UserRoleWithDetails\n  }\n}\n\nquery GetUsersWithRole($roleId: uuid!) {\n  userRoles(where: {roleId: {_eq: $roleId}}) {\n    ...UserRoleWithDetails\n  }\n}\n\nquery GetFeatureFlags($where: featureFlagsBoolExp) {\n  featureFlags(where: $where) {\n    ...FeatureFlagCore\n  }\n}\n\nquery GetFeatureFlagById($id: uuid!) {\n  featureFlagById(id: $id) {\n    ...FeatureFlagCore\n  }\n}\n\nquery GetAppSettings {\n  appSettings {\n    ...AppSettingsCore\n  }\n}\n\nquery GetUserEffectivePermissions($userId: uuid!) {\n  userRoles(where: {userId: {_eq: $userId}}) {\n    roleId\n    createdAt\n  }\n  permissionOverrides(\n    where: {userId: {_eq: $userId}, _or: [{expiresAt: {_isNull: true}}, {expiresAt: {_gt: \"now()\"}}]}\n  ) {\n    resource\n    operation\n    granted\n    conditions\n  }\n}\n\nquery GetUserPermissionOverrides($userId: uuid!) {\n  permissionOverrides(\n    where: {userId: {_eq: $userId}, _or: [{expiresAt: {_isNull: true}}, {expiresAt: {_gt: \"now()\"}}]}\n    orderBy: {createdAt: DESC}\n  ) {\n    id\n    userId\n    role\n    resource\n    operation\n    granted\n    conditions\n    reason\n    createdBy\n    expiresAt\n    createdAt\n    updatedAt\n    createdByUser {\n      id\n      name\n      email\n    }\n  }\n}\n\nquery GetRolePermissionOverrides($role: String!) {\n  permissionOverrides(\n    where: {role: {_eq: $role}, _or: [{expiresAt: {_isNull: true}}, {expiresAt: {_gt: \"now()\"}}]}\n    orderBy: {createdAt: DESC}\n  ) {\n    id\n    userId\n    role\n    resource\n    operation\n    granted\n    conditions\n    reason\n    createdBy\n    expiresAt\n    createdAt\n    updatedAt\n    createdByUser {\n      id\n      name\n      email\n    }\n  }\n}\n\nquery GetRoleByName($name: String!) {\n  roles(where: {name: {_eq: $name}}) {\n    id\n    name\n    displayName\n    description\n    priority\n    isSystemRole\n    assignedPermissions {\n      id\n      permissionId\n      conditions\n    }\n  }\n}\n\nquery GetPermissionsByResource($resourceId: uuid!) {\n  permissions(where: {resourceId: {_eq: $resourceId}}, orderBy: {action: ASC}) {\n    id\n    action\n    description\n    legacyPermissionName\n    resourceId\n    createdAt\n    updatedAt\n  }\n}\n\nquery GetPermissionAuditLog($limit: Int = 50, $offset: Int = 0, $userId: uuid, $targetUserId: uuid) {\n  permissionOverrides(\n    where: {_or: [{createdBy: {_eq: $userId}}, {userId: {_eq: $targetUserId}}]}\n    orderBy: {createdAt: DESC}\n    limit: $limit\n    offset: $offset\n  ) {\n    id\n    userId\n    role\n    resource\n    operation\n    granted\n    reason\n    createdAt\n    createdBy\n    createdByUser {\n      id\n      name\n      email\n    }\n  }\n}\n\nquery SearchPermissionOverrides($searchTerm: String!, $limit: Int = 50, $offset: Int = 0) {\n  permissionOverrides(\n    where: {_or: [{reason: {_ilike: $searchTerm}}, {resource: {_ilike: $searchTerm}}, {operation: {_ilike: $searchTerm}}]}\n    orderBy: {createdAt: DESC}\n    limit: $limit\n    offset: $offset\n  ) {\n    id\n    userId\n    role\n    resource\n    operation\n    granted\n    conditions\n    reason\n    createdBy\n    expiresAt\n    createdAt\n    updatedAt\n    createdByUser {\n      id\n      name\n      email\n    }\n    targetUser {\n      id\n      name\n      email\n    }\n  }\n}\n\nquery GetExpiringPermissions {\n  permissionOverrides(\n    where: {expiresAt: {_isNull: false, _gt: \"now()\"}}\n    orderBy: {expiresAt: ASC}\n  ) {\n    id\n    userId\n    role\n    resource\n    operation\n    granted\n    reason\n    expiresAt\n    createdAt\n    createdByUser {\n      id\n      name\n      email\n    }\n    targetUser {\n      id\n      name\n      email\n    }\n  }\n}\n\nquery GetPermissionAnalytics {\n  roles_count: rolesAggregate {\n    aggregate {\n      count\n    }\n  }\n  permissions_count: permissionsAggregate {\n    aggregate {\n      count\n    }\n  }\n  resources_count: resourcesAggregate {\n    aggregate {\n      count\n    }\n  }\n  userRoles_count: userRolesAggregate {\n    aggregate {\n      count\n    }\n  }\n  totalOverrides: permissionOverridesAggregate {\n    aggregate {\n      count\n    }\n  }\n  activeOverrides: permissionOverridesAggregate(\n    where: {_or: [{expiresAt: {_isNull: true}}, {expiresAt: {_gt: \"now()\"}}]}\n  ) {\n    aggregate {\n      count\n    }\n  }\n  expiredOverrides: permissionOverridesAggregate(\n    where: {expiresAt: {_lte: \"now()\"}}\n  ) {\n    aggregate {\n      count\n    }\n  }\n  roles_by_priority: roles(orderBy: {priority: ASC}) {\n    name\n    displayName\n    priority\n    assignedToUsersAggregate {\n      aggregate {\n        count\n      }\n    }\n  }\n}": types.GetResourcesDocument,
    "subscription RolesUpdated {\n  roles(orderBy: {updatedAt: DESC}) {\n    ...RoleCore\n  }\n}\n\nsubscription UserRolesUpdated($userId: uuid!) {\n  userRoles(where: {userId: {_eq: $userId}}) {\n    ...UserRoleWithDetails\n  }\n}\n\nsubscription RolePermissionsUpdated($roleId: uuid!) {\n  rolePermissions(where: {roleId: {_eq: $roleId}}) {\n    ...RolePermissionWithDetails\n  }\n}\n\nsubscription PermissionsUpdated {\n  permissions(orderBy: {updatedAt: DESC}) {\n    ...PermissionWithResource\n  }\n}\n\nsubscription ResourcesUpdated {\n  resources(orderBy: {updatedAt: DESC}) {\n    ...ResourceCore\n  }\n}": types.RolesUpdatedDocument,
    "fragment UserMinimal on users {\n  id\n  name\n  email\n}\n\nfragment UserCoreShared on users {\n  ...UserMinimal\n  role\n  isActive\n}\n\nfragment UserBasic on users {\n  ...UserCoreShared\n  createdAt\n  updatedAt\n}\n\nfragment UserBase on users {\n  ...UserBasic\n}\n\nfragment UserWithRole on users {\n  ...UserBasic\n  assignedRoles {\n    assignedRole {\n      id\n      name\n      displayName\n    }\n  }\n}\n\nfragment UserProfile on users {\n  ...UserWithRole\n  username\n  clerkUserId\n  image\n  isStaff\n  managerId\n  deactivatedAt\n  deactivatedBy\n  managerUser {\n    ...UserMinimal\n  }\n}\n\nfragment UserSearchResult on users {\n  ...UserCoreShared\n  username\n  isStaff\n}\n\nfragment ClientMinimal on clients {\n  id\n  name\n}\n\nfragment ClientBase on clients {\n  id\n  name\n  active\n  contactEmail\n  contactPerson\n  contactPhone\n  createdAt\n}\n\nfragment ClientWithStats on clients {\n  ...ClientBase\n  currentEmployeeCount: payrollsAggregate(\n    where: {supersededDate: {_isNull: true}}\n  ) {\n    aggregate {\n      sum {\n        employeeCount\n      }\n    }\n  }\n  activePayrollCount: payrollsAggregate(\n    where: {supersededDate: {_isNull: true}, status: {_eq: \"Active\"}}\n  ) {\n    aggregate {\n      count\n    }\n  }\n}\n\nfragment ClientListBase on clients {\n  ...ClientBase\n  payrollCount: payrollsAggregate(where: {supersededDate: {_isNull: true}}) {\n    aggregate {\n      count\n    }\n  }\n}\n\nfragment PayrollMinimal on payrolls {\n  id\n  name\n  employeeCount\n  status\n}\n\nfragment PayrollBase on payrolls {\n  id\n  name\n  employeeCount\n  status\n  payrollSystem\n  processingTime\n  processingDaysBeforeEft\n  versionNumber\n  createdAt\n  updatedAt\n}\n\nfragment PayrollWithClient on payrolls {\n  ...PayrollBase\n  clientId\n  client {\n    id\n    name\n    active\n  }\n}\n\nfragment PayrollListItem on payrolls {\n  ...PayrollWithClient\n  primaryConsultantUserId\n  backupConsultantUserId\n  managerUserId\n  createdByUserId\n  primaryConsultant {\n    ...UserMinimal\n  }\n  manager {\n    ...UserMinimal\n  }\n}\n\nfragment PayrollWithDates on payrolls {\n  ...PayrollBase\n  goLiveDate\n  payrollDates(orderBy: {originalEftDate: ASC}) {\n    id\n    originalEftDate\n    adjustedEftDate\n    notes\n  }\n}\n\nfragment PayrollFullDetail on payrolls {\n  ...PayrollWithDates\n  ...PayrollWithClient\n  dateTypeId\n  cycleId\n  dateValue\n  versionReason\n  supersededDate\n  parentPayrollId\n  parentPayroll {\n    id\n    versionNumber\n  }\n  childPayrolls(orderBy: {versionNumber: DESC}) {\n    id\n    versionNumber\n    versionReason\n    createdAt\n  }\n  primaryConsultant {\n    ...UserMinimal\n  }\n  backupConsultant {\n    ...UserMinimal\n  }\n  manager {\n    ...UserMinimal\n  }\n}\n\nfragment NoteWithAuthor on notes {\n  id\n  content\n  isImportant\n  createdAt\n  entityId\n  entityType\n  authorUser {\n    ...UserMinimal\n  }\n}\n\nfragment PermissionBase on permissions {\n  id\n  resourceId\n  description\n  legacyPermissionName\n  action\n}\n\nfragment RoleWithPermissions on roles {\n  id\n  name\n  displayName\n  description\n  isSystemRole\n  priority\n  assignedPermissions {\n    grantedPermission {\n      ...PermissionBase\n    }\n  }\n}\n\nfragment AuditLogEntry on auditLogs {\n  id\n  userId\n  userEmail\n  userRole\n  action\n  resourceType\n  resourceId\n  eventTime\n  success\n  errorMessage\n  ipAddress\n  userAgent\n  metadata\n}\n\nfragment AuthEvent on authEvents {\n  id\n  userId\n  userEmail\n  eventType\n  eventTime\n  success\n  failureReason\n  ipAddress\n  userAgent\n  metadata\n}\n\nfragment DataAccessLog on dataAccessLogs {\n  id\n  userId\n  resourceType\n  resourceId\n  accessType\n  accessedAt\n  dataClassification\n  fieldsAccessed\n  rowCount\n  ipAddress\n  metadata\n}\n\nfragment PermissionChange on permissionChanges {\n  id\n  changedAt\n  changedByUserId\n  targetUserId\n  targetRoleId\n  changeType\n  permissionType\n  oldPermissions\n  newPermissions\n  reason\n  approvedByUserId\n}\n\nfragment PayrollDateInfo on payrollDates {\n  id\n  originalEftDate\n  adjustedEftDate\n  notes\n  createdAt\n}\n\nfragment PermissionOverrideInfo on permissionOverrides {\n  id\n  userId\n  role\n  resource\n  operation\n  granted\n  reason\n  conditions\n  expiresAt\n  createdBy\n  createdAt\n}": types.UserMinimalFragmentDoc,
    "mutation LogAuditEvent($input: auditLogsInsertInput!) {\n  insertAuditLogsOne: insertAuditLog(object: $input) {\n    id\n    eventTime\n  }\n}\n\nmutation RefreshData {\n  __typename\n}": types.LogAuditEventDocument,
    "query GetDashboardMetrics($userId: uuid!) {\n  clientsAggregate(where: {active: {_eq: true}}) {\n    aggregate {\n      count\n    }\n  }\n  activePayrollsAggregate: payrollsAggregate(\n    where: {supersededDate: {_isNull: true}, status: {_nin: [\"Completed\", \"Failed\"]}}\n  ) {\n    aggregate {\n      count\n    }\n  }\n  totalEmployeesAggregate: payrollsAggregate(\n    where: {supersededDate: {_isNull: true}}\n  ) {\n    aggregate {\n      sum {\n        employeeCount\n      }\n    }\n  }\n  upcomingPayrolls: payrolls(\n    where: {supersededDate: {_isNull: true}, status: {_nin: [\"Completed\", \"Failed\", \"Cancelled\"]}}\n    orderBy: {updatedAt: DESC}\n    limit: 5\n  ) {\n    ...PayrollMinimal\n    client {\n      ...ClientMinimal\n    }\n  }\n}\n\nquery GetDashboardStatsOptimized($limit: Int = 10) {\n  clientsAggregate {\n    aggregate {\n      count\n    }\n  }\n  totalPayrolls: payrollsAggregate(where: {supersededDate: {_isNull: true}}) {\n    aggregate {\n      count\n    }\n  }\n  activePayrolls: payrollsAggregate(\n    where: {supersededDate: {_isNull: true}, status: {_eq: \"active\"}}\n  ) {\n    aggregate {\n      count\n    }\n  }\n  processingPayrolls: payrollsAggregate(\n    where: {supersededDate: {_isNull: true}, status: {_eq: \"processing\"}}\n  ) {\n    aggregate {\n      count\n    }\n  }\n  upcomingPayrolls: payrolls(\n    where: {supersededDate: {_isNull: true}, status: {_eq: \"active\"}}\n    orderBy: {updatedAt: DESC}\n    limit: $limit\n  ) {\n    id\n    name\n    status\n    client {\n      id\n      name\n    }\n  }\n}\n\nquery GetClientsDashboardStats {\n  activeClientsCount: clientsAggregate(where: {active: {_eq: true}}) {\n    aggregate {\n      count\n    }\n  }\n  payrollsAggregate(where: {supersededDate: {_isNull: true}}) {\n    aggregate {\n      sum {\n        employeeCount\n      }\n    }\n  }\n  clientsNeedingAttention: clients(\n    where: {active: {_eq: true}, _not: {payrolls: {supersededDate: {_isNull: true}}}}\n  ) {\n    ...ClientMinimal\n  }\n}\n\nquery GetCurrentUser($userId: uuid!) {\n  user: userById(id: $userId) {\n    ...UserProfile\n  }\n}\n\nquery GetUsersForDropdown($role: user_role) {\n  users(where: {isActive: {_eq: true}, role: {_eq: $role}}, orderBy: {name: ASC}) {\n    ...UserMinimal\n  }\n}\n\nquery GetSystemHealth {\n  databaseHealth: users(limit: 1) {\n    id\n  }\n  recentActivity: auditLogsAggregate(\n    where: {eventTime: {_gte: \"now() - interval '1 hour'\"}}\n  ) {\n    aggregate {\n      count\n    }\n  }\n}\n\nquery GlobalSearch($searchTerm: String!) {\n  clients(\n    where: {_or: [{name: {_ilike: $searchTerm}}, {contactEmail: {_ilike: $searchTerm}}]}\n    limit: 5\n  ) {\n    ...ClientMinimal\n  }\n  users(\n    where: {_or: [{name: {_ilike: $searchTerm}}, {email: {_ilike: $searchTerm}}]}\n    limit: 5\n  ) {\n    ...UserMinimal\n  }\n  payrolls(\n    where: {client: {name: {_ilike: $searchTerm}}, supersededDate: {_isNull: true}}\n    limit: 5\n  ) {\n    ...PayrollMinimal\n    client {\n      ...ClientMinimal\n    }\n  }\n}": types.GetDashboardMetricsDocument,
    "subscription RecentActivity($resourceTypes: [String!]) {\n  auditLogs(\n    where: {resourceType: {_in: $resourceTypes}, eventTime: {_gte: \"now() - interval '5 minutes'\"}}\n    orderBy: {eventTime: DESC}\n    limit: 20\n  ) {\n    ...AuditLogEntry\n  }\n}\n\nsubscription AuthenticationEvents($userId: uuid) {\n  authEvents(\n    where: {userId: {_eq: $userId}, eventTime: {_gte: \"now() - interval '10 minutes'\"}}\n    orderBy: {eventTime: DESC}\n  ) {\n    ...AuthEvent\n  }\n}\n\nsubscription SensitiveDataAccess($resourceTypes: [String!]!) {\n  dataAccessLogs(\n    where: {resourceType: {_in: $resourceTypes}, accessedAt: {_gte: \"now() - interval '10 minutes'\"}}\n    orderBy: {accessedAt: DESC}\n  ) {\n    ...DataAccessLog\n  }\n}\n\nsubscription PermissionChangeStream {\n  permissionChanges(orderBy: {changedAt: DESC}, limit: 10) {\n    ...PermissionChange\n  }\n}": types.RecentActivityDocument,
};

/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 *
 *
 * @example
 * ```ts
 * const query = gql(`query GetUser($id: ID!) { user(id: $id) { name } }`);
 * ```
 *
 * The query argument is unknown!
 * Please regenerate the types.
 */
export function gql(source: string): unknown;

/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "fragment ResourceCore on resources {\n  id\n  name\n  displayName\n  description\n}\n\nfragment PermissionCore on permissions {\n  id\n  resourceId\n  action\n  description\n  legacyPermissionName\n  relatedResource {\n    ...ResourceCore\n  }\n}\n\nfragment PermissionWithResource on permissions {\n  ...PermissionCore\n}\n\nfragment RoleCore on roles {\n  id\n  name\n  displayName\n  description\n  isSystemRole\n  priority\n}\n\nfragment RolePermissionWithDetails on rolePermissions {\n  id\n  roleId\n  permissionId\n  conditions\n  createdAt\n  grantedToRole {\n    ...RoleCore\n  }\n  grantedPermission {\n    ...PermissionCore\n  }\n}\n\nfragment UserRoleWithDetails on userRoles {\n  id\n  userId\n  roleId\n  createdAt\n  roleUser {\n    ...UserMinimal\n  }\n  assignedRole {\n    ...RoleCore\n  }\n}\n\nfragment FeatureFlagCore on featureFlags {\n  id\n  featureName\n  isEnabled\n  allowedRoles\n  updatedAt\n}\n\nfragment AppSettingsCore on appSettings {\n  id\n  permissions\n}"): (typeof documents)["fragment ResourceCore on resources {\n  id\n  name\n  displayName\n  description\n}\n\nfragment PermissionCore on permissions {\n  id\n  resourceId\n  action\n  description\n  legacyPermissionName\n  relatedResource {\n    ...ResourceCore\n  }\n}\n\nfragment PermissionWithResource on permissions {\n  ...PermissionCore\n}\n\nfragment RoleCore on roles {\n  id\n  name\n  displayName\n  description\n  isSystemRole\n  priority\n}\n\nfragment RolePermissionWithDetails on rolePermissions {\n  id\n  roleId\n  permissionId\n  conditions\n  createdAt\n  grantedToRole {\n    ...RoleCore\n  }\n  grantedPermission {\n    ...PermissionCore\n  }\n}\n\nfragment UserRoleWithDetails on userRoles {\n  id\n  userId\n  roleId\n  createdAt\n  roleUser {\n    ...UserMinimal\n  }\n  assignedRole {\n    ...RoleCore\n  }\n}\n\nfragment FeatureFlagCore on featureFlags {\n  id\n  featureName\n  isEnabled\n  allowedRoles\n  updatedAt\n}\n\nfragment AppSettingsCore on appSettings {\n  id\n  permissions\n}"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "mutation CreateSystemResource($object: resourcesInsertInput!) {\n  insertResource(object: $object) {\n    ...ResourceCore\n  }\n}\n\nmutation UpdateSystemResource($id: uuid!, $set: resourcesSetInput!) {\n  updateResourceById(pkColumns: {id: $id}, _set: $set) {\n    ...ResourceCore\n  }\n}\n\nmutation DeleteSystemResource($id: uuid!) {\n  deleteResourceById(id: $id) {\n    id\n    name\n  }\n}\n\nmutation CreateSystemPermission($object: permissionsInsertInput!) {\n  insertPermission(object: $object) {\n    ...PermissionCore\n  }\n}\n\nmutation UpdateSystemPermission($id: uuid!, $set: permissionsSetInput!) {\n  updatePermissionById(pkColumns: {id: $id}, _set: $set) {\n    ...PermissionCore\n  }\n}\n\nmutation DeleteSystemPermission($id: uuid!) {\n  deletePermissionById(id: $id) {\n    id\n    action\n  }\n}\n\nmutation CreateSystemRole($object: rolesInsertInput!) {\n  insertRole(object: $object) {\n    ...RoleCore\n  }\n}\n\nmutation UpdateSystemRole($id: uuid!, $set: rolesSetInput!) {\n  updateRoleById(pkColumns: {id: $id}, _set: $set) {\n    ...RoleCore\n  }\n}\n\nmutation DeleteSystemRole($id: uuid!) {\n  deleteRoleById(id: $id) {\n    id\n    name\n  }\n}\n\nmutation AssignPermissionToRole($object: rolePermissionsInsertInput!) {\n  insertRolePermission(object: $object) {\n    ...RolePermissionWithDetails\n  }\n}\n\nmutation RemovePermissionFromRole($id: uuid!) {\n  deleteRolePermissionById(id: $id) {\n    id\n    roleId\n    permissionId\n  }\n}\n\nmutation UpdateSystemRolePermission($id: uuid!, $set: rolePermissionsSetInput!) {\n  updateRolePermissionById(pkColumns: {id: $id}, _set: $set) {\n    ...RolePermissionWithDetails\n  }\n}\n\nmutation AssignSystemRoleToUser($object: userRolesInsertInput!) {\n  insertUserRole(object: $object) {\n    ...UserRoleWithDetails\n  }\n}\n\nmutation RemoveSystemRoleFromUser($id: uuid!) {\n  deleteUserRoleById(id: $id) {\n    id\n    userId\n    roleId\n  }\n}\n\nmutation UpdateSystemUserRole($id: uuid!, $set: userRolesSetInput!) {\n  updateUserRoleById(pkColumns: {id: $id}, _set: $set) {\n    ...UserRoleWithDetails\n  }\n}\n\nmutation CreateFeatureFlag($object: featureFlagsInsertInput!) {\n  insertFeatureFlag(object: $object) {\n    ...FeatureFlagCore\n  }\n}\n\nmutation UpdateFeatureFlag($id: uuid!, $set: featureFlagsSetInput!) {\n  updateFeatureFlagById(pkColumns: {id: $id}, _set: $set) {\n    ...FeatureFlagCore\n  }\n}\n\nmutation DeleteFeatureFlag($id: uuid!) {\n  deleteFeatureFlagById(id: $id) {\n    id\n    featureName\n  }\n}\n\nmutation UpdateAppSettings($id: String!, $permissions: jsonb!) {\n  updateAppSettingById(pkColumns: {id: $id}, _set: {permissions: $permissions}) {\n    ...AppSettingsCore\n  }\n}\n\nmutation GrantUserPermission($userId: uuid!, $resource: String!, $operation: String!, $reason: String!, $expiresAt: timestamptz, $conditions: jsonb) {\n  insertPermissionOverride(\n    object: {userId: $userId, resource: $resource, operation: $operation, granted: true, reason: $reason, expiresAt: $expiresAt, conditions: $conditions}\n  ) {\n    id\n    userId\n    resource\n    operation\n    granted\n    reason\n    expiresAt\n    conditions\n    createdAt\n    createdBy\n    targetUser {\n      id\n      name\n      email\n    }\n    createdByUser {\n      id\n      name\n      email\n    }\n  }\n}\n\nmutation RestrictUserPermission($userId: uuid!, $resource: String!, $operation: String!, $reason: String!, $expiresAt: timestamptz, $conditions: jsonb) {\n  insertPermissionOverride(\n    object: {userId: $userId, resource: $resource, operation: $operation, granted: false, reason: $reason, expiresAt: $expiresAt, conditions: $conditions}\n  ) {\n    id\n    userId\n    resource\n    operation\n    granted\n    reason\n    expiresAt\n    conditions\n    createdAt\n    createdBy\n    targetUser {\n      id\n      name\n      email\n    }\n    createdByUser {\n      id\n      name\n      email\n    }\n  }\n}\n\nmutation GrantRolePermission($role: String!, $resource: String!, $operation: String!, $reason: String!, $expiresAt: timestamptz, $conditions: jsonb) {\n  insertPermissionOverride(\n    object: {role: $role, resource: $resource, operation: $operation, granted: true, reason: $reason, expiresAt: $expiresAt, conditions: $conditions}\n  ) {\n    id\n    role\n    resource\n    operation\n    granted\n    reason\n    expiresAt\n    conditions\n    createdAt\n    createdBy\n    createdByUser {\n      id\n      name\n      email\n    }\n  }\n}\n\nmutation RestrictRolePermission($role: String!, $resource: String!, $operation: String!, $reason: String!, $expiresAt: timestamptz, $conditions: jsonb) {\n  insertPermissionOverride(\n    object: {role: $role, resource: $resource, operation: $operation, granted: false, reason: $reason, expiresAt: $expiresAt, conditions: $conditions}\n  ) {\n    id\n    role\n    resource\n    operation\n    granted\n    reason\n    expiresAt\n    conditions\n    createdAt\n    createdBy\n    createdByUser {\n      id\n      name\n      email\n    }\n  }\n}\n\nmutation UpdatePermissionOverride($id: uuid!, $reason: String, $expiresAt: timestamptz, $conditions: jsonb) {\n  updatePermissionOverrideById(\n    pkColumns: {id: $id}\n    _set: {reason: $reason, expiresAt: $expiresAt, conditions: $conditions, updatedAt: \"now()\"}\n  ) {\n    id\n    userId\n    role\n    resource\n    operation\n    granted\n    reason\n    expiresAt\n    conditions\n    createdAt\n    updatedAt\n    createdBy\n    targetUser {\n      id\n      name\n      email\n    }\n    createdByUser {\n      id\n      name\n      email\n    }\n  }\n}\n\nmutation RemovePermissionOverride($id: uuid!) {\n  deletePermissionOverrideById(id: $id) {\n    id\n    userId\n    role\n    resource\n    operation\n    granted\n    reason\n  }\n}\n\nmutation BulkGrantUserPermissions($objects: [permissionOverridesInsertInput!]!) {\n  bulkInsertPermissionOverrides(objects: $objects) {\n    returning {\n      id\n      userId\n      resource\n      operation\n      granted\n      reason\n      expiresAt\n      createdAt\n    }\n    affectedRows\n  }\n}\n\nmutation BulkRemovePermissionOverrides($where: permissionOverridesBoolExp!) {\n  bulkDeletePermissionOverrides(where: $where) {\n    returning {\n      id\n      userId\n      role\n      resource\n      operation\n    }\n    affectedRows\n  }\n}\n\nmutation ExtendPermissionExpiration($id: uuid!, $newExpiresAt: timestamptz!, $reason: String!) {\n  updatePermissionOverrideById(\n    pkColumns: {id: $id}\n    _set: {expiresAt: $newExpiresAt, reason: $reason, updatedAt: \"now()\"}\n  ) {\n    id\n    userId\n    role\n    resource\n    operation\n    granted\n    expiresAt\n    reason\n    updatedAt\n  }\n}\n\nmutation RevokeExpiredPermissions {\n  bulkDeletePermissionOverrides(where: {expiresAt: {_lte: \"now()\"}}) {\n    returning {\n      id\n      userId\n      role\n      resource\n      operation\n      expiresAt\n    }\n    affectedRows\n  }\n}"): (typeof documents)["mutation CreateSystemResource($object: resourcesInsertInput!) {\n  insertResource(object: $object) {\n    ...ResourceCore\n  }\n}\n\nmutation UpdateSystemResource($id: uuid!, $set: resourcesSetInput!) {\n  updateResourceById(pkColumns: {id: $id}, _set: $set) {\n    ...ResourceCore\n  }\n}\n\nmutation DeleteSystemResource($id: uuid!) {\n  deleteResourceById(id: $id) {\n    id\n    name\n  }\n}\n\nmutation CreateSystemPermission($object: permissionsInsertInput!) {\n  insertPermission(object: $object) {\n    ...PermissionCore\n  }\n}\n\nmutation UpdateSystemPermission($id: uuid!, $set: permissionsSetInput!) {\n  updatePermissionById(pkColumns: {id: $id}, _set: $set) {\n    ...PermissionCore\n  }\n}\n\nmutation DeleteSystemPermission($id: uuid!) {\n  deletePermissionById(id: $id) {\n    id\n    action\n  }\n}\n\nmutation CreateSystemRole($object: rolesInsertInput!) {\n  insertRole(object: $object) {\n    ...RoleCore\n  }\n}\n\nmutation UpdateSystemRole($id: uuid!, $set: rolesSetInput!) {\n  updateRoleById(pkColumns: {id: $id}, _set: $set) {\n    ...RoleCore\n  }\n}\n\nmutation DeleteSystemRole($id: uuid!) {\n  deleteRoleById(id: $id) {\n    id\n    name\n  }\n}\n\nmutation AssignPermissionToRole($object: rolePermissionsInsertInput!) {\n  insertRolePermission(object: $object) {\n    ...RolePermissionWithDetails\n  }\n}\n\nmutation RemovePermissionFromRole($id: uuid!) {\n  deleteRolePermissionById(id: $id) {\n    id\n    roleId\n    permissionId\n  }\n}\n\nmutation UpdateSystemRolePermission($id: uuid!, $set: rolePermissionsSetInput!) {\n  updateRolePermissionById(pkColumns: {id: $id}, _set: $set) {\n    ...RolePermissionWithDetails\n  }\n}\n\nmutation AssignSystemRoleToUser($object: userRolesInsertInput!) {\n  insertUserRole(object: $object) {\n    ...UserRoleWithDetails\n  }\n}\n\nmutation RemoveSystemRoleFromUser($id: uuid!) {\n  deleteUserRoleById(id: $id) {\n    id\n    userId\n    roleId\n  }\n}\n\nmutation UpdateSystemUserRole($id: uuid!, $set: userRolesSetInput!) {\n  updateUserRoleById(pkColumns: {id: $id}, _set: $set) {\n    ...UserRoleWithDetails\n  }\n}\n\nmutation CreateFeatureFlag($object: featureFlagsInsertInput!) {\n  insertFeatureFlag(object: $object) {\n    ...FeatureFlagCore\n  }\n}\n\nmutation UpdateFeatureFlag($id: uuid!, $set: featureFlagsSetInput!) {\n  updateFeatureFlagById(pkColumns: {id: $id}, _set: $set) {\n    ...FeatureFlagCore\n  }\n}\n\nmutation DeleteFeatureFlag($id: uuid!) {\n  deleteFeatureFlagById(id: $id) {\n    id\n    featureName\n  }\n}\n\nmutation UpdateAppSettings($id: String!, $permissions: jsonb!) {\n  updateAppSettingById(pkColumns: {id: $id}, _set: {permissions: $permissions}) {\n    ...AppSettingsCore\n  }\n}\n\nmutation GrantUserPermission($userId: uuid!, $resource: String!, $operation: String!, $reason: String!, $expiresAt: timestamptz, $conditions: jsonb) {\n  insertPermissionOverride(\n    object: {userId: $userId, resource: $resource, operation: $operation, granted: true, reason: $reason, expiresAt: $expiresAt, conditions: $conditions}\n  ) {\n    id\n    userId\n    resource\n    operation\n    granted\n    reason\n    expiresAt\n    conditions\n    createdAt\n    createdBy\n    targetUser {\n      id\n      name\n      email\n    }\n    createdByUser {\n      id\n      name\n      email\n    }\n  }\n}\n\nmutation RestrictUserPermission($userId: uuid!, $resource: String!, $operation: String!, $reason: String!, $expiresAt: timestamptz, $conditions: jsonb) {\n  insertPermissionOverride(\n    object: {userId: $userId, resource: $resource, operation: $operation, granted: false, reason: $reason, expiresAt: $expiresAt, conditions: $conditions}\n  ) {\n    id\n    userId\n    resource\n    operation\n    granted\n    reason\n    expiresAt\n    conditions\n    createdAt\n    createdBy\n    targetUser {\n      id\n      name\n      email\n    }\n    createdByUser {\n      id\n      name\n      email\n    }\n  }\n}\n\nmutation GrantRolePermission($role: String!, $resource: String!, $operation: String!, $reason: String!, $expiresAt: timestamptz, $conditions: jsonb) {\n  insertPermissionOverride(\n    object: {role: $role, resource: $resource, operation: $operation, granted: true, reason: $reason, expiresAt: $expiresAt, conditions: $conditions}\n  ) {\n    id\n    role\n    resource\n    operation\n    granted\n    reason\n    expiresAt\n    conditions\n    createdAt\n    createdBy\n    createdByUser {\n      id\n      name\n      email\n    }\n  }\n}\n\nmutation RestrictRolePermission($role: String!, $resource: String!, $operation: String!, $reason: String!, $expiresAt: timestamptz, $conditions: jsonb) {\n  insertPermissionOverride(\n    object: {role: $role, resource: $resource, operation: $operation, granted: false, reason: $reason, expiresAt: $expiresAt, conditions: $conditions}\n  ) {\n    id\n    role\n    resource\n    operation\n    granted\n    reason\n    expiresAt\n    conditions\n    createdAt\n    createdBy\n    createdByUser {\n      id\n      name\n      email\n    }\n  }\n}\n\nmutation UpdatePermissionOverride($id: uuid!, $reason: String, $expiresAt: timestamptz, $conditions: jsonb) {\n  updatePermissionOverrideById(\n    pkColumns: {id: $id}\n    _set: {reason: $reason, expiresAt: $expiresAt, conditions: $conditions, updatedAt: \"now()\"}\n  ) {\n    id\n    userId\n    role\n    resource\n    operation\n    granted\n    reason\n    expiresAt\n    conditions\n    createdAt\n    updatedAt\n    createdBy\n    targetUser {\n      id\n      name\n      email\n    }\n    createdByUser {\n      id\n      name\n      email\n    }\n  }\n}\n\nmutation RemovePermissionOverride($id: uuid!) {\n  deletePermissionOverrideById(id: $id) {\n    id\n    userId\n    role\n    resource\n    operation\n    granted\n    reason\n  }\n}\n\nmutation BulkGrantUserPermissions($objects: [permissionOverridesInsertInput!]!) {\n  bulkInsertPermissionOverrides(objects: $objects) {\n    returning {\n      id\n      userId\n      resource\n      operation\n      granted\n      reason\n      expiresAt\n      createdAt\n    }\n    affectedRows\n  }\n}\n\nmutation BulkRemovePermissionOverrides($where: permissionOverridesBoolExp!) {\n  bulkDeletePermissionOverrides(where: $where) {\n    returning {\n      id\n      userId\n      role\n      resource\n      operation\n    }\n    affectedRows\n  }\n}\n\nmutation ExtendPermissionExpiration($id: uuid!, $newExpiresAt: timestamptz!, $reason: String!) {\n  updatePermissionOverrideById(\n    pkColumns: {id: $id}\n    _set: {expiresAt: $newExpiresAt, reason: $reason, updatedAt: \"now()\"}\n  ) {\n    id\n    userId\n    role\n    resource\n    operation\n    granted\n    expiresAt\n    reason\n    updatedAt\n  }\n}\n\nmutation RevokeExpiredPermissions {\n  bulkDeletePermissionOverrides(where: {expiresAt: {_lte: \"now()\"}}) {\n    returning {\n      id\n      userId\n      role\n      resource\n      operation\n      expiresAt\n    }\n    affectedRows\n  }\n}"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "query GetResources {\n  resources(orderBy: {name: ASC}) {\n    ...ResourceCore\n  }\n}\n\nquery GetResourceById($id: uuid!) {\n  resourceById(id: $id) {\n    ...ResourceCore\n  }\n}\n\nquery GetPermissions {\n  permissions(orderBy: {resourceId: ASC}) {\n    ...PermissionWithResource\n  }\n}\n\nquery GetPermissionById($id: uuid!) {\n  permissionById(id: $id) {\n    ...PermissionWithResource\n  }\n}\n\nquery GetRoles($where: rolesBoolExp, $orderBy: [rolesOrderBy!]) {\n  roles(where: $where, orderBy: $orderBy) {\n    ...RoleCore\n  }\n}\n\nquery GetRoleById($id: uuid!) {\n  roleById(id: $id) {\n    ...RoleCore\n    assignedPermissions {\n      ...RolePermissionWithDetails\n    }\n  }\n}\n\nquery GetRolePermissions($roleId: uuid!) {\n  rolePermissions(where: {roleId: {_eq: $roleId}}) {\n    ...RolePermissionWithDetails\n  }\n}\n\nquery GetSystemRoles {\n  roles(where: {isSystemRole: {_eq: true}}, orderBy: {priority: ASC}) {\n    ...RoleCore\n  }\n}\n\nquery GetUserRoles($userId: uuid!) {\n  userRoles(where: {userId: {_eq: $userId}}) {\n    ...UserRoleWithDetails\n  }\n}\n\nquery GetUsersWithRole($roleId: uuid!) {\n  userRoles(where: {roleId: {_eq: $roleId}}) {\n    ...UserRoleWithDetails\n  }\n}\n\nquery GetFeatureFlags($where: featureFlagsBoolExp) {\n  featureFlags(where: $where) {\n    ...FeatureFlagCore\n  }\n}\n\nquery GetFeatureFlagById($id: uuid!) {\n  featureFlagById(id: $id) {\n    ...FeatureFlagCore\n  }\n}\n\nquery GetAppSettings {\n  appSettings {\n    ...AppSettingsCore\n  }\n}\n\nquery GetUserEffectivePermissions($userId: uuid!) {\n  userRoles(where: {userId: {_eq: $userId}}) {\n    roleId\n    createdAt\n  }\n  permissionOverrides(\n    where: {userId: {_eq: $userId}, _or: [{expiresAt: {_isNull: true}}, {expiresAt: {_gt: \"now()\"}}]}\n  ) {\n    resource\n    operation\n    granted\n    conditions\n  }\n}\n\nquery GetUserPermissionOverrides($userId: uuid!) {\n  permissionOverrides(\n    where: {userId: {_eq: $userId}, _or: [{expiresAt: {_isNull: true}}, {expiresAt: {_gt: \"now()\"}}]}\n    orderBy: {createdAt: DESC}\n  ) {\n    id\n    userId\n    role\n    resource\n    operation\n    granted\n    conditions\n    reason\n    createdBy\n    expiresAt\n    createdAt\n    updatedAt\n    createdByUser {\n      id\n      name\n      email\n    }\n  }\n}\n\nquery GetRolePermissionOverrides($role: String!) {\n  permissionOverrides(\n    where: {role: {_eq: $role}, _or: [{expiresAt: {_isNull: true}}, {expiresAt: {_gt: \"now()\"}}]}\n    orderBy: {createdAt: DESC}\n  ) {\n    id\n    userId\n    role\n    resource\n    operation\n    granted\n    conditions\n    reason\n    createdBy\n    expiresAt\n    createdAt\n    updatedAt\n    createdByUser {\n      id\n      name\n      email\n    }\n  }\n}\n\nquery GetRoleByName($name: String!) {\n  roles(where: {name: {_eq: $name}}) {\n    id\n    name\n    displayName\n    description\n    priority\n    isSystemRole\n    assignedPermissions {\n      id\n      permissionId\n      conditions\n    }\n  }\n}\n\nquery GetPermissionsByResource($resourceId: uuid!) {\n  permissions(where: {resourceId: {_eq: $resourceId}}, orderBy: {action: ASC}) {\n    id\n    action\n    description\n    legacyPermissionName\n    resourceId\n    createdAt\n    updatedAt\n  }\n}\n\nquery GetPermissionAuditLog($limit: Int = 50, $offset: Int = 0, $userId: uuid, $targetUserId: uuid) {\n  permissionOverrides(\n    where: {_or: [{createdBy: {_eq: $userId}}, {userId: {_eq: $targetUserId}}]}\n    orderBy: {createdAt: DESC}\n    limit: $limit\n    offset: $offset\n  ) {\n    id\n    userId\n    role\n    resource\n    operation\n    granted\n    reason\n    createdAt\n    createdBy\n    createdByUser {\n      id\n      name\n      email\n    }\n  }\n}\n\nquery SearchPermissionOverrides($searchTerm: String!, $limit: Int = 50, $offset: Int = 0) {\n  permissionOverrides(\n    where: {_or: [{reason: {_ilike: $searchTerm}}, {resource: {_ilike: $searchTerm}}, {operation: {_ilike: $searchTerm}}]}\n    orderBy: {createdAt: DESC}\n    limit: $limit\n    offset: $offset\n  ) {\n    id\n    userId\n    role\n    resource\n    operation\n    granted\n    conditions\n    reason\n    createdBy\n    expiresAt\n    createdAt\n    updatedAt\n    createdByUser {\n      id\n      name\n      email\n    }\n    targetUser {\n      id\n      name\n      email\n    }\n  }\n}\n\nquery GetExpiringPermissions {\n  permissionOverrides(\n    where: {expiresAt: {_isNull: false, _gt: \"now()\"}}\n    orderBy: {expiresAt: ASC}\n  ) {\n    id\n    userId\n    role\n    resource\n    operation\n    granted\n    reason\n    expiresAt\n    createdAt\n    createdByUser {\n      id\n      name\n      email\n    }\n    targetUser {\n      id\n      name\n      email\n    }\n  }\n}\n\nquery GetPermissionAnalytics {\n  roles_count: rolesAggregate {\n    aggregate {\n      count\n    }\n  }\n  permissions_count: permissionsAggregate {\n    aggregate {\n      count\n    }\n  }\n  resources_count: resourcesAggregate {\n    aggregate {\n      count\n    }\n  }\n  userRoles_count: userRolesAggregate {\n    aggregate {\n      count\n    }\n  }\n  totalOverrides: permissionOverridesAggregate {\n    aggregate {\n      count\n    }\n  }\n  activeOverrides: permissionOverridesAggregate(\n    where: {_or: [{expiresAt: {_isNull: true}}, {expiresAt: {_gt: \"now()\"}}]}\n  ) {\n    aggregate {\n      count\n    }\n  }\n  expiredOverrides: permissionOverridesAggregate(\n    where: {expiresAt: {_lte: \"now()\"}}\n  ) {\n    aggregate {\n      count\n    }\n  }\n  roles_by_priority: roles(orderBy: {priority: ASC}) {\n    name\n    displayName\n    priority\n    assignedToUsersAggregate {\n      aggregate {\n        count\n      }\n    }\n  }\n}"): (typeof documents)["query GetResources {\n  resources(orderBy: {name: ASC}) {\n    ...ResourceCore\n  }\n}\n\nquery GetResourceById($id: uuid!) {\n  resourceById(id: $id) {\n    ...ResourceCore\n  }\n}\n\nquery GetPermissions {\n  permissions(orderBy: {resourceId: ASC}) {\n    ...PermissionWithResource\n  }\n}\n\nquery GetPermissionById($id: uuid!) {\n  permissionById(id: $id) {\n    ...PermissionWithResource\n  }\n}\n\nquery GetRoles($where: rolesBoolExp, $orderBy: [rolesOrderBy!]) {\n  roles(where: $where, orderBy: $orderBy) {\n    ...RoleCore\n  }\n}\n\nquery GetRoleById($id: uuid!) {\n  roleById(id: $id) {\n    ...RoleCore\n    assignedPermissions {\n      ...RolePermissionWithDetails\n    }\n  }\n}\n\nquery GetRolePermissions($roleId: uuid!) {\n  rolePermissions(where: {roleId: {_eq: $roleId}}) {\n    ...RolePermissionWithDetails\n  }\n}\n\nquery GetSystemRoles {\n  roles(where: {isSystemRole: {_eq: true}}, orderBy: {priority: ASC}) {\n    ...RoleCore\n  }\n}\n\nquery GetUserRoles($userId: uuid!) {\n  userRoles(where: {userId: {_eq: $userId}}) {\n    ...UserRoleWithDetails\n  }\n}\n\nquery GetUsersWithRole($roleId: uuid!) {\n  userRoles(where: {roleId: {_eq: $roleId}}) {\n    ...UserRoleWithDetails\n  }\n}\n\nquery GetFeatureFlags($where: featureFlagsBoolExp) {\n  featureFlags(where: $where) {\n    ...FeatureFlagCore\n  }\n}\n\nquery GetFeatureFlagById($id: uuid!) {\n  featureFlagById(id: $id) {\n    ...FeatureFlagCore\n  }\n}\n\nquery GetAppSettings {\n  appSettings {\n    ...AppSettingsCore\n  }\n}\n\nquery GetUserEffectivePermissions($userId: uuid!) {\n  userRoles(where: {userId: {_eq: $userId}}) {\n    roleId\n    createdAt\n  }\n  permissionOverrides(\n    where: {userId: {_eq: $userId}, _or: [{expiresAt: {_isNull: true}}, {expiresAt: {_gt: \"now()\"}}]}\n  ) {\n    resource\n    operation\n    granted\n    conditions\n  }\n}\n\nquery GetUserPermissionOverrides($userId: uuid!) {\n  permissionOverrides(\n    where: {userId: {_eq: $userId}, _or: [{expiresAt: {_isNull: true}}, {expiresAt: {_gt: \"now()\"}}]}\n    orderBy: {createdAt: DESC}\n  ) {\n    id\n    userId\n    role\n    resource\n    operation\n    granted\n    conditions\n    reason\n    createdBy\n    expiresAt\n    createdAt\n    updatedAt\n    createdByUser {\n      id\n      name\n      email\n    }\n  }\n}\n\nquery GetRolePermissionOverrides($role: String!) {\n  permissionOverrides(\n    where: {role: {_eq: $role}, _or: [{expiresAt: {_isNull: true}}, {expiresAt: {_gt: \"now()\"}}]}\n    orderBy: {createdAt: DESC}\n  ) {\n    id\n    userId\n    role\n    resource\n    operation\n    granted\n    conditions\n    reason\n    createdBy\n    expiresAt\n    createdAt\n    updatedAt\n    createdByUser {\n      id\n      name\n      email\n    }\n  }\n}\n\nquery GetRoleByName($name: String!) {\n  roles(where: {name: {_eq: $name}}) {\n    id\n    name\n    displayName\n    description\n    priority\n    isSystemRole\n    assignedPermissions {\n      id\n      permissionId\n      conditions\n    }\n  }\n}\n\nquery GetPermissionsByResource($resourceId: uuid!) {\n  permissions(where: {resourceId: {_eq: $resourceId}}, orderBy: {action: ASC}) {\n    id\n    action\n    description\n    legacyPermissionName\n    resourceId\n    createdAt\n    updatedAt\n  }\n}\n\nquery GetPermissionAuditLog($limit: Int = 50, $offset: Int = 0, $userId: uuid, $targetUserId: uuid) {\n  permissionOverrides(\n    where: {_or: [{createdBy: {_eq: $userId}}, {userId: {_eq: $targetUserId}}]}\n    orderBy: {createdAt: DESC}\n    limit: $limit\n    offset: $offset\n  ) {\n    id\n    userId\n    role\n    resource\n    operation\n    granted\n    reason\n    createdAt\n    createdBy\n    createdByUser {\n      id\n      name\n      email\n    }\n  }\n}\n\nquery SearchPermissionOverrides($searchTerm: String!, $limit: Int = 50, $offset: Int = 0) {\n  permissionOverrides(\n    where: {_or: [{reason: {_ilike: $searchTerm}}, {resource: {_ilike: $searchTerm}}, {operation: {_ilike: $searchTerm}}]}\n    orderBy: {createdAt: DESC}\n    limit: $limit\n    offset: $offset\n  ) {\n    id\n    userId\n    role\n    resource\n    operation\n    granted\n    conditions\n    reason\n    createdBy\n    expiresAt\n    createdAt\n    updatedAt\n    createdByUser {\n      id\n      name\n      email\n    }\n    targetUser {\n      id\n      name\n      email\n    }\n  }\n}\n\nquery GetExpiringPermissions {\n  permissionOverrides(\n    where: {expiresAt: {_isNull: false, _gt: \"now()\"}}\n    orderBy: {expiresAt: ASC}\n  ) {\n    id\n    userId\n    role\n    resource\n    operation\n    granted\n    reason\n    expiresAt\n    createdAt\n    createdByUser {\n      id\n      name\n      email\n    }\n    targetUser {\n      id\n      name\n      email\n    }\n  }\n}\n\nquery GetPermissionAnalytics {\n  roles_count: rolesAggregate {\n    aggregate {\n      count\n    }\n  }\n  permissions_count: permissionsAggregate {\n    aggregate {\n      count\n    }\n  }\n  resources_count: resourcesAggregate {\n    aggregate {\n      count\n    }\n  }\n  userRoles_count: userRolesAggregate {\n    aggregate {\n      count\n    }\n  }\n  totalOverrides: permissionOverridesAggregate {\n    aggregate {\n      count\n    }\n  }\n  activeOverrides: permissionOverridesAggregate(\n    where: {_or: [{expiresAt: {_isNull: true}}, {expiresAt: {_gt: \"now()\"}}]}\n  ) {\n    aggregate {\n      count\n    }\n  }\n  expiredOverrides: permissionOverridesAggregate(\n    where: {expiresAt: {_lte: \"now()\"}}\n  ) {\n    aggregate {\n      count\n    }\n  }\n  roles_by_priority: roles(orderBy: {priority: ASC}) {\n    name\n    displayName\n    priority\n    assignedToUsersAggregate {\n      aggregate {\n        count\n      }\n    }\n  }\n}"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "subscription RolesUpdated {\n  roles(orderBy: {updatedAt: DESC}) {\n    ...RoleCore\n  }\n}\n\nsubscription UserRolesUpdated($userId: uuid!) {\n  userRoles(where: {userId: {_eq: $userId}}) {\n    ...UserRoleWithDetails\n  }\n}\n\nsubscription RolePermissionsUpdated($roleId: uuid!) {\n  rolePermissions(where: {roleId: {_eq: $roleId}}) {\n    ...RolePermissionWithDetails\n  }\n}\n\nsubscription PermissionsUpdated {\n  permissions(orderBy: {updatedAt: DESC}) {\n    ...PermissionWithResource\n  }\n}\n\nsubscription ResourcesUpdated {\n  resources(orderBy: {updatedAt: DESC}) {\n    ...ResourceCore\n  }\n}"): (typeof documents)["subscription RolesUpdated {\n  roles(orderBy: {updatedAt: DESC}) {\n    ...RoleCore\n  }\n}\n\nsubscription UserRolesUpdated($userId: uuid!) {\n  userRoles(where: {userId: {_eq: $userId}}) {\n    ...UserRoleWithDetails\n  }\n}\n\nsubscription RolePermissionsUpdated($roleId: uuid!) {\n  rolePermissions(where: {roleId: {_eq: $roleId}}) {\n    ...RolePermissionWithDetails\n  }\n}\n\nsubscription PermissionsUpdated {\n  permissions(orderBy: {updatedAt: DESC}) {\n    ...PermissionWithResource\n  }\n}\n\nsubscription ResourcesUpdated {\n  resources(orderBy: {updatedAt: DESC}) {\n    ...ResourceCore\n  }\n}"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "fragment UserMinimal on users {\n  id\n  name\n  email\n}\n\nfragment UserCoreShared on users {\n  ...UserMinimal\n  role\n  isActive\n}\n\nfragment UserBasic on users {\n  ...UserCoreShared\n  createdAt\n  updatedAt\n}\n\nfragment UserBase on users {\n  ...UserBasic\n}\n\nfragment UserWithRole on users {\n  ...UserBasic\n  assignedRoles {\n    assignedRole {\n      id\n      name\n      displayName\n    }\n  }\n}\n\nfragment UserProfile on users {\n  ...UserWithRole\n  username\n  clerkUserId\n  image\n  isStaff\n  managerId\n  deactivatedAt\n  deactivatedBy\n  managerUser {\n    ...UserMinimal\n  }\n}\n\nfragment UserSearchResult on users {\n  ...UserCoreShared\n  username\n  isStaff\n}\n\nfragment ClientMinimal on clients {\n  id\n  name\n}\n\nfragment ClientBase on clients {\n  id\n  name\n  active\n  contactEmail\n  contactPerson\n  contactPhone\n  createdAt\n}\n\nfragment ClientWithStats on clients {\n  ...ClientBase\n  currentEmployeeCount: payrollsAggregate(\n    where: {supersededDate: {_isNull: true}}\n  ) {\n    aggregate {\n      sum {\n        employeeCount\n      }\n    }\n  }\n  activePayrollCount: payrollsAggregate(\n    where: {supersededDate: {_isNull: true}, status: {_eq: \"Active\"}}\n  ) {\n    aggregate {\n      count\n    }\n  }\n}\n\nfragment ClientListBase on clients {\n  ...ClientBase\n  payrollCount: payrollsAggregate(where: {supersededDate: {_isNull: true}}) {\n    aggregate {\n      count\n    }\n  }\n}\n\nfragment PayrollMinimal on payrolls {\n  id\n  name\n  employeeCount\n  status\n}\n\nfragment PayrollBase on payrolls {\n  id\n  name\n  employeeCount\n  status\n  payrollSystem\n  processingTime\n  processingDaysBeforeEft\n  versionNumber\n  createdAt\n  updatedAt\n}\n\nfragment PayrollWithClient on payrolls {\n  ...PayrollBase\n  clientId\n  client {\n    id\n    name\n    active\n  }\n}\n\nfragment PayrollListItem on payrolls {\n  ...PayrollWithClient\n  primaryConsultantUserId\n  backupConsultantUserId\n  managerUserId\n  createdByUserId\n  primaryConsultant {\n    ...UserMinimal\n  }\n  manager {\n    ...UserMinimal\n  }\n}\n\nfragment PayrollWithDates on payrolls {\n  ...PayrollBase\n  goLiveDate\n  payrollDates(orderBy: {originalEftDate: ASC}) {\n    id\n    originalEftDate\n    adjustedEftDate\n    notes\n  }\n}\n\nfragment PayrollFullDetail on payrolls {\n  ...PayrollWithDates\n  ...PayrollWithClient\n  dateTypeId\n  cycleId\n  dateValue\n  versionReason\n  supersededDate\n  parentPayrollId\n  parentPayroll {\n    id\n    versionNumber\n  }\n  childPayrolls(orderBy: {versionNumber: DESC}) {\n    id\n    versionNumber\n    versionReason\n    createdAt\n  }\n  primaryConsultant {\n    ...UserMinimal\n  }\n  backupConsultant {\n    ...UserMinimal\n  }\n  manager {\n    ...UserMinimal\n  }\n}\n\nfragment NoteWithAuthor on notes {\n  id\n  content\n  isImportant\n  createdAt\n  entityId\n  entityType\n  authorUser {\n    ...UserMinimal\n  }\n}\n\nfragment PermissionBase on permissions {\n  id\n  resourceId\n  description\n  legacyPermissionName\n  action\n}\n\nfragment RoleWithPermissions on roles {\n  id\n  name\n  displayName\n  description\n  isSystemRole\n  priority\n  assignedPermissions {\n    grantedPermission {\n      ...PermissionBase\n    }\n  }\n}\n\nfragment AuditLogEntry on auditLogs {\n  id\n  userId\n  userEmail\n  userRole\n  action\n  resourceType\n  resourceId\n  eventTime\n  success\n  errorMessage\n  ipAddress\n  userAgent\n  metadata\n}\n\nfragment AuthEvent on authEvents {\n  id\n  userId\n  userEmail\n  eventType\n  eventTime\n  success\n  failureReason\n  ipAddress\n  userAgent\n  metadata\n}\n\nfragment DataAccessLog on dataAccessLogs {\n  id\n  userId\n  resourceType\n  resourceId\n  accessType\n  accessedAt\n  dataClassification\n  fieldsAccessed\n  rowCount\n  ipAddress\n  metadata\n}\n\nfragment PermissionChange on permissionChanges {\n  id\n  changedAt\n  changedByUserId\n  targetUserId\n  targetRoleId\n  changeType\n  permissionType\n  oldPermissions\n  newPermissions\n  reason\n  approvedByUserId\n}\n\nfragment PayrollDateInfo on payrollDates {\n  id\n  originalEftDate\n  adjustedEftDate\n  notes\n  createdAt\n}\n\nfragment PermissionOverrideInfo on permissionOverrides {\n  id\n  userId\n  role\n  resource\n  operation\n  granted\n  reason\n  conditions\n  expiresAt\n  createdBy\n  createdAt\n}"): (typeof documents)["fragment UserMinimal on users {\n  id\n  name\n  email\n}\n\nfragment UserCoreShared on users {\n  ...UserMinimal\n  role\n  isActive\n}\n\nfragment UserBasic on users {\n  ...UserCoreShared\n  createdAt\n  updatedAt\n}\n\nfragment UserBase on users {\n  ...UserBasic\n}\n\nfragment UserWithRole on users {\n  ...UserBasic\n  assignedRoles {\n    assignedRole {\n      id\n      name\n      displayName\n    }\n  }\n}\n\nfragment UserProfile on users {\n  ...UserWithRole\n  username\n  clerkUserId\n  image\n  isStaff\n  managerId\n  deactivatedAt\n  deactivatedBy\n  managerUser {\n    ...UserMinimal\n  }\n}\n\nfragment UserSearchResult on users {\n  ...UserCoreShared\n  username\n  isStaff\n}\n\nfragment ClientMinimal on clients {\n  id\n  name\n}\n\nfragment ClientBase on clients {\n  id\n  name\n  active\n  contactEmail\n  contactPerson\n  contactPhone\n  createdAt\n}\n\nfragment ClientWithStats on clients {\n  ...ClientBase\n  currentEmployeeCount: payrollsAggregate(\n    where: {supersededDate: {_isNull: true}}\n  ) {\n    aggregate {\n      sum {\n        employeeCount\n      }\n    }\n  }\n  activePayrollCount: payrollsAggregate(\n    where: {supersededDate: {_isNull: true}, status: {_eq: \"Active\"}}\n  ) {\n    aggregate {\n      count\n    }\n  }\n}\n\nfragment ClientListBase on clients {\n  ...ClientBase\n  payrollCount: payrollsAggregate(where: {supersededDate: {_isNull: true}}) {\n    aggregate {\n      count\n    }\n  }\n}\n\nfragment PayrollMinimal on payrolls {\n  id\n  name\n  employeeCount\n  status\n}\n\nfragment PayrollBase on payrolls {\n  id\n  name\n  employeeCount\n  status\n  payrollSystem\n  processingTime\n  processingDaysBeforeEft\n  versionNumber\n  createdAt\n  updatedAt\n}\n\nfragment PayrollWithClient on payrolls {\n  ...PayrollBase\n  clientId\n  client {\n    id\n    name\n    active\n  }\n}\n\nfragment PayrollListItem on payrolls {\n  ...PayrollWithClient\n  primaryConsultantUserId\n  backupConsultantUserId\n  managerUserId\n  createdByUserId\n  primaryConsultant {\n    ...UserMinimal\n  }\n  manager {\n    ...UserMinimal\n  }\n}\n\nfragment PayrollWithDates on payrolls {\n  ...PayrollBase\n  goLiveDate\n  payrollDates(orderBy: {originalEftDate: ASC}) {\n    id\n    originalEftDate\n    adjustedEftDate\n    notes\n  }\n}\n\nfragment PayrollFullDetail on payrolls {\n  ...PayrollWithDates\n  ...PayrollWithClient\n  dateTypeId\n  cycleId\n  dateValue\n  versionReason\n  supersededDate\n  parentPayrollId\n  parentPayroll {\n    id\n    versionNumber\n  }\n  childPayrolls(orderBy: {versionNumber: DESC}) {\n    id\n    versionNumber\n    versionReason\n    createdAt\n  }\n  primaryConsultant {\n    ...UserMinimal\n  }\n  backupConsultant {\n    ...UserMinimal\n  }\n  manager {\n    ...UserMinimal\n  }\n}\n\nfragment NoteWithAuthor on notes {\n  id\n  content\n  isImportant\n  createdAt\n  entityId\n  entityType\n  authorUser {\n    ...UserMinimal\n  }\n}\n\nfragment PermissionBase on permissions {\n  id\n  resourceId\n  description\n  legacyPermissionName\n  action\n}\n\nfragment RoleWithPermissions on roles {\n  id\n  name\n  displayName\n  description\n  isSystemRole\n  priority\n  assignedPermissions {\n    grantedPermission {\n      ...PermissionBase\n    }\n  }\n}\n\nfragment AuditLogEntry on auditLogs {\n  id\n  userId\n  userEmail\n  userRole\n  action\n  resourceType\n  resourceId\n  eventTime\n  success\n  errorMessage\n  ipAddress\n  userAgent\n  metadata\n}\n\nfragment AuthEvent on authEvents {\n  id\n  userId\n  userEmail\n  eventType\n  eventTime\n  success\n  failureReason\n  ipAddress\n  userAgent\n  metadata\n}\n\nfragment DataAccessLog on dataAccessLogs {\n  id\n  userId\n  resourceType\n  resourceId\n  accessType\n  accessedAt\n  dataClassification\n  fieldsAccessed\n  rowCount\n  ipAddress\n  metadata\n}\n\nfragment PermissionChange on permissionChanges {\n  id\n  changedAt\n  changedByUserId\n  targetUserId\n  targetRoleId\n  changeType\n  permissionType\n  oldPermissions\n  newPermissions\n  reason\n  approvedByUserId\n}\n\nfragment PayrollDateInfo on payrollDates {\n  id\n  originalEftDate\n  adjustedEftDate\n  notes\n  createdAt\n}\n\nfragment PermissionOverrideInfo on permissionOverrides {\n  id\n  userId\n  role\n  resource\n  operation\n  granted\n  reason\n  conditions\n  expiresAt\n  createdBy\n  createdAt\n}"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "mutation LogAuditEvent($input: auditLogsInsertInput!) {\n  insertAuditLogsOne: insertAuditLog(object: $input) {\n    id\n    eventTime\n  }\n}\n\nmutation RefreshData {\n  __typename\n}"): (typeof documents)["mutation LogAuditEvent($input: auditLogsInsertInput!) {\n  insertAuditLogsOne: insertAuditLog(object: $input) {\n    id\n    eventTime\n  }\n}\n\nmutation RefreshData {\n  __typename\n}"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "query GetDashboardMetrics($userId: uuid!) {\n  clientsAggregate(where: {active: {_eq: true}}) {\n    aggregate {\n      count\n    }\n  }\n  activePayrollsAggregate: payrollsAggregate(\n    where: {supersededDate: {_isNull: true}, status: {_nin: [\"Completed\", \"Failed\"]}}\n  ) {\n    aggregate {\n      count\n    }\n  }\n  totalEmployeesAggregate: payrollsAggregate(\n    where: {supersededDate: {_isNull: true}}\n  ) {\n    aggregate {\n      sum {\n        employeeCount\n      }\n    }\n  }\n  upcomingPayrolls: payrolls(\n    where: {supersededDate: {_isNull: true}, status: {_nin: [\"Completed\", \"Failed\", \"Cancelled\"]}}\n    orderBy: {updatedAt: DESC}\n    limit: 5\n  ) {\n    ...PayrollMinimal\n    client {\n      ...ClientMinimal\n    }\n  }\n}\n\nquery GetDashboardStatsOptimized($limit: Int = 10) {\n  clientsAggregate {\n    aggregate {\n      count\n    }\n  }\n  totalPayrolls: payrollsAggregate(where: {supersededDate: {_isNull: true}}) {\n    aggregate {\n      count\n    }\n  }\n  activePayrolls: payrollsAggregate(\n    where: {supersededDate: {_isNull: true}, status: {_eq: \"active\"}}\n  ) {\n    aggregate {\n      count\n    }\n  }\n  processingPayrolls: payrollsAggregate(\n    where: {supersededDate: {_isNull: true}, status: {_eq: \"processing\"}}\n  ) {\n    aggregate {\n      count\n    }\n  }\n  upcomingPayrolls: payrolls(\n    where: {supersededDate: {_isNull: true}, status: {_eq: \"active\"}}\n    orderBy: {updatedAt: DESC}\n    limit: $limit\n  ) {\n    id\n    name\n    status\n    client {\n      id\n      name\n    }\n  }\n}\n\nquery GetClientsDashboardStats {\n  activeClientsCount: clientsAggregate(where: {active: {_eq: true}}) {\n    aggregate {\n      count\n    }\n  }\n  payrollsAggregate(where: {supersededDate: {_isNull: true}}) {\n    aggregate {\n      sum {\n        employeeCount\n      }\n    }\n  }\n  clientsNeedingAttention: clients(\n    where: {active: {_eq: true}, _not: {payrolls: {supersededDate: {_isNull: true}}}}\n  ) {\n    ...ClientMinimal\n  }\n}\n\nquery GetCurrentUser($userId: uuid!) {\n  user: userById(id: $userId) {\n    ...UserProfile\n  }\n}\n\nquery GetUsersForDropdown($role: user_role) {\n  users(where: {isActive: {_eq: true}, role: {_eq: $role}}, orderBy: {name: ASC}) {\n    ...UserMinimal\n  }\n}\n\nquery GetSystemHealth {\n  databaseHealth: users(limit: 1) {\n    id\n  }\n  recentActivity: auditLogsAggregate(\n    where: {eventTime: {_gte: \"now() - interval '1 hour'\"}}\n  ) {\n    aggregate {\n      count\n    }\n  }\n}\n\nquery GlobalSearch($searchTerm: String!) {\n  clients(\n    where: {_or: [{name: {_ilike: $searchTerm}}, {contactEmail: {_ilike: $searchTerm}}]}\n    limit: 5\n  ) {\n    ...ClientMinimal\n  }\n  users(\n    where: {_or: [{name: {_ilike: $searchTerm}}, {email: {_ilike: $searchTerm}}]}\n    limit: 5\n  ) {\n    ...UserMinimal\n  }\n  payrolls(\n    where: {client: {name: {_ilike: $searchTerm}}, supersededDate: {_isNull: true}}\n    limit: 5\n  ) {\n    ...PayrollMinimal\n    client {\n      ...ClientMinimal\n    }\n  }\n}"): (typeof documents)["query GetDashboardMetrics($userId: uuid!) {\n  clientsAggregate(where: {active: {_eq: true}}) {\n    aggregate {\n      count\n    }\n  }\n  activePayrollsAggregate: payrollsAggregate(\n    where: {supersededDate: {_isNull: true}, status: {_nin: [\"Completed\", \"Failed\"]}}\n  ) {\n    aggregate {\n      count\n    }\n  }\n  totalEmployeesAggregate: payrollsAggregate(\n    where: {supersededDate: {_isNull: true}}\n  ) {\n    aggregate {\n      sum {\n        employeeCount\n      }\n    }\n  }\n  upcomingPayrolls: payrolls(\n    where: {supersededDate: {_isNull: true}, status: {_nin: [\"Completed\", \"Failed\", \"Cancelled\"]}}\n    orderBy: {updatedAt: DESC}\n    limit: 5\n  ) {\n    ...PayrollMinimal\n    client {\n      ...ClientMinimal\n    }\n  }\n}\n\nquery GetDashboardStatsOptimized($limit: Int = 10) {\n  clientsAggregate {\n    aggregate {\n      count\n    }\n  }\n  totalPayrolls: payrollsAggregate(where: {supersededDate: {_isNull: true}}) {\n    aggregate {\n      count\n    }\n  }\n  activePayrolls: payrollsAggregate(\n    where: {supersededDate: {_isNull: true}, status: {_eq: \"active\"}}\n  ) {\n    aggregate {\n      count\n    }\n  }\n  processingPayrolls: payrollsAggregate(\n    where: {supersededDate: {_isNull: true}, status: {_eq: \"processing\"}}\n  ) {\n    aggregate {\n      count\n    }\n  }\n  upcomingPayrolls: payrolls(\n    where: {supersededDate: {_isNull: true}, status: {_eq: \"active\"}}\n    orderBy: {updatedAt: DESC}\n    limit: $limit\n  ) {\n    id\n    name\n    status\n    client {\n      id\n      name\n    }\n  }\n}\n\nquery GetClientsDashboardStats {\n  activeClientsCount: clientsAggregate(where: {active: {_eq: true}}) {\n    aggregate {\n      count\n    }\n  }\n  payrollsAggregate(where: {supersededDate: {_isNull: true}}) {\n    aggregate {\n      sum {\n        employeeCount\n      }\n    }\n  }\n  clientsNeedingAttention: clients(\n    where: {active: {_eq: true}, _not: {payrolls: {supersededDate: {_isNull: true}}}}\n  ) {\n    ...ClientMinimal\n  }\n}\n\nquery GetCurrentUser($userId: uuid!) {\n  user: userById(id: $userId) {\n    ...UserProfile\n  }\n}\n\nquery GetUsersForDropdown($role: user_role) {\n  users(where: {isActive: {_eq: true}, role: {_eq: $role}}, orderBy: {name: ASC}) {\n    ...UserMinimal\n  }\n}\n\nquery GetSystemHealth {\n  databaseHealth: users(limit: 1) {\n    id\n  }\n  recentActivity: auditLogsAggregate(\n    where: {eventTime: {_gte: \"now() - interval '1 hour'\"}}\n  ) {\n    aggregate {\n      count\n    }\n  }\n}\n\nquery GlobalSearch($searchTerm: String!) {\n  clients(\n    where: {_or: [{name: {_ilike: $searchTerm}}, {contactEmail: {_ilike: $searchTerm}}]}\n    limit: 5\n  ) {\n    ...ClientMinimal\n  }\n  users(\n    where: {_or: [{name: {_ilike: $searchTerm}}, {email: {_ilike: $searchTerm}}]}\n    limit: 5\n  ) {\n    ...UserMinimal\n  }\n  payrolls(\n    where: {client: {name: {_ilike: $searchTerm}}, supersededDate: {_isNull: true}}\n    limit: 5\n  ) {\n    ...PayrollMinimal\n    client {\n      ...ClientMinimal\n    }\n  }\n}"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "subscription RecentActivity($resourceTypes: [String!]) {\n  auditLogs(\n    where: {resourceType: {_in: $resourceTypes}, eventTime: {_gte: \"now() - interval '5 minutes'\"}}\n    orderBy: {eventTime: DESC}\n    limit: 20\n  ) {\n    ...AuditLogEntry\n  }\n}\n\nsubscription AuthenticationEvents($userId: uuid) {\n  authEvents(\n    where: {userId: {_eq: $userId}, eventTime: {_gte: \"now() - interval '10 minutes'\"}}\n    orderBy: {eventTime: DESC}\n  ) {\n    ...AuthEvent\n  }\n}\n\nsubscription SensitiveDataAccess($resourceTypes: [String!]!) {\n  dataAccessLogs(\n    where: {resourceType: {_in: $resourceTypes}, accessedAt: {_gte: \"now() - interval '10 minutes'\"}}\n    orderBy: {accessedAt: DESC}\n  ) {\n    ...DataAccessLog\n  }\n}\n\nsubscription PermissionChangeStream {\n  permissionChanges(orderBy: {changedAt: DESC}, limit: 10) {\n    ...PermissionChange\n  }\n}"): (typeof documents)["subscription RecentActivity($resourceTypes: [String!]) {\n  auditLogs(\n    where: {resourceType: {_in: $resourceTypes}, eventTime: {_gte: \"now() - interval '5 minutes'\"}}\n    orderBy: {eventTime: DESC}\n    limit: 20\n  ) {\n    ...AuditLogEntry\n  }\n}\n\nsubscription AuthenticationEvents($userId: uuid) {\n  authEvents(\n    where: {userId: {_eq: $userId}, eventTime: {_gte: \"now() - interval '10 minutes'\"}}\n    orderBy: {eventTime: DESC}\n  ) {\n    ...AuthEvent\n  }\n}\n\nsubscription SensitiveDataAccess($resourceTypes: [String!]!) {\n  dataAccessLogs(\n    where: {resourceType: {_in: $resourceTypes}, accessedAt: {_gte: \"now() - interval '10 minutes'\"}}\n    orderBy: {accessedAt: DESC}\n  ) {\n    ...DataAccessLog\n  }\n}\n\nsubscription PermissionChangeStream {\n  permissionChanges(orderBy: {changedAt: DESC}, limit: 10) {\n    ...PermissionChange\n  }\n}"];

export function gql(source: string) {
  return (documents as any)[source] ?? {};
}

export type DocumentType<TDocumentNode extends DocumentNode<any, any>> = TDocumentNode extends DocumentNode<  infer TType,  any>  ? TType  : never;