/* eslint-disable */
import * as types from './graphql';
import type { TypedDocumentNode as DocumentNode } from '@graphql-typed-document-node/core';

/**
 * Map of all GraphQL operations in the project.
 *
 * This map has several performance disadvantages:
 * 1. It is not tree-shakeable, so it will include all operations in the project.
 * 2. It is not minifiable, so the string of a GraphQL query will be multiple times inside the bundle.
 * 3. It does not support dead code elimination, so it will add unused operations.
 *
 * Therefore it is highly recommended to use the babel or swc plugin for production.
 * Learn more about it here: https://the-guild.dev/graphql/codegen/plugins/presets/preset-client#reducing-bundle-size
 */
type Documents = {
    "fragment RoleWithPermissions on roles {\n  ...RoleCore\n  assignedPermissions {\n    id\n    conditions\n    grantedPermission {\n      ...PermissionWithResource\n    }\n  }\n  assignedPermissionsAggregate {\n    aggregate {\n      count\n    }\n  }\n}\n\nfragment RolePermissionWithDetails on rolePermissions {\n  id\n  roleId\n  permissionId\n  conditions\n  createdAt\n  updatedAt\n  grantedToRole {\n    ...RoleCore\n  }\n  grantedPermission {\n    ...PermissionCore\n  }\n}\n\nfragment UserRoleWithDetails on userRoles {\n  id\n  userId\n  roleId\n  createdAt\n  updatedAt\n  roleUser {\n    id\n    name\n    email\n    isActive\n  }\n  assignedRole {\n    ...RoleCore\n  }\n}\n\nfragment FeatureFlagCore on featureFlags {\n  id\n  featureName\n  isEnabled\n  allowedRoles\n  updatedAt\n}\n\nfragment AppSettingsCore on appSettings {\n  id\n  permissions\n}": typeof types.RoleWithPermissionsFragmentDoc,
    "mutation CreateSystemResource($object: resourcesInsertInput!) {\n  insertResource(object: $object) {\n    ...ResourceCore\n  }\n}\n\nmutation UpdateSystemResource($id: uuid!, $set: resourcesSetInput!) {\n  updateResourceById(pkColumns: {id: $id}, _set: $set) {\n    ...ResourceCore\n  }\n}\n\nmutation DeleteSystemResource($id: uuid!) {\n  deleteResourceById(id: $id) {\n    id\n    name\n  }\n}\n\nmutation CreateSystemPermission($object: permissionsInsertInput!) {\n  insertPermission(object: $object) {\n    ...PermissionCore\n  }\n}\n\nmutation UpdateSystemPermission($id: uuid!, $set: permissionsSetInput!) {\n  updatePermissionById(pkColumns: {id: $id}, _set: $set) {\n    ...PermissionCore\n  }\n}\n\nmutation DeleteSystemPermission($id: uuid!) {\n  deletePermissionById(id: $id) {\n    id\n    action\n  }\n}\n\nmutation CreateSystemRole($object: rolesInsertInput!) {\n  insertRole(object: $object) {\n    ...RoleCore\n  }\n}\n\nmutation UpdateSystemRole($id: uuid!, $set: rolesSetInput!) {\n  updateRoleById(pkColumns: {id: $id}, _set: $set) {\n    ...RoleCore\n  }\n}\n\nmutation DeleteSystemRole($id: uuid!) {\n  deleteRoleById(id: $id) {\n    id\n    name\n  }\n}\n\nmutation AssignPermissionToRole($object: rolePermissionsInsertInput!) {\n  insertRolePermission(object: $object) {\n    ...RolePermissionWithDetails\n  }\n}\n\nmutation RemovePermissionFromRole($id: uuid!) {\n  deleteRolePermissionById(id: $id) {\n    id\n    roleId\n    permissionId\n  }\n}\n\nmutation UpdateSystemRolePermission($id: uuid!, $set: rolePermissionsSetInput!) {\n  updateRolePermissionById(pkColumns: {id: $id}, _set: $set) {\n    ...RolePermissionWithDetails\n  }\n}\n\nmutation AssignSystemRoleToUser($object: userRolesInsertInput!) {\n  insertUserRole(object: $object) {\n    ...UserRoleWithDetails\n  }\n}\n\nmutation RemoveSystemRoleFromUser($id: uuid!) {\n  deleteUserRoleById(id: $id) {\n    id\n    userId\n    roleId\n  }\n}\n\nmutation UpdateSystemUserRole($id: uuid!, $set: userRolesSetInput!) {\n  updateUserRoleById(pkColumns: {id: $id}, _set: $set) {\n    ...UserRoleWithDetails\n  }\n}\n\nmutation CreateFeatureFlag($object: featureFlagsInsertInput!) {\n  insertFeatureFlag(object: $object) {\n    ...FeatureFlagCore\n  }\n}\n\nmutation UpdateFeatureFlag($id: uuid!, $set: featureFlagsSetInput!) {\n  updateFeatureFlagById(pkColumns: {id: $id}, _set: $set) {\n    ...FeatureFlagCore\n  }\n}\n\nmutation DeleteFeatureFlag($id: uuid!) {\n  deleteFeatureFlagById(id: $id) {\n    id\n    featureName\n  }\n}\n\nmutation UpdateAppSettings($id: String!, $permissions: jsonb!) {\n  updateAppSettingById(pkColumns: {id: $id}, _set: {permissions: $permissions}) {\n    ...AppSettingsCore\n  }\n}": typeof types.CreateSystemResourceDocument,
    "query GetResources {\n  resources(orderBy: {name: ASC}) {\n    ...ResourceCore\n  }\n}\n\nquery GetResourceById($id: uuid!) {\n  resourceById(id: $id) {\n    ...ResourceCore\n  }\n}\n\nquery GetPermissions {\n  permissions(orderBy: {action: ASC}) {\n    ...PermissionWithResource\n  }\n}\n\nquery GetPermissionById($id: uuid!) {\n  permissionById(id: $id) {\n    ...PermissionWithResource\n  }\n}\n\nquery GetRoles($where: rolesBoolExp, $orderBy: [rolesOrderBy!]) {\n  roles(where: $where, orderBy: $orderBy) {\n    ...RoleCore\n  }\n}\n\nquery GetRoleById($id: uuid!) {\n  roleById(id: $id) {\n    ...RoleCore\n    assignedPermissions {\n      ...RolePermissionWithDetails\n    }\n  }\n}\n\nquery GetRolePermissions($roleId: uuid!) {\n  rolePermissions(where: {roleId: {_eq: $roleId}}) {\n    ...RolePermissionWithDetails\n  }\n}\n\nquery GetSystemRoles {\n  roles(where: {isSystemRole: {_eq: true}}, orderBy: {priority: ASC}) {\n    ...RoleCore\n  }\n}\n\nquery GetUserRoles($userId: uuid!) {\n  userRoles(where: {userId: {_eq: $userId}}) {\n    ...UserRoleWithDetails\n  }\n}\n\nquery GetUsersWithRole($roleId: uuid!) {\n  userRoles(where: {roleId: {_eq: $roleId}}) {\n    ...UserRoleWithDetails\n  }\n}\n\nquery GetFeatureFlags($where: featureFlagsBoolExp) {\n  featureFlags(where: $where) {\n    ...FeatureFlagCore\n  }\n}\n\nquery GetFeatureFlagById($id: uuid!) {\n  featureFlagById(id: $id) {\n    ...FeatureFlagCore\n  }\n}\n\nquery GetAppSettings {\n  appSettings {\n    ...AppSettingsCore\n  }\n}\n\nquery GetPermissionAnalytics {\n  roles_count: rolesAggregate {\n    aggregate {\n      count\n    }\n  }\n  permissions_count: permissionsAggregate {\n    aggregate {\n      count\n    }\n  }\n  resources_count: resourcesAggregate {\n    aggregate {\n      count\n    }\n  }\n  userRoles_count: userRolesAggregate {\n    aggregate {\n      count\n    }\n  }\n  roles_by_priority: roles(orderBy: {priority: ASC}) {\n    name\n    displayName\n    priority\n    assignedToUsersAggregate {\n      aggregate {\n        count\n      }\n    }\n  }\n}": typeof types.GetResourcesDocument,
    "subscription RolesUpdated {\n  roles(orderBy: {updatedAt: DESC}) {\n    ...RoleCore\n  }\n}\n\nsubscription UserRolesUpdated($userId: uuid!) {\n  userRoles(where: {userId: {_eq: $userId}}) {\n    ...UserRoleWithDetails\n  }\n}\n\nsubscription RolePermissionsUpdated($roleId: uuid!) {\n  rolePermissions(where: {roleId: {_eq: $roleId}}) {\n    ...RolePermissionWithDetails\n  }\n}\n\nsubscription PermissionsUpdated {\n  permissions(orderBy: {updatedAt: DESC}) {\n    ...PermissionWithResource\n  }\n}\n\nsubscription ResourcesUpdated {\n  resources(orderBy: {updatedAt: DESC}) {\n    ...ResourceCore\n  }\n}": typeof types.RolesUpdatedDocument,
    "fragment UserCore on users {\n  id\n  name\n  email\n  username\n  role\n  isActive\n  isStaff\n  clerkUserId\n  createdAt\n  updatedAt\n}\n\nfragment UserBasic on users {\n  id\n  name\n  email\n  role\n  isActive\n}\n\nfragment UserWithManager on users {\n  ...UserCore\n  managerId\n  managerUser {\n    ...UserBasic\n  }\n}\n\nfragment RoleCore on roles {\n  id\n  name\n  description\n  displayName\n  priority\n  isSystemRole\n  createdAt\n}\n\nfragment PermissionCore on permissions {\n  id\n  action\n  description\n  resourceId\n  createdAt\n  updatedAt\n}\n\nfragment PermissionWithResource on permissions {\n  ...PermissionCore\n  relatedResource {\n    id\n    name\n    description\n  }\n}\n\nfragment ClientCore on clients {\n  id\n  name\n  contactEmail\n  contactPerson\n  contactPhone\n  active\n  createdAt\n  updatedAt\n}\n\nfragment ClientBasic on clients {\n  id\n  name\n  active\n}\n\nfragment ResourceCore on resources {\n  id\n  name\n  displayName\n  description\n  createdAt\n  updatedAt\n}\n\nfragment UserRoleCore on userRoles {\n  id\n  userId\n  roleId\n  createdAt\n  updatedAt\n}\n\nfragment RolePermissionCore on rolePermissions {\n  id\n  roleId\n  permissionId\n  conditions\n  createdAt\n  updatedAt\n}\n\nfragment AuditFields on auditLogs {\n  id\n  eventTime\n  action\n  resourceType\n  resourceId\n  userId\n  ipAddress\n  userAgent\n  success\n  userEmail\n  userRole\n}": typeof types.UserCoreFragmentDoc,
};
const documents: Documents = {
    "fragment RoleWithPermissions on roles {\n  ...RoleCore\n  assignedPermissions {\n    id\n    conditions\n    grantedPermission {\n      ...PermissionWithResource\n    }\n  }\n  assignedPermissionsAggregate {\n    aggregate {\n      count\n    }\n  }\n}\n\nfragment RolePermissionWithDetails on rolePermissions {\n  id\n  roleId\n  permissionId\n  conditions\n  createdAt\n  updatedAt\n  grantedToRole {\n    ...RoleCore\n  }\n  grantedPermission {\n    ...PermissionCore\n  }\n}\n\nfragment UserRoleWithDetails on userRoles {\n  id\n  userId\n  roleId\n  createdAt\n  updatedAt\n  roleUser {\n    id\n    name\n    email\n    isActive\n  }\n  assignedRole {\n    ...RoleCore\n  }\n}\n\nfragment FeatureFlagCore on featureFlags {\n  id\n  featureName\n  isEnabled\n  allowedRoles\n  updatedAt\n}\n\nfragment AppSettingsCore on appSettings {\n  id\n  permissions\n}": types.RoleWithPermissionsFragmentDoc,
    "mutation CreateSystemResource($object: resourcesInsertInput!) {\n  insertResource(object: $object) {\n    ...ResourceCore\n  }\n}\n\nmutation UpdateSystemResource($id: uuid!, $set: resourcesSetInput!) {\n  updateResourceById(pkColumns: {id: $id}, _set: $set) {\n    ...ResourceCore\n  }\n}\n\nmutation DeleteSystemResource($id: uuid!) {\n  deleteResourceById(id: $id) {\n    id\n    name\n  }\n}\n\nmutation CreateSystemPermission($object: permissionsInsertInput!) {\n  insertPermission(object: $object) {\n    ...PermissionCore\n  }\n}\n\nmutation UpdateSystemPermission($id: uuid!, $set: permissionsSetInput!) {\n  updatePermissionById(pkColumns: {id: $id}, _set: $set) {\n    ...PermissionCore\n  }\n}\n\nmutation DeleteSystemPermission($id: uuid!) {\n  deletePermissionById(id: $id) {\n    id\n    action\n  }\n}\n\nmutation CreateSystemRole($object: rolesInsertInput!) {\n  insertRole(object: $object) {\n    ...RoleCore\n  }\n}\n\nmutation UpdateSystemRole($id: uuid!, $set: rolesSetInput!) {\n  updateRoleById(pkColumns: {id: $id}, _set: $set) {\n    ...RoleCore\n  }\n}\n\nmutation DeleteSystemRole($id: uuid!) {\n  deleteRoleById(id: $id) {\n    id\n    name\n  }\n}\n\nmutation AssignPermissionToRole($object: rolePermissionsInsertInput!) {\n  insertRolePermission(object: $object) {\n    ...RolePermissionWithDetails\n  }\n}\n\nmutation RemovePermissionFromRole($id: uuid!) {\n  deleteRolePermissionById(id: $id) {\n    id\n    roleId\n    permissionId\n  }\n}\n\nmutation UpdateSystemRolePermission($id: uuid!, $set: rolePermissionsSetInput!) {\n  updateRolePermissionById(pkColumns: {id: $id}, _set: $set) {\n    ...RolePermissionWithDetails\n  }\n}\n\nmutation AssignSystemRoleToUser($object: userRolesInsertInput!) {\n  insertUserRole(object: $object) {\n    ...UserRoleWithDetails\n  }\n}\n\nmutation RemoveSystemRoleFromUser($id: uuid!) {\n  deleteUserRoleById(id: $id) {\n    id\n    userId\n    roleId\n  }\n}\n\nmutation UpdateSystemUserRole($id: uuid!, $set: userRolesSetInput!) {\n  updateUserRoleById(pkColumns: {id: $id}, _set: $set) {\n    ...UserRoleWithDetails\n  }\n}\n\nmutation CreateFeatureFlag($object: featureFlagsInsertInput!) {\n  insertFeatureFlag(object: $object) {\n    ...FeatureFlagCore\n  }\n}\n\nmutation UpdateFeatureFlag($id: uuid!, $set: featureFlagsSetInput!) {\n  updateFeatureFlagById(pkColumns: {id: $id}, _set: $set) {\n    ...FeatureFlagCore\n  }\n}\n\nmutation DeleteFeatureFlag($id: uuid!) {\n  deleteFeatureFlagById(id: $id) {\n    id\n    featureName\n  }\n}\n\nmutation UpdateAppSettings($id: String!, $permissions: jsonb!) {\n  updateAppSettingById(pkColumns: {id: $id}, _set: {permissions: $permissions}) {\n    ...AppSettingsCore\n  }\n}": types.CreateSystemResourceDocument,
    "query GetResources {\n  resources(orderBy: {name: ASC}) {\n    ...ResourceCore\n  }\n}\n\nquery GetResourceById($id: uuid!) {\n  resourceById(id: $id) {\n    ...ResourceCore\n  }\n}\n\nquery GetPermissions {\n  permissions(orderBy: {action: ASC}) {\n    ...PermissionWithResource\n  }\n}\n\nquery GetPermissionById($id: uuid!) {\n  permissionById(id: $id) {\n    ...PermissionWithResource\n  }\n}\n\nquery GetRoles($where: rolesBoolExp, $orderBy: [rolesOrderBy!]) {\n  roles(where: $where, orderBy: $orderBy) {\n    ...RoleCore\n  }\n}\n\nquery GetRoleById($id: uuid!) {\n  roleById(id: $id) {\n    ...RoleCore\n    assignedPermissions {\n      ...RolePermissionWithDetails\n    }\n  }\n}\n\nquery GetRolePermissions($roleId: uuid!) {\n  rolePermissions(where: {roleId: {_eq: $roleId}}) {\n    ...RolePermissionWithDetails\n  }\n}\n\nquery GetSystemRoles {\n  roles(where: {isSystemRole: {_eq: true}}, orderBy: {priority: ASC}) {\n    ...RoleCore\n  }\n}\n\nquery GetUserRoles($userId: uuid!) {\n  userRoles(where: {userId: {_eq: $userId}}) {\n    ...UserRoleWithDetails\n  }\n}\n\nquery GetUsersWithRole($roleId: uuid!) {\n  userRoles(where: {roleId: {_eq: $roleId}}) {\n    ...UserRoleWithDetails\n  }\n}\n\nquery GetFeatureFlags($where: featureFlagsBoolExp) {\n  featureFlags(where: $where) {\n    ...FeatureFlagCore\n  }\n}\n\nquery GetFeatureFlagById($id: uuid!) {\n  featureFlagById(id: $id) {\n    ...FeatureFlagCore\n  }\n}\n\nquery GetAppSettings {\n  appSettings {\n    ...AppSettingsCore\n  }\n}\n\nquery GetPermissionAnalytics {\n  roles_count: rolesAggregate {\n    aggregate {\n      count\n    }\n  }\n  permissions_count: permissionsAggregate {\n    aggregate {\n      count\n    }\n  }\n  resources_count: resourcesAggregate {\n    aggregate {\n      count\n    }\n  }\n  userRoles_count: userRolesAggregate {\n    aggregate {\n      count\n    }\n  }\n  roles_by_priority: roles(orderBy: {priority: ASC}) {\n    name\n    displayName\n    priority\n    assignedToUsersAggregate {\n      aggregate {\n        count\n      }\n    }\n  }\n}": types.GetResourcesDocument,
    "subscription RolesUpdated {\n  roles(orderBy: {updatedAt: DESC}) {\n    ...RoleCore\n  }\n}\n\nsubscription UserRolesUpdated($userId: uuid!) {\n  userRoles(where: {userId: {_eq: $userId}}) {\n    ...UserRoleWithDetails\n  }\n}\n\nsubscription RolePermissionsUpdated($roleId: uuid!) {\n  rolePermissions(where: {roleId: {_eq: $roleId}}) {\n    ...RolePermissionWithDetails\n  }\n}\n\nsubscription PermissionsUpdated {\n  permissions(orderBy: {updatedAt: DESC}) {\n    ...PermissionWithResource\n  }\n}\n\nsubscription ResourcesUpdated {\n  resources(orderBy: {updatedAt: DESC}) {\n    ...ResourceCore\n  }\n}": types.RolesUpdatedDocument,
    "fragment UserCore on users {\n  id\n  name\n  email\n  username\n  role\n  isActive\n  isStaff\n  clerkUserId\n  createdAt\n  updatedAt\n}\n\nfragment UserBasic on users {\n  id\n  name\n  email\n  role\n  isActive\n}\n\nfragment UserWithManager on users {\n  ...UserCore\n  managerId\n  managerUser {\n    ...UserBasic\n  }\n}\n\nfragment RoleCore on roles {\n  id\n  name\n  description\n  displayName\n  priority\n  isSystemRole\n  createdAt\n}\n\nfragment PermissionCore on permissions {\n  id\n  action\n  description\n  resourceId\n  createdAt\n  updatedAt\n}\n\nfragment PermissionWithResource on permissions {\n  ...PermissionCore\n  relatedResource {\n    id\n    name\n    description\n  }\n}\n\nfragment ClientCore on clients {\n  id\n  name\n  contactEmail\n  contactPerson\n  contactPhone\n  active\n  createdAt\n  updatedAt\n}\n\nfragment ClientBasic on clients {\n  id\n  name\n  active\n}\n\nfragment ResourceCore on resources {\n  id\n  name\n  displayName\n  description\n  createdAt\n  updatedAt\n}\n\nfragment UserRoleCore on userRoles {\n  id\n  userId\n  roleId\n  createdAt\n  updatedAt\n}\n\nfragment RolePermissionCore on rolePermissions {\n  id\n  roleId\n  permissionId\n  conditions\n  createdAt\n  updatedAt\n}\n\nfragment AuditFields on auditLogs {\n  id\n  eventTime\n  action\n  resourceType\n  resourceId\n  userId\n  ipAddress\n  userAgent\n  success\n  userEmail\n  userRole\n}": types.UserCoreFragmentDoc,
};

/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 *
 *
 * @example
 * ```ts
 * const query = gql(`query GetUser($id: ID!) { user(id: $id) { name } }`);
 * ```
 *
 * The query argument is unknown!
 * Please regenerate the types.
 */
export function gql(source: string): unknown;

/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "fragment RoleWithPermissions on roles {\n  ...RoleCore\n  assignedPermissions {\n    id\n    conditions\n    grantedPermission {\n      ...PermissionWithResource\n    }\n  }\n  assignedPermissionsAggregate {\n    aggregate {\n      count\n    }\n  }\n}\n\nfragment RolePermissionWithDetails on rolePermissions {\n  id\n  roleId\n  permissionId\n  conditions\n  createdAt\n  updatedAt\n  grantedToRole {\n    ...RoleCore\n  }\n  grantedPermission {\n    ...PermissionCore\n  }\n}\n\nfragment UserRoleWithDetails on userRoles {\n  id\n  userId\n  roleId\n  createdAt\n  updatedAt\n  roleUser {\n    id\n    name\n    email\n    isActive\n  }\n  assignedRole {\n    ...RoleCore\n  }\n}\n\nfragment FeatureFlagCore on featureFlags {\n  id\n  featureName\n  isEnabled\n  allowedRoles\n  updatedAt\n}\n\nfragment AppSettingsCore on appSettings {\n  id\n  permissions\n}"): (typeof documents)["fragment RoleWithPermissions on roles {\n  ...RoleCore\n  assignedPermissions {\n    id\n    conditions\n    grantedPermission {\n      ...PermissionWithResource\n    }\n  }\n  assignedPermissionsAggregate {\n    aggregate {\n      count\n    }\n  }\n}\n\nfragment RolePermissionWithDetails on rolePermissions {\n  id\n  roleId\n  permissionId\n  conditions\n  createdAt\n  updatedAt\n  grantedToRole {\n    ...RoleCore\n  }\n  grantedPermission {\n    ...PermissionCore\n  }\n}\n\nfragment UserRoleWithDetails on userRoles {\n  id\n  userId\n  roleId\n  createdAt\n  updatedAt\n  roleUser {\n    id\n    name\n    email\n    isActive\n  }\n  assignedRole {\n    ...RoleCore\n  }\n}\n\nfragment FeatureFlagCore on featureFlags {\n  id\n  featureName\n  isEnabled\n  allowedRoles\n  updatedAt\n}\n\nfragment AppSettingsCore on appSettings {\n  id\n  permissions\n}"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "mutation CreateSystemResource($object: resourcesInsertInput!) {\n  insertResource(object: $object) {\n    ...ResourceCore\n  }\n}\n\nmutation UpdateSystemResource($id: uuid!, $set: resourcesSetInput!) {\n  updateResourceById(pkColumns: {id: $id}, _set: $set) {\n    ...ResourceCore\n  }\n}\n\nmutation DeleteSystemResource($id: uuid!) {\n  deleteResourceById(id: $id) {\n    id\n    name\n  }\n}\n\nmutation CreateSystemPermission($object: permissionsInsertInput!) {\n  insertPermission(object: $object) {\n    ...PermissionCore\n  }\n}\n\nmutation UpdateSystemPermission($id: uuid!, $set: permissionsSetInput!) {\n  updatePermissionById(pkColumns: {id: $id}, _set: $set) {\n    ...PermissionCore\n  }\n}\n\nmutation DeleteSystemPermission($id: uuid!) {\n  deletePermissionById(id: $id) {\n    id\n    action\n  }\n}\n\nmutation CreateSystemRole($object: rolesInsertInput!) {\n  insertRole(object: $object) {\n    ...RoleCore\n  }\n}\n\nmutation UpdateSystemRole($id: uuid!, $set: rolesSetInput!) {\n  updateRoleById(pkColumns: {id: $id}, _set: $set) {\n    ...RoleCore\n  }\n}\n\nmutation DeleteSystemRole($id: uuid!) {\n  deleteRoleById(id: $id) {\n    id\n    name\n  }\n}\n\nmutation AssignPermissionToRole($object: rolePermissionsInsertInput!) {\n  insertRolePermission(object: $object) {\n    ...RolePermissionWithDetails\n  }\n}\n\nmutation RemovePermissionFromRole($id: uuid!) {\n  deleteRolePermissionById(id: $id) {\n    id\n    roleId\n    permissionId\n  }\n}\n\nmutation UpdateSystemRolePermission($id: uuid!, $set: rolePermissionsSetInput!) {\n  updateRolePermissionById(pkColumns: {id: $id}, _set: $set) {\n    ...RolePermissionWithDetails\n  }\n}\n\nmutation AssignSystemRoleToUser($object: userRolesInsertInput!) {\n  insertUserRole(object: $object) {\n    ...UserRoleWithDetails\n  }\n}\n\nmutation RemoveSystemRoleFromUser($id: uuid!) {\n  deleteUserRoleById(id: $id) {\n    id\n    userId\n    roleId\n  }\n}\n\nmutation UpdateSystemUserRole($id: uuid!, $set: userRolesSetInput!) {\n  updateUserRoleById(pkColumns: {id: $id}, _set: $set) {\n    ...UserRoleWithDetails\n  }\n}\n\nmutation CreateFeatureFlag($object: featureFlagsInsertInput!) {\n  insertFeatureFlag(object: $object) {\n    ...FeatureFlagCore\n  }\n}\n\nmutation UpdateFeatureFlag($id: uuid!, $set: featureFlagsSetInput!) {\n  updateFeatureFlagById(pkColumns: {id: $id}, _set: $set) {\n    ...FeatureFlagCore\n  }\n}\n\nmutation DeleteFeatureFlag($id: uuid!) {\n  deleteFeatureFlagById(id: $id) {\n    id\n    featureName\n  }\n}\n\nmutation UpdateAppSettings($id: String!, $permissions: jsonb!) {\n  updateAppSettingById(pkColumns: {id: $id}, _set: {permissions: $permissions}) {\n    ...AppSettingsCore\n  }\n}"): (typeof documents)["mutation CreateSystemResource($object: resourcesInsertInput!) {\n  insertResource(object: $object) {\n    ...ResourceCore\n  }\n}\n\nmutation UpdateSystemResource($id: uuid!, $set: resourcesSetInput!) {\n  updateResourceById(pkColumns: {id: $id}, _set: $set) {\n    ...ResourceCore\n  }\n}\n\nmutation DeleteSystemResource($id: uuid!) {\n  deleteResourceById(id: $id) {\n    id\n    name\n  }\n}\n\nmutation CreateSystemPermission($object: permissionsInsertInput!) {\n  insertPermission(object: $object) {\n    ...PermissionCore\n  }\n}\n\nmutation UpdateSystemPermission($id: uuid!, $set: permissionsSetInput!) {\n  updatePermissionById(pkColumns: {id: $id}, _set: $set) {\n    ...PermissionCore\n  }\n}\n\nmutation DeleteSystemPermission($id: uuid!) {\n  deletePermissionById(id: $id) {\n    id\n    action\n  }\n}\n\nmutation CreateSystemRole($object: rolesInsertInput!) {\n  insertRole(object: $object) {\n    ...RoleCore\n  }\n}\n\nmutation UpdateSystemRole($id: uuid!, $set: rolesSetInput!) {\n  updateRoleById(pkColumns: {id: $id}, _set: $set) {\n    ...RoleCore\n  }\n}\n\nmutation DeleteSystemRole($id: uuid!) {\n  deleteRoleById(id: $id) {\n    id\n    name\n  }\n}\n\nmutation AssignPermissionToRole($object: rolePermissionsInsertInput!) {\n  insertRolePermission(object: $object) {\n    ...RolePermissionWithDetails\n  }\n}\n\nmutation RemovePermissionFromRole($id: uuid!) {\n  deleteRolePermissionById(id: $id) {\n    id\n    roleId\n    permissionId\n  }\n}\n\nmutation UpdateSystemRolePermission($id: uuid!, $set: rolePermissionsSetInput!) {\n  updateRolePermissionById(pkColumns: {id: $id}, _set: $set) {\n    ...RolePermissionWithDetails\n  }\n}\n\nmutation AssignSystemRoleToUser($object: userRolesInsertInput!) {\n  insertUserRole(object: $object) {\n    ...UserRoleWithDetails\n  }\n}\n\nmutation RemoveSystemRoleFromUser($id: uuid!) {\n  deleteUserRoleById(id: $id) {\n    id\n    userId\n    roleId\n  }\n}\n\nmutation UpdateSystemUserRole($id: uuid!, $set: userRolesSetInput!) {\n  updateUserRoleById(pkColumns: {id: $id}, _set: $set) {\n    ...UserRoleWithDetails\n  }\n}\n\nmutation CreateFeatureFlag($object: featureFlagsInsertInput!) {\n  insertFeatureFlag(object: $object) {\n    ...FeatureFlagCore\n  }\n}\n\nmutation UpdateFeatureFlag($id: uuid!, $set: featureFlagsSetInput!) {\n  updateFeatureFlagById(pkColumns: {id: $id}, _set: $set) {\n    ...FeatureFlagCore\n  }\n}\n\nmutation DeleteFeatureFlag($id: uuid!) {\n  deleteFeatureFlagById(id: $id) {\n    id\n    featureName\n  }\n}\n\nmutation UpdateAppSettings($id: String!, $permissions: jsonb!) {\n  updateAppSettingById(pkColumns: {id: $id}, _set: {permissions: $permissions}) {\n    ...AppSettingsCore\n  }\n}"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "query GetResources {\n  resources(orderBy: {name: ASC}) {\n    ...ResourceCore\n  }\n}\n\nquery GetResourceById($id: uuid!) {\n  resourceById(id: $id) {\n    ...ResourceCore\n  }\n}\n\nquery GetPermissions {\n  permissions(orderBy: {action: ASC}) {\n    ...PermissionWithResource\n  }\n}\n\nquery GetPermissionById($id: uuid!) {\n  permissionById(id: $id) {\n    ...PermissionWithResource\n  }\n}\n\nquery GetRoles($where: rolesBoolExp, $orderBy: [rolesOrderBy!]) {\n  roles(where: $where, orderBy: $orderBy) {\n    ...RoleCore\n  }\n}\n\nquery GetRoleById($id: uuid!) {\n  roleById(id: $id) {\n    ...RoleCore\n    assignedPermissions {\n      ...RolePermissionWithDetails\n    }\n  }\n}\n\nquery GetRolePermissions($roleId: uuid!) {\n  rolePermissions(where: {roleId: {_eq: $roleId}}) {\n    ...RolePermissionWithDetails\n  }\n}\n\nquery GetSystemRoles {\n  roles(where: {isSystemRole: {_eq: true}}, orderBy: {priority: ASC}) {\n    ...RoleCore\n  }\n}\n\nquery GetUserRoles($userId: uuid!) {\n  userRoles(where: {userId: {_eq: $userId}}) {\n    ...UserRoleWithDetails\n  }\n}\n\nquery GetUsersWithRole($roleId: uuid!) {\n  userRoles(where: {roleId: {_eq: $roleId}}) {\n    ...UserRoleWithDetails\n  }\n}\n\nquery GetFeatureFlags($where: featureFlagsBoolExp) {\n  featureFlags(where: $where) {\n    ...FeatureFlagCore\n  }\n}\n\nquery GetFeatureFlagById($id: uuid!) {\n  featureFlagById(id: $id) {\n    ...FeatureFlagCore\n  }\n}\n\nquery GetAppSettings {\n  appSettings {\n    ...AppSettingsCore\n  }\n}\n\nquery GetPermissionAnalytics {\n  roles_count: rolesAggregate {\n    aggregate {\n      count\n    }\n  }\n  permissions_count: permissionsAggregate {\n    aggregate {\n      count\n    }\n  }\n  resources_count: resourcesAggregate {\n    aggregate {\n      count\n    }\n  }\n  userRoles_count: userRolesAggregate {\n    aggregate {\n      count\n    }\n  }\n  roles_by_priority: roles(orderBy: {priority: ASC}) {\n    name\n    displayName\n    priority\n    assignedToUsersAggregate {\n      aggregate {\n        count\n      }\n    }\n  }\n}"): (typeof documents)["query GetResources {\n  resources(orderBy: {name: ASC}) {\n    ...ResourceCore\n  }\n}\n\nquery GetResourceById($id: uuid!) {\n  resourceById(id: $id) {\n    ...ResourceCore\n  }\n}\n\nquery GetPermissions {\n  permissions(orderBy: {action: ASC}) {\n    ...PermissionWithResource\n  }\n}\n\nquery GetPermissionById($id: uuid!) {\n  permissionById(id: $id) {\n    ...PermissionWithResource\n  }\n}\n\nquery GetRoles($where: rolesBoolExp, $orderBy: [rolesOrderBy!]) {\n  roles(where: $where, orderBy: $orderBy) {\n    ...RoleCore\n  }\n}\n\nquery GetRoleById($id: uuid!) {\n  roleById(id: $id) {\n    ...RoleCore\n    assignedPermissions {\n      ...RolePermissionWithDetails\n    }\n  }\n}\n\nquery GetRolePermissions($roleId: uuid!) {\n  rolePermissions(where: {roleId: {_eq: $roleId}}) {\n    ...RolePermissionWithDetails\n  }\n}\n\nquery GetSystemRoles {\n  roles(where: {isSystemRole: {_eq: true}}, orderBy: {priority: ASC}) {\n    ...RoleCore\n  }\n}\n\nquery GetUserRoles($userId: uuid!) {\n  userRoles(where: {userId: {_eq: $userId}}) {\n    ...UserRoleWithDetails\n  }\n}\n\nquery GetUsersWithRole($roleId: uuid!) {\n  userRoles(where: {roleId: {_eq: $roleId}}) {\n    ...UserRoleWithDetails\n  }\n}\n\nquery GetFeatureFlags($where: featureFlagsBoolExp) {\n  featureFlags(where: $where) {\n    ...FeatureFlagCore\n  }\n}\n\nquery GetFeatureFlagById($id: uuid!) {\n  featureFlagById(id: $id) {\n    ...FeatureFlagCore\n  }\n}\n\nquery GetAppSettings {\n  appSettings {\n    ...AppSettingsCore\n  }\n}\n\nquery GetPermissionAnalytics {\n  roles_count: rolesAggregate {\n    aggregate {\n      count\n    }\n  }\n  permissions_count: permissionsAggregate {\n    aggregate {\n      count\n    }\n  }\n  resources_count: resourcesAggregate {\n    aggregate {\n      count\n    }\n  }\n  userRoles_count: userRolesAggregate {\n    aggregate {\n      count\n    }\n  }\n  roles_by_priority: roles(orderBy: {priority: ASC}) {\n    name\n    displayName\n    priority\n    assignedToUsersAggregate {\n      aggregate {\n        count\n      }\n    }\n  }\n}"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "subscription RolesUpdated {\n  roles(orderBy: {updatedAt: DESC}) {\n    ...RoleCore\n  }\n}\n\nsubscription UserRolesUpdated($userId: uuid!) {\n  userRoles(where: {userId: {_eq: $userId}}) {\n    ...UserRoleWithDetails\n  }\n}\n\nsubscription RolePermissionsUpdated($roleId: uuid!) {\n  rolePermissions(where: {roleId: {_eq: $roleId}}) {\n    ...RolePermissionWithDetails\n  }\n}\n\nsubscription PermissionsUpdated {\n  permissions(orderBy: {updatedAt: DESC}) {\n    ...PermissionWithResource\n  }\n}\n\nsubscription ResourcesUpdated {\n  resources(orderBy: {updatedAt: DESC}) {\n    ...ResourceCore\n  }\n}"): (typeof documents)["subscription RolesUpdated {\n  roles(orderBy: {updatedAt: DESC}) {\n    ...RoleCore\n  }\n}\n\nsubscription UserRolesUpdated($userId: uuid!) {\n  userRoles(where: {userId: {_eq: $userId}}) {\n    ...UserRoleWithDetails\n  }\n}\n\nsubscription RolePermissionsUpdated($roleId: uuid!) {\n  rolePermissions(where: {roleId: {_eq: $roleId}}) {\n    ...RolePermissionWithDetails\n  }\n}\n\nsubscription PermissionsUpdated {\n  permissions(orderBy: {updatedAt: DESC}) {\n    ...PermissionWithResource\n  }\n}\n\nsubscription ResourcesUpdated {\n  resources(orderBy: {updatedAt: DESC}) {\n    ...ResourceCore\n  }\n}"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "fragment UserCore on users {\n  id\n  name\n  email\n  username\n  role\n  isActive\n  isStaff\n  clerkUserId\n  createdAt\n  updatedAt\n}\n\nfragment UserBasic on users {\n  id\n  name\n  email\n  role\n  isActive\n}\n\nfragment UserWithManager on users {\n  ...UserCore\n  managerId\n  managerUser {\n    ...UserBasic\n  }\n}\n\nfragment RoleCore on roles {\n  id\n  name\n  description\n  displayName\n  priority\n  isSystemRole\n  createdAt\n}\n\nfragment PermissionCore on permissions {\n  id\n  action\n  description\n  resourceId\n  createdAt\n  updatedAt\n}\n\nfragment PermissionWithResource on permissions {\n  ...PermissionCore\n  relatedResource {\n    id\n    name\n    description\n  }\n}\n\nfragment ClientCore on clients {\n  id\n  name\n  contactEmail\n  contactPerson\n  contactPhone\n  active\n  createdAt\n  updatedAt\n}\n\nfragment ClientBasic on clients {\n  id\n  name\n  active\n}\n\nfragment ResourceCore on resources {\n  id\n  name\n  displayName\n  description\n  createdAt\n  updatedAt\n}\n\nfragment UserRoleCore on userRoles {\n  id\n  userId\n  roleId\n  createdAt\n  updatedAt\n}\n\nfragment RolePermissionCore on rolePermissions {\n  id\n  roleId\n  permissionId\n  conditions\n  createdAt\n  updatedAt\n}\n\nfragment AuditFields on auditLogs {\n  id\n  eventTime\n  action\n  resourceType\n  resourceId\n  userId\n  ipAddress\n  userAgent\n  success\n  userEmail\n  userRole\n}"): (typeof documents)["fragment UserCore on users {\n  id\n  name\n  email\n  username\n  role\n  isActive\n  isStaff\n  clerkUserId\n  createdAt\n  updatedAt\n}\n\nfragment UserBasic on users {\n  id\n  name\n  email\n  role\n  isActive\n}\n\nfragment UserWithManager on users {\n  ...UserCore\n  managerId\n  managerUser {\n    ...UserBasic\n  }\n}\n\nfragment RoleCore on roles {\n  id\n  name\n  description\n  displayName\n  priority\n  isSystemRole\n  createdAt\n}\n\nfragment PermissionCore on permissions {\n  id\n  action\n  description\n  resourceId\n  createdAt\n  updatedAt\n}\n\nfragment PermissionWithResource on permissions {\n  ...PermissionCore\n  relatedResource {\n    id\n    name\n    description\n  }\n}\n\nfragment ClientCore on clients {\n  id\n  name\n  contactEmail\n  contactPerson\n  contactPhone\n  active\n  createdAt\n  updatedAt\n}\n\nfragment ClientBasic on clients {\n  id\n  name\n  active\n}\n\nfragment ResourceCore on resources {\n  id\n  name\n  displayName\n  description\n  createdAt\n  updatedAt\n}\n\nfragment UserRoleCore on userRoles {\n  id\n  userId\n  roleId\n  createdAt\n  updatedAt\n}\n\nfragment RolePermissionCore on rolePermissions {\n  id\n  roleId\n  permissionId\n  conditions\n  createdAt\n  updatedAt\n}\n\nfragment AuditFields on auditLogs {\n  id\n  eventTime\n  action\n  resourceType\n  resourceId\n  userId\n  ipAddress\n  userAgent\n  success\n  userEmail\n  userRole\n}"];

export function gql(source: string) {
  return (documents as any)[source] ?? {};
}

export type DocumentType<TDocumentNode extends DocumentNode<any, any>> = TDocumentNode extends DocumentNode<  infer TType,  any>  ? TType  : never;