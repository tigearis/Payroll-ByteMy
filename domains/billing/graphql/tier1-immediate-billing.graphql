# =============================================================================
# Tier 1 Immediate Billing System GraphQL Operations
# Implements outcome-based billing with detailed payroll completion metrics
# =============================================================================

# =============================================================================
# FRAGMENTS
# =============================================================================

# Payroll Completion Metrics Fragment
fragment PayrollCompletionMetricsFragment on PayrollCompletionMetrics {
  id
  payrollDateId
  completedBy
  completedAt
  
  # Core deliverables
  payslipsProcessed
  employeesProcessed
  
  # Complexity indicators
  newStarters
  terminations
  leaveCalculations
  bonusPayments
  taxAdjustments
  
  # Additional services
  superContributions
  workersCompClaims
  garnishmentOrders
  
  # Statutory services
  paygSummaries
  fbtCalculations
  
  # Quality metrics
  exceptionsHandled
  correctionsRequired
  clientCommunications
  
  # Billing status
  billingGenerated
  billingGeneratedAt
  generationNotes
  
  createdAt
  updatedAt
}

# Recurring Service Configuration Fragment
fragment RecurringServiceConfigFragment on RecurringServiceConfigurations {
  id
  serviceCode
  serviceName
  description
  baseRate
  billingCycle
  generationDay
  newClientProration
  terminationProration
  minimumCharge
  autoApproval
  requiresClientAgreement
  isActive
  createdAt
  createdBy
}

# Client Recurring Services Fragment  
fragment ClientRecurringServicesFragment on ClientRecurringServices {
  id
  clientId
  serviceCode
  customRate
  effectiveFrom
  effectiveTo
  isActive
  autoGenerate
  createdAt
  createdBy
}

# Payroll Service Agreement Fragment
fragment PayrollServiceAgreementFragment on PayrollServiceAgreements {
  id
  payrollId
  clientId
  overrideReason
  approvedBy
  effectiveForPayrollOnly
  serviceOverrides
  additionalServices
  createdAt
  createdBy
}

# Enhanced Service Fragment with Tier 1 Information
fragment EnhancedServiceFragment on Services {
  id
  name
  description
  category
  billingUnit
  defaultRate
  currency
  serviceType
  isActive
  metadata
  
  # Tier 1 specific fields
  billingTier
  tierPriority
  requiresPayrollCompletion
  requiresMonthlyCompletion
  approvalLevel
  serviceCode
  
  createdAt
  updatedAt
}

# Enhanced Billing Item Fragment with Tier 1 Metadata
fragment EnhancedBillingItemFragment on BillingItems {
  id
  payrollId
  payrollDateId
  clientId
  serviceId
  serviceName
  description
  quantity
  unitPrice
  amount
  totalAmount
  status
  
  # Tier 1 specific fields
  serviceCode
  autoGenerated
  generatedFrom
  sourceMetricsId
  approvalLevel
  rateJustification
  billingPeriodStart
  billingPeriodEnd
  billingTier
  
  createdAt
  updatedAt
  
  # Relations
  client {
    id
    name
  }
  service {
    id
    name
    category
  }
  payroll {
    id
    name
  }
  payrollDate {
    id
    originalEftDate
    adjustedEftDate
  }
}

# Recurring Billing Log Fragment
fragment RecurringBillingLogFragment on RecurringBillingLog {
  id
  clientId
  serviceCode
  billingMonth
  generatedAt
  billingItemId
  amount
  prorated
  prorationReason
  prorationMultiplier
  generatedBySystem
  generationJobId
}

# =============================================================================
# QUERIES
# =============================================================================

# Get Payroll Completion Metrics
query GetPayrollCompletionMetrics(
  $payrollDateId: uuid!
) {
  payrollCompletionMetrics(
    where: { payrollDateId: { _eq: $payrollDateId } }
  ) {
    ...PayrollCompletionMetricsFragment
    completedByUser {
      id
      firstName
      lastName
      computedName
    }
    payrollDate {
      id
      originalEftDate
      adjustedEftDate
      status
      payroll {
        id
        name
        client {
          id
          name
        }
      }
    }
  }
}

# Get Payroll Dates with Completion Metrics
query GetPayrollDatesWithMetrics(
  $limit: Int = 50
  $offset: Int = 0
  $clientId: uuid
  $status: payroll_date_status
) {
  payrollDates(
    where: {
      _and: [
        { clientId: { _eq: $clientId } }
        { status: { _eq: $status } }
      ]
    }
    limit: $limit
    offset: $offset
    orderBy: [{ adjustedEftDate: DESC }]
  ) {
    id
    originalEftDate
    adjustedEftDate
    status
    completedAt
    completedBy
    
    payroll {
      id
      name
      client {
        id
        name
      }
    }
    
    completionMetrics {
      ...PayrollCompletionMetricsFragment
    }
    
    # Generated billing items
    billingItems(
      where: { 
        autoGenerated: { _eq: true }
        billingTier: { _eq: "tier1" }
      }
    ) {
      ...EnhancedBillingItemFragment
    }
  }
}

# Get Recurring Service Configurations
query GetRecurringServiceConfigurations(
  $isActive: Boolean = true
) {
  recurringServiceConfigurations(
    where: { isActive: { _eq: $isActive } }
    orderBy: [{ serviceName: ASC }]
  ) {
    ...RecurringServiceConfigFragment
  }
}

# Get Client Recurring Services
query GetClientRecurringServices(
  $clientId: uuid!
  $isActive: Boolean = true
) {
  clientRecurringServices(
    where: { 
      clientId: { _eq: $clientId }
      isActive: { _eq: $isActive }
    }
    orderBy: [{ effectiveFrom: DESC }]
  ) {
    ...ClientRecurringServicesFragment
    recurringService {
      ...RecurringServiceConfigFragment
    }
    client {
      id
      name
    }
  }
}

# Get Clients Ready for Recurring Billing
query GetClientsReadyForRecurringBilling(
  $billingMonth: date!
  $limit: Int = 50
) {
  clientRecurringServices(
    where: {
      isActive: { _eq: true }
      autoGenerate: { _eq: true }
      effectiveFrom: { _lte: $billingMonth }
      _or: [
        { effectiveTo: { _gte: $billingMonth } }
        { effectiveTo: { _is_null: true } }
      ]
    }
    limit: $limit
    orderBy: [{ clientId: ASC }, { serviceCode: ASC }]
  ) {
    ...ClientRecurringServicesFragment
    recurringService {
      ...RecurringServiceConfigFragment
    }
    client {
      id
      name
      active
    }
    # Check if already billed for this month
    existingBilling: recurringBillingLogs(
      where: { billingMonth: { _eq: $billingMonth } }
      limit: 1
    ) {
      id
      billingMonth
    }
  }
}

# Get Payroll Service Agreements
query GetPayrollServiceAgreements(
  $payrollId: uuid!
) {
  payrollServiceAgreements(
    where: { payrollId: { _eq: $payrollId } }
  ) {
    ...PayrollServiceAgreementFragment
    approvedByUser {
      id
      firstName
      lastName
      computedName
    }
    client {
      id
      name
    }
    payroll {
      id
      name
    }
  }
}

# Get Services by Billing Tier
query GetServicesByTier(
  $billingTier: String!
  $isActive: Boolean = true
) {
  services(
    where: {
      billingTier: { _eq: $billingTier }
      isActive: { _eq: $isActive }
    }
    orderBy: [{ tierPriority: ASC }, { name: ASC }]
  ) {
    ...EnhancedServiceFragment
  }
}

# Get Tier 1 Billing Analytics
query GetTier1BillingAnalytics(
  $dateFrom: timestamptz!
  $dateTo: timestamptz!
  $clientId: uuid
) {
  # Completion metrics summary
  completionMetricsSummary: payrollCompletionMetricsAggregate(
    where: {
      completedAt: { _gte: $dateFrom, _lte: $dateTo }
      payrollDate: { 
        payroll: { clientId: { _eq: $clientId } }
      }
    }
  ) {
    aggregate {
      count
      sum {
        payslipsProcessed
        employeesProcessed
        newStarters
        terminations
        leaveCalculations
        bonusPayments
        taxAdjustments
      }
    }
  }
  
  # Generated billing summary
  tier1BillingSummary: billingItemsAggregate(
    where: {
      billingTier: { _eq: "tier1" }
      autoGenerated: { _eq: true }
      createdAt: { _gte: $dateFrom, _lte: $dateTo }
      clientId: { _eq: $clientId }
    }
  ) {
    aggregate {
      count
      sum {
        totalAmount
      }
      avg {
        totalAmount
      }
    }
  }
  
  # Approval level breakdown
  approvalLevelBreakdown: billingItemsAggregate(
    where: {
      billingTier: { _eq: "tier1" }
      createdAt: { _gte: $dateFrom, _lte: $dateTo }
      clientId: { _eq: $clientId }
    }
  ) {
    nodes {
      approvalLevel
      status
      totalAmount
    }
  }
}

# Get Recurring Billing History
query GetRecurringBillingHistory(
  $clientId: uuid
  $serviceCode: String
  $fromMonth: date
  $toMonth: date
  $limit: Int = 50
) {
  recurringBillingLog(
    where: {
      _and: [
        { clientId: { _eq: $clientId } }
        { serviceCode: { _eq: $serviceCode } }
        { billingMonth: { _gte: $fromMonth } }
        { billingMonth: { _lte: $toMonth } }
      ]
    }
    limit: $limit
    orderBy: [{ billingMonth: DESC }]
  ) {
    ...RecurringBillingLogFragment
    client {
      id
      name
    }
    billingItem {
      id
      description
      status
      totalAmount
    }
  }
}

# =============================================================================
# MUTATIONS
# =============================================================================

# Create Payroll Completion Metrics
mutation CreatePayrollCompletionMetrics(
  $input: PayrollCompletionMetricsInsertInput!
) {
  insertPayrollCompletionMetricsOne(object: $input) {
    ...PayrollCompletionMetricsFragment
  }
}

# Update Payroll Completion Metrics
mutation UpdatePayrollCompletionMetrics(
  $payrollDateId: uuid!
  $updates: PayrollCompletionMetricsSetInput!
) {
  updatePayrollCompletionMetrics(
    where: { payrollDateId: { _eq: $payrollDateId } }
    _set: $updates
  ) {
    affectedRows
    returning {
      ...PayrollCompletionMetricsFragment
    }
  }
}

# Generate Tier 1 Billing from Completion Metrics
mutation GenerateTier1BillingFromMetrics(
  $payrollDateId: uuid!
  $completedBy: uuid!
) {
  # This will call a PostgreSQL function to generate billing
  generateTier1Billing: insertBillingEventLogOne(
    object: {
      eventType: "tier1_billing_generation_requested"
      message: "Tier 1 billing generation requested via GraphQL"
      metadata: {
        payrollDateId: $payrollDateId
        completedBy: $completedBy
        requestedAt: "now()"
      }
    }
  ) {
    id
    eventType
    message
    createdAt
  }
}

# Create Recurring Service Configuration
mutation CreateRecurringServiceConfiguration(
  $input: RecurringServiceConfigurationsInsertInput!
) {
  insertRecurringServiceConfigurationsOne(object: $input) {
    ...RecurringServiceConfigFragment
  }
}

# Update Recurring Service Configuration
mutation UpdateRecurringServiceConfiguration(
  $id: uuid!
  $updates: RecurringServiceConfigurationsSetInput!
) {
  updateRecurringServiceConfigurationsByPk(
    pkColumns: { id: $id }
    _set: $updates
  ) {
    ...RecurringServiceConfigFragment
  }
}

# Create Client Recurring Service Subscription
mutation CreateClientRecurringService(
  $input: ClientRecurringServicesInsertInput!
) {
  insertClientRecurringServicesOne(object: $input) {
    ...ClientRecurringServicesFragment
    recurringService {
      ...RecurringServiceConfigFragment
    }
  }
}

# Update Client Recurring Service Subscription
mutation UpdateClientRecurringService(
  $id: uuid!
  $updates: ClientRecurringServicesSetInput!
) {
  updateClientRecurringServicesByPk(
    pkColumns: { id: $id }
    _set: $updates
  ) {
    ...ClientRecurringServicesFragment
  }
}

# Create Payroll Service Agreement (Override)
mutation CreatePayrollServiceAgreement(
  $input: PayrollServiceAgreementsInsertInput!
) {
  insertPayrollServiceAgreementsOne(object: $input) {
    ...PayrollServiceAgreementFragment
  }
}

# Update Payroll Service Agreement
mutation UpdatePayrollServiceAgreement(
  $id: uuid!
  $updates: PayrollServiceAgreementsSetInput!
) {
  updatePayrollServiceAgreementsByPk(
    pkColumns: { id: $id }
    _set: $updates
  ) {
    ...PayrollServiceAgreementFragment
  }
}

# Generate Recurring Billing for Month
mutation GenerateRecurringBilling(
  $billingMonth: date!
  $clientIds: [uuid!]
  $serviceCode: String
  $dryRun: Boolean = false
) {
  # This will trigger the recurring billing generation process
  generateRecurringBilling: insertBillingEventLogOne(
    object: {
      eventType: "recurring_billing_generation_requested"
      message: "Recurring billing generation requested via GraphQL"
      metadata: {
        billingMonth: $billingMonth
        clientIds: $clientIds
        serviceCode: $serviceCode
        dryRun: $dryRun
        requestedAt: "now()"
      }
    }
  ) {
    id
    eventType
    message
    createdAt
  }
}

# Bulk Update Service Billing Tiers
mutation BulkUpdateServiceTiers(
  $updates: [ServicesUpdatesInput!]!
) {
  updateServicesMany(updates: $updates) {
    affectedRows
    returning {
      ...EnhancedServiceFragment
    }
  }
}

# =============================================================================
# SUBSCRIPTIONS (Real-time updates)
# =============================================================================

# Subscribe to Payroll Completion Status Changes
subscription PayrollCompletionUpdates(
  $clientId: uuid
) {
  payrollCompletionMetrics(
    where: {
      payrollDate: {
        payroll: { clientId: { _eq: $clientId } }
      }
    }
    orderBy: [{ completedAt: DESC }]
  ) {
    ...PayrollCompletionMetricsFragment
    payrollDate {
      id
      payroll {
        id
        name
        client {
          id
          name
        }
      }
    }
  }
}

# Subscribe to Tier 1 Billing Generation
subscription Tier1BillingUpdates(
  $clientId: uuid
) {
  billingItems(
    where: {
      billingTier: { _eq: "tier1" }
      autoGenerated: { _eq: true }
      clientId: { _eq: $clientId }
    }
    orderBy: [{ createdAt: DESC }]
  ) {
    ...EnhancedBillingItemFragment
  }
}

# Subscribe to Recurring Service Changes
subscription RecurringServiceUpdates(
  $clientId: uuid!
) {
  clientRecurringServices(
    where: { clientId: { _eq: $clientId } }
    orderBy: [{ effectiveFrom: DESC }]
  ) {
    ...ClientRecurringServicesFragment
    recurringService {
      ...RecurringServiceConfigFragment
    }
  }
}