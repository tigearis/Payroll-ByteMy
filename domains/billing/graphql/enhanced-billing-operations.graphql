# Enhanced Billing Operations for Complete Service-to-Billing Workflow

# ===== BILLING ITEMS QUERIES =====

query GetAllBillingItemsWithDetails {
  billingItems(orderBy: { createdAt: DESC }) {
    id
    amount
    unitPrice
    quantity
    description
    status
    notes
    createdAt
    updatedAt
    approvalDate
    confirmedAt
    billingPeriodStart
    billingPeriodEnd
    approvalLevel
    isApproved
    isAutoGenerated
    
    # Client relationship
    client {
      id
      name
      active
      contactEmail
    }
    clientId
    
    # Service relationship
    service {
      id
      name
      description
      serviceCode
      category
      baseRate
      billingUnit
      chargeBasis
      approvalLevel
      billingTier
      isTimeBased
      billingUnitType {
        id
        name
        displayName
        requiresQuantityInput
        quantityPrompt
      }
    }
    serviceId
    
    # User relationships
    staffUser {
      id
      firstName
      lastName
      computedName
      role
    }
    approvedByUser {
      id
      firstName
      lastName
      computedName
    }
    confirmedByUser {
      id
      firstName
      lastName
      computedName
    }
    
    # Payroll relationship
    payroll {
      id
      name
      client {
        id
        name
      }
    }
    payrollId
    
    payrollDate {
      id
      originalEftDate
      adjustedEftDate
      status
    }
    payrollDateId
    
    # Billing unit type
    billingUnitType {
      id
      name
      displayName
      description
      requiresQuantityInput
      quantityPrompt
    }
  }
}

query GetClientsForBilling {
  clients(
    where: { active: { _eq: true } }
    orderBy: { name: ASC }
  ) {
    id
    name
    contactEmail
    active
    
    # Client service assignments count
    clientServiceAssignmentsAggregate {
      aggregate {
        count
      }
    }
    
    # Recent billing items
    billingItemsAggregate {
      aggregate {
        count
        sum {
          amount
        }
      }
    }
  }
}

query GetClientAssignedServicesEnhanced($clientId: uuid!) {
  clientServiceAssignments(
    where: { 
      clientId: { _eq: $clientId }
      isActive: { _eq: true }
    }
    orderBy: { service: { name: ASC } }
  ) {
    id
    clientId
    serviceId
    customRate
    isActive
    notes
    customSeniorityMultipliers
    
    service {
      id
      name
      description
      serviceCode
      category
      baseRate
      billingUnit
      chargeBasis
      approvalLevel
      billingTier
      isTimeBased
      seniorityMultipliers
      
      billingUnitType {
        id
        name
        displayName
        description
        requiresQuantityInput
        quantityPrompt
        defaultSource
      }
    }
    
    client {
      id
      name
    }
  }
}

query GetUsersByRoleEnhanced {
  users(
    where: { isActive: { _eq: true } }
    orderBy: { firstName: ASC }
  ) {
    id
    firstName
    lastName
    computedName
    role
    position
    currentHourlyRate
    isActive
  }
}

# ===== BILLING ITEMS MUTATIONS =====

mutation CreateBillingItemFromServiceEnhanced($input: BillingItemsInsertInput!) {
  insertBillingItemsOne(object: $input) {
    id
    amount
    unitPrice
    quantity
    description
    status
    notes
    createdAt
    
    client {
      id
      name
    }
    
    service {
      id
      name
      category
    }
    
    staffUser {
      id
      computedName
    }
  }
}

mutation UpdateBillingItemFromServiceEnhanced($id: uuid!, $set: BillingItemsSetInput!) {
  updateBillingItemsByPk(pkColumns: { id: $id }, _set: $set) {
    id
    amount
    unitPrice
    quantity
    description
    status
    notes
    updatedAt
    
    client {
      id
      name
    }
    
    service {
      id
      name
      category
    }
  }
}

mutation UpdateBillingItemStatus(
  $id: uuid!
  $status: String!
  $approvedBy: uuid
  $approvalDate: timestamptz
) {
  updateBillingItemsByPk(
    pkColumns: { id: $id }
    _set: {
      status: $status
      approvedBy: $approvedBy
      approvalDate: $approvalDate
      isApproved: true
    }
  ) {
    id
    status
    approvalDate
    approvedBy
    approvedByUser {
      id
      computedName
    }
  }
}

mutation DeleteBillingItem($id: uuid!) {
  deleteBillingItemsByPk(id: $id) {
    id
    description
    amount
  }
}

# ===== PAYROLL SERVICE AGREEMENTS =====

query GetPayrollServiceAgreementsEnhanced($payrollId: uuid!) {
  payrollServiceAgreements(
    where: { payrollId: { _eq: $payrollId } }
    orderBy: { createdAt: ASC }
  ) {
    id
    payrollId
    serviceId
    clientServiceAgreementId
    customRate
    customQuantity
    customDescription
    isActive
    isOneTime
    billingFrequency
    autoBillingEnabled
    billingItemsGenerated
    serviceConfiguration
    billingNotes
    createdAt
    
    # Service details
    payrollServiceAgreementsByServiceId {
      id
      name
      description
      category
      baseRate
      billingUnit
      chargeBasis
      billingTier
      isTimeBased
      
      billingUnitType {
        id
        name
        displayName
        requiresQuantityInput
        quantityPrompt
        defaultSource
      }
    }
    
    # Client service agreement
    clientServiceAgreement {
      id
      customRate
      billingFrequency
      isActive
      
      service {
        id
        name
        description
        category
        baseRate
        billingUnit
        billingTier
      }
      
      client {
        id
        name
      }
    }
    
    # Payroll details
    payrollServiceAgreementsForPayroll {
      id
      name
      client {
        id
        name
      }
      employeeCount
      primaryConsultantUserId
      backupConsultantUserId
      managerUserId
    }
  }
}

mutation CreatePayrollServiceAgreementEnhanced($input: PayrollServiceAgreementsInsertInput!) {
  insertPayrollServiceAgreementsOne(object: $input) {
    id
    payrollId
    serviceId
    customRate
    customQuantity
    isActive
    isOneTime
    createdAt
    
    payrollServiceAgreementsByServiceId {
      id
      name
      category
    }
    
    payrollServiceAgreementsForPayroll {
      id
      name
      client {
        id
        name
      }
    }
  }
}

mutation UpdatePayrollServiceAgreementEnhanced($id: uuid!, $set: PayrollServiceAgreementsSetInput!) {
  updatePayrollServiceAgreementsByPk(pkColumns: { id: $id }, _set: $set) {
    id
    payrollId
    serviceId
    customRate
    customQuantity
    isActive
    isOneTime
    updatedAt
    
    payrollServiceAgreementsByServiceId {
      id
      name
      category
    }
  }
}

mutation DeletePayrollServiceAgreementEnhanced($id: uuid!) {
  deletePayrollServiceAgreementsByPk(id: $id) {
    id
    payrollId
    serviceId
    
    payrollServiceAgreementsByServiceId {
      name
    }
    
    payrollServiceAgreementsForPayroll {
      name
      client {
        name
      }
    }
  }
}

# ===== SERVICE ASSIGNMENT ANALYTICS =====

query GetServiceAssignmentAnalytics($clientId: uuid) {
  # Active client service agreements
  clientServiceAgreements(
    where: { 
      clientId: { _eq: $clientId }
      isActive: { _eq: true }
    }
  ) {
    id
    customRate
    billingFrequency
    
    service {
      id
      name
      category
      baseRate
      billingTier
    }
    
    # Payroll service agreements count
    payrollServiceAgreementsAggregate {
      aggregate {
        count
      }
    }
    
    # Recent billing items
    service {
      billingItemsAggregate(
        where: {
          clientId: { _eq: $clientId }
        }
      ) {
        aggregate {
          count
          sum {
            amount
          }
        }
      }
    }
  }
  
  # Payroll service agreements for this client
  payrollServiceAgreements(
    where: {
      payrollServiceAgreementsForPayroll: {
        clientId: { _eq: $clientId }
      }
    }
  ) {
    id
    isOneTime
    billingItemsGenerated
    customRate
    
    payrollServiceAgreementsByServiceId {
      id
      name
      category
    }
    
    payrollServiceAgreementsForPayroll {
      id
      name
    }
  }
  
  # Billing items summary
  billingItemsAggregate(
    where: { 
      clientId: { _eq: $clientId }
    }
  ) {
    aggregate {
      count
      sum {
        amount
      }
      avg {
        amount
      }
    }
    nodes {
      status
      amount
      createdAt
      service {
        name
        category
      }
    }
  }
}

# ===== BILLING WORKFLOW QUERIES =====

query GetBillingWorkflowOverview {
  # Draft items needing submission
  draftItems: billingItemsAggregate(
    where: { status: { _eq: "draft" } }
  ) {
    aggregate {
      count
      sum { amount }
    }
  }
  
  # Pending approval items
  pendingItems: billingItemsAggregate(
    where: { status: { _eq: "pending" } }
  ) {
    aggregate {
      count
      sum { amount }
    }
  }
  
  # Approved items ready for invoicing
  approvedItems: billingItemsAggregate(
    where: { status: { _eq: "approved" } }
  ) {
    aggregate {
      count
      sum { amount }
    }
  }
  
  # Recent activity
  recentActivity: billingItems(
    orderBy: { createdAt: DESC }
    limit: 10
  ) {
    id
    description
    amount
    status
    createdAt
    
    client {
      name
    }
    
    service {
      name
      category
    }
    
    staffUser {
      computedName
    }
  }
  
  # Service utilization this month
  serviceUtilization: services {
    id
    name
    category
    
    billingItemsAggregate {
      aggregate {
        count
        sum { amount }
      }
    }
  }
}