# 3-Tier Billing System GraphQL Operations
# Comprehensive operations for the new 3-tier automatic billing system

# =============================================================================
# FRAGMENTS
# =============================================================================

# Monthly Billing Completion Fragment
fragment MonthlyBillingCompletionFragment on MonthlyBillingCompletion {
  id
  clientId
  billingMonth
  billingPeriodId
  totalPayrolls
  completedPayrolls
  pendingPayrollIds
  totalPayrollDates
  completedPayrollDates
  pendingPayrollDateIds
  status
  tier1BillingGenerated
  tier2BillingGenerated
  tier3BillingGenerated
  firstPayrollCompletedAt
  lastPayrollCompletedAt
  billingReadyAt
  billingGeneratedAt
  completionNotes
  autoBillingEnabled
  overrideCompletionDate
  createdAt
  updatedAt
}

# Payroll Service Agreement Fragment
fragment PayrollServiceAgreementFragment on PayrollServiceAgreements {
  id
  payrollId
  serviceId
  clientServiceAgreementId
  customRate
  customQuantity
  customDescription
  isOneTime
  isActive
  billingFrequency
  autoBillingEnabled
  billingNotes
  billingItemsGenerated
  generatedAt
  generatedBy
  serviceConfiguration
  createdAt
  updatedAt
  createdBy
}

# Enhanced Service Fragment with Tier Information
fragment ServiceWithTierFragment on Services {
  id
  name
  description
  category
  billingUnit
  defaultRate
  currency
  serviceType
  isActive
  isTemplate
  metadata
  pricingRules
  dependencies
  billingTier
  tierPriority
  requiresPayrollCompletion
  requiresMonthlyCompletion
  createdAt
  updatedAt
  createdBy
  updatedBy
}

# User Rate History Fragment
fragment UserRateHistoryFragment on UserRateHistory {
  id
  userId
  hourlyRate
  effectiveFrom
  effectiveTo
  rateType
  costCenter
  billingCategory
  notes
  createdAt
  createdBy
}

# Enhanced Time Entry Fragment with Cost Data
fragment TimeEntryWithCostFragment on PayrollDateTimeEntries {
  id
  payrollDateId
  userId
  timeSpentMinutes
  description
  workDate
  hourlyRateUsed
  totalCost
  costCenter
  isBillable
  billingNotes
  createdAt
  updatedAt
}

# Monthly Billing Dashboard Fragment
fragment MonthlyBillingDashboardFragment on MonthlyBillingDashboard {
  id
  clientId
  clientName
  billingMonth
  billingMonthDisplay
  totalPayrolls
  completedPayrolls
  totalPayrollDates
  completedPayrollDates
  status
  tier1BillingGenerated
  tier2BillingGenerated
  tier3BillingGenerated
  billingReadyAt
  billingGeneratedAt
  completionPercentage
  daysReadyForBilling
  billingItemsCount
  totalBillingAmount
  activeServiceAgreements
}

# =============================================================================
# QUERIES
# =============================================================================

# Get Monthly Billing Dashboard
query GetMonthlyBillingDashboard(
  $limit: Int = 50
  $offset: Int = 0
  $clientId: uuid
  $billingMonth: date
  $status: String
) {
  monthlyBillingDashboard(
    limit: $limit
    offset: $offset
    where: {
      _and: [
        { clientId: { _eq: $clientId } }
        { billingMonth: { _eq: $billingMonth } }
        { status: { _eq: $status } }
      ]
    }
    orderBy: [{ billingMonth: DESC }, { clientName: ASC }]
  ) {
    ...MonthlyBillingDashboardFragment
  }
}

# Get Monthly Billing Completion Status
query GetMonthlyBillingCompletion(
  $clientId: uuid!
  $billingMonth: date!
) {
  monthlyBillingCompletion(
    where: {
      clientId: { _eq: $clientId }
      billingMonth: { _eq: $billingMonth }
    }
  ) {
    ...MonthlyBillingCompletionFragment
    client {
      id
      name
      contactEmail
    }
    billingPeriod {
      id
      status
      periodStart
      periodEnd
    }
  }
}

# Get Clients Ready for Monthly Billing
query GetClientsReadyForBilling(
  $limit: Int = 20
  $billingMonth: date
) {
  monthlyBillingCompletion(
    where: {
      status: { _eq: "ready_to_bill" }
      billingMonth: { _eq: $billingMonth }
      autoBillingEnabled: { _eq: true }
    }
    limit: $limit
    orderBy: [{ billingReadyAt: ASC }]
  ) {
    ...MonthlyBillingCompletionFragment
    client {
      id
      name
      contactEmail
      active
    }
  }
}

# Get Payroll Service Agreements
query GetPayrollServiceAgreements(
  $payrollId: uuid!
  $isActive: Boolean = true
) {
  payrollServiceAgreements(
    where: {
      payrollId: { _eq: $payrollId }
      isActive: { _eq: $isActive }
    }
    orderBy: [{ createdAt: DESC }]
  ) {
    ...PayrollServiceAgreementFragment
    service {
      ...ServiceWithTierFragment
    }
    clientServiceAgreement {
      id
      customRate
      billingFrequency
      isActive
    }
    payroll {
      id
      name
      clientId
      client {
        id
        name
      }
    }
  }
}

# Get Services by Billing Tier
query GetServicesByTier(
  $billingTier: String!
  $isActive: Boolean = true
  $limit: Int = 100
) {
  services(
    where: {
      billingTier: { _eq: $billingTier }
      isActive: { _eq: $isActive }
    }
    limit: $limit
    orderBy: [{ tierPriority: ASC }, { name: ASC }]
  ) {
    ...ServiceWithTierFragment
    clientAgreements(where: { isActive: { _eq: true } }) {
      id
      clientId
      customRate
      billingFrequency
      client {
        id
        name
      }
    }
  }
}

# Get User Rate History
query GetUserRateHistory(
  $userId: uuid!
  $limit: Int = 50
) {
  userRateHistory(
    where: { userId: { _eq: $userId } }
    limit: $limit
    orderBy: [{ effectiveFrom: DESC }]
  ) {
    ...UserRateHistoryFragment
    user {
      id
      firstName
      lastName
      computedName
      defaultHourlyRate
      costCenter
      billingCategory
    }
  }
}

# Get Current User Hourly Rates
query GetCurrentUserRates(
  $userIds: [uuid!]
  $effectiveDate: date = "now()"
) {
  users(
    where: { id: { _in: $userIds } }
  ) {
    id
    firstName
    lastName
    computedName
    defaultHourlyRate
    costCenter
    billingCategory
    rateEffectiveFrom
    currentRate: userRateHistories(
      where: {
        effectiveFrom: { _lte: $effectiveDate }
        _or: [
          { effectiveTo: { _gte: $effectiveDate } }
          { effectiveTo: { _is_null: true } }
        ]
      }
      orderBy: [{ effectiveFrom: DESC }]
      limit: 1
    ) {
      ...UserRateHistoryFragment
    }
  }
}

# Get Payroll Cost Analysis
query GetPayrollCostAnalysis(
  $payrollDateId: uuid
  $payrollId: uuid
  $clientId: uuid
  $billingMonth: date
  $limit: Int = 50
  $offset: Int = 0
) {
  payrollCostAnalysis(
    where: {
      _and: [
        { payrollDateId: { _eq: $payrollDateId } }
        { payrollId: { _eq: $payrollId } }
        { clientId: { _eq: $clientId } }
        { billingMonth: { _eq: $billingMonth } }
      ]
    }
    limit: $limit
    offset: $offset
    orderBy: [{ completedAt: DESC }]
  ) {
    payrollDateId
    payrollId
    payrollName
    clientId
    clientName
    billingMonth
    payrollDateStatus
    completedAt
    completedBy
    totalTimeMinutes
    totalHours
    totalInternalCost
    uniqueUsersWorked
    totalRevenue
    billingItemsCount
    estimatedProfit
    profitMarginPercentage
    revenuePerHour
    costPerHour
  }
}

# Get User Productivity Analysis
query GetUserProductivityAnalysis(
  $userIds: [uuid!]
  $isActive: Boolean = true
  $limit: Int = 50
) {
  userProductivityAnalysis(
    where: {
      _and: [
        { userId: { _in: $userIds } }
        { isActive: { _eq: $isActive } }
      ]
    }
    limit: $limit
    orderBy: [{ revenuePerHour30d: DESC }]
  ) {
    userId
    firstName
    lastName
    computedName
    defaultHourlyRate
    costCenter
    billingCategory
    totalHoursLast30Days
    totalInternalCost30d
    payrollDatesWorked30d
    totalRevenueGenerated30d
    revenuePerHour30d
    profitGenerated30d
    efficiencyRatio30d
  }
}

# Get Time Entries with Cost Data
query GetTimeEntriesWithCost(
  $payrollDateId: uuid
  $userId: uuid
  $workDateFrom: date
  $workDateTo: date
  $limit: Int = 100
  $offset: Int = 0
) {
  payrollDateTimeEntries(
    where: {
      _and: [
        { payrollDateId: { _eq: $payrollDateId } }
        { userId: { _eq: $userId } }
        { workDate: { _gte: $workDateFrom } }
        { workDate: { _lte: $workDateTo } }
      ]
    }
    limit: $limit
    offset: $offset
    orderBy: [{ workDate: DESC }, { createdAt: DESC }]
  ) {
    ...TimeEntryWithCostFragment
    user {
      id
      firstName
      lastName
      computedName
      defaultHourlyRate
      costCenter
    }
    payrollDate {
      id
      payrollId
      originalEftDate
      adjustedEftDate
      status
      payroll {
        id
        name
        client {
          id
          name
        }
      }
    }
  }
}

# =============================================================================
# MUTATIONS
# =============================================================================

# Generate Tier 1 Billing (Payroll Date Level)
mutation GenerateTier1Billing(
  $payrollDateId: uuid!
  $completedBy: uuid!
) {
  generateTier1Billing(
    args: {
      p_payroll_date_id: $payrollDateId
      p_completed_by: $completedBy
    }
  ) {
    success
    tier
    payrollDateId
    itemsCreated
    totalAmount
    message
  }
}

# Generate Tier 2 Billing (Payroll Level)
mutation GenerateTier2Billing(
  $payrollId: uuid!
  $completedBy: uuid!
) {
  generateTier2Billing(
    args: {
      p_payroll_id: $payrollId
      p_completed_by: $completedBy
    }
  ) {
    success
    tier
    payrollId
    itemsCreated
    totalAmount
    message
  }
}

# Generate Tier 3 Billing (Monthly Client Level)
mutation GenerateTier3Billing(
  $clientId: uuid!
  $billingMonth: date!
  $generatedBy: uuid!
) {
  generateTier3Billing(
    args: {
      p_client_id: $clientId
      p_billing_month: $billingMonth
      p_generated_by: $generatedBy
    }
  ) {
    success
    tier
    clientId
    billingMonth
    itemsCreated
    totalAmount
    message
  }
}

# Process Automatic Billing (All Tiers)
mutation ProcessAutomaticBilling {
  processAutomaticBilling {
    success
    totalItemsCreated
    totalAmountGenerated
    tier1Results
    tier2Results
    tier3Results
    processedAt
    summary
  }
}

# Create Payroll Service Agreement (Override)
mutation CreatePayrollServiceAgreement(
  $input: PayrollServiceAgreementsInsertInput!
) {
  insertPayrollServiceAgreementsOne(object: $input) {
    ...PayrollServiceAgreementFragment
    service {
      ...ServiceWithTierFragment
    }
  }
}

# Update Payroll Service Agreement
mutation UpdatePayrollServiceAgreement(
  $id: uuid!
  $updates: PayrollServiceAgreementsSetInput!
) {
  updatePayrollServiceAgreementsByPk(
    pkColumns: { id: $id }
    _set: $updates
  ) {
    ...PayrollServiceAgreementFragment
  }
}

# Delete Payroll Service Agreement
mutation DeletePayrollServiceAgreement($id: uuid!) {
  deletePayrollServiceAgreementsByPk(id: $id) {
    id
    payrollId
    serviceId
  }
}

# Create User Rate History Entry
mutation CreateUserRateHistory(
  $input: UserRateHistoryInsertInput!
) {
  insertUserRateHistoryOne(object: $input) {
    ...UserRateHistoryFragment
  }
}

# Update User Default Hourly Rate
mutation UpdateUserHourlyRate(
  $userId: uuid!
  $defaultHourlyRate: numeric!
  $rateEffectiveFrom: date = "now()"
  $costCenter: String
  $billingCategory: String = "consultant"
) {
  updateUsersByPk(
    pkColumns: { id: $userId }
    _set: {
      defaultHourlyRate: $defaultHourlyRate
      rateEffectiveFrom: $rateEffectiveFrom
      costCenter: $costCenter
      billingCategory: $billingCategory
    }
  ) {
    id
    firstName
    lastName
    defaultHourlyRate
    rateEffectiveFrom
    costCenter
    billingCategory
  }
}

# Update Monthly Billing Completion Status
mutation UpdateMonthlyBillingCompletion(
  $clientId: uuid!
  $billingMonth: date!
  $updates: MonthlyBillingCompletionSetInput!
) {
  updateMonthlyBillingCompletion(
    where: {
      clientId: { _eq: $clientId }
      billingMonth: { _eq: $billingMonth }
    }
    _set: $updates
  ) {
    affectedRows
    returning {
      ...MonthlyBillingCompletionFragment
    }
  }
}

# Override Monthly Billing Completion
mutation OverrideMonthlyBillingCompletion(
  $clientId: uuid!
  $billingMonth: date!
  $overrideCompletionDate: date!
  $completionNotes: String
) {
  updateMonthlyBillingCompletion(
    where: {
      clientId: { _eq: $clientId }
      billingMonth: { _eq: $billingMonth }
    }
    _set: {
      status: "ready_to_bill"
      overrideCompletionDate: $overrideCompletionDate
      completionNotes: $completionNotes
      billingReadyAt: "now()"
    }
  ) {
    affectedRows
    returning {
      ...MonthlyBillingCompletionFragment
    }
  }
}

# Add Time Entry with Cost Calculation
mutation AddTimeEntryWithCost(
  $input: PayrollDateTimeEntriesInsertInput!
) {
  insertPayrollDateTimeEntriesOne(object: $input) {
    ...TimeEntryWithCostFragment
  }
}

# Update Service Billing Tier
mutation UpdateServiceBillingTier(
  $serviceId: uuid!
  $billingTier: String!
  $tierPriority: Int = 100
  $requiresPayrollCompletion: Boolean = false
  $requiresMonthlyCompletion: Boolean = true
) {
  updateServicesByPk(
    pkColumns: { id: $serviceId }
    _set: {
      billingTier: $billingTier
      tierPriority: $tierPriority
      requiresPayrollCompletion: $requiresPayrollCompletion
      requiresMonthlyCompletion: $requiresMonthlyCompletion
    }
  ) {
    ...ServiceWithTierFragment
  }
}

# =============================================================================
# SUBSCRIPTIONS
# =============================================================================

# Subscribe to Monthly Billing Dashboard Changes
subscription MonthlyBillingDashboardSubscription(
  $clientId: uuid
  $billingMonth: date
) {
  monthlyBillingDashboard(
    where: {
      _and: [
        { clientId: { _eq: $clientId } }
        { billingMonth: { _eq: $billingMonth } }
      ]
    }
    orderBy: [{ billingMonth: DESC }]
  ) {
    ...MonthlyBillingDashboardFragment
  }
}

# Subscribe to Payroll Service Agreement Changes
subscription PayrollServiceAgreementsSubscription($payrollId: uuid!) {
  payrollServiceAgreements(
    where: { payrollId: { _eq: $payrollId } }
    orderBy: [{ createdAt: DESC }]
  ) {
    ...PayrollServiceAgreementFragment
    service {
      ...ServiceWithTierFragment
    }
  }
}

# Subscribe to Time Entries with Cost Changes
subscription TimeEntriesWithCostSubscription(
  $payrollDateId: uuid!
) {
  payrollDateTimeEntries(
    where: { payrollDateId: { _eq: $payrollDateId } }
    orderBy: [{ workDate: DESC }, { createdAt: DESC }]
  ) {
    ...TimeEntryWithCostFragment
    user {
      id
      firstName
      lastName
      computedName
    }
  }
}