/* eslint-disable */
import * as types from './graphql';
import { TypedDocumentNode as DocumentNode } from '@graphql-typed-document-node/core';

/**
 * Map of all GraphQL operations in the project.
 *
 * This map has several performance disadvantages:
 * 1. It is not tree-shakeable, so it will include all operations in the project.
 * 2. It is not minifiable, so the string of a GraphQL query will be multiple times inside the bundle.
 * 3. It does not support dead code elimination, so it will add unused operations.
 *
 * Therefore it is highly recommended to use the babel or swc plugin for production.
 * Learn more about it here: https://the-guild.dev/graphql/codegen/plugins/presets/preset-client#reducing-bundle-size
 */
type Documents = {
    "fragment ExternalSystemCore on ExternalSystems {\n  id\n  name\n  description\n  icon\n  createdAt\n  updatedAt\n}\n\nfragment ExternalSystemBasic on ExternalSystems {\n  ...ExternalSystemCore\n  url\n}\n\nfragment ExternalSystemDetailed on ExternalSystems {\n  ...ExternalSystemBasic\n}\n\nfragment ExternalSystemWithClients on ExternalSystems {\n  ...ExternalSystemBasic\n  clientExternalSystems {\n    id\n    clientId\n    externalSystem {\n      id\n      name\n      description\n      url\n    }\n    systemClientId\n    createdAt\n    updatedAt\n    client {\n      id\n      name\n    }\n  }\n}\n\nfragment ExternalSystemComplete on ExternalSystems {\n  ...ExternalSystemDetailed\n  clientExternalSystems {\n    id\n    clientId\n    externalSystem {\n      id\n      name\n      description\n      url\n    }\n    systemClientId\n    createdAt\n    updatedAt\n    client {\n      id\n      name\n      contactPerson\n      contactEmail\n    }\n  }\n}\n\nfragment ClientExternalSystemCore on ClientExternalSystems {\n  id\n  clientId\n  externalSystem {\n    id\n    name\n    description\n    url\n  }\n  systemClientId\n  createdAt\n  updatedAt\n}\n\nfragment ClientExternalSystemBasic on ClientExternalSystems {\n  ...ClientExternalSystemCore\n}\n\nfragment ClientExternalSystemDetailed on ClientExternalSystems {\n  ...ClientExternalSystemBasic\n}\n\nfragment ClientExternalSystemWithRelations on ClientExternalSystems {\n  ...ClientExternalSystemBasic\n  client {\n    id\n    name\n    contactPerson\n    contactEmail\n  }\n  externalSystem {\n    id\n    name\n    description\n    url\n    icon\n  }\n}\n\nfragment ClientExternalSystemComplete on ClientExternalSystems {\n  ...ClientExternalSystemDetailed\n  client {\n    id\n    name\n    contactPerson\n    contactEmail\n    contactPhone\n  }\n  externalSystem {\n    id\n    name\n    description\n    url\n    icon\n    createdAt\n    updatedAt\n  }\n}\n\nfragment ExternalSystemSummary on ExternalSystems {\n  id\n  name\n  description\n  icon\n}\n\nfragment ExternalSystemListItem on ExternalSystems {\n  ...ExternalSystemSummary\n  url\n  createdAt\n  updatedAt\n  clientCount: clientExternalSystemsAggregate {\n    aggregate {\n      count\n    }\n  }\n}\n\nfragment ExternalSystemTableRow on ExternalSystems {\n  ...ExternalSystemListItem\n}\n\nfragment ExternalSystemDashboardCard on ExternalSystems {\n  ...ExternalSystemSummary\n  url\n  clientCount: clientExternalSystemsAggregate {\n    aggregate {\n      count\n    }\n  }\n}\n\nfragment ClientExternalSystemSummary on ClientExternalSystems {\n  id\n  clientId\n  externalSystem {\n    id\n    name\n    description\n    url\n  }\n  systemClientId\n  createdAt\n  updatedAt\n}\n\nfragment ClientExternalSystemListItem on ClientExternalSystems {\n  ...ClientExternalSystemSummary\n  client {\n    id\n    name\n  }\n  externalSystem {\n    id\n    name\n    description\n    url\n    icon\n  }\n}\n\nfragment ClientExternalSystemTableRow on ClientExternalSystems {\n  ...ClientExternalSystemListItem\n}\n\nfragment ExternalSystemMinimal on ExternalSystems {\n  id\n  name\n  url\n  icon\n}\n\nfragment ClientExternalSystemMinimal on ClientExternalSystems {\n  id\n  clientId\n  externalSystem {\n    id\n    name\n    description\n    url\n  }\n  systemClientId\n}\n\nfragment ExternalSystemConfig on ExternalSystems {\n  id\n  name\n  description\n  url\n  icon\n  createdAt\n  updatedAt\n}\n\nfragment ClientExternalSystemConfig on ClientExternalSystems {\n  id\n  clientId\n  externalSystem {\n    id\n    name\n    description\n    url\n  }\n  systemClientId\n  createdAt\n  updatedAt\n}\n\nfragment ExternalSystemForAudit on ExternalSystems {\n  id\n  name\n  description\n  url\n  icon\n  createdAt\n  updatedAt\n}\n\nfragment ClientExternalSystemForAudit on ClientExternalSystems {\n  id\n  clientId\n  externalSystem {\n    id\n    name\n    description\n    url\n  }\n  systemClientId\n  createdAt\n  updatedAt\n}\n\nfragment ExternalSystemMonitoring on ExternalSystems {\n  id\n  name\n  description\n  url\n  icon\n  clientExternalSystemsAggregate {\n    aggregate {\n      count\n    }\n  }\n}": typeof types.ExternalSystemCoreFragmentDoc,
    "mutation CreateExternalSystem($object: ExternalSystemsInsertInput!) {\n  insertExternalSystemsOne(object: $object) {\n    ...ExternalSystemDetailed\n  }\n}\n\nmutation UpdateExternalSystem($id: uuid!, $set: ExternalSystemsSetInput!) {\n  updateExternalSystemsByPk(pkColumns: {id: $id}, _set: $set) {\n    ...ExternalSystemDetailed\n  }\n}\n\nmutation DeleteExternalSystem($id: uuid!) {\n  deleteExternalSystemsByPk(id: $id) {\n    id\n    name\n  }\n}\n\nmutation CreateClientExternalSystem($object: ClientExternalSystemsInsertInput!) {\n  insertClientExternalSystemsOne(object: $object) {\n    ...ClientExternalSystemComplete\n  }\n}\n\nmutation UpdateClientExternalSystem($id: uuid!, $set: ClientExternalSystemsSetInput!) {\n  updateClientExternalSystemsByPk(pkColumns: {id: $id}, _set: $set) {\n    ...ClientExternalSystemComplete\n  }\n}\n\nmutation DeleteClientExternalSystem($id: uuid!) {\n  deleteClientExternalSystemsByPk(id: $id) {\n    id\n    clientId\n  }\n}\n\nmutation ConnectClientToSystem($clientId: uuid!, $externalSystemId: uuid!, $systemClientId: String) {\n  insertClientExternalSystemsOne(\n    object: {clientId: $clientId, systemClientId: $systemClientId}\n  ) {\n    ...ClientExternalSystemComplete\n  }\n}\n\nmutation DisconnectClientFromSystem($id: uuid!) {\n  deleteClientExternalSystemsByPk(id: $id) {\n    id\n    clientId\n  }\n}\n\nmutation BulkDeleteExternalSystems($systemIds: [uuid!]!) {\n  deleteExternalSystems(where: {id: {_in: $systemIds}}) {\n    affectedRows\n    returning {\n      id\n      name\n    }\n  }\n}\n\nmutation BulkDeleteClientExternalSystems($clientSystemIds: [uuid!]!) {\n  deleteClientExternalSystems(where: {id: {_in: $clientSystemIds}}) {\n    affectedRows\n    returning {\n      id\n      clientId\n    }\n  }\n}\n\nmutation DisconnectAllClientSystemsBySystem($externalSystemId: uuid!) {\n  deleteClientExternalSystems(\n    where: {externalSystem: {id: {_eq: $externalSystemId}}}\n  ) {\n    affectedRows\n    returning {\n      id\n      clientId\n    }\n  }\n}\n\nmutation DisconnectAllClientSystemsByClient($clientId: uuid!) {\n  deleteClientExternalSystems(where: {clientId: {_eq: $clientId}}) {\n    affectedRows\n    returning {\n      id\n      clientId\n    }\n  }\n}\n\nmutation TransferClientSystemConnections($oldClientId: uuid!, $newClientId: uuid!) {\n  updateClientExternalSystems(\n    where: {clientId: {_eq: $oldClientId}}\n    _set: {clientId: $newClientId, updatedAt: \"now()\"}\n  ) {\n    affectedRows\n    returning {\n      id\n      clientId\n    }\n  }\n}\n\nmutation UpdateExternalSystemDetails($id: uuid!, $name: String, $description: String, $url: String, $icon: String) {\n  updateExternalSystemsByPk(\n    pkColumns: {id: $id}\n    _set: {name: $name, description: $description, url: $url, icon: $icon, updatedAt: \"now()\"}\n  ) {\n    ...ExternalSystemBasic\n  }\n}\n\nmutation UpdateClientSystemMapping($id: uuid!, $systemClientId: String) {\n  updateClientExternalSystemsByPk(\n    pkColumns: {id: $id}\n    _set: {systemClientId: $systemClientId, updatedAt: \"now()\"}\n  ) {\n    ...ClientExternalSystemBasic\n  }\n}": typeof types.CreateExternalSystemDocument,
    "query GetExternalSystems($limit: Int = 50, $offset: Int = 0, $where: ExternalSystemsBoolExp) {\n  externalSystems(\n    limit: $limit\n    offset: $offset\n    where: $where\n    orderBy: {name: ASC}\n  ) {\n    ...ExternalSystemListItem\n  }\n  externalSystemsAggregate(where: $where) {\n    aggregate {\n      count\n    }\n  }\n}\n\nquery GetExternalSystemById($id: uuid!) {\n  externalSystemsByPk(id: $id) {\n    ...ExternalSystemComplete\n  }\n}\n\nquery GetExternalSystemBasic($id: uuid!) {\n  externalSystemsByPk(id: $id) {\n    ...ExternalSystemBasic\n  }\n}\n\nquery GetExternalSystemConfig($id: uuid!) {\n  externalSystemsByPk(id: $id) {\n    ...ExternalSystemConfig\n  }\n}\n\nquery GetActiveExternalSystems {\n  externalSystems(orderBy: {name: ASC}) {\n    ...ExternalSystemBasic\n  }\n}\n\nquery GetExternalSystemsSimple {\n  externalSystems(orderBy: {name: ASC}) {\n    ...ExternalSystemMinimal\n  }\n}\n\nquery GetClientExternalSystems($clientId: uuid!) {\n  clientExternalSystems(\n    where: {clientId: {_eq: $clientId}}\n    orderBy: {createdAt: DESC}\n  ) {\n    ...ClientExternalSystemWithRelations\n  }\n}\n\nquery GetClientExternalSystemById($id: uuid!) {\n  clientExternalSystemsByPk(id: $id) {\n    ...ClientExternalSystemComplete\n  }\n}\n\nquery GetActiveClientExternalSystems($clientId: uuid!) {\n  clientExternalSystems(\n    where: {clientId: {_eq: $clientId}}\n    orderBy: {createdAt: DESC}\n  ) {\n    ...ClientExternalSystemWithRelations\n  }\n}\n\nquery GetSystemClientConnections($externalSystemId: uuid!) {\n  clientExternalSystems(\n    where: {externalSystem: {id: {_eq: $externalSystemId}}}\n    orderBy: {createdAt: DESC}\n  ) {\n    ...ClientExternalSystemWithRelations\n  }\n}\n\nquery GetActiveSystemClientConnections($externalSystemId: uuid!) {\n  clientExternalSystems(\n    where: {externalSystem: {id: {_eq: $externalSystemId}}}\n    orderBy: {createdAt: DESC}\n  ) {\n    ...ClientExternalSystemWithRelations\n  }\n}\n\nquery GetExternalSystemsDashboardStats {\n  totalSystems: externalSystemsAggregate {\n    aggregate {\n      count\n    }\n  }\n  totalConnections: clientExternalSystemsAggregate {\n    aggregate {\n      count\n    }\n  }\n  recentSystems: externalSystems(orderBy: {createdAt: DESC}, limit: 5) {\n    ...ExternalSystemDashboardCard\n  }\n}\n\nquery GetSystemIntegrationOverview {\n  externalSystems(orderBy: {name: ASC}) {\n    ...ExternalSystemMonitoring\n  }\n}\n\nquery GetSystemUsageStats {\n  systemUsage: externalSystems {\n    id\n    name\n    description\n    totalClients: clientExternalSystemsAggregate {\n      aggregate {\n        count\n      }\n    }\n  }\n}\n\nquery SearchExternalSystems($searchTerm: String!, $limit: Int = 50) {\n  externalSystems(\n    where: {_or: [{name: {_ilike: $searchTerm}}, {description: {_ilike: $searchTerm}}, {url: {_ilike: $searchTerm}}]}\n    orderBy: {name: ASC}\n    limit: $limit\n  ) {\n    ...ExternalSystemTableRow\n  }\n}\n\nquery FilterExternalSystemsByDateRange($startDate: timestamptz!, $endDate: timestamptz!) {\n  externalSystems(\n    where: {createdAt: {_gte: $startDate, _lte: $endDate}}\n    orderBy: {createdAt: DESC}\n  ) {\n    ...ExternalSystemListItem\n  }\n}\n\nquery GetClientSystemsByDate($clientId: uuid!, $startDate: timestamptz!, $endDate: timestamptz!) {\n  clientExternalSystems(\n    where: {clientId: {_eq: $clientId}, createdAt: {_gte: $startDate, _lte: $endDate}}\n    orderBy: {createdAt: DESC}\n  ) {\n    ...ClientExternalSystemWithRelations\n  }\n}\n\nquery GetExternalSystemsForAudit($limit: Int = 100, $offset: Int = 0, $where: ExternalSystemsBoolExp = {}) {\n  externalSystems(\n    limit: $limit\n    offset: $offset\n    where: $where\n    orderBy: {createdAt: DESC}\n  ) {\n    ...ExternalSystemForAudit\n  }\n}\n\nquery GetClientExternalSystemsForAudit($limit: Int = 100, $offset: Int = 0, $where: ClientExternalSystemsBoolExp = {}) {\n  clientExternalSystems(\n    limit: $limit\n    offset: $offset\n    where: $where\n    orderBy: {createdAt: DESC}\n  ) {\n    ...ClientExternalSystemForAudit\n  }\n}\n\nquery GetSystemActivityAudit($externalSystemId: uuid!, $limit: Int = 50) {\n  clientExternalSystems(\n    where: {externalSystem: {id: {_eq: $externalSystemId}}}\n    orderBy: {updatedAt: DESC}\n    limit: $limit\n  ) {\n    ...ClientExternalSystemForAudit\n  }\n}\n\nquery GetExternalSystemsPaginated($limit: Int = 20, $offset: Int = 0, $where: ExternalSystemsBoolExp = {}, $orderBy: [ExternalSystemsOrderBy!] = [{name: ASC}]) {\n  externalSystems(\n    limit: $limit\n    offset: $offset\n    where: $where\n    orderBy: $orderBy\n  ) {\n    ...ExternalSystemTableRow\n  }\n  externalSystemsAggregate(where: $where) {\n    aggregate {\n      count\n    }\n  }\n}\n\nquery GetClientExternalSystemsPaginated($clientId: uuid!, $limit: Int = 20, $offset: Int = 0, $where: ClientExternalSystemsBoolExp = {}) {\n  clientExternalSystems(\n    where: {_and: [{clientId: {_eq: $clientId}}, $where]}\n    orderBy: {createdAt: DESC}\n    limit: $limit\n    offset: $offset\n  ) {\n    ...ClientExternalSystemTableRow\n  }\n  clientSystemsAggregate: clientExternalSystemsAggregate(\n    where: {_and: [{clientId: {_eq: $clientId}}, $where]}\n  ) {\n    aggregate {\n      count\n    }\n  }\n}\n\nquery GetExternalSystemsQuickList {\n  externalSystems(orderBy: {name: ASC}) {\n    ...ExternalSystemMinimal\n  }\n}\n\nquery GetClientSystemsQuickList($clientId: uuid!) {\n  clientExternalSystems(\n    where: {clientId: {_eq: $clientId}}\n    orderBy: {createdAt: DESC}\n  ) {\n    ...ClientExternalSystemMinimal\n  }\n}": typeof types.GetExternalSystemsDocument,
    "subscription ExternalSystemsUpdates {\n  externalSystems(orderBy: {updatedAt: DESC}) {\n    ...ExternalSystemMonitoring\n  }\n}\n\nsubscription ExternalSystemUpdates($id: uuid!) {\n  externalSystems(where: {id: {_eq: $id}}) {\n    ...ExternalSystemComplete\n  }\n}\n\nsubscription ClientExternalSystemsUpdates($clientId: uuid!) {\n  clientExternalSystems(\n    where: {clientId: {_eq: $clientId}}\n    orderBy: {updatedAt: DESC}\n  ) {\n    ...ClientExternalSystemWithRelations\n  }\n}\n\nsubscription ClientSystemUpdates($id: uuid!) {\n  clientExternalSystems(where: {id: {_eq: $id}}) {\n    ...ClientExternalSystemComplete\n  }\n}\n\nsubscription SystemClientConnectionsUpdates($externalSystemId: uuid!) {\n  clientExternalSystems(\n    where: {externalSystem: {id: {_eq: $externalSystemId}}}\n    orderBy: {createdAt: DESC}\n  ) {\n    ...ClientExternalSystemWithRelations\n  }\n}\n\nsubscription ExternalSystemsCountUpdates {\n  externalSystemsAggregate {\n    aggregate {\n      count\n    }\n  }\n}\n\nsubscription ClientSystemConnectionsCountUpdates {\n  clientExternalSystemsAggregate {\n    aggregate {\n      count\n    }\n  }\n}\n\nsubscription RecentExternalSystemsUpdates {\n  externalSystems(orderBy: {createdAt: DESC}, limit: 5) {\n    ...ExternalSystemDashboardCard\n  }\n}\n\nsubscription SystemIntegrationOverviewUpdates {\n  externalSystems(orderBy: {name: ASC}) {\n    ...ExternalSystemMonitoring\n  }\n}\n\nsubscription SystemUsageStatsUpdates {\n  externalSystems {\n    id\n    name\n    description\n    totalClients: clientExternalSystemsAggregate {\n      aggregate {\n        count\n      }\n    }\n  }\n}\n\nsubscription ExternalSystemAuditUpdates {\n  externalSystems(\n    where: {updatedAt: {_gte: \"now() - interval '1 hour'\"}}\n    orderBy: {updatedAt: DESC}\n  ) {\n    ...ExternalSystemForAudit\n  }\n}\n\nsubscription ClientSystemAuditUpdates {\n  clientExternalSystems(\n    where: {updatedAt: {_gte: \"now() - interval '1 hour'\"}}\n    orderBy: {updatedAt: DESC}\n  ) {\n    ...ClientExternalSystemForAudit\n  }\n}\n\nsubscription SystemActivityAuditUpdates($externalSystemId: uuid!) {\n  clientExternalSystems(\n    where: {externalSystem: {id: {_eq: $externalSystemId}}, updatedAt: {_gte: \"now() - interval '1 hour'\"}}\n    orderBy: {updatedAt: DESC}\n  ) {\n    ...ClientExternalSystemForAudit\n  }\n}\n\nsubscription NewSystemConnectionsUpdates {\n  clientExternalSystems(\n    where: {createdAt: {_gte: \"now() - interval '5 minutes'\"}}\n    orderBy: {createdAt: DESC}\n  ) {\n    ...ClientExternalSystemWithRelations\n  }\n}\n\nsubscription SystemCountMetricsUpdates {\n  externalSystemsAggregate {\n    aggregate {\n      count\n    }\n  }\n}\n\nsubscription ConnectionCountMetricsUpdates {\n  clientExternalSystemsAggregate {\n    aggregate {\n      count\n    }\n  }\n}": typeof types.ExternalSystemsUpdatesDocument,
    "fragment UserMinimal on Users {\n  id\n  firstName\n  lastName\n  computedName\n  email\n}\n\nfragment UserCoreShared on Users {\n  ...UserMinimal\n  role\n  isActive\n}\n\nfragment UserBasic on Users {\n  ...UserCoreShared\n  clerkUserId\n  createdAt\n  updatedAt\n}\n\nfragment UserBase on Users {\n  ...UserBasic\n}\n\nfragment UserWithRole on Users {\n  ...UserBasic\n  username\n  isStaff\n}\n\nfragment UserProfile on Users {\n  ...UserWithRole\n  clerkUserId\n  image\n  managerId\n  deactivatedAt\n  deactivatedBy\n  manager {\n    ...UserMinimal\n  }\n}\n\nfragment UserSearchResult on Users {\n  ...UserCoreShared\n  username\n  isStaff\n}\n\nfragment ClientMinimal on Clients {\n  id\n  name\n}\n\nfragment ClientBase on Clients {\n  id\n  name\n  active\n  contactEmail\n  contactPerson\n  contactPhone\n  createdAt\n}\n\nfragment ClientWithStats on Clients {\n  ...ClientBase\n  currentEmployeeCount: payrollsAggregate(\n    where: {supersededDate: {_isNull: true}}\n  ) {\n    aggregate {\n      sum {\n        employeeCount\n      }\n    }\n  }\n  activePayrollCount: payrollsAggregate(\n    where: {supersededDate: {_isNull: true}, status: {_eq: \"Active\"}}\n  ) {\n    aggregate {\n      count\n    }\n  }\n}\n\nfragment ClientListBase on Clients {\n  ...ClientBase\n  payrollCount: payrollsAggregate(where: {supersededDate: {_isNull: true}}) {\n    aggregate {\n      count\n    }\n  }\n}\n\nfragment PayrollMinimal on Payrolls {\n  id\n  name\n  employeeCount\n  status\n}\n\nfragment PayrollBase on Payrolls {\n  id\n  name\n  employeeCount\n  status\n  payrollSystem\n  processingTime\n  processingDaysBeforeEft\n  versionNumber\n  supersededDate\n  createdAt\n  updatedAt\n}\n\nfragment PayrollWithClient on Payrolls {\n  ...PayrollBase\n  clientId\n  client {\n    id\n    name\n    active\n  }\n}\n\nfragment PayrollListItem on Payrolls {\n  ...PayrollWithClient\n  primaryConsultantUserId\n  backupConsultantUserId\n  managerUserId\n  createdByUserId\n  cycleId\n  dateTypeId\n  dateValue\n  payrollCycle {\n    id\n    name\n    description\n  }\n  payrollDateType {\n    id\n    name\n    description\n  }\n  primaryConsultant {\n    ...UserMinimal\n  }\n  backupConsultant {\n    ...UserMinimal\n  }\n  assignedManager {\n    ...UserMinimal\n  }\n}\n\nfragment PayrollWithDates on Payrolls {\n  ...PayrollBase\n  goLiveDate\n  payrollDates(orderBy: {originalEftDate: ASC}) {\n    id\n    originalEftDate\n    adjustedEftDate\n    notes\n  }\n}\n\nfragment PayrollFullDetail on Payrolls {\n  ...PayrollWithDates\n  ...PayrollWithClient\n  dateTypeId\n  cycleId\n  dateValue\n  versionReason\n  supersededDate\n  parentPayrollId\n  parentPayroll {\n    id\n    versionNumber\n  }\n  childPayrolls(orderBy: {versionNumber: DESC}) {\n    id\n    versionNumber\n    versionReason\n    createdAt\n  }\n  primaryConsultant {\n    ...UserMinimal\n  }\n  backupConsultant {\n    ...UserMinimal\n  }\n  assignedManager {\n    ...UserMinimal\n  }\n}\n\nfragment NoteWithAuthor on Notes {\n  id\n  content\n  isImportant\n  createdAt\n  entityId\n  entityType\n  author {\n    ...UserMinimal\n  }\n}\n\nfragment PermissionBase on Permissions {\n  id\n  resourceId\n  description\n  legacyPermissionName\n  action\n}\n\nfragment RoleWithPermissions on Roles {\n  id\n  name\n  displayName\n  description\n  isSystemRole\n  priority\n  rolePermissions {\n    permission {\n      ...PermissionBase\n    }\n  }\n}\n\nfragment AuditLogEntry on AuditAuditLog {\n  id\n  userId\n  userEmail\n  userRole\n  action\n  resourceType\n  resourceId\n  eventTime\n  success\n  errorMessage\n  ipAddress\n  userAgent\n  requestId\n  sessionId\n  metadata\n  oldValues\n  newValues\n  createdAt\n}\n\nfragment AuthEvent on AuditAuthEvents {\n  id\n  userId\n  userEmail\n  eventType\n  eventTime\n  success\n  failureReason\n  ipAddress\n  userAgent\n  metadata\n}\n\nfragment DataAccessLog on AuditDataAccessLog {\n  id\n  userId\n  resourceType\n  resourceId\n  accessType\n  accessedAt\n  dataClassification\n  fieldsAccessed\n  rowCount\n  ipAddress\n  metadata\n}\n\nfragment PermissionChange on AuditPermissionChanges {\n  id\n  changedAt\n  changedByUserId\n  targetUserId\n  targetRoleId\n  changeType\n  permissionType\n  oldPermissions\n  newPermissions\n  reason\n  approvedByUserId\n}\n\nfragment PayrollDateInfo on PayrollDates {\n  id\n  originalEftDate\n  adjustedEftDate\n  notes\n  createdAt\n}\n\nfragment PermissionOverrideInfo on PermissionOverrides {\n  id\n  userId\n  role\n  resource\n  operation\n  granted\n  reason\n  conditions\n  expiresAt\n  createdBy\n  createdAt\n}\n\nfragment PayrollTableRow on Payrolls {\n  ...PayrollListItem\n  goLiveDate\n  processingTime\n  versionNumber\n  cycleId\n  payrollCycle {\n    id\n    name\n    description\n  }\n  nextPayrollDate: payrollDates(\n    where: {_or: [{adjustedEftDate: {_gte: \"now()\"}}, {originalEftDate: {_gte: \"now()\"}}]}\n    orderBy: [{adjustedEftDate: ASC}, {originalEftDate: ASC}]\n    limit: 1\n  ) {\n    originalEftDate\n    adjustedEftDate\n    processingDate\n  }\n}\n\nfragment BillingItemMinimal on BillingItems {\n  id\n  description\n  amount\n  status\n  createdAt\n}\n\nfragment BillingItemBase on BillingItems {\n  ...BillingItemMinimal\n  clientId\n  staffUserId\n  isApproved\n  approvalDate\n  approvedBy\n  createdAt\n  updatedAt\n}\n\nfragment BillingItemWithClient on BillingItems {\n  ...BillingItemBase\n  client {\n    ...ClientMinimal\n  }\n  staffUser {\n    ...UserMinimal\n  }\n  approver: approvedByUser {\n    ...UserMinimal\n  }\n}\n\nfragment InvoiceMinimal on Invoices {\n  id\n  invoiceNumber\n  totalAmount\n  status\n  dueDate\n}\n\nfragment InvoiceBase on Invoices {\n  ...InvoiceMinimal\n  clientId\n  invoiceDate\n  taxAmount\n  subtotal\n  notes\n  createdAt\n  updatedAt\n}\n\nfragment InvoiceWithClient on Invoices {\n  ...InvoiceBase\n  client {\n    ...ClientMinimal\n  }\n}\n\nfragment FileMinimal on Files {\n  id\n  filename\n  size\n  mimetype\n  url\n}\n\nfragment FileBase on Files {\n  ...FileMinimal\n  bucket\n  objectKey\n  uploadedBy\n  category\n  fileType\n  isPublic\n  createdAt\n}\n\nfragment FileWithUploader on Files {\n  ...FileBase\n  uploadedByUser {\n    ...UserMinimal\n  }\n}\n\nfragment InvitationMinimal on UserInvitations {\n  id\n  email\n  invitedRole\n  invitationStatus\n}\n\nfragment InvitationBase on UserInvitations {\n  ...InvitationMinimal\n  invitedBy\n  expiresAt\n  acceptedAt\n  revokedAt\n  createdAt\n}\n\nfragment InvitationWithInviter on UserInvitations {\n  ...InvitationBase\n  invitedByUser {\n    ...UserMinimal\n  }\n}\n\nfragment ClientDashboardStats on Clients {\n  ...ClientMinimal\n  totalPayrolls: payrollsAggregate {\n    aggregate {\n      count\n    }\n  }\n  activePayrolls: payrollsAggregate(where: {status: {_eq: \"Active\"}}) {\n    aggregate {\n      count\n    }\n  }\n  totalEmployees: payrollsAggregate {\n    aggregate {\n      sum {\n        employeeCount\n      }\n    }\n  }\n}\n\nfragment UserActivityStats on Users {\n  ...UserMinimal\n  staffBillingItems(orderBy: {createdAt: DESC}, limit: 5) {\n    ...BillingItemMinimal\n  }\n  authoredNotes(orderBy: {createdAt: DESC}, limit: 3) {\n    ...NoteWithAuthor\n  }\n}": typeof types.UserMinimalFragmentDoc,
    "mutation LogAuditEvent($input: AuditAuditLogInsertInput!) {\n  insertAuditAuditLog(objects: [$input]) {\n    returning {\n      id\n      eventTime\n    }\n  }\n}\n\nmutation InsertFile($input: FilesInsertInput!) {\n  insertFiles(objects: [$input]) {\n    returning {\n      id\n      filename\n      bucket\n      objectKey\n      size\n      mimetype\n      url\n      clientId\n      payrollId\n      uploadedBy\n      category\n      isPublic\n      metadata\n      fileType\n      createdAt\n    }\n  }\n}\n\nmutation UpdateFileMetadata($id: uuid!, $updates: FilesSetInput!) {\n  updateFilesByPk(pkColumns: {id: $id}, _set: $updates) {\n    id\n    filename\n    bucket\n    objectKey\n    size\n    mimetype\n    url\n    clientId\n    payrollId\n    uploadedBy\n    category\n    isPublic\n    metadata\n    fileType\n    createdAt\n  }\n}\n\nmutation DeleteFile($id: uuid!) {\n  deleteFilesByPk(id: $id) {\n    id\n    filename\n    objectKey\n  }\n}\n\nmutation RefreshData {\n  __typename\n}": typeof types.LogAuditEventDocument,
    "query GetDashboardMetrics($userId: uuid!) {\n  clientsAggregate(where: {active: {_eq: true}}) {\n    aggregate {\n      count\n    }\n  }\n  activePayrollsAggregate: payrollsAggregate(\n    where: {supersededDate: {_isNull: true}, status: {_nin: [\"Completed\", \"Failed\"]}}\n  ) {\n    aggregate {\n      count\n    }\n  }\n  totalEmployeesAggregate: payrollsAggregate(\n    where: {supersededDate: {_isNull: true}}\n  ) {\n    aggregate {\n      sum {\n        employeeCount\n      }\n    }\n  }\n  upcomingPayrolls: payrolls(\n    where: {supersededDate: {_isNull: true}, status: {_nin: [\"Completed\", \"Failed\", \"Cancelled\"]}}\n    orderBy: {updatedAt: DESC}\n    limit: 5\n  ) {\n    ...PayrollMinimal\n    client {\n      ...ClientMinimal\n    }\n  }\n}\n\nquery GetDashboardStatsOptimized($limit: Int = 10) {\n  clientsAggregate {\n    aggregate {\n      count\n    }\n  }\n  totalPayrolls: payrollsAggregate(where: {supersededDate: {_isNull: true}}) {\n    aggregate {\n      count\n    }\n  }\n  activePayrolls: payrollsAggregate(\n    where: {supersededDate: {_isNull: true}, status: {_eq: \"Active\"}}\n  ) {\n    aggregate {\n      count\n    }\n  }\n  upcomingPayrolls: payrolls(\n    where: {supersededDate: {_isNull: true}, status: {_eq: \"Active\"}, payrollDates: {adjustedEftDate: {_gte: \"now()\"}}}\n    orderBy: {updatedAt: DESC}\n    limit: $limit\n  ) {\n    id\n    name\n    status\n    client {\n      id\n      name\n    }\n    nextEftDate: payrollDates(\n      where: {adjustedEftDate: {_gte: \"now()\"}}\n      orderBy: {adjustedEftDate: ASC}\n      limit: 1\n    ) {\n      originalEftDate\n      adjustedEftDate\n      processingDate\n    }\n  }\n}\n\nquery GetClientsDashboardStats {\n  activeClientsCount: clientsAggregate(where: {active: {_eq: true}}) {\n    aggregate {\n      count\n    }\n  }\n  totalPayrollsCount: payrollsAggregate(where: {supersededDate: {_isNull: true}}) {\n    aggregate {\n      count\n    }\n  }\n  totalEmployeesSum: payrollsAggregate(where: {supersededDate: {_isNull: true}}) {\n    aggregate {\n      sum {\n        employeeCount\n      }\n    }\n  }\n  clientsNeedingAttention: clients(\n    where: {active: {_eq: true}, _not: {payrolls: {supersededDate: {_isNull: true}}}}\n  ) {\n    ...ClientMinimal\n  }\n}\n\nquery GetCurrentUser($userId: uuid!) {\n  user: usersByPk(id: $userId) {\n    ...UserProfile\n  }\n}\n\nquery GetUsersForDropdown($role: user_role) {\n  users(\n    where: {isActive: {_eq: true}, role: {_eq: $role}}\n    orderBy: {computedName: ASC}\n  ) {\n    ...UserMinimal\n  }\n}\n\nquery GetSystemHealth {\n  databaseHealth: users(limit: 1) {\n    id\n  }\n  recentActivity: auditAuditLogAggregate(\n    where: {eventTime: {_gte: \"now() - interval '1 hour'\"}}\n  ) {\n    aggregate {\n      count\n    }\n  }\n}\n\nquery GlobalSearch($searchTerm: String!) {\n  clients(\n    where: {_or: [{name: {_ilike: $searchTerm}}, {contactEmail: {_ilike: $searchTerm}}]}\n    limit: 5\n  ) {\n    ...ClientMinimal\n  }\n  users(\n    where: {_or: [{computedName: {_ilike: $searchTerm}}, {firstName: {_ilike: $searchTerm}}, {lastName: {_ilike: $searchTerm}}, {email: {_ilike: $searchTerm}}]}\n    limit: 5\n  ) {\n    ...UserMinimal\n  }\n  payrolls(\n    where: {client: {name: {_ilike: $searchTerm}}, supersededDate: {_isNull: true}}\n    limit: 5\n  ) {\n    ...PayrollMinimal\n    client {\n      ...ClientMinimal\n    }\n  }\n}\n\nquery GetFileById($id: uuid!) {\n  filesByPk(id: $id) {\n    id\n    filename\n    bucket\n    objectKey\n    size\n    mimetype\n    url\n    clientId\n    payrollId\n    uploadedBy\n    category\n    isPublic\n    metadata\n    fileType\n    createdAt\n    client {\n      name\n    }\n    payroll {\n      name\n    }\n    uploadedBy\n  }\n}\n\nquery ListFiles($where: FilesBoolExp, $limit: Int, $offset: Int, $orderBy: [FilesOrderBy!]) {\n  files(where: $where, limit: $limit, offset: $offset, orderBy: $orderBy) {\n    id\n    filename\n    bucket\n    objectKey\n    size\n    mimetype\n    url\n    clientId\n    payrollId\n    uploadedBy\n    category\n    isPublic\n    metadata\n    fileType\n    createdAt\n    client {\n      name\n    }\n    payroll {\n      name\n    }\n    uploadedBy\n  }\n  filesAggregate(where: $where) {\n    aggregate {\n      count\n    }\n  }\n}": typeof types.GetDashboardMetricsDocument,
    "subscription RecentActivity($resourceTypes: [String!]) {\n  auditAuditLog(\n    where: {resourceType: {_in: $resourceTypes}, eventTime: {_gte: \"now() - interval '5 minutes'\"}}\n    orderBy: {eventTime: DESC}\n    limit: 20\n  ) {\n    ...AuditLogEntry\n  }\n}\n\nsubscription AuthenticationEvents($userId: uuid) {\n  auditAuthEvents(\n    where: {userId: {_eq: $userId}, eventTime: {_gte: \"now() - interval '10 minutes'\"}}\n    orderBy: {eventTime: DESC}\n  ) {\n    ...AuthEvent\n  }\n}\n\nsubscription SensitiveDataAccess($resourceTypes: [String!]!) {\n  auditDataAccessLog(\n    where: {resourceType: {_in: $resourceTypes}, accessedAt: {_gte: \"now() - interval '10 minutes'\"}}\n    orderBy: {accessedAt: DESC}\n  ) {\n    ...DataAccessLog\n  }\n}\n\nsubscription PermissionChangeStream {\n  auditPermissionChanges(orderBy: {changedAt: DESC}, limit: 10) {\n    ...PermissionChange\n  }\n}": typeof types.RecentActivityDocument,
};
const documents: Documents = {
    "fragment ExternalSystemCore on ExternalSystems {\n  id\n  name\n  description\n  icon\n  createdAt\n  updatedAt\n}\n\nfragment ExternalSystemBasic on ExternalSystems {\n  ...ExternalSystemCore\n  url\n}\n\nfragment ExternalSystemDetailed on ExternalSystems {\n  ...ExternalSystemBasic\n}\n\nfragment ExternalSystemWithClients on ExternalSystems {\n  ...ExternalSystemBasic\n  clientExternalSystems {\n    id\n    clientId\n    externalSystem {\n      id\n      name\n      description\n      url\n    }\n    systemClientId\n    createdAt\n    updatedAt\n    client {\n      id\n      name\n    }\n  }\n}\n\nfragment ExternalSystemComplete on ExternalSystems {\n  ...ExternalSystemDetailed\n  clientExternalSystems {\n    id\n    clientId\n    externalSystem {\n      id\n      name\n      description\n      url\n    }\n    systemClientId\n    createdAt\n    updatedAt\n    client {\n      id\n      name\n      contactPerson\n      contactEmail\n    }\n  }\n}\n\nfragment ClientExternalSystemCore on ClientExternalSystems {\n  id\n  clientId\n  externalSystem {\n    id\n    name\n    description\n    url\n  }\n  systemClientId\n  createdAt\n  updatedAt\n}\n\nfragment ClientExternalSystemBasic on ClientExternalSystems {\n  ...ClientExternalSystemCore\n}\n\nfragment ClientExternalSystemDetailed on ClientExternalSystems {\n  ...ClientExternalSystemBasic\n}\n\nfragment ClientExternalSystemWithRelations on ClientExternalSystems {\n  ...ClientExternalSystemBasic\n  client {\n    id\n    name\n    contactPerson\n    contactEmail\n  }\n  externalSystem {\n    id\n    name\n    description\n    url\n    icon\n  }\n}\n\nfragment ClientExternalSystemComplete on ClientExternalSystems {\n  ...ClientExternalSystemDetailed\n  client {\n    id\n    name\n    contactPerson\n    contactEmail\n    contactPhone\n  }\n  externalSystem {\n    id\n    name\n    description\n    url\n    icon\n    createdAt\n    updatedAt\n  }\n}\n\nfragment ExternalSystemSummary on ExternalSystems {\n  id\n  name\n  description\n  icon\n}\n\nfragment ExternalSystemListItem on ExternalSystems {\n  ...ExternalSystemSummary\n  url\n  createdAt\n  updatedAt\n  clientCount: clientExternalSystemsAggregate {\n    aggregate {\n      count\n    }\n  }\n}\n\nfragment ExternalSystemTableRow on ExternalSystems {\n  ...ExternalSystemListItem\n}\n\nfragment ExternalSystemDashboardCard on ExternalSystems {\n  ...ExternalSystemSummary\n  url\n  clientCount: clientExternalSystemsAggregate {\n    aggregate {\n      count\n    }\n  }\n}\n\nfragment ClientExternalSystemSummary on ClientExternalSystems {\n  id\n  clientId\n  externalSystem {\n    id\n    name\n    description\n    url\n  }\n  systemClientId\n  createdAt\n  updatedAt\n}\n\nfragment ClientExternalSystemListItem on ClientExternalSystems {\n  ...ClientExternalSystemSummary\n  client {\n    id\n    name\n  }\n  externalSystem {\n    id\n    name\n    description\n    url\n    icon\n  }\n}\n\nfragment ClientExternalSystemTableRow on ClientExternalSystems {\n  ...ClientExternalSystemListItem\n}\n\nfragment ExternalSystemMinimal on ExternalSystems {\n  id\n  name\n  url\n  icon\n}\n\nfragment ClientExternalSystemMinimal on ClientExternalSystems {\n  id\n  clientId\n  externalSystem {\n    id\n    name\n    description\n    url\n  }\n  systemClientId\n}\n\nfragment ExternalSystemConfig on ExternalSystems {\n  id\n  name\n  description\n  url\n  icon\n  createdAt\n  updatedAt\n}\n\nfragment ClientExternalSystemConfig on ClientExternalSystems {\n  id\n  clientId\n  externalSystem {\n    id\n    name\n    description\n    url\n  }\n  systemClientId\n  createdAt\n  updatedAt\n}\n\nfragment ExternalSystemForAudit on ExternalSystems {\n  id\n  name\n  description\n  url\n  icon\n  createdAt\n  updatedAt\n}\n\nfragment ClientExternalSystemForAudit on ClientExternalSystems {\n  id\n  clientId\n  externalSystem {\n    id\n    name\n    description\n    url\n  }\n  systemClientId\n  createdAt\n  updatedAt\n}\n\nfragment ExternalSystemMonitoring on ExternalSystems {\n  id\n  name\n  description\n  url\n  icon\n  clientExternalSystemsAggregate {\n    aggregate {\n      count\n    }\n  }\n}": types.ExternalSystemCoreFragmentDoc,
    "mutation CreateExternalSystem($object: ExternalSystemsInsertInput!) {\n  insertExternalSystemsOne(object: $object) {\n    ...ExternalSystemDetailed\n  }\n}\n\nmutation UpdateExternalSystem($id: uuid!, $set: ExternalSystemsSetInput!) {\n  updateExternalSystemsByPk(pkColumns: {id: $id}, _set: $set) {\n    ...ExternalSystemDetailed\n  }\n}\n\nmutation DeleteExternalSystem($id: uuid!) {\n  deleteExternalSystemsByPk(id: $id) {\n    id\n    name\n  }\n}\n\nmutation CreateClientExternalSystem($object: ClientExternalSystemsInsertInput!) {\n  insertClientExternalSystemsOne(object: $object) {\n    ...ClientExternalSystemComplete\n  }\n}\n\nmutation UpdateClientExternalSystem($id: uuid!, $set: ClientExternalSystemsSetInput!) {\n  updateClientExternalSystemsByPk(pkColumns: {id: $id}, _set: $set) {\n    ...ClientExternalSystemComplete\n  }\n}\n\nmutation DeleteClientExternalSystem($id: uuid!) {\n  deleteClientExternalSystemsByPk(id: $id) {\n    id\n    clientId\n  }\n}\n\nmutation ConnectClientToSystem($clientId: uuid!, $externalSystemId: uuid!, $systemClientId: String) {\n  insertClientExternalSystemsOne(\n    object: {clientId: $clientId, systemClientId: $systemClientId}\n  ) {\n    ...ClientExternalSystemComplete\n  }\n}\n\nmutation DisconnectClientFromSystem($id: uuid!) {\n  deleteClientExternalSystemsByPk(id: $id) {\n    id\n    clientId\n  }\n}\n\nmutation BulkDeleteExternalSystems($systemIds: [uuid!]!) {\n  deleteExternalSystems(where: {id: {_in: $systemIds}}) {\n    affectedRows\n    returning {\n      id\n      name\n    }\n  }\n}\n\nmutation BulkDeleteClientExternalSystems($clientSystemIds: [uuid!]!) {\n  deleteClientExternalSystems(where: {id: {_in: $clientSystemIds}}) {\n    affectedRows\n    returning {\n      id\n      clientId\n    }\n  }\n}\n\nmutation DisconnectAllClientSystemsBySystem($externalSystemId: uuid!) {\n  deleteClientExternalSystems(\n    where: {externalSystem: {id: {_eq: $externalSystemId}}}\n  ) {\n    affectedRows\n    returning {\n      id\n      clientId\n    }\n  }\n}\n\nmutation DisconnectAllClientSystemsByClient($clientId: uuid!) {\n  deleteClientExternalSystems(where: {clientId: {_eq: $clientId}}) {\n    affectedRows\n    returning {\n      id\n      clientId\n    }\n  }\n}\n\nmutation TransferClientSystemConnections($oldClientId: uuid!, $newClientId: uuid!) {\n  updateClientExternalSystems(\n    where: {clientId: {_eq: $oldClientId}}\n    _set: {clientId: $newClientId, updatedAt: \"now()\"}\n  ) {\n    affectedRows\n    returning {\n      id\n      clientId\n    }\n  }\n}\n\nmutation UpdateExternalSystemDetails($id: uuid!, $name: String, $description: String, $url: String, $icon: String) {\n  updateExternalSystemsByPk(\n    pkColumns: {id: $id}\n    _set: {name: $name, description: $description, url: $url, icon: $icon, updatedAt: \"now()\"}\n  ) {\n    ...ExternalSystemBasic\n  }\n}\n\nmutation UpdateClientSystemMapping($id: uuid!, $systemClientId: String) {\n  updateClientExternalSystemsByPk(\n    pkColumns: {id: $id}\n    _set: {systemClientId: $systemClientId, updatedAt: \"now()\"}\n  ) {\n    ...ClientExternalSystemBasic\n  }\n}": types.CreateExternalSystemDocument,
    "query GetExternalSystems($limit: Int = 50, $offset: Int = 0, $where: ExternalSystemsBoolExp) {\n  externalSystems(\n    limit: $limit\n    offset: $offset\n    where: $where\n    orderBy: {name: ASC}\n  ) {\n    ...ExternalSystemListItem\n  }\n  externalSystemsAggregate(where: $where) {\n    aggregate {\n      count\n    }\n  }\n}\n\nquery GetExternalSystemById($id: uuid!) {\n  externalSystemsByPk(id: $id) {\n    ...ExternalSystemComplete\n  }\n}\n\nquery GetExternalSystemBasic($id: uuid!) {\n  externalSystemsByPk(id: $id) {\n    ...ExternalSystemBasic\n  }\n}\n\nquery GetExternalSystemConfig($id: uuid!) {\n  externalSystemsByPk(id: $id) {\n    ...ExternalSystemConfig\n  }\n}\n\nquery GetActiveExternalSystems {\n  externalSystems(orderBy: {name: ASC}) {\n    ...ExternalSystemBasic\n  }\n}\n\nquery GetExternalSystemsSimple {\n  externalSystems(orderBy: {name: ASC}) {\n    ...ExternalSystemMinimal\n  }\n}\n\nquery GetClientExternalSystems($clientId: uuid!) {\n  clientExternalSystems(\n    where: {clientId: {_eq: $clientId}}\n    orderBy: {createdAt: DESC}\n  ) {\n    ...ClientExternalSystemWithRelations\n  }\n}\n\nquery GetClientExternalSystemById($id: uuid!) {\n  clientExternalSystemsByPk(id: $id) {\n    ...ClientExternalSystemComplete\n  }\n}\n\nquery GetActiveClientExternalSystems($clientId: uuid!) {\n  clientExternalSystems(\n    where: {clientId: {_eq: $clientId}}\n    orderBy: {createdAt: DESC}\n  ) {\n    ...ClientExternalSystemWithRelations\n  }\n}\n\nquery GetSystemClientConnections($externalSystemId: uuid!) {\n  clientExternalSystems(\n    where: {externalSystem: {id: {_eq: $externalSystemId}}}\n    orderBy: {createdAt: DESC}\n  ) {\n    ...ClientExternalSystemWithRelations\n  }\n}\n\nquery GetActiveSystemClientConnections($externalSystemId: uuid!) {\n  clientExternalSystems(\n    where: {externalSystem: {id: {_eq: $externalSystemId}}}\n    orderBy: {createdAt: DESC}\n  ) {\n    ...ClientExternalSystemWithRelations\n  }\n}\n\nquery GetExternalSystemsDashboardStats {\n  totalSystems: externalSystemsAggregate {\n    aggregate {\n      count\n    }\n  }\n  totalConnections: clientExternalSystemsAggregate {\n    aggregate {\n      count\n    }\n  }\n  recentSystems: externalSystems(orderBy: {createdAt: DESC}, limit: 5) {\n    ...ExternalSystemDashboardCard\n  }\n}\n\nquery GetSystemIntegrationOverview {\n  externalSystems(orderBy: {name: ASC}) {\n    ...ExternalSystemMonitoring\n  }\n}\n\nquery GetSystemUsageStats {\n  systemUsage: externalSystems {\n    id\n    name\n    description\n    totalClients: clientExternalSystemsAggregate {\n      aggregate {\n        count\n      }\n    }\n  }\n}\n\nquery SearchExternalSystems($searchTerm: String!, $limit: Int = 50) {\n  externalSystems(\n    where: {_or: [{name: {_ilike: $searchTerm}}, {description: {_ilike: $searchTerm}}, {url: {_ilike: $searchTerm}}]}\n    orderBy: {name: ASC}\n    limit: $limit\n  ) {\n    ...ExternalSystemTableRow\n  }\n}\n\nquery FilterExternalSystemsByDateRange($startDate: timestamptz!, $endDate: timestamptz!) {\n  externalSystems(\n    where: {createdAt: {_gte: $startDate, _lte: $endDate}}\n    orderBy: {createdAt: DESC}\n  ) {\n    ...ExternalSystemListItem\n  }\n}\n\nquery GetClientSystemsByDate($clientId: uuid!, $startDate: timestamptz!, $endDate: timestamptz!) {\n  clientExternalSystems(\n    where: {clientId: {_eq: $clientId}, createdAt: {_gte: $startDate, _lte: $endDate}}\n    orderBy: {createdAt: DESC}\n  ) {\n    ...ClientExternalSystemWithRelations\n  }\n}\n\nquery GetExternalSystemsForAudit($limit: Int = 100, $offset: Int = 0, $where: ExternalSystemsBoolExp = {}) {\n  externalSystems(\n    limit: $limit\n    offset: $offset\n    where: $where\n    orderBy: {createdAt: DESC}\n  ) {\n    ...ExternalSystemForAudit\n  }\n}\n\nquery GetClientExternalSystemsForAudit($limit: Int = 100, $offset: Int = 0, $where: ClientExternalSystemsBoolExp = {}) {\n  clientExternalSystems(\n    limit: $limit\n    offset: $offset\n    where: $where\n    orderBy: {createdAt: DESC}\n  ) {\n    ...ClientExternalSystemForAudit\n  }\n}\n\nquery GetSystemActivityAudit($externalSystemId: uuid!, $limit: Int = 50) {\n  clientExternalSystems(\n    where: {externalSystem: {id: {_eq: $externalSystemId}}}\n    orderBy: {updatedAt: DESC}\n    limit: $limit\n  ) {\n    ...ClientExternalSystemForAudit\n  }\n}\n\nquery GetExternalSystemsPaginated($limit: Int = 20, $offset: Int = 0, $where: ExternalSystemsBoolExp = {}, $orderBy: [ExternalSystemsOrderBy!] = [{name: ASC}]) {\n  externalSystems(\n    limit: $limit\n    offset: $offset\n    where: $where\n    orderBy: $orderBy\n  ) {\n    ...ExternalSystemTableRow\n  }\n  externalSystemsAggregate(where: $where) {\n    aggregate {\n      count\n    }\n  }\n}\n\nquery GetClientExternalSystemsPaginated($clientId: uuid!, $limit: Int = 20, $offset: Int = 0, $where: ClientExternalSystemsBoolExp = {}) {\n  clientExternalSystems(\n    where: {_and: [{clientId: {_eq: $clientId}}, $where]}\n    orderBy: {createdAt: DESC}\n    limit: $limit\n    offset: $offset\n  ) {\n    ...ClientExternalSystemTableRow\n  }\n  clientSystemsAggregate: clientExternalSystemsAggregate(\n    where: {_and: [{clientId: {_eq: $clientId}}, $where]}\n  ) {\n    aggregate {\n      count\n    }\n  }\n}\n\nquery GetExternalSystemsQuickList {\n  externalSystems(orderBy: {name: ASC}) {\n    ...ExternalSystemMinimal\n  }\n}\n\nquery GetClientSystemsQuickList($clientId: uuid!) {\n  clientExternalSystems(\n    where: {clientId: {_eq: $clientId}}\n    orderBy: {createdAt: DESC}\n  ) {\n    ...ClientExternalSystemMinimal\n  }\n}": types.GetExternalSystemsDocument,
    "subscription ExternalSystemsUpdates {\n  externalSystems(orderBy: {updatedAt: DESC}) {\n    ...ExternalSystemMonitoring\n  }\n}\n\nsubscription ExternalSystemUpdates($id: uuid!) {\n  externalSystems(where: {id: {_eq: $id}}) {\n    ...ExternalSystemComplete\n  }\n}\n\nsubscription ClientExternalSystemsUpdates($clientId: uuid!) {\n  clientExternalSystems(\n    where: {clientId: {_eq: $clientId}}\n    orderBy: {updatedAt: DESC}\n  ) {\n    ...ClientExternalSystemWithRelations\n  }\n}\n\nsubscription ClientSystemUpdates($id: uuid!) {\n  clientExternalSystems(where: {id: {_eq: $id}}) {\n    ...ClientExternalSystemComplete\n  }\n}\n\nsubscription SystemClientConnectionsUpdates($externalSystemId: uuid!) {\n  clientExternalSystems(\n    where: {externalSystem: {id: {_eq: $externalSystemId}}}\n    orderBy: {createdAt: DESC}\n  ) {\n    ...ClientExternalSystemWithRelations\n  }\n}\n\nsubscription ExternalSystemsCountUpdates {\n  externalSystemsAggregate {\n    aggregate {\n      count\n    }\n  }\n}\n\nsubscription ClientSystemConnectionsCountUpdates {\n  clientExternalSystemsAggregate {\n    aggregate {\n      count\n    }\n  }\n}\n\nsubscription RecentExternalSystemsUpdates {\n  externalSystems(orderBy: {createdAt: DESC}, limit: 5) {\n    ...ExternalSystemDashboardCard\n  }\n}\n\nsubscription SystemIntegrationOverviewUpdates {\n  externalSystems(orderBy: {name: ASC}) {\n    ...ExternalSystemMonitoring\n  }\n}\n\nsubscription SystemUsageStatsUpdates {\n  externalSystems {\n    id\n    name\n    description\n    totalClients: clientExternalSystemsAggregate {\n      aggregate {\n        count\n      }\n    }\n  }\n}\n\nsubscription ExternalSystemAuditUpdates {\n  externalSystems(\n    where: {updatedAt: {_gte: \"now() - interval '1 hour'\"}}\n    orderBy: {updatedAt: DESC}\n  ) {\n    ...ExternalSystemForAudit\n  }\n}\n\nsubscription ClientSystemAuditUpdates {\n  clientExternalSystems(\n    where: {updatedAt: {_gte: \"now() - interval '1 hour'\"}}\n    orderBy: {updatedAt: DESC}\n  ) {\n    ...ClientExternalSystemForAudit\n  }\n}\n\nsubscription SystemActivityAuditUpdates($externalSystemId: uuid!) {\n  clientExternalSystems(\n    where: {externalSystem: {id: {_eq: $externalSystemId}}, updatedAt: {_gte: \"now() - interval '1 hour'\"}}\n    orderBy: {updatedAt: DESC}\n  ) {\n    ...ClientExternalSystemForAudit\n  }\n}\n\nsubscription NewSystemConnectionsUpdates {\n  clientExternalSystems(\n    where: {createdAt: {_gte: \"now() - interval '5 minutes'\"}}\n    orderBy: {createdAt: DESC}\n  ) {\n    ...ClientExternalSystemWithRelations\n  }\n}\n\nsubscription SystemCountMetricsUpdates {\n  externalSystemsAggregate {\n    aggregate {\n      count\n    }\n  }\n}\n\nsubscription ConnectionCountMetricsUpdates {\n  clientExternalSystemsAggregate {\n    aggregate {\n      count\n    }\n  }\n}": types.ExternalSystemsUpdatesDocument,
    "fragment UserMinimal on Users {\n  id\n  firstName\n  lastName\n  computedName\n  email\n}\n\nfragment UserCoreShared on Users {\n  ...UserMinimal\n  role\n  isActive\n}\n\nfragment UserBasic on Users {\n  ...UserCoreShared\n  clerkUserId\n  createdAt\n  updatedAt\n}\n\nfragment UserBase on Users {\n  ...UserBasic\n}\n\nfragment UserWithRole on Users {\n  ...UserBasic\n  username\n  isStaff\n}\n\nfragment UserProfile on Users {\n  ...UserWithRole\n  clerkUserId\n  image\n  managerId\n  deactivatedAt\n  deactivatedBy\n  manager {\n    ...UserMinimal\n  }\n}\n\nfragment UserSearchResult on Users {\n  ...UserCoreShared\n  username\n  isStaff\n}\n\nfragment ClientMinimal on Clients {\n  id\n  name\n}\n\nfragment ClientBase on Clients {\n  id\n  name\n  active\n  contactEmail\n  contactPerson\n  contactPhone\n  createdAt\n}\n\nfragment ClientWithStats on Clients {\n  ...ClientBase\n  currentEmployeeCount: payrollsAggregate(\n    where: {supersededDate: {_isNull: true}}\n  ) {\n    aggregate {\n      sum {\n        employeeCount\n      }\n    }\n  }\n  activePayrollCount: payrollsAggregate(\n    where: {supersededDate: {_isNull: true}, status: {_eq: \"Active\"}}\n  ) {\n    aggregate {\n      count\n    }\n  }\n}\n\nfragment ClientListBase on Clients {\n  ...ClientBase\n  payrollCount: payrollsAggregate(where: {supersededDate: {_isNull: true}}) {\n    aggregate {\n      count\n    }\n  }\n}\n\nfragment PayrollMinimal on Payrolls {\n  id\n  name\n  employeeCount\n  status\n}\n\nfragment PayrollBase on Payrolls {\n  id\n  name\n  employeeCount\n  status\n  payrollSystem\n  processingTime\n  processingDaysBeforeEft\n  versionNumber\n  supersededDate\n  createdAt\n  updatedAt\n}\n\nfragment PayrollWithClient on Payrolls {\n  ...PayrollBase\n  clientId\n  client {\n    id\n    name\n    active\n  }\n}\n\nfragment PayrollListItem on Payrolls {\n  ...PayrollWithClient\n  primaryConsultantUserId\n  backupConsultantUserId\n  managerUserId\n  createdByUserId\n  cycleId\n  dateTypeId\n  dateValue\n  payrollCycle {\n    id\n    name\n    description\n  }\n  payrollDateType {\n    id\n    name\n    description\n  }\n  primaryConsultant {\n    ...UserMinimal\n  }\n  backupConsultant {\n    ...UserMinimal\n  }\n  assignedManager {\n    ...UserMinimal\n  }\n}\n\nfragment PayrollWithDates on Payrolls {\n  ...PayrollBase\n  goLiveDate\n  payrollDates(orderBy: {originalEftDate: ASC}) {\n    id\n    originalEftDate\n    adjustedEftDate\n    notes\n  }\n}\n\nfragment PayrollFullDetail on Payrolls {\n  ...PayrollWithDates\n  ...PayrollWithClient\n  dateTypeId\n  cycleId\n  dateValue\n  versionReason\n  supersededDate\n  parentPayrollId\n  parentPayroll {\n    id\n    versionNumber\n  }\n  childPayrolls(orderBy: {versionNumber: DESC}) {\n    id\n    versionNumber\n    versionReason\n    createdAt\n  }\n  primaryConsultant {\n    ...UserMinimal\n  }\n  backupConsultant {\n    ...UserMinimal\n  }\n  assignedManager {\n    ...UserMinimal\n  }\n}\n\nfragment NoteWithAuthor on Notes {\n  id\n  content\n  isImportant\n  createdAt\n  entityId\n  entityType\n  author {\n    ...UserMinimal\n  }\n}\n\nfragment PermissionBase on Permissions {\n  id\n  resourceId\n  description\n  legacyPermissionName\n  action\n}\n\nfragment RoleWithPermissions on Roles {\n  id\n  name\n  displayName\n  description\n  isSystemRole\n  priority\n  rolePermissions {\n    permission {\n      ...PermissionBase\n    }\n  }\n}\n\nfragment AuditLogEntry on AuditAuditLog {\n  id\n  userId\n  userEmail\n  userRole\n  action\n  resourceType\n  resourceId\n  eventTime\n  success\n  errorMessage\n  ipAddress\n  userAgent\n  requestId\n  sessionId\n  metadata\n  oldValues\n  newValues\n  createdAt\n}\n\nfragment AuthEvent on AuditAuthEvents {\n  id\n  userId\n  userEmail\n  eventType\n  eventTime\n  success\n  failureReason\n  ipAddress\n  userAgent\n  metadata\n}\n\nfragment DataAccessLog on AuditDataAccessLog {\n  id\n  userId\n  resourceType\n  resourceId\n  accessType\n  accessedAt\n  dataClassification\n  fieldsAccessed\n  rowCount\n  ipAddress\n  metadata\n}\n\nfragment PermissionChange on AuditPermissionChanges {\n  id\n  changedAt\n  changedByUserId\n  targetUserId\n  targetRoleId\n  changeType\n  permissionType\n  oldPermissions\n  newPermissions\n  reason\n  approvedByUserId\n}\n\nfragment PayrollDateInfo on PayrollDates {\n  id\n  originalEftDate\n  adjustedEftDate\n  notes\n  createdAt\n}\n\nfragment PermissionOverrideInfo on PermissionOverrides {\n  id\n  userId\n  role\n  resource\n  operation\n  granted\n  reason\n  conditions\n  expiresAt\n  createdBy\n  createdAt\n}\n\nfragment PayrollTableRow on Payrolls {\n  ...PayrollListItem\n  goLiveDate\n  processingTime\n  versionNumber\n  cycleId\n  payrollCycle {\n    id\n    name\n    description\n  }\n  nextPayrollDate: payrollDates(\n    where: {_or: [{adjustedEftDate: {_gte: \"now()\"}}, {originalEftDate: {_gte: \"now()\"}}]}\n    orderBy: [{adjustedEftDate: ASC}, {originalEftDate: ASC}]\n    limit: 1\n  ) {\n    originalEftDate\n    adjustedEftDate\n    processingDate\n  }\n}\n\nfragment BillingItemMinimal on BillingItems {\n  id\n  description\n  amount\n  status\n  createdAt\n}\n\nfragment BillingItemBase on BillingItems {\n  ...BillingItemMinimal\n  clientId\n  staffUserId\n  isApproved\n  approvalDate\n  approvedBy\n  createdAt\n  updatedAt\n}\n\nfragment BillingItemWithClient on BillingItems {\n  ...BillingItemBase\n  client {\n    ...ClientMinimal\n  }\n  staffUser {\n    ...UserMinimal\n  }\n  approver: approvedByUser {\n    ...UserMinimal\n  }\n}\n\nfragment InvoiceMinimal on Invoices {\n  id\n  invoiceNumber\n  totalAmount\n  status\n  dueDate\n}\n\nfragment InvoiceBase on Invoices {\n  ...InvoiceMinimal\n  clientId\n  invoiceDate\n  taxAmount\n  subtotal\n  notes\n  createdAt\n  updatedAt\n}\n\nfragment InvoiceWithClient on Invoices {\n  ...InvoiceBase\n  client {\n    ...ClientMinimal\n  }\n}\n\nfragment FileMinimal on Files {\n  id\n  filename\n  size\n  mimetype\n  url\n}\n\nfragment FileBase on Files {\n  ...FileMinimal\n  bucket\n  objectKey\n  uploadedBy\n  category\n  fileType\n  isPublic\n  createdAt\n}\n\nfragment FileWithUploader on Files {\n  ...FileBase\n  uploadedByUser {\n    ...UserMinimal\n  }\n}\n\nfragment InvitationMinimal on UserInvitations {\n  id\n  email\n  invitedRole\n  invitationStatus\n}\n\nfragment InvitationBase on UserInvitations {\n  ...InvitationMinimal\n  invitedBy\n  expiresAt\n  acceptedAt\n  revokedAt\n  createdAt\n}\n\nfragment InvitationWithInviter on UserInvitations {\n  ...InvitationBase\n  invitedByUser {\n    ...UserMinimal\n  }\n}\n\nfragment ClientDashboardStats on Clients {\n  ...ClientMinimal\n  totalPayrolls: payrollsAggregate {\n    aggregate {\n      count\n    }\n  }\n  activePayrolls: payrollsAggregate(where: {status: {_eq: \"Active\"}}) {\n    aggregate {\n      count\n    }\n  }\n  totalEmployees: payrollsAggregate {\n    aggregate {\n      sum {\n        employeeCount\n      }\n    }\n  }\n}\n\nfragment UserActivityStats on Users {\n  ...UserMinimal\n  staffBillingItems(orderBy: {createdAt: DESC}, limit: 5) {\n    ...BillingItemMinimal\n  }\n  authoredNotes(orderBy: {createdAt: DESC}, limit: 3) {\n    ...NoteWithAuthor\n  }\n}": types.UserMinimalFragmentDoc,
    "mutation LogAuditEvent($input: AuditAuditLogInsertInput!) {\n  insertAuditAuditLog(objects: [$input]) {\n    returning {\n      id\n      eventTime\n    }\n  }\n}\n\nmutation InsertFile($input: FilesInsertInput!) {\n  insertFiles(objects: [$input]) {\n    returning {\n      id\n      filename\n      bucket\n      objectKey\n      size\n      mimetype\n      url\n      clientId\n      payrollId\n      uploadedBy\n      category\n      isPublic\n      metadata\n      fileType\n      createdAt\n    }\n  }\n}\n\nmutation UpdateFileMetadata($id: uuid!, $updates: FilesSetInput!) {\n  updateFilesByPk(pkColumns: {id: $id}, _set: $updates) {\n    id\n    filename\n    bucket\n    objectKey\n    size\n    mimetype\n    url\n    clientId\n    payrollId\n    uploadedBy\n    category\n    isPublic\n    metadata\n    fileType\n    createdAt\n  }\n}\n\nmutation DeleteFile($id: uuid!) {\n  deleteFilesByPk(id: $id) {\n    id\n    filename\n    objectKey\n  }\n}\n\nmutation RefreshData {\n  __typename\n}": types.LogAuditEventDocument,
    "query GetDashboardMetrics($userId: uuid!) {\n  clientsAggregate(where: {active: {_eq: true}}) {\n    aggregate {\n      count\n    }\n  }\n  activePayrollsAggregate: payrollsAggregate(\n    where: {supersededDate: {_isNull: true}, status: {_nin: [\"Completed\", \"Failed\"]}}\n  ) {\n    aggregate {\n      count\n    }\n  }\n  totalEmployeesAggregate: payrollsAggregate(\n    where: {supersededDate: {_isNull: true}}\n  ) {\n    aggregate {\n      sum {\n        employeeCount\n      }\n    }\n  }\n  upcomingPayrolls: payrolls(\n    where: {supersededDate: {_isNull: true}, status: {_nin: [\"Completed\", \"Failed\", \"Cancelled\"]}}\n    orderBy: {updatedAt: DESC}\n    limit: 5\n  ) {\n    ...PayrollMinimal\n    client {\n      ...ClientMinimal\n    }\n  }\n}\n\nquery GetDashboardStatsOptimized($limit: Int = 10) {\n  clientsAggregate {\n    aggregate {\n      count\n    }\n  }\n  totalPayrolls: payrollsAggregate(where: {supersededDate: {_isNull: true}}) {\n    aggregate {\n      count\n    }\n  }\n  activePayrolls: payrollsAggregate(\n    where: {supersededDate: {_isNull: true}, status: {_eq: \"Active\"}}\n  ) {\n    aggregate {\n      count\n    }\n  }\n  upcomingPayrolls: payrolls(\n    where: {supersededDate: {_isNull: true}, status: {_eq: \"Active\"}, payrollDates: {adjustedEftDate: {_gte: \"now()\"}}}\n    orderBy: {updatedAt: DESC}\n    limit: $limit\n  ) {\n    id\n    name\n    status\n    client {\n      id\n      name\n    }\n    nextEftDate: payrollDates(\n      where: {adjustedEftDate: {_gte: \"now()\"}}\n      orderBy: {adjustedEftDate: ASC}\n      limit: 1\n    ) {\n      originalEftDate\n      adjustedEftDate\n      processingDate\n    }\n  }\n}\n\nquery GetClientsDashboardStats {\n  activeClientsCount: clientsAggregate(where: {active: {_eq: true}}) {\n    aggregate {\n      count\n    }\n  }\n  totalPayrollsCount: payrollsAggregate(where: {supersededDate: {_isNull: true}}) {\n    aggregate {\n      count\n    }\n  }\n  totalEmployeesSum: payrollsAggregate(where: {supersededDate: {_isNull: true}}) {\n    aggregate {\n      sum {\n        employeeCount\n      }\n    }\n  }\n  clientsNeedingAttention: clients(\n    where: {active: {_eq: true}, _not: {payrolls: {supersededDate: {_isNull: true}}}}\n  ) {\n    ...ClientMinimal\n  }\n}\n\nquery GetCurrentUser($userId: uuid!) {\n  user: usersByPk(id: $userId) {\n    ...UserProfile\n  }\n}\n\nquery GetUsersForDropdown($role: user_role) {\n  users(\n    where: {isActive: {_eq: true}, role: {_eq: $role}}\n    orderBy: {computedName: ASC}\n  ) {\n    ...UserMinimal\n  }\n}\n\nquery GetSystemHealth {\n  databaseHealth: users(limit: 1) {\n    id\n  }\n  recentActivity: auditAuditLogAggregate(\n    where: {eventTime: {_gte: \"now() - interval '1 hour'\"}}\n  ) {\n    aggregate {\n      count\n    }\n  }\n}\n\nquery GlobalSearch($searchTerm: String!) {\n  clients(\n    where: {_or: [{name: {_ilike: $searchTerm}}, {contactEmail: {_ilike: $searchTerm}}]}\n    limit: 5\n  ) {\n    ...ClientMinimal\n  }\n  users(\n    where: {_or: [{computedName: {_ilike: $searchTerm}}, {firstName: {_ilike: $searchTerm}}, {lastName: {_ilike: $searchTerm}}, {email: {_ilike: $searchTerm}}]}\n    limit: 5\n  ) {\n    ...UserMinimal\n  }\n  payrolls(\n    where: {client: {name: {_ilike: $searchTerm}}, supersededDate: {_isNull: true}}\n    limit: 5\n  ) {\n    ...PayrollMinimal\n    client {\n      ...ClientMinimal\n    }\n  }\n}\n\nquery GetFileById($id: uuid!) {\n  filesByPk(id: $id) {\n    id\n    filename\n    bucket\n    objectKey\n    size\n    mimetype\n    url\n    clientId\n    payrollId\n    uploadedBy\n    category\n    isPublic\n    metadata\n    fileType\n    createdAt\n    client {\n      name\n    }\n    payroll {\n      name\n    }\n    uploadedBy\n  }\n}\n\nquery ListFiles($where: FilesBoolExp, $limit: Int, $offset: Int, $orderBy: [FilesOrderBy!]) {\n  files(where: $where, limit: $limit, offset: $offset, orderBy: $orderBy) {\n    id\n    filename\n    bucket\n    objectKey\n    size\n    mimetype\n    url\n    clientId\n    payrollId\n    uploadedBy\n    category\n    isPublic\n    metadata\n    fileType\n    createdAt\n    client {\n      name\n    }\n    payroll {\n      name\n    }\n    uploadedBy\n  }\n  filesAggregate(where: $where) {\n    aggregate {\n      count\n    }\n  }\n}": types.GetDashboardMetricsDocument,
    "subscription RecentActivity($resourceTypes: [String!]) {\n  auditAuditLog(\n    where: {resourceType: {_in: $resourceTypes}, eventTime: {_gte: \"now() - interval '5 minutes'\"}}\n    orderBy: {eventTime: DESC}\n    limit: 20\n  ) {\n    ...AuditLogEntry\n  }\n}\n\nsubscription AuthenticationEvents($userId: uuid) {\n  auditAuthEvents(\n    where: {userId: {_eq: $userId}, eventTime: {_gte: \"now() - interval '10 minutes'\"}}\n    orderBy: {eventTime: DESC}\n  ) {\n    ...AuthEvent\n  }\n}\n\nsubscription SensitiveDataAccess($resourceTypes: [String!]!) {\n  auditDataAccessLog(\n    where: {resourceType: {_in: $resourceTypes}, accessedAt: {_gte: \"now() - interval '10 minutes'\"}}\n    orderBy: {accessedAt: DESC}\n  ) {\n    ...DataAccessLog\n  }\n}\n\nsubscription PermissionChangeStream {\n  auditPermissionChanges(orderBy: {changedAt: DESC}, limit: 10) {\n    ...PermissionChange\n  }\n}": types.RecentActivityDocument,
};

/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 *
 *
 * @example
 * ```ts
 * const query = gql(`query GetUser($id: ID!) { user(id: $id) { name } }`);
 * ```
 *
 * The query argument is unknown!
 * Please regenerate the types.
 */
export function gql(source: string): unknown;

/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "fragment ExternalSystemCore on ExternalSystems {\n  id\n  name\n  description\n  icon\n  createdAt\n  updatedAt\n}\n\nfragment ExternalSystemBasic on ExternalSystems {\n  ...ExternalSystemCore\n  url\n}\n\nfragment ExternalSystemDetailed on ExternalSystems {\n  ...ExternalSystemBasic\n}\n\nfragment ExternalSystemWithClients on ExternalSystems {\n  ...ExternalSystemBasic\n  clientExternalSystems {\n    id\n    clientId\n    externalSystem {\n      id\n      name\n      description\n      url\n    }\n    systemClientId\n    createdAt\n    updatedAt\n    client {\n      id\n      name\n    }\n  }\n}\n\nfragment ExternalSystemComplete on ExternalSystems {\n  ...ExternalSystemDetailed\n  clientExternalSystems {\n    id\n    clientId\n    externalSystem {\n      id\n      name\n      description\n      url\n    }\n    systemClientId\n    createdAt\n    updatedAt\n    client {\n      id\n      name\n      contactPerson\n      contactEmail\n    }\n  }\n}\n\nfragment ClientExternalSystemCore on ClientExternalSystems {\n  id\n  clientId\n  externalSystem {\n    id\n    name\n    description\n    url\n  }\n  systemClientId\n  createdAt\n  updatedAt\n}\n\nfragment ClientExternalSystemBasic on ClientExternalSystems {\n  ...ClientExternalSystemCore\n}\n\nfragment ClientExternalSystemDetailed on ClientExternalSystems {\n  ...ClientExternalSystemBasic\n}\n\nfragment ClientExternalSystemWithRelations on ClientExternalSystems {\n  ...ClientExternalSystemBasic\n  client {\n    id\n    name\n    contactPerson\n    contactEmail\n  }\n  externalSystem {\n    id\n    name\n    description\n    url\n    icon\n  }\n}\n\nfragment ClientExternalSystemComplete on ClientExternalSystems {\n  ...ClientExternalSystemDetailed\n  client {\n    id\n    name\n    contactPerson\n    contactEmail\n    contactPhone\n  }\n  externalSystem {\n    id\n    name\n    description\n    url\n    icon\n    createdAt\n    updatedAt\n  }\n}\n\nfragment ExternalSystemSummary on ExternalSystems {\n  id\n  name\n  description\n  icon\n}\n\nfragment ExternalSystemListItem on ExternalSystems {\n  ...ExternalSystemSummary\n  url\n  createdAt\n  updatedAt\n  clientCount: clientExternalSystemsAggregate {\n    aggregate {\n      count\n    }\n  }\n}\n\nfragment ExternalSystemTableRow on ExternalSystems {\n  ...ExternalSystemListItem\n}\n\nfragment ExternalSystemDashboardCard on ExternalSystems {\n  ...ExternalSystemSummary\n  url\n  clientCount: clientExternalSystemsAggregate {\n    aggregate {\n      count\n    }\n  }\n}\n\nfragment ClientExternalSystemSummary on ClientExternalSystems {\n  id\n  clientId\n  externalSystem {\n    id\n    name\n    description\n    url\n  }\n  systemClientId\n  createdAt\n  updatedAt\n}\n\nfragment ClientExternalSystemListItem on ClientExternalSystems {\n  ...ClientExternalSystemSummary\n  client {\n    id\n    name\n  }\n  externalSystem {\n    id\n    name\n    description\n    url\n    icon\n  }\n}\n\nfragment ClientExternalSystemTableRow on ClientExternalSystems {\n  ...ClientExternalSystemListItem\n}\n\nfragment ExternalSystemMinimal on ExternalSystems {\n  id\n  name\n  url\n  icon\n}\n\nfragment ClientExternalSystemMinimal on ClientExternalSystems {\n  id\n  clientId\n  externalSystem {\n    id\n    name\n    description\n    url\n  }\n  systemClientId\n}\n\nfragment ExternalSystemConfig on ExternalSystems {\n  id\n  name\n  description\n  url\n  icon\n  createdAt\n  updatedAt\n}\n\nfragment ClientExternalSystemConfig on ClientExternalSystems {\n  id\n  clientId\n  externalSystem {\n    id\n    name\n    description\n    url\n  }\n  systemClientId\n  createdAt\n  updatedAt\n}\n\nfragment ExternalSystemForAudit on ExternalSystems {\n  id\n  name\n  description\n  url\n  icon\n  createdAt\n  updatedAt\n}\n\nfragment ClientExternalSystemForAudit on ClientExternalSystems {\n  id\n  clientId\n  externalSystem {\n    id\n    name\n    description\n    url\n  }\n  systemClientId\n  createdAt\n  updatedAt\n}\n\nfragment ExternalSystemMonitoring on ExternalSystems {\n  id\n  name\n  description\n  url\n  icon\n  clientExternalSystemsAggregate {\n    aggregate {\n      count\n    }\n  }\n}"): (typeof documents)["fragment ExternalSystemCore on ExternalSystems {\n  id\n  name\n  description\n  icon\n  createdAt\n  updatedAt\n}\n\nfragment ExternalSystemBasic on ExternalSystems {\n  ...ExternalSystemCore\n  url\n}\n\nfragment ExternalSystemDetailed on ExternalSystems {\n  ...ExternalSystemBasic\n}\n\nfragment ExternalSystemWithClients on ExternalSystems {\n  ...ExternalSystemBasic\n  clientExternalSystems {\n    id\n    clientId\n    externalSystem {\n      id\n      name\n      description\n      url\n    }\n    systemClientId\n    createdAt\n    updatedAt\n    client {\n      id\n      name\n    }\n  }\n}\n\nfragment ExternalSystemComplete on ExternalSystems {\n  ...ExternalSystemDetailed\n  clientExternalSystems {\n    id\n    clientId\n    externalSystem {\n      id\n      name\n      description\n      url\n    }\n    systemClientId\n    createdAt\n    updatedAt\n    client {\n      id\n      name\n      contactPerson\n      contactEmail\n    }\n  }\n}\n\nfragment ClientExternalSystemCore on ClientExternalSystems {\n  id\n  clientId\n  externalSystem {\n    id\n    name\n    description\n    url\n  }\n  systemClientId\n  createdAt\n  updatedAt\n}\n\nfragment ClientExternalSystemBasic on ClientExternalSystems {\n  ...ClientExternalSystemCore\n}\n\nfragment ClientExternalSystemDetailed on ClientExternalSystems {\n  ...ClientExternalSystemBasic\n}\n\nfragment ClientExternalSystemWithRelations on ClientExternalSystems {\n  ...ClientExternalSystemBasic\n  client {\n    id\n    name\n    contactPerson\n    contactEmail\n  }\n  externalSystem {\n    id\n    name\n    description\n    url\n    icon\n  }\n}\n\nfragment ClientExternalSystemComplete on ClientExternalSystems {\n  ...ClientExternalSystemDetailed\n  client {\n    id\n    name\n    contactPerson\n    contactEmail\n    contactPhone\n  }\n  externalSystem {\n    id\n    name\n    description\n    url\n    icon\n    createdAt\n    updatedAt\n  }\n}\n\nfragment ExternalSystemSummary on ExternalSystems {\n  id\n  name\n  description\n  icon\n}\n\nfragment ExternalSystemListItem on ExternalSystems {\n  ...ExternalSystemSummary\n  url\n  createdAt\n  updatedAt\n  clientCount: clientExternalSystemsAggregate {\n    aggregate {\n      count\n    }\n  }\n}\n\nfragment ExternalSystemTableRow on ExternalSystems {\n  ...ExternalSystemListItem\n}\n\nfragment ExternalSystemDashboardCard on ExternalSystems {\n  ...ExternalSystemSummary\n  url\n  clientCount: clientExternalSystemsAggregate {\n    aggregate {\n      count\n    }\n  }\n}\n\nfragment ClientExternalSystemSummary on ClientExternalSystems {\n  id\n  clientId\n  externalSystem {\n    id\n    name\n    description\n    url\n  }\n  systemClientId\n  createdAt\n  updatedAt\n}\n\nfragment ClientExternalSystemListItem on ClientExternalSystems {\n  ...ClientExternalSystemSummary\n  client {\n    id\n    name\n  }\n  externalSystem {\n    id\n    name\n    description\n    url\n    icon\n  }\n}\n\nfragment ClientExternalSystemTableRow on ClientExternalSystems {\n  ...ClientExternalSystemListItem\n}\n\nfragment ExternalSystemMinimal on ExternalSystems {\n  id\n  name\n  url\n  icon\n}\n\nfragment ClientExternalSystemMinimal on ClientExternalSystems {\n  id\n  clientId\n  externalSystem {\n    id\n    name\n    description\n    url\n  }\n  systemClientId\n}\n\nfragment ExternalSystemConfig on ExternalSystems {\n  id\n  name\n  description\n  url\n  icon\n  createdAt\n  updatedAt\n}\n\nfragment ClientExternalSystemConfig on ClientExternalSystems {\n  id\n  clientId\n  externalSystem {\n    id\n    name\n    description\n    url\n  }\n  systemClientId\n  createdAt\n  updatedAt\n}\n\nfragment ExternalSystemForAudit on ExternalSystems {\n  id\n  name\n  description\n  url\n  icon\n  createdAt\n  updatedAt\n}\n\nfragment ClientExternalSystemForAudit on ClientExternalSystems {\n  id\n  clientId\n  externalSystem {\n    id\n    name\n    description\n    url\n  }\n  systemClientId\n  createdAt\n  updatedAt\n}\n\nfragment ExternalSystemMonitoring on ExternalSystems {\n  id\n  name\n  description\n  url\n  icon\n  clientExternalSystemsAggregate {\n    aggregate {\n      count\n    }\n  }\n}"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "mutation CreateExternalSystem($object: ExternalSystemsInsertInput!) {\n  insertExternalSystemsOne(object: $object) {\n    ...ExternalSystemDetailed\n  }\n}\n\nmutation UpdateExternalSystem($id: uuid!, $set: ExternalSystemsSetInput!) {\n  updateExternalSystemsByPk(pkColumns: {id: $id}, _set: $set) {\n    ...ExternalSystemDetailed\n  }\n}\n\nmutation DeleteExternalSystem($id: uuid!) {\n  deleteExternalSystemsByPk(id: $id) {\n    id\n    name\n  }\n}\n\nmutation CreateClientExternalSystem($object: ClientExternalSystemsInsertInput!) {\n  insertClientExternalSystemsOne(object: $object) {\n    ...ClientExternalSystemComplete\n  }\n}\n\nmutation UpdateClientExternalSystem($id: uuid!, $set: ClientExternalSystemsSetInput!) {\n  updateClientExternalSystemsByPk(pkColumns: {id: $id}, _set: $set) {\n    ...ClientExternalSystemComplete\n  }\n}\n\nmutation DeleteClientExternalSystem($id: uuid!) {\n  deleteClientExternalSystemsByPk(id: $id) {\n    id\n    clientId\n  }\n}\n\nmutation ConnectClientToSystem($clientId: uuid!, $externalSystemId: uuid!, $systemClientId: String) {\n  insertClientExternalSystemsOne(\n    object: {clientId: $clientId, systemClientId: $systemClientId}\n  ) {\n    ...ClientExternalSystemComplete\n  }\n}\n\nmutation DisconnectClientFromSystem($id: uuid!) {\n  deleteClientExternalSystemsByPk(id: $id) {\n    id\n    clientId\n  }\n}\n\nmutation BulkDeleteExternalSystems($systemIds: [uuid!]!) {\n  deleteExternalSystems(where: {id: {_in: $systemIds}}) {\n    affectedRows\n    returning {\n      id\n      name\n    }\n  }\n}\n\nmutation BulkDeleteClientExternalSystems($clientSystemIds: [uuid!]!) {\n  deleteClientExternalSystems(where: {id: {_in: $clientSystemIds}}) {\n    affectedRows\n    returning {\n      id\n      clientId\n    }\n  }\n}\n\nmutation DisconnectAllClientSystemsBySystem($externalSystemId: uuid!) {\n  deleteClientExternalSystems(\n    where: {externalSystem: {id: {_eq: $externalSystemId}}}\n  ) {\n    affectedRows\n    returning {\n      id\n      clientId\n    }\n  }\n}\n\nmutation DisconnectAllClientSystemsByClient($clientId: uuid!) {\n  deleteClientExternalSystems(where: {clientId: {_eq: $clientId}}) {\n    affectedRows\n    returning {\n      id\n      clientId\n    }\n  }\n}\n\nmutation TransferClientSystemConnections($oldClientId: uuid!, $newClientId: uuid!) {\n  updateClientExternalSystems(\n    where: {clientId: {_eq: $oldClientId}}\n    _set: {clientId: $newClientId, updatedAt: \"now()\"}\n  ) {\n    affectedRows\n    returning {\n      id\n      clientId\n    }\n  }\n}\n\nmutation UpdateExternalSystemDetails($id: uuid!, $name: String, $description: String, $url: String, $icon: String) {\n  updateExternalSystemsByPk(\n    pkColumns: {id: $id}\n    _set: {name: $name, description: $description, url: $url, icon: $icon, updatedAt: \"now()\"}\n  ) {\n    ...ExternalSystemBasic\n  }\n}\n\nmutation UpdateClientSystemMapping($id: uuid!, $systemClientId: String) {\n  updateClientExternalSystemsByPk(\n    pkColumns: {id: $id}\n    _set: {systemClientId: $systemClientId, updatedAt: \"now()\"}\n  ) {\n    ...ClientExternalSystemBasic\n  }\n}"): (typeof documents)["mutation CreateExternalSystem($object: ExternalSystemsInsertInput!) {\n  insertExternalSystemsOne(object: $object) {\n    ...ExternalSystemDetailed\n  }\n}\n\nmutation UpdateExternalSystem($id: uuid!, $set: ExternalSystemsSetInput!) {\n  updateExternalSystemsByPk(pkColumns: {id: $id}, _set: $set) {\n    ...ExternalSystemDetailed\n  }\n}\n\nmutation DeleteExternalSystem($id: uuid!) {\n  deleteExternalSystemsByPk(id: $id) {\n    id\n    name\n  }\n}\n\nmutation CreateClientExternalSystem($object: ClientExternalSystemsInsertInput!) {\n  insertClientExternalSystemsOne(object: $object) {\n    ...ClientExternalSystemComplete\n  }\n}\n\nmutation UpdateClientExternalSystem($id: uuid!, $set: ClientExternalSystemsSetInput!) {\n  updateClientExternalSystemsByPk(pkColumns: {id: $id}, _set: $set) {\n    ...ClientExternalSystemComplete\n  }\n}\n\nmutation DeleteClientExternalSystem($id: uuid!) {\n  deleteClientExternalSystemsByPk(id: $id) {\n    id\n    clientId\n  }\n}\n\nmutation ConnectClientToSystem($clientId: uuid!, $externalSystemId: uuid!, $systemClientId: String) {\n  insertClientExternalSystemsOne(\n    object: {clientId: $clientId, systemClientId: $systemClientId}\n  ) {\n    ...ClientExternalSystemComplete\n  }\n}\n\nmutation DisconnectClientFromSystem($id: uuid!) {\n  deleteClientExternalSystemsByPk(id: $id) {\n    id\n    clientId\n  }\n}\n\nmutation BulkDeleteExternalSystems($systemIds: [uuid!]!) {\n  deleteExternalSystems(where: {id: {_in: $systemIds}}) {\n    affectedRows\n    returning {\n      id\n      name\n    }\n  }\n}\n\nmutation BulkDeleteClientExternalSystems($clientSystemIds: [uuid!]!) {\n  deleteClientExternalSystems(where: {id: {_in: $clientSystemIds}}) {\n    affectedRows\n    returning {\n      id\n      clientId\n    }\n  }\n}\n\nmutation DisconnectAllClientSystemsBySystem($externalSystemId: uuid!) {\n  deleteClientExternalSystems(\n    where: {externalSystem: {id: {_eq: $externalSystemId}}}\n  ) {\n    affectedRows\n    returning {\n      id\n      clientId\n    }\n  }\n}\n\nmutation DisconnectAllClientSystemsByClient($clientId: uuid!) {\n  deleteClientExternalSystems(where: {clientId: {_eq: $clientId}}) {\n    affectedRows\n    returning {\n      id\n      clientId\n    }\n  }\n}\n\nmutation TransferClientSystemConnections($oldClientId: uuid!, $newClientId: uuid!) {\n  updateClientExternalSystems(\n    where: {clientId: {_eq: $oldClientId}}\n    _set: {clientId: $newClientId, updatedAt: \"now()\"}\n  ) {\n    affectedRows\n    returning {\n      id\n      clientId\n    }\n  }\n}\n\nmutation UpdateExternalSystemDetails($id: uuid!, $name: String, $description: String, $url: String, $icon: String) {\n  updateExternalSystemsByPk(\n    pkColumns: {id: $id}\n    _set: {name: $name, description: $description, url: $url, icon: $icon, updatedAt: \"now()\"}\n  ) {\n    ...ExternalSystemBasic\n  }\n}\n\nmutation UpdateClientSystemMapping($id: uuid!, $systemClientId: String) {\n  updateClientExternalSystemsByPk(\n    pkColumns: {id: $id}\n    _set: {systemClientId: $systemClientId, updatedAt: \"now()\"}\n  ) {\n    ...ClientExternalSystemBasic\n  }\n}"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "query GetExternalSystems($limit: Int = 50, $offset: Int = 0, $where: ExternalSystemsBoolExp) {\n  externalSystems(\n    limit: $limit\n    offset: $offset\n    where: $where\n    orderBy: {name: ASC}\n  ) {\n    ...ExternalSystemListItem\n  }\n  externalSystemsAggregate(where: $where) {\n    aggregate {\n      count\n    }\n  }\n}\n\nquery GetExternalSystemById($id: uuid!) {\n  externalSystemsByPk(id: $id) {\n    ...ExternalSystemComplete\n  }\n}\n\nquery GetExternalSystemBasic($id: uuid!) {\n  externalSystemsByPk(id: $id) {\n    ...ExternalSystemBasic\n  }\n}\n\nquery GetExternalSystemConfig($id: uuid!) {\n  externalSystemsByPk(id: $id) {\n    ...ExternalSystemConfig\n  }\n}\n\nquery GetActiveExternalSystems {\n  externalSystems(orderBy: {name: ASC}) {\n    ...ExternalSystemBasic\n  }\n}\n\nquery GetExternalSystemsSimple {\n  externalSystems(orderBy: {name: ASC}) {\n    ...ExternalSystemMinimal\n  }\n}\n\nquery GetClientExternalSystems($clientId: uuid!) {\n  clientExternalSystems(\n    where: {clientId: {_eq: $clientId}}\n    orderBy: {createdAt: DESC}\n  ) {\n    ...ClientExternalSystemWithRelations\n  }\n}\n\nquery GetClientExternalSystemById($id: uuid!) {\n  clientExternalSystemsByPk(id: $id) {\n    ...ClientExternalSystemComplete\n  }\n}\n\nquery GetActiveClientExternalSystems($clientId: uuid!) {\n  clientExternalSystems(\n    where: {clientId: {_eq: $clientId}}\n    orderBy: {createdAt: DESC}\n  ) {\n    ...ClientExternalSystemWithRelations\n  }\n}\n\nquery GetSystemClientConnections($externalSystemId: uuid!) {\n  clientExternalSystems(\n    where: {externalSystem: {id: {_eq: $externalSystemId}}}\n    orderBy: {createdAt: DESC}\n  ) {\n    ...ClientExternalSystemWithRelations\n  }\n}\n\nquery GetActiveSystemClientConnections($externalSystemId: uuid!) {\n  clientExternalSystems(\n    where: {externalSystem: {id: {_eq: $externalSystemId}}}\n    orderBy: {createdAt: DESC}\n  ) {\n    ...ClientExternalSystemWithRelations\n  }\n}\n\nquery GetExternalSystemsDashboardStats {\n  totalSystems: externalSystemsAggregate {\n    aggregate {\n      count\n    }\n  }\n  totalConnections: clientExternalSystemsAggregate {\n    aggregate {\n      count\n    }\n  }\n  recentSystems: externalSystems(orderBy: {createdAt: DESC}, limit: 5) {\n    ...ExternalSystemDashboardCard\n  }\n}\n\nquery GetSystemIntegrationOverview {\n  externalSystems(orderBy: {name: ASC}) {\n    ...ExternalSystemMonitoring\n  }\n}\n\nquery GetSystemUsageStats {\n  systemUsage: externalSystems {\n    id\n    name\n    description\n    totalClients: clientExternalSystemsAggregate {\n      aggregate {\n        count\n      }\n    }\n  }\n}\n\nquery SearchExternalSystems($searchTerm: String!, $limit: Int = 50) {\n  externalSystems(\n    where: {_or: [{name: {_ilike: $searchTerm}}, {description: {_ilike: $searchTerm}}, {url: {_ilike: $searchTerm}}]}\n    orderBy: {name: ASC}\n    limit: $limit\n  ) {\n    ...ExternalSystemTableRow\n  }\n}\n\nquery FilterExternalSystemsByDateRange($startDate: timestamptz!, $endDate: timestamptz!) {\n  externalSystems(\n    where: {createdAt: {_gte: $startDate, _lte: $endDate}}\n    orderBy: {createdAt: DESC}\n  ) {\n    ...ExternalSystemListItem\n  }\n}\n\nquery GetClientSystemsByDate($clientId: uuid!, $startDate: timestamptz!, $endDate: timestamptz!) {\n  clientExternalSystems(\n    where: {clientId: {_eq: $clientId}, createdAt: {_gte: $startDate, _lte: $endDate}}\n    orderBy: {createdAt: DESC}\n  ) {\n    ...ClientExternalSystemWithRelations\n  }\n}\n\nquery GetExternalSystemsForAudit($limit: Int = 100, $offset: Int = 0, $where: ExternalSystemsBoolExp = {}) {\n  externalSystems(\n    limit: $limit\n    offset: $offset\n    where: $where\n    orderBy: {createdAt: DESC}\n  ) {\n    ...ExternalSystemForAudit\n  }\n}\n\nquery GetClientExternalSystemsForAudit($limit: Int = 100, $offset: Int = 0, $where: ClientExternalSystemsBoolExp = {}) {\n  clientExternalSystems(\n    limit: $limit\n    offset: $offset\n    where: $where\n    orderBy: {createdAt: DESC}\n  ) {\n    ...ClientExternalSystemForAudit\n  }\n}\n\nquery GetSystemActivityAudit($externalSystemId: uuid!, $limit: Int = 50) {\n  clientExternalSystems(\n    where: {externalSystem: {id: {_eq: $externalSystemId}}}\n    orderBy: {updatedAt: DESC}\n    limit: $limit\n  ) {\n    ...ClientExternalSystemForAudit\n  }\n}\n\nquery GetExternalSystemsPaginated($limit: Int = 20, $offset: Int = 0, $where: ExternalSystemsBoolExp = {}, $orderBy: [ExternalSystemsOrderBy!] = [{name: ASC}]) {\n  externalSystems(\n    limit: $limit\n    offset: $offset\n    where: $where\n    orderBy: $orderBy\n  ) {\n    ...ExternalSystemTableRow\n  }\n  externalSystemsAggregate(where: $where) {\n    aggregate {\n      count\n    }\n  }\n}\n\nquery GetClientExternalSystemsPaginated($clientId: uuid!, $limit: Int = 20, $offset: Int = 0, $where: ClientExternalSystemsBoolExp = {}) {\n  clientExternalSystems(\n    where: {_and: [{clientId: {_eq: $clientId}}, $where]}\n    orderBy: {createdAt: DESC}\n    limit: $limit\n    offset: $offset\n  ) {\n    ...ClientExternalSystemTableRow\n  }\n  clientSystemsAggregate: clientExternalSystemsAggregate(\n    where: {_and: [{clientId: {_eq: $clientId}}, $where]}\n  ) {\n    aggregate {\n      count\n    }\n  }\n}\n\nquery GetExternalSystemsQuickList {\n  externalSystems(orderBy: {name: ASC}) {\n    ...ExternalSystemMinimal\n  }\n}\n\nquery GetClientSystemsQuickList($clientId: uuid!) {\n  clientExternalSystems(\n    where: {clientId: {_eq: $clientId}}\n    orderBy: {createdAt: DESC}\n  ) {\n    ...ClientExternalSystemMinimal\n  }\n}"): (typeof documents)["query GetExternalSystems($limit: Int = 50, $offset: Int = 0, $where: ExternalSystemsBoolExp) {\n  externalSystems(\n    limit: $limit\n    offset: $offset\n    where: $where\n    orderBy: {name: ASC}\n  ) {\n    ...ExternalSystemListItem\n  }\n  externalSystemsAggregate(where: $where) {\n    aggregate {\n      count\n    }\n  }\n}\n\nquery GetExternalSystemById($id: uuid!) {\n  externalSystemsByPk(id: $id) {\n    ...ExternalSystemComplete\n  }\n}\n\nquery GetExternalSystemBasic($id: uuid!) {\n  externalSystemsByPk(id: $id) {\n    ...ExternalSystemBasic\n  }\n}\n\nquery GetExternalSystemConfig($id: uuid!) {\n  externalSystemsByPk(id: $id) {\n    ...ExternalSystemConfig\n  }\n}\n\nquery GetActiveExternalSystems {\n  externalSystems(orderBy: {name: ASC}) {\n    ...ExternalSystemBasic\n  }\n}\n\nquery GetExternalSystemsSimple {\n  externalSystems(orderBy: {name: ASC}) {\n    ...ExternalSystemMinimal\n  }\n}\n\nquery GetClientExternalSystems($clientId: uuid!) {\n  clientExternalSystems(\n    where: {clientId: {_eq: $clientId}}\n    orderBy: {createdAt: DESC}\n  ) {\n    ...ClientExternalSystemWithRelations\n  }\n}\n\nquery GetClientExternalSystemById($id: uuid!) {\n  clientExternalSystemsByPk(id: $id) {\n    ...ClientExternalSystemComplete\n  }\n}\n\nquery GetActiveClientExternalSystems($clientId: uuid!) {\n  clientExternalSystems(\n    where: {clientId: {_eq: $clientId}}\n    orderBy: {createdAt: DESC}\n  ) {\n    ...ClientExternalSystemWithRelations\n  }\n}\n\nquery GetSystemClientConnections($externalSystemId: uuid!) {\n  clientExternalSystems(\n    where: {externalSystem: {id: {_eq: $externalSystemId}}}\n    orderBy: {createdAt: DESC}\n  ) {\n    ...ClientExternalSystemWithRelations\n  }\n}\n\nquery GetActiveSystemClientConnections($externalSystemId: uuid!) {\n  clientExternalSystems(\n    where: {externalSystem: {id: {_eq: $externalSystemId}}}\n    orderBy: {createdAt: DESC}\n  ) {\n    ...ClientExternalSystemWithRelations\n  }\n}\n\nquery GetExternalSystemsDashboardStats {\n  totalSystems: externalSystemsAggregate {\n    aggregate {\n      count\n    }\n  }\n  totalConnections: clientExternalSystemsAggregate {\n    aggregate {\n      count\n    }\n  }\n  recentSystems: externalSystems(orderBy: {createdAt: DESC}, limit: 5) {\n    ...ExternalSystemDashboardCard\n  }\n}\n\nquery GetSystemIntegrationOverview {\n  externalSystems(orderBy: {name: ASC}) {\n    ...ExternalSystemMonitoring\n  }\n}\n\nquery GetSystemUsageStats {\n  systemUsage: externalSystems {\n    id\n    name\n    description\n    totalClients: clientExternalSystemsAggregate {\n      aggregate {\n        count\n      }\n    }\n  }\n}\n\nquery SearchExternalSystems($searchTerm: String!, $limit: Int = 50) {\n  externalSystems(\n    where: {_or: [{name: {_ilike: $searchTerm}}, {description: {_ilike: $searchTerm}}, {url: {_ilike: $searchTerm}}]}\n    orderBy: {name: ASC}\n    limit: $limit\n  ) {\n    ...ExternalSystemTableRow\n  }\n}\n\nquery FilterExternalSystemsByDateRange($startDate: timestamptz!, $endDate: timestamptz!) {\n  externalSystems(\n    where: {createdAt: {_gte: $startDate, _lte: $endDate}}\n    orderBy: {createdAt: DESC}\n  ) {\n    ...ExternalSystemListItem\n  }\n}\n\nquery GetClientSystemsByDate($clientId: uuid!, $startDate: timestamptz!, $endDate: timestamptz!) {\n  clientExternalSystems(\n    where: {clientId: {_eq: $clientId}, createdAt: {_gte: $startDate, _lte: $endDate}}\n    orderBy: {createdAt: DESC}\n  ) {\n    ...ClientExternalSystemWithRelations\n  }\n}\n\nquery GetExternalSystemsForAudit($limit: Int = 100, $offset: Int = 0, $where: ExternalSystemsBoolExp = {}) {\n  externalSystems(\n    limit: $limit\n    offset: $offset\n    where: $where\n    orderBy: {createdAt: DESC}\n  ) {\n    ...ExternalSystemForAudit\n  }\n}\n\nquery GetClientExternalSystemsForAudit($limit: Int = 100, $offset: Int = 0, $where: ClientExternalSystemsBoolExp = {}) {\n  clientExternalSystems(\n    limit: $limit\n    offset: $offset\n    where: $where\n    orderBy: {createdAt: DESC}\n  ) {\n    ...ClientExternalSystemForAudit\n  }\n}\n\nquery GetSystemActivityAudit($externalSystemId: uuid!, $limit: Int = 50) {\n  clientExternalSystems(\n    where: {externalSystem: {id: {_eq: $externalSystemId}}}\n    orderBy: {updatedAt: DESC}\n    limit: $limit\n  ) {\n    ...ClientExternalSystemForAudit\n  }\n}\n\nquery GetExternalSystemsPaginated($limit: Int = 20, $offset: Int = 0, $where: ExternalSystemsBoolExp = {}, $orderBy: [ExternalSystemsOrderBy!] = [{name: ASC}]) {\n  externalSystems(\n    limit: $limit\n    offset: $offset\n    where: $where\n    orderBy: $orderBy\n  ) {\n    ...ExternalSystemTableRow\n  }\n  externalSystemsAggregate(where: $where) {\n    aggregate {\n      count\n    }\n  }\n}\n\nquery GetClientExternalSystemsPaginated($clientId: uuid!, $limit: Int = 20, $offset: Int = 0, $where: ClientExternalSystemsBoolExp = {}) {\n  clientExternalSystems(\n    where: {_and: [{clientId: {_eq: $clientId}}, $where]}\n    orderBy: {createdAt: DESC}\n    limit: $limit\n    offset: $offset\n  ) {\n    ...ClientExternalSystemTableRow\n  }\n  clientSystemsAggregate: clientExternalSystemsAggregate(\n    where: {_and: [{clientId: {_eq: $clientId}}, $where]}\n  ) {\n    aggregate {\n      count\n    }\n  }\n}\n\nquery GetExternalSystemsQuickList {\n  externalSystems(orderBy: {name: ASC}) {\n    ...ExternalSystemMinimal\n  }\n}\n\nquery GetClientSystemsQuickList($clientId: uuid!) {\n  clientExternalSystems(\n    where: {clientId: {_eq: $clientId}}\n    orderBy: {createdAt: DESC}\n  ) {\n    ...ClientExternalSystemMinimal\n  }\n}"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "subscription ExternalSystemsUpdates {\n  externalSystems(orderBy: {updatedAt: DESC}) {\n    ...ExternalSystemMonitoring\n  }\n}\n\nsubscription ExternalSystemUpdates($id: uuid!) {\n  externalSystems(where: {id: {_eq: $id}}) {\n    ...ExternalSystemComplete\n  }\n}\n\nsubscription ClientExternalSystemsUpdates($clientId: uuid!) {\n  clientExternalSystems(\n    where: {clientId: {_eq: $clientId}}\n    orderBy: {updatedAt: DESC}\n  ) {\n    ...ClientExternalSystemWithRelations\n  }\n}\n\nsubscription ClientSystemUpdates($id: uuid!) {\n  clientExternalSystems(where: {id: {_eq: $id}}) {\n    ...ClientExternalSystemComplete\n  }\n}\n\nsubscription SystemClientConnectionsUpdates($externalSystemId: uuid!) {\n  clientExternalSystems(\n    where: {externalSystem: {id: {_eq: $externalSystemId}}}\n    orderBy: {createdAt: DESC}\n  ) {\n    ...ClientExternalSystemWithRelations\n  }\n}\n\nsubscription ExternalSystemsCountUpdates {\n  externalSystemsAggregate {\n    aggregate {\n      count\n    }\n  }\n}\n\nsubscription ClientSystemConnectionsCountUpdates {\n  clientExternalSystemsAggregate {\n    aggregate {\n      count\n    }\n  }\n}\n\nsubscription RecentExternalSystemsUpdates {\n  externalSystems(orderBy: {createdAt: DESC}, limit: 5) {\n    ...ExternalSystemDashboardCard\n  }\n}\n\nsubscription SystemIntegrationOverviewUpdates {\n  externalSystems(orderBy: {name: ASC}) {\n    ...ExternalSystemMonitoring\n  }\n}\n\nsubscription SystemUsageStatsUpdates {\n  externalSystems {\n    id\n    name\n    description\n    totalClients: clientExternalSystemsAggregate {\n      aggregate {\n        count\n      }\n    }\n  }\n}\n\nsubscription ExternalSystemAuditUpdates {\n  externalSystems(\n    where: {updatedAt: {_gte: \"now() - interval '1 hour'\"}}\n    orderBy: {updatedAt: DESC}\n  ) {\n    ...ExternalSystemForAudit\n  }\n}\n\nsubscription ClientSystemAuditUpdates {\n  clientExternalSystems(\n    where: {updatedAt: {_gte: \"now() - interval '1 hour'\"}}\n    orderBy: {updatedAt: DESC}\n  ) {\n    ...ClientExternalSystemForAudit\n  }\n}\n\nsubscription SystemActivityAuditUpdates($externalSystemId: uuid!) {\n  clientExternalSystems(\n    where: {externalSystem: {id: {_eq: $externalSystemId}}, updatedAt: {_gte: \"now() - interval '1 hour'\"}}\n    orderBy: {updatedAt: DESC}\n  ) {\n    ...ClientExternalSystemForAudit\n  }\n}\n\nsubscription NewSystemConnectionsUpdates {\n  clientExternalSystems(\n    where: {createdAt: {_gte: \"now() - interval '5 minutes'\"}}\n    orderBy: {createdAt: DESC}\n  ) {\n    ...ClientExternalSystemWithRelations\n  }\n}\n\nsubscription SystemCountMetricsUpdates {\n  externalSystemsAggregate {\n    aggregate {\n      count\n    }\n  }\n}\n\nsubscription ConnectionCountMetricsUpdates {\n  clientExternalSystemsAggregate {\n    aggregate {\n      count\n    }\n  }\n}"): (typeof documents)["subscription ExternalSystemsUpdates {\n  externalSystems(orderBy: {updatedAt: DESC}) {\n    ...ExternalSystemMonitoring\n  }\n}\n\nsubscription ExternalSystemUpdates($id: uuid!) {\n  externalSystems(where: {id: {_eq: $id}}) {\n    ...ExternalSystemComplete\n  }\n}\n\nsubscription ClientExternalSystemsUpdates($clientId: uuid!) {\n  clientExternalSystems(\n    where: {clientId: {_eq: $clientId}}\n    orderBy: {updatedAt: DESC}\n  ) {\n    ...ClientExternalSystemWithRelations\n  }\n}\n\nsubscription ClientSystemUpdates($id: uuid!) {\n  clientExternalSystems(where: {id: {_eq: $id}}) {\n    ...ClientExternalSystemComplete\n  }\n}\n\nsubscription SystemClientConnectionsUpdates($externalSystemId: uuid!) {\n  clientExternalSystems(\n    where: {externalSystem: {id: {_eq: $externalSystemId}}}\n    orderBy: {createdAt: DESC}\n  ) {\n    ...ClientExternalSystemWithRelations\n  }\n}\n\nsubscription ExternalSystemsCountUpdates {\n  externalSystemsAggregate {\n    aggregate {\n      count\n    }\n  }\n}\n\nsubscription ClientSystemConnectionsCountUpdates {\n  clientExternalSystemsAggregate {\n    aggregate {\n      count\n    }\n  }\n}\n\nsubscription RecentExternalSystemsUpdates {\n  externalSystems(orderBy: {createdAt: DESC}, limit: 5) {\n    ...ExternalSystemDashboardCard\n  }\n}\n\nsubscription SystemIntegrationOverviewUpdates {\n  externalSystems(orderBy: {name: ASC}) {\n    ...ExternalSystemMonitoring\n  }\n}\n\nsubscription SystemUsageStatsUpdates {\n  externalSystems {\n    id\n    name\n    description\n    totalClients: clientExternalSystemsAggregate {\n      aggregate {\n        count\n      }\n    }\n  }\n}\n\nsubscription ExternalSystemAuditUpdates {\n  externalSystems(\n    where: {updatedAt: {_gte: \"now() - interval '1 hour'\"}}\n    orderBy: {updatedAt: DESC}\n  ) {\n    ...ExternalSystemForAudit\n  }\n}\n\nsubscription ClientSystemAuditUpdates {\n  clientExternalSystems(\n    where: {updatedAt: {_gte: \"now() - interval '1 hour'\"}}\n    orderBy: {updatedAt: DESC}\n  ) {\n    ...ClientExternalSystemForAudit\n  }\n}\n\nsubscription SystemActivityAuditUpdates($externalSystemId: uuid!) {\n  clientExternalSystems(\n    where: {externalSystem: {id: {_eq: $externalSystemId}}, updatedAt: {_gte: \"now() - interval '1 hour'\"}}\n    orderBy: {updatedAt: DESC}\n  ) {\n    ...ClientExternalSystemForAudit\n  }\n}\n\nsubscription NewSystemConnectionsUpdates {\n  clientExternalSystems(\n    where: {createdAt: {_gte: \"now() - interval '5 minutes'\"}}\n    orderBy: {createdAt: DESC}\n  ) {\n    ...ClientExternalSystemWithRelations\n  }\n}\n\nsubscription SystemCountMetricsUpdates {\n  externalSystemsAggregate {\n    aggregate {\n      count\n    }\n  }\n}\n\nsubscription ConnectionCountMetricsUpdates {\n  clientExternalSystemsAggregate {\n    aggregate {\n      count\n    }\n  }\n}"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "fragment UserMinimal on Users {\n  id\n  firstName\n  lastName\n  computedName\n  email\n}\n\nfragment UserCoreShared on Users {\n  ...UserMinimal\n  role\n  isActive\n}\n\nfragment UserBasic on Users {\n  ...UserCoreShared\n  clerkUserId\n  createdAt\n  updatedAt\n}\n\nfragment UserBase on Users {\n  ...UserBasic\n}\n\nfragment UserWithRole on Users {\n  ...UserBasic\n  username\n  isStaff\n}\n\nfragment UserProfile on Users {\n  ...UserWithRole\n  clerkUserId\n  image\n  managerId\n  deactivatedAt\n  deactivatedBy\n  manager {\n    ...UserMinimal\n  }\n}\n\nfragment UserSearchResult on Users {\n  ...UserCoreShared\n  username\n  isStaff\n}\n\nfragment ClientMinimal on Clients {\n  id\n  name\n}\n\nfragment ClientBase on Clients {\n  id\n  name\n  active\n  contactEmail\n  contactPerson\n  contactPhone\n  createdAt\n}\n\nfragment ClientWithStats on Clients {\n  ...ClientBase\n  currentEmployeeCount: payrollsAggregate(\n    where: {supersededDate: {_isNull: true}}\n  ) {\n    aggregate {\n      sum {\n        employeeCount\n      }\n    }\n  }\n  activePayrollCount: payrollsAggregate(\n    where: {supersededDate: {_isNull: true}, status: {_eq: \"Active\"}}\n  ) {\n    aggregate {\n      count\n    }\n  }\n}\n\nfragment ClientListBase on Clients {\n  ...ClientBase\n  payrollCount: payrollsAggregate(where: {supersededDate: {_isNull: true}}) {\n    aggregate {\n      count\n    }\n  }\n}\n\nfragment PayrollMinimal on Payrolls {\n  id\n  name\n  employeeCount\n  status\n}\n\nfragment PayrollBase on Payrolls {\n  id\n  name\n  employeeCount\n  status\n  payrollSystem\n  processingTime\n  processingDaysBeforeEft\n  versionNumber\n  supersededDate\n  createdAt\n  updatedAt\n}\n\nfragment PayrollWithClient on Payrolls {\n  ...PayrollBase\n  clientId\n  client {\n    id\n    name\n    active\n  }\n}\n\nfragment PayrollListItem on Payrolls {\n  ...PayrollWithClient\n  primaryConsultantUserId\n  backupConsultantUserId\n  managerUserId\n  createdByUserId\n  cycleId\n  dateTypeId\n  dateValue\n  payrollCycle {\n    id\n    name\n    description\n  }\n  payrollDateType {\n    id\n    name\n    description\n  }\n  primaryConsultant {\n    ...UserMinimal\n  }\n  backupConsultant {\n    ...UserMinimal\n  }\n  assignedManager {\n    ...UserMinimal\n  }\n}\n\nfragment PayrollWithDates on Payrolls {\n  ...PayrollBase\n  goLiveDate\n  payrollDates(orderBy: {originalEftDate: ASC}) {\n    id\n    originalEftDate\n    adjustedEftDate\n    notes\n  }\n}\n\nfragment PayrollFullDetail on Payrolls {\n  ...PayrollWithDates\n  ...PayrollWithClient\n  dateTypeId\n  cycleId\n  dateValue\n  versionReason\n  supersededDate\n  parentPayrollId\n  parentPayroll {\n    id\n    versionNumber\n  }\n  childPayrolls(orderBy: {versionNumber: DESC}) {\n    id\n    versionNumber\n    versionReason\n    createdAt\n  }\n  primaryConsultant {\n    ...UserMinimal\n  }\n  backupConsultant {\n    ...UserMinimal\n  }\n  assignedManager {\n    ...UserMinimal\n  }\n}\n\nfragment NoteWithAuthor on Notes {\n  id\n  content\n  isImportant\n  createdAt\n  entityId\n  entityType\n  author {\n    ...UserMinimal\n  }\n}\n\nfragment PermissionBase on Permissions {\n  id\n  resourceId\n  description\n  legacyPermissionName\n  action\n}\n\nfragment RoleWithPermissions on Roles {\n  id\n  name\n  displayName\n  description\n  isSystemRole\n  priority\n  rolePermissions {\n    permission {\n      ...PermissionBase\n    }\n  }\n}\n\nfragment AuditLogEntry on AuditAuditLog {\n  id\n  userId\n  userEmail\n  userRole\n  action\n  resourceType\n  resourceId\n  eventTime\n  success\n  errorMessage\n  ipAddress\n  userAgent\n  requestId\n  sessionId\n  metadata\n  oldValues\n  newValues\n  createdAt\n}\n\nfragment AuthEvent on AuditAuthEvents {\n  id\n  userId\n  userEmail\n  eventType\n  eventTime\n  success\n  failureReason\n  ipAddress\n  userAgent\n  metadata\n}\n\nfragment DataAccessLog on AuditDataAccessLog {\n  id\n  userId\n  resourceType\n  resourceId\n  accessType\n  accessedAt\n  dataClassification\n  fieldsAccessed\n  rowCount\n  ipAddress\n  metadata\n}\n\nfragment PermissionChange on AuditPermissionChanges {\n  id\n  changedAt\n  changedByUserId\n  targetUserId\n  targetRoleId\n  changeType\n  permissionType\n  oldPermissions\n  newPermissions\n  reason\n  approvedByUserId\n}\n\nfragment PayrollDateInfo on PayrollDates {\n  id\n  originalEftDate\n  adjustedEftDate\n  notes\n  createdAt\n}\n\nfragment PermissionOverrideInfo on PermissionOverrides {\n  id\n  userId\n  role\n  resource\n  operation\n  granted\n  reason\n  conditions\n  expiresAt\n  createdBy\n  createdAt\n}\n\nfragment PayrollTableRow on Payrolls {\n  ...PayrollListItem\n  goLiveDate\n  processingTime\n  versionNumber\n  cycleId\n  payrollCycle {\n    id\n    name\n    description\n  }\n  nextPayrollDate: payrollDates(\n    where: {_or: [{adjustedEftDate: {_gte: \"now()\"}}, {originalEftDate: {_gte: \"now()\"}}]}\n    orderBy: [{adjustedEftDate: ASC}, {originalEftDate: ASC}]\n    limit: 1\n  ) {\n    originalEftDate\n    adjustedEftDate\n    processingDate\n  }\n}\n\nfragment BillingItemMinimal on BillingItems {\n  id\n  description\n  amount\n  status\n  createdAt\n}\n\nfragment BillingItemBase on BillingItems {\n  ...BillingItemMinimal\n  clientId\n  staffUserId\n  isApproved\n  approvalDate\n  approvedBy\n  createdAt\n  updatedAt\n}\n\nfragment BillingItemWithClient on BillingItems {\n  ...BillingItemBase\n  client {\n    ...ClientMinimal\n  }\n  staffUser {\n    ...UserMinimal\n  }\n  approver: approvedByUser {\n    ...UserMinimal\n  }\n}\n\nfragment InvoiceMinimal on Invoices {\n  id\n  invoiceNumber\n  totalAmount\n  status\n  dueDate\n}\n\nfragment InvoiceBase on Invoices {\n  ...InvoiceMinimal\n  clientId\n  invoiceDate\n  taxAmount\n  subtotal\n  notes\n  createdAt\n  updatedAt\n}\n\nfragment InvoiceWithClient on Invoices {\n  ...InvoiceBase\n  client {\n    ...ClientMinimal\n  }\n}\n\nfragment FileMinimal on Files {\n  id\n  filename\n  size\n  mimetype\n  url\n}\n\nfragment FileBase on Files {\n  ...FileMinimal\n  bucket\n  objectKey\n  uploadedBy\n  category\n  fileType\n  isPublic\n  createdAt\n}\n\nfragment FileWithUploader on Files {\n  ...FileBase\n  uploadedByUser {\n    ...UserMinimal\n  }\n}\n\nfragment InvitationMinimal on UserInvitations {\n  id\n  email\n  invitedRole\n  invitationStatus\n}\n\nfragment InvitationBase on UserInvitations {\n  ...InvitationMinimal\n  invitedBy\n  expiresAt\n  acceptedAt\n  revokedAt\n  createdAt\n}\n\nfragment InvitationWithInviter on UserInvitations {\n  ...InvitationBase\n  invitedByUser {\n    ...UserMinimal\n  }\n}\n\nfragment ClientDashboardStats on Clients {\n  ...ClientMinimal\n  totalPayrolls: payrollsAggregate {\n    aggregate {\n      count\n    }\n  }\n  activePayrolls: payrollsAggregate(where: {status: {_eq: \"Active\"}}) {\n    aggregate {\n      count\n    }\n  }\n  totalEmployees: payrollsAggregate {\n    aggregate {\n      sum {\n        employeeCount\n      }\n    }\n  }\n}\n\nfragment UserActivityStats on Users {\n  ...UserMinimal\n  staffBillingItems(orderBy: {createdAt: DESC}, limit: 5) {\n    ...BillingItemMinimal\n  }\n  authoredNotes(orderBy: {createdAt: DESC}, limit: 3) {\n    ...NoteWithAuthor\n  }\n}"): (typeof documents)["fragment UserMinimal on Users {\n  id\n  firstName\n  lastName\n  computedName\n  email\n}\n\nfragment UserCoreShared on Users {\n  ...UserMinimal\n  role\n  isActive\n}\n\nfragment UserBasic on Users {\n  ...UserCoreShared\n  clerkUserId\n  createdAt\n  updatedAt\n}\n\nfragment UserBase on Users {\n  ...UserBasic\n}\n\nfragment UserWithRole on Users {\n  ...UserBasic\n  username\n  isStaff\n}\n\nfragment UserProfile on Users {\n  ...UserWithRole\n  clerkUserId\n  image\n  managerId\n  deactivatedAt\n  deactivatedBy\n  manager {\n    ...UserMinimal\n  }\n}\n\nfragment UserSearchResult on Users {\n  ...UserCoreShared\n  username\n  isStaff\n}\n\nfragment ClientMinimal on Clients {\n  id\n  name\n}\n\nfragment ClientBase on Clients {\n  id\n  name\n  active\n  contactEmail\n  contactPerson\n  contactPhone\n  createdAt\n}\n\nfragment ClientWithStats on Clients {\n  ...ClientBase\n  currentEmployeeCount: payrollsAggregate(\n    where: {supersededDate: {_isNull: true}}\n  ) {\n    aggregate {\n      sum {\n        employeeCount\n      }\n    }\n  }\n  activePayrollCount: payrollsAggregate(\n    where: {supersededDate: {_isNull: true}, status: {_eq: \"Active\"}}\n  ) {\n    aggregate {\n      count\n    }\n  }\n}\n\nfragment ClientListBase on Clients {\n  ...ClientBase\n  payrollCount: payrollsAggregate(where: {supersededDate: {_isNull: true}}) {\n    aggregate {\n      count\n    }\n  }\n}\n\nfragment PayrollMinimal on Payrolls {\n  id\n  name\n  employeeCount\n  status\n}\n\nfragment PayrollBase on Payrolls {\n  id\n  name\n  employeeCount\n  status\n  payrollSystem\n  processingTime\n  processingDaysBeforeEft\n  versionNumber\n  supersededDate\n  createdAt\n  updatedAt\n}\n\nfragment PayrollWithClient on Payrolls {\n  ...PayrollBase\n  clientId\n  client {\n    id\n    name\n    active\n  }\n}\n\nfragment PayrollListItem on Payrolls {\n  ...PayrollWithClient\n  primaryConsultantUserId\n  backupConsultantUserId\n  managerUserId\n  createdByUserId\n  cycleId\n  dateTypeId\n  dateValue\n  payrollCycle {\n    id\n    name\n    description\n  }\n  payrollDateType {\n    id\n    name\n    description\n  }\n  primaryConsultant {\n    ...UserMinimal\n  }\n  backupConsultant {\n    ...UserMinimal\n  }\n  assignedManager {\n    ...UserMinimal\n  }\n}\n\nfragment PayrollWithDates on Payrolls {\n  ...PayrollBase\n  goLiveDate\n  payrollDates(orderBy: {originalEftDate: ASC}) {\n    id\n    originalEftDate\n    adjustedEftDate\n    notes\n  }\n}\n\nfragment PayrollFullDetail on Payrolls {\n  ...PayrollWithDates\n  ...PayrollWithClient\n  dateTypeId\n  cycleId\n  dateValue\n  versionReason\n  supersededDate\n  parentPayrollId\n  parentPayroll {\n    id\n    versionNumber\n  }\n  childPayrolls(orderBy: {versionNumber: DESC}) {\n    id\n    versionNumber\n    versionReason\n    createdAt\n  }\n  primaryConsultant {\n    ...UserMinimal\n  }\n  backupConsultant {\n    ...UserMinimal\n  }\n  assignedManager {\n    ...UserMinimal\n  }\n}\n\nfragment NoteWithAuthor on Notes {\n  id\n  content\n  isImportant\n  createdAt\n  entityId\n  entityType\n  author {\n    ...UserMinimal\n  }\n}\n\nfragment PermissionBase on Permissions {\n  id\n  resourceId\n  description\n  legacyPermissionName\n  action\n}\n\nfragment RoleWithPermissions on Roles {\n  id\n  name\n  displayName\n  description\n  isSystemRole\n  priority\n  rolePermissions {\n    permission {\n      ...PermissionBase\n    }\n  }\n}\n\nfragment AuditLogEntry on AuditAuditLog {\n  id\n  userId\n  userEmail\n  userRole\n  action\n  resourceType\n  resourceId\n  eventTime\n  success\n  errorMessage\n  ipAddress\n  userAgent\n  requestId\n  sessionId\n  metadata\n  oldValues\n  newValues\n  createdAt\n}\n\nfragment AuthEvent on AuditAuthEvents {\n  id\n  userId\n  userEmail\n  eventType\n  eventTime\n  success\n  failureReason\n  ipAddress\n  userAgent\n  metadata\n}\n\nfragment DataAccessLog on AuditDataAccessLog {\n  id\n  userId\n  resourceType\n  resourceId\n  accessType\n  accessedAt\n  dataClassification\n  fieldsAccessed\n  rowCount\n  ipAddress\n  metadata\n}\n\nfragment PermissionChange on AuditPermissionChanges {\n  id\n  changedAt\n  changedByUserId\n  targetUserId\n  targetRoleId\n  changeType\n  permissionType\n  oldPermissions\n  newPermissions\n  reason\n  approvedByUserId\n}\n\nfragment PayrollDateInfo on PayrollDates {\n  id\n  originalEftDate\n  adjustedEftDate\n  notes\n  createdAt\n}\n\nfragment PermissionOverrideInfo on PermissionOverrides {\n  id\n  userId\n  role\n  resource\n  operation\n  granted\n  reason\n  conditions\n  expiresAt\n  createdBy\n  createdAt\n}\n\nfragment PayrollTableRow on Payrolls {\n  ...PayrollListItem\n  goLiveDate\n  processingTime\n  versionNumber\n  cycleId\n  payrollCycle {\n    id\n    name\n    description\n  }\n  nextPayrollDate: payrollDates(\n    where: {_or: [{adjustedEftDate: {_gte: \"now()\"}}, {originalEftDate: {_gte: \"now()\"}}]}\n    orderBy: [{adjustedEftDate: ASC}, {originalEftDate: ASC}]\n    limit: 1\n  ) {\n    originalEftDate\n    adjustedEftDate\n    processingDate\n  }\n}\n\nfragment BillingItemMinimal on BillingItems {\n  id\n  description\n  amount\n  status\n  createdAt\n}\n\nfragment BillingItemBase on BillingItems {\n  ...BillingItemMinimal\n  clientId\n  staffUserId\n  isApproved\n  approvalDate\n  approvedBy\n  createdAt\n  updatedAt\n}\n\nfragment BillingItemWithClient on BillingItems {\n  ...BillingItemBase\n  client {\n    ...ClientMinimal\n  }\n  staffUser {\n    ...UserMinimal\n  }\n  approver: approvedByUser {\n    ...UserMinimal\n  }\n}\n\nfragment InvoiceMinimal on Invoices {\n  id\n  invoiceNumber\n  totalAmount\n  status\n  dueDate\n}\n\nfragment InvoiceBase on Invoices {\n  ...InvoiceMinimal\n  clientId\n  invoiceDate\n  taxAmount\n  subtotal\n  notes\n  createdAt\n  updatedAt\n}\n\nfragment InvoiceWithClient on Invoices {\n  ...InvoiceBase\n  client {\n    ...ClientMinimal\n  }\n}\n\nfragment FileMinimal on Files {\n  id\n  filename\n  size\n  mimetype\n  url\n}\n\nfragment FileBase on Files {\n  ...FileMinimal\n  bucket\n  objectKey\n  uploadedBy\n  category\n  fileType\n  isPublic\n  createdAt\n}\n\nfragment FileWithUploader on Files {\n  ...FileBase\n  uploadedByUser {\n    ...UserMinimal\n  }\n}\n\nfragment InvitationMinimal on UserInvitations {\n  id\n  email\n  invitedRole\n  invitationStatus\n}\n\nfragment InvitationBase on UserInvitations {\n  ...InvitationMinimal\n  invitedBy\n  expiresAt\n  acceptedAt\n  revokedAt\n  createdAt\n}\n\nfragment InvitationWithInviter on UserInvitations {\n  ...InvitationBase\n  invitedByUser {\n    ...UserMinimal\n  }\n}\n\nfragment ClientDashboardStats on Clients {\n  ...ClientMinimal\n  totalPayrolls: payrollsAggregate {\n    aggregate {\n      count\n    }\n  }\n  activePayrolls: payrollsAggregate(where: {status: {_eq: \"Active\"}}) {\n    aggregate {\n      count\n    }\n  }\n  totalEmployees: payrollsAggregate {\n    aggregate {\n      sum {\n        employeeCount\n      }\n    }\n  }\n}\n\nfragment UserActivityStats on Users {\n  ...UserMinimal\n  staffBillingItems(orderBy: {createdAt: DESC}, limit: 5) {\n    ...BillingItemMinimal\n  }\n  authoredNotes(orderBy: {createdAt: DESC}, limit: 3) {\n    ...NoteWithAuthor\n  }\n}"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "mutation LogAuditEvent($input: AuditAuditLogInsertInput!) {\n  insertAuditAuditLog(objects: [$input]) {\n    returning {\n      id\n      eventTime\n    }\n  }\n}\n\nmutation InsertFile($input: FilesInsertInput!) {\n  insertFiles(objects: [$input]) {\n    returning {\n      id\n      filename\n      bucket\n      objectKey\n      size\n      mimetype\n      url\n      clientId\n      payrollId\n      uploadedBy\n      category\n      isPublic\n      metadata\n      fileType\n      createdAt\n    }\n  }\n}\n\nmutation UpdateFileMetadata($id: uuid!, $updates: FilesSetInput!) {\n  updateFilesByPk(pkColumns: {id: $id}, _set: $updates) {\n    id\n    filename\n    bucket\n    objectKey\n    size\n    mimetype\n    url\n    clientId\n    payrollId\n    uploadedBy\n    category\n    isPublic\n    metadata\n    fileType\n    createdAt\n  }\n}\n\nmutation DeleteFile($id: uuid!) {\n  deleteFilesByPk(id: $id) {\n    id\n    filename\n    objectKey\n  }\n}\n\nmutation RefreshData {\n  __typename\n}"): (typeof documents)["mutation LogAuditEvent($input: AuditAuditLogInsertInput!) {\n  insertAuditAuditLog(objects: [$input]) {\n    returning {\n      id\n      eventTime\n    }\n  }\n}\n\nmutation InsertFile($input: FilesInsertInput!) {\n  insertFiles(objects: [$input]) {\n    returning {\n      id\n      filename\n      bucket\n      objectKey\n      size\n      mimetype\n      url\n      clientId\n      payrollId\n      uploadedBy\n      category\n      isPublic\n      metadata\n      fileType\n      createdAt\n    }\n  }\n}\n\nmutation UpdateFileMetadata($id: uuid!, $updates: FilesSetInput!) {\n  updateFilesByPk(pkColumns: {id: $id}, _set: $updates) {\n    id\n    filename\n    bucket\n    objectKey\n    size\n    mimetype\n    url\n    clientId\n    payrollId\n    uploadedBy\n    category\n    isPublic\n    metadata\n    fileType\n    createdAt\n  }\n}\n\nmutation DeleteFile($id: uuid!) {\n  deleteFilesByPk(id: $id) {\n    id\n    filename\n    objectKey\n  }\n}\n\nmutation RefreshData {\n  __typename\n}"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "query GetDashboardMetrics($userId: uuid!) {\n  clientsAggregate(where: {active: {_eq: true}}) {\n    aggregate {\n      count\n    }\n  }\n  activePayrollsAggregate: payrollsAggregate(\n    where: {supersededDate: {_isNull: true}, status: {_nin: [\"Completed\", \"Failed\"]}}\n  ) {\n    aggregate {\n      count\n    }\n  }\n  totalEmployeesAggregate: payrollsAggregate(\n    where: {supersededDate: {_isNull: true}}\n  ) {\n    aggregate {\n      sum {\n        employeeCount\n      }\n    }\n  }\n  upcomingPayrolls: payrolls(\n    where: {supersededDate: {_isNull: true}, status: {_nin: [\"Completed\", \"Failed\", \"Cancelled\"]}}\n    orderBy: {updatedAt: DESC}\n    limit: 5\n  ) {\n    ...PayrollMinimal\n    client {\n      ...ClientMinimal\n    }\n  }\n}\n\nquery GetDashboardStatsOptimized($limit: Int = 10) {\n  clientsAggregate {\n    aggregate {\n      count\n    }\n  }\n  totalPayrolls: payrollsAggregate(where: {supersededDate: {_isNull: true}}) {\n    aggregate {\n      count\n    }\n  }\n  activePayrolls: payrollsAggregate(\n    where: {supersededDate: {_isNull: true}, status: {_eq: \"Active\"}}\n  ) {\n    aggregate {\n      count\n    }\n  }\n  upcomingPayrolls: payrolls(\n    where: {supersededDate: {_isNull: true}, status: {_eq: \"Active\"}, payrollDates: {adjustedEftDate: {_gte: \"now()\"}}}\n    orderBy: {updatedAt: DESC}\n    limit: $limit\n  ) {\n    id\n    name\n    status\n    client {\n      id\n      name\n    }\n    nextEftDate: payrollDates(\n      where: {adjustedEftDate: {_gte: \"now()\"}}\n      orderBy: {adjustedEftDate: ASC}\n      limit: 1\n    ) {\n      originalEftDate\n      adjustedEftDate\n      processingDate\n    }\n  }\n}\n\nquery GetClientsDashboardStats {\n  activeClientsCount: clientsAggregate(where: {active: {_eq: true}}) {\n    aggregate {\n      count\n    }\n  }\n  totalPayrollsCount: payrollsAggregate(where: {supersededDate: {_isNull: true}}) {\n    aggregate {\n      count\n    }\n  }\n  totalEmployeesSum: payrollsAggregate(where: {supersededDate: {_isNull: true}}) {\n    aggregate {\n      sum {\n        employeeCount\n      }\n    }\n  }\n  clientsNeedingAttention: clients(\n    where: {active: {_eq: true}, _not: {payrolls: {supersededDate: {_isNull: true}}}}\n  ) {\n    ...ClientMinimal\n  }\n}\n\nquery GetCurrentUser($userId: uuid!) {\n  user: usersByPk(id: $userId) {\n    ...UserProfile\n  }\n}\n\nquery GetUsersForDropdown($role: user_role) {\n  users(\n    where: {isActive: {_eq: true}, role: {_eq: $role}}\n    orderBy: {computedName: ASC}\n  ) {\n    ...UserMinimal\n  }\n}\n\nquery GetSystemHealth {\n  databaseHealth: users(limit: 1) {\n    id\n  }\n  recentActivity: auditAuditLogAggregate(\n    where: {eventTime: {_gte: \"now() - interval '1 hour'\"}}\n  ) {\n    aggregate {\n      count\n    }\n  }\n}\n\nquery GlobalSearch($searchTerm: String!) {\n  clients(\n    where: {_or: [{name: {_ilike: $searchTerm}}, {contactEmail: {_ilike: $searchTerm}}]}\n    limit: 5\n  ) {\n    ...ClientMinimal\n  }\n  users(\n    where: {_or: [{computedName: {_ilike: $searchTerm}}, {firstName: {_ilike: $searchTerm}}, {lastName: {_ilike: $searchTerm}}, {email: {_ilike: $searchTerm}}]}\n    limit: 5\n  ) {\n    ...UserMinimal\n  }\n  payrolls(\n    where: {client: {name: {_ilike: $searchTerm}}, supersededDate: {_isNull: true}}\n    limit: 5\n  ) {\n    ...PayrollMinimal\n    client {\n      ...ClientMinimal\n    }\n  }\n}\n\nquery GetFileById($id: uuid!) {\n  filesByPk(id: $id) {\n    id\n    filename\n    bucket\n    objectKey\n    size\n    mimetype\n    url\n    clientId\n    payrollId\n    uploadedBy\n    category\n    isPublic\n    metadata\n    fileType\n    createdAt\n    client {\n      name\n    }\n    payroll {\n      name\n    }\n    uploadedBy\n  }\n}\n\nquery ListFiles($where: FilesBoolExp, $limit: Int, $offset: Int, $orderBy: [FilesOrderBy!]) {\n  files(where: $where, limit: $limit, offset: $offset, orderBy: $orderBy) {\n    id\n    filename\n    bucket\n    objectKey\n    size\n    mimetype\n    url\n    clientId\n    payrollId\n    uploadedBy\n    category\n    isPublic\n    metadata\n    fileType\n    createdAt\n    client {\n      name\n    }\n    payroll {\n      name\n    }\n    uploadedBy\n  }\n  filesAggregate(where: $where) {\n    aggregate {\n      count\n    }\n  }\n}"): (typeof documents)["query GetDashboardMetrics($userId: uuid!) {\n  clientsAggregate(where: {active: {_eq: true}}) {\n    aggregate {\n      count\n    }\n  }\n  activePayrollsAggregate: payrollsAggregate(\n    where: {supersededDate: {_isNull: true}, status: {_nin: [\"Completed\", \"Failed\"]}}\n  ) {\n    aggregate {\n      count\n    }\n  }\n  totalEmployeesAggregate: payrollsAggregate(\n    where: {supersededDate: {_isNull: true}}\n  ) {\n    aggregate {\n      sum {\n        employeeCount\n      }\n    }\n  }\n  upcomingPayrolls: payrolls(\n    where: {supersededDate: {_isNull: true}, status: {_nin: [\"Completed\", \"Failed\", \"Cancelled\"]}}\n    orderBy: {updatedAt: DESC}\n    limit: 5\n  ) {\n    ...PayrollMinimal\n    client {\n      ...ClientMinimal\n    }\n  }\n}\n\nquery GetDashboardStatsOptimized($limit: Int = 10) {\n  clientsAggregate {\n    aggregate {\n      count\n    }\n  }\n  totalPayrolls: payrollsAggregate(where: {supersededDate: {_isNull: true}}) {\n    aggregate {\n      count\n    }\n  }\n  activePayrolls: payrollsAggregate(\n    where: {supersededDate: {_isNull: true}, status: {_eq: \"Active\"}}\n  ) {\n    aggregate {\n      count\n    }\n  }\n  upcomingPayrolls: payrolls(\n    where: {supersededDate: {_isNull: true}, status: {_eq: \"Active\"}, payrollDates: {adjustedEftDate: {_gte: \"now()\"}}}\n    orderBy: {updatedAt: DESC}\n    limit: $limit\n  ) {\n    id\n    name\n    status\n    client {\n      id\n      name\n    }\n    nextEftDate: payrollDates(\n      where: {adjustedEftDate: {_gte: \"now()\"}}\n      orderBy: {adjustedEftDate: ASC}\n      limit: 1\n    ) {\n      originalEftDate\n      adjustedEftDate\n      processingDate\n    }\n  }\n}\n\nquery GetClientsDashboardStats {\n  activeClientsCount: clientsAggregate(where: {active: {_eq: true}}) {\n    aggregate {\n      count\n    }\n  }\n  totalPayrollsCount: payrollsAggregate(where: {supersededDate: {_isNull: true}}) {\n    aggregate {\n      count\n    }\n  }\n  totalEmployeesSum: payrollsAggregate(where: {supersededDate: {_isNull: true}}) {\n    aggregate {\n      sum {\n        employeeCount\n      }\n    }\n  }\n  clientsNeedingAttention: clients(\n    where: {active: {_eq: true}, _not: {payrolls: {supersededDate: {_isNull: true}}}}\n  ) {\n    ...ClientMinimal\n  }\n}\n\nquery GetCurrentUser($userId: uuid!) {\n  user: usersByPk(id: $userId) {\n    ...UserProfile\n  }\n}\n\nquery GetUsersForDropdown($role: user_role) {\n  users(\n    where: {isActive: {_eq: true}, role: {_eq: $role}}\n    orderBy: {computedName: ASC}\n  ) {\n    ...UserMinimal\n  }\n}\n\nquery GetSystemHealth {\n  databaseHealth: users(limit: 1) {\n    id\n  }\n  recentActivity: auditAuditLogAggregate(\n    where: {eventTime: {_gte: \"now() - interval '1 hour'\"}}\n  ) {\n    aggregate {\n      count\n    }\n  }\n}\n\nquery GlobalSearch($searchTerm: String!) {\n  clients(\n    where: {_or: [{name: {_ilike: $searchTerm}}, {contactEmail: {_ilike: $searchTerm}}]}\n    limit: 5\n  ) {\n    ...ClientMinimal\n  }\n  users(\n    where: {_or: [{computedName: {_ilike: $searchTerm}}, {firstName: {_ilike: $searchTerm}}, {lastName: {_ilike: $searchTerm}}, {email: {_ilike: $searchTerm}}]}\n    limit: 5\n  ) {\n    ...UserMinimal\n  }\n  payrolls(\n    where: {client: {name: {_ilike: $searchTerm}}, supersededDate: {_isNull: true}}\n    limit: 5\n  ) {\n    ...PayrollMinimal\n    client {\n      ...ClientMinimal\n    }\n  }\n}\n\nquery GetFileById($id: uuid!) {\n  filesByPk(id: $id) {\n    id\n    filename\n    bucket\n    objectKey\n    size\n    mimetype\n    url\n    clientId\n    payrollId\n    uploadedBy\n    category\n    isPublic\n    metadata\n    fileType\n    createdAt\n    client {\n      name\n    }\n    payroll {\n      name\n    }\n    uploadedBy\n  }\n}\n\nquery ListFiles($where: FilesBoolExp, $limit: Int, $offset: Int, $orderBy: [FilesOrderBy!]) {\n  files(where: $where, limit: $limit, offset: $offset, orderBy: $orderBy) {\n    id\n    filename\n    bucket\n    objectKey\n    size\n    mimetype\n    url\n    clientId\n    payrollId\n    uploadedBy\n    category\n    isPublic\n    metadata\n    fileType\n    createdAt\n    client {\n      name\n    }\n    payroll {\n      name\n    }\n    uploadedBy\n  }\n  filesAggregate(where: $where) {\n    aggregate {\n      count\n    }\n  }\n}"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "subscription RecentActivity($resourceTypes: [String!]) {\n  auditAuditLog(\n    where: {resourceType: {_in: $resourceTypes}, eventTime: {_gte: \"now() - interval '5 minutes'\"}}\n    orderBy: {eventTime: DESC}\n    limit: 20\n  ) {\n    ...AuditLogEntry\n  }\n}\n\nsubscription AuthenticationEvents($userId: uuid) {\n  auditAuthEvents(\n    where: {userId: {_eq: $userId}, eventTime: {_gte: \"now() - interval '10 minutes'\"}}\n    orderBy: {eventTime: DESC}\n  ) {\n    ...AuthEvent\n  }\n}\n\nsubscription SensitiveDataAccess($resourceTypes: [String!]!) {\n  auditDataAccessLog(\n    where: {resourceType: {_in: $resourceTypes}, accessedAt: {_gte: \"now() - interval '10 minutes'\"}}\n    orderBy: {accessedAt: DESC}\n  ) {\n    ...DataAccessLog\n  }\n}\n\nsubscription PermissionChangeStream {\n  auditPermissionChanges(orderBy: {changedAt: DESC}, limit: 10) {\n    ...PermissionChange\n  }\n}"): (typeof documents)["subscription RecentActivity($resourceTypes: [String!]) {\n  auditAuditLog(\n    where: {resourceType: {_in: $resourceTypes}, eventTime: {_gte: \"now() - interval '5 minutes'\"}}\n    orderBy: {eventTime: DESC}\n    limit: 20\n  ) {\n    ...AuditLogEntry\n  }\n}\n\nsubscription AuthenticationEvents($userId: uuid) {\n  auditAuthEvents(\n    where: {userId: {_eq: $userId}, eventTime: {_gte: \"now() - interval '10 minutes'\"}}\n    orderBy: {eventTime: DESC}\n  ) {\n    ...AuthEvent\n  }\n}\n\nsubscription SensitiveDataAccess($resourceTypes: [String!]!) {\n  auditDataAccessLog(\n    where: {resourceType: {_in: $resourceTypes}, accessedAt: {_gte: \"now() - interval '10 minutes'\"}}\n    orderBy: {accessedAt: DESC}\n  ) {\n    ...DataAccessLog\n  }\n}\n\nsubscription PermissionChangeStream {\n  auditPermissionChanges(orderBy: {changedAt: DESC}, limit: 10) {\n    ...PermissionChange\n  }\n}"];

export function gql(source: string) {
  return (documents as any)[source] ?? {};
}

export type DocumentType<TDocumentNode extends DocumentNode<any, any>> = TDocumentNode extends DocumentNode<  infer TType,  any>  ? TType  : never;