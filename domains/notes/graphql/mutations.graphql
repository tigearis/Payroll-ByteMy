# Notes Domain Mutations
# Security Classification: MEDIUM - Contains business communication data
# SOC2 Compliance: All mutations logged with audit trail

# Core CRUD operations
mutation CreateNote($object: NotesInsertInput!) {
  insertNotesOne(object: $object) {
    ...NoteDetailed
  }
}

mutation AddNote(
  $content: String!
  $entityType: String!
  $entityId: uuid!
  $userId: uuid!
  $isImportant: Boolean = false
) {
  insertNotesOne(
    object: {
      content: $content
      entityType: $entityType
      entityId: $entityId
      userId: $userId
      isImportant: $isImportant
    }
  ) {
    ...NoteDetailed
  }
}

mutation UpdateNote($id: uuid!, $set: NotesSetInput!) {
  updateNotesByPk(pkColumns: { id: $id }, _set: $set) {
    ...NoteDetailed
  }
}

mutation UpdateNoteContent(
  $id: uuid!
  $content: String
  $isImportant: Boolean
) {
  updateNotesByPk(
    pkColumns: { id: $id }
    _set: {
      content: $content
      isImportant: $isImportant
      updatedAt: "now()"
    }
  ) {
    ...NoteDetailed
  }
}

mutation DeleteNote($id: uuid!) {
  deleteNotesByPk(id: $id) {
    id
    content
    entityType
    entityId
  }
}

# Quick operations
mutation ToggleNoteImportance($id: uuid!, $isImportant: Boolean!) {
  updateNotesByPk(
    pkColumns: { id: $id }
    _set: { isImportant: $isImportant, updatedAt: "now()" }
  ) {
    ...NoteBasic
  }
}

mutation MarkNoteAsImportant($id: uuid!) {
  updateNotesByPk(
    pkColumns: { id: $id }
    _set: { isImportant: true, updatedAt: "now()" }
  ) {
    ...NoteBasic
  }
}

mutation UnmarkNoteAsImportant($id: uuid!) {
  updateNotesByPk(
    pkColumns: { id: $id }
    _set: { isImportant: false, updatedAt: "now()" }
  ) {
    ...NoteBasic
  }
}

# Entity-specific note operations
mutation AddPayrollNote(
  $payrollId: uuid!
  $content: String!
  $userId: uuid!
  $isImportant: Boolean = false
) {
  insertNotesOne(
    object: {
      content: $content
      entityType: "payroll"
      entityId: $payrollId
      userId: $userId
      isImportant: $isImportant
    }
  ) {
    ...PayrollNote
  }
}

mutation AddClientNote(
  $clientId: uuid!
  $content: String!
  $userId: uuid!
  $isImportant: Boolean = false
) {
  insertNotesOne(
    object: {
      content: $content
      entityType: "client"
      entityId: $clientId
      userId: $userId
      isImportant: $isImportant
    }
  ) {
    ...ClientNote
  }
}

mutation AddUserNote(
  $userId: uuid!
  $content: String!
  $authorUserId: uuid!
  $isImportant: Boolean = false
) {
  insertNotesOne(
    object: {
      content: $content
      entityType: "user"
      entityId: $userId
      userId: $authorUserId
      isImportant: $isImportant
    }
  ) {
    ...UserNote
  }
}

# Bulk operations
mutation BulkDeleteNotes($ids: [uuid!]!) {
  deleteNotes(where: { id: { _in: $ids } }) {
    returning {
      id
      content
      entityType
      entityId
    }
    affectedRows
  }
}

mutation BulkMarkNotesImportant($ids: [uuid!]!) {
  updateNotes(
    where: { id: { _in: $ids } }
    _set: { isImportant: true, updatedAt: "now()" }
  ) {
    returning {
      ...NoteBasic
    }
    affectedRows
  }
}

mutation BulkUnmarkNotesImportant($ids: [uuid!]!) {
  updateNotes(
    where: { id: { _in: $ids } }
    _set: { isImportant: false, updatedAt: "now()" }
  ) {
    returning {
      ...NoteBasic
    }
    affectedRows
  }
}

mutation BulkUpdateNotes($where: NotesBoolExp!, $set: NotesSetInput!) {
  updateNotes(where: $where, _set: $set) {
    returning {
      ...NoteBasic
    }
    affectedRows
  }
}

# Entity cleanup operations
mutation DeleteNotesByEntity($entityType: String!, $entityId: uuid!) {
  deleteNotes(
    where: {
      entityType: { _eq: $entityType }
      entityId: { _eq: $entityId }
    }
  ) {
    returning {
      id
      content
    }
    affectedRows
  }
}

mutation DeleteNotesByAuthor($authorUserId: uuid!) {
  deleteNotes(where: { userId: { _eq: $authorUserId } }) {
    returning {
      id
      content
      entityType
      entityId
    }
    affectedRows
  }
}

# Transfer operations (when users change or entities merge)
mutation TransferNotesToNewAuthor(
  $oldAuthorUserId: uuid!
  $newAuthorUserId: uuid!
) {
  updateNotes(
    where: { userId: { _eq: $oldAuthorUserId } }
    _set: { userId: $newAuthorUserId, updatedAt: "now()" }
  ) {
    returning {
      ...NoteBasic
    }
    affectedRows
  }
}

mutation TransferNotesToNewEntity(
  $oldEntityType: String!
  $oldEntityId: uuid!
  $newEntityType: String!
  $newEntityId: uuid!
) {
  updateNotes(
    where: {
      entityType: { _eq: $oldEntityType }
      entityId: { _eq: $oldEntityId }
    }
    _set: {
      entityType: $newEntityType
      entityId: $newEntityId
      updatedAt: "now()"
    }
  ) {
    returning {
      ...NoteBasic
    }
    affectedRows
  }
}

# Archive operations (soft delete alternative)
# Note: Archive functionality not available - no archived field in notes table
# Archive notes by deletion instead:

# mutation ArchiveNote($id: uuid!) {
#   updateNotesByPk(
#     pkColumns: { id: $id }
#     _set: { archived: true, updatedAt: "now()" }
#   ) {
#     ...NoteBasic
#   }
# }

# mutation UnarchiveNote($id: uuid!) {
#   updateNotesByPk(
#     pkColumns: { id: $id }
#     _set: { archived: false, updatedAt: "now()" }
#   ) {
#     ...NoteBasic
#   }
# }

# mutation BulkArchiveNotes($ids: [uuid!]!) {
#   updateNotes(
#     where: { id: { _in: $ids } }
#     _set: { archived: true, updatedAt: "now()" }
#   ) {
#     returning {
#       ...NoteBasic
#     }
#     affectedRows
#   }
# }

# Extracted from existing usage - matching notes-list.tsx patterns
mutation AddNoteExtracted(
  $content: String!
  $entityType: String!
  $entityId: uuid!
  $userId: uuid!
  $isImportant: Boolean = false
) {
  insertNotesOne(
    object: {
      content: $content
      entityType: $entityType
      entityId: $entityId
      userId: $userId
      isImportant: $isImportant
    }
  ) {
    ...NoteListItem
  }
}

mutation UpdateNoteExtracted(
  $id: uuid!
  $content: String
  $isImportant: Boolean
) {
  updateNotesByPk(
    pkColumns: { id: $id }
    _set: {
      content: $content
      isImportant: $isImportant
      updatedAt: "now()"
    }
  ) {
    ...NoteListItem
  }
}