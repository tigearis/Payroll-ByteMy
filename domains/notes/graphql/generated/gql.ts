/* eslint-disable */
import * as types from './graphql';
import type { TypedDocumentNode as DocumentNode } from '@graphql-typed-document-node/core';

/**
 * Map of all GraphQL operations in the project.
 *
 * This map has several performance disadvantages:
 * 1. It is not tree-shakeable, so it will include all operations in the project.
 * 2. It is not minifiable, so the string of a GraphQL query will be multiple times inside the bundle.
 * 3. It does not support dead code elimination, so it will add unused operations.
 *
 * Therefore it is highly recommended to use the babel or swc plugin for production.
 * Learn more about it here: https://the-guild.dev/graphql/codegen/plugins/presets/preset-client#reducing-bundle-size
 */
type Documents = {
    "fragment NoteBasicInfo on notes {\n  id\n  content\n  is_important\n  created_at\n  updated_at\n  entity_id\n  entity_type\n  user_id\n}\n\nfragment NoteWithUser on notes {\n  ...NoteBasicInfo\n  user {\n    id\n    name\n    email\n  }\n}\n\nfragment NoteForAudit on notes {\n  id\n  is_important\n  created_at\n  updated_at\n  entity_id\n  entity_type\n  user_id\n}": typeof types.NoteBasicInfoFragmentDoc,
    "mutation AddNote($entity_id: uuid!, $entity_type: String!, $content: String!, $user_id: uuid!, $isImportant: Boolean = false) {\n  insert_notes_one(object: {content: $content, is_important: $isImportant}) {\n    ...NoteWithUser\n  }\n}\n\nmutation UpdateNote($id: uuid!, $content: String!, $isImportant: Boolean) {\n  update_notes_by_pk(\n    pk_columns: {id: $id}\n    _set: {content: $content, is_important: $isImportant, updated_at: \"now()\"}\n  ) {\n    ...NoteWithUser\n  }\n}\n\nmutation UpdateNoteContent($id: uuid!, $content: String!) {\n  update_notes_by_pk(\n    pk_columns: {id: $id}\n    _set: {content: $content, updated_at: \"now()\"}\n  ) {\n    ...NoteBasicInfo\n  }\n}\n\nmutation DeleteNote($id: uuid!) {\n  delete_notes_by_pk(id: $id) {\n    id\n  }\n}\n\nmutation MarkNoteImportant($id: uuid!, $isImportant: Boolean!) {\n  update_notes_by_pk(\n    pk_columns: {id: $id}\n    _set: {is_important: $isImportant, updated_at: \"now()\"}\n  ) {\n    ...NoteBasicInfo\n  }\n}\n\nmutation BulkDeleteNotes($entity_id: uuid!, $entity_type: String!) {\n  delete_notes(\n    where: {entity_id: {_eq: $entity_id}, entity_type: {_eq: $entity_type}}\n  ) {\n    affected_rows\n    returning {\n      id\n    }\n  }\n}\n\nmutation UpdateNoteWithSetInput($id: uuid!, $input: notes_set_input!) {\n  update_notes_by_pk(pk_columns: {id: $id}, _set: $input) {\n    id\n    content\n  }\n}\n\nmutation AddNoteExtracted($entity_type: String!, $entity_id: uuid!, $content: String!) {\n  insert_notes_one(object: {content: $content, is_important: false}) {\n    id\n    content\n    is_important\n  }\n}\n\nmutation UpdateNoteExtracted($id: uuid!, $content: String!) {\n  update_notes_by_pk(\n    pk_columns: {id: $id}\n    _set: {content: $content, updated_at: \"now()\"}\n  ) {\n    id\n    content\n  }\n}": typeof types.AddNoteDocument,
    "query GetNotes($entity_id: uuid!, $entity_type: String!) {\n  notes(\n    where: {entity_id: {_eq: $entity_id}, entity_type: {_eq: $entity_type}}\n    order_by: {created_at: desc}\n  ) {\n    ...NoteWithUser\n  }\n}\n\nquery GetNotesBasic($entity_id: uuid!, $entity_type: String!) {\n  notes(\n    where: {entity_id: {_eq: $entity_id}, entity_type: {_eq: $entity_type}}\n    order_by: {created_at: desc}\n  ) {\n    ...NoteBasicInfo\n  }\n}\n\nquery GetImportantNotes($entity_id: uuid!, $entity_type: String!) {\n  notes(where: {is_important: {_eq: true}}, order_by: {created_at: desc}) {\n    ...NoteWithUser\n  }\n}\n\nquery GetNoteById($id: uuid!) {\n  notes_by_pk(id: $id) {\n    ...NoteWithUser\n  }\n}\n\nquery GetNotesForAudit($entity_id: uuid!, $entity_type: String!) {\n  notes(\n    where: {entity_id: {_eq: $entity_id}, entity_type: {_eq: $entity_type}}\n    order_by: {created_at: desc}\n  ) {\n    ...NoteForAudit\n  }\n}\n\nquery GetNotesSimple {\n  notes {\n    id\n    content\n  }\n}\n\nquery GetNotesExtracted($entity_type: String!, $entity_id: uuid!) {\n  notes(where: {}, order_by: {created_at: desc}) {\n    id\n    content\n    is_important\n  }\n}": typeof types.GetNotesDocument,
    "subscription NotesUpdates($entity_id: uuid!, $entity_type: String!) {\n  notes(\n    where: {entity_id: {_eq: $entity_id}, entity_type: {_eq: $entity_type}}\n    order_by: {created_at: desc}\n  ) {\n    ...NoteWithUser\n  }\n}\n\nsubscription ImportantNotesUpdates($entity_id: uuid!, $entity_type: String!) {\n  notes(where: {is_important: {_eq: true}}, order_by: {created_at: desc}) {\n    ...NoteWithUser\n  }\n}\n\nsubscription NoteUpdates($id: uuid!) {\n  notes_by_pk(id: $id) {\n    ...NoteWithUser\n  }\n}": typeof types.NotesUpdatesDocument,
    "fragment UserCore on users {\n  id\n  name\n  email\n  username\n  role\n  isActive\n  isStaff\n  clerkUserId\n  createdAt\n  updatedAt\n}\n\nfragment UserBasic on users {\n  id\n  name\n  email\n  role\n  isActive\n}\n\nfragment UserWithManager on users {\n  ...UserCore\n  managerId\n  manager {\n    ...UserBasic\n  }\n}\n\nfragment RoleCore on roles {\n  id\n  name\n  description\n  displayName\n  priority\n  isSystemRole\n  createdAt\n}\n\nfragment PermissionCore on permissions {\n  id\n  action\n  description\n  resourceId\n  createdAt\n  updatedAt\n}\n\nfragment PermissionWithResource on permissions {\n  ...PermissionCore\n  resource {\n    id\n    name\n    description\n  }\n}\n\nfragment ClientCore on clients {\n  id\n  name\n  contactEmail\n  contactPerson\n  contactPhone\n  active\n  createdAt\n  updatedAt\n}\n\nfragment ClientBasic on clients {\n  id\n  name\n  active\n}\n\nfragment PayrollCore on payrolls {\n  id\n  name\n  status\n  clientId\n  primaryConsultantUserId\n  managerUserId\n  createdAt\n  updatedAt\n}\n\nfragment PayrollBasic on payrolls {\n  id\n  name\n  status\n  clientId\n}\n\nfragment ResourceCore on resources {\n  id\n  name\n  displayName\n  description\n  createdAt\n  updatedAt\n}\n\nfragment UserRoleCore on user_roles {\n  id\n  userId\n  roleId\n  createdAt\n  updatedAt\n}\n\nfragment RolePermissionCore on role_permissions {\n  id\n  roleId\n  permissionId\n  conditions\n  createdAt\n  updatedAt\n}\n\nfragment AuditFields on audit_audit_log {\n  id\n  eventTime\n  action\n  resourceType\n  resourceId\n  userId\n  ipAddress\n  userAgent\n  success\n  user_email\n  user_role\n}": typeof types.UserCoreFragmentDoc,
};
const documents: Documents = {
    "fragment NoteBasicInfo on notes {\n  id\n  content\n  is_important\n  created_at\n  updated_at\n  entity_id\n  entity_type\n  user_id\n}\n\nfragment NoteWithUser on notes {\n  ...NoteBasicInfo\n  user {\n    id\n    name\n    email\n  }\n}\n\nfragment NoteForAudit on notes {\n  id\n  is_important\n  created_at\n  updated_at\n  entity_id\n  entity_type\n  user_id\n}": types.NoteBasicInfoFragmentDoc,
    "mutation AddNote($entity_id: uuid!, $entity_type: String!, $content: String!, $user_id: uuid!, $isImportant: Boolean = false) {\n  insert_notes_one(object: {content: $content, is_important: $isImportant}) {\n    ...NoteWithUser\n  }\n}\n\nmutation UpdateNote($id: uuid!, $content: String!, $isImportant: Boolean) {\n  update_notes_by_pk(\n    pk_columns: {id: $id}\n    _set: {content: $content, is_important: $isImportant, updated_at: \"now()\"}\n  ) {\n    ...NoteWithUser\n  }\n}\n\nmutation UpdateNoteContent($id: uuid!, $content: String!) {\n  update_notes_by_pk(\n    pk_columns: {id: $id}\n    _set: {content: $content, updated_at: \"now()\"}\n  ) {\n    ...NoteBasicInfo\n  }\n}\n\nmutation DeleteNote($id: uuid!) {\n  delete_notes_by_pk(id: $id) {\n    id\n  }\n}\n\nmutation MarkNoteImportant($id: uuid!, $isImportant: Boolean!) {\n  update_notes_by_pk(\n    pk_columns: {id: $id}\n    _set: {is_important: $isImportant, updated_at: \"now()\"}\n  ) {\n    ...NoteBasicInfo\n  }\n}\n\nmutation BulkDeleteNotes($entity_id: uuid!, $entity_type: String!) {\n  delete_notes(\n    where: {entity_id: {_eq: $entity_id}, entity_type: {_eq: $entity_type}}\n  ) {\n    affected_rows\n    returning {\n      id\n    }\n  }\n}\n\nmutation UpdateNoteWithSetInput($id: uuid!, $input: notes_set_input!) {\n  update_notes_by_pk(pk_columns: {id: $id}, _set: $input) {\n    id\n    content\n  }\n}\n\nmutation AddNoteExtracted($entity_type: String!, $entity_id: uuid!, $content: String!) {\n  insert_notes_one(object: {content: $content, is_important: false}) {\n    id\n    content\n    is_important\n  }\n}\n\nmutation UpdateNoteExtracted($id: uuid!, $content: String!) {\n  update_notes_by_pk(\n    pk_columns: {id: $id}\n    _set: {content: $content, updated_at: \"now()\"}\n  ) {\n    id\n    content\n  }\n}": types.AddNoteDocument,
    "query GetNotes($entity_id: uuid!, $entity_type: String!) {\n  notes(\n    where: {entity_id: {_eq: $entity_id}, entity_type: {_eq: $entity_type}}\n    order_by: {created_at: desc}\n  ) {\n    ...NoteWithUser\n  }\n}\n\nquery GetNotesBasic($entity_id: uuid!, $entity_type: String!) {\n  notes(\n    where: {entity_id: {_eq: $entity_id}, entity_type: {_eq: $entity_type}}\n    order_by: {created_at: desc}\n  ) {\n    ...NoteBasicInfo\n  }\n}\n\nquery GetImportantNotes($entity_id: uuid!, $entity_type: String!) {\n  notes(where: {is_important: {_eq: true}}, order_by: {created_at: desc}) {\n    ...NoteWithUser\n  }\n}\n\nquery GetNoteById($id: uuid!) {\n  notes_by_pk(id: $id) {\n    ...NoteWithUser\n  }\n}\n\nquery GetNotesForAudit($entity_id: uuid!, $entity_type: String!) {\n  notes(\n    where: {entity_id: {_eq: $entity_id}, entity_type: {_eq: $entity_type}}\n    order_by: {created_at: desc}\n  ) {\n    ...NoteForAudit\n  }\n}\n\nquery GetNotesSimple {\n  notes {\n    id\n    content\n  }\n}\n\nquery GetNotesExtracted($entity_type: String!, $entity_id: uuid!) {\n  notes(where: {}, order_by: {created_at: desc}) {\n    id\n    content\n    is_important\n  }\n}": types.GetNotesDocument,
    "subscription NotesUpdates($entity_id: uuid!, $entity_type: String!) {\n  notes(\n    where: {entity_id: {_eq: $entity_id}, entity_type: {_eq: $entity_type}}\n    order_by: {created_at: desc}\n  ) {\n    ...NoteWithUser\n  }\n}\n\nsubscription ImportantNotesUpdates($entity_id: uuid!, $entity_type: String!) {\n  notes(where: {is_important: {_eq: true}}, order_by: {created_at: desc}) {\n    ...NoteWithUser\n  }\n}\n\nsubscription NoteUpdates($id: uuid!) {\n  notes_by_pk(id: $id) {\n    ...NoteWithUser\n  }\n}": types.NotesUpdatesDocument,
    "fragment UserCore on users {\n  id\n  name\n  email\n  username\n  role\n  isActive\n  isStaff\n  clerkUserId\n  createdAt\n  updatedAt\n}\n\nfragment UserBasic on users {\n  id\n  name\n  email\n  role\n  isActive\n}\n\nfragment UserWithManager on users {\n  ...UserCore\n  managerId\n  manager {\n    ...UserBasic\n  }\n}\n\nfragment RoleCore on roles {\n  id\n  name\n  description\n  displayName\n  priority\n  isSystemRole\n  createdAt\n}\n\nfragment PermissionCore on permissions {\n  id\n  action\n  description\n  resourceId\n  createdAt\n  updatedAt\n}\n\nfragment PermissionWithResource on permissions {\n  ...PermissionCore\n  resource {\n    id\n    name\n    description\n  }\n}\n\nfragment ClientCore on clients {\n  id\n  name\n  contactEmail\n  contactPerson\n  contactPhone\n  active\n  createdAt\n  updatedAt\n}\n\nfragment ClientBasic on clients {\n  id\n  name\n  active\n}\n\nfragment PayrollCore on payrolls {\n  id\n  name\n  status\n  clientId\n  primaryConsultantUserId\n  managerUserId\n  createdAt\n  updatedAt\n}\n\nfragment PayrollBasic on payrolls {\n  id\n  name\n  status\n  clientId\n}\n\nfragment ResourceCore on resources {\n  id\n  name\n  displayName\n  description\n  createdAt\n  updatedAt\n}\n\nfragment UserRoleCore on user_roles {\n  id\n  userId\n  roleId\n  createdAt\n  updatedAt\n}\n\nfragment RolePermissionCore on role_permissions {\n  id\n  roleId\n  permissionId\n  conditions\n  createdAt\n  updatedAt\n}\n\nfragment AuditFields on audit_audit_log {\n  id\n  eventTime\n  action\n  resourceType\n  resourceId\n  userId\n  ipAddress\n  userAgent\n  success\n  user_email\n  user_role\n}": types.UserCoreFragmentDoc,
};

/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 *
 *
 * @example
 * ```ts
 * const query = graphql(`query GetUser($id: ID!) { user(id: $id) { name } }`);
 * ```
 *
 * The query argument is unknown!
 * Please regenerate the types.
 */
export function graphql(source: string): unknown;

/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "fragment NoteBasicInfo on notes {\n  id\n  content\n  is_important\n  created_at\n  updated_at\n  entity_id\n  entity_type\n  user_id\n}\n\nfragment NoteWithUser on notes {\n  ...NoteBasicInfo\n  user {\n    id\n    name\n    email\n  }\n}\n\nfragment NoteForAudit on notes {\n  id\n  is_important\n  created_at\n  updated_at\n  entity_id\n  entity_type\n  user_id\n}"): (typeof documents)["fragment NoteBasicInfo on notes {\n  id\n  content\n  is_important\n  created_at\n  updated_at\n  entity_id\n  entity_type\n  user_id\n}\n\nfragment NoteWithUser on notes {\n  ...NoteBasicInfo\n  user {\n    id\n    name\n    email\n  }\n}\n\nfragment NoteForAudit on notes {\n  id\n  is_important\n  created_at\n  updated_at\n  entity_id\n  entity_type\n  user_id\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "mutation AddNote($entity_id: uuid!, $entity_type: String!, $content: String!, $user_id: uuid!, $isImportant: Boolean = false) {\n  insert_notes_one(object: {content: $content, is_important: $isImportant}) {\n    ...NoteWithUser\n  }\n}\n\nmutation UpdateNote($id: uuid!, $content: String!, $isImportant: Boolean) {\n  update_notes_by_pk(\n    pk_columns: {id: $id}\n    _set: {content: $content, is_important: $isImportant, updated_at: \"now()\"}\n  ) {\n    ...NoteWithUser\n  }\n}\n\nmutation UpdateNoteContent($id: uuid!, $content: String!) {\n  update_notes_by_pk(\n    pk_columns: {id: $id}\n    _set: {content: $content, updated_at: \"now()\"}\n  ) {\n    ...NoteBasicInfo\n  }\n}\n\nmutation DeleteNote($id: uuid!) {\n  delete_notes_by_pk(id: $id) {\n    id\n  }\n}\n\nmutation MarkNoteImportant($id: uuid!, $isImportant: Boolean!) {\n  update_notes_by_pk(\n    pk_columns: {id: $id}\n    _set: {is_important: $isImportant, updated_at: \"now()\"}\n  ) {\n    ...NoteBasicInfo\n  }\n}\n\nmutation BulkDeleteNotes($entity_id: uuid!, $entity_type: String!) {\n  delete_notes(\n    where: {entity_id: {_eq: $entity_id}, entity_type: {_eq: $entity_type}}\n  ) {\n    affected_rows\n    returning {\n      id\n    }\n  }\n}\n\nmutation UpdateNoteWithSetInput($id: uuid!, $input: notes_set_input!) {\n  update_notes_by_pk(pk_columns: {id: $id}, _set: $input) {\n    id\n    content\n  }\n}\n\nmutation AddNoteExtracted($entity_type: String!, $entity_id: uuid!, $content: String!) {\n  insert_notes_one(object: {content: $content, is_important: false}) {\n    id\n    content\n    is_important\n  }\n}\n\nmutation UpdateNoteExtracted($id: uuid!, $content: String!) {\n  update_notes_by_pk(\n    pk_columns: {id: $id}\n    _set: {content: $content, updated_at: \"now()\"}\n  ) {\n    id\n    content\n  }\n}"): (typeof documents)["mutation AddNote($entity_id: uuid!, $entity_type: String!, $content: String!, $user_id: uuid!, $isImportant: Boolean = false) {\n  insert_notes_one(object: {content: $content, is_important: $isImportant}) {\n    ...NoteWithUser\n  }\n}\n\nmutation UpdateNote($id: uuid!, $content: String!, $isImportant: Boolean) {\n  update_notes_by_pk(\n    pk_columns: {id: $id}\n    _set: {content: $content, is_important: $isImportant, updated_at: \"now()\"}\n  ) {\n    ...NoteWithUser\n  }\n}\n\nmutation UpdateNoteContent($id: uuid!, $content: String!) {\n  update_notes_by_pk(\n    pk_columns: {id: $id}\n    _set: {content: $content, updated_at: \"now()\"}\n  ) {\n    ...NoteBasicInfo\n  }\n}\n\nmutation DeleteNote($id: uuid!) {\n  delete_notes_by_pk(id: $id) {\n    id\n  }\n}\n\nmutation MarkNoteImportant($id: uuid!, $isImportant: Boolean!) {\n  update_notes_by_pk(\n    pk_columns: {id: $id}\n    _set: {is_important: $isImportant, updated_at: \"now()\"}\n  ) {\n    ...NoteBasicInfo\n  }\n}\n\nmutation BulkDeleteNotes($entity_id: uuid!, $entity_type: String!) {\n  delete_notes(\n    where: {entity_id: {_eq: $entity_id}, entity_type: {_eq: $entity_type}}\n  ) {\n    affected_rows\n    returning {\n      id\n    }\n  }\n}\n\nmutation UpdateNoteWithSetInput($id: uuid!, $input: notes_set_input!) {\n  update_notes_by_pk(pk_columns: {id: $id}, _set: $input) {\n    id\n    content\n  }\n}\n\nmutation AddNoteExtracted($entity_type: String!, $entity_id: uuid!, $content: String!) {\n  insert_notes_one(object: {content: $content, is_important: false}) {\n    id\n    content\n    is_important\n  }\n}\n\nmutation UpdateNoteExtracted($id: uuid!, $content: String!) {\n  update_notes_by_pk(\n    pk_columns: {id: $id}\n    _set: {content: $content, updated_at: \"now()\"}\n  ) {\n    id\n    content\n  }\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "query GetNotes($entity_id: uuid!, $entity_type: String!) {\n  notes(\n    where: {entity_id: {_eq: $entity_id}, entity_type: {_eq: $entity_type}}\n    order_by: {created_at: desc}\n  ) {\n    ...NoteWithUser\n  }\n}\n\nquery GetNotesBasic($entity_id: uuid!, $entity_type: String!) {\n  notes(\n    where: {entity_id: {_eq: $entity_id}, entity_type: {_eq: $entity_type}}\n    order_by: {created_at: desc}\n  ) {\n    ...NoteBasicInfo\n  }\n}\n\nquery GetImportantNotes($entity_id: uuid!, $entity_type: String!) {\n  notes(where: {is_important: {_eq: true}}, order_by: {created_at: desc}) {\n    ...NoteWithUser\n  }\n}\n\nquery GetNoteById($id: uuid!) {\n  notes_by_pk(id: $id) {\n    ...NoteWithUser\n  }\n}\n\nquery GetNotesForAudit($entity_id: uuid!, $entity_type: String!) {\n  notes(\n    where: {entity_id: {_eq: $entity_id}, entity_type: {_eq: $entity_type}}\n    order_by: {created_at: desc}\n  ) {\n    ...NoteForAudit\n  }\n}\n\nquery GetNotesSimple {\n  notes {\n    id\n    content\n  }\n}\n\nquery GetNotesExtracted($entity_type: String!, $entity_id: uuid!) {\n  notes(where: {}, order_by: {created_at: desc}) {\n    id\n    content\n    is_important\n  }\n}"): (typeof documents)["query GetNotes($entity_id: uuid!, $entity_type: String!) {\n  notes(\n    where: {entity_id: {_eq: $entity_id}, entity_type: {_eq: $entity_type}}\n    order_by: {created_at: desc}\n  ) {\n    ...NoteWithUser\n  }\n}\n\nquery GetNotesBasic($entity_id: uuid!, $entity_type: String!) {\n  notes(\n    where: {entity_id: {_eq: $entity_id}, entity_type: {_eq: $entity_type}}\n    order_by: {created_at: desc}\n  ) {\n    ...NoteBasicInfo\n  }\n}\n\nquery GetImportantNotes($entity_id: uuid!, $entity_type: String!) {\n  notes(where: {is_important: {_eq: true}}, order_by: {created_at: desc}) {\n    ...NoteWithUser\n  }\n}\n\nquery GetNoteById($id: uuid!) {\n  notes_by_pk(id: $id) {\n    ...NoteWithUser\n  }\n}\n\nquery GetNotesForAudit($entity_id: uuid!, $entity_type: String!) {\n  notes(\n    where: {entity_id: {_eq: $entity_id}, entity_type: {_eq: $entity_type}}\n    order_by: {created_at: desc}\n  ) {\n    ...NoteForAudit\n  }\n}\n\nquery GetNotesSimple {\n  notes {\n    id\n    content\n  }\n}\n\nquery GetNotesExtracted($entity_type: String!, $entity_id: uuid!) {\n  notes(where: {}, order_by: {created_at: desc}) {\n    id\n    content\n    is_important\n  }\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "subscription NotesUpdates($entity_id: uuid!, $entity_type: String!) {\n  notes(\n    where: {entity_id: {_eq: $entity_id}, entity_type: {_eq: $entity_type}}\n    order_by: {created_at: desc}\n  ) {\n    ...NoteWithUser\n  }\n}\n\nsubscription ImportantNotesUpdates($entity_id: uuid!, $entity_type: String!) {\n  notes(where: {is_important: {_eq: true}}, order_by: {created_at: desc}) {\n    ...NoteWithUser\n  }\n}\n\nsubscription NoteUpdates($id: uuid!) {\n  notes_by_pk(id: $id) {\n    ...NoteWithUser\n  }\n}"): (typeof documents)["subscription NotesUpdates($entity_id: uuid!, $entity_type: String!) {\n  notes(\n    where: {entity_id: {_eq: $entity_id}, entity_type: {_eq: $entity_type}}\n    order_by: {created_at: desc}\n  ) {\n    ...NoteWithUser\n  }\n}\n\nsubscription ImportantNotesUpdates($entity_id: uuid!, $entity_type: String!) {\n  notes(where: {is_important: {_eq: true}}, order_by: {created_at: desc}) {\n    ...NoteWithUser\n  }\n}\n\nsubscription NoteUpdates($id: uuid!) {\n  notes_by_pk(id: $id) {\n    ...NoteWithUser\n  }\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "fragment UserCore on users {\n  id\n  name\n  email\n  username\n  role\n  isActive\n  isStaff\n  clerkUserId\n  createdAt\n  updatedAt\n}\n\nfragment UserBasic on users {\n  id\n  name\n  email\n  role\n  isActive\n}\n\nfragment UserWithManager on users {\n  ...UserCore\n  managerId\n  manager {\n    ...UserBasic\n  }\n}\n\nfragment RoleCore on roles {\n  id\n  name\n  description\n  displayName\n  priority\n  isSystemRole\n  createdAt\n}\n\nfragment PermissionCore on permissions {\n  id\n  action\n  description\n  resourceId\n  createdAt\n  updatedAt\n}\n\nfragment PermissionWithResource on permissions {\n  ...PermissionCore\n  resource {\n    id\n    name\n    description\n  }\n}\n\nfragment ClientCore on clients {\n  id\n  name\n  contactEmail\n  contactPerson\n  contactPhone\n  active\n  createdAt\n  updatedAt\n}\n\nfragment ClientBasic on clients {\n  id\n  name\n  active\n}\n\nfragment PayrollCore on payrolls {\n  id\n  name\n  status\n  clientId\n  primaryConsultantUserId\n  managerUserId\n  createdAt\n  updatedAt\n}\n\nfragment PayrollBasic on payrolls {\n  id\n  name\n  status\n  clientId\n}\n\nfragment ResourceCore on resources {\n  id\n  name\n  displayName\n  description\n  createdAt\n  updatedAt\n}\n\nfragment UserRoleCore on user_roles {\n  id\n  userId\n  roleId\n  createdAt\n  updatedAt\n}\n\nfragment RolePermissionCore on role_permissions {\n  id\n  roleId\n  permissionId\n  conditions\n  createdAt\n  updatedAt\n}\n\nfragment AuditFields on audit_audit_log {\n  id\n  eventTime\n  action\n  resourceType\n  resourceId\n  userId\n  ipAddress\n  userAgent\n  success\n  user_email\n  user_role\n}"): (typeof documents)["fragment UserCore on users {\n  id\n  name\n  email\n  username\n  role\n  isActive\n  isStaff\n  clerkUserId\n  createdAt\n  updatedAt\n}\n\nfragment UserBasic on users {\n  id\n  name\n  email\n  role\n  isActive\n}\n\nfragment UserWithManager on users {\n  ...UserCore\n  managerId\n  manager {\n    ...UserBasic\n  }\n}\n\nfragment RoleCore on roles {\n  id\n  name\n  description\n  displayName\n  priority\n  isSystemRole\n  createdAt\n}\n\nfragment PermissionCore on permissions {\n  id\n  action\n  description\n  resourceId\n  createdAt\n  updatedAt\n}\n\nfragment PermissionWithResource on permissions {\n  ...PermissionCore\n  resource {\n    id\n    name\n    description\n  }\n}\n\nfragment ClientCore on clients {\n  id\n  name\n  contactEmail\n  contactPerson\n  contactPhone\n  active\n  createdAt\n  updatedAt\n}\n\nfragment ClientBasic on clients {\n  id\n  name\n  active\n}\n\nfragment PayrollCore on payrolls {\n  id\n  name\n  status\n  clientId\n  primaryConsultantUserId\n  managerUserId\n  createdAt\n  updatedAt\n}\n\nfragment PayrollBasic on payrolls {\n  id\n  name\n  status\n  clientId\n}\n\nfragment ResourceCore on resources {\n  id\n  name\n  displayName\n  description\n  createdAt\n  updatedAt\n}\n\nfragment UserRoleCore on user_roles {\n  id\n  userId\n  roleId\n  createdAt\n  updatedAt\n}\n\nfragment RolePermissionCore on role_permissions {\n  id\n  roleId\n  permissionId\n  conditions\n  createdAt\n  updatedAt\n}\n\nfragment AuditFields on audit_audit_log {\n  id\n  eventTime\n  action\n  resourceType\n  resourceId\n  userId\n  ipAddress\n  userAgent\n  success\n  user_email\n  user_role\n}"];

export function graphql(source: string) {
  return (documents as any)[source] ?? {};
}

export type DocumentType<TDocumentNode extends DocumentNode<any, any>> = TDocumentNode extends DocumentNode<  infer TType,  any>  ? TType  : never;