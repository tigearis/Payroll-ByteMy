/* eslint-disable */
import * as types from './graphql';
import { TypedDocumentNode as DocumentNode } from '@graphql-typed-document-node/core';

/**
 * Map of all GraphQL operations in the project.
 *
 * This map has several performance disadvantages:
 * 1. It is not tree-shakeable, so it will include all operations in the project.
 * 2. It is not minifiable, so the string of a GraphQL query will be multiple times inside the bundle.
 * 3. It does not support dead code elimination, so it will add unused operations.
 *
 * Therefore it is highly recommended to use the babel or swc plugin for production.
 * Learn more about it here: https://the-guild.dev/graphql/codegen/plugins/presets/preset-client#reducing-bundle-size
 */
type Documents = {
    "fragment NoteCore on notes {\n  id\n  content\n  isImportant\n  createdAt\n  updatedAt\n  userId\n  entityType\n  entityId\n}\n\nfragment NoteBasic on notes {\n  ...NoteCore\n  authorUser {\n    id\n    firstName\n    lastName\n    computedName\n    email\n    role\n  }\n}\n\nfragment NoteDetailed on notes {\n  ...NoteBasic\n}\n\nfragment NoteWithEntity on notes {\n  ...NoteBasic\n}\n\nfragment NoteSummary on notes {\n  id\n  isImportant\n  createdAt\n  entityType\n  entityId\n  userId\n}\n\nfragment NoteListItem on notes {\n  ...NoteSummary\n  content\n  updatedAt\n  authorUser {\n    id\n    firstName\n    lastName\n    computedName\n    role\n  }\n}\n\nfragment NoteTableRow on notes {\n  ...NoteListItem\n}\n\nfragment NoteMinimal on notes {\n  id\n  isImportant\n  createdAt\n  userId\n}\n\nfragment NoteForAudit on notes {\n  id\n  isImportant\n  createdAt\n  updatedAt\n  userId\n  entityType\n  entityId\n}\n\nfragment NoteCard on notes {\n  ...NoteSummary\n  content\n  authorUser {\n    id\n    firstName\n    lastName\n    computedName\n    image\n  }\n}\n\nfragment NoteDashboard on notes {\n  ...NoteSummary\n  authorUser {\n    id\n    firstName\n    lastName\n    computedName\n  }\n}\n\nfragment PayrollNote on notes {\n  ...NoteBasic\n}\n\nfragment ClientNote on notes {\n  ...NoteBasic\n}\n\nfragment UserNote on notes {\n  ...NoteBasic\n}\n\nfragment ImportantNote on notes {\n  ...NoteListItem\n}\n\nfragment RecentNote on notes {\n  ...NoteCard\n}": typeof types.NoteCoreFragmentDoc,
    "mutation CreateNote($object: notesInsertInput!) {\n  insertNote(object: $object) {\n    ...NoteDetailed\n  }\n}\n\nmutation AddNote($content: String!, $entityType: String!, $entityId: uuid!, $userId: uuid!, $isImportant: Boolean = false) {\n  insertNote(\n    object: {content: $content, entityType: $entityType, entityId: $entityId, userId: $userId, isImportant: $isImportant}\n  ) {\n    ...NoteDetailed\n  }\n}\n\nmutation UpdateNote($id: uuid!, $set: notesSetInput!) {\n  updateNoteById(pkColumns: {id: $id}, _set: $set) {\n    ...NoteDetailed\n  }\n}\n\nmutation UpdateNoteContent($id: uuid!, $content: String, $isImportant: Boolean) {\n  updateNoteById(\n    pkColumns: {id: $id}\n    _set: {content: $content, isImportant: $isImportant, updatedAt: \"now()\"}\n  ) {\n    ...NoteDetailed\n  }\n}\n\nmutation DeleteNote($id: uuid!) {\n  deleteNoteById(id: $id) {\n    id\n    content\n    entityType\n    entityId\n  }\n}\n\nmutation ToggleNoteImportance($id: uuid!, $isImportant: Boolean!) {\n  updateNoteById(\n    pkColumns: {id: $id}\n    _set: {isImportant: $isImportant, updatedAt: \"now()\"}\n  ) {\n    ...NoteBasic\n  }\n}\n\nmutation MarkNoteAsImportant($id: uuid!) {\n  updateNoteById(\n    pkColumns: {id: $id}\n    _set: {isImportant: true, updatedAt: \"now()\"}\n  ) {\n    ...NoteBasic\n  }\n}\n\nmutation UnmarkNoteAsImportant($id: uuid!) {\n  updateNoteById(\n    pkColumns: {id: $id}\n    _set: {isImportant: false, updatedAt: \"now()\"}\n  ) {\n    ...NoteBasic\n  }\n}\n\nmutation AddPayrollNote($payrollId: uuid!, $content: String!, $userId: uuid!, $isImportant: Boolean = false) {\n  insertNote(\n    object: {content: $content, entityType: \"payroll\", entityId: $payrollId, userId: $userId, isImportant: $isImportant}\n  ) {\n    ...PayrollNote\n  }\n}\n\nmutation AddClientNote($clientId: uuid!, $content: String!, $userId: uuid!, $isImportant: Boolean = false) {\n  insertNote(\n    object: {content: $content, entityType: \"client\", entityId: $clientId, userId: $userId, isImportant: $isImportant}\n  ) {\n    ...ClientNote\n  }\n}\n\nmutation AddUserNote($userId: uuid!, $content: String!, $authorUserId: uuid!, $isImportant: Boolean = false) {\n  insertNote(\n    object: {content: $content, entityType: \"user\", entityId: $userId, userId: $authorUserId, isImportant: $isImportant}\n  ) {\n    ...UserNote\n  }\n}\n\nmutation BulkDeleteNotes($ids: [uuid!]!) {\n  bulkDeleteNotes(where: {id: {_in: $ids}}) {\n    returning {\n      id\n      content\n      entityType\n      entityId\n    }\n    affectedRows\n  }\n}\n\nmutation BulkMarkNotesImportant($ids: [uuid!]!) {\n  bulkUpdateNotes(\n    where: {id: {_in: $ids}}\n    _set: {isImportant: true, updatedAt: \"now()\"}\n  ) {\n    returning {\n      ...NoteBasic\n    }\n    affectedRows\n  }\n}\n\nmutation BulkUnmarkNotesImportant($ids: [uuid!]!) {\n  bulkUpdateNotes(\n    where: {id: {_in: $ids}}\n    _set: {isImportant: false, updatedAt: \"now()\"}\n  ) {\n    returning {\n      ...NoteBasic\n    }\n    affectedRows\n  }\n}\n\nmutation BulkUpdateNotes($where: notesBoolExp!, $set: notesSetInput!) {\n  bulkUpdateNotes(where: $where, _set: $set) {\n    returning {\n      ...NoteBasic\n    }\n    affectedRows\n  }\n}\n\nmutation DeleteNotesByEntity($entityType: String!, $entityId: uuid!) {\n  bulkDeleteNotes(\n    where: {entityType: {_eq: $entityType}, entityId: {_eq: $entityId}}\n  ) {\n    returning {\n      id\n      content\n    }\n    affectedRows\n  }\n}\n\nmutation DeleteNotesByAuthor($authorUserId: uuid!) {\n  bulkDeleteNotes(where: {userId: {_eq: $authorUserId}}) {\n    returning {\n      id\n      content\n      entityType\n      entityId\n    }\n    affectedRows\n  }\n}\n\nmutation TransferNotesToNewAuthor($oldAuthorUserId: uuid!, $newAuthorUserId: uuid!) {\n  bulkUpdateNotes(\n    where: {userId: {_eq: $oldAuthorUserId}}\n    _set: {userId: $newAuthorUserId, updatedAt: \"now()\"}\n  ) {\n    returning {\n      ...NoteBasic\n    }\n    affectedRows\n  }\n}\n\nmutation TransferNotesToNewEntity($oldEntityType: String!, $oldEntityId: uuid!, $newEntityType: String!, $newEntityId: uuid!) {\n  bulkUpdateNotes(\n    where: {entityType: {_eq: $oldEntityType}, entityId: {_eq: $oldEntityId}}\n    _set: {entityType: $newEntityType, entityId: $newEntityId, updatedAt: \"now()\"}\n  ) {\n    returning {\n      ...NoteBasic\n    }\n    affectedRows\n  }\n}\n\nmutation AddNoteExtracted($content: String!, $entityType: String!, $entityId: uuid!, $userId: uuid!, $isImportant: Boolean = false) {\n  insertNote(\n    object: {content: $content, entityType: $entityType, entityId: $entityId, userId: $userId, isImportant: $isImportant}\n  ) {\n    ...NoteListItem\n  }\n}\n\nmutation UpdateNoteExtracted($id: uuid!, $content: String, $isImportant: Boolean) {\n  updateNoteById(\n    pkColumns: {id: $id}\n    _set: {content: $content, isImportant: $isImportant, updatedAt: \"now()\"}\n  ) {\n    ...NoteListItem\n  }\n}": typeof types.CreateNoteDocument,
    "query GetNotes($limit: Int = 50, $offset: Int = 0, $where: notesBoolExp) {\n  notes(limit: $limit, offset: $offset, where: $where, orderBy: {createdAt: DESC}) {\n    ...NoteListItem\n  }\n  notesAggregate(where: $where) {\n    aggregate {\n      count\n    }\n  }\n}\n\nquery GetNoteById($id: uuid!) {\n  noteById(id: $id) {\n    ...NoteDetailed\n  }\n}\n\nquery GetNoteBasic($id: uuid!) {\n  noteById(id: $id) {\n    ...NoteBasic\n  }\n}\n\nquery GetNotesByEntity($entityType: String!, $entityId: uuid!) {\n  notes(\n    where: {entityType: {_eq: $entityType}, entityId: {_eq: $entityId}}\n    orderBy: {createdAt: DESC}\n  ) {\n    ...NoteListItem\n  }\n}\n\nquery GetPayrollNotes($payrollId: uuid!) {\n  notes(\n    where: {entityType: {_eq: \"payroll\"}, entityId: {_eq: $payrollId}}\n    orderBy: {createdAt: DESC}\n  ) {\n    ...PayrollNote\n  }\n}\n\nquery GetClientNotes($clientId: uuid!) {\n  notes(\n    where: {entityType: {_eq: \"client\"}, entityId: {_eq: $clientId}}\n    orderBy: {createdAt: DESC}\n  ) {\n    ...ClientNote\n  }\n}\n\nquery GetUserNotes($userId: uuid!) {\n  notes(\n    where: {entityType: {_eq: \"user\"}, entityId: {_eq: $userId}}\n    orderBy: {createdAt: DESC}\n  ) {\n    ...UserNote\n  }\n}\n\nquery GetNotesByAuthor($authorUserId: uuid!) {\n  notes(where: {userId: {_eq: $authorUserId}}, orderBy: {createdAt: DESC}) {\n    ...NoteListItem\n  }\n}\n\nquery GetMyNotes($userId: uuid!) {\n  notes(where: {userId: {_eq: $userId}}, orderBy: {updatedAt: DESC}) {\n    ...NoteListItem\n  }\n}\n\nquery GetImportantNotes($limit: Int = 20) {\n  notes(\n    where: {isImportant: {_eq: true}}\n    orderBy: {createdAt: DESC}\n    limit: $limit\n  ) {\n    ...ImportantNote\n  }\n}\n\nquery GetImportantNotesByEntity($entityType: String!, $entityId: uuid!) {\n  notes(\n    where: {entityType: {_eq: $entityType}, entityId: {_eq: $entityId}, isImportant: {_eq: true}}\n    orderBy: {createdAt: DESC}\n  ) {\n    ...ImportantNote\n  }\n}\n\nquery GetRecentNotes($limit: Int = 10) {\n  notes(orderBy: {createdAt: DESC}, limit: $limit) {\n    ...RecentNote\n  }\n}\n\nquery GetRecentNotesByUser($userId: uuid!, $limit: Int = 10) {\n  notes(\n    where: {userId: {_eq: $userId}}\n    orderBy: {createdAt: DESC}\n    limit: $limit\n  ) {\n    ...RecentNote\n  }\n}\n\nquery SearchNotes($searchTerm: String!, $limit: Int = 50) {\n  notes(\n    where: {_or: [{content: {_ilike: $searchTerm}}, {authorUser: {computedName: {_ilike: $searchTerm}}}]}\n    orderBy: {createdAt: DESC}\n    limit: $limit\n  ) {\n    ...NoteListItem\n  }\n}\n\nquery SearchNotesByEntity($entityType: String!, $entityId: uuid!, $searchTerm: String!) {\n  notes(\n    where: {_and: [{entityType: {_eq: $entityType}}, {entityId: {_eq: $entityId}}, {_or: [{content: {_ilike: $searchTerm}}, {content: {_ilike: $searchTerm}}]}]}\n    orderBy: {createdAt: DESC}\n  ) {\n    ...NoteListItem\n  }\n}\n\nquery FilterNotesByDateRange($startDate: timestamp!, $endDate: timestamp!, $entityType: String, $entityId: uuid) {\n  notes(\n    where: {_and: [{createdAt: {_gte: $startDate}}, {createdAt: {_lte: $endDate}}, {entityType: {_eq: $entityType}}, {entityId: {_eq: $entityId}}]}\n    orderBy: {createdAt: DESC}\n  ) {\n    ...NoteListItem\n  }\n}\n\nquery GetNoteDashboardStats($userId: uuid!) {\n  totalNotes: notesAggregate {\n    aggregate {\n      count\n    }\n  }\n  importantNotes: notesAggregate(where: {isImportant: {_eq: true}}) {\n    aggregate {\n      count\n    }\n  }\n  recentNotes: notes(orderBy: {createdAt: DESC}, limit: 5) {\n    ...NoteDashboard\n  }\n  myRecentNotes: notes(\n    where: {userId: {_eq: $userId}}\n    orderBy: {createdAt: DESC}\n    limit: 3\n  ) {\n    ...NoteDashboard\n  }\n}\n\nquery GetNoteActivity($limit: Int = 20) {\n  notes(orderBy: {updatedAt: DESC}, limit: $limit) {\n    ...NoteCard\n  }\n}\n\nquery GetEntityNoteSummary($entityType: String!, $entityId: uuid!) {\n  totalCount: notesAggregate(\n    where: {entityType: {_eq: $entityType}, entityId: {_eq: $entityId}}\n  ) {\n    aggregate {\n      count\n    }\n  }\n  importantCount: notesAggregate(\n    where: {entityType: {_eq: $entityType}, entityId: {_eq: $entityId}, isImportant: {_eq: true}}\n  ) {\n    aggregate {\n      count\n    }\n  }\n  recentNotes: notes(\n    where: {entityType: {_eq: $entityType}, entityId: {_eq: $entityId}}\n    orderBy: {createdAt: DESC}\n    limit: 3\n  ) {\n    ...NoteCard\n  }\n}\n\nquery GetNotesForBulkUpdate($ids: [uuid!]!) {\n  notes(where: {id: {_in: $ids}}) {\n    ...NoteBasic\n  }\n}\n\nquery GetNotesByAuthorAndDateRange($authorUserId: uuid!, $startDate: timestamp!, $endDate: timestamp!) {\n  notes(\n    where: {_and: [{userId: {_eq: $authorUserId}}, {createdAt: {_gte: $startDate}}, {createdAt: {_lte: $endDate}}]}\n    orderBy: {createdAt: DESC}\n  ) {\n    ...NoteListItem\n  }\n}\n\nquery GetNotesForAudit($limit: Int = 100, $offset: Int = 0, $where: notesBoolExp = {}) {\n  notes(limit: $limit, offset: $offset, where: $where, orderBy: {createdAt: DESC}) {\n    ...NoteForAudit\n  }\n}\n\nquery GetNotesByEntityType($entityType: String!) {\n  notes(where: {entityType: {_eq: $entityType}}, orderBy: {createdAt: DESC}) {\n    ...NoteListItem\n  }\n}\n\nquery GetNotesPaginated($limit: Int = 20, $offset: Int = 0, $where: notesBoolExp = {}, $orderBy: [notesOrderBy!] = [{createdAt: DESC}]) {\n  notes(limit: $limit, offset: $offset, where: $where, orderBy: $orderBy) {\n    ...NoteListItem\n  }\n  notesAggregate(where: $where) {\n    aggregate {\n      count\n    }\n  }\n}\n\nquery GetEntityNotesPaginated($entityType: String!, $entityId: uuid!, $limit: Int = 20, $offset: Int = 0) {\n  notes(\n    where: {entityType: {_eq: $entityType}, entityId: {_eq: $entityId}}\n    orderBy: {createdAt: DESC}\n    limit: $limit\n    offset: $offset\n  ) {\n    ...NoteListItem\n  }\n  entityNotesAggregate: notesAggregate(\n    where: {entityType: {_eq: $entityType}, entityId: {_eq: $entityId}}\n  ) {\n    aggregate {\n      count\n    }\n  }\n}\n\nquery SearchNotesPaginated($searchTerm: String!, $limit: Int = 20, $offset: Int = 0) {\n  notes(\n    where: {_or: [{content: {_ilike: $searchTerm}}, {authorUser: {computedName: {_ilike: $searchTerm}}}]}\n    orderBy: {createdAt: DESC}\n    limit: $limit\n    offset: $offset\n  ) {\n    ...NoteListItem\n  }\n  searchAggregate: notesAggregate(\n    where: {_or: [{content: {_ilike: $searchTerm}}, {authorUser: {computedName: {_ilike: $searchTerm}}}]}\n  ) {\n    aggregate {\n      count\n    }\n  }\n}\n\nquery GetNotesQuickList($entityType: String!, $entityId: uuid!) {\n  notes(\n    where: {entityType: {_eq: $entityType}, entityId: {_eq: $entityId}}\n    orderBy: {createdAt: DESC}\n    limit: 5\n  ) {\n    ...NoteMinimal\n  }\n}\n\nquery GetImportantNotesQuickList($entityType: String!, $entityId: uuid!) {\n  notes(\n    where: {entityType: {_eq: $entityType}, entityId: {_eq: $entityId}, isImportant: {_eq: true}}\n    orderBy: {createdAt: DESC}\n  ) {\n    ...NoteMinimal\n  }\n}\n\nquery GetNotesExtracted($entityType: String!, $entityId: uuid!) {\n  notes(\n    where: {entityType: {_eq: $entityType}, entityId: {_eq: $entityId}}\n    orderBy: {createdAt: DESC}\n  ) {\n    ...NoteListItem\n  }\n}": typeof types.GetNotesDocument,
    "subscription NoteUpdates($entityType: String!, $entityId: uuid!) {\n  notes(\n    where: {entityType: {_eq: $entityType}, entityId: {_eq: $entityId}}\n    orderBy: {createdAt: DESC}\n  ) {\n    ...NoteListItem\n  }\n}\n\nsubscription NotesByEntityUpdates($entityType: String!, $entityId: uuid!) {\n  notes(\n    where: {entityType: {_eq: $entityType}, entityId: {_eq: $entityId}}\n    orderBy: {updatedAt: DESC}\n  ) {\n    ...NoteListItem\n  }\n}\n\nsubscription SingleNoteUpdates($id: uuid!) {\n  notes(where: {id: {_eq: $id}}) {\n    ...NoteDetailed\n  }\n}\n\nsubscription PayrollNotesUpdates($payrollId: uuid!) {\n  notes(\n    where: {entityType: {_eq: \"payroll\"}, entityId: {_eq: $payrollId}}\n    orderBy: {createdAt: DESC}\n  ) {\n    ...PayrollNote\n  }\n}\n\nsubscription ClientNotesUpdates($clientId: uuid!) {\n  notes(\n    where: {entityType: {_eq: \"client\"}, entityId: {_eq: $clientId}}\n    orderBy: {createdAt: DESC}\n  ) {\n    ...ClientNote\n  }\n}\n\nsubscription UserNotesUpdates($userId: uuid!) {\n  notes(\n    where: {entityType: {_eq: \"user\"}, entityId: {_eq: $userId}}\n    orderBy: {createdAt: DESC}\n  ) {\n    ...UserNote\n  }\n}\n\nsubscription MyNotesUpdates($authorUserId: uuid!) {\n  notes(where: {userId: {_eq: $authorUserId}}, orderBy: {updatedAt: DESC}) {\n    ...NoteListItem\n  }\n}\n\nsubscription RecentNotesUpdates {\n  notes(orderBy: {createdAt: DESC}, limit: 20) {\n    ...RecentNote\n  }\n}\n\nsubscription ImportantNotesUpdates($limit: Int = 10) {\n  notes(\n    where: {isImportant: {_eq: true}}\n    orderBy: {createdAt: DESC}\n    limit: $limit\n  ) {\n    ...ImportantNote\n  }\n}\n\nsubscription ImportantNotesByEntityUpdates($entityType: String!, $entityId: uuid!) {\n  notes(\n    where: {entityType: {_eq: $entityType}, entityId: {_eq: $entityId}, isImportant: {_eq: true}}\n    orderBy: {createdAt: DESC}\n  ) {\n    ...ImportantNote\n  }\n}\n\nsubscription NoteActivityUpdates {\n  notes(orderBy: {updatedAt: DESC}, limit: 15) {\n    ...NoteCard\n  }\n}\n\nsubscription TotalNotesUpdates {\n  notesAggregate {\n    aggregate {\n      count\n    }\n  }\n}\n\nsubscription ImportantNotesCountUpdates {\n  notesAggregate(where: {isImportant: {_eq: true}}) {\n    aggregate {\n      count\n    }\n  }\n}\n\nsubscription TodaysNotesUpdates {\n  notesAggregate(where: {createdAt: {_gte: \"today\"}}) {\n    aggregate {\n      count\n    }\n  }\n}\n\nsubscription EntityNotesUpdates($entityType: String!, $entityId: uuid!) {\n  notesAggregate(\n    where: {entityType: {_eq: $entityType}, entityId: {_eq: $entityId}}\n  ) {\n    aggregate {\n      count\n    }\n  }\n}\n\nsubscription EntityImportantNotesUpdates($entityType: String!, $entityId: uuid!) {\n  notesAggregate(\n    where: {entityType: {_eq: $entityType}, entityId: {_eq: $entityId}, isImportant: {_eq: true}}\n  ) {\n    aggregate {\n      count\n    }\n  }\n}\n\nsubscription UserNoteActivityUpdates($authorUserId: uuid!) {\n  notes(\n    where: {userId: {_eq: $authorUserId}}\n    orderBy: {updatedAt: DESC}\n    limit: 10\n  ) {\n    ...NoteCard\n  }\n}\n\nsubscription NotesByDateRangeUpdates($startDate: timestamp!, $endDate: timestamp!) {\n  notes(\n    where: {createdAt: {_gte: $startDate, _lte: $endDate}}\n    orderBy: {createdAt: DESC}\n  ) {\n    ...NoteListItem\n  }\n}\n\nsubscription NoteSearchUpdates($searchTerm: String!) {\n  notes(\n    where: {_or: [{content: {_ilike: $searchTerm}}, {authorUser: {computedName: {_ilike: $searchTerm}}}]}\n    orderBy: {createdAt: DESC}\n  ) {\n    ...NoteListItem\n  }\n}\n\nsubscription TeamNotesUpdates($teamUserIds: [uuid!]!) {\n  notes(where: {userId: {_in: $teamUserIds}}, orderBy: {createdAt: DESC}) {\n    ...NoteListItem\n  }\n}\n\nsubscription EntityTypeNotesUpdates($entityType: String!) {\n  notes(where: {entityType: {_eq: $entityType}}, orderBy: {createdAt: DESC}) {\n    ...NoteListItem\n  }\n}\n\nsubscription NoteChangesUpdates($noteId: uuid!) {\n  notes(where: {id: {_eq: $noteId}}) {\n    id\n    content\n    isImportant\n    updatedAt\n    authorUser {\n      id\n      firstName\n      lastName\n      computedName\n    }\n  }\n}\n\nsubscription NewNotesUpdates {\n  notes(\n    where: {createdAt: {_gte: \"now() - interval '5 minutes'\"}}\n    orderBy: {createdAt: DESC}\n  ) {\n    ...NoteCard\n    createdAt\n  }\n}\n\nsubscription RecentNotesListUpdates {\n  notes(orderBy: {createdAt: DESC}, limit: 5) {\n    id\n    content\n    createdAt\n    authorUser {\n      firstName\n      lastName\n      computedName\n    }\n    entityType\n  }\n}\n\nsubscription NotesCountUpdates {\n  notesAggregate {\n    aggregate {\n      count\n    }\n  }\n}\n\nsubscription NoteAuditUpdates {\n  notes(orderBy: {updatedAt: DESC}, limit: 50) {\n    ...NoteForAudit\n  }\n}\n\nsubscription ImportantNoteChangesUpdates {\n  notes(where: {isImportant: {_eq: true}}, orderBy: {updatedAt: DESC}) {\n    ...ImportantNote\n  }\n}": typeof types.NoteUpdatesDocument,
    "fragment UserMinimal on users {\n  id\n  firstName\n  lastName\n  computedName\n  email\n}\n\nfragment UserCoreShared on users {\n  ...UserMinimal\n  role\n  isActive\n}\n\nfragment UserBasic on users {\n  ...UserCoreShared\n  clerkUserId\n  createdAt\n  updatedAt\n}\n\nfragment UserBase on users {\n  ...UserBasic\n}\n\nfragment UserWithRole on users {\n  ...UserBasic\n  username\n  isStaff\n}\n\nfragment UserProfile on users {\n  ...UserWithRole\n  clerkUserId\n  image\n  managerId\n  deactivatedAt\n  deactivatedBy\n  managerUser {\n    ...UserMinimal\n  }\n}\n\nfragment UserSearchResult on users {\n  ...UserCoreShared\n  username\n  isStaff\n}\n\nfragment ClientMinimal on clients {\n  id\n  name\n}\n\nfragment ClientBase on clients {\n  id\n  name\n  active\n  contactEmail\n  contactPerson\n  contactPhone\n  createdAt\n}\n\nfragment ClientWithStats on clients {\n  ...ClientBase\n  currentEmployeeCount: payrollsAggregate(\n    where: {supersededDate: {_isNull: true}}\n  ) {\n    aggregate {\n      sum {\n        employeeCount\n      }\n    }\n  }\n  activePayrollCount: payrollsAggregate(\n    where: {supersededDate: {_isNull: true}, status: {_eq: \"Active\"}}\n  ) {\n    aggregate {\n      count\n    }\n  }\n}\n\nfragment ClientListBase on clients {\n  ...ClientBase\n  payrollCount: payrollsAggregate(where: {supersededDate: {_isNull: true}}) {\n    aggregate {\n      count\n    }\n  }\n}\n\nfragment PayrollMinimal on payrolls {\n  id\n  name\n  employeeCount\n  status\n}\n\nfragment PayrollBase on payrolls {\n  id\n  name\n  employeeCount\n  status\n  payrollSystem\n  processingTime\n  processingDaysBeforeEft\n  versionNumber\n  supersededDate\n  createdAt\n  updatedAt\n}\n\nfragment PayrollWithClient on payrolls {\n  ...PayrollBase\n  clientId\n  client {\n    id\n    name\n    active\n  }\n}\n\nfragment PayrollListItem on payrolls {\n  ...PayrollWithClient\n  primaryConsultantUserId\n  backupConsultantUserId\n  managerUserId\n  createdByUserId\n  cycleId\n  dateTypeId\n  dateValue\n  payrollCycle {\n    id\n    name\n    description\n  }\n  payrollDateType {\n    id\n    name\n    description\n  }\n  primaryConsultant {\n    ...UserMinimal\n  }\n  backupConsultant {\n    ...UserMinimal\n  }\n  manager {\n    ...UserMinimal\n  }\n}\n\nfragment PayrollWithDates on payrolls {\n  ...PayrollBase\n  goLiveDate\n  payrollDates(orderBy: {originalEftDate: ASC}) {\n    id\n    originalEftDate\n    adjustedEftDate\n    notes\n  }\n}\n\nfragment PayrollFullDetail on payrolls {\n  ...PayrollWithDates\n  ...PayrollWithClient\n  dateTypeId\n  cycleId\n  dateValue\n  versionReason\n  supersededDate\n  parentPayrollId\n  parentPayroll {\n    id\n    versionNumber\n  }\n  childPayrolls(orderBy: {versionNumber: DESC}) {\n    id\n    versionNumber\n    versionReason\n    createdAt\n  }\n  primaryConsultant {\n    ...UserMinimal\n  }\n  backupConsultant {\n    ...UserMinimal\n  }\n  manager {\n    ...UserMinimal\n  }\n}\n\nfragment NoteWithAuthor on notes {\n  id\n  content\n  isImportant\n  createdAt\n  entityId\n  entityType\n  authorUser {\n    ...UserMinimal\n  }\n}\n\nfragment PermissionBase on permissions {\n  id\n  resourceId\n  description\n  legacyPermissionName\n  action\n}\n\nfragment RoleWithPermissions on roles {\n  id\n  name\n  displayName\n  description\n  isSystemRole\n  priority\n  assignedPermissions {\n    grantedPermission {\n      ...PermissionBase\n    }\n  }\n}\n\nfragment AuditLogEntry on auditLogs {\n  id\n  userId\n  userEmail\n  userRole\n  action\n  resourceType\n  resourceId\n  eventTime\n  success\n  errorMessage\n  ipAddress\n  userAgent\n  requestId\n  sessionId\n  metadata\n  oldValues\n  newValues\n  createdAt\n}\n\nfragment AuthEvent on authEvents {\n  id\n  userId\n  userEmail\n  eventType\n  eventTime\n  success\n  failureReason\n  ipAddress\n  userAgent\n  metadata\n}\n\nfragment DataAccessLog on dataAccessLogs {\n  id\n  userId\n  resourceType\n  resourceId\n  accessType\n  accessedAt\n  dataClassification\n  fieldsAccessed\n  rowCount\n  ipAddress\n  metadata\n}\n\nfragment PermissionChange on permissionChanges {\n  id\n  changedAt\n  changedByUserId\n  targetUserId\n  targetRoleId\n  changeType\n  permissionType\n  oldPermissions\n  newPermissions\n  reason\n  approvedByUserId\n}\n\nfragment PayrollDateInfo on payrollDates {\n  id\n  originalEftDate\n  adjustedEftDate\n  notes\n  createdAt\n}\n\nfragment PermissionOverrideInfo on permissionOverrides {\n  id\n  userId\n  role\n  resource\n  operation\n  granted\n  reason\n  conditions\n  expiresAt\n  createdBy\n  createdAt\n}": typeof types.UserMinimalFragmentDoc,
    "mutation LogAuditEvent($input: auditLogsInsertInput!) {\n  insertAuditLogsOne: insertAuditLog(object: $input) {\n    id\n    eventTime\n  }\n}\n\nmutation RefreshData {\n  __typename\n}": typeof types.LogAuditEventDocument,
    "query GetDashboardMetrics($userId: uuid!) {\n  clientsAggregate(where: {active: {_eq: true}}) {\n    aggregate {\n      count\n    }\n  }\n  activePayrollsAggregate: payrollsAggregate(\n    where: {supersededDate: {_isNull: true}, status: {_nin: [\"Completed\", \"Failed\"]}}\n  ) {\n    aggregate {\n      count\n    }\n  }\n  totalEmployeesAggregate: payrollsAggregate(\n    where: {supersededDate: {_isNull: true}}\n  ) {\n    aggregate {\n      sum {\n        employeeCount\n      }\n    }\n  }\n  upcomingPayrolls: payrolls(\n    where: {supersededDate: {_isNull: true}, status: {_nin: [\"Completed\", \"Failed\", \"Cancelled\"]}}\n    orderBy: {updatedAt: DESC}\n    limit: 5\n  ) {\n    ...PayrollMinimal\n    client {\n      ...ClientMinimal\n    }\n  }\n}\n\nquery GetDashboardStatsOptimized($limit: Int = 10) {\n  clientsAggregate {\n    aggregate {\n      count\n    }\n  }\n  totalPayrolls: payrollsAggregate(where: {supersededDate: {_isNull: true}}) {\n    aggregate {\n      count\n    }\n  }\n  activePayrolls: payrollsAggregate(\n    where: {supersededDate: {_isNull: true}, status: {_eq: \"Active\"}}\n  ) {\n    aggregate {\n      count\n    }\n  }\n  upcomingPayrolls: payrolls(\n    where: {supersededDate: {_isNull: true}, status: {_eq: \"Active\"}}\n    orderBy: {updatedAt: DESC}\n    limit: $limit\n  ) {\n    id\n    name\n    status\n    client {\n      id\n      name\n    }\n  }\n}\n\nquery GetClientsDashboardStats {\n  activeClientsCount: clientsAggregate(where: {active: {_eq: true}}) {\n    aggregate {\n      count\n    }\n  }\n  totalPayrollsCount: payrollsAggregate(where: {supersededDate: {_isNull: true}}) {\n    aggregate {\n      count\n    }\n  }\n  totalEmployeesSum: payrollsAggregate(where: {supersededDate: {_isNull: true}}) {\n    aggregate {\n      sum {\n        employeeCount\n      }\n    }\n  }\n  clientsNeedingAttention: clients(\n    where: {active: {_eq: true}, _not: {payrolls: {supersededDate: {_isNull: true}}}}\n  ) {\n    ...ClientMinimal\n  }\n}\n\nquery GetCurrentUser($userId: uuid!) {\n  user: userById(id: $userId) {\n    ...UserProfile\n  }\n}\n\nquery GetUsersForDropdown($role: user_role) {\n  users(\n    where: {isActive: {_eq: true}, role: {_eq: $role}}\n    orderBy: {computedName: ASC}\n  ) {\n    ...UserMinimal\n  }\n}\n\nquery GetSystemHealth {\n  databaseHealth: users(limit: 1) {\n    id\n  }\n  recentActivity: auditLogsAggregate(\n    where: {eventTime: {_gte: \"now() - interval '1 hour'\"}}\n  ) {\n    aggregate {\n      count\n    }\n  }\n}\n\nquery GlobalSearch($searchTerm: String!) {\n  clients(\n    where: {_or: [{name: {_ilike: $searchTerm}}, {contactEmail: {_ilike: $searchTerm}}]}\n    limit: 5\n  ) {\n    ...ClientMinimal\n  }\n  users(\n    where: {_or: [{computedName: {_ilike: $searchTerm}}, {firstName: {_ilike: $searchTerm}}, {lastName: {_ilike: $searchTerm}}, {email: {_ilike: $searchTerm}}]}\n    limit: 5\n  ) {\n    ...UserMinimal\n  }\n  payrolls(\n    where: {client: {name: {_ilike: $searchTerm}}, supersededDate: {_isNull: true}}\n    limit: 5\n  ) {\n    ...PayrollMinimal\n    client {\n      ...ClientMinimal\n    }\n  }\n}": typeof types.GetDashboardMetricsDocument,
    "subscription RecentActivity($resourceTypes: [String!]) {\n  auditLogs(\n    where: {resourceType: {_in: $resourceTypes}, eventTime: {_gte: \"now() - interval '5 minutes'\"}}\n    orderBy: {eventTime: DESC}\n    limit: 20\n  ) {\n    ...AuditLogEntry\n  }\n}\n\nsubscription AuthenticationEvents($userId: uuid) {\n  authEvents(\n    where: {userId: {_eq: $userId}, eventTime: {_gte: \"now() - interval '10 minutes'\"}}\n    orderBy: {eventTime: DESC}\n  ) {\n    ...AuthEvent\n  }\n}\n\nsubscription SensitiveDataAccess($resourceTypes: [String!]!) {\n  dataAccessLogs(\n    where: {resourceType: {_in: $resourceTypes}, accessedAt: {_gte: \"now() - interval '10 minutes'\"}}\n    orderBy: {accessedAt: DESC}\n  ) {\n    ...DataAccessLog\n  }\n}\n\nsubscription PermissionChangeStream {\n  permissionChanges(orderBy: {changedAt: DESC}, limit: 10) {\n    ...PermissionChange\n  }\n}": typeof types.RecentActivityDocument,
};
const documents: Documents = {
    "fragment NoteCore on notes {\n  id\n  content\n  isImportant\n  createdAt\n  updatedAt\n  userId\n  entityType\n  entityId\n}\n\nfragment NoteBasic on notes {\n  ...NoteCore\n  authorUser {\n    id\n    firstName\n    lastName\n    computedName\n    email\n    role\n  }\n}\n\nfragment NoteDetailed on notes {\n  ...NoteBasic\n}\n\nfragment NoteWithEntity on notes {\n  ...NoteBasic\n}\n\nfragment NoteSummary on notes {\n  id\n  isImportant\n  createdAt\n  entityType\n  entityId\n  userId\n}\n\nfragment NoteListItem on notes {\n  ...NoteSummary\n  content\n  updatedAt\n  authorUser {\n    id\n    firstName\n    lastName\n    computedName\n    role\n  }\n}\n\nfragment NoteTableRow on notes {\n  ...NoteListItem\n}\n\nfragment NoteMinimal on notes {\n  id\n  isImportant\n  createdAt\n  userId\n}\n\nfragment NoteForAudit on notes {\n  id\n  isImportant\n  createdAt\n  updatedAt\n  userId\n  entityType\n  entityId\n}\n\nfragment NoteCard on notes {\n  ...NoteSummary\n  content\n  authorUser {\n    id\n    firstName\n    lastName\n    computedName\n    image\n  }\n}\n\nfragment NoteDashboard on notes {\n  ...NoteSummary\n  authorUser {\n    id\n    firstName\n    lastName\n    computedName\n  }\n}\n\nfragment PayrollNote on notes {\n  ...NoteBasic\n}\n\nfragment ClientNote on notes {\n  ...NoteBasic\n}\n\nfragment UserNote on notes {\n  ...NoteBasic\n}\n\nfragment ImportantNote on notes {\n  ...NoteListItem\n}\n\nfragment RecentNote on notes {\n  ...NoteCard\n}": types.NoteCoreFragmentDoc,
    "mutation CreateNote($object: notesInsertInput!) {\n  insertNote(object: $object) {\n    ...NoteDetailed\n  }\n}\n\nmutation AddNote($content: String!, $entityType: String!, $entityId: uuid!, $userId: uuid!, $isImportant: Boolean = false) {\n  insertNote(\n    object: {content: $content, entityType: $entityType, entityId: $entityId, userId: $userId, isImportant: $isImportant}\n  ) {\n    ...NoteDetailed\n  }\n}\n\nmutation UpdateNote($id: uuid!, $set: notesSetInput!) {\n  updateNoteById(pkColumns: {id: $id}, _set: $set) {\n    ...NoteDetailed\n  }\n}\n\nmutation UpdateNoteContent($id: uuid!, $content: String, $isImportant: Boolean) {\n  updateNoteById(\n    pkColumns: {id: $id}\n    _set: {content: $content, isImportant: $isImportant, updatedAt: \"now()\"}\n  ) {\n    ...NoteDetailed\n  }\n}\n\nmutation DeleteNote($id: uuid!) {\n  deleteNoteById(id: $id) {\n    id\n    content\n    entityType\n    entityId\n  }\n}\n\nmutation ToggleNoteImportance($id: uuid!, $isImportant: Boolean!) {\n  updateNoteById(\n    pkColumns: {id: $id}\n    _set: {isImportant: $isImportant, updatedAt: \"now()\"}\n  ) {\n    ...NoteBasic\n  }\n}\n\nmutation MarkNoteAsImportant($id: uuid!) {\n  updateNoteById(\n    pkColumns: {id: $id}\n    _set: {isImportant: true, updatedAt: \"now()\"}\n  ) {\n    ...NoteBasic\n  }\n}\n\nmutation UnmarkNoteAsImportant($id: uuid!) {\n  updateNoteById(\n    pkColumns: {id: $id}\n    _set: {isImportant: false, updatedAt: \"now()\"}\n  ) {\n    ...NoteBasic\n  }\n}\n\nmutation AddPayrollNote($payrollId: uuid!, $content: String!, $userId: uuid!, $isImportant: Boolean = false) {\n  insertNote(\n    object: {content: $content, entityType: \"payroll\", entityId: $payrollId, userId: $userId, isImportant: $isImportant}\n  ) {\n    ...PayrollNote\n  }\n}\n\nmutation AddClientNote($clientId: uuid!, $content: String!, $userId: uuid!, $isImportant: Boolean = false) {\n  insertNote(\n    object: {content: $content, entityType: \"client\", entityId: $clientId, userId: $userId, isImportant: $isImportant}\n  ) {\n    ...ClientNote\n  }\n}\n\nmutation AddUserNote($userId: uuid!, $content: String!, $authorUserId: uuid!, $isImportant: Boolean = false) {\n  insertNote(\n    object: {content: $content, entityType: \"user\", entityId: $userId, userId: $authorUserId, isImportant: $isImportant}\n  ) {\n    ...UserNote\n  }\n}\n\nmutation BulkDeleteNotes($ids: [uuid!]!) {\n  bulkDeleteNotes(where: {id: {_in: $ids}}) {\n    returning {\n      id\n      content\n      entityType\n      entityId\n    }\n    affectedRows\n  }\n}\n\nmutation BulkMarkNotesImportant($ids: [uuid!]!) {\n  bulkUpdateNotes(\n    where: {id: {_in: $ids}}\n    _set: {isImportant: true, updatedAt: \"now()\"}\n  ) {\n    returning {\n      ...NoteBasic\n    }\n    affectedRows\n  }\n}\n\nmutation BulkUnmarkNotesImportant($ids: [uuid!]!) {\n  bulkUpdateNotes(\n    where: {id: {_in: $ids}}\n    _set: {isImportant: false, updatedAt: \"now()\"}\n  ) {\n    returning {\n      ...NoteBasic\n    }\n    affectedRows\n  }\n}\n\nmutation BulkUpdateNotes($where: notesBoolExp!, $set: notesSetInput!) {\n  bulkUpdateNotes(where: $where, _set: $set) {\n    returning {\n      ...NoteBasic\n    }\n    affectedRows\n  }\n}\n\nmutation DeleteNotesByEntity($entityType: String!, $entityId: uuid!) {\n  bulkDeleteNotes(\n    where: {entityType: {_eq: $entityType}, entityId: {_eq: $entityId}}\n  ) {\n    returning {\n      id\n      content\n    }\n    affectedRows\n  }\n}\n\nmutation DeleteNotesByAuthor($authorUserId: uuid!) {\n  bulkDeleteNotes(where: {userId: {_eq: $authorUserId}}) {\n    returning {\n      id\n      content\n      entityType\n      entityId\n    }\n    affectedRows\n  }\n}\n\nmutation TransferNotesToNewAuthor($oldAuthorUserId: uuid!, $newAuthorUserId: uuid!) {\n  bulkUpdateNotes(\n    where: {userId: {_eq: $oldAuthorUserId}}\n    _set: {userId: $newAuthorUserId, updatedAt: \"now()\"}\n  ) {\n    returning {\n      ...NoteBasic\n    }\n    affectedRows\n  }\n}\n\nmutation TransferNotesToNewEntity($oldEntityType: String!, $oldEntityId: uuid!, $newEntityType: String!, $newEntityId: uuid!) {\n  bulkUpdateNotes(\n    where: {entityType: {_eq: $oldEntityType}, entityId: {_eq: $oldEntityId}}\n    _set: {entityType: $newEntityType, entityId: $newEntityId, updatedAt: \"now()\"}\n  ) {\n    returning {\n      ...NoteBasic\n    }\n    affectedRows\n  }\n}\n\nmutation AddNoteExtracted($content: String!, $entityType: String!, $entityId: uuid!, $userId: uuid!, $isImportant: Boolean = false) {\n  insertNote(\n    object: {content: $content, entityType: $entityType, entityId: $entityId, userId: $userId, isImportant: $isImportant}\n  ) {\n    ...NoteListItem\n  }\n}\n\nmutation UpdateNoteExtracted($id: uuid!, $content: String, $isImportant: Boolean) {\n  updateNoteById(\n    pkColumns: {id: $id}\n    _set: {content: $content, isImportant: $isImportant, updatedAt: \"now()\"}\n  ) {\n    ...NoteListItem\n  }\n}": types.CreateNoteDocument,
    "query GetNotes($limit: Int = 50, $offset: Int = 0, $where: notesBoolExp) {\n  notes(limit: $limit, offset: $offset, where: $where, orderBy: {createdAt: DESC}) {\n    ...NoteListItem\n  }\n  notesAggregate(where: $where) {\n    aggregate {\n      count\n    }\n  }\n}\n\nquery GetNoteById($id: uuid!) {\n  noteById(id: $id) {\n    ...NoteDetailed\n  }\n}\n\nquery GetNoteBasic($id: uuid!) {\n  noteById(id: $id) {\n    ...NoteBasic\n  }\n}\n\nquery GetNotesByEntity($entityType: String!, $entityId: uuid!) {\n  notes(\n    where: {entityType: {_eq: $entityType}, entityId: {_eq: $entityId}}\n    orderBy: {createdAt: DESC}\n  ) {\n    ...NoteListItem\n  }\n}\n\nquery GetPayrollNotes($payrollId: uuid!) {\n  notes(\n    where: {entityType: {_eq: \"payroll\"}, entityId: {_eq: $payrollId}}\n    orderBy: {createdAt: DESC}\n  ) {\n    ...PayrollNote\n  }\n}\n\nquery GetClientNotes($clientId: uuid!) {\n  notes(\n    where: {entityType: {_eq: \"client\"}, entityId: {_eq: $clientId}}\n    orderBy: {createdAt: DESC}\n  ) {\n    ...ClientNote\n  }\n}\n\nquery GetUserNotes($userId: uuid!) {\n  notes(\n    where: {entityType: {_eq: \"user\"}, entityId: {_eq: $userId}}\n    orderBy: {createdAt: DESC}\n  ) {\n    ...UserNote\n  }\n}\n\nquery GetNotesByAuthor($authorUserId: uuid!) {\n  notes(where: {userId: {_eq: $authorUserId}}, orderBy: {createdAt: DESC}) {\n    ...NoteListItem\n  }\n}\n\nquery GetMyNotes($userId: uuid!) {\n  notes(where: {userId: {_eq: $userId}}, orderBy: {updatedAt: DESC}) {\n    ...NoteListItem\n  }\n}\n\nquery GetImportantNotes($limit: Int = 20) {\n  notes(\n    where: {isImportant: {_eq: true}}\n    orderBy: {createdAt: DESC}\n    limit: $limit\n  ) {\n    ...ImportantNote\n  }\n}\n\nquery GetImportantNotesByEntity($entityType: String!, $entityId: uuid!) {\n  notes(\n    where: {entityType: {_eq: $entityType}, entityId: {_eq: $entityId}, isImportant: {_eq: true}}\n    orderBy: {createdAt: DESC}\n  ) {\n    ...ImportantNote\n  }\n}\n\nquery GetRecentNotes($limit: Int = 10) {\n  notes(orderBy: {createdAt: DESC}, limit: $limit) {\n    ...RecentNote\n  }\n}\n\nquery GetRecentNotesByUser($userId: uuid!, $limit: Int = 10) {\n  notes(\n    where: {userId: {_eq: $userId}}\n    orderBy: {createdAt: DESC}\n    limit: $limit\n  ) {\n    ...RecentNote\n  }\n}\n\nquery SearchNotes($searchTerm: String!, $limit: Int = 50) {\n  notes(\n    where: {_or: [{content: {_ilike: $searchTerm}}, {authorUser: {computedName: {_ilike: $searchTerm}}}]}\n    orderBy: {createdAt: DESC}\n    limit: $limit\n  ) {\n    ...NoteListItem\n  }\n}\n\nquery SearchNotesByEntity($entityType: String!, $entityId: uuid!, $searchTerm: String!) {\n  notes(\n    where: {_and: [{entityType: {_eq: $entityType}}, {entityId: {_eq: $entityId}}, {_or: [{content: {_ilike: $searchTerm}}, {content: {_ilike: $searchTerm}}]}]}\n    orderBy: {createdAt: DESC}\n  ) {\n    ...NoteListItem\n  }\n}\n\nquery FilterNotesByDateRange($startDate: timestamp!, $endDate: timestamp!, $entityType: String, $entityId: uuid) {\n  notes(\n    where: {_and: [{createdAt: {_gte: $startDate}}, {createdAt: {_lte: $endDate}}, {entityType: {_eq: $entityType}}, {entityId: {_eq: $entityId}}]}\n    orderBy: {createdAt: DESC}\n  ) {\n    ...NoteListItem\n  }\n}\n\nquery GetNoteDashboardStats($userId: uuid!) {\n  totalNotes: notesAggregate {\n    aggregate {\n      count\n    }\n  }\n  importantNotes: notesAggregate(where: {isImportant: {_eq: true}}) {\n    aggregate {\n      count\n    }\n  }\n  recentNotes: notes(orderBy: {createdAt: DESC}, limit: 5) {\n    ...NoteDashboard\n  }\n  myRecentNotes: notes(\n    where: {userId: {_eq: $userId}}\n    orderBy: {createdAt: DESC}\n    limit: 3\n  ) {\n    ...NoteDashboard\n  }\n}\n\nquery GetNoteActivity($limit: Int = 20) {\n  notes(orderBy: {updatedAt: DESC}, limit: $limit) {\n    ...NoteCard\n  }\n}\n\nquery GetEntityNoteSummary($entityType: String!, $entityId: uuid!) {\n  totalCount: notesAggregate(\n    where: {entityType: {_eq: $entityType}, entityId: {_eq: $entityId}}\n  ) {\n    aggregate {\n      count\n    }\n  }\n  importantCount: notesAggregate(\n    where: {entityType: {_eq: $entityType}, entityId: {_eq: $entityId}, isImportant: {_eq: true}}\n  ) {\n    aggregate {\n      count\n    }\n  }\n  recentNotes: notes(\n    where: {entityType: {_eq: $entityType}, entityId: {_eq: $entityId}}\n    orderBy: {createdAt: DESC}\n    limit: 3\n  ) {\n    ...NoteCard\n  }\n}\n\nquery GetNotesForBulkUpdate($ids: [uuid!]!) {\n  notes(where: {id: {_in: $ids}}) {\n    ...NoteBasic\n  }\n}\n\nquery GetNotesByAuthorAndDateRange($authorUserId: uuid!, $startDate: timestamp!, $endDate: timestamp!) {\n  notes(\n    where: {_and: [{userId: {_eq: $authorUserId}}, {createdAt: {_gte: $startDate}}, {createdAt: {_lte: $endDate}}]}\n    orderBy: {createdAt: DESC}\n  ) {\n    ...NoteListItem\n  }\n}\n\nquery GetNotesForAudit($limit: Int = 100, $offset: Int = 0, $where: notesBoolExp = {}) {\n  notes(limit: $limit, offset: $offset, where: $where, orderBy: {createdAt: DESC}) {\n    ...NoteForAudit\n  }\n}\n\nquery GetNotesByEntityType($entityType: String!) {\n  notes(where: {entityType: {_eq: $entityType}}, orderBy: {createdAt: DESC}) {\n    ...NoteListItem\n  }\n}\n\nquery GetNotesPaginated($limit: Int = 20, $offset: Int = 0, $where: notesBoolExp = {}, $orderBy: [notesOrderBy!] = [{createdAt: DESC}]) {\n  notes(limit: $limit, offset: $offset, where: $where, orderBy: $orderBy) {\n    ...NoteListItem\n  }\n  notesAggregate(where: $where) {\n    aggregate {\n      count\n    }\n  }\n}\n\nquery GetEntityNotesPaginated($entityType: String!, $entityId: uuid!, $limit: Int = 20, $offset: Int = 0) {\n  notes(\n    where: {entityType: {_eq: $entityType}, entityId: {_eq: $entityId}}\n    orderBy: {createdAt: DESC}\n    limit: $limit\n    offset: $offset\n  ) {\n    ...NoteListItem\n  }\n  entityNotesAggregate: notesAggregate(\n    where: {entityType: {_eq: $entityType}, entityId: {_eq: $entityId}}\n  ) {\n    aggregate {\n      count\n    }\n  }\n}\n\nquery SearchNotesPaginated($searchTerm: String!, $limit: Int = 20, $offset: Int = 0) {\n  notes(\n    where: {_or: [{content: {_ilike: $searchTerm}}, {authorUser: {computedName: {_ilike: $searchTerm}}}]}\n    orderBy: {createdAt: DESC}\n    limit: $limit\n    offset: $offset\n  ) {\n    ...NoteListItem\n  }\n  searchAggregate: notesAggregate(\n    where: {_or: [{content: {_ilike: $searchTerm}}, {authorUser: {computedName: {_ilike: $searchTerm}}}]}\n  ) {\n    aggregate {\n      count\n    }\n  }\n}\n\nquery GetNotesQuickList($entityType: String!, $entityId: uuid!) {\n  notes(\n    where: {entityType: {_eq: $entityType}, entityId: {_eq: $entityId}}\n    orderBy: {createdAt: DESC}\n    limit: 5\n  ) {\n    ...NoteMinimal\n  }\n}\n\nquery GetImportantNotesQuickList($entityType: String!, $entityId: uuid!) {\n  notes(\n    where: {entityType: {_eq: $entityType}, entityId: {_eq: $entityId}, isImportant: {_eq: true}}\n    orderBy: {createdAt: DESC}\n  ) {\n    ...NoteMinimal\n  }\n}\n\nquery GetNotesExtracted($entityType: String!, $entityId: uuid!) {\n  notes(\n    where: {entityType: {_eq: $entityType}, entityId: {_eq: $entityId}}\n    orderBy: {createdAt: DESC}\n  ) {\n    ...NoteListItem\n  }\n}": types.GetNotesDocument,
    "subscription NoteUpdates($entityType: String!, $entityId: uuid!) {\n  notes(\n    where: {entityType: {_eq: $entityType}, entityId: {_eq: $entityId}}\n    orderBy: {createdAt: DESC}\n  ) {\n    ...NoteListItem\n  }\n}\n\nsubscription NotesByEntityUpdates($entityType: String!, $entityId: uuid!) {\n  notes(\n    where: {entityType: {_eq: $entityType}, entityId: {_eq: $entityId}}\n    orderBy: {updatedAt: DESC}\n  ) {\n    ...NoteListItem\n  }\n}\n\nsubscription SingleNoteUpdates($id: uuid!) {\n  notes(where: {id: {_eq: $id}}) {\n    ...NoteDetailed\n  }\n}\n\nsubscription PayrollNotesUpdates($payrollId: uuid!) {\n  notes(\n    where: {entityType: {_eq: \"payroll\"}, entityId: {_eq: $payrollId}}\n    orderBy: {createdAt: DESC}\n  ) {\n    ...PayrollNote\n  }\n}\n\nsubscription ClientNotesUpdates($clientId: uuid!) {\n  notes(\n    where: {entityType: {_eq: \"client\"}, entityId: {_eq: $clientId}}\n    orderBy: {createdAt: DESC}\n  ) {\n    ...ClientNote\n  }\n}\n\nsubscription UserNotesUpdates($userId: uuid!) {\n  notes(\n    where: {entityType: {_eq: \"user\"}, entityId: {_eq: $userId}}\n    orderBy: {createdAt: DESC}\n  ) {\n    ...UserNote\n  }\n}\n\nsubscription MyNotesUpdates($authorUserId: uuid!) {\n  notes(where: {userId: {_eq: $authorUserId}}, orderBy: {updatedAt: DESC}) {\n    ...NoteListItem\n  }\n}\n\nsubscription RecentNotesUpdates {\n  notes(orderBy: {createdAt: DESC}, limit: 20) {\n    ...RecentNote\n  }\n}\n\nsubscription ImportantNotesUpdates($limit: Int = 10) {\n  notes(\n    where: {isImportant: {_eq: true}}\n    orderBy: {createdAt: DESC}\n    limit: $limit\n  ) {\n    ...ImportantNote\n  }\n}\n\nsubscription ImportantNotesByEntityUpdates($entityType: String!, $entityId: uuid!) {\n  notes(\n    where: {entityType: {_eq: $entityType}, entityId: {_eq: $entityId}, isImportant: {_eq: true}}\n    orderBy: {createdAt: DESC}\n  ) {\n    ...ImportantNote\n  }\n}\n\nsubscription NoteActivityUpdates {\n  notes(orderBy: {updatedAt: DESC}, limit: 15) {\n    ...NoteCard\n  }\n}\n\nsubscription TotalNotesUpdates {\n  notesAggregate {\n    aggregate {\n      count\n    }\n  }\n}\n\nsubscription ImportantNotesCountUpdates {\n  notesAggregate(where: {isImportant: {_eq: true}}) {\n    aggregate {\n      count\n    }\n  }\n}\n\nsubscription TodaysNotesUpdates {\n  notesAggregate(where: {createdAt: {_gte: \"today\"}}) {\n    aggregate {\n      count\n    }\n  }\n}\n\nsubscription EntityNotesUpdates($entityType: String!, $entityId: uuid!) {\n  notesAggregate(\n    where: {entityType: {_eq: $entityType}, entityId: {_eq: $entityId}}\n  ) {\n    aggregate {\n      count\n    }\n  }\n}\n\nsubscription EntityImportantNotesUpdates($entityType: String!, $entityId: uuid!) {\n  notesAggregate(\n    where: {entityType: {_eq: $entityType}, entityId: {_eq: $entityId}, isImportant: {_eq: true}}\n  ) {\n    aggregate {\n      count\n    }\n  }\n}\n\nsubscription UserNoteActivityUpdates($authorUserId: uuid!) {\n  notes(\n    where: {userId: {_eq: $authorUserId}}\n    orderBy: {updatedAt: DESC}\n    limit: 10\n  ) {\n    ...NoteCard\n  }\n}\n\nsubscription NotesByDateRangeUpdates($startDate: timestamp!, $endDate: timestamp!) {\n  notes(\n    where: {createdAt: {_gte: $startDate, _lte: $endDate}}\n    orderBy: {createdAt: DESC}\n  ) {\n    ...NoteListItem\n  }\n}\n\nsubscription NoteSearchUpdates($searchTerm: String!) {\n  notes(\n    where: {_or: [{content: {_ilike: $searchTerm}}, {authorUser: {computedName: {_ilike: $searchTerm}}}]}\n    orderBy: {createdAt: DESC}\n  ) {\n    ...NoteListItem\n  }\n}\n\nsubscription TeamNotesUpdates($teamUserIds: [uuid!]!) {\n  notes(where: {userId: {_in: $teamUserIds}}, orderBy: {createdAt: DESC}) {\n    ...NoteListItem\n  }\n}\n\nsubscription EntityTypeNotesUpdates($entityType: String!) {\n  notes(where: {entityType: {_eq: $entityType}}, orderBy: {createdAt: DESC}) {\n    ...NoteListItem\n  }\n}\n\nsubscription NoteChangesUpdates($noteId: uuid!) {\n  notes(where: {id: {_eq: $noteId}}) {\n    id\n    content\n    isImportant\n    updatedAt\n    authorUser {\n      id\n      firstName\n      lastName\n      computedName\n    }\n  }\n}\n\nsubscription NewNotesUpdates {\n  notes(\n    where: {createdAt: {_gte: \"now() - interval '5 minutes'\"}}\n    orderBy: {createdAt: DESC}\n  ) {\n    ...NoteCard\n    createdAt\n  }\n}\n\nsubscription RecentNotesListUpdates {\n  notes(orderBy: {createdAt: DESC}, limit: 5) {\n    id\n    content\n    createdAt\n    authorUser {\n      firstName\n      lastName\n      computedName\n    }\n    entityType\n  }\n}\n\nsubscription NotesCountUpdates {\n  notesAggregate {\n    aggregate {\n      count\n    }\n  }\n}\n\nsubscription NoteAuditUpdates {\n  notes(orderBy: {updatedAt: DESC}, limit: 50) {\n    ...NoteForAudit\n  }\n}\n\nsubscription ImportantNoteChangesUpdates {\n  notes(where: {isImportant: {_eq: true}}, orderBy: {updatedAt: DESC}) {\n    ...ImportantNote\n  }\n}": types.NoteUpdatesDocument,
    "fragment UserMinimal on users {\n  id\n  firstName\n  lastName\n  computedName\n  email\n}\n\nfragment UserCoreShared on users {\n  ...UserMinimal\n  role\n  isActive\n}\n\nfragment UserBasic on users {\n  ...UserCoreShared\n  clerkUserId\n  createdAt\n  updatedAt\n}\n\nfragment UserBase on users {\n  ...UserBasic\n}\n\nfragment UserWithRole on users {\n  ...UserBasic\n  username\n  isStaff\n}\n\nfragment UserProfile on users {\n  ...UserWithRole\n  clerkUserId\n  image\n  managerId\n  deactivatedAt\n  deactivatedBy\n  managerUser {\n    ...UserMinimal\n  }\n}\n\nfragment UserSearchResult on users {\n  ...UserCoreShared\n  username\n  isStaff\n}\n\nfragment ClientMinimal on clients {\n  id\n  name\n}\n\nfragment ClientBase on clients {\n  id\n  name\n  active\n  contactEmail\n  contactPerson\n  contactPhone\n  createdAt\n}\n\nfragment ClientWithStats on clients {\n  ...ClientBase\n  currentEmployeeCount: payrollsAggregate(\n    where: {supersededDate: {_isNull: true}}\n  ) {\n    aggregate {\n      sum {\n        employeeCount\n      }\n    }\n  }\n  activePayrollCount: payrollsAggregate(\n    where: {supersededDate: {_isNull: true}, status: {_eq: \"Active\"}}\n  ) {\n    aggregate {\n      count\n    }\n  }\n}\n\nfragment ClientListBase on clients {\n  ...ClientBase\n  payrollCount: payrollsAggregate(where: {supersededDate: {_isNull: true}}) {\n    aggregate {\n      count\n    }\n  }\n}\n\nfragment PayrollMinimal on payrolls {\n  id\n  name\n  employeeCount\n  status\n}\n\nfragment PayrollBase on payrolls {\n  id\n  name\n  employeeCount\n  status\n  payrollSystem\n  processingTime\n  processingDaysBeforeEft\n  versionNumber\n  supersededDate\n  createdAt\n  updatedAt\n}\n\nfragment PayrollWithClient on payrolls {\n  ...PayrollBase\n  clientId\n  client {\n    id\n    name\n    active\n  }\n}\n\nfragment PayrollListItem on payrolls {\n  ...PayrollWithClient\n  primaryConsultantUserId\n  backupConsultantUserId\n  managerUserId\n  createdByUserId\n  cycleId\n  dateTypeId\n  dateValue\n  payrollCycle {\n    id\n    name\n    description\n  }\n  payrollDateType {\n    id\n    name\n    description\n  }\n  primaryConsultant {\n    ...UserMinimal\n  }\n  backupConsultant {\n    ...UserMinimal\n  }\n  manager {\n    ...UserMinimal\n  }\n}\n\nfragment PayrollWithDates on payrolls {\n  ...PayrollBase\n  goLiveDate\n  payrollDates(orderBy: {originalEftDate: ASC}) {\n    id\n    originalEftDate\n    adjustedEftDate\n    notes\n  }\n}\n\nfragment PayrollFullDetail on payrolls {\n  ...PayrollWithDates\n  ...PayrollWithClient\n  dateTypeId\n  cycleId\n  dateValue\n  versionReason\n  supersededDate\n  parentPayrollId\n  parentPayroll {\n    id\n    versionNumber\n  }\n  childPayrolls(orderBy: {versionNumber: DESC}) {\n    id\n    versionNumber\n    versionReason\n    createdAt\n  }\n  primaryConsultant {\n    ...UserMinimal\n  }\n  backupConsultant {\n    ...UserMinimal\n  }\n  manager {\n    ...UserMinimal\n  }\n}\n\nfragment NoteWithAuthor on notes {\n  id\n  content\n  isImportant\n  createdAt\n  entityId\n  entityType\n  authorUser {\n    ...UserMinimal\n  }\n}\n\nfragment PermissionBase on permissions {\n  id\n  resourceId\n  description\n  legacyPermissionName\n  action\n}\n\nfragment RoleWithPermissions on roles {\n  id\n  name\n  displayName\n  description\n  isSystemRole\n  priority\n  assignedPermissions {\n    grantedPermission {\n      ...PermissionBase\n    }\n  }\n}\n\nfragment AuditLogEntry on auditLogs {\n  id\n  userId\n  userEmail\n  userRole\n  action\n  resourceType\n  resourceId\n  eventTime\n  success\n  errorMessage\n  ipAddress\n  userAgent\n  requestId\n  sessionId\n  metadata\n  oldValues\n  newValues\n  createdAt\n}\n\nfragment AuthEvent on authEvents {\n  id\n  userId\n  userEmail\n  eventType\n  eventTime\n  success\n  failureReason\n  ipAddress\n  userAgent\n  metadata\n}\n\nfragment DataAccessLog on dataAccessLogs {\n  id\n  userId\n  resourceType\n  resourceId\n  accessType\n  accessedAt\n  dataClassification\n  fieldsAccessed\n  rowCount\n  ipAddress\n  metadata\n}\n\nfragment PermissionChange on permissionChanges {\n  id\n  changedAt\n  changedByUserId\n  targetUserId\n  targetRoleId\n  changeType\n  permissionType\n  oldPermissions\n  newPermissions\n  reason\n  approvedByUserId\n}\n\nfragment PayrollDateInfo on payrollDates {\n  id\n  originalEftDate\n  adjustedEftDate\n  notes\n  createdAt\n}\n\nfragment PermissionOverrideInfo on permissionOverrides {\n  id\n  userId\n  role\n  resource\n  operation\n  granted\n  reason\n  conditions\n  expiresAt\n  createdBy\n  createdAt\n}": types.UserMinimalFragmentDoc,
    "mutation LogAuditEvent($input: auditLogsInsertInput!) {\n  insertAuditLogsOne: insertAuditLog(object: $input) {\n    id\n    eventTime\n  }\n}\n\nmutation RefreshData {\n  __typename\n}": types.LogAuditEventDocument,
    "query GetDashboardMetrics($userId: uuid!) {\n  clientsAggregate(where: {active: {_eq: true}}) {\n    aggregate {\n      count\n    }\n  }\n  activePayrollsAggregate: payrollsAggregate(\n    where: {supersededDate: {_isNull: true}, status: {_nin: [\"Completed\", \"Failed\"]}}\n  ) {\n    aggregate {\n      count\n    }\n  }\n  totalEmployeesAggregate: payrollsAggregate(\n    where: {supersededDate: {_isNull: true}}\n  ) {\n    aggregate {\n      sum {\n        employeeCount\n      }\n    }\n  }\n  upcomingPayrolls: payrolls(\n    where: {supersededDate: {_isNull: true}, status: {_nin: [\"Completed\", \"Failed\", \"Cancelled\"]}}\n    orderBy: {updatedAt: DESC}\n    limit: 5\n  ) {\n    ...PayrollMinimal\n    client {\n      ...ClientMinimal\n    }\n  }\n}\n\nquery GetDashboardStatsOptimized($limit: Int = 10) {\n  clientsAggregate {\n    aggregate {\n      count\n    }\n  }\n  totalPayrolls: payrollsAggregate(where: {supersededDate: {_isNull: true}}) {\n    aggregate {\n      count\n    }\n  }\n  activePayrolls: payrollsAggregate(\n    where: {supersededDate: {_isNull: true}, status: {_eq: \"Active\"}}\n  ) {\n    aggregate {\n      count\n    }\n  }\n  upcomingPayrolls: payrolls(\n    where: {supersededDate: {_isNull: true}, status: {_eq: \"Active\"}}\n    orderBy: {updatedAt: DESC}\n    limit: $limit\n  ) {\n    id\n    name\n    status\n    client {\n      id\n      name\n    }\n  }\n}\n\nquery GetClientsDashboardStats {\n  activeClientsCount: clientsAggregate(where: {active: {_eq: true}}) {\n    aggregate {\n      count\n    }\n  }\n  totalPayrollsCount: payrollsAggregate(where: {supersededDate: {_isNull: true}}) {\n    aggregate {\n      count\n    }\n  }\n  totalEmployeesSum: payrollsAggregate(where: {supersededDate: {_isNull: true}}) {\n    aggregate {\n      sum {\n        employeeCount\n      }\n    }\n  }\n  clientsNeedingAttention: clients(\n    where: {active: {_eq: true}, _not: {payrolls: {supersededDate: {_isNull: true}}}}\n  ) {\n    ...ClientMinimal\n  }\n}\n\nquery GetCurrentUser($userId: uuid!) {\n  user: userById(id: $userId) {\n    ...UserProfile\n  }\n}\n\nquery GetUsersForDropdown($role: user_role) {\n  users(\n    where: {isActive: {_eq: true}, role: {_eq: $role}}\n    orderBy: {computedName: ASC}\n  ) {\n    ...UserMinimal\n  }\n}\n\nquery GetSystemHealth {\n  databaseHealth: users(limit: 1) {\n    id\n  }\n  recentActivity: auditLogsAggregate(\n    where: {eventTime: {_gte: \"now() - interval '1 hour'\"}}\n  ) {\n    aggregate {\n      count\n    }\n  }\n}\n\nquery GlobalSearch($searchTerm: String!) {\n  clients(\n    where: {_or: [{name: {_ilike: $searchTerm}}, {contactEmail: {_ilike: $searchTerm}}]}\n    limit: 5\n  ) {\n    ...ClientMinimal\n  }\n  users(\n    where: {_or: [{computedName: {_ilike: $searchTerm}}, {firstName: {_ilike: $searchTerm}}, {lastName: {_ilike: $searchTerm}}, {email: {_ilike: $searchTerm}}]}\n    limit: 5\n  ) {\n    ...UserMinimal\n  }\n  payrolls(\n    where: {client: {name: {_ilike: $searchTerm}}, supersededDate: {_isNull: true}}\n    limit: 5\n  ) {\n    ...PayrollMinimal\n    client {\n      ...ClientMinimal\n    }\n  }\n}": types.GetDashboardMetricsDocument,
    "subscription RecentActivity($resourceTypes: [String!]) {\n  auditLogs(\n    where: {resourceType: {_in: $resourceTypes}, eventTime: {_gte: \"now() - interval '5 minutes'\"}}\n    orderBy: {eventTime: DESC}\n    limit: 20\n  ) {\n    ...AuditLogEntry\n  }\n}\n\nsubscription AuthenticationEvents($userId: uuid) {\n  authEvents(\n    where: {userId: {_eq: $userId}, eventTime: {_gte: \"now() - interval '10 minutes'\"}}\n    orderBy: {eventTime: DESC}\n  ) {\n    ...AuthEvent\n  }\n}\n\nsubscription SensitiveDataAccess($resourceTypes: [String!]!) {\n  dataAccessLogs(\n    where: {resourceType: {_in: $resourceTypes}, accessedAt: {_gte: \"now() - interval '10 minutes'\"}}\n    orderBy: {accessedAt: DESC}\n  ) {\n    ...DataAccessLog\n  }\n}\n\nsubscription PermissionChangeStream {\n  permissionChanges(orderBy: {changedAt: DESC}, limit: 10) {\n    ...PermissionChange\n  }\n}": types.RecentActivityDocument,
};

/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 *
 *
 * @example
 * ```ts
 * const query = gql(`query GetUser($id: ID!) { user(id: $id) { name } }`);
 * ```
 *
 * The query argument is unknown!
 * Please regenerate the types.
 */
export function gql(source: string): unknown;

/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "fragment NoteCore on notes {\n  id\n  content\n  isImportant\n  createdAt\n  updatedAt\n  userId\n  entityType\n  entityId\n}\n\nfragment NoteBasic on notes {\n  ...NoteCore\n  authorUser {\n    id\n    firstName\n    lastName\n    computedName\n    email\n    role\n  }\n}\n\nfragment NoteDetailed on notes {\n  ...NoteBasic\n}\n\nfragment NoteWithEntity on notes {\n  ...NoteBasic\n}\n\nfragment NoteSummary on notes {\n  id\n  isImportant\n  createdAt\n  entityType\n  entityId\n  userId\n}\n\nfragment NoteListItem on notes {\n  ...NoteSummary\n  content\n  updatedAt\n  authorUser {\n    id\n    firstName\n    lastName\n    computedName\n    role\n  }\n}\n\nfragment NoteTableRow on notes {\n  ...NoteListItem\n}\n\nfragment NoteMinimal on notes {\n  id\n  isImportant\n  createdAt\n  userId\n}\n\nfragment NoteForAudit on notes {\n  id\n  isImportant\n  createdAt\n  updatedAt\n  userId\n  entityType\n  entityId\n}\n\nfragment NoteCard on notes {\n  ...NoteSummary\n  content\n  authorUser {\n    id\n    firstName\n    lastName\n    computedName\n    image\n  }\n}\n\nfragment NoteDashboard on notes {\n  ...NoteSummary\n  authorUser {\n    id\n    firstName\n    lastName\n    computedName\n  }\n}\n\nfragment PayrollNote on notes {\n  ...NoteBasic\n}\n\nfragment ClientNote on notes {\n  ...NoteBasic\n}\n\nfragment UserNote on notes {\n  ...NoteBasic\n}\n\nfragment ImportantNote on notes {\n  ...NoteListItem\n}\n\nfragment RecentNote on notes {\n  ...NoteCard\n}"): (typeof documents)["fragment NoteCore on notes {\n  id\n  content\n  isImportant\n  createdAt\n  updatedAt\n  userId\n  entityType\n  entityId\n}\n\nfragment NoteBasic on notes {\n  ...NoteCore\n  authorUser {\n    id\n    firstName\n    lastName\n    computedName\n    email\n    role\n  }\n}\n\nfragment NoteDetailed on notes {\n  ...NoteBasic\n}\n\nfragment NoteWithEntity on notes {\n  ...NoteBasic\n}\n\nfragment NoteSummary on notes {\n  id\n  isImportant\n  createdAt\n  entityType\n  entityId\n  userId\n}\n\nfragment NoteListItem on notes {\n  ...NoteSummary\n  content\n  updatedAt\n  authorUser {\n    id\n    firstName\n    lastName\n    computedName\n    role\n  }\n}\n\nfragment NoteTableRow on notes {\n  ...NoteListItem\n}\n\nfragment NoteMinimal on notes {\n  id\n  isImportant\n  createdAt\n  userId\n}\n\nfragment NoteForAudit on notes {\n  id\n  isImportant\n  createdAt\n  updatedAt\n  userId\n  entityType\n  entityId\n}\n\nfragment NoteCard on notes {\n  ...NoteSummary\n  content\n  authorUser {\n    id\n    firstName\n    lastName\n    computedName\n    image\n  }\n}\n\nfragment NoteDashboard on notes {\n  ...NoteSummary\n  authorUser {\n    id\n    firstName\n    lastName\n    computedName\n  }\n}\n\nfragment PayrollNote on notes {\n  ...NoteBasic\n}\n\nfragment ClientNote on notes {\n  ...NoteBasic\n}\n\nfragment UserNote on notes {\n  ...NoteBasic\n}\n\nfragment ImportantNote on notes {\n  ...NoteListItem\n}\n\nfragment RecentNote on notes {\n  ...NoteCard\n}"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "mutation CreateNote($object: notesInsertInput!) {\n  insertNote(object: $object) {\n    ...NoteDetailed\n  }\n}\n\nmutation AddNote($content: String!, $entityType: String!, $entityId: uuid!, $userId: uuid!, $isImportant: Boolean = false) {\n  insertNote(\n    object: {content: $content, entityType: $entityType, entityId: $entityId, userId: $userId, isImportant: $isImportant}\n  ) {\n    ...NoteDetailed\n  }\n}\n\nmutation UpdateNote($id: uuid!, $set: notesSetInput!) {\n  updateNoteById(pkColumns: {id: $id}, _set: $set) {\n    ...NoteDetailed\n  }\n}\n\nmutation UpdateNoteContent($id: uuid!, $content: String, $isImportant: Boolean) {\n  updateNoteById(\n    pkColumns: {id: $id}\n    _set: {content: $content, isImportant: $isImportant, updatedAt: \"now()\"}\n  ) {\n    ...NoteDetailed\n  }\n}\n\nmutation DeleteNote($id: uuid!) {\n  deleteNoteById(id: $id) {\n    id\n    content\n    entityType\n    entityId\n  }\n}\n\nmutation ToggleNoteImportance($id: uuid!, $isImportant: Boolean!) {\n  updateNoteById(\n    pkColumns: {id: $id}\n    _set: {isImportant: $isImportant, updatedAt: \"now()\"}\n  ) {\n    ...NoteBasic\n  }\n}\n\nmutation MarkNoteAsImportant($id: uuid!) {\n  updateNoteById(\n    pkColumns: {id: $id}\n    _set: {isImportant: true, updatedAt: \"now()\"}\n  ) {\n    ...NoteBasic\n  }\n}\n\nmutation UnmarkNoteAsImportant($id: uuid!) {\n  updateNoteById(\n    pkColumns: {id: $id}\n    _set: {isImportant: false, updatedAt: \"now()\"}\n  ) {\n    ...NoteBasic\n  }\n}\n\nmutation AddPayrollNote($payrollId: uuid!, $content: String!, $userId: uuid!, $isImportant: Boolean = false) {\n  insertNote(\n    object: {content: $content, entityType: \"payroll\", entityId: $payrollId, userId: $userId, isImportant: $isImportant}\n  ) {\n    ...PayrollNote\n  }\n}\n\nmutation AddClientNote($clientId: uuid!, $content: String!, $userId: uuid!, $isImportant: Boolean = false) {\n  insertNote(\n    object: {content: $content, entityType: \"client\", entityId: $clientId, userId: $userId, isImportant: $isImportant}\n  ) {\n    ...ClientNote\n  }\n}\n\nmutation AddUserNote($userId: uuid!, $content: String!, $authorUserId: uuid!, $isImportant: Boolean = false) {\n  insertNote(\n    object: {content: $content, entityType: \"user\", entityId: $userId, userId: $authorUserId, isImportant: $isImportant}\n  ) {\n    ...UserNote\n  }\n}\n\nmutation BulkDeleteNotes($ids: [uuid!]!) {\n  bulkDeleteNotes(where: {id: {_in: $ids}}) {\n    returning {\n      id\n      content\n      entityType\n      entityId\n    }\n    affectedRows\n  }\n}\n\nmutation BulkMarkNotesImportant($ids: [uuid!]!) {\n  bulkUpdateNotes(\n    where: {id: {_in: $ids}}\n    _set: {isImportant: true, updatedAt: \"now()\"}\n  ) {\n    returning {\n      ...NoteBasic\n    }\n    affectedRows\n  }\n}\n\nmutation BulkUnmarkNotesImportant($ids: [uuid!]!) {\n  bulkUpdateNotes(\n    where: {id: {_in: $ids}}\n    _set: {isImportant: false, updatedAt: \"now()\"}\n  ) {\n    returning {\n      ...NoteBasic\n    }\n    affectedRows\n  }\n}\n\nmutation BulkUpdateNotes($where: notesBoolExp!, $set: notesSetInput!) {\n  bulkUpdateNotes(where: $where, _set: $set) {\n    returning {\n      ...NoteBasic\n    }\n    affectedRows\n  }\n}\n\nmutation DeleteNotesByEntity($entityType: String!, $entityId: uuid!) {\n  bulkDeleteNotes(\n    where: {entityType: {_eq: $entityType}, entityId: {_eq: $entityId}}\n  ) {\n    returning {\n      id\n      content\n    }\n    affectedRows\n  }\n}\n\nmutation DeleteNotesByAuthor($authorUserId: uuid!) {\n  bulkDeleteNotes(where: {userId: {_eq: $authorUserId}}) {\n    returning {\n      id\n      content\n      entityType\n      entityId\n    }\n    affectedRows\n  }\n}\n\nmutation TransferNotesToNewAuthor($oldAuthorUserId: uuid!, $newAuthorUserId: uuid!) {\n  bulkUpdateNotes(\n    where: {userId: {_eq: $oldAuthorUserId}}\n    _set: {userId: $newAuthorUserId, updatedAt: \"now()\"}\n  ) {\n    returning {\n      ...NoteBasic\n    }\n    affectedRows\n  }\n}\n\nmutation TransferNotesToNewEntity($oldEntityType: String!, $oldEntityId: uuid!, $newEntityType: String!, $newEntityId: uuid!) {\n  bulkUpdateNotes(\n    where: {entityType: {_eq: $oldEntityType}, entityId: {_eq: $oldEntityId}}\n    _set: {entityType: $newEntityType, entityId: $newEntityId, updatedAt: \"now()\"}\n  ) {\n    returning {\n      ...NoteBasic\n    }\n    affectedRows\n  }\n}\n\nmutation AddNoteExtracted($content: String!, $entityType: String!, $entityId: uuid!, $userId: uuid!, $isImportant: Boolean = false) {\n  insertNote(\n    object: {content: $content, entityType: $entityType, entityId: $entityId, userId: $userId, isImportant: $isImportant}\n  ) {\n    ...NoteListItem\n  }\n}\n\nmutation UpdateNoteExtracted($id: uuid!, $content: String, $isImportant: Boolean) {\n  updateNoteById(\n    pkColumns: {id: $id}\n    _set: {content: $content, isImportant: $isImportant, updatedAt: \"now()\"}\n  ) {\n    ...NoteListItem\n  }\n}"): (typeof documents)["mutation CreateNote($object: notesInsertInput!) {\n  insertNote(object: $object) {\n    ...NoteDetailed\n  }\n}\n\nmutation AddNote($content: String!, $entityType: String!, $entityId: uuid!, $userId: uuid!, $isImportant: Boolean = false) {\n  insertNote(\n    object: {content: $content, entityType: $entityType, entityId: $entityId, userId: $userId, isImportant: $isImportant}\n  ) {\n    ...NoteDetailed\n  }\n}\n\nmutation UpdateNote($id: uuid!, $set: notesSetInput!) {\n  updateNoteById(pkColumns: {id: $id}, _set: $set) {\n    ...NoteDetailed\n  }\n}\n\nmutation UpdateNoteContent($id: uuid!, $content: String, $isImportant: Boolean) {\n  updateNoteById(\n    pkColumns: {id: $id}\n    _set: {content: $content, isImportant: $isImportant, updatedAt: \"now()\"}\n  ) {\n    ...NoteDetailed\n  }\n}\n\nmutation DeleteNote($id: uuid!) {\n  deleteNoteById(id: $id) {\n    id\n    content\n    entityType\n    entityId\n  }\n}\n\nmutation ToggleNoteImportance($id: uuid!, $isImportant: Boolean!) {\n  updateNoteById(\n    pkColumns: {id: $id}\n    _set: {isImportant: $isImportant, updatedAt: \"now()\"}\n  ) {\n    ...NoteBasic\n  }\n}\n\nmutation MarkNoteAsImportant($id: uuid!) {\n  updateNoteById(\n    pkColumns: {id: $id}\n    _set: {isImportant: true, updatedAt: \"now()\"}\n  ) {\n    ...NoteBasic\n  }\n}\n\nmutation UnmarkNoteAsImportant($id: uuid!) {\n  updateNoteById(\n    pkColumns: {id: $id}\n    _set: {isImportant: false, updatedAt: \"now()\"}\n  ) {\n    ...NoteBasic\n  }\n}\n\nmutation AddPayrollNote($payrollId: uuid!, $content: String!, $userId: uuid!, $isImportant: Boolean = false) {\n  insertNote(\n    object: {content: $content, entityType: \"payroll\", entityId: $payrollId, userId: $userId, isImportant: $isImportant}\n  ) {\n    ...PayrollNote\n  }\n}\n\nmutation AddClientNote($clientId: uuid!, $content: String!, $userId: uuid!, $isImportant: Boolean = false) {\n  insertNote(\n    object: {content: $content, entityType: \"client\", entityId: $clientId, userId: $userId, isImportant: $isImportant}\n  ) {\n    ...ClientNote\n  }\n}\n\nmutation AddUserNote($userId: uuid!, $content: String!, $authorUserId: uuid!, $isImportant: Boolean = false) {\n  insertNote(\n    object: {content: $content, entityType: \"user\", entityId: $userId, userId: $authorUserId, isImportant: $isImportant}\n  ) {\n    ...UserNote\n  }\n}\n\nmutation BulkDeleteNotes($ids: [uuid!]!) {\n  bulkDeleteNotes(where: {id: {_in: $ids}}) {\n    returning {\n      id\n      content\n      entityType\n      entityId\n    }\n    affectedRows\n  }\n}\n\nmutation BulkMarkNotesImportant($ids: [uuid!]!) {\n  bulkUpdateNotes(\n    where: {id: {_in: $ids}}\n    _set: {isImportant: true, updatedAt: \"now()\"}\n  ) {\n    returning {\n      ...NoteBasic\n    }\n    affectedRows\n  }\n}\n\nmutation BulkUnmarkNotesImportant($ids: [uuid!]!) {\n  bulkUpdateNotes(\n    where: {id: {_in: $ids}}\n    _set: {isImportant: false, updatedAt: \"now()\"}\n  ) {\n    returning {\n      ...NoteBasic\n    }\n    affectedRows\n  }\n}\n\nmutation BulkUpdateNotes($where: notesBoolExp!, $set: notesSetInput!) {\n  bulkUpdateNotes(where: $where, _set: $set) {\n    returning {\n      ...NoteBasic\n    }\n    affectedRows\n  }\n}\n\nmutation DeleteNotesByEntity($entityType: String!, $entityId: uuid!) {\n  bulkDeleteNotes(\n    where: {entityType: {_eq: $entityType}, entityId: {_eq: $entityId}}\n  ) {\n    returning {\n      id\n      content\n    }\n    affectedRows\n  }\n}\n\nmutation DeleteNotesByAuthor($authorUserId: uuid!) {\n  bulkDeleteNotes(where: {userId: {_eq: $authorUserId}}) {\n    returning {\n      id\n      content\n      entityType\n      entityId\n    }\n    affectedRows\n  }\n}\n\nmutation TransferNotesToNewAuthor($oldAuthorUserId: uuid!, $newAuthorUserId: uuid!) {\n  bulkUpdateNotes(\n    where: {userId: {_eq: $oldAuthorUserId}}\n    _set: {userId: $newAuthorUserId, updatedAt: \"now()\"}\n  ) {\n    returning {\n      ...NoteBasic\n    }\n    affectedRows\n  }\n}\n\nmutation TransferNotesToNewEntity($oldEntityType: String!, $oldEntityId: uuid!, $newEntityType: String!, $newEntityId: uuid!) {\n  bulkUpdateNotes(\n    where: {entityType: {_eq: $oldEntityType}, entityId: {_eq: $oldEntityId}}\n    _set: {entityType: $newEntityType, entityId: $newEntityId, updatedAt: \"now()\"}\n  ) {\n    returning {\n      ...NoteBasic\n    }\n    affectedRows\n  }\n}\n\nmutation AddNoteExtracted($content: String!, $entityType: String!, $entityId: uuid!, $userId: uuid!, $isImportant: Boolean = false) {\n  insertNote(\n    object: {content: $content, entityType: $entityType, entityId: $entityId, userId: $userId, isImportant: $isImportant}\n  ) {\n    ...NoteListItem\n  }\n}\n\nmutation UpdateNoteExtracted($id: uuid!, $content: String, $isImportant: Boolean) {\n  updateNoteById(\n    pkColumns: {id: $id}\n    _set: {content: $content, isImportant: $isImportant, updatedAt: \"now()\"}\n  ) {\n    ...NoteListItem\n  }\n}"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "query GetNotes($limit: Int = 50, $offset: Int = 0, $where: notesBoolExp) {\n  notes(limit: $limit, offset: $offset, where: $where, orderBy: {createdAt: DESC}) {\n    ...NoteListItem\n  }\n  notesAggregate(where: $where) {\n    aggregate {\n      count\n    }\n  }\n}\n\nquery GetNoteById($id: uuid!) {\n  noteById(id: $id) {\n    ...NoteDetailed\n  }\n}\n\nquery GetNoteBasic($id: uuid!) {\n  noteById(id: $id) {\n    ...NoteBasic\n  }\n}\n\nquery GetNotesByEntity($entityType: String!, $entityId: uuid!) {\n  notes(\n    where: {entityType: {_eq: $entityType}, entityId: {_eq: $entityId}}\n    orderBy: {createdAt: DESC}\n  ) {\n    ...NoteListItem\n  }\n}\n\nquery GetPayrollNotes($payrollId: uuid!) {\n  notes(\n    where: {entityType: {_eq: \"payroll\"}, entityId: {_eq: $payrollId}}\n    orderBy: {createdAt: DESC}\n  ) {\n    ...PayrollNote\n  }\n}\n\nquery GetClientNotes($clientId: uuid!) {\n  notes(\n    where: {entityType: {_eq: \"client\"}, entityId: {_eq: $clientId}}\n    orderBy: {createdAt: DESC}\n  ) {\n    ...ClientNote\n  }\n}\n\nquery GetUserNotes($userId: uuid!) {\n  notes(\n    where: {entityType: {_eq: \"user\"}, entityId: {_eq: $userId}}\n    orderBy: {createdAt: DESC}\n  ) {\n    ...UserNote\n  }\n}\n\nquery GetNotesByAuthor($authorUserId: uuid!) {\n  notes(where: {userId: {_eq: $authorUserId}}, orderBy: {createdAt: DESC}) {\n    ...NoteListItem\n  }\n}\n\nquery GetMyNotes($userId: uuid!) {\n  notes(where: {userId: {_eq: $userId}}, orderBy: {updatedAt: DESC}) {\n    ...NoteListItem\n  }\n}\n\nquery GetImportantNotes($limit: Int = 20) {\n  notes(\n    where: {isImportant: {_eq: true}}\n    orderBy: {createdAt: DESC}\n    limit: $limit\n  ) {\n    ...ImportantNote\n  }\n}\n\nquery GetImportantNotesByEntity($entityType: String!, $entityId: uuid!) {\n  notes(\n    where: {entityType: {_eq: $entityType}, entityId: {_eq: $entityId}, isImportant: {_eq: true}}\n    orderBy: {createdAt: DESC}\n  ) {\n    ...ImportantNote\n  }\n}\n\nquery GetRecentNotes($limit: Int = 10) {\n  notes(orderBy: {createdAt: DESC}, limit: $limit) {\n    ...RecentNote\n  }\n}\n\nquery GetRecentNotesByUser($userId: uuid!, $limit: Int = 10) {\n  notes(\n    where: {userId: {_eq: $userId}}\n    orderBy: {createdAt: DESC}\n    limit: $limit\n  ) {\n    ...RecentNote\n  }\n}\n\nquery SearchNotes($searchTerm: String!, $limit: Int = 50) {\n  notes(\n    where: {_or: [{content: {_ilike: $searchTerm}}, {authorUser: {computedName: {_ilike: $searchTerm}}}]}\n    orderBy: {createdAt: DESC}\n    limit: $limit\n  ) {\n    ...NoteListItem\n  }\n}\n\nquery SearchNotesByEntity($entityType: String!, $entityId: uuid!, $searchTerm: String!) {\n  notes(\n    where: {_and: [{entityType: {_eq: $entityType}}, {entityId: {_eq: $entityId}}, {_or: [{content: {_ilike: $searchTerm}}, {content: {_ilike: $searchTerm}}]}]}\n    orderBy: {createdAt: DESC}\n  ) {\n    ...NoteListItem\n  }\n}\n\nquery FilterNotesByDateRange($startDate: timestamp!, $endDate: timestamp!, $entityType: String, $entityId: uuid) {\n  notes(\n    where: {_and: [{createdAt: {_gte: $startDate}}, {createdAt: {_lte: $endDate}}, {entityType: {_eq: $entityType}}, {entityId: {_eq: $entityId}}]}\n    orderBy: {createdAt: DESC}\n  ) {\n    ...NoteListItem\n  }\n}\n\nquery GetNoteDashboardStats($userId: uuid!) {\n  totalNotes: notesAggregate {\n    aggregate {\n      count\n    }\n  }\n  importantNotes: notesAggregate(where: {isImportant: {_eq: true}}) {\n    aggregate {\n      count\n    }\n  }\n  recentNotes: notes(orderBy: {createdAt: DESC}, limit: 5) {\n    ...NoteDashboard\n  }\n  myRecentNotes: notes(\n    where: {userId: {_eq: $userId}}\n    orderBy: {createdAt: DESC}\n    limit: 3\n  ) {\n    ...NoteDashboard\n  }\n}\n\nquery GetNoteActivity($limit: Int = 20) {\n  notes(orderBy: {updatedAt: DESC}, limit: $limit) {\n    ...NoteCard\n  }\n}\n\nquery GetEntityNoteSummary($entityType: String!, $entityId: uuid!) {\n  totalCount: notesAggregate(\n    where: {entityType: {_eq: $entityType}, entityId: {_eq: $entityId}}\n  ) {\n    aggregate {\n      count\n    }\n  }\n  importantCount: notesAggregate(\n    where: {entityType: {_eq: $entityType}, entityId: {_eq: $entityId}, isImportant: {_eq: true}}\n  ) {\n    aggregate {\n      count\n    }\n  }\n  recentNotes: notes(\n    where: {entityType: {_eq: $entityType}, entityId: {_eq: $entityId}}\n    orderBy: {createdAt: DESC}\n    limit: 3\n  ) {\n    ...NoteCard\n  }\n}\n\nquery GetNotesForBulkUpdate($ids: [uuid!]!) {\n  notes(where: {id: {_in: $ids}}) {\n    ...NoteBasic\n  }\n}\n\nquery GetNotesByAuthorAndDateRange($authorUserId: uuid!, $startDate: timestamp!, $endDate: timestamp!) {\n  notes(\n    where: {_and: [{userId: {_eq: $authorUserId}}, {createdAt: {_gte: $startDate}}, {createdAt: {_lte: $endDate}}]}\n    orderBy: {createdAt: DESC}\n  ) {\n    ...NoteListItem\n  }\n}\n\nquery GetNotesForAudit($limit: Int = 100, $offset: Int = 0, $where: notesBoolExp = {}) {\n  notes(limit: $limit, offset: $offset, where: $where, orderBy: {createdAt: DESC}) {\n    ...NoteForAudit\n  }\n}\n\nquery GetNotesByEntityType($entityType: String!) {\n  notes(where: {entityType: {_eq: $entityType}}, orderBy: {createdAt: DESC}) {\n    ...NoteListItem\n  }\n}\n\nquery GetNotesPaginated($limit: Int = 20, $offset: Int = 0, $where: notesBoolExp = {}, $orderBy: [notesOrderBy!] = [{createdAt: DESC}]) {\n  notes(limit: $limit, offset: $offset, where: $where, orderBy: $orderBy) {\n    ...NoteListItem\n  }\n  notesAggregate(where: $where) {\n    aggregate {\n      count\n    }\n  }\n}\n\nquery GetEntityNotesPaginated($entityType: String!, $entityId: uuid!, $limit: Int = 20, $offset: Int = 0) {\n  notes(\n    where: {entityType: {_eq: $entityType}, entityId: {_eq: $entityId}}\n    orderBy: {createdAt: DESC}\n    limit: $limit\n    offset: $offset\n  ) {\n    ...NoteListItem\n  }\n  entityNotesAggregate: notesAggregate(\n    where: {entityType: {_eq: $entityType}, entityId: {_eq: $entityId}}\n  ) {\n    aggregate {\n      count\n    }\n  }\n}\n\nquery SearchNotesPaginated($searchTerm: String!, $limit: Int = 20, $offset: Int = 0) {\n  notes(\n    where: {_or: [{content: {_ilike: $searchTerm}}, {authorUser: {computedName: {_ilike: $searchTerm}}}]}\n    orderBy: {createdAt: DESC}\n    limit: $limit\n    offset: $offset\n  ) {\n    ...NoteListItem\n  }\n  searchAggregate: notesAggregate(\n    where: {_or: [{content: {_ilike: $searchTerm}}, {authorUser: {computedName: {_ilike: $searchTerm}}}]}\n  ) {\n    aggregate {\n      count\n    }\n  }\n}\n\nquery GetNotesQuickList($entityType: String!, $entityId: uuid!) {\n  notes(\n    where: {entityType: {_eq: $entityType}, entityId: {_eq: $entityId}}\n    orderBy: {createdAt: DESC}\n    limit: 5\n  ) {\n    ...NoteMinimal\n  }\n}\n\nquery GetImportantNotesQuickList($entityType: String!, $entityId: uuid!) {\n  notes(\n    where: {entityType: {_eq: $entityType}, entityId: {_eq: $entityId}, isImportant: {_eq: true}}\n    orderBy: {createdAt: DESC}\n  ) {\n    ...NoteMinimal\n  }\n}\n\nquery GetNotesExtracted($entityType: String!, $entityId: uuid!) {\n  notes(\n    where: {entityType: {_eq: $entityType}, entityId: {_eq: $entityId}}\n    orderBy: {createdAt: DESC}\n  ) {\n    ...NoteListItem\n  }\n}"): (typeof documents)["query GetNotes($limit: Int = 50, $offset: Int = 0, $where: notesBoolExp) {\n  notes(limit: $limit, offset: $offset, where: $where, orderBy: {createdAt: DESC}) {\n    ...NoteListItem\n  }\n  notesAggregate(where: $where) {\n    aggregate {\n      count\n    }\n  }\n}\n\nquery GetNoteById($id: uuid!) {\n  noteById(id: $id) {\n    ...NoteDetailed\n  }\n}\n\nquery GetNoteBasic($id: uuid!) {\n  noteById(id: $id) {\n    ...NoteBasic\n  }\n}\n\nquery GetNotesByEntity($entityType: String!, $entityId: uuid!) {\n  notes(\n    where: {entityType: {_eq: $entityType}, entityId: {_eq: $entityId}}\n    orderBy: {createdAt: DESC}\n  ) {\n    ...NoteListItem\n  }\n}\n\nquery GetPayrollNotes($payrollId: uuid!) {\n  notes(\n    where: {entityType: {_eq: \"payroll\"}, entityId: {_eq: $payrollId}}\n    orderBy: {createdAt: DESC}\n  ) {\n    ...PayrollNote\n  }\n}\n\nquery GetClientNotes($clientId: uuid!) {\n  notes(\n    where: {entityType: {_eq: \"client\"}, entityId: {_eq: $clientId}}\n    orderBy: {createdAt: DESC}\n  ) {\n    ...ClientNote\n  }\n}\n\nquery GetUserNotes($userId: uuid!) {\n  notes(\n    where: {entityType: {_eq: \"user\"}, entityId: {_eq: $userId}}\n    orderBy: {createdAt: DESC}\n  ) {\n    ...UserNote\n  }\n}\n\nquery GetNotesByAuthor($authorUserId: uuid!) {\n  notes(where: {userId: {_eq: $authorUserId}}, orderBy: {createdAt: DESC}) {\n    ...NoteListItem\n  }\n}\n\nquery GetMyNotes($userId: uuid!) {\n  notes(where: {userId: {_eq: $userId}}, orderBy: {updatedAt: DESC}) {\n    ...NoteListItem\n  }\n}\n\nquery GetImportantNotes($limit: Int = 20) {\n  notes(\n    where: {isImportant: {_eq: true}}\n    orderBy: {createdAt: DESC}\n    limit: $limit\n  ) {\n    ...ImportantNote\n  }\n}\n\nquery GetImportantNotesByEntity($entityType: String!, $entityId: uuid!) {\n  notes(\n    where: {entityType: {_eq: $entityType}, entityId: {_eq: $entityId}, isImportant: {_eq: true}}\n    orderBy: {createdAt: DESC}\n  ) {\n    ...ImportantNote\n  }\n}\n\nquery GetRecentNotes($limit: Int = 10) {\n  notes(orderBy: {createdAt: DESC}, limit: $limit) {\n    ...RecentNote\n  }\n}\n\nquery GetRecentNotesByUser($userId: uuid!, $limit: Int = 10) {\n  notes(\n    where: {userId: {_eq: $userId}}\n    orderBy: {createdAt: DESC}\n    limit: $limit\n  ) {\n    ...RecentNote\n  }\n}\n\nquery SearchNotes($searchTerm: String!, $limit: Int = 50) {\n  notes(\n    where: {_or: [{content: {_ilike: $searchTerm}}, {authorUser: {computedName: {_ilike: $searchTerm}}}]}\n    orderBy: {createdAt: DESC}\n    limit: $limit\n  ) {\n    ...NoteListItem\n  }\n}\n\nquery SearchNotesByEntity($entityType: String!, $entityId: uuid!, $searchTerm: String!) {\n  notes(\n    where: {_and: [{entityType: {_eq: $entityType}}, {entityId: {_eq: $entityId}}, {_or: [{content: {_ilike: $searchTerm}}, {content: {_ilike: $searchTerm}}]}]}\n    orderBy: {createdAt: DESC}\n  ) {\n    ...NoteListItem\n  }\n}\n\nquery FilterNotesByDateRange($startDate: timestamp!, $endDate: timestamp!, $entityType: String, $entityId: uuid) {\n  notes(\n    where: {_and: [{createdAt: {_gte: $startDate}}, {createdAt: {_lte: $endDate}}, {entityType: {_eq: $entityType}}, {entityId: {_eq: $entityId}}]}\n    orderBy: {createdAt: DESC}\n  ) {\n    ...NoteListItem\n  }\n}\n\nquery GetNoteDashboardStats($userId: uuid!) {\n  totalNotes: notesAggregate {\n    aggregate {\n      count\n    }\n  }\n  importantNotes: notesAggregate(where: {isImportant: {_eq: true}}) {\n    aggregate {\n      count\n    }\n  }\n  recentNotes: notes(orderBy: {createdAt: DESC}, limit: 5) {\n    ...NoteDashboard\n  }\n  myRecentNotes: notes(\n    where: {userId: {_eq: $userId}}\n    orderBy: {createdAt: DESC}\n    limit: 3\n  ) {\n    ...NoteDashboard\n  }\n}\n\nquery GetNoteActivity($limit: Int = 20) {\n  notes(orderBy: {updatedAt: DESC}, limit: $limit) {\n    ...NoteCard\n  }\n}\n\nquery GetEntityNoteSummary($entityType: String!, $entityId: uuid!) {\n  totalCount: notesAggregate(\n    where: {entityType: {_eq: $entityType}, entityId: {_eq: $entityId}}\n  ) {\n    aggregate {\n      count\n    }\n  }\n  importantCount: notesAggregate(\n    where: {entityType: {_eq: $entityType}, entityId: {_eq: $entityId}, isImportant: {_eq: true}}\n  ) {\n    aggregate {\n      count\n    }\n  }\n  recentNotes: notes(\n    where: {entityType: {_eq: $entityType}, entityId: {_eq: $entityId}}\n    orderBy: {createdAt: DESC}\n    limit: 3\n  ) {\n    ...NoteCard\n  }\n}\n\nquery GetNotesForBulkUpdate($ids: [uuid!]!) {\n  notes(where: {id: {_in: $ids}}) {\n    ...NoteBasic\n  }\n}\n\nquery GetNotesByAuthorAndDateRange($authorUserId: uuid!, $startDate: timestamp!, $endDate: timestamp!) {\n  notes(\n    where: {_and: [{userId: {_eq: $authorUserId}}, {createdAt: {_gte: $startDate}}, {createdAt: {_lte: $endDate}}]}\n    orderBy: {createdAt: DESC}\n  ) {\n    ...NoteListItem\n  }\n}\n\nquery GetNotesForAudit($limit: Int = 100, $offset: Int = 0, $where: notesBoolExp = {}) {\n  notes(limit: $limit, offset: $offset, where: $where, orderBy: {createdAt: DESC}) {\n    ...NoteForAudit\n  }\n}\n\nquery GetNotesByEntityType($entityType: String!) {\n  notes(where: {entityType: {_eq: $entityType}}, orderBy: {createdAt: DESC}) {\n    ...NoteListItem\n  }\n}\n\nquery GetNotesPaginated($limit: Int = 20, $offset: Int = 0, $where: notesBoolExp = {}, $orderBy: [notesOrderBy!] = [{createdAt: DESC}]) {\n  notes(limit: $limit, offset: $offset, where: $where, orderBy: $orderBy) {\n    ...NoteListItem\n  }\n  notesAggregate(where: $where) {\n    aggregate {\n      count\n    }\n  }\n}\n\nquery GetEntityNotesPaginated($entityType: String!, $entityId: uuid!, $limit: Int = 20, $offset: Int = 0) {\n  notes(\n    where: {entityType: {_eq: $entityType}, entityId: {_eq: $entityId}}\n    orderBy: {createdAt: DESC}\n    limit: $limit\n    offset: $offset\n  ) {\n    ...NoteListItem\n  }\n  entityNotesAggregate: notesAggregate(\n    where: {entityType: {_eq: $entityType}, entityId: {_eq: $entityId}}\n  ) {\n    aggregate {\n      count\n    }\n  }\n}\n\nquery SearchNotesPaginated($searchTerm: String!, $limit: Int = 20, $offset: Int = 0) {\n  notes(\n    where: {_or: [{content: {_ilike: $searchTerm}}, {authorUser: {computedName: {_ilike: $searchTerm}}}]}\n    orderBy: {createdAt: DESC}\n    limit: $limit\n    offset: $offset\n  ) {\n    ...NoteListItem\n  }\n  searchAggregate: notesAggregate(\n    where: {_or: [{content: {_ilike: $searchTerm}}, {authorUser: {computedName: {_ilike: $searchTerm}}}]}\n  ) {\n    aggregate {\n      count\n    }\n  }\n}\n\nquery GetNotesQuickList($entityType: String!, $entityId: uuid!) {\n  notes(\n    where: {entityType: {_eq: $entityType}, entityId: {_eq: $entityId}}\n    orderBy: {createdAt: DESC}\n    limit: 5\n  ) {\n    ...NoteMinimal\n  }\n}\n\nquery GetImportantNotesQuickList($entityType: String!, $entityId: uuid!) {\n  notes(\n    where: {entityType: {_eq: $entityType}, entityId: {_eq: $entityId}, isImportant: {_eq: true}}\n    orderBy: {createdAt: DESC}\n  ) {\n    ...NoteMinimal\n  }\n}\n\nquery GetNotesExtracted($entityType: String!, $entityId: uuid!) {\n  notes(\n    where: {entityType: {_eq: $entityType}, entityId: {_eq: $entityId}}\n    orderBy: {createdAt: DESC}\n  ) {\n    ...NoteListItem\n  }\n}"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "subscription NoteUpdates($entityType: String!, $entityId: uuid!) {\n  notes(\n    where: {entityType: {_eq: $entityType}, entityId: {_eq: $entityId}}\n    orderBy: {createdAt: DESC}\n  ) {\n    ...NoteListItem\n  }\n}\n\nsubscription NotesByEntityUpdates($entityType: String!, $entityId: uuid!) {\n  notes(\n    where: {entityType: {_eq: $entityType}, entityId: {_eq: $entityId}}\n    orderBy: {updatedAt: DESC}\n  ) {\n    ...NoteListItem\n  }\n}\n\nsubscription SingleNoteUpdates($id: uuid!) {\n  notes(where: {id: {_eq: $id}}) {\n    ...NoteDetailed\n  }\n}\n\nsubscription PayrollNotesUpdates($payrollId: uuid!) {\n  notes(\n    where: {entityType: {_eq: \"payroll\"}, entityId: {_eq: $payrollId}}\n    orderBy: {createdAt: DESC}\n  ) {\n    ...PayrollNote\n  }\n}\n\nsubscription ClientNotesUpdates($clientId: uuid!) {\n  notes(\n    where: {entityType: {_eq: \"client\"}, entityId: {_eq: $clientId}}\n    orderBy: {createdAt: DESC}\n  ) {\n    ...ClientNote\n  }\n}\n\nsubscription UserNotesUpdates($userId: uuid!) {\n  notes(\n    where: {entityType: {_eq: \"user\"}, entityId: {_eq: $userId}}\n    orderBy: {createdAt: DESC}\n  ) {\n    ...UserNote\n  }\n}\n\nsubscription MyNotesUpdates($authorUserId: uuid!) {\n  notes(where: {userId: {_eq: $authorUserId}}, orderBy: {updatedAt: DESC}) {\n    ...NoteListItem\n  }\n}\n\nsubscription RecentNotesUpdates {\n  notes(orderBy: {createdAt: DESC}, limit: 20) {\n    ...RecentNote\n  }\n}\n\nsubscription ImportantNotesUpdates($limit: Int = 10) {\n  notes(\n    where: {isImportant: {_eq: true}}\n    orderBy: {createdAt: DESC}\n    limit: $limit\n  ) {\n    ...ImportantNote\n  }\n}\n\nsubscription ImportantNotesByEntityUpdates($entityType: String!, $entityId: uuid!) {\n  notes(\n    where: {entityType: {_eq: $entityType}, entityId: {_eq: $entityId}, isImportant: {_eq: true}}\n    orderBy: {createdAt: DESC}\n  ) {\n    ...ImportantNote\n  }\n}\n\nsubscription NoteActivityUpdates {\n  notes(orderBy: {updatedAt: DESC}, limit: 15) {\n    ...NoteCard\n  }\n}\n\nsubscription TotalNotesUpdates {\n  notesAggregate {\n    aggregate {\n      count\n    }\n  }\n}\n\nsubscription ImportantNotesCountUpdates {\n  notesAggregate(where: {isImportant: {_eq: true}}) {\n    aggregate {\n      count\n    }\n  }\n}\n\nsubscription TodaysNotesUpdates {\n  notesAggregate(where: {createdAt: {_gte: \"today\"}}) {\n    aggregate {\n      count\n    }\n  }\n}\n\nsubscription EntityNotesUpdates($entityType: String!, $entityId: uuid!) {\n  notesAggregate(\n    where: {entityType: {_eq: $entityType}, entityId: {_eq: $entityId}}\n  ) {\n    aggregate {\n      count\n    }\n  }\n}\n\nsubscription EntityImportantNotesUpdates($entityType: String!, $entityId: uuid!) {\n  notesAggregate(\n    where: {entityType: {_eq: $entityType}, entityId: {_eq: $entityId}, isImportant: {_eq: true}}\n  ) {\n    aggregate {\n      count\n    }\n  }\n}\n\nsubscription UserNoteActivityUpdates($authorUserId: uuid!) {\n  notes(\n    where: {userId: {_eq: $authorUserId}}\n    orderBy: {updatedAt: DESC}\n    limit: 10\n  ) {\n    ...NoteCard\n  }\n}\n\nsubscription NotesByDateRangeUpdates($startDate: timestamp!, $endDate: timestamp!) {\n  notes(\n    where: {createdAt: {_gte: $startDate, _lte: $endDate}}\n    orderBy: {createdAt: DESC}\n  ) {\n    ...NoteListItem\n  }\n}\n\nsubscription NoteSearchUpdates($searchTerm: String!) {\n  notes(\n    where: {_or: [{content: {_ilike: $searchTerm}}, {authorUser: {computedName: {_ilike: $searchTerm}}}]}\n    orderBy: {createdAt: DESC}\n  ) {\n    ...NoteListItem\n  }\n}\n\nsubscription TeamNotesUpdates($teamUserIds: [uuid!]!) {\n  notes(where: {userId: {_in: $teamUserIds}}, orderBy: {createdAt: DESC}) {\n    ...NoteListItem\n  }\n}\n\nsubscription EntityTypeNotesUpdates($entityType: String!) {\n  notes(where: {entityType: {_eq: $entityType}}, orderBy: {createdAt: DESC}) {\n    ...NoteListItem\n  }\n}\n\nsubscription NoteChangesUpdates($noteId: uuid!) {\n  notes(where: {id: {_eq: $noteId}}) {\n    id\n    content\n    isImportant\n    updatedAt\n    authorUser {\n      id\n      firstName\n      lastName\n      computedName\n    }\n  }\n}\n\nsubscription NewNotesUpdates {\n  notes(\n    where: {createdAt: {_gte: \"now() - interval '5 minutes'\"}}\n    orderBy: {createdAt: DESC}\n  ) {\n    ...NoteCard\n    createdAt\n  }\n}\n\nsubscription RecentNotesListUpdates {\n  notes(orderBy: {createdAt: DESC}, limit: 5) {\n    id\n    content\n    createdAt\n    authorUser {\n      firstName\n      lastName\n      computedName\n    }\n    entityType\n  }\n}\n\nsubscription NotesCountUpdates {\n  notesAggregate {\n    aggregate {\n      count\n    }\n  }\n}\n\nsubscription NoteAuditUpdates {\n  notes(orderBy: {updatedAt: DESC}, limit: 50) {\n    ...NoteForAudit\n  }\n}\n\nsubscription ImportantNoteChangesUpdates {\n  notes(where: {isImportant: {_eq: true}}, orderBy: {updatedAt: DESC}) {\n    ...ImportantNote\n  }\n}"): (typeof documents)["subscription NoteUpdates($entityType: String!, $entityId: uuid!) {\n  notes(\n    where: {entityType: {_eq: $entityType}, entityId: {_eq: $entityId}}\n    orderBy: {createdAt: DESC}\n  ) {\n    ...NoteListItem\n  }\n}\n\nsubscription NotesByEntityUpdates($entityType: String!, $entityId: uuid!) {\n  notes(\n    where: {entityType: {_eq: $entityType}, entityId: {_eq: $entityId}}\n    orderBy: {updatedAt: DESC}\n  ) {\n    ...NoteListItem\n  }\n}\n\nsubscription SingleNoteUpdates($id: uuid!) {\n  notes(where: {id: {_eq: $id}}) {\n    ...NoteDetailed\n  }\n}\n\nsubscription PayrollNotesUpdates($payrollId: uuid!) {\n  notes(\n    where: {entityType: {_eq: \"payroll\"}, entityId: {_eq: $payrollId}}\n    orderBy: {createdAt: DESC}\n  ) {\n    ...PayrollNote\n  }\n}\n\nsubscription ClientNotesUpdates($clientId: uuid!) {\n  notes(\n    where: {entityType: {_eq: \"client\"}, entityId: {_eq: $clientId}}\n    orderBy: {createdAt: DESC}\n  ) {\n    ...ClientNote\n  }\n}\n\nsubscription UserNotesUpdates($userId: uuid!) {\n  notes(\n    where: {entityType: {_eq: \"user\"}, entityId: {_eq: $userId}}\n    orderBy: {createdAt: DESC}\n  ) {\n    ...UserNote\n  }\n}\n\nsubscription MyNotesUpdates($authorUserId: uuid!) {\n  notes(where: {userId: {_eq: $authorUserId}}, orderBy: {updatedAt: DESC}) {\n    ...NoteListItem\n  }\n}\n\nsubscription RecentNotesUpdates {\n  notes(orderBy: {createdAt: DESC}, limit: 20) {\n    ...RecentNote\n  }\n}\n\nsubscription ImportantNotesUpdates($limit: Int = 10) {\n  notes(\n    where: {isImportant: {_eq: true}}\n    orderBy: {createdAt: DESC}\n    limit: $limit\n  ) {\n    ...ImportantNote\n  }\n}\n\nsubscription ImportantNotesByEntityUpdates($entityType: String!, $entityId: uuid!) {\n  notes(\n    where: {entityType: {_eq: $entityType}, entityId: {_eq: $entityId}, isImportant: {_eq: true}}\n    orderBy: {createdAt: DESC}\n  ) {\n    ...ImportantNote\n  }\n}\n\nsubscription NoteActivityUpdates {\n  notes(orderBy: {updatedAt: DESC}, limit: 15) {\n    ...NoteCard\n  }\n}\n\nsubscription TotalNotesUpdates {\n  notesAggregate {\n    aggregate {\n      count\n    }\n  }\n}\n\nsubscription ImportantNotesCountUpdates {\n  notesAggregate(where: {isImportant: {_eq: true}}) {\n    aggregate {\n      count\n    }\n  }\n}\n\nsubscription TodaysNotesUpdates {\n  notesAggregate(where: {createdAt: {_gte: \"today\"}}) {\n    aggregate {\n      count\n    }\n  }\n}\n\nsubscription EntityNotesUpdates($entityType: String!, $entityId: uuid!) {\n  notesAggregate(\n    where: {entityType: {_eq: $entityType}, entityId: {_eq: $entityId}}\n  ) {\n    aggregate {\n      count\n    }\n  }\n}\n\nsubscription EntityImportantNotesUpdates($entityType: String!, $entityId: uuid!) {\n  notesAggregate(\n    where: {entityType: {_eq: $entityType}, entityId: {_eq: $entityId}, isImportant: {_eq: true}}\n  ) {\n    aggregate {\n      count\n    }\n  }\n}\n\nsubscription UserNoteActivityUpdates($authorUserId: uuid!) {\n  notes(\n    where: {userId: {_eq: $authorUserId}}\n    orderBy: {updatedAt: DESC}\n    limit: 10\n  ) {\n    ...NoteCard\n  }\n}\n\nsubscription NotesByDateRangeUpdates($startDate: timestamp!, $endDate: timestamp!) {\n  notes(\n    where: {createdAt: {_gte: $startDate, _lte: $endDate}}\n    orderBy: {createdAt: DESC}\n  ) {\n    ...NoteListItem\n  }\n}\n\nsubscription NoteSearchUpdates($searchTerm: String!) {\n  notes(\n    where: {_or: [{content: {_ilike: $searchTerm}}, {authorUser: {computedName: {_ilike: $searchTerm}}}]}\n    orderBy: {createdAt: DESC}\n  ) {\n    ...NoteListItem\n  }\n}\n\nsubscription TeamNotesUpdates($teamUserIds: [uuid!]!) {\n  notes(where: {userId: {_in: $teamUserIds}}, orderBy: {createdAt: DESC}) {\n    ...NoteListItem\n  }\n}\n\nsubscription EntityTypeNotesUpdates($entityType: String!) {\n  notes(where: {entityType: {_eq: $entityType}}, orderBy: {createdAt: DESC}) {\n    ...NoteListItem\n  }\n}\n\nsubscription NoteChangesUpdates($noteId: uuid!) {\n  notes(where: {id: {_eq: $noteId}}) {\n    id\n    content\n    isImportant\n    updatedAt\n    authorUser {\n      id\n      firstName\n      lastName\n      computedName\n    }\n  }\n}\n\nsubscription NewNotesUpdates {\n  notes(\n    where: {createdAt: {_gte: \"now() - interval '5 minutes'\"}}\n    orderBy: {createdAt: DESC}\n  ) {\n    ...NoteCard\n    createdAt\n  }\n}\n\nsubscription RecentNotesListUpdates {\n  notes(orderBy: {createdAt: DESC}, limit: 5) {\n    id\n    content\n    createdAt\n    authorUser {\n      firstName\n      lastName\n      computedName\n    }\n    entityType\n  }\n}\n\nsubscription NotesCountUpdates {\n  notesAggregate {\n    aggregate {\n      count\n    }\n  }\n}\n\nsubscription NoteAuditUpdates {\n  notes(orderBy: {updatedAt: DESC}, limit: 50) {\n    ...NoteForAudit\n  }\n}\n\nsubscription ImportantNoteChangesUpdates {\n  notes(where: {isImportant: {_eq: true}}, orderBy: {updatedAt: DESC}) {\n    ...ImportantNote\n  }\n}"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "fragment UserMinimal on users {\n  id\n  firstName\n  lastName\n  computedName\n  email\n}\n\nfragment UserCoreShared on users {\n  ...UserMinimal\n  role\n  isActive\n}\n\nfragment UserBasic on users {\n  ...UserCoreShared\n  clerkUserId\n  createdAt\n  updatedAt\n}\n\nfragment UserBase on users {\n  ...UserBasic\n}\n\nfragment UserWithRole on users {\n  ...UserBasic\n  username\n  isStaff\n}\n\nfragment UserProfile on users {\n  ...UserWithRole\n  clerkUserId\n  image\n  managerId\n  deactivatedAt\n  deactivatedBy\n  managerUser {\n    ...UserMinimal\n  }\n}\n\nfragment UserSearchResult on users {\n  ...UserCoreShared\n  username\n  isStaff\n}\n\nfragment ClientMinimal on clients {\n  id\n  name\n}\n\nfragment ClientBase on clients {\n  id\n  name\n  active\n  contactEmail\n  contactPerson\n  contactPhone\n  createdAt\n}\n\nfragment ClientWithStats on clients {\n  ...ClientBase\n  currentEmployeeCount: payrollsAggregate(\n    where: {supersededDate: {_isNull: true}}\n  ) {\n    aggregate {\n      sum {\n        employeeCount\n      }\n    }\n  }\n  activePayrollCount: payrollsAggregate(\n    where: {supersededDate: {_isNull: true}, status: {_eq: \"Active\"}}\n  ) {\n    aggregate {\n      count\n    }\n  }\n}\n\nfragment ClientListBase on clients {\n  ...ClientBase\n  payrollCount: payrollsAggregate(where: {supersededDate: {_isNull: true}}) {\n    aggregate {\n      count\n    }\n  }\n}\n\nfragment PayrollMinimal on payrolls {\n  id\n  name\n  employeeCount\n  status\n}\n\nfragment PayrollBase on payrolls {\n  id\n  name\n  employeeCount\n  status\n  payrollSystem\n  processingTime\n  processingDaysBeforeEft\n  versionNumber\n  supersededDate\n  createdAt\n  updatedAt\n}\n\nfragment PayrollWithClient on payrolls {\n  ...PayrollBase\n  clientId\n  client {\n    id\n    name\n    active\n  }\n}\n\nfragment PayrollListItem on payrolls {\n  ...PayrollWithClient\n  primaryConsultantUserId\n  backupConsultantUserId\n  managerUserId\n  createdByUserId\n  cycleId\n  dateTypeId\n  dateValue\n  payrollCycle {\n    id\n    name\n    description\n  }\n  payrollDateType {\n    id\n    name\n    description\n  }\n  primaryConsultant {\n    ...UserMinimal\n  }\n  backupConsultant {\n    ...UserMinimal\n  }\n  manager {\n    ...UserMinimal\n  }\n}\n\nfragment PayrollWithDates on payrolls {\n  ...PayrollBase\n  goLiveDate\n  payrollDates(orderBy: {originalEftDate: ASC}) {\n    id\n    originalEftDate\n    adjustedEftDate\n    notes\n  }\n}\n\nfragment PayrollFullDetail on payrolls {\n  ...PayrollWithDates\n  ...PayrollWithClient\n  dateTypeId\n  cycleId\n  dateValue\n  versionReason\n  supersededDate\n  parentPayrollId\n  parentPayroll {\n    id\n    versionNumber\n  }\n  childPayrolls(orderBy: {versionNumber: DESC}) {\n    id\n    versionNumber\n    versionReason\n    createdAt\n  }\n  primaryConsultant {\n    ...UserMinimal\n  }\n  backupConsultant {\n    ...UserMinimal\n  }\n  manager {\n    ...UserMinimal\n  }\n}\n\nfragment NoteWithAuthor on notes {\n  id\n  content\n  isImportant\n  createdAt\n  entityId\n  entityType\n  authorUser {\n    ...UserMinimal\n  }\n}\n\nfragment PermissionBase on permissions {\n  id\n  resourceId\n  description\n  legacyPermissionName\n  action\n}\n\nfragment RoleWithPermissions on roles {\n  id\n  name\n  displayName\n  description\n  isSystemRole\n  priority\n  assignedPermissions {\n    grantedPermission {\n      ...PermissionBase\n    }\n  }\n}\n\nfragment AuditLogEntry on auditLogs {\n  id\n  userId\n  userEmail\n  userRole\n  action\n  resourceType\n  resourceId\n  eventTime\n  success\n  errorMessage\n  ipAddress\n  userAgent\n  requestId\n  sessionId\n  metadata\n  oldValues\n  newValues\n  createdAt\n}\n\nfragment AuthEvent on authEvents {\n  id\n  userId\n  userEmail\n  eventType\n  eventTime\n  success\n  failureReason\n  ipAddress\n  userAgent\n  metadata\n}\n\nfragment DataAccessLog on dataAccessLogs {\n  id\n  userId\n  resourceType\n  resourceId\n  accessType\n  accessedAt\n  dataClassification\n  fieldsAccessed\n  rowCount\n  ipAddress\n  metadata\n}\n\nfragment PermissionChange on permissionChanges {\n  id\n  changedAt\n  changedByUserId\n  targetUserId\n  targetRoleId\n  changeType\n  permissionType\n  oldPermissions\n  newPermissions\n  reason\n  approvedByUserId\n}\n\nfragment PayrollDateInfo on payrollDates {\n  id\n  originalEftDate\n  adjustedEftDate\n  notes\n  createdAt\n}\n\nfragment PermissionOverrideInfo on permissionOverrides {\n  id\n  userId\n  role\n  resource\n  operation\n  granted\n  reason\n  conditions\n  expiresAt\n  createdBy\n  createdAt\n}"): (typeof documents)["fragment UserMinimal on users {\n  id\n  firstName\n  lastName\n  computedName\n  email\n}\n\nfragment UserCoreShared on users {\n  ...UserMinimal\n  role\n  isActive\n}\n\nfragment UserBasic on users {\n  ...UserCoreShared\n  clerkUserId\n  createdAt\n  updatedAt\n}\n\nfragment UserBase on users {\n  ...UserBasic\n}\n\nfragment UserWithRole on users {\n  ...UserBasic\n  username\n  isStaff\n}\n\nfragment UserProfile on users {\n  ...UserWithRole\n  clerkUserId\n  image\n  managerId\n  deactivatedAt\n  deactivatedBy\n  managerUser {\n    ...UserMinimal\n  }\n}\n\nfragment UserSearchResult on users {\n  ...UserCoreShared\n  username\n  isStaff\n}\n\nfragment ClientMinimal on clients {\n  id\n  name\n}\n\nfragment ClientBase on clients {\n  id\n  name\n  active\n  contactEmail\n  contactPerson\n  contactPhone\n  createdAt\n}\n\nfragment ClientWithStats on clients {\n  ...ClientBase\n  currentEmployeeCount: payrollsAggregate(\n    where: {supersededDate: {_isNull: true}}\n  ) {\n    aggregate {\n      sum {\n        employeeCount\n      }\n    }\n  }\n  activePayrollCount: payrollsAggregate(\n    where: {supersededDate: {_isNull: true}, status: {_eq: \"Active\"}}\n  ) {\n    aggregate {\n      count\n    }\n  }\n}\n\nfragment ClientListBase on clients {\n  ...ClientBase\n  payrollCount: payrollsAggregate(where: {supersededDate: {_isNull: true}}) {\n    aggregate {\n      count\n    }\n  }\n}\n\nfragment PayrollMinimal on payrolls {\n  id\n  name\n  employeeCount\n  status\n}\n\nfragment PayrollBase on payrolls {\n  id\n  name\n  employeeCount\n  status\n  payrollSystem\n  processingTime\n  processingDaysBeforeEft\n  versionNumber\n  supersededDate\n  createdAt\n  updatedAt\n}\n\nfragment PayrollWithClient on payrolls {\n  ...PayrollBase\n  clientId\n  client {\n    id\n    name\n    active\n  }\n}\n\nfragment PayrollListItem on payrolls {\n  ...PayrollWithClient\n  primaryConsultantUserId\n  backupConsultantUserId\n  managerUserId\n  createdByUserId\n  cycleId\n  dateTypeId\n  dateValue\n  payrollCycle {\n    id\n    name\n    description\n  }\n  payrollDateType {\n    id\n    name\n    description\n  }\n  primaryConsultant {\n    ...UserMinimal\n  }\n  backupConsultant {\n    ...UserMinimal\n  }\n  manager {\n    ...UserMinimal\n  }\n}\n\nfragment PayrollWithDates on payrolls {\n  ...PayrollBase\n  goLiveDate\n  payrollDates(orderBy: {originalEftDate: ASC}) {\n    id\n    originalEftDate\n    adjustedEftDate\n    notes\n  }\n}\n\nfragment PayrollFullDetail on payrolls {\n  ...PayrollWithDates\n  ...PayrollWithClient\n  dateTypeId\n  cycleId\n  dateValue\n  versionReason\n  supersededDate\n  parentPayrollId\n  parentPayroll {\n    id\n    versionNumber\n  }\n  childPayrolls(orderBy: {versionNumber: DESC}) {\n    id\n    versionNumber\n    versionReason\n    createdAt\n  }\n  primaryConsultant {\n    ...UserMinimal\n  }\n  backupConsultant {\n    ...UserMinimal\n  }\n  manager {\n    ...UserMinimal\n  }\n}\n\nfragment NoteWithAuthor on notes {\n  id\n  content\n  isImportant\n  createdAt\n  entityId\n  entityType\n  authorUser {\n    ...UserMinimal\n  }\n}\n\nfragment PermissionBase on permissions {\n  id\n  resourceId\n  description\n  legacyPermissionName\n  action\n}\n\nfragment RoleWithPermissions on roles {\n  id\n  name\n  displayName\n  description\n  isSystemRole\n  priority\n  assignedPermissions {\n    grantedPermission {\n      ...PermissionBase\n    }\n  }\n}\n\nfragment AuditLogEntry on auditLogs {\n  id\n  userId\n  userEmail\n  userRole\n  action\n  resourceType\n  resourceId\n  eventTime\n  success\n  errorMessage\n  ipAddress\n  userAgent\n  requestId\n  sessionId\n  metadata\n  oldValues\n  newValues\n  createdAt\n}\n\nfragment AuthEvent on authEvents {\n  id\n  userId\n  userEmail\n  eventType\n  eventTime\n  success\n  failureReason\n  ipAddress\n  userAgent\n  metadata\n}\n\nfragment DataAccessLog on dataAccessLogs {\n  id\n  userId\n  resourceType\n  resourceId\n  accessType\n  accessedAt\n  dataClassification\n  fieldsAccessed\n  rowCount\n  ipAddress\n  metadata\n}\n\nfragment PermissionChange on permissionChanges {\n  id\n  changedAt\n  changedByUserId\n  targetUserId\n  targetRoleId\n  changeType\n  permissionType\n  oldPermissions\n  newPermissions\n  reason\n  approvedByUserId\n}\n\nfragment PayrollDateInfo on payrollDates {\n  id\n  originalEftDate\n  adjustedEftDate\n  notes\n  createdAt\n}\n\nfragment PermissionOverrideInfo on permissionOverrides {\n  id\n  userId\n  role\n  resource\n  operation\n  granted\n  reason\n  conditions\n  expiresAt\n  createdBy\n  createdAt\n}"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "mutation LogAuditEvent($input: auditLogsInsertInput!) {\n  insertAuditLogsOne: insertAuditLog(object: $input) {\n    id\n    eventTime\n  }\n}\n\nmutation RefreshData {\n  __typename\n}"): (typeof documents)["mutation LogAuditEvent($input: auditLogsInsertInput!) {\n  insertAuditLogsOne: insertAuditLog(object: $input) {\n    id\n    eventTime\n  }\n}\n\nmutation RefreshData {\n  __typename\n}"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "query GetDashboardMetrics($userId: uuid!) {\n  clientsAggregate(where: {active: {_eq: true}}) {\n    aggregate {\n      count\n    }\n  }\n  activePayrollsAggregate: payrollsAggregate(\n    where: {supersededDate: {_isNull: true}, status: {_nin: [\"Completed\", \"Failed\"]}}\n  ) {\n    aggregate {\n      count\n    }\n  }\n  totalEmployeesAggregate: payrollsAggregate(\n    where: {supersededDate: {_isNull: true}}\n  ) {\n    aggregate {\n      sum {\n        employeeCount\n      }\n    }\n  }\n  upcomingPayrolls: payrolls(\n    where: {supersededDate: {_isNull: true}, status: {_nin: [\"Completed\", \"Failed\", \"Cancelled\"]}}\n    orderBy: {updatedAt: DESC}\n    limit: 5\n  ) {\n    ...PayrollMinimal\n    client {\n      ...ClientMinimal\n    }\n  }\n}\n\nquery GetDashboardStatsOptimized($limit: Int = 10) {\n  clientsAggregate {\n    aggregate {\n      count\n    }\n  }\n  totalPayrolls: payrollsAggregate(where: {supersededDate: {_isNull: true}}) {\n    aggregate {\n      count\n    }\n  }\n  activePayrolls: payrollsAggregate(\n    where: {supersededDate: {_isNull: true}, status: {_eq: \"Active\"}}\n  ) {\n    aggregate {\n      count\n    }\n  }\n  upcomingPayrolls: payrolls(\n    where: {supersededDate: {_isNull: true}, status: {_eq: \"Active\"}}\n    orderBy: {updatedAt: DESC}\n    limit: $limit\n  ) {\n    id\n    name\n    status\n    client {\n      id\n      name\n    }\n  }\n}\n\nquery GetClientsDashboardStats {\n  activeClientsCount: clientsAggregate(where: {active: {_eq: true}}) {\n    aggregate {\n      count\n    }\n  }\n  totalPayrollsCount: payrollsAggregate(where: {supersededDate: {_isNull: true}}) {\n    aggregate {\n      count\n    }\n  }\n  totalEmployeesSum: payrollsAggregate(where: {supersededDate: {_isNull: true}}) {\n    aggregate {\n      sum {\n        employeeCount\n      }\n    }\n  }\n  clientsNeedingAttention: clients(\n    where: {active: {_eq: true}, _not: {payrolls: {supersededDate: {_isNull: true}}}}\n  ) {\n    ...ClientMinimal\n  }\n}\n\nquery GetCurrentUser($userId: uuid!) {\n  user: userById(id: $userId) {\n    ...UserProfile\n  }\n}\n\nquery GetUsersForDropdown($role: user_role) {\n  users(\n    where: {isActive: {_eq: true}, role: {_eq: $role}}\n    orderBy: {computedName: ASC}\n  ) {\n    ...UserMinimal\n  }\n}\n\nquery GetSystemHealth {\n  databaseHealth: users(limit: 1) {\n    id\n  }\n  recentActivity: auditLogsAggregate(\n    where: {eventTime: {_gte: \"now() - interval '1 hour'\"}}\n  ) {\n    aggregate {\n      count\n    }\n  }\n}\n\nquery GlobalSearch($searchTerm: String!) {\n  clients(\n    where: {_or: [{name: {_ilike: $searchTerm}}, {contactEmail: {_ilike: $searchTerm}}]}\n    limit: 5\n  ) {\n    ...ClientMinimal\n  }\n  users(\n    where: {_or: [{computedName: {_ilike: $searchTerm}}, {firstName: {_ilike: $searchTerm}}, {lastName: {_ilike: $searchTerm}}, {email: {_ilike: $searchTerm}}]}\n    limit: 5\n  ) {\n    ...UserMinimal\n  }\n  payrolls(\n    where: {client: {name: {_ilike: $searchTerm}}, supersededDate: {_isNull: true}}\n    limit: 5\n  ) {\n    ...PayrollMinimal\n    client {\n      ...ClientMinimal\n    }\n  }\n}"): (typeof documents)["query GetDashboardMetrics($userId: uuid!) {\n  clientsAggregate(where: {active: {_eq: true}}) {\n    aggregate {\n      count\n    }\n  }\n  activePayrollsAggregate: payrollsAggregate(\n    where: {supersededDate: {_isNull: true}, status: {_nin: [\"Completed\", \"Failed\"]}}\n  ) {\n    aggregate {\n      count\n    }\n  }\n  totalEmployeesAggregate: payrollsAggregate(\n    where: {supersededDate: {_isNull: true}}\n  ) {\n    aggregate {\n      sum {\n        employeeCount\n      }\n    }\n  }\n  upcomingPayrolls: payrolls(\n    where: {supersededDate: {_isNull: true}, status: {_nin: [\"Completed\", \"Failed\", \"Cancelled\"]}}\n    orderBy: {updatedAt: DESC}\n    limit: 5\n  ) {\n    ...PayrollMinimal\n    client {\n      ...ClientMinimal\n    }\n  }\n}\n\nquery GetDashboardStatsOptimized($limit: Int = 10) {\n  clientsAggregate {\n    aggregate {\n      count\n    }\n  }\n  totalPayrolls: payrollsAggregate(where: {supersededDate: {_isNull: true}}) {\n    aggregate {\n      count\n    }\n  }\n  activePayrolls: payrollsAggregate(\n    where: {supersededDate: {_isNull: true}, status: {_eq: \"Active\"}}\n  ) {\n    aggregate {\n      count\n    }\n  }\n  upcomingPayrolls: payrolls(\n    where: {supersededDate: {_isNull: true}, status: {_eq: \"Active\"}}\n    orderBy: {updatedAt: DESC}\n    limit: $limit\n  ) {\n    id\n    name\n    status\n    client {\n      id\n      name\n    }\n  }\n}\n\nquery GetClientsDashboardStats {\n  activeClientsCount: clientsAggregate(where: {active: {_eq: true}}) {\n    aggregate {\n      count\n    }\n  }\n  totalPayrollsCount: payrollsAggregate(where: {supersededDate: {_isNull: true}}) {\n    aggregate {\n      count\n    }\n  }\n  totalEmployeesSum: payrollsAggregate(where: {supersededDate: {_isNull: true}}) {\n    aggregate {\n      sum {\n        employeeCount\n      }\n    }\n  }\n  clientsNeedingAttention: clients(\n    where: {active: {_eq: true}, _not: {payrolls: {supersededDate: {_isNull: true}}}}\n  ) {\n    ...ClientMinimal\n  }\n}\n\nquery GetCurrentUser($userId: uuid!) {\n  user: userById(id: $userId) {\n    ...UserProfile\n  }\n}\n\nquery GetUsersForDropdown($role: user_role) {\n  users(\n    where: {isActive: {_eq: true}, role: {_eq: $role}}\n    orderBy: {computedName: ASC}\n  ) {\n    ...UserMinimal\n  }\n}\n\nquery GetSystemHealth {\n  databaseHealth: users(limit: 1) {\n    id\n  }\n  recentActivity: auditLogsAggregate(\n    where: {eventTime: {_gte: \"now() - interval '1 hour'\"}}\n  ) {\n    aggregate {\n      count\n    }\n  }\n}\n\nquery GlobalSearch($searchTerm: String!) {\n  clients(\n    where: {_or: [{name: {_ilike: $searchTerm}}, {contactEmail: {_ilike: $searchTerm}}]}\n    limit: 5\n  ) {\n    ...ClientMinimal\n  }\n  users(\n    where: {_or: [{computedName: {_ilike: $searchTerm}}, {firstName: {_ilike: $searchTerm}}, {lastName: {_ilike: $searchTerm}}, {email: {_ilike: $searchTerm}}]}\n    limit: 5\n  ) {\n    ...UserMinimal\n  }\n  payrolls(\n    where: {client: {name: {_ilike: $searchTerm}}, supersededDate: {_isNull: true}}\n    limit: 5\n  ) {\n    ...PayrollMinimal\n    client {\n      ...ClientMinimal\n    }\n  }\n}"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "subscription RecentActivity($resourceTypes: [String!]) {\n  auditLogs(\n    where: {resourceType: {_in: $resourceTypes}, eventTime: {_gte: \"now() - interval '5 minutes'\"}}\n    orderBy: {eventTime: DESC}\n    limit: 20\n  ) {\n    ...AuditLogEntry\n  }\n}\n\nsubscription AuthenticationEvents($userId: uuid) {\n  authEvents(\n    where: {userId: {_eq: $userId}, eventTime: {_gte: \"now() - interval '10 minutes'\"}}\n    orderBy: {eventTime: DESC}\n  ) {\n    ...AuthEvent\n  }\n}\n\nsubscription SensitiveDataAccess($resourceTypes: [String!]!) {\n  dataAccessLogs(\n    where: {resourceType: {_in: $resourceTypes}, accessedAt: {_gte: \"now() - interval '10 minutes'\"}}\n    orderBy: {accessedAt: DESC}\n  ) {\n    ...DataAccessLog\n  }\n}\n\nsubscription PermissionChangeStream {\n  permissionChanges(orderBy: {changedAt: DESC}, limit: 10) {\n    ...PermissionChange\n  }\n}"): (typeof documents)["subscription RecentActivity($resourceTypes: [String!]) {\n  auditLogs(\n    where: {resourceType: {_in: $resourceTypes}, eventTime: {_gte: \"now() - interval '5 minutes'\"}}\n    orderBy: {eventTime: DESC}\n    limit: 20\n  ) {\n    ...AuditLogEntry\n  }\n}\n\nsubscription AuthenticationEvents($userId: uuid) {\n  authEvents(\n    where: {userId: {_eq: $userId}, eventTime: {_gte: \"now() - interval '10 minutes'\"}}\n    orderBy: {eventTime: DESC}\n  ) {\n    ...AuthEvent\n  }\n}\n\nsubscription SensitiveDataAccess($resourceTypes: [String!]!) {\n  dataAccessLogs(\n    where: {resourceType: {_in: $resourceTypes}, accessedAt: {_gte: \"now() - interval '10 minutes'\"}}\n    orderBy: {accessedAt: DESC}\n  ) {\n    ...DataAccessLog\n  }\n}\n\nsubscription PermissionChangeStream {\n  permissionChanges(orderBy: {changedAt: DESC}, limit: 10) {\n    ...PermissionChange\n  }\n}"];

export function gql(source: string) {
  return (documents as any)[source] ?? {};
}

export type DocumentType<TDocumentNode extends DocumentNode<any, any>> = TDocumentNode extends DocumentNode<  infer TType,  any>  ? TType  : never;