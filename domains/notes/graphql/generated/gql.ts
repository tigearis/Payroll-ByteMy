/* eslint-disable */
import * as types from './graphql';
import type { TypedDocumentNode as DocumentNode } from '@graphql-typed-document-node/core';

/**
 * Map of all GraphQL operations in the project.
 *
 * This map has several performance disadvantages:
 * 1. It is not tree-shakeable, so it will include all operations in the project.
 * 2. It is not minifiable, so the string of a GraphQL query will be multiple times inside the bundle.
 * 3. It does not support dead code elimination, so it will add unused operations.
 *
 * Therefore it is highly recommended to use the babel or swc plugin for production.
 * Learn more about it here: https://the-guild.dev/graphql/codegen/plugins/presets/preset-client#reducing-bundle-size
 */
type Documents = {
    "fragment NoteCore on notes {\n  id\n  content\n  isImportant\n  createdAt\n  updatedAt\n  userId\n  entityType\n  entityId\n}\n\nfragment NoteBasic on notes {\n  ...NoteCore\n  authorUser {\n    id\n    name\n    email\n    role\n  }\n}\n\nfragment NoteDetailed on notes {\n  ...NoteBasic\n}\n\nfragment NoteWithEntity on notes {\n  ...NoteBasic\n}\n\nfragment NoteSummary on notes {\n  id\n  isImportant\n  createdAt\n  entityType\n  entityId\n  userId\n}\n\nfragment NoteListItem on notes {\n  ...NoteSummary\n  content\n  updatedAt\n  authorUser {\n    id\n    name\n    role\n  }\n}\n\nfragment NoteTableRow on notes {\n  ...NoteListItem\n}\n\nfragment NoteMinimal on notes {\n  id\n  isImportant\n  createdAt\n  userId\n}\n\nfragment NoteForAudit on notes {\n  id\n  isImportant\n  createdAt\n  updatedAt\n  userId\n  entityType\n  entityId\n}\n\nfragment NoteCard on notes {\n  ...NoteSummary\n  content\n  authorUser {\n    id\n    name\n    image\n  }\n}\n\nfragment NoteDashboard on notes {\n  ...NoteSummary\n  authorUser {\n    id\n    name\n  }\n}\n\nfragment PayrollNote on notes {\n  ...NoteBasic\n}\n\nfragment ClientNote on notes {\n  ...NoteBasic\n}\n\nfragment UserNote on notes {\n  ...NoteBasic\n}\n\nfragment ImportantNote on notes {\n  ...NoteListItem\n}\n\nfragment RecentNote on notes {\n  ...NoteCard\n}": typeof types.NoteCoreFragmentDoc,
    "mutation CreateNote($object: notesInsertInput!) {\n  insertNote(object: $object) {\n    ...NoteDetailed\n  }\n}\n\nmutation AddNote($content: String!, $entityType: String!, $entityId: uuid!, $userId: uuid!, $isImportant: Boolean = false) {\n  insertNote(\n    object: {content: $content, entityType: $entityType, entityId: $entityId, userId: $userId, isImportant: $isImportant}\n  ) {\n    ...NoteDetailed\n  }\n}\n\nmutation UpdateNote($id: uuid!, $set: notesSetInput!) {\n  updateNoteById(pkColumns: {id: $id}, _set: $set) {\n    ...NoteDetailed\n  }\n}\n\nmutation UpdateNoteContent($id: uuid!, $content: String, $isImportant: Boolean) {\n  updateNoteById(\n    pkColumns: {id: $id}\n    _set: {content: $content, isImportant: $isImportant, updatedAt: \"now()\"}\n  ) {\n    ...NoteDetailed\n  }\n}\n\nmutation DeleteNote($id: uuid!) {\n  deleteNoteById(id: $id) {\n    id\n    content\n    entityType\n    entityId\n  }\n}\n\nmutation ToggleNoteImportance($id: uuid!, $isImportant: Boolean!) {\n  updateNoteById(\n    pkColumns: {id: $id}\n    _set: {isImportant: $isImportant, updatedAt: \"now()\"}\n  ) {\n    ...NoteBasic\n  }\n}\n\nmutation MarkNoteAsImportant($id: uuid!) {\n  updateNoteById(\n    pkColumns: {id: $id}\n    _set: {isImportant: true, updatedAt: \"now()\"}\n  ) {\n    ...NoteBasic\n  }\n}\n\nmutation UnmarkNoteAsImportant($id: uuid!) {\n  updateNoteById(\n    pkColumns: {id: $id}\n    _set: {isImportant: false, updatedAt: \"now()\"}\n  ) {\n    ...NoteBasic\n  }\n}\n\nmutation AddPayrollNote($payrollId: uuid!, $content: String!, $userId: uuid!, $isImportant: Boolean = false) {\n  insertNote(\n    object: {content: $content, entityType: \"payroll\", entityId: $payrollId, userId: $userId, isImportant: $isImportant}\n  ) {\n    ...PayrollNote\n  }\n}\n\nmutation AddClientNote($clientId: uuid!, $content: String!, $userId: uuid!, $isImportant: Boolean = false) {\n  insertNote(\n    object: {content: $content, entityType: \"client\", entityId: $clientId, userId: $userId, isImportant: $isImportant}\n  ) {\n    ...ClientNote\n  }\n}\n\nmutation AddUserNote($userId: uuid!, $content: String!, $authorUserId: uuid!, $isImportant: Boolean = false) {\n  insertNote(\n    object: {content: $content, entityType: \"user\", entityId: $userId, userId: $authorUserId, isImportant: $isImportant}\n  ) {\n    ...UserNote\n  }\n}\n\nmutation BulkDeleteNotes($ids: [uuid!]!) {\n  bulkDeleteNotes(where: {id: {_in: $ids}}) {\n    returning {\n      id\n      content\n      entityType\n      entityId\n    }\n    affectedRows\n  }\n}\n\nmutation BulkMarkNotesImportant($ids: [uuid!]!) {\n  bulkUpdateNotes(\n    where: {id: {_in: $ids}}\n    _set: {isImportant: true, updatedAt: \"now()\"}\n  ) {\n    returning {\n      ...NoteBasic\n    }\n    affectedRows\n  }\n}\n\nmutation BulkUnmarkNotesImportant($ids: [uuid!]!) {\n  bulkUpdateNotes(\n    where: {id: {_in: $ids}}\n    _set: {isImportant: false, updatedAt: \"now()\"}\n  ) {\n    returning {\n      ...NoteBasic\n    }\n    affectedRows\n  }\n}\n\nmutation BulkUpdateNotes($where: notesBoolExp!, $set: notesSetInput!) {\n  bulkUpdateNotes(where: $where, _set: $set) {\n    returning {\n      ...NoteBasic\n    }\n    affectedRows\n  }\n}\n\nmutation DeleteNotesByEntity($entityType: String!, $entityId: uuid!) {\n  bulkDeleteNotes(\n    where: {entityType: {_eq: $entityType}, entityId: {_eq: $entityId}}\n  ) {\n    returning {\n      id\n      content\n    }\n    affectedRows\n  }\n}\n\nmutation DeleteNotesByAuthor($authorUserId: uuid!) {\n  bulkDeleteNotes(where: {userId: {_eq: $authorUserId}}) {\n    returning {\n      id\n      content\n      entityType\n      entityId\n    }\n    affectedRows\n  }\n}\n\nmutation TransferNotesToNewAuthor($oldAuthorUserId: uuid!, $newAuthorUserId: uuid!) {\n  bulkUpdateNotes(\n    where: {userId: {_eq: $oldAuthorUserId}}\n    _set: {userId: $newAuthorUserId, updatedAt: \"now()\"}\n  ) {\n    returning {\n      ...NoteBasic\n    }\n    affectedRows\n  }\n}\n\nmutation TransferNotesToNewEntity($oldEntityType: String!, $oldEntityId: uuid!, $newEntityType: String!, $newEntityId: uuid!) {\n  bulkUpdateNotes(\n    where: {entityType: {_eq: $oldEntityType}, entityId: {_eq: $oldEntityId}}\n    _set: {entityType: $newEntityType, entityId: $newEntityId, updatedAt: \"now()\"}\n  ) {\n    returning {\n      ...NoteBasic\n    }\n    affectedRows\n  }\n}\n\nmutation AddNoteExtracted($content: String!, $entityType: String!, $entityId: uuid!, $userId: uuid!, $isImportant: Boolean = false) {\n  insertNote(\n    object: {content: $content, entityType: $entityType, entityId: $entityId, userId: $userId, isImportant: $isImportant}\n  ) {\n    ...NoteListItem\n  }\n}\n\nmutation UpdateNoteExtracted($id: uuid!, $content: String, $isImportant: Boolean) {\n  updateNoteById(\n    pkColumns: {id: $id}\n    _set: {content: $content, isImportant: $isImportant, updatedAt: \"now()\"}\n  ) {\n    ...NoteListItem\n  }\n}": typeof types.CreateNoteDocument,
    "query GetNotes($limit: Int = 50, $offset: Int = 0, $where: notesBoolExp) {\n  notes(limit: $limit, offset: $offset, where: $where, orderBy: {createdAt: DESC}) {\n    ...NoteListItem\n  }\n  notesAggregate(where: $where) {\n    aggregate {\n      count\n    }\n  }\n}\n\nquery GetNoteById($id: uuid!) {\n  noteById(id: $id) {\n    ...NoteDetailed\n  }\n}\n\nquery GetNoteBasic($id: uuid!) {\n  noteById(id: $id) {\n    ...NoteBasic\n  }\n}\n\nquery GetNotesByEntity($entityType: String!, $entityId: uuid!) {\n  notes(\n    where: {entityType: {_eq: $entityType}, entityId: {_eq: $entityId}}\n    orderBy: {createdAt: DESC}\n  ) {\n    ...NoteListItem\n  }\n}\n\nquery GetPayrollNotes($payrollId: uuid!) {\n  notes(\n    where: {entityType: {_eq: \"payroll\"}, entityId: {_eq: $payrollId}}\n    orderBy: {createdAt: DESC}\n  ) {\n    ...PayrollNote\n  }\n}\n\nquery GetClientNotes($clientId: uuid!) {\n  notes(\n    where: {entityType: {_eq: \"client\"}, entityId: {_eq: $clientId}}\n    orderBy: {createdAt: DESC}\n  ) {\n    ...ClientNote\n  }\n}\n\nquery GetUserNotes($userId: uuid!) {\n  notes(\n    where: {entityType: {_eq: \"user\"}, entityId: {_eq: $userId}}\n    orderBy: {createdAt: DESC}\n  ) {\n    ...UserNote\n  }\n}\n\nquery GetNotesByAuthor($authorUserId: uuid!) {\n  notes(where: {userId: {_eq: $authorUserId}}, orderBy: {createdAt: DESC}) {\n    ...NoteListItem\n  }\n}\n\nquery GetMyNotes($userId: uuid!) {\n  notes(where: {userId: {_eq: $userId}}, orderBy: {updatedAt: DESC}) {\n    ...NoteListItem\n  }\n}\n\nquery GetImportantNotes($limit: Int = 20) {\n  notes(\n    where: {isImportant: {_eq: true}}\n    orderBy: {createdAt: DESC}\n    limit: $limit\n  ) {\n    ...ImportantNote\n  }\n}\n\nquery GetImportantNotesByEntity($entityType: String!, $entityId: uuid!) {\n  notes(\n    where: {entityType: {_eq: $entityType}, entityId: {_eq: $entityId}, isImportant: {_eq: true}}\n    orderBy: {createdAt: DESC}\n  ) {\n    ...ImportantNote\n  }\n}\n\nquery GetRecentNotes($limit: Int = 10) {\n  notes(orderBy: {createdAt: DESC}, limit: $limit) {\n    ...RecentNote\n  }\n}\n\nquery GetRecentNotesByUser($userId: uuid!, $limit: Int = 10) {\n  notes(\n    where: {userId: {_eq: $userId}}\n    orderBy: {createdAt: DESC}\n    limit: $limit\n  ) {\n    ...RecentNote\n  }\n}\n\nquery SearchNotes($searchTerm: String!, $limit: Int = 50) {\n  notes(\n    where: {_or: [{content: {_ilike: $searchTerm}}, {authorUser: {name: {_ilike: $searchTerm}}}]}\n    orderBy: {createdAt: DESC}\n    limit: $limit\n  ) {\n    ...NoteListItem\n  }\n}\n\nquery SearchNotesByEntity($entityType: String!, $entityId: uuid!, $searchTerm: String!) {\n  notes(\n    where: {_and: [{entityType: {_eq: $entityType}}, {entityId: {_eq: $entityId}}, {_or: [{content: {_ilike: $searchTerm}}, {content: {_ilike: $searchTerm}}]}]}\n    orderBy: {createdAt: DESC}\n  ) {\n    ...NoteListItem\n  }\n}\n\nquery FilterNotesByDateRange($startDate: timestamp!, $endDate: timestamp!, $entityType: String, $entityId: uuid) {\n  notes(\n    where: {_and: [{createdAt: {_gte: $startDate}}, {createdAt: {_lte: $endDate}}, {entityType: {_eq: $entityType}}, {entityId: {_eq: $entityId}}]}\n    orderBy: {createdAt: DESC}\n  ) {\n    ...NoteListItem\n  }\n}\n\nquery GetNoteDashboardStats($userId: uuid!) {\n  totalNotes: notesAggregate {\n    aggregate {\n      count\n    }\n  }\n  importantNotes: notesAggregate(where: {isImportant: {_eq: true}}) {\n    aggregate {\n      count\n    }\n  }\n  recentNotes: notes(orderBy: {createdAt: DESC}, limit: 5) {\n    ...NoteDashboard\n  }\n  myRecentNotes: notes(\n    where: {userId: {_eq: $userId}}\n    orderBy: {createdAt: DESC}\n    limit: 3\n  ) {\n    ...NoteDashboard\n  }\n}\n\nquery GetNoteActivity($limit: Int = 20) {\n  notes(orderBy: {updatedAt: DESC}, limit: $limit) {\n    ...NoteCard\n  }\n}\n\nquery GetEntityNoteSummary($entityType: String!, $entityId: uuid!) {\n  totalCount: notesAggregate(\n    where: {entityType: {_eq: $entityType}, entityId: {_eq: $entityId}}\n  ) {\n    aggregate {\n      count\n    }\n  }\n  importantCount: notesAggregate(\n    where: {entityType: {_eq: $entityType}, entityId: {_eq: $entityId}, isImportant: {_eq: true}}\n  ) {\n    aggregate {\n      count\n    }\n  }\n  recentNotes: notes(\n    where: {entityType: {_eq: $entityType}, entityId: {_eq: $entityId}}\n    orderBy: {createdAt: DESC}\n    limit: 3\n  ) {\n    ...NoteCard\n  }\n}\n\nquery GetNotesForBulkUpdate($ids: [uuid!]!) {\n  notes(where: {id: {_in: $ids}}) {\n    ...NoteBasic\n  }\n}\n\nquery GetNotesByAuthorAndDateRange($authorUserId: uuid!, $startDate: timestamp!, $endDate: timestamp!) {\n  notes(\n    where: {_and: [{userId: {_eq: $authorUserId}}, {createdAt: {_gte: $startDate}}, {createdAt: {_lte: $endDate}}]}\n    orderBy: {createdAt: DESC}\n  ) {\n    ...NoteListItem\n  }\n}\n\nquery GetNotesForAudit($limit: Int = 100, $offset: Int = 0, $where: notesBoolExp = {}) {\n  notes(limit: $limit, offset: $offset, where: $where, orderBy: {createdAt: DESC}) {\n    ...NoteForAudit\n  }\n}\n\nquery GetNotesByEntityType($entityType: String!) {\n  notes(where: {entityType: {_eq: $entityType}}, orderBy: {createdAt: DESC}) {\n    ...NoteListItem\n  }\n}\n\nquery GetNotesPaginated($limit: Int = 20, $offset: Int = 0, $where: notesBoolExp = {}, $orderBy: [notesOrderBy!] = [{createdAt: DESC}]) {\n  notes(limit: $limit, offset: $offset, where: $where, orderBy: $orderBy) {\n    ...NoteListItem\n  }\n  notesAggregate(where: $where) {\n    aggregate {\n      count\n    }\n  }\n}\n\nquery GetEntityNotesPaginated($entityType: String!, $entityId: uuid!, $limit: Int = 20, $offset: Int = 0) {\n  notes(\n    where: {entityType: {_eq: $entityType}, entityId: {_eq: $entityId}}\n    orderBy: {createdAt: DESC}\n    limit: $limit\n    offset: $offset\n  ) {\n    ...NoteListItem\n  }\n  entityNotesAggregate: notesAggregate(\n    where: {entityType: {_eq: $entityType}, entityId: {_eq: $entityId}}\n  ) {\n    aggregate {\n      count\n    }\n  }\n}\n\nquery SearchNotesPaginated($searchTerm: String!, $limit: Int = 20, $offset: Int = 0) {\n  notes(\n    where: {_or: [{content: {_ilike: $searchTerm}}, {authorUser: {name: {_ilike: $searchTerm}}}]}\n    orderBy: {createdAt: DESC}\n    limit: $limit\n    offset: $offset\n  ) {\n    ...NoteListItem\n  }\n  searchAggregate: notesAggregate(\n    where: {_or: [{content: {_ilike: $searchTerm}}, {authorUser: {name: {_ilike: $searchTerm}}}]}\n  ) {\n    aggregate {\n      count\n    }\n  }\n}\n\nquery GetNotesQuickList($entityType: String!, $entityId: uuid!) {\n  notes(\n    where: {entityType: {_eq: $entityType}, entityId: {_eq: $entityId}}\n    orderBy: {createdAt: DESC}\n    limit: 5\n  ) {\n    ...NoteMinimal\n  }\n}\n\nquery GetImportantNotesQuickList($entityType: String!, $entityId: uuid!) {\n  notes(\n    where: {entityType: {_eq: $entityType}, entityId: {_eq: $entityId}, isImportant: {_eq: true}}\n    orderBy: {createdAt: DESC}\n  ) {\n    ...NoteMinimal\n  }\n}\n\nquery GetNotesExtracted($entityType: String!, $entityId: uuid!) {\n  notes(\n    where: {entityType: {_eq: $entityType}, entityId: {_eq: $entityId}}\n    orderBy: {createdAt: DESC}\n  ) {\n    ...NoteListItem\n  }\n}": typeof types.GetNotesDocument,
    "subscription NoteUpdates($entityType: String!, $entityId: uuid!) {\n  notes(\n    where: {entityType: {_eq: $entityType}, entityId: {_eq: $entityId}}\n    orderBy: {createdAt: DESC}\n  ) {\n    ...NoteListItem\n  }\n}\n\nsubscription NotesByEntityUpdates($entityType: String!, $entityId: uuid!) {\n  notes(\n    where: {entityType: {_eq: $entityType}, entityId: {_eq: $entityId}}\n    orderBy: {updatedAt: DESC}\n  ) {\n    ...NoteListItem\n  }\n}\n\nsubscription SingleNoteUpdates($id: uuid!) {\n  notes(where: {id: {_eq: $id}}) {\n    ...NoteDetailed\n  }\n}\n\nsubscription PayrollNotesUpdates($payrollId: uuid!) {\n  notes(\n    where: {entityType: {_eq: \"payroll\"}, entityId: {_eq: $payrollId}}\n    orderBy: {createdAt: DESC}\n  ) {\n    ...PayrollNote\n  }\n}\n\nsubscription ClientNotesUpdates($clientId: uuid!) {\n  notes(\n    where: {entityType: {_eq: \"client\"}, entityId: {_eq: $clientId}}\n    orderBy: {createdAt: DESC}\n  ) {\n    ...ClientNote\n  }\n}\n\nsubscription UserNotesUpdates($userId: uuid!) {\n  notes(\n    where: {entityType: {_eq: \"user\"}, entityId: {_eq: $userId}}\n    orderBy: {createdAt: DESC}\n  ) {\n    ...UserNote\n  }\n}\n\nsubscription MyNotesUpdates($authorUserId: uuid!) {\n  notes(where: {userId: {_eq: $authorUserId}}, orderBy: {updatedAt: DESC}) {\n    ...NoteListItem\n  }\n}\n\nsubscription RecentNotesUpdates {\n  notes(orderBy: {createdAt: DESC}, limit: 20) {\n    ...RecentNote\n  }\n}\n\nsubscription ImportantNotesUpdates($limit: Int = 10) {\n  notes(\n    where: {isImportant: {_eq: true}}\n    orderBy: {createdAt: DESC}\n    limit: $limit\n  ) {\n    ...ImportantNote\n  }\n}\n\nsubscription ImportantNotesByEntityUpdates($entityType: String!, $entityId: uuid!) {\n  notes(\n    where: {entityType: {_eq: $entityType}, entityId: {_eq: $entityId}, isImportant: {_eq: true}}\n    orderBy: {createdAt: DESC}\n  ) {\n    ...ImportantNote\n  }\n}\n\nsubscription NoteActivityUpdates {\n  notes(orderBy: {updatedAt: DESC}, limit: 15) {\n    ...NoteCard\n  }\n}\n\nsubscription TotalNotesUpdates {\n  notesAggregate {\n    aggregate {\n      count\n    }\n  }\n}\n\nsubscription ImportantNotesCountUpdates {\n  notesAggregate(where: {isImportant: {_eq: true}}) {\n    aggregate {\n      count\n    }\n  }\n}\n\nsubscription TodaysNotesUpdates {\n  notesAggregate(where: {createdAt: {_gte: \"today\"}}) {\n    aggregate {\n      count\n    }\n  }\n}\n\nsubscription EntityNotesUpdates($entityType: String!, $entityId: uuid!) {\n  notesAggregate(\n    where: {entityType: {_eq: $entityType}, entityId: {_eq: $entityId}}\n  ) {\n    aggregate {\n      count\n    }\n  }\n}\n\nsubscription EntityImportantNotesUpdates($entityType: String!, $entityId: uuid!) {\n  notesAggregate(\n    where: {entityType: {_eq: $entityType}, entityId: {_eq: $entityId}, isImportant: {_eq: true}}\n  ) {\n    aggregate {\n      count\n    }\n  }\n}\n\nsubscription UserNoteActivityUpdates($authorUserId: uuid!) {\n  notes(\n    where: {userId: {_eq: $authorUserId}}\n    orderBy: {updatedAt: DESC}\n    limit: 10\n  ) {\n    ...NoteCard\n  }\n}\n\nsubscription NotesByDateRangeUpdates($startDate: timestamp!, $endDate: timestamp!) {\n  notes(\n    where: {createdAt: {_gte: $startDate, _lte: $endDate}}\n    orderBy: {createdAt: DESC}\n  ) {\n    ...NoteListItem\n  }\n}\n\nsubscription NoteSearchUpdates($searchTerm: String!) {\n  notes(\n    where: {_or: [{content: {_ilike: $searchTerm}}, {authorUser: {name: {_ilike: $searchTerm}}}]}\n    orderBy: {createdAt: DESC}\n  ) {\n    ...NoteListItem\n  }\n}\n\nsubscription TeamNotesUpdates($teamUserIds: [uuid!]!) {\n  notes(where: {userId: {_in: $teamUserIds}}, orderBy: {createdAt: DESC}) {\n    ...NoteListItem\n  }\n}\n\nsubscription EntityTypeNotesUpdates($entityType: String!) {\n  notes(where: {entityType: {_eq: $entityType}}, orderBy: {createdAt: DESC}) {\n    ...NoteListItem\n  }\n}\n\nsubscription NoteChangesUpdates($noteId: uuid!) {\n  notes(where: {id: {_eq: $noteId}}) {\n    id\n    content\n    isImportant\n    updatedAt\n    authorUser {\n      id\n      name\n    }\n  }\n}\n\nsubscription NewNotesUpdates {\n  notes(\n    where: {createdAt: {_gte: \"now() - interval '5 minutes'\"}}\n    orderBy: {createdAt: DESC}\n  ) {\n    ...NoteCard\n    createdAt\n  }\n}\n\nsubscription RecentNotesListUpdates {\n  notes(orderBy: {createdAt: DESC}, limit: 5) {\n    id\n    content\n    createdAt\n    authorUser {\n      name\n    }\n    entityType\n  }\n}\n\nsubscription NotesCountUpdates {\n  notesAggregate {\n    aggregate {\n      count\n    }\n  }\n}\n\nsubscription NoteAuditUpdates {\n  notes(orderBy: {updatedAt: DESC}, limit: 50) {\n    ...NoteForAudit\n  }\n}\n\nsubscription ImportantNoteChangesUpdates {\n  notes(where: {isImportant: {_eq: true}}, orderBy: {updatedAt: DESC}) {\n    ...ImportantNote\n  }\n}": typeof types.NoteUpdatesDocument,
    "fragment UserCore on users {\n  id\n  name\n  email\n  username\n  role\n  isActive\n  isStaff\n  clerkUserId\n  createdAt\n  updatedAt\n}\n\nfragment UserBasic on users {\n  id\n  name\n  email\n  role\n  isActive\n}\n\nfragment UserWithManager on users {\n  ...UserCore\n  managerId\n  managerUser {\n    ...UserBasic\n  }\n}\n\nfragment RoleCore on roles {\n  id\n  name\n  description\n  displayName\n  priority\n  isSystemRole\n  createdAt\n}\n\nfragment PermissionCore on permissions {\n  id\n  action\n  description\n  resourceId\n  createdAt\n  updatedAt\n}\n\nfragment PermissionWithResource on permissions {\n  ...PermissionCore\n  relatedResource {\n    id\n    name\n    description\n  }\n}\n\nfragment ClientCore on clients {\n  id\n  name\n  contactEmail\n  contactPerson\n  contactPhone\n  active\n  createdAt\n  updatedAt\n}\n\nfragment ClientBasic on clients {\n  id\n  name\n  active\n}\n\nfragment ResourceCore on resources {\n  id\n  name\n  displayName\n  description\n  createdAt\n  updatedAt\n}\n\nfragment UserRoleCore on userRoles {\n  id\n  userId\n  roleId\n  createdAt\n  updatedAt\n}\n\nfragment RolePermissionCore on rolePermissions {\n  id\n  roleId\n  permissionId\n  conditions\n  createdAt\n  updatedAt\n}\n\nfragment AuditFields on auditLogs {\n  id\n  eventTime\n  action\n  resourceType\n  resourceId\n  userId\n  ipAddress\n  userAgent\n  success\n  userEmail\n  userRole\n}": typeof types.UserCoreFragmentDoc,
};
const documents: Documents = {
    "fragment NoteCore on notes {\n  id\n  content\n  isImportant\n  createdAt\n  updatedAt\n  userId\n  entityType\n  entityId\n}\n\nfragment NoteBasic on notes {\n  ...NoteCore\n  authorUser {\n    id\n    name\n    email\n    role\n  }\n}\n\nfragment NoteDetailed on notes {\n  ...NoteBasic\n}\n\nfragment NoteWithEntity on notes {\n  ...NoteBasic\n}\n\nfragment NoteSummary on notes {\n  id\n  isImportant\n  createdAt\n  entityType\n  entityId\n  userId\n}\n\nfragment NoteListItem on notes {\n  ...NoteSummary\n  content\n  updatedAt\n  authorUser {\n    id\n    name\n    role\n  }\n}\n\nfragment NoteTableRow on notes {\n  ...NoteListItem\n}\n\nfragment NoteMinimal on notes {\n  id\n  isImportant\n  createdAt\n  userId\n}\n\nfragment NoteForAudit on notes {\n  id\n  isImportant\n  createdAt\n  updatedAt\n  userId\n  entityType\n  entityId\n}\n\nfragment NoteCard on notes {\n  ...NoteSummary\n  content\n  authorUser {\n    id\n    name\n    image\n  }\n}\n\nfragment NoteDashboard on notes {\n  ...NoteSummary\n  authorUser {\n    id\n    name\n  }\n}\n\nfragment PayrollNote on notes {\n  ...NoteBasic\n}\n\nfragment ClientNote on notes {\n  ...NoteBasic\n}\n\nfragment UserNote on notes {\n  ...NoteBasic\n}\n\nfragment ImportantNote on notes {\n  ...NoteListItem\n}\n\nfragment RecentNote on notes {\n  ...NoteCard\n}": types.NoteCoreFragmentDoc,
    "mutation CreateNote($object: notesInsertInput!) {\n  insertNote(object: $object) {\n    ...NoteDetailed\n  }\n}\n\nmutation AddNote($content: String!, $entityType: String!, $entityId: uuid!, $userId: uuid!, $isImportant: Boolean = false) {\n  insertNote(\n    object: {content: $content, entityType: $entityType, entityId: $entityId, userId: $userId, isImportant: $isImportant}\n  ) {\n    ...NoteDetailed\n  }\n}\n\nmutation UpdateNote($id: uuid!, $set: notesSetInput!) {\n  updateNoteById(pkColumns: {id: $id}, _set: $set) {\n    ...NoteDetailed\n  }\n}\n\nmutation UpdateNoteContent($id: uuid!, $content: String, $isImportant: Boolean) {\n  updateNoteById(\n    pkColumns: {id: $id}\n    _set: {content: $content, isImportant: $isImportant, updatedAt: \"now()\"}\n  ) {\n    ...NoteDetailed\n  }\n}\n\nmutation DeleteNote($id: uuid!) {\n  deleteNoteById(id: $id) {\n    id\n    content\n    entityType\n    entityId\n  }\n}\n\nmutation ToggleNoteImportance($id: uuid!, $isImportant: Boolean!) {\n  updateNoteById(\n    pkColumns: {id: $id}\n    _set: {isImportant: $isImportant, updatedAt: \"now()\"}\n  ) {\n    ...NoteBasic\n  }\n}\n\nmutation MarkNoteAsImportant($id: uuid!) {\n  updateNoteById(\n    pkColumns: {id: $id}\n    _set: {isImportant: true, updatedAt: \"now()\"}\n  ) {\n    ...NoteBasic\n  }\n}\n\nmutation UnmarkNoteAsImportant($id: uuid!) {\n  updateNoteById(\n    pkColumns: {id: $id}\n    _set: {isImportant: false, updatedAt: \"now()\"}\n  ) {\n    ...NoteBasic\n  }\n}\n\nmutation AddPayrollNote($payrollId: uuid!, $content: String!, $userId: uuid!, $isImportant: Boolean = false) {\n  insertNote(\n    object: {content: $content, entityType: \"payroll\", entityId: $payrollId, userId: $userId, isImportant: $isImportant}\n  ) {\n    ...PayrollNote\n  }\n}\n\nmutation AddClientNote($clientId: uuid!, $content: String!, $userId: uuid!, $isImportant: Boolean = false) {\n  insertNote(\n    object: {content: $content, entityType: \"client\", entityId: $clientId, userId: $userId, isImportant: $isImportant}\n  ) {\n    ...ClientNote\n  }\n}\n\nmutation AddUserNote($userId: uuid!, $content: String!, $authorUserId: uuid!, $isImportant: Boolean = false) {\n  insertNote(\n    object: {content: $content, entityType: \"user\", entityId: $userId, userId: $authorUserId, isImportant: $isImportant}\n  ) {\n    ...UserNote\n  }\n}\n\nmutation BulkDeleteNotes($ids: [uuid!]!) {\n  bulkDeleteNotes(where: {id: {_in: $ids}}) {\n    returning {\n      id\n      content\n      entityType\n      entityId\n    }\n    affectedRows\n  }\n}\n\nmutation BulkMarkNotesImportant($ids: [uuid!]!) {\n  bulkUpdateNotes(\n    where: {id: {_in: $ids}}\n    _set: {isImportant: true, updatedAt: \"now()\"}\n  ) {\n    returning {\n      ...NoteBasic\n    }\n    affectedRows\n  }\n}\n\nmutation BulkUnmarkNotesImportant($ids: [uuid!]!) {\n  bulkUpdateNotes(\n    where: {id: {_in: $ids}}\n    _set: {isImportant: false, updatedAt: \"now()\"}\n  ) {\n    returning {\n      ...NoteBasic\n    }\n    affectedRows\n  }\n}\n\nmutation BulkUpdateNotes($where: notesBoolExp!, $set: notesSetInput!) {\n  bulkUpdateNotes(where: $where, _set: $set) {\n    returning {\n      ...NoteBasic\n    }\n    affectedRows\n  }\n}\n\nmutation DeleteNotesByEntity($entityType: String!, $entityId: uuid!) {\n  bulkDeleteNotes(\n    where: {entityType: {_eq: $entityType}, entityId: {_eq: $entityId}}\n  ) {\n    returning {\n      id\n      content\n    }\n    affectedRows\n  }\n}\n\nmutation DeleteNotesByAuthor($authorUserId: uuid!) {\n  bulkDeleteNotes(where: {userId: {_eq: $authorUserId}}) {\n    returning {\n      id\n      content\n      entityType\n      entityId\n    }\n    affectedRows\n  }\n}\n\nmutation TransferNotesToNewAuthor($oldAuthorUserId: uuid!, $newAuthorUserId: uuid!) {\n  bulkUpdateNotes(\n    where: {userId: {_eq: $oldAuthorUserId}}\n    _set: {userId: $newAuthorUserId, updatedAt: \"now()\"}\n  ) {\n    returning {\n      ...NoteBasic\n    }\n    affectedRows\n  }\n}\n\nmutation TransferNotesToNewEntity($oldEntityType: String!, $oldEntityId: uuid!, $newEntityType: String!, $newEntityId: uuid!) {\n  bulkUpdateNotes(\n    where: {entityType: {_eq: $oldEntityType}, entityId: {_eq: $oldEntityId}}\n    _set: {entityType: $newEntityType, entityId: $newEntityId, updatedAt: \"now()\"}\n  ) {\n    returning {\n      ...NoteBasic\n    }\n    affectedRows\n  }\n}\n\nmutation AddNoteExtracted($content: String!, $entityType: String!, $entityId: uuid!, $userId: uuid!, $isImportant: Boolean = false) {\n  insertNote(\n    object: {content: $content, entityType: $entityType, entityId: $entityId, userId: $userId, isImportant: $isImportant}\n  ) {\n    ...NoteListItem\n  }\n}\n\nmutation UpdateNoteExtracted($id: uuid!, $content: String, $isImportant: Boolean) {\n  updateNoteById(\n    pkColumns: {id: $id}\n    _set: {content: $content, isImportant: $isImportant, updatedAt: \"now()\"}\n  ) {\n    ...NoteListItem\n  }\n}": types.CreateNoteDocument,
    "query GetNotes($limit: Int = 50, $offset: Int = 0, $where: notesBoolExp) {\n  notes(limit: $limit, offset: $offset, where: $where, orderBy: {createdAt: DESC}) {\n    ...NoteListItem\n  }\n  notesAggregate(where: $where) {\n    aggregate {\n      count\n    }\n  }\n}\n\nquery GetNoteById($id: uuid!) {\n  noteById(id: $id) {\n    ...NoteDetailed\n  }\n}\n\nquery GetNoteBasic($id: uuid!) {\n  noteById(id: $id) {\n    ...NoteBasic\n  }\n}\n\nquery GetNotesByEntity($entityType: String!, $entityId: uuid!) {\n  notes(\n    where: {entityType: {_eq: $entityType}, entityId: {_eq: $entityId}}\n    orderBy: {createdAt: DESC}\n  ) {\n    ...NoteListItem\n  }\n}\n\nquery GetPayrollNotes($payrollId: uuid!) {\n  notes(\n    where: {entityType: {_eq: \"payroll\"}, entityId: {_eq: $payrollId}}\n    orderBy: {createdAt: DESC}\n  ) {\n    ...PayrollNote\n  }\n}\n\nquery GetClientNotes($clientId: uuid!) {\n  notes(\n    where: {entityType: {_eq: \"client\"}, entityId: {_eq: $clientId}}\n    orderBy: {createdAt: DESC}\n  ) {\n    ...ClientNote\n  }\n}\n\nquery GetUserNotes($userId: uuid!) {\n  notes(\n    where: {entityType: {_eq: \"user\"}, entityId: {_eq: $userId}}\n    orderBy: {createdAt: DESC}\n  ) {\n    ...UserNote\n  }\n}\n\nquery GetNotesByAuthor($authorUserId: uuid!) {\n  notes(where: {userId: {_eq: $authorUserId}}, orderBy: {createdAt: DESC}) {\n    ...NoteListItem\n  }\n}\n\nquery GetMyNotes($userId: uuid!) {\n  notes(where: {userId: {_eq: $userId}}, orderBy: {updatedAt: DESC}) {\n    ...NoteListItem\n  }\n}\n\nquery GetImportantNotes($limit: Int = 20) {\n  notes(\n    where: {isImportant: {_eq: true}}\n    orderBy: {createdAt: DESC}\n    limit: $limit\n  ) {\n    ...ImportantNote\n  }\n}\n\nquery GetImportantNotesByEntity($entityType: String!, $entityId: uuid!) {\n  notes(\n    where: {entityType: {_eq: $entityType}, entityId: {_eq: $entityId}, isImportant: {_eq: true}}\n    orderBy: {createdAt: DESC}\n  ) {\n    ...ImportantNote\n  }\n}\n\nquery GetRecentNotes($limit: Int = 10) {\n  notes(orderBy: {createdAt: DESC}, limit: $limit) {\n    ...RecentNote\n  }\n}\n\nquery GetRecentNotesByUser($userId: uuid!, $limit: Int = 10) {\n  notes(\n    where: {userId: {_eq: $userId}}\n    orderBy: {createdAt: DESC}\n    limit: $limit\n  ) {\n    ...RecentNote\n  }\n}\n\nquery SearchNotes($searchTerm: String!, $limit: Int = 50) {\n  notes(\n    where: {_or: [{content: {_ilike: $searchTerm}}, {authorUser: {name: {_ilike: $searchTerm}}}]}\n    orderBy: {createdAt: DESC}\n    limit: $limit\n  ) {\n    ...NoteListItem\n  }\n}\n\nquery SearchNotesByEntity($entityType: String!, $entityId: uuid!, $searchTerm: String!) {\n  notes(\n    where: {_and: [{entityType: {_eq: $entityType}}, {entityId: {_eq: $entityId}}, {_or: [{content: {_ilike: $searchTerm}}, {content: {_ilike: $searchTerm}}]}]}\n    orderBy: {createdAt: DESC}\n  ) {\n    ...NoteListItem\n  }\n}\n\nquery FilterNotesByDateRange($startDate: timestamp!, $endDate: timestamp!, $entityType: String, $entityId: uuid) {\n  notes(\n    where: {_and: [{createdAt: {_gte: $startDate}}, {createdAt: {_lte: $endDate}}, {entityType: {_eq: $entityType}}, {entityId: {_eq: $entityId}}]}\n    orderBy: {createdAt: DESC}\n  ) {\n    ...NoteListItem\n  }\n}\n\nquery GetNoteDashboardStats($userId: uuid!) {\n  totalNotes: notesAggregate {\n    aggregate {\n      count\n    }\n  }\n  importantNotes: notesAggregate(where: {isImportant: {_eq: true}}) {\n    aggregate {\n      count\n    }\n  }\n  recentNotes: notes(orderBy: {createdAt: DESC}, limit: 5) {\n    ...NoteDashboard\n  }\n  myRecentNotes: notes(\n    where: {userId: {_eq: $userId}}\n    orderBy: {createdAt: DESC}\n    limit: 3\n  ) {\n    ...NoteDashboard\n  }\n}\n\nquery GetNoteActivity($limit: Int = 20) {\n  notes(orderBy: {updatedAt: DESC}, limit: $limit) {\n    ...NoteCard\n  }\n}\n\nquery GetEntityNoteSummary($entityType: String!, $entityId: uuid!) {\n  totalCount: notesAggregate(\n    where: {entityType: {_eq: $entityType}, entityId: {_eq: $entityId}}\n  ) {\n    aggregate {\n      count\n    }\n  }\n  importantCount: notesAggregate(\n    where: {entityType: {_eq: $entityType}, entityId: {_eq: $entityId}, isImportant: {_eq: true}}\n  ) {\n    aggregate {\n      count\n    }\n  }\n  recentNotes: notes(\n    where: {entityType: {_eq: $entityType}, entityId: {_eq: $entityId}}\n    orderBy: {createdAt: DESC}\n    limit: 3\n  ) {\n    ...NoteCard\n  }\n}\n\nquery GetNotesForBulkUpdate($ids: [uuid!]!) {\n  notes(where: {id: {_in: $ids}}) {\n    ...NoteBasic\n  }\n}\n\nquery GetNotesByAuthorAndDateRange($authorUserId: uuid!, $startDate: timestamp!, $endDate: timestamp!) {\n  notes(\n    where: {_and: [{userId: {_eq: $authorUserId}}, {createdAt: {_gte: $startDate}}, {createdAt: {_lte: $endDate}}]}\n    orderBy: {createdAt: DESC}\n  ) {\n    ...NoteListItem\n  }\n}\n\nquery GetNotesForAudit($limit: Int = 100, $offset: Int = 0, $where: notesBoolExp = {}) {\n  notes(limit: $limit, offset: $offset, where: $where, orderBy: {createdAt: DESC}) {\n    ...NoteForAudit\n  }\n}\n\nquery GetNotesByEntityType($entityType: String!) {\n  notes(where: {entityType: {_eq: $entityType}}, orderBy: {createdAt: DESC}) {\n    ...NoteListItem\n  }\n}\n\nquery GetNotesPaginated($limit: Int = 20, $offset: Int = 0, $where: notesBoolExp = {}, $orderBy: [notesOrderBy!] = [{createdAt: DESC}]) {\n  notes(limit: $limit, offset: $offset, where: $where, orderBy: $orderBy) {\n    ...NoteListItem\n  }\n  notesAggregate(where: $where) {\n    aggregate {\n      count\n    }\n  }\n}\n\nquery GetEntityNotesPaginated($entityType: String!, $entityId: uuid!, $limit: Int = 20, $offset: Int = 0) {\n  notes(\n    where: {entityType: {_eq: $entityType}, entityId: {_eq: $entityId}}\n    orderBy: {createdAt: DESC}\n    limit: $limit\n    offset: $offset\n  ) {\n    ...NoteListItem\n  }\n  entityNotesAggregate: notesAggregate(\n    where: {entityType: {_eq: $entityType}, entityId: {_eq: $entityId}}\n  ) {\n    aggregate {\n      count\n    }\n  }\n}\n\nquery SearchNotesPaginated($searchTerm: String!, $limit: Int = 20, $offset: Int = 0) {\n  notes(\n    where: {_or: [{content: {_ilike: $searchTerm}}, {authorUser: {name: {_ilike: $searchTerm}}}]}\n    orderBy: {createdAt: DESC}\n    limit: $limit\n    offset: $offset\n  ) {\n    ...NoteListItem\n  }\n  searchAggregate: notesAggregate(\n    where: {_or: [{content: {_ilike: $searchTerm}}, {authorUser: {name: {_ilike: $searchTerm}}}]}\n  ) {\n    aggregate {\n      count\n    }\n  }\n}\n\nquery GetNotesQuickList($entityType: String!, $entityId: uuid!) {\n  notes(\n    where: {entityType: {_eq: $entityType}, entityId: {_eq: $entityId}}\n    orderBy: {createdAt: DESC}\n    limit: 5\n  ) {\n    ...NoteMinimal\n  }\n}\n\nquery GetImportantNotesQuickList($entityType: String!, $entityId: uuid!) {\n  notes(\n    where: {entityType: {_eq: $entityType}, entityId: {_eq: $entityId}, isImportant: {_eq: true}}\n    orderBy: {createdAt: DESC}\n  ) {\n    ...NoteMinimal\n  }\n}\n\nquery GetNotesExtracted($entityType: String!, $entityId: uuid!) {\n  notes(\n    where: {entityType: {_eq: $entityType}, entityId: {_eq: $entityId}}\n    orderBy: {createdAt: DESC}\n  ) {\n    ...NoteListItem\n  }\n}": types.GetNotesDocument,
    "subscription NoteUpdates($entityType: String!, $entityId: uuid!) {\n  notes(\n    where: {entityType: {_eq: $entityType}, entityId: {_eq: $entityId}}\n    orderBy: {createdAt: DESC}\n  ) {\n    ...NoteListItem\n  }\n}\n\nsubscription NotesByEntityUpdates($entityType: String!, $entityId: uuid!) {\n  notes(\n    where: {entityType: {_eq: $entityType}, entityId: {_eq: $entityId}}\n    orderBy: {updatedAt: DESC}\n  ) {\n    ...NoteListItem\n  }\n}\n\nsubscription SingleNoteUpdates($id: uuid!) {\n  notes(where: {id: {_eq: $id}}) {\n    ...NoteDetailed\n  }\n}\n\nsubscription PayrollNotesUpdates($payrollId: uuid!) {\n  notes(\n    where: {entityType: {_eq: \"payroll\"}, entityId: {_eq: $payrollId}}\n    orderBy: {createdAt: DESC}\n  ) {\n    ...PayrollNote\n  }\n}\n\nsubscription ClientNotesUpdates($clientId: uuid!) {\n  notes(\n    where: {entityType: {_eq: \"client\"}, entityId: {_eq: $clientId}}\n    orderBy: {createdAt: DESC}\n  ) {\n    ...ClientNote\n  }\n}\n\nsubscription UserNotesUpdates($userId: uuid!) {\n  notes(\n    where: {entityType: {_eq: \"user\"}, entityId: {_eq: $userId}}\n    orderBy: {createdAt: DESC}\n  ) {\n    ...UserNote\n  }\n}\n\nsubscription MyNotesUpdates($authorUserId: uuid!) {\n  notes(where: {userId: {_eq: $authorUserId}}, orderBy: {updatedAt: DESC}) {\n    ...NoteListItem\n  }\n}\n\nsubscription RecentNotesUpdates {\n  notes(orderBy: {createdAt: DESC}, limit: 20) {\n    ...RecentNote\n  }\n}\n\nsubscription ImportantNotesUpdates($limit: Int = 10) {\n  notes(\n    where: {isImportant: {_eq: true}}\n    orderBy: {createdAt: DESC}\n    limit: $limit\n  ) {\n    ...ImportantNote\n  }\n}\n\nsubscription ImportantNotesByEntityUpdates($entityType: String!, $entityId: uuid!) {\n  notes(\n    where: {entityType: {_eq: $entityType}, entityId: {_eq: $entityId}, isImportant: {_eq: true}}\n    orderBy: {createdAt: DESC}\n  ) {\n    ...ImportantNote\n  }\n}\n\nsubscription NoteActivityUpdates {\n  notes(orderBy: {updatedAt: DESC}, limit: 15) {\n    ...NoteCard\n  }\n}\n\nsubscription TotalNotesUpdates {\n  notesAggregate {\n    aggregate {\n      count\n    }\n  }\n}\n\nsubscription ImportantNotesCountUpdates {\n  notesAggregate(where: {isImportant: {_eq: true}}) {\n    aggregate {\n      count\n    }\n  }\n}\n\nsubscription TodaysNotesUpdates {\n  notesAggregate(where: {createdAt: {_gte: \"today\"}}) {\n    aggregate {\n      count\n    }\n  }\n}\n\nsubscription EntityNotesUpdates($entityType: String!, $entityId: uuid!) {\n  notesAggregate(\n    where: {entityType: {_eq: $entityType}, entityId: {_eq: $entityId}}\n  ) {\n    aggregate {\n      count\n    }\n  }\n}\n\nsubscription EntityImportantNotesUpdates($entityType: String!, $entityId: uuid!) {\n  notesAggregate(\n    where: {entityType: {_eq: $entityType}, entityId: {_eq: $entityId}, isImportant: {_eq: true}}\n  ) {\n    aggregate {\n      count\n    }\n  }\n}\n\nsubscription UserNoteActivityUpdates($authorUserId: uuid!) {\n  notes(\n    where: {userId: {_eq: $authorUserId}}\n    orderBy: {updatedAt: DESC}\n    limit: 10\n  ) {\n    ...NoteCard\n  }\n}\n\nsubscription NotesByDateRangeUpdates($startDate: timestamp!, $endDate: timestamp!) {\n  notes(\n    where: {createdAt: {_gte: $startDate, _lte: $endDate}}\n    orderBy: {createdAt: DESC}\n  ) {\n    ...NoteListItem\n  }\n}\n\nsubscription NoteSearchUpdates($searchTerm: String!) {\n  notes(\n    where: {_or: [{content: {_ilike: $searchTerm}}, {authorUser: {name: {_ilike: $searchTerm}}}]}\n    orderBy: {createdAt: DESC}\n  ) {\n    ...NoteListItem\n  }\n}\n\nsubscription TeamNotesUpdates($teamUserIds: [uuid!]!) {\n  notes(where: {userId: {_in: $teamUserIds}}, orderBy: {createdAt: DESC}) {\n    ...NoteListItem\n  }\n}\n\nsubscription EntityTypeNotesUpdates($entityType: String!) {\n  notes(where: {entityType: {_eq: $entityType}}, orderBy: {createdAt: DESC}) {\n    ...NoteListItem\n  }\n}\n\nsubscription NoteChangesUpdates($noteId: uuid!) {\n  notes(where: {id: {_eq: $noteId}}) {\n    id\n    content\n    isImportant\n    updatedAt\n    authorUser {\n      id\n      name\n    }\n  }\n}\n\nsubscription NewNotesUpdates {\n  notes(\n    where: {createdAt: {_gte: \"now() - interval '5 minutes'\"}}\n    orderBy: {createdAt: DESC}\n  ) {\n    ...NoteCard\n    createdAt\n  }\n}\n\nsubscription RecentNotesListUpdates {\n  notes(orderBy: {createdAt: DESC}, limit: 5) {\n    id\n    content\n    createdAt\n    authorUser {\n      name\n    }\n    entityType\n  }\n}\n\nsubscription NotesCountUpdates {\n  notesAggregate {\n    aggregate {\n      count\n    }\n  }\n}\n\nsubscription NoteAuditUpdates {\n  notes(orderBy: {updatedAt: DESC}, limit: 50) {\n    ...NoteForAudit\n  }\n}\n\nsubscription ImportantNoteChangesUpdates {\n  notes(where: {isImportant: {_eq: true}}, orderBy: {updatedAt: DESC}) {\n    ...ImportantNote\n  }\n}": types.NoteUpdatesDocument,
    "fragment UserCore on users {\n  id\n  name\n  email\n  username\n  role\n  isActive\n  isStaff\n  clerkUserId\n  createdAt\n  updatedAt\n}\n\nfragment UserBasic on users {\n  id\n  name\n  email\n  role\n  isActive\n}\n\nfragment UserWithManager on users {\n  ...UserCore\n  managerId\n  managerUser {\n    ...UserBasic\n  }\n}\n\nfragment RoleCore on roles {\n  id\n  name\n  description\n  displayName\n  priority\n  isSystemRole\n  createdAt\n}\n\nfragment PermissionCore on permissions {\n  id\n  action\n  description\n  resourceId\n  createdAt\n  updatedAt\n}\n\nfragment PermissionWithResource on permissions {\n  ...PermissionCore\n  relatedResource {\n    id\n    name\n    description\n  }\n}\n\nfragment ClientCore on clients {\n  id\n  name\n  contactEmail\n  contactPerson\n  contactPhone\n  active\n  createdAt\n  updatedAt\n}\n\nfragment ClientBasic on clients {\n  id\n  name\n  active\n}\n\nfragment ResourceCore on resources {\n  id\n  name\n  displayName\n  description\n  createdAt\n  updatedAt\n}\n\nfragment UserRoleCore on userRoles {\n  id\n  userId\n  roleId\n  createdAt\n  updatedAt\n}\n\nfragment RolePermissionCore on rolePermissions {\n  id\n  roleId\n  permissionId\n  conditions\n  createdAt\n  updatedAt\n}\n\nfragment AuditFields on auditLogs {\n  id\n  eventTime\n  action\n  resourceType\n  resourceId\n  userId\n  ipAddress\n  userAgent\n  success\n  userEmail\n  userRole\n}": types.UserCoreFragmentDoc,
};

/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 *
 *
 * @example
 * ```ts
 * const query = gql(`query GetUser($id: ID!) { user(id: $id) { name } }`);
 * ```
 *
 * The query argument is unknown!
 * Please regenerate the types.
 */
export function gql(source: string): unknown;

/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "fragment NoteCore on notes {\n  id\n  content\n  isImportant\n  createdAt\n  updatedAt\n  userId\n  entityType\n  entityId\n}\n\nfragment NoteBasic on notes {\n  ...NoteCore\n  authorUser {\n    id\n    name\n    email\n    role\n  }\n}\n\nfragment NoteDetailed on notes {\n  ...NoteBasic\n}\n\nfragment NoteWithEntity on notes {\n  ...NoteBasic\n}\n\nfragment NoteSummary on notes {\n  id\n  isImportant\n  createdAt\n  entityType\n  entityId\n  userId\n}\n\nfragment NoteListItem on notes {\n  ...NoteSummary\n  content\n  updatedAt\n  authorUser {\n    id\n    name\n    role\n  }\n}\n\nfragment NoteTableRow on notes {\n  ...NoteListItem\n}\n\nfragment NoteMinimal on notes {\n  id\n  isImportant\n  createdAt\n  userId\n}\n\nfragment NoteForAudit on notes {\n  id\n  isImportant\n  createdAt\n  updatedAt\n  userId\n  entityType\n  entityId\n}\n\nfragment NoteCard on notes {\n  ...NoteSummary\n  content\n  authorUser {\n    id\n    name\n    image\n  }\n}\n\nfragment NoteDashboard on notes {\n  ...NoteSummary\n  authorUser {\n    id\n    name\n  }\n}\n\nfragment PayrollNote on notes {\n  ...NoteBasic\n}\n\nfragment ClientNote on notes {\n  ...NoteBasic\n}\n\nfragment UserNote on notes {\n  ...NoteBasic\n}\n\nfragment ImportantNote on notes {\n  ...NoteListItem\n}\n\nfragment RecentNote on notes {\n  ...NoteCard\n}"): (typeof documents)["fragment NoteCore on notes {\n  id\n  content\n  isImportant\n  createdAt\n  updatedAt\n  userId\n  entityType\n  entityId\n}\n\nfragment NoteBasic on notes {\n  ...NoteCore\n  authorUser {\n    id\n    name\n    email\n    role\n  }\n}\n\nfragment NoteDetailed on notes {\n  ...NoteBasic\n}\n\nfragment NoteWithEntity on notes {\n  ...NoteBasic\n}\n\nfragment NoteSummary on notes {\n  id\n  isImportant\n  createdAt\n  entityType\n  entityId\n  userId\n}\n\nfragment NoteListItem on notes {\n  ...NoteSummary\n  content\n  updatedAt\n  authorUser {\n    id\n    name\n    role\n  }\n}\n\nfragment NoteTableRow on notes {\n  ...NoteListItem\n}\n\nfragment NoteMinimal on notes {\n  id\n  isImportant\n  createdAt\n  userId\n}\n\nfragment NoteForAudit on notes {\n  id\n  isImportant\n  createdAt\n  updatedAt\n  userId\n  entityType\n  entityId\n}\n\nfragment NoteCard on notes {\n  ...NoteSummary\n  content\n  authorUser {\n    id\n    name\n    image\n  }\n}\n\nfragment NoteDashboard on notes {\n  ...NoteSummary\n  authorUser {\n    id\n    name\n  }\n}\n\nfragment PayrollNote on notes {\n  ...NoteBasic\n}\n\nfragment ClientNote on notes {\n  ...NoteBasic\n}\n\nfragment UserNote on notes {\n  ...NoteBasic\n}\n\nfragment ImportantNote on notes {\n  ...NoteListItem\n}\n\nfragment RecentNote on notes {\n  ...NoteCard\n}"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "mutation CreateNote($object: notesInsertInput!) {\n  insertNote(object: $object) {\n    ...NoteDetailed\n  }\n}\n\nmutation AddNote($content: String!, $entityType: String!, $entityId: uuid!, $userId: uuid!, $isImportant: Boolean = false) {\n  insertNote(\n    object: {content: $content, entityType: $entityType, entityId: $entityId, userId: $userId, isImportant: $isImportant}\n  ) {\n    ...NoteDetailed\n  }\n}\n\nmutation UpdateNote($id: uuid!, $set: notesSetInput!) {\n  updateNoteById(pkColumns: {id: $id}, _set: $set) {\n    ...NoteDetailed\n  }\n}\n\nmutation UpdateNoteContent($id: uuid!, $content: String, $isImportant: Boolean) {\n  updateNoteById(\n    pkColumns: {id: $id}\n    _set: {content: $content, isImportant: $isImportant, updatedAt: \"now()\"}\n  ) {\n    ...NoteDetailed\n  }\n}\n\nmutation DeleteNote($id: uuid!) {\n  deleteNoteById(id: $id) {\n    id\n    content\n    entityType\n    entityId\n  }\n}\n\nmutation ToggleNoteImportance($id: uuid!, $isImportant: Boolean!) {\n  updateNoteById(\n    pkColumns: {id: $id}\n    _set: {isImportant: $isImportant, updatedAt: \"now()\"}\n  ) {\n    ...NoteBasic\n  }\n}\n\nmutation MarkNoteAsImportant($id: uuid!) {\n  updateNoteById(\n    pkColumns: {id: $id}\n    _set: {isImportant: true, updatedAt: \"now()\"}\n  ) {\n    ...NoteBasic\n  }\n}\n\nmutation UnmarkNoteAsImportant($id: uuid!) {\n  updateNoteById(\n    pkColumns: {id: $id}\n    _set: {isImportant: false, updatedAt: \"now()\"}\n  ) {\n    ...NoteBasic\n  }\n}\n\nmutation AddPayrollNote($payrollId: uuid!, $content: String!, $userId: uuid!, $isImportant: Boolean = false) {\n  insertNote(\n    object: {content: $content, entityType: \"payroll\", entityId: $payrollId, userId: $userId, isImportant: $isImportant}\n  ) {\n    ...PayrollNote\n  }\n}\n\nmutation AddClientNote($clientId: uuid!, $content: String!, $userId: uuid!, $isImportant: Boolean = false) {\n  insertNote(\n    object: {content: $content, entityType: \"client\", entityId: $clientId, userId: $userId, isImportant: $isImportant}\n  ) {\n    ...ClientNote\n  }\n}\n\nmutation AddUserNote($userId: uuid!, $content: String!, $authorUserId: uuid!, $isImportant: Boolean = false) {\n  insertNote(\n    object: {content: $content, entityType: \"user\", entityId: $userId, userId: $authorUserId, isImportant: $isImportant}\n  ) {\n    ...UserNote\n  }\n}\n\nmutation BulkDeleteNotes($ids: [uuid!]!) {\n  bulkDeleteNotes(where: {id: {_in: $ids}}) {\n    returning {\n      id\n      content\n      entityType\n      entityId\n    }\n    affectedRows\n  }\n}\n\nmutation BulkMarkNotesImportant($ids: [uuid!]!) {\n  bulkUpdateNotes(\n    where: {id: {_in: $ids}}\n    _set: {isImportant: true, updatedAt: \"now()\"}\n  ) {\n    returning {\n      ...NoteBasic\n    }\n    affectedRows\n  }\n}\n\nmutation BulkUnmarkNotesImportant($ids: [uuid!]!) {\n  bulkUpdateNotes(\n    where: {id: {_in: $ids}}\n    _set: {isImportant: false, updatedAt: \"now()\"}\n  ) {\n    returning {\n      ...NoteBasic\n    }\n    affectedRows\n  }\n}\n\nmutation BulkUpdateNotes($where: notesBoolExp!, $set: notesSetInput!) {\n  bulkUpdateNotes(where: $where, _set: $set) {\n    returning {\n      ...NoteBasic\n    }\n    affectedRows\n  }\n}\n\nmutation DeleteNotesByEntity($entityType: String!, $entityId: uuid!) {\n  bulkDeleteNotes(\n    where: {entityType: {_eq: $entityType}, entityId: {_eq: $entityId}}\n  ) {\n    returning {\n      id\n      content\n    }\n    affectedRows\n  }\n}\n\nmutation DeleteNotesByAuthor($authorUserId: uuid!) {\n  bulkDeleteNotes(where: {userId: {_eq: $authorUserId}}) {\n    returning {\n      id\n      content\n      entityType\n      entityId\n    }\n    affectedRows\n  }\n}\n\nmutation TransferNotesToNewAuthor($oldAuthorUserId: uuid!, $newAuthorUserId: uuid!) {\n  bulkUpdateNotes(\n    where: {userId: {_eq: $oldAuthorUserId}}\n    _set: {userId: $newAuthorUserId, updatedAt: \"now()\"}\n  ) {\n    returning {\n      ...NoteBasic\n    }\n    affectedRows\n  }\n}\n\nmutation TransferNotesToNewEntity($oldEntityType: String!, $oldEntityId: uuid!, $newEntityType: String!, $newEntityId: uuid!) {\n  bulkUpdateNotes(\n    where: {entityType: {_eq: $oldEntityType}, entityId: {_eq: $oldEntityId}}\n    _set: {entityType: $newEntityType, entityId: $newEntityId, updatedAt: \"now()\"}\n  ) {\n    returning {\n      ...NoteBasic\n    }\n    affectedRows\n  }\n}\n\nmutation AddNoteExtracted($content: String!, $entityType: String!, $entityId: uuid!, $userId: uuid!, $isImportant: Boolean = false) {\n  insertNote(\n    object: {content: $content, entityType: $entityType, entityId: $entityId, userId: $userId, isImportant: $isImportant}\n  ) {\n    ...NoteListItem\n  }\n}\n\nmutation UpdateNoteExtracted($id: uuid!, $content: String, $isImportant: Boolean) {\n  updateNoteById(\n    pkColumns: {id: $id}\n    _set: {content: $content, isImportant: $isImportant, updatedAt: \"now()\"}\n  ) {\n    ...NoteListItem\n  }\n}"): (typeof documents)["mutation CreateNote($object: notesInsertInput!) {\n  insertNote(object: $object) {\n    ...NoteDetailed\n  }\n}\n\nmutation AddNote($content: String!, $entityType: String!, $entityId: uuid!, $userId: uuid!, $isImportant: Boolean = false) {\n  insertNote(\n    object: {content: $content, entityType: $entityType, entityId: $entityId, userId: $userId, isImportant: $isImportant}\n  ) {\n    ...NoteDetailed\n  }\n}\n\nmutation UpdateNote($id: uuid!, $set: notesSetInput!) {\n  updateNoteById(pkColumns: {id: $id}, _set: $set) {\n    ...NoteDetailed\n  }\n}\n\nmutation UpdateNoteContent($id: uuid!, $content: String, $isImportant: Boolean) {\n  updateNoteById(\n    pkColumns: {id: $id}\n    _set: {content: $content, isImportant: $isImportant, updatedAt: \"now()\"}\n  ) {\n    ...NoteDetailed\n  }\n}\n\nmutation DeleteNote($id: uuid!) {\n  deleteNoteById(id: $id) {\n    id\n    content\n    entityType\n    entityId\n  }\n}\n\nmutation ToggleNoteImportance($id: uuid!, $isImportant: Boolean!) {\n  updateNoteById(\n    pkColumns: {id: $id}\n    _set: {isImportant: $isImportant, updatedAt: \"now()\"}\n  ) {\n    ...NoteBasic\n  }\n}\n\nmutation MarkNoteAsImportant($id: uuid!) {\n  updateNoteById(\n    pkColumns: {id: $id}\n    _set: {isImportant: true, updatedAt: \"now()\"}\n  ) {\n    ...NoteBasic\n  }\n}\n\nmutation UnmarkNoteAsImportant($id: uuid!) {\n  updateNoteById(\n    pkColumns: {id: $id}\n    _set: {isImportant: false, updatedAt: \"now()\"}\n  ) {\n    ...NoteBasic\n  }\n}\n\nmutation AddPayrollNote($payrollId: uuid!, $content: String!, $userId: uuid!, $isImportant: Boolean = false) {\n  insertNote(\n    object: {content: $content, entityType: \"payroll\", entityId: $payrollId, userId: $userId, isImportant: $isImportant}\n  ) {\n    ...PayrollNote\n  }\n}\n\nmutation AddClientNote($clientId: uuid!, $content: String!, $userId: uuid!, $isImportant: Boolean = false) {\n  insertNote(\n    object: {content: $content, entityType: \"client\", entityId: $clientId, userId: $userId, isImportant: $isImportant}\n  ) {\n    ...ClientNote\n  }\n}\n\nmutation AddUserNote($userId: uuid!, $content: String!, $authorUserId: uuid!, $isImportant: Boolean = false) {\n  insertNote(\n    object: {content: $content, entityType: \"user\", entityId: $userId, userId: $authorUserId, isImportant: $isImportant}\n  ) {\n    ...UserNote\n  }\n}\n\nmutation BulkDeleteNotes($ids: [uuid!]!) {\n  bulkDeleteNotes(where: {id: {_in: $ids}}) {\n    returning {\n      id\n      content\n      entityType\n      entityId\n    }\n    affectedRows\n  }\n}\n\nmutation BulkMarkNotesImportant($ids: [uuid!]!) {\n  bulkUpdateNotes(\n    where: {id: {_in: $ids}}\n    _set: {isImportant: true, updatedAt: \"now()\"}\n  ) {\n    returning {\n      ...NoteBasic\n    }\n    affectedRows\n  }\n}\n\nmutation BulkUnmarkNotesImportant($ids: [uuid!]!) {\n  bulkUpdateNotes(\n    where: {id: {_in: $ids}}\n    _set: {isImportant: false, updatedAt: \"now()\"}\n  ) {\n    returning {\n      ...NoteBasic\n    }\n    affectedRows\n  }\n}\n\nmutation BulkUpdateNotes($where: notesBoolExp!, $set: notesSetInput!) {\n  bulkUpdateNotes(where: $where, _set: $set) {\n    returning {\n      ...NoteBasic\n    }\n    affectedRows\n  }\n}\n\nmutation DeleteNotesByEntity($entityType: String!, $entityId: uuid!) {\n  bulkDeleteNotes(\n    where: {entityType: {_eq: $entityType}, entityId: {_eq: $entityId}}\n  ) {\n    returning {\n      id\n      content\n    }\n    affectedRows\n  }\n}\n\nmutation DeleteNotesByAuthor($authorUserId: uuid!) {\n  bulkDeleteNotes(where: {userId: {_eq: $authorUserId}}) {\n    returning {\n      id\n      content\n      entityType\n      entityId\n    }\n    affectedRows\n  }\n}\n\nmutation TransferNotesToNewAuthor($oldAuthorUserId: uuid!, $newAuthorUserId: uuid!) {\n  bulkUpdateNotes(\n    where: {userId: {_eq: $oldAuthorUserId}}\n    _set: {userId: $newAuthorUserId, updatedAt: \"now()\"}\n  ) {\n    returning {\n      ...NoteBasic\n    }\n    affectedRows\n  }\n}\n\nmutation TransferNotesToNewEntity($oldEntityType: String!, $oldEntityId: uuid!, $newEntityType: String!, $newEntityId: uuid!) {\n  bulkUpdateNotes(\n    where: {entityType: {_eq: $oldEntityType}, entityId: {_eq: $oldEntityId}}\n    _set: {entityType: $newEntityType, entityId: $newEntityId, updatedAt: \"now()\"}\n  ) {\n    returning {\n      ...NoteBasic\n    }\n    affectedRows\n  }\n}\n\nmutation AddNoteExtracted($content: String!, $entityType: String!, $entityId: uuid!, $userId: uuid!, $isImportant: Boolean = false) {\n  insertNote(\n    object: {content: $content, entityType: $entityType, entityId: $entityId, userId: $userId, isImportant: $isImportant}\n  ) {\n    ...NoteListItem\n  }\n}\n\nmutation UpdateNoteExtracted($id: uuid!, $content: String, $isImportant: Boolean) {\n  updateNoteById(\n    pkColumns: {id: $id}\n    _set: {content: $content, isImportant: $isImportant, updatedAt: \"now()\"}\n  ) {\n    ...NoteListItem\n  }\n}"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "query GetNotes($limit: Int = 50, $offset: Int = 0, $where: notesBoolExp) {\n  notes(limit: $limit, offset: $offset, where: $where, orderBy: {createdAt: DESC}) {\n    ...NoteListItem\n  }\n  notesAggregate(where: $where) {\n    aggregate {\n      count\n    }\n  }\n}\n\nquery GetNoteById($id: uuid!) {\n  noteById(id: $id) {\n    ...NoteDetailed\n  }\n}\n\nquery GetNoteBasic($id: uuid!) {\n  noteById(id: $id) {\n    ...NoteBasic\n  }\n}\n\nquery GetNotesByEntity($entityType: String!, $entityId: uuid!) {\n  notes(\n    where: {entityType: {_eq: $entityType}, entityId: {_eq: $entityId}}\n    orderBy: {createdAt: DESC}\n  ) {\n    ...NoteListItem\n  }\n}\n\nquery GetPayrollNotes($payrollId: uuid!) {\n  notes(\n    where: {entityType: {_eq: \"payroll\"}, entityId: {_eq: $payrollId}}\n    orderBy: {createdAt: DESC}\n  ) {\n    ...PayrollNote\n  }\n}\n\nquery GetClientNotes($clientId: uuid!) {\n  notes(\n    where: {entityType: {_eq: \"client\"}, entityId: {_eq: $clientId}}\n    orderBy: {createdAt: DESC}\n  ) {\n    ...ClientNote\n  }\n}\n\nquery GetUserNotes($userId: uuid!) {\n  notes(\n    where: {entityType: {_eq: \"user\"}, entityId: {_eq: $userId}}\n    orderBy: {createdAt: DESC}\n  ) {\n    ...UserNote\n  }\n}\n\nquery GetNotesByAuthor($authorUserId: uuid!) {\n  notes(where: {userId: {_eq: $authorUserId}}, orderBy: {createdAt: DESC}) {\n    ...NoteListItem\n  }\n}\n\nquery GetMyNotes($userId: uuid!) {\n  notes(where: {userId: {_eq: $userId}}, orderBy: {updatedAt: DESC}) {\n    ...NoteListItem\n  }\n}\n\nquery GetImportantNotes($limit: Int = 20) {\n  notes(\n    where: {isImportant: {_eq: true}}\n    orderBy: {createdAt: DESC}\n    limit: $limit\n  ) {\n    ...ImportantNote\n  }\n}\n\nquery GetImportantNotesByEntity($entityType: String!, $entityId: uuid!) {\n  notes(\n    where: {entityType: {_eq: $entityType}, entityId: {_eq: $entityId}, isImportant: {_eq: true}}\n    orderBy: {createdAt: DESC}\n  ) {\n    ...ImportantNote\n  }\n}\n\nquery GetRecentNotes($limit: Int = 10) {\n  notes(orderBy: {createdAt: DESC}, limit: $limit) {\n    ...RecentNote\n  }\n}\n\nquery GetRecentNotesByUser($userId: uuid!, $limit: Int = 10) {\n  notes(\n    where: {userId: {_eq: $userId}}\n    orderBy: {createdAt: DESC}\n    limit: $limit\n  ) {\n    ...RecentNote\n  }\n}\n\nquery SearchNotes($searchTerm: String!, $limit: Int = 50) {\n  notes(\n    where: {_or: [{content: {_ilike: $searchTerm}}, {authorUser: {name: {_ilike: $searchTerm}}}]}\n    orderBy: {createdAt: DESC}\n    limit: $limit\n  ) {\n    ...NoteListItem\n  }\n}\n\nquery SearchNotesByEntity($entityType: String!, $entityId: uuid!, $searchTerm: String!) {\n  notes(\n    where: {_and: [{entityType: {_eq: $entityType}}, {entityId: {_eq: $entityId}}, {_or: [{content: {_ilike: $searchTerm}}, {content: {_ilike: $searchTerm}}]}]}\n    orderBy: {createdAt: DESC}\n  ) {\n    ...NoteListItem\n  }\n}\n\nquery FilterNotesByDateRange($startDate: timestamp!, $endDate: timestamp!, $entityType: String, $entityId: uuid) {\n  notes(\n    where: {_and: [{createdAt: {_gte: $startDate}}, {createdAt: {_lte: $endDate}}, {entityType: {_eq: $entityType}}, {entityId: {_eq: $entityId}}]}\n    orderBy: {createdAt: DESC}\n  ) {\n    ...NoteListItem\n  }\n}\n\nquery GetNoteDashboardStats($userId: uuid!) {\n  totalNotes: notesAggregate {\n    aggregate {\n      count\n    }\n  }\n  importantNotes: notesAggregate(where: {isImportant: {_eq: true}}) {\n    aggregate {\n      count\n    }\n  }\n  recentNotes: notes(orderBy: {createdAt: DESC}, limit: 5) {\n    ...NoteDashboard\n  }\n  myRecentNotes: notes(\n    where: {userId: {_eq: $userId}}\n    orderBy: {createdAt: DESC}\n    limit: 3\n  ) {\n    ...NoteDashboard\n  }\n}\n\nquery GetNoteActivity($limit: Int = 20) {\n  notes(orderBy: {updatedAt: DESC}, limit: $limit) {\n    ...NoteCard\n  }\n}\n\nquery GetEntityNoteSummary($entityType: String!, $entityId: uuid!) {\n  totalCount: notesAggregate(\n    where: {entityType: {_eq: $entityType}, entityId: {_eq: $entityId}}\n  ) {\n    aggregate {\n      count\n    }\n  }\n  importantCount: notesAggregate(\n    where: {entityType: {_eq: $entityType}, entityId: {_eq: $entityId}, isImportant: {_eq: true}}\n  ) {\n    aggregate {\n      count\n    }\n  }\n  recentNotes: notes(\n    where: {entityType: {_eq: $entityType}, entityId: {_eq: $entityId}}\n    orderBy: {createdAt: DESC}\n    limit: 3\n  ) {\n    ...NoteCard\n  }\n}\n\nquery GetNotesForBulkUpdate($ids: [uuid!]!) {\n  notes(where: {id: {_in: $ids}}) {\n    ...NoteBasic\n  }\n}\n\nquery GetNotesByAuthorAndDateRange($authorUserId: uuid!, $startDate: timestamp!, $endDate: timestamp!) {\n  notes(\n    where: {_and: [{userId: {_eq: $authorUserId}}, {createdAt: {_gte: $startDate}}, {createdAt: {_lte: $endDate}}]}\n    orderBy: {createdAt: DESC}\n  ) {\n    ...NoteListItem\n  }\n}\n\nquery GetNotesForAudit($limit: Int = 100, $offset: Int = 0, $where: notesBoolExp = {}) {\n  notes(limit: $limit, offset: $offset, where: $where, orderBy: {createdAt: DESC}) {\n    ...NoteForAudit\n  }\n}\n\nquery GetNotesByEntityType($entityType: String!) {\n  notes(where: {entityType: {_eq: $entityType}}, orderBy: {createdAt: DESC}) {\n    ...NoteListItem\n  }\n}\n\nquery GetNotesPaginated($limit: Int = 20, $offset: Int = 0, $where: notesBoolExp = {}, $orderBy: [notesOrderBy!] = [{createdAt: DESC}]) {\n  notes(limit: $limit, offset: $offset, where: $where, orderBy: $orderBy) {\n    ...NoteListItem\n  }\n  notesAggregate(where: $where) {\n    aggregate {\n      count\n    }\n  }\n}\n\nquery GetEntityNotesPaginated($entityType: String!, $entityId: uuid!, $limit: Int = 20, $offset: Int = 0) {\n  notes(\n    where: {entityType: {_eq: $entityType}, entityId: {_eq: $entityId}}\n    orderBy: {createdAt: DESC}\n    limit: $limit\n    offset: $offset\n  ) {\n    ...NoteListItem\n  }\n  entityNotesAggregate: notesAggregate(\n    where: {entityType: {_eq: $entityType}, entityId: {_eq: $entityId}}\n  ) {\n    aggregate {\n      count\n    }\n  }\n}\n\nquery SearchNotesPaginated($searchTerm: String!, $limit: Int = 20, $offset: Int = 0) {\n  notes(\n    where: {_or: [{content: {_ilike: $searchTerm}}, {authorUser: {name: {_ilike: $searchTerm}}}]}\n    orderBy: {createdAt: DESC}\n    limit: $limit\n    offset: $offset\n  ) {\n    ...NoteListItem\n  }\n  searchAggregate: notesAggregate(\n    where: {_or: [{content: {_ilike: $searchTerm}}, {authorUser: {name: {_ilike: $searchTerm}}}]}\n  ) {\n    aggregate {\n      count\n    }\n  }\n}\n\nquery GetNotesQuickList($entityType: String!, $entityId: uuid!) {\n  notes(\n    where: {entityType: {_eq: $entityType}, entityId: {_eq: $entityId}}\n    orderBy: {createdAt: DESC}\n    limit: 5\n  ) {\n    ...NoteMinimal\n  }\n}\n\nquery GetImportantNotesQuickList($entityType: String!, $entityId: uuid!) {\n  notes(\n    where: {entityType: {_eq: $entityType}, entityId: {_eq: $entityId}, isImportant: {_eq: true}}\n    orderBy: {createdAt: DESC}\n  ) {\n    ...NoteMinimal\n  }\n}\n\nquery GetNotesExtracted($entityType: String!, $entityId: uuid!) {\n  notes(\n    where: {entityType: {_eq: $entityType}, entityId: {_eq: $entityId}}\n    orderBy: {createdAt: DESC}\n  ) {\n    ...NoteListItem\n  }\n}"): (typeof documents)["query GetNotes($limit: Int = 50, $offset: Int = 0, $where: notesBoolExp) {\n  notes(limit: $limit, offset: $offset, where: $where, orderBy: {createdAt: DESC}) {\n    ...NoteListItem\n  }\n  notesAggregate(where: $where) {\n    aggregate {\n      count\n    }\n  }\n}\n\nquery GetNoteById($id: uuid!) {\n  noteById(id: $id) {\n    ...NoteDetailed\n  }\n}\n\nquery GetNoteBasic($id: uuid!) {\n  noteById(id: $id) {\n    ...NoteBasic\n  }\n}\n\nquery GetNotesByEntity($entityType: String!, $entityId: uuid!) {\n  notes(\n    where: {entityType: {_eq: $entityType}, entityId: {_eq: $entityId}}\n    orderBy: {createdAt: DESC}\n  ) {\n    ...NoteListItem\n  }\n}\n\nquery GetPayrollNotes($payrollId: uuid!) {\n  notes(\n    where: {entityType: {_eq: \"payroll\"}, entityId: {_eq: $payrollId}}\n    orderBy: {createdAt: DESC}\n  ) {\n    ...PayrollNote\n  }\n}\n\nquery GetClientNotes($clientId: uuid!) {\n  notes(\n    where: {entityType: {_eq: \"client\"}, entityId: {_eq: $clientId}}\n    orderBy: {createdAt: DESC}\n  ) {\n    ...ClientNote\n  }\n}\n\nquery GetUserNotes($userId: uuid!) {\n  notes(\n    where: {entityType: {_eq: \"user\"}, entityId: {_eq: $userId}}\n    orderBy: {createdAt: DESC}\n  ) {\n    ...UserNote\n  }\n}\n\nquery GetNotesByAuthor($authorUserId: uuid!) {\n  notes(where: {userId: {_eq: $authorUserId}}, orderBy: {createdAt: DESC}) {\n    ...NoteListItem\n  }\n}\n\nquery GetMyNotes($userId: uuid!) {\n  notes(where: {userId: {_eq: $userId}}, orderBy: {updatedAt: DESC}) {\n    ...NoteListItem\n  }\n}\n\nquery GetImportantNotes($limit: Int = 20) {\n  notes(\n    where: {isImportant: {_eq: true}}\n    orderBy: {createdAt: DESC}\n    limit: $limit\n  ) {\n    ...ImportantNote\n  }\n}\n\nquery GetImportantNotesByEntity($entityType: String!, $entityId: uuid!) {\n  notes(\n    where: {entityType: {_eq: $entityType}, entityId: {_eq: $entityId}, isImportant: {_eq: true}}\n    orderBy: {createdAt: DESC}\n  ) {\n    ...ImportantNote\n  }\n}\n\nquery GetRecentNotes($limit: Int = 10) {\n  notes(orderBy: {createdAt: DESC}, limit: $limit) {\n    ...RecentNote\n  }\n}\n\nquery GetRecentNotesByUser($userId: uuid!, $limit: Int = 10) {\n  notes(\n    where: {userId: {_eq: $userId}}\n    orderBy: {createdAt: DESC}\n    limit: $limit\n  ) {\n    ...RecentNote\n  }\n}\n\nquery SearchNotes($searchTerm: String!, $limit: Int = 50) {\n  notes(\n    where: {_or: [{content: {_ilike: $searchTerm}}, {authorUser: {name: {_ilike: $searchTerm}}}]}\n    orderBy: {createdAt: DESC}\n    limit: $limit\n  ) {\n    ...NoteListItem\n  }\n}\n\nquery SearchNotesByEntity($entityType: String!, $entityId: uuid!, $searchTerm: String!) {\n  notes(\n    where: {_and: [{entityType: {_eq: $entityType}}, {entityId: {_eq: $entityId}}, {_or: [{content: {_ilike: $searchTerm}}, {content: {_ilike: $searchTerm}}]}]}\n    orderBy: {createdAt: DESC}\n  ) {\n    ...NoteListItem\n  }\n}\n\nquery FilterNotesByDateRange($startDate: timestamp!, $endDate: timestamp!, $entityType: String, $entityId: uuid) {\n  notes(\n    where: {_and: [{createdAt: {_gte: $startDate}}, {createdAt: {_lte: $endDate}}, {entityType: {_eq: $entityType}}, {entityId: {_eq: $entityId}}]}\n    orderBy: {createdAt: DESC}\n  ) {\n    ...NoteListItem\n  }\n}\n\nquery GetNoteDashboardStats($userId: uuid!) {\n  totalNotes: notesAggregate {\n    aggregate {\n      count\n    }\n  }\n  importantNotes: notesAggregate(where: {isImportant: {_eq: true}}) {\n    aggregate {\n      count\n    }\n  }\n  recentNotes: notes(orderBy: {createdAt: DESC}, limit: 5) {\n    ...NoteDashboard\n  }\n  myRecentNotes: notes(\n    where: {userId: {_eq: $userId}}\n    orderBy: {createdAt: DESC}\n    limit: 3\n  ) {\n    ...NoteDashboard\n  }\n}\n\nquery GetNoteActivity($limit: Int = 20) {\n  notes(orderBy: {updatedAt: DESC}, limit: $limit) {\n    ...NoteCard\n  }\n}\n\nquery GetEntityNoteSummary($entityType: String!, $entityId: uuid!) {\n  totalCount: notesAggregate(\n    where: {entityType: {_eq: $entityType}, entityId: {_eq: $entityId}}\n  ) {\n    aggregate {\n      count\n    }\n  }\n  importantCount: notesAggregate(\n    where: {entityType: {_eq: $entityType}, entityId: {_eq: $entityId}, isImportant: {_eq: true}}\n  ) {\n    aggregate {\n      count\n    }\n  }\n  recentNotes: notes(\n    where: {entityType: {_eq: $entityType}, entityId: {_eq: $entityId}}\n    orderBy: {createdAt: DESC}\n    limit: 3\n  ) {\n    ...NoteCard\n  }\n}\n\nquery GetNotesForBulkUpdate($ids: [uuid!]!) {\n  notes(where: {id: {_in: $ids}}) {\n    ...NoteBasic\n  }\n}\n\nquery GetNotesByAuthorAndDateRange($authorUserId: uuid!, $startDate: timestamp!, $endDate: timestamp!) {\n  notes(\n    where: {_and: [{userId: {_eq: $authorUserId}}, {createdAt: {_gte: $startDate}}, {createdAt: {_lte: $endDate}}]}\n    orderBy: {createdAt: DESC}\n  ) {\n    ...NoteListItem\n  }\n}\n\nquery GetNotesForAudit($limit: Int = 100, $offset: Int = 0, $where: notesBoolExp = {}) {\n  notes(limit: $limit, offset: $offset, where: $where, orderBy: {createdAt: DESC}) {\n    ...NoteForAudit\n  }\n}\n\nquery GetNotesByEntityType($entityType: String!) {\n  notes(where: {entityType: {_eq: $entityType}}, orderBy: {createdAt: DESC}) {\n    ...NoteListItem\n  }\n}\n\nquery GetNotesPaginated($limit: Int = 20, $offset: Int = 0, $where: notesBoolExp = {}, $orderBy: [notesOrderBy!] = [{createdAt: DESC}]) {\n  notes(limit: $limit, offset: $offset, where: $where, orderBy: $orderBy) {\n    ...NoteListItem\n  }\n  notesAggregate(where: $where) {\n    aggregate {\n      count\n    }\n  }\n}\n\nquery GetEntityNotesPaginated($entityType: String!, $entityId: uuid!, $limit: Int = 20, $offset: Int = 0) {\n  notes(\n    where: {entityType: {_eq: $entityType}, entityId: {_eq: $entityId}}\n    orderBy: {createdAt: DESC}\n    limit: $limit\n    offset: $offset\n  ) {\n    ...NoteListItem\n  }\n  entityNotesAggregate: notesAggregate(\n    where: {entityType: {_eq: $entityType}, entityId: {_eq: $entityId}}\n  ) {\n    aggregate {\n      count\n    }\n  }\n}\n\nquery SearchNotesPaginated($searchTerm: String!, $limit: Int = 20, $offset: Int = 0) {\n  notes(\n    where: {_or: [{content: {_ilike: $searchTerm}}, {authorUser: {name: {_ilike: $searchTerm}}}]}\n    orderBy: {createdAt: DESC}\n    limit: $limit\n    offset: $offset\n  ) {\n    ...NoteListItem\n  }\n  searchAggregate: notesAggregate(\n    where: {_or: [{content: {_ilike: $searchTerm}}, {authorUser: {name: {_ilike: $searchTerm}}}]}\n  ) {\n    aggregate {\n      count\n    }\n  }\n}\n\nquery GetNotesQuickList($entityType: String!, $entityId: uuid!) {\n  notes(\n    where: {entityType: {_eq: $entityType}, entityId: {_eq: $entityId}}\n    orderBy: {createdAt: DESC}\n    limit: 5\n  ) {\n    ...NoteMinimal\n  }\n}\n\nquery GetImportantNotesQuickList($entityType: String!, $entityId: uuid!) {\n  notes(\n    where: {entityType: {_eq: $entityType}, entityId: {_eq: $entityId}, isImportant: {_eq: true}}\n    orderBy: {createdAt: DESC}\n  ) {\n    ...NoteMinimal\n  }\n}\n\nquery GetNotesExtracted($entityType: String!, $entityId: uuid!) {\n  notes(\n    where: {entityType: {_eq: $entityType}, entityId: {_eq: $entityId}}\n    orderBy: {createdAt: DESC}\n  ) {\n    ...NoteListItem\n  }\n}"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "subscription NoteUpdates($entityType: String!, $entityId: uuid!) {\n  notes(\n    where: {entityType: {_eq: $entityType}, entityId: {_eq: $entityId}}\n    orderBy: {createdAt: DESC}\n  ) {\n    ...NoteListItem\n  }\n}\n\nsubscription NotesByEntityUpdates($entityType: String!, $entityId: uuid!) {\n  notes(\n    where: {entityType: {_eq: $entityType}, entityId: {_eq: $entityId}}\n    orderBy: {updatedAt: DESC}\n  ) {\n    ...NoteListItem\n  }\n}\n\nsubscription SingleNoteUpdates($id: uuid!) {\n  notes(where: {id: {_eq: $id}}) {\n    ...NoteDetailed\n  }\n}\n\nsubscription PayrollNotesUpdates($payrollId: uuid!) {\n  notes(\n    where: {entityType: {_eq: \"payroll\"}, entityId: {_eq: $payrollId}}\n    orderBy: {createdAt: DESC}\n  ) {\n    ...PayrollNote\n  }\n}\n\nsubscription ClientNotesUpdates($clientId: uuid!) {\n  notes(\n    where: {entityType: {_eq: \"client\"}, entityId: {_eq: $clientId}}\n    orderBy: {createdAt: DESC}\n  ) {\n    ...ClientNote\n  }\n}\n\nsubscription UserNotesUpdates($userId: uuid!) {\n  notes(\n    where: {entityType: {_eq: \"user\"}, entityId: {_eq: $userId}}\n    orderBy: {createdAt: DESC}\n  ) {\n    ...UserNote\n  }\n}\n\nsubscription MyNotesUpdates($authorUserId: uuid!) {\n  notes(where: {userId: {_eq: $authorUserId}}, orderBy: {updatedAt: DESC}) {\n    ...NoteListItem\n  }\n}\n\nsubscription RecentNotesUpdates {\n  notes(orderBy: {createdAt: DESC}, limit: 20) {\n    ...RecentNote\n  }\n}\n\nsubscription ImportantNotesUpdates($limit: Int = 10) {\n  notes(\n    where: {isImportant: {_eq: true}}\n    orderBy: {createdAt: DESC}\n    limit: $limit\n  ) {\n    ...ImportantNote\n  }\n}\n\nsubscription ImportantNotesByEntityUpdates($entityType: String!, $entityId: uuid!) {\n  notes(\n    where: {entityType: {_eq: $entityType}, entityId: {_eq: $entityId}, isImportant: {_eq: true}}\n    orderBy: {createdAt: DESC}\n  ) {\n    ...ImportantNote\n  }\n}\n\nsubscription NoteActivityUpdates {\n  notes(orderBy: {updatedAt: DESC}, limit: 15) {\n    ...NoteCard\n  }\n}\n\nsubscription TotalNotesUpdates {\n  notesAggregate {\n    aggregate {\n      count\n    }\n  }\n}\n\nsubscription ImportantNotesCountUpdates {\n  notesAggregate(where: {isImportant: {_eq: true}}) {\n    aggregate {\n      count\n    }\n  }\n}\n\nsubscription TodaysNotesUpdates {\n  notesAggregate(where: {createdAt: {_gte: \"today\"}}) {\n    aggregate {\n      count\n    }\n  }\n}\n\nsubscription EntityNotesUpdates($entityType: String!, $entityId: uuid!) {\n  notesAggregate(\n    where: {entityType: {_eq: $entityType}, entityId: {_eq: $entityId}}\n  ) {\n    aggregate {\n      count\n    }\n  }\n}\n\nsubscription EntityImportantNotesUpdates($entityType: String!, $entityId: uuid!) {\n  notesAggregate(\n    where: {entityType: {_eq: $entityType}, entityId: {_eq: $entityId}, isImportant: {_eq: true}}\n  ) {\n    aggregate {\n      count\n    }\n  }\n}\n\nsubscription UserNoteActivityUpdates($authorUserId: uuid!) {\n  notes(\n    where: {userId: {_eq: $authorUserId}}\n    orderBy: {updatedAt: DESC}\n    limit: 10\n  ) {\n    ...NoteCard\n  }\n}\n\nsubscription NotesByDateRangeUpdates($startDate: timestamp!, $endDate: timestamp!) {\n  notes(\n    where: {createdAt: {_gte: $startDate, _lte: $endDate}}\n    orderBy: {createdAt: DESC}\n  ) {\n    ...NoteListItem\n  }\n}\n\nsubscription NoteSearchUpdates($searchTerm: String!) {\n  notes(\n    where: {_or: [{content: {_ilike: $searchTerm}}, {authorUser: {name: {_ilike: $searchTerm}}}]}\n    orderBy: {createdAt: DESC}\n  ) {\n    ...NoteListItem\n  }\n}\n\nsubscription TeamNotesUpdates($teamUserIds: [uuid!]!) {\n  notes(where: {userId: {_in: $teamUserIds}}, orderBy: {createdAt: DESC}) {\n    ...NoteListItem\n  }\n}\n\nsubscription EntityTypeNotesUpdates($entityType: String!) {\n  notes(where: {entityType: {_eq: $entityType}}, orderBy: {createdAt: DESC}) {\n    ...NoteListItem\n  }\n}\n\nsubscription NoteChangesUpdates($noteId: uuid!) {\n  notes(where: {id: {_eq: $noteId}}) {\n    id\n    content\n    isImportant\n    updatedAt\n    authorUser {\n      id\n      name\n    }\n  }\n}\n\nsubscription NewNotesUpdates {\n  notes(\n    where: {createdAt: {_gte: \"now() - interval '5 minutes'\"}}\n    orderBy: {createdAt: DESC}\n  ) {\n    ...NoteCard\n    createdAt\n  }\n}\n\nsubscription RecentNotesListUpdates {\n  notes(orderBy: {createdAt: DESC}, limit: 5) {\n    id\n    content\n    createdAt\n    authorUser {\n      name\n    }\n    entityType\n  }\n}\n\nsubscription NotesCountUpdates {\n  notesAggregate {\n    aggregate {\n      count\n    }\n  }\n}\n\nsubscription NoteAuditUpdates {\n  notes(orderBy: {updatedAt: DESC}, limit: 50) {\n    ...NoteForAudit\n  }\n}\n\nsubscription ImportantNoteChangesUpdates {\n  notes(where: {isImportant: {_eq: true}}, orderBy: {updatedAt: DESC}) {\n    ...ImportantNote\n  }\n}"): (typeof documents)["subscription NoteUpdates($entityType: String!, $entityId: uuid!) {\n  notes(\n    where: {entityType: {_eq: $entityType}, entityId: {_eq: $entityId}}\n    orderBy: {createdAt: DESC}\n  ) {\n    ...NoteListItem\n  }\n}\n\nsubscription NotesByEntityUpdates($entityType: String!, $entityId: uuid!) {\n  notes(\n    where: {entityType: {_eq: $entityType}, entityId: {_eq: $entityId}}\n    orderBy: {updatedAt: DESC}\n  ) {\n    ...NoteListItem\n  }\n}\n\nsubscription SingleNoteUpdates($id: uuid!) {\n  notes(where: {id: {_eq: $id}}) {\n    ...NoteDetailed\n  }\n}\n\nsubscription PayrollNotesUpdates($payrollId: uuid!) {\n  notes(\n    where: {entityType: {_eq: \"payroll\"}, entityId: {_eq: $payrollId}}\n    orderBy: {createdAt: DESC}\n  ) {\n    ...PayrollNote\n  }\n}\n\nsubscription ClientNotesUpdates($clientId: uuid!) {\n  notes(\n    where: {entityType: {_eq: \"client\"}, entityId: {_eq: $clientId}}\n    orderBy: {createdAt: DESC}\n  ) {\n    ...ClientNote\n  }\n}\n\nsubscription UserNotesUpdates($userId: uuid!) {\n  notes(\n    where: {entityType: {_eq: \"user\"}, entityId: {_eq: $userId}}\n    orderBy: {createdAt: DESC}\n  ) {\n    ...UserNote\n  }\n}\n\nsubscription MyNotesUpdates($authorUserId: uuid!) {\n  notes(where: {userId: {_eq: $authorUserId}}, orderBy: {updatedAt: DESC}) {\n    ...NoteListItem\n  }\n}\n\nsubscription RecentNotesUpdates {\n  notes(orderBy: {createdAt: DESC}, limit: 20) {\n    ...RecentNote\n  }\n}\n\nsubscription ImportantNotesUpdates($limit: Int = 10) {\n  notes(\n    where: {isImportant: {_eq: true}}\n    orderBy: {createdAt: DESC}\n    limit: $limit\n  ) {\n    ...ImportantNote\n  }\n}\n\nsubscription ImportantNotesByEntityUpdates($entityType: String!, $entityId: uuid!) {\n  notes(\n    where: {entityType: {_eq: $entityType}, entityId: {_eq: $entityId}, isImportant: {_eq: true}}\n    orderBy: {createdAt: DESC}\n  ) {\n    ...ImportantNote\n  }\n}\n\nsubscription NoteActivityUpdates {\n  notes(orderBy: {updatedAt: DESC}, limit: 15) {\n    ...NoteCard\n  }\n}\n\nsubscription TotalNotesUpdates {\n  notesAggregate {\n    aggregate {\n      count\n    }\n  }\n}\n\nsubscription ImportantNotesCountUpdates {\n  notesAggregate(where: {isImportant: {_eq: true}}) {\n    aggregate {\n      count\n    }\n  }\n}\n\nsubscription TodaysNotesUpdates {\n  notesAggregate(where: {createdAt: {_gte: \"today\"}}) {\n    aggregate {\n      count\n    }\n  }\n}\n\nsubscription EntityNotesUpdates($entityType: String!, $entityId: uuid!) {\n  notesAggregate(\n    where: {entityType: {_eq: $entityType}, entityId: {_eq: $entityId}}\n  ) {\n    aggregate {\n      count\n    }\n  }\n}\n\nsubscription EntityImportantNotesUpdates($entityType: String!, $entityId: uuid!) {\n  notesAggregate(\n    where: {entityType: {_eq: $entityType}, entityId: {_eq: $entityId}, isImportant: {_eq: true}}\n  ) {\n    aggregate {\n      count\n    }\n  }\n}\n\nsubscription UserNoteActivityUpdates($authorUserId: uuid!) {\n  notes(\n    where: {userId: {_eq: $authorUserId}}\n    orderBy: {updatedAt: DESC}\n    limit: 10\n  ) {\n    ...NoteCard\n  }\n}\n\nsubscription NotesByDateRangeUpdates($startDate: timestamp!, $endDate: timestamp!) {\n  notes(\n    where: {createdAt: {_gte: $startDate, _lte: $endDate}}\n    orderBy: {createdAt: DESC}\n  ) {\n    ...NoteListItem\n  }\n}\n\nsubscription NoteSearchUpdates($searchTerm: String!) {\n  notes(\n    where: {_or: [{content: {_ilike: $searchTerm}}, {authorUser: {name: {_ilike: $searchTerm}}}]}\n    orderBy: {createdAt: DESC}\n  ) {\n    ...NoteListItem\n  }\n}\n\nsubscription TeamNotesUpdates($teamUserIds: [uuid!]!) {\n  notes(where: {userId: {_in: $teamUserIds}}, orderBy: {createdAt: DESC}) {\n    ...NoteListItem\n  }\n}\n\nsubscription EntityTypeNotesUpdates($entityType: String!) {\n  notes(where: {entityType: {_eq: $entityType}}, orderBy: {createdAt: DESC}) {\n    ...NoteListItem\n  }\n}\n\nsubscription NoteChangesUpdates($noteId: uuid!) {\n  notes(where: {id: {_eq: $noteId}}) {\n    id\n    content\n    isImportant\n    updatedAt\n    authorUser {\n      id\n      name\n    }\n  }\n}\n\nsubscription NewNotesUpdates {\n  notes(\n    where: {createdAt: {_gte: \"now() - interval '5 minutes'\"}}\n    orderBy: {createdAt: DESC}\n  ) {\n    ...NoteCard\n    createdAt\n  }\n}\n\nsubscription RecentNotesListUpdates {\n  notes(orderBy: {createdAt: DESC}, limit: 5) {\n    id\n    content\n    createdAt\n    authorUser {\n      name\n    }\n    entityType\n  }\n}\n\nsubscription NotesCountUpdates {\n  notesAggregate {\n    aggregate {\n      count\n    }\n  }\n}\n\nsubscription NoteAuditUpdates {\n  notes(orderBy: {updatedAt: DESC}, limit: 50) {\n    ...NoteForAudit\n  }\n}\n\nsubscription ImportantNoteChangesUpdates {\n  notes(where: {isImportant: {_eq: true}}, orderBy: {updatedAt: DESC}) {\n    ...ImportantNote\n  }\n}"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "fragment UserCore on users {\n  id\n  name\n  email\n  username\n  role\n  isActive\n  isStaff\n  clerkUserId\n  createdAt\n  updatedAt\n}\n\nfragment UserBasic on users {\n  id\n  name\n  email\n  role\n  isActive\n}\n\nfragment UserWithManager on users {\n  ...UserCore\n  managerId\n  managerUser {\n    ...UserBasic\n  }\n}\n\nfragment RoleCore on roles {\n  id\n  name\n  description\n  displayName\n  priority\n  isSystemRole\n  createdAt\n}\n\nfragment PermissionCore on permissions {\n  id\n  action\n  description\n  resourceId\n  createdAt\n  updatedAt\n}\n\nfragment PermissionWithResource on permissions {\n  ...PermissionCore\n  relatedResource {\n    id\n    name\n    description\n  }\n}\n\nfragment ClientCore on clients {\n  id\n  name\n  contactEmail\n  contactPerson\n  contactPhone\n  active\n  createdAt\n  updatedAt\n}\n\nfragment ClientBasic on clients {\n  id\n  name\n  active\n}\n\nfragment ResourceCore on resources {\n  id\n  name\n  displayName\n  description\n  createdAt\n  updatedAt\n}\n\nfragment UserRoleCore on userRoles {\n  id\n  userId\n  roleId\n  createdAt\n  updatedAt\n}\n\nfragment RolePermissionCore on rolePermissions {\n  id\n  roleId\n  permissionId\n  conditions\n  createdAt\n  updatedAt\n}\n\nfragment AuditFields on auditLogs {\n  id\n  eventTime\n  action\n  resourceType\n  resourceId\n  userId\n  ipAddress\n  userAgent\n  success\n  userEmail\n  userRole\n}"): (typeof documents)["fragment UserCore on users {\n  id\n  name\n  email\n  username\n  role\n  isActive\n  isStaff\n  clerkUserId\n  createdAt\n  updatedAt\n}\n\nfragment UserBasic on users {\n  id\n  name\n  email\n  role\n  isActive\n}\n\nfragment UserWithManager on users {\n  ...UserCore\n  managerId\n  managerUser {\n    ...UserBasic\n  }\n}\n\nfragment RoleCore on roles {\n  id\n  name\n  description\n  displayName\n  priority\n  isSystemRole\n  createdAt\n}\n\nfragment PermissionCore on permissions {\n  id\n  action\n  description\n  resourceId\n  createdAt\n  updatedAt\n}\n\nfragment PermissionWithResource on permissions {\n  ...PermissionCore\n  relatedResource {\n    id\n    name\n    description\n  }\n}\n\nfragment ClientCore on clients {\n  id\n  name\n  contactEmail\n  contactPerson\n  contactPhone\n  active\n  createdAt\n  updatedAt\n}\n\nfragment ClientBasic on clients {\n  id\n  name\n  active\n}\n\nfragment ResourceCore on resources {\n  id\n  name\n  displayName\n  description\n  createdAt\n  updatedAt\n}\n\nfragment UserRoleCore on userRoles {\n  id\n  userId\n  roleId\n  createdAt\n  updatedAt\n}\n\nfragment RolePermissionCore on rolePermissions {\n  id\n  roleId\n  permissionId\n  conditions\n  createdAt\n  updatedAt\n}\n\nfragment AuditFields on auditLogs {\n  id\n  eventTime\n  action\n  resourceType\n  resourceId\n  userId\n  ipAddress\n  userAgent\n  success\n  userEmail\n  userRole\n}"];

export function gql(source: string) {
  return (documents as any)[source] ?? {};
}

export type DocumentType<TDocumentNode extends DocumentNode<any, any>> = TDocumentNode extends DocumentNode<  infer TType,  any>  ? TType  : never;