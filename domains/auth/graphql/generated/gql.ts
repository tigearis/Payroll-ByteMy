/* eslint-disable */
import * as types from './graphql';
import { TypedDocumentNode as DocumentNode } from '@graphql-typed-document-node/core';

/**
 * Map of all GraphQL operations in the project.
 *
 * This map has several performance disadvantages:
 * 1. It is not tree-shakeable, so it will include all operations in the project.
 * 2. It is not minifiable, so the string of a GraphQL query will be multiple times inside the bundle.
 * 3. It does not support dead code elimination, so it will add unused operations.
 *
 * Therefore it is highly recommended to use the babel or swc plugin for production.
 * Learn more about it here: https://the-guild.dev/graphql/codegen/plugins/presets/preset-client#reducing-bundle-size
 */
type Documents = {
    "fragment AuthUserCore on Users {\n  id\n  firstName\n  lastName\n  computedName\n  email\n  role\n  isActive\n  clerkUserId\n  createdAt\n  updatedAt\n}\n\nfragment AuthUserWithRoles on Users {\n  ...AuthUserCore\n  roleAssignments {\n    id\n    roleId\n    role {\n      id\n      name\n      displayName\n      description\n      priority\n      isSystemRole\n    }\n  }\n}\n\nfragment AuthRoleCore on Roles {\n  id\n  name\n  displayName\n  description\n  priority\n  isSystemRole\n  createdAt\n  updatedAt\n}\n\nfragment AuthPermissionCore on Permissions {\n  id\n  resourceId\n  action\n  description\n  legacyPermissionName\n  createdAt\n  updatedAt\n}\n\nfragment AuthUserRoleWithDetails on UserRoles {\n  id\n  userId\n  roleId\n  createdAt\n  updatedAt\n  user {\n    id\n    firstName\n    lastName\n    computedName\n    email\n    isActive\n  }\n  role {\n    id\n    name\n    displayName\n    description\n    priority\n  }\n}\n\nfragment PermissionOverrideCore on PermissionOverrides {\n  id\n  userId\n  role\n  resource\n  operation\n  granted\n  conditions\n  createdBy\n  expiresAt\n  createdAt\n  updatedAt\n}\n\nfragment UserInvitationCore on UserInvitations {\n  id\n  email\n  firstName\n  lastName\n  invitedRole\n  managerId\n  clerkInvitationId\n  clerkTicket\n  invitationMetadata\n  invitedBy\n  invitedAt\n  acceptedAt\n  acceptedBy\n  expiresAt\n  invitationStatus\n  revokedAt\n  revokedBy\n  revokeReason\n  createdAt\n  updatedAt\n}\n\nfragment UserInvitationWithDetails on UserInvitations {\n  ...UserInvitationCore\n  invitedByUser {\n    id\n    firstName\n    lastName\n    computedName\n    email\n    role\n  }\n  managerUser {\n    id\n    firstName\n    lastName\n    computedName\n    email\n    role\n  }\n  acceptedByUser {\n    id\n    firstName\n    lastName\n    computedName\n    email\n    clerkUserId\n    isActive\n  }\n}": typeof types.AuthUserCoreFragmentDoc,
    "mutation AssignRoleToUser($userId: uuid!, $roleId: uuid!) {\n  insertUserRoles(objects: [{userId: $userId, roleId: $roleId}]) {\n    returning {\n      id\n      userId\n      roleId\n      role {\n        name\n        displayName\n        priority\n      }\n    }\n  }\n}\n\nmutation RemoveRoleFromUser($userRoleId: uuid!) {\n  deleteUserRolesByPk(id: $userRoleId) {\n    id\n    roleId\n  }\n}\n\nmutation UpdateUserRoleAssignment($id: uuid!, $set: UserRolesSetInput!) {\n  updateUserRolesByPk(pkColumns: {id: $id}, _set: $set) {\n    id\n    userId\n    roleId\n    updatedAt\n  }\n}\n\nmutation SetUserRoles($userId: uuid!, $roleIds: [UserRolesInsertInput!]!) {\n  deleteUserRoles(where: {userId: {_eq: $userId}}) {\n    affectedRows\n  }\n  insertUserRoles(objects: $roleIds) {\n    returning {\n      id\n      userId\n      roleId\n      role {\n        name\n        displayName\n      }\n    }\n    affectedRows\n  }\n}\n\nmutation CreateUserPermissionOverride($userId: uuid!, $resource: String!, $operation: String!, $granted: Boolean!, $conditions: jsonb = null, $expiresAt: timestamptz = null, $reason: String = null) {\n  insertPermissionOverrides(\n    objects: [{userId: $userId, resource: $resource, operation: $operation, granted: $granted, conditions: $conditions, expiresAt: $expiresAt, reason: $reason}]\n  ) {\n    returning {\n      id\n      userId\n      resource\n      operation\n      granted\n      conditions\n      expiresAt\n      reason\n      createdAt\n    }\n  }\n}\n\nmutation UpdateUserPermissionOverride($id: uuid!, $set: PermissionOverridesSetInput!) {\n  updatePermissionOverridesByPk(pkColumns: {id: $id}, _set: $set) {\n    id\n    userId\n    resource\n    operation\n    granted\n    expiresAt\n    reason\n    updatedAt\n  }\n}\n\nmutation RemoveUserPermissionOverride($id: uuid!) {\n  deletePermissionOverridesByPk(id: $id) {\n    id\n    userId\n    resource\n    operation\n  }\n}\n\nmutation CreateUserInvitation($email: String!, $firstName: String!, $lastName: String!, $invitedRole: String!, $managerId: uuid, $clerkInvitationId: String, $clerkTicket: String, $invitationMetadata: jsonb, $invitedBy: uuid!, $expiresAt: timestamptz!) {\n  insertUserInvitations(\n    objects: [{email: $email, firstName: $firstName, lastName: $lastName, invitedRole: $invitedRole, managerId: $managerId, clerkInvitationId: $clerkInvitationId, clerkTicket: $clerkTicket, invitationMetadata: $invitationMetadata, invitedBy: $invitedBy, expiresAt: $expiresAt, invitationStatus: \"pending\"}]\n  ) {\n    returning {\n      ...UserInvitationDetail\n    }\n  }\n}\n\nmutation CompleteInvitationAcceptance($invitationId: uuid!, $clerkUserId: String!, $userEmail: String!, $firstName: String!, $lastName: String!) {\n  insertUsers(\n    objects: [{clerkUserId: $clerkUserId, email: $userEmail, firstName: $firstName, lastName: $lastName, isActive: true}]\n  ) {\n    returning {\n      id\n      email\n      firstName\n      lastName\n      computedName\n      clerkUserId\n      isActive\n      createdAt\n    }\n  }\n  updateUserInvitationsByPk(\n    pkColumns: {id: $invitationId}\n    _set: {invitationStatus: \"accepted\", acceptedAt: \"now()\", updatedAt: \"now()\"}\n  ) {\n    id\n    status\n    acceptedAt\n  }\n}\n\nmutation AssignInvitationRole($userId: uuid!, $roleId: uuid!, $invitationId: uuid!) {\n  insertUserRoles(objects: [{userId: $userId, roleId: $roleId}]) {\n    returning {\n      id\n      userId\n      roleId\n      role {\n        id\n        name\n        displayName\n      }\n    }\n  }\n}\n\nmutation CancelUserInvitation($invitationId: uuid!) {\n  updateUserInvitationsByPk(\n    pkColumns: {id: $invitationId}\n    _set: {invitationStatus: \"cancelled\", updatedAt: \"now()\"}\n  ) {\n    ...UserInvitationDetail\n  }\n}\n\nmutation ResendUserInvitation($invitationId: uuid!, $newExpiresAt: timestamptz!, $newClerkTicket: String, $newClerkInvitationId: String) {\n  updateUserInvitationsByPk(\n    pkColumns: {id: $invitationId}\n    _set: {expiresAt: $newExpiresAt, clerkTicket: $newClerkTicket, clerkInvitationId: $newClerkInvitationId, invitationStatus: \"pending\", updatedAt: \"now()\"}\n  ) {\n    ...UserInvitationDetail\n  }\n}\n\nmutation MarkExpiredInvitations {\n  updateUserInvitations(\n    where: {invitationStatus: {_eq: \"pending\"}, expiresAt: {_lt: \"now()\"}}\n    _set: {invitationStatus: \"expired\", updatedAt: \"now()\"}\n  ) {\n    affectedRows\n  }\n}\n\nmutation RevokeInvitation($invitationId: uuid!, $revokeReason: String!, $revokedBy: uuid!) {\n  updateUserInvitationsByPk(\n    pkColumns: {id: $invitationId}\n    _set: {invitationStatus: \"revoked\", revokedAt: \"now()\", revokedBy: $revokedBy, revokeReason: $revokeReason, updatedAt: \"now()\"}\n  ) {\n    ...UserInvitationCore\n  }\n}\n\nmutation ResendInvitationEnhanced($invitationId: uuid!, $newExpiresAt: timestamptz!, $newClerkTicket: String, $newClerkInvitationId: String) {\n  updateUserInvitationsByPk(\n    pkColumns: {id: $invitationId}\n    _set: {expiresAt: $newExpiresAt, clerkTicket: $newClerkTicket, clerkInvitationId: $newClerkInvitationId, invitationStatus: \"pending\", updatedAt: \"now()\"}\n  ) {\n    ...UserInvitationCore\n  }\n}\n\nmutation CreateInvitationEnhanced($email: String!, $firstName: String!, $lastName: String!, $invitedRole: String!, $managerId: uuid, $clerkInvitationId: String, $clerkTicket: String, $invitationMetadata: jsonb, $invitedBy: uuid!, $expiresAt: timestamptz!) {\n  insertUserInvitations(\n    objects: [{email: $email, firstName: $firstName, lastName: $lastName, invitedRole: $invitedRole, managerId: $managerId, clerkInvitationId: $clerkInvitationId, clerkTicket: $clerkTicket, invitationMetadata: $invitationMetadata, invitedBy: $invitedBy, expiresAt: $expiresAt}]\n  ) {\n    returning {\n      ...UserInvitationCore\n    }\n  }\n}\n\nmutation AcceptInvitationEnhanced($invitationId: uuid!, $acceptedBy: uuid!) {\n  updateUserInvitationsByPk(\n    pkColumns: {id: $invitationId}\n    _set: {invitationStatus: \"accepted\", acceptedAt: \"now()\", acceptedBy: $acceptedBy, updatedAt: \"now()\"}\n  ) {\n    ...UserInvitationCore\n  }\n}\n\nmutation BulkRevokeInvitations($invitationIds: [uuid!]!, $revokeReason: String!, $revokedBy: uuid!) {\n  updateUserInvitations(\n    where: {id: {_in: $invitationIds}}\n    _set: {invitationStatus: \"revoked\", revokedAt: \"now()\", revokedBy: $revokedBy, revokeReason: $revokeReason, updatedAt: \"now()\"}\n  ) {\n    returning {\n      ...UserInvitationCore\n    }\n    affectedRows\n  }\n}\n\nmutation DeactivateUser($userId: uuid!, $reason: String!, $deactivatedBy: uuid!, $deactivatedByString: String!) {\n  updateUsersByPk(\n    pkColumns: {id: $userId}\n    _set: {status: \"inactive\", isActive: false, deactivatedAt: \"now()\", deactivatedBy: $deactivatedByString, statusChangeReason: $reason, statusChangedAt: \"now()\", statusChangedBy: $deactivatedBy, updatedAt: \"now()\"}\n  ) {\n    id\n    email\n    firstName\n    lastName\n    computedName\n    status\n    isActive\n    deactivatedAt\n    deactivatedBy\n    statusChangeReason\n    statusChangedAt\n    statusChangedBy\n  }\n}\n\nmutation LockUser($userId: uuid!, $reason: String!, $lockedBy: uuid!) {\n  updateUsersByPk(\n    pkColumns: {id: $userId}\n    _set: {status: \"locked\", isActive: false, statusChangeReason: $reason, statusChangedAt: \"now()\", statusChangedBy: $lockedBy, updatedAt: \"now()\"}\n  ) {\n    id\n    email\n    firstName\n    lastName\n    computedName\n    status\n    isActive\n    statusChangeReason\n    statusChangedAt\n    statusChangedBy\n  }\n}\n\nmutation UnlockUser($userId: uuid!, $reason: String!, $unlockedBy: uuid!) {\n  updateUsersByPk(\n    pkColumns: {id: $userId}\n    _set: {status: \"active\", isActive: true, statusChangeReason: $reason, statusChangedAt: \"now()\", statusChangedBy: $unlockedBy, updatedAt: \"now()\"}\n  ) {\n    id\n    email\n    firstName\n    lastName\n    computedName\n    status\n    isActive\n    statusChangeReason\n    statusChangedAt\n    statusChangedBy\n  }\n}\n\nmutation ReactivateUser($userId: uuid!, $reason: String!, $reactivatedBy: uuid!) {\n  updateUsersByPk(\n    pkColumns: {id: $userId}\n    _set: {status: \"active\", isActive: true, deactivatedAt: null, deactivatedBy: null, statusChangeReason: $reason, statusChangedAt: \"now()\", statusChangedBy: $reactivatedBy, updatedAt: \"now()\"}\n  ) {\n    id\n    email\n    firstName\n    lastName\n    computedName\n    status\n    isActive\n    deactivatedAt\n    deactivatedBy\n    statusChangeReason\n    statusChangedAt\n    statusChangedBy\n  }\n}\n\nmutation BulkChangeUserStatus($userIds: [uuid!]!, $newStatus: user_status_enum!, $reason: String!, $changedBy: uuid!, $setInactive: Boolean! = false) {\n  updateUsers(\n    where: {id: {_in: $userIds}}\n    _set: {status: $newStatus, isActive: $setInactive, statusChangeReason: $reason, statusChangedAt: \"now()\", statusChangedBy: $changedBy, updatedAt: \"now()\"}\n  ) {\n    returning {\n      id\n      email\n      firstName\n      lastName\n      computedName\n      status\n      isActive\n      statusChangeReason\n      statusChangedAt\n      statusChangedBy\n    }\n    affectedRows\n  }\n}\n\nmutation UpdateUserStatus($userId: uuid!, $newStatus: user_status_enum!, $reason: String!, $changedBy: uuid!, $metadata: jsonb = null) {\n  updateUsersByPk(\n    pkColumns: {id: $userId}\n    _set: {status: $newStatus, isActive: true, statusChangeReason: $reason, statusChangedAt: \"now()\", statusChangedBy: $changedBy, updatedAt: \"now()\"}\n  ) {\n    id\n    email\n    firstName\n    lastName\n    computedName\n    status\n    isActive\n    role\n    statusChangeReason\n    statusChangedAt\n    statusChangedBy\n    deactivatedAt\n    deactivatedBy\n    createdAt\n    updatedAt\n  }\n}\n\nmutation DeleteExpiredInvitation($invitationId: uuid!) {\n  deleteUserInvitationsByPk(id: $invitationId) {\n    id\n    email\n    invitationStatus\n    expiresAt\n  }\n}\n\nmutation DeleteUser($userId: uuid!) {\n  deleteUsersByPk(id: $userId) {\n    id\n    email\n    firstName\n    lastName\n    role\n    createdAt\n  }\n}\n\nmutation BulkDeleteExpiredInvitations($invitationIds: [uuid!]!) {\n  deleteUserInvitations(where: {id: {_in: $invitationIds}}) {\n    affectedRows\n    returning {\n      id\n      email\n      invitationStatus\n      expiresAt\n    }\n  }\n}\n\nmutation BulkDeleteOrphanedUsers($userIds: [uuid!]!) {\n  deleteUsers(where: {id: {_in: $userIds}}) {\n    affectedRows\n    returning {\n      id\n      email\n      firstName\n      lastName\n      role\n      createdAt\n    }\n  }\n}": typeof types.AssignRoleToUserDocument,
    "query GetCurrentUserRoles {\n  users(limit: 1) {\n    id\n    email\n    isActive\n    isStaff\n    roleAssignments {\n      role {\n        id\n        name\n        displayName\n        description\n        priority\n        isSystemRole\n        rolePermissions {\n          permission {\n            id\n            action\n            description\n            resource {\n              id\n              name\n              displayName\n              description\n            }\n          }\n          conditions\n        }\n      }\n    }\n  }\n}\n\nquery GetAllRoles {\n  roles(orderBy: {priority: DESC}) {\n    id\n    name\n    displayName\n    description\n    priority\n    isSystemRole\n    rolePermissions {\n      id\n      conditions\n      permission {\n        id\n        action\n        description\n        resource {\n          id\n          name\n          displayName\n          description\n        }\n      }\n    }\n  }\n}\n\nquery GetResourcesAndPermissions {\n  resources(orderBy: {name: ASC}) {\n    id\n    name\n    displayName\n    description\n    permissions {\n      id\n      action\n      description\n    }\n  }\n}\n\nquery GetUsersWithRoles($limit: Int = 50, $offset: Int = 0) {\n  users(limit: $limit, offset: $offset, orderBy: {createdAt: DESC}) {\n    id\n    email\n    isActive\n    isStaff\n    roleAssignments {\n      id\n      role {\n        id\n        name\n        displayName\n        priority\n      }\n    }\n  }\n}\n\nquery GetUserPermissionOverrides($userId: uuid!) {\n  permissionOverrides(where: {userId: {_eq: $userId}}, orderBy: {createdAt: DESC}) {\n    id\n    resource\n    operation\n    granted\n    conditions\n    expiresAt\n  }\n}\n\nquery GetRolePermissionOverrides($roleName: String!) {\n  permissionOverrides(where: {role: {_eq: $roleName}}, orderBy: {createdAt: DESC}) {\n    id\n    resource\n    operation\n    granted\n    conditions\n    expiresAt\n  }\n}\n\nquery SearchUsersByEmail($emailPattern: String!) {\n  users(where: {email: {_ilike: $emailPattern}}, limit: 10, orderBy: {email: ASC}) {\n    id\n    email\n    isActive\n    roleAssignments {\n      role {\n        name\n        displayName\n      }\n    }\n  }\n}\n\nquery GetRoleHierarchy {\n  roles(orderBy: {priority: DESC}) {\n    id\n    name\n    displayName\n    description\n    priority\n    isSystemRole\n    rolePermissionsAggregate {\n      aggregate {\n        count\n      }\n    }\n    userRolesAggregate {\n      aggregate {\n        count\n      }\n    }\n  }\n}\n\nquery GetPermissionAuditLogs($limit: Int = 50, $offset: Int = 0, $startDate: timestamptz, $endDate: timestamptz) {\n  auditPermissionChanges(\n    where: {changedAt: {_gte: $startDate, _lte: $endDate}}\n    orderBy: {changedAt: DESC}\n    limit: $limit\n    offset: $offset\n  ) {\n    id\n    targetUserId\n    changedByUserId\n    changeType\n    reason\n    oldPermissions\n    newPermissions\n    changedAt\n  }\n}\n\nquery GetPendingInvitations($limit: Int = 50, $offset: Int = 0, $now: timestamptz!) {\n  userInvitations(\n    where: {invitationStatus: {_eq: \"pending\"}, expiresAt: {_gt: $now}}\n    orderBy: {createdAt: DESC}\n    limit: $limit\n    offset: $offset\n  ) {\n    ...UserInvitationCore\n  }\n}\n\nquery GetInvitationByTicket($clerkTicket: String!) {\n  userInvitations(where: {clerkTicket: {_eq: $clerkTicket}}, limit: 1) {\n    ...UserInvitationWithDetails\n  }\n}\n\nquery GetInvitationByClerkId($clerkInvitationId: String!) {\n  userInvitations(where: {clerkInvitationId: {_eq: $clerkInvitationId}}, limit: 1) {\n    ...UserInvitationWithDetails\n  }\n}\n\nquery GetInvitationHistory($email: String!, $limit: Int = 10) {\n  userInvitations(\n    where: {email: {_eq: $email}}\n    orderBy: {invitedAt: DESC}\n    limit: $limit\n  ) {\n    id\n    email\n    firstName\n    lastName\n    invitedRole\n    invitationStatus\n    invitedAt\n    acceptedAt\n    expiresAt\n    invitedByUser {\n      ...UserMinimal\n    }\n    acceptedByUser {\n      ...UserMinimal\n      clerkUserId\n    }\n  }\n}\n\nquery GetInvitationsBySender($invitedBy: uuid!, $limit: Int = 50) {\n  userInvitations(\n    where: {invitedBy: {_eq: $invitedBy}}\n    orderBy: {invitedAt: DESC}\n    limit: $limit\n  ) {\n    id\n    email\n    firstName\n    lastName\n    invitedRole\n    invitationStatus\n    invitedAt\n    acceptedAt\n    expiresAt\n    acceptedByUser {\n      firstName\n      lastName\n      computedName\n      email\n    }\n  }\n}\n\nquery GetExpiredInvitations($now: timestamptz!) {\n  userInvitations(\n    where: {_or: [{invitationStatus: {_eq: \"expired\"}}, {expiresAt: {_lt: $now}}]}\n    orderBy: {expiresAt: DESC}\n  ) {\n    ...UserInvitationWithDetails\n  }\n}\n\nquery ValidateInvitationRolePermissions($invitedRole: String!, $invitedBy: uuid!) {\n  users(where: {id: {_eq: $invitedBy}}) {\n    id\n    role\n    roleAssignments {\n      role {\n        name\n        priority\n        rolePermissions {\n          permission {\n            action\n            resource {\n              name\n            }\n          }\n        }\n      }\n    }\n  }\n  roles(where: {name: {_eq: $invitedRole}}) {\n    id\n    name\n    priority\n    isSystemRole\n  }\n}\n\nquery GetInvitationById($invitationId: uuid!) {\n  userInvitationsByPk(id: $invitationId) {\n    ...UserInvitationWithDetails\n  }\n}\n\nquery GetResendableInvitations($invitedBy: uuid!, $limit: Int = 50) {\n  userInvitations(\n    where: {invitedBy: {_eq: $invitedBy}, invitationStatus: {_in: [\"pending\", \"expired\"]}}\n    orderBy: {invitedAt: DESC}\n    limit: $limit\n  ) {\n    ...UserInvitationCore\n  }\n}\n\nquery GetInvitationsWithStatus($statuses: [invitation_status_enum!], $limit: Int = 50, $offset: Int = 0, $orderBy: [UserInvitationsOrderBy!] = [{createdAt: DESC}]) {\n  userInvitations(\n    where: {invitationStatus: {_in: $statuses}}\n    orderBy: $orderBy\n    limit: $limit\n    offset: $offset\n  ) {\n    ...UserInvitationWithDetails\n  }\n  userInvitationsAggregate(where: {invitationStatus: {_in: $statuses}}) {\n    aggregate {\n      count\n    }\n  }\n}\n\nquery GetInvitationDashboardStats($now: timestamptz!, $sevenDaysFromNow: timestamptz!) {\n  pending: userInvitationsAggregate(\n    where: {invitationStatus: {_eq: \"pending\"}, expiresAt: {_gt: $now}}\n  ) {\n    aggregate {\n      count\n    }\n  }\n  expired: userInvitationsAggregate(where: {invitationStatus: {_eq: \"expired\"}}) {\n    aggregate {\n      count\n    }\n  }\n  accepted: userInvitationsAggregate(where: {invitationStatus: {_eq: \"accepted\"}}) {\n    aggregate {\n      count\n    }\n  }\n  revoked: userInvitationsAggregate(where: {invitationStatus: {_eq: \"revoked\"}}) {\n    aggregate {\n      count\n    }\n  }\n  expiringSoon: userInvitationsAggregate(\n    where: {invitationStatus: {_eq: \"pending\"}, expiresAt: {_gt: $now, _lt: $sevenDaysFromNow}}\n  ) {\n    aggregate {\n      count\n    }\n  }\n  recentInvitations: userInvitations(orderBy: {createdAt: DESC}, limit: 10) {\n    id\n    email\n    firstName\n    lastName\n    invitedRole\n    invitationStatus\n    createdAt\n    expiresAt\n    invitedByUser {\n      id\n      firstName\n      lastName\n      computedName\n      email\n    }\n  }\n}\n\nquery GetRevokedInvitations($limit: Int = 50, $offset: Int = 0) {\n  userInvitations(\n    where: {invitationStatus: {_eq: \"revoked\"}}\n    orderBy: {revokedAt: DESC}\n    limit: $limit\n    offset: $offset\n  ) {\n    ...UserInvitationCore\n  }\n}\n\nquery GetInvitationAuditHistory($email: String, $invitedBy: uuid, $startDate: timestamptz, $endDate: timestamptz, $limit: Int = 100) {\n  userInvitations(\n    where: {_and: [{email: {_eq: $email}}, {invitedBy: {_eq: $invitedBy}}, {createdAt: {_gte: $startDate}}, {createdAt: {_lte: $endDate}}]}\n    orderBy: {createdAt: DESC}\n    limit: $limit\n  ) {\n    ...UserInvitationWithDetails\n  }\n}\n\nquery GetExpiringInvitations($now: timestamptz!, $futureDate: timestamptz!) {\n  userInvitations(\n    where: {invitationStatus: {_eq: \"pending\"}, expiresAt: {_gt: $now, _lt: $futureDate}}\n    orderBy: {expiresAt: ASC}\n  ) {\n    ...UserInvitationWithDetails\n  }\n}\n\nquery SearchInvitations($searchTerm: String!, $limit: Int = 20) {\n  userInvitations(\n    where: {_or: [{email: {_ilike: $searchTerm}}, {firstName: {_ilike: $searchTerm}}, {lastName: {_ilike: $searchTerm}}]}\n    orderBy: {createdAt: DESC}\n    limit: $limit\n  ) {\n    ...UserInvitationWithDetails\n  }\n}\n\nquery GetInvitationByIdDetailed($invitationId: uuid!) {\n  userInvitationsByPk(id: $invitationId) {\n    ...UserInvitationWithDetails\n  }\n}\n\nquery GetUsersByStatus($statuses: [user_status_enum!], $limit: Int = 50, $offset: Int = 0, $orderBy: [UsersOrderBy!] = [{updatedAt: DESC}]) {\n  users(\n    where: {status: {_in: $statuses}}\n    orderBy: $orderBy\n    limit: $limit\n    offset: $offset\n  ) {\n    id\n    email\n    firstName\n    lastName\n    computedName\n    role\n    status\n    isActive\n    isStaff\n    statusChangedAt\n    statusChangedBy\n    statusChangeReason\n    deactivatedAt\n    deactivatedBy\n    createdAt\n    updatedAt\n  }\n  usersAggregate(where: {status: {_in: $statuses}}) {\n    aggregate {\n      count\n    }\n  }\n}\n\nquery GetUserStatusDashboardStats($thirtyDaysAgo: timestamptz = \"2024-01-01T00:00:00Z\") {\n  active: usersAggregate(where: {status: {_eq: \"active\"}}) {\n    aggregate {\n      count\n    }\n  }\n  inactive: usersAggregate(where: {status: {_eq: \"inactive\"}}) {\n    aggregate {\n      count\n    }\n  }\n  locked: usersAggregate(where: {status: {_eq: \"locked\"}}) {\n    aggregate {\n      count\n    }\n  }\n  pending: usersAggregate(where: {status: {_eq: \"pending\"}}) {\n    aggregate {\n      count\n    }\n  }\n  recentStatusChanges: users(\n    where: {statusChangedAt: {_gte: $thirtyDaysAgo}}\n    orderBy: {statusChangedAt: DESC}\n    limit: 10\n  ) {\n    id\n    email\n    firstName\n    lastName\n    computedName\n    role\n    status\n    statusChangedAt\n    statusChangeReason\n  }\n  staff: usersAggregate(where: {isStaff: {_eq: true}}) {\n    aggregate {\n      count\n    }\n  }\n  byRole: users {\n    role\n  }\n}\n\nquery GetUsersRequiringAttention($limit: Int = 20) {\n  locked: users(\n    where: {status: {_eq: \"locked\"}}\n    orderBy: {statusChangedAt: DESC}\n    limit: $limit\n  ) {\n    id\n    email\n    firstName\n    lastName\n    computedName\n    role\n    status\n    statusChangedAt\n    statusChangeReason\n  }\n  inactive: users(\n    where: {status: {_eq: \"inactive\"}}\n    orderBy: {deactivatedAt: DESC}\n    limit: $limit\n  ) {\n    id\n    email\n    firstName\n    lastName\n    computedName\n    role\n    status\n    deactivatedAt\n    statusChangeReason\n  }\n  pending: users(\n    where: {status: {_eq: \"pending\"}}\n    orderBy: {createdAt: DESC}\n    limit: $limit\n  ) {\n    id\n    email\n    firstName\n    lastName\n    computedName\n    role\n    status\n    createdAt\n  }\n}\n\nquery GetUserStatusHistory($userId: uuid!, $startDate: timestamptz, $endDate: timestamptz, $limit: Int = 50) {\n  user: usersByPk(id: $userId) {\n    id\n    email\n    firstName\n    lastName\n    computedName\n    role\n    status\n    isActive\n    statusChangedAt\n    statusChangedBy\n    statusChangeReason\n    deactivatedAt\n    deactivatedBy\n    createdAt\n    updatedAt\n  }\n}\n\nquery SearchUsersAdvanced($searchTerm: String, $statuses: [user_status_enum!], $roles: [user_role!], $isStaff: Boolean, $limit: Int = 20) {\n  users(\n    where: {_and: [{_or: [{email: {_ilike: \"%${searchTerm}%\"}}, {computedName: {_ilike: \"%${searchTerm}%\"}}]}, {status: {_in: $statuses}}, {role: {_in: $roles}}, {isStaff: {_eq: $isStaff}}]}\n    orderBy: {updatedAt: DESC}\n    limit: $limit\n  ) {\n    id\n    email\n    firstName\n    lastName\n    computedName\n    role\n    status\n    isActive\n    isStaff\n    statusChangedAt\n    statusChangeReason\n    deactivatedAt\n    createdAt\n  }\n}\n\nquery GetUserWithStatusDetails($userId: uuid!) {\n  usersByPk(id: $userId) {\n    id\n    email\n    firstName\n    lastName\n    computedName\n    role\n    status\n    isActive\n    isStaff\n    clerkUserId\n    statusChangedAt\n    statusChangedBy\n    statusChangeReason\n    deactivatedAt\n    deactivatedBy\n    createdAt\n    updatedAt\n  }\n}\n\nquery GetOrphanedInvitations {\n  userInvitations(\n    where: {invitationStatus: {_eq: \"accepted\"}}\n    orderBy: {createdAt: DESC}\n  ) {\n    id\n    email\n    firstName\n    lastName\n    invitationStatus\n    acceptedBy\n    createdAt\n    invitedBy\n    invitedByUser {\n      id\n      firstName\n      lastName\n      email\n    }\n  }\n}\n\nquery GetUsersWithoutClerkId {\n  users(\n    where: {_or: [{clerkUserId: {_isNull: true}}, {clerkUserId: {_eq: \"\"}}]}\n    orderBy: {createdAt: DESC}\n  ) {\n    id\n    email\n    firstName\n    lastName\n    role\n    createdAt\n    updatedAt\n    isActive\n  }\n}\n\nquery GetExpiredInvitationsForCleanup {\n  userInvitations(\n    where: {_or: [{invitationStatus: {_eq: \"expired\"}}, {expiresAt: {_lt: \"now()\"}}]}\n    orderBy: {expiresAt: DESC}\n  ) {\n    id\n    email\n    firstName\n    lastName\n    invitationStatus\n    expiresAt\n    createdAt\n    clerkInvitationId\n  }\n}\n\nfragment UserInvitationDetail on UserInvitations {\n  id\n  email\n  firstName\n  lastName\n  invitedRole\n  managerId\n  clerkInvitationId\n  clerkTicket\n  invitationMetadata\n  invitedBy\n  invitationStatus\n  expiresAt\n  createdAt\n  updatedAt\n}": typeof types.GetCurrentUserRolesDocument,
    "subscription UserAuthStatusUpdates($userId: uuid!) {\n  users(where: {id: {_eq: $userId}}) {\n    id\n    isActive\n    role\n    updatedAt\n    deactivatedAt\n    deactivatedBy\n  }\n}\n\nsubscription UserSessionUpdates($clerkUserId: String!) {\n  users(where: {clerkUserId: {_eq: $clerkUserId}}) {\n    id\n    isActive\n    role\n    updatedAt\n    clerkUserId\n  }\n}\n\nsubscription AuthEventsUpdates($userId: uuid!) {\n  auditAuthEvents(\n    where: {userId: {_eq: $userId}}\n    orderBy: {eventTime: DESC}\n    limit: 20\n  ) {\n    id\n    eventType\n    eventTime\n    ipAddress\n    userAgent\n    success\n    failureReason\n    userId\n  }\n}\n\nsubscription UserRoleUpdates($userId: uuid!) {\n  users(where: {id: {_eq: $userId}}) {\n    id\n    role\n    isStaff\n    isActive\n    roleAssignments {\n      id\n      roleId\n      role {\n        id\n        name\n        displayName\n        priority\n        isSystemRole\n      }\n    }\n    updatedAt\n  }\n}\n\nsubscription UserPermissionUpdates($userId: uuid!) {\n  users(where: {id: {_eq: $userId}}) {\n    id\n    role\n    roleAssignments {\n      roleId\n      role {\n        name\n        rolePermissions {\n          id\n          permissionId\n          conditions\n          permission {\n            id\n            action\n            description\n            resource {\n              name\n              displayName\n            }\n          }\n        }\n      }\n    }\n    updatedAt\n  }\n}\n\nsubscription RolePermissionChanges($roleId: uuid!) {\n  rolePermissions(where: {roleId: {_eq: $roleId}}) {\n    id\n    roleId\n    permissionId\n    conditions\n    createdAt\n    updatedAt\n    permission {\n      id\n      action\n      description\n      resource {\n        name\n        displayName\n      }\n    }\n  }\n}\n\nsubscription FailedAuthAttemptsUpdates {\n  auditAuthEvents(\n    where: {success: {_eq: false}, eventTime: {_gte: \"now() - interval '1 hour'\"}}\n    orderBy: {eventTime: DESC}\n  ) {\n    id\n    eventType\n    eventTime\n    ipAddress\n    userAgent\n    failureReason\n    userId\n  }\n}\n\nsubscription SuspiciousActivityUpdates {\n  auditAuthEvents(\n    where: {_or: [{eventType: {_eq: \"multiple_failed_attempts\"}}, {eventType: {_eq: \"unusual_location\"}}, {eventType: {_eq: \"suspicious_activity\"}}], eventTime: {_gte: \"now() - interval '24 hours'\"}}\n    orderBy: {eventTime: DESC}\n  ) {\n    id\n    eventType\n    eventTime\n    ipAddress\n    userAgent\n    userId\n    metadata\n  }\n}\n\nsubscription SecurityAlertsUpdates {\n  auditAuthEvents(\n    where: {eventType: {_in: [\"account_locked\", \"unauthorized_access_attempt\", \"privilege_escalation_attempt\", \"suspicious_activity\"]}, eventTime: {_gte: \"now() - interval '1 hour'\"}}\n    orderBy: {eventTime: DESC}\n  ) {\n    id\n    eventType\n    eventTime\n    ipAddress\n    userId\n    metadata\n  }\n}\n\nsubscription PermissionChangesUpdates {\n  auditPermissionChanges(orderBy: {changedAt: DESC}, limit: 50) {\n    id\n    changeType\n    targetUserId\n    changedByUserId\n    reason\n    oldPermissions\n    newPermissions\n    changedAt\n  }\n}\n\nsubscription RoleAssignmentUpdates {\n  userRoles(orderBy: {createdAt: DESC}) {\n    id\n    userId\n    roleId\n    createdAt\n    updatedAt\n    user {\n      id\n      firstName\n      lastName\n      computedName\n      email\n    }\n    role {\n      id\n      name\n      displayName\n      priority\n    }\n  }\n}\n\nsubscription AuthSystemHealthUpdates {\n  auditAuthEvents(\n    where: {eventType: {_eq: \"login\"}, success: {_eq: true}, eventTime: {_gte: \"now() - interval '1 hour'\"}}\n    orderBy: {eventTime: DESC}\n    limit: 10\n  ) {\n    id\n    eventType\n    eventTime\n    userId\n    success\n  }\n}\n\nsubscription ActiveSessionsUpdates {\n  auditAuthEvents(\n    where: {eventType: {_eq: \"session_active\"}, eventTime: {_gte: \"now() - interval '30 minutes'\"}}\n    orderBy: {eventTime: DESC}\n  ) {\n    id\n    userId\n    eventTime\n    ipAddress\n  }\n}\n\nsubscription UserSecurityStatusUpdates($userId: uuid!) {\n  users(where: {id: {_eq: $userId}}) {\n    id\n    isActive\n    role\n    updatedAt\n  }\n}\n\nsubscription MFAEventsUpdates($userId: uuid!) {\n  auditAuthEvents(\n    where: {userId: {_eq: $userId}, eventType: {_like: \"mfa%\"}}\n    orderBy: {eventTime: DESC}\n    limit: 10\n  ) {\n    id\n    eventType\n    eventTime\n    success\n    failureReason\n    metadata\n  }\n}\n\nsubscription UserDeactivationUpdates {\n  users(\n    where: {isActive: {_eq: false}, deactivatedAt: {_gte: \"now() - interval '24 hours'\"}}\n    orderBy: {deactivatedAt: DESC}\n  ) {\n    id\n    firstName\n    lastName\n    computedName\n    email\n    role\n    deactivatedAt\n    deactivatedBy\n  }\n}\n\nsubscription PrivilegeChangesUpdates {\n  users(\n    where: {role: {_in: [\"org_admin\", \"manager\", \"developer\"]}, updatedAt: {_gte: \"now() - interval '1 hour'\"}}\n    orderBy: {updatedAt: DESC}\n  ) {\n    id\n    firstName\n    lastName\n    computedName\n    email\n    role\n    updatedAt\n    roleAssignments {\n      role {\n        name\n        priority\n      }\n    }\n  }\n}\n\nsubscription ComplianceEventsUpdates {\n  auditPermissionChanges(\n    where: {changeType: {_in: [\"role_assigned\", \"role_removed\", \"permission_granted\", \"permission_revoked\", \"admin_access\"]}, changedAt: {_gte: \"now() - interval '1 hour'\"}}\n    orderBy: {changedAt: DESC}\n  ) {\n    id\n    changeType\n    targetUserId\n    changedByUserId\n    reason\n    oldPermissions\n    newPermissions\n    changedAt\n  }\n}\n\nsubscription DataAccessMonitoring($userId: uuid!) {\n  auditDataAccessLog(\n    where: {userId: {_eq: $userId}, accessedAt: {_gte: \"now() - interval '24 hours'\"}}\n    orderBy: {accessedAt: DESC}\n    limit: 100\n  ) {\n    id\n    userId\n    resourceType\n    resourceId\n    accessType\n    accessedAt\n    ipAddress\n    dataClassification\n    rowCount\n  }\n}\n\nsubscription SecurityIncidentsUpdates {\n  auditAuthEvents(\n    where: {eventType: {_in: [\"security_incident\", \"data_breach_attempt\", \"unauthorized_admin_access\", \"multiple_failed_mfa\"]}, eventTime: {_gte: \"now() - interval '24 hours'\"}}\n    orderBy: {eventTime: DESC}\n  ) {\n    id\n    eventType\n    eventTime\n    userId\n    ipAddress\n    userAgent\n    metadata\n  }\n}\n\nsubscription EmergencyAuthUpdates {\n  auditAuthEvents(\n    where: {eventType: {_eq: \"emergency_access\"}, eventTime: {_gte: \"now() - interval '1 hour'\"}}\n    orderBy: {eventTime: DESC}\n  ) {\n    id\n    eventType\n    eventTime\n    userId\n    ipAddress\n    metadata\n  }\n}": typeof types.UserAuthStatusUpdatesDocument,
    "fragment UserMinimal on Users {\n  id\n  firstName\n  lastName\n  computedName\n  email\n}\n\nfragment UserCoreShared on Users {\n  ...UserMinimal\n  role\n  isActive\n}\n\nfragment UserBasic on Users {\n  ...UserCoreShared\n  clerkUserId\n  createdAt\n  updatedAt\n}\n\nfragment UserBase on Users {\n  ...UserBasic\n}\n\nfragment UserWithRole on Users {\n  ...UserBasic\n  username\n  isStaff\n}\n\nfragment UserProfile on Users {\n  ...UserWithRole\n  clerkUserId\n  image\n  managerId\n  deactivatedAt\n  deactivatedBy\n  manager {\n    ...UserMinimal\n  }\n}\n\nfragment UserSearchResult on Users {\n  ...UserCoreShared\n  username\n  isStaff\n}\n\nfragment ClientMinimal on Clients {\n  id\n  name\n}\n\nfragment ClientBase on Clients {\n  id\n  name\n  active\n  contactEmail\n  contactPerson\n  contactPhone\n  createdAt\n}\n\nfragment ClientWithStats on Clients {\n  ...ClientBase\n  currentEmployeeCount: payrollsAggregate(\n    where: {supersededDate: {_isNull: true}}\n  ) {\n    aggregate {\n      sum {\n        employeeCount\n      }\n    }\n  }\n  activePayrollCount: payrollsAggregate(\n    where: {supersededDate: {_isNull: true}, status: {_eq: \"Active\"}}\n  ) {\n    aggregate {\n      count\n    }\n  }\n}\n\nfragment ClientListBase on Clients {\n  ...ClientBase\n  payrollCount: payrollsAggregate(where: {supersededDate: {_isNull: true}}) {\n    aggregate {\n      count\n    }\n  }\n}\n\nfragment PayrollMinimal on Payrolls {\n  id\n  name\n  employeeCount\n  status\n}\n\nfragment PayrollBase on Payrolls {\n  id\n  name\n  employeeCount\n  status\n  payrollSystem\n  processingTime\n  processingDaysBeforeEft\n  versionNumber\n  supersededDate\n  createdAt\n  updatedAt\n}\n\nfragment PayrollWithClient on Payrolls {\n  ...PayrollBase\n  clientId\n  client {\n    id\n    name\n    active\n  }\n}\n\nfragment PayrollListItem on Payrolls {\n  ...PayrollWithClient\n  primaryConsultantUserId\n  backupConsultantUserId\n  managerUserId\n  createdByUserId\n  cycleId\n  dateTypeId\n  dateValue\n  payrollCycle {\n    id\n    name\n    description\n  }\n  payrollDateType {\n    id\n    name\n    description\n  }\n  primaryConsultant {\n    ...UserMinimal\n  }\n  backupConsultant {\n    ...UserMinimal\n  }\n  assignedManager {\n    ...UserMinimal\n  }\n}\n\nfragment PayrollWithDates on Payrolls {\n  ...PayrollBase\n  goLiveDate\n  payrollDates(orderBy: {originalEftDate: ASC}) {\n    id\n    originalEftDate\n    adjustedEftDate\n    notes\n  }\n}\n\nfragment PayrollFullDetail on Payrolls {\n  ...PayrollWithDates\n  ...PayrollWithClient\n  dateTypeId\n  cycleId\n  dateValue\n  versionReason\n  supersededDate\n  parentPayrollId\n  parentPayroll {\n    id\n    versionNumber\n  }\n  childPayrolls(orderBy: {versionNumber: DESC}) {\n    id\n    versionNumber\n    versionReason\n    createdAt\n  }\n  primaryConsultant {\n    ...UserMinimal\n  }\n  backupConsultant {\n    ...UserMinimal\n  }\n  assignedManager {\n    ...UserMinimal\n  }\n}\n\nfragment NoteWithAuthor on Notes {\n  id\n  content\n  isImportant\n  createdAt\n  entityId\n  entityType\n  author {\n    ...UserMinimal\n  }\n}\n\nfragment PermissionBase on Permissions {\n  id\n  resourceId\n  description\n  legacyPermissionName\n  action\n}\n\nfragment RoleWithPermissions on Roles {\n  id\n  name\n  displayName\n  description\n  isSystemRole\n  priority\n  rolePermissions {\n    permission {\n      ...PermissionBase\n    }\n  }\n}\n\nfragment AuditLogEntry on AuditAuditLog {\n  id\n  userId\n  userEmail\n  userRole\n  action\n  resourceType\n  resourceId\n  eventTime\n  success\n  errorMessage\n  ipAddress\n  userAgent\n  requestId\n  sessionId\n  metadata\n  oldValues\n  newValues\n  createdAt\n}\n\nfragment AuthEvent on AuditAuthEvents {\n  id\n  userId\n  userEmail\n  eventType\n  eventTime\n  success\n  failureReason\n  ipAddress\n  userAgent\n  metadata\n}\n\nfragment DataAccessLog on AuditDataAccessLog {\n  id\n  userId\n  resourceType\n  resourceId\n  accessType\n  accessedAt\n  dataClassification\n  fieldsAccessed\n  rowCount\n  ipAddress\n  metadata\n}\n\nfragment PermissionChange on AuditPermissionChanges {\n  id\n  changedAt\n  changedByUserId\n  targetUserId\n  targetRoleId\n  changeType\n  permissionType\n  oldPermissions\n  newPermissions\n  reason\n  approvedByUserId\n}\n\nfragment PayrollDateInfo on PayrollDates {\n  id\n  originalEftDate\n  adjustedEftDate\n  notes\n  createdAt\n}\n\nfragment PermissionOverrideInfo on PermissionOverrides {\n  id\n  userId\n  role\n  resource\n  operation\n  granted\n  reason\n  conditions\n  expiresAt\n  createdBy\n  createdAt\n}\n\nfragment PayrollTableRow on Payrolls {\n  ...PayrollListItem\n  goLiveDate\n  processingTime\n  versionNumber\n  cycleId\n  payrollCycle {\n    id\n    name\n    description\n  }\n  nextPayrollDate: payrollDates(\n    where: {_or: [{adjustedEftDate: {_gte: \"now()\"}}, {originalEftDate: {_gte: \"now()\"}}]}\n    orderBy: [{adjustedEftDate: ASC}, {originalEftDate: ASC}]\n    limit: 1\n  ) {\n    originalEftDate\n    adjustedEftDate\n    processingDate\n  }\n}\n\nfragment BillingItemMinimal on BillingItems {\n  id\n  description\n  amount\n  status\n  createdAt\n}\n\nfragment BillingItemBase on BillingItems {\n  ...BillingItemMinimal\n  clientId\n  staffUserId\n  isApproved\n  approvalDate\n  approvedBy\n  createdAt\n  updatedAt\n}\n\nfragment BillingItemWithClient on BillingItems {\n  ...BillingItemBase\n  client {\n    ...ClientMinimal\n  }\n  staffUser {\n    ...UserMinimal\n  }\n  approver: approvedByUser {\n    ...UserMinimal\n  }\n}\n\nfragment InvoiceMinimal on Invoices {\n  id\n  invoiceNumber\n  totalAmount\n  status\n  dueDate\n}\n\nfragment InvoiceBase on Invoices {\n  ...InvoiceMinimal\n  clientId\n  invoiceDate\n  taxAmount\n  subtotal\n  notes\n  createdAt\n  updatedAt\n}\n\nfragment InvoiceWithClient on Invoices {\n  ...InvoiceBase\n  client {\n    ...ClientMinimal\n  }\n}\n\nfragment FileMinimal on Files {\n  id\n  filename\n  size\n  mimetype\n  url\n}\n\nfragment FileBase on Files {\n  ...FileMinimal\n  bucket\n  objectKey\n  uploadedBy\n  category\n  fileType\n  isPublic\n  createdAt\n}\n\nfragment FileWithUploader on Files {\n  ...FileBase\n  uploadedByUser {\n    ...UserMinimal\n  }\n}\n\nfragment InvitationMinimal on UserInvitations {\n  id\n  email\n  invitedRole\n  invitationStatus\n}\n\nfragment InvitationBase on UserInvitations {\n  ...InvitationMinimal\n  invitedBy\n  expiresAt\n  acceptedAt\n  revokedAt\n  createdAt\n}\n\nfragment InvitationWithInviter on UserInvitations {\n  ...InvitationBase\n  invitedByUser {\n    ...UserMinimal\n  }\n}\n\nfragment ClientDashboardStats on Clients {\n  ...ClientMinimal\n  totalPayrolls: payrollsAggregate {\n    aggregate {\n      count\n    }\n  }\n  activePayrolls: payrollsAggregate(where: {status: {_eq: \"Active\"}}) {\n    aggregate {\n      count\n    }\n  }\n  totalEmployees: payrollsAggregate {\n    aggregate {\n      sum {\n        employeeCount\n      }\n    }\n  }\n}\n\nfragment UserActivityStats on Users {\n  ...UserMinimal\n  staffBillingItems(orderBy: {createdAt: DESC}, limit: 5) {\n    ...BillingItemMinimal\n  }\n  authoredNotes(orderBy: {createdAt: DESC}, limit: 3) {\n    ...NoteWithAuthor\n  }\n}": typeof types.UserMinimalFragmentDoc,
    "mutation LogAuditEvent($input: AuditAuditLogInsertInput!) {\n  insertAuditAuditLog(objects: [$input]) {\n    returning {\n      id\n      eventTime\n    }\n  }\n}\n\nmutation InsertFile($input: FilesInsertInput!) {\n  insertFiles(objects: [$input]) {\n    returning {\n      id\n      filename\n      bucket\n      objectKey\n      size\n      mimetype\n      url\n      clientId\n      payrollId\n      uploadedBy\n      category\n      isPublic\n      metadata\n      fileType\n      createdAt\n    }\n  }\n}\n\nmutation UpdateFileMetadata($id: uuid!, $updates: FilesSetInput!) {\n  updateFilesByPk(pkColumns: {id: $id}, _set: $updates) {\n    id\n    filename\n    bucket\n    objectKey\n    size\n    mimetype\n    url\n    clientId\n    payrollId\n    uploadedBy\n    category\n    isPublic\n    metadata\n    fileType\n    createdAt\n  }\n}\n\nmutation DeleteFile($id: uuid!) {\n  deleteFilesByPk(id: $id) {\n    id\n    filename\n    objectKey\n  }\n}\n\nmutation RefreshData {\n  __typename\n}": typeof types.LogAuditEventDocument,
    "query GetDashboardMetrics($userId: uuid!) {\n  clientsAggregate(where: {active: {_eq: true}}) {\n    aggregate {\n      count\n    }\n  }\n  activePayrollsAggregate: payrollsAggregate(\n    where: {supersededDate: {_isNull: true}, status: {_nin: [\"Completed\", \"Failed\"]}}\n  ) {\n    aggregate {\n      count\n    }\n  }\n  totalEmployeesAggregate: payrollsAggregate(\n    where: {supersededDate: {_isNull: true}}\n  ) {\n    aggregate {\n      sum {\n        employeeCount\n      }\n    }\n  }\n  upcomingPayrolls: payrolls(\n    where: {supersededDate: {_isNull: true}, status: {_nin: [\"Completed\", \"Failed\", \"Cancelled\"]}}\n    orderBy: {updatedAt: DESC}\n    limit: 5\n  ) {\n    ...PayrollMinimal\n    client {\n      ...ClientMinimal\n    }\n  }\n}\n\nquery GetDashboardStatsOptimized($limit: Int = 10) {\n  clientsAggregate {\n    aggregate {\n      count\n    }\n  }\n  totalPayrolls: payrollsAggregate(where: {supersededDate: {_isNull: true}}) {\n    aggregate {\n      count\n    }\n  }\n  activePayrolls: payrollsAggregate(\n    where: {supersededDate: {_isNull: true}, status: {_eq: \"Active\"}}\n  ) {\n    aggregate {\n      count\n    }\n  }\n  upcomingPayrolls: payrolls(\n    where: {supersededDate: {_isNull: true}, status: {_eq: \"Active\"}, payrollDates: {adjustedEftDate: {_gte: \"now()\"}}}\n    orderBy: {updatedAt: DESC}\n    limit: $limit\n  ) {\n    id\n    name\n    status\n    client {\n      id\n      name\n    }\n    nextEftDate: payrollDates(\n      where: {adjustedEftDate: {_gte: \"now()\"}}\n      orderBy: {adjustedEftDate: ASC}\n      limit: 1\n    ) {\n      originalEftDate\n      adjustedEftDate\n      processingDate\n    }\n  }\n}\n\nquery GetClientsDashboardStats {\n  activeClientsCount: clientsAggregate(where: {active: {_eq: true}}) {\n    aggregate {\n      count\n    }\n  }\n  totalPayrollsCount: payrollsAggregate(where: {supersededDate: {_isNull: true}}) {\n    aggregate {\n      count\n    }\n  }\n  totalEmployeesSum: payrollsAggregate(where: {supersededDate: {_isNull: true}}) {\n    aggregate {\n      sum {\n        employeeCount\n      }\n    }\n  }\n  clientsNeedingAttention: clients(\n    where: {active: {_eq: true}, _not: {payrolls: {supersededDate: {_isNull: true}}}}\n  ) {\n    ...ClientMinimal\n  }\n}\n\nquery GetCurrentUser($userId: uuid!) {\n  user: usersByPk(id: $userId) {\n    ...UserProfile\n  }\n}\n\nquery GetUsersForDropdown($role: user_role) {\n  users(\n    where: {isActive: {_eq: true}, role: {_eq: $role}}\n    orderBy: {computedName: ASC}\n  ) {\n    ...UserMinimal\n  }\n}\n\nquery GetSystemHealth {\n  databaseHealth: users(limit: 1) {\n    id\n  }\n  recentActivity: auditAuditLogAggregate(\n    where: {eventTime: {_gte: \"now() - interval '1 hour'\"}}\n  ) {\n    aggregate {\n      count\n    }\n  }\n}\n\nquery GlobalSearch($searchTerm: String!) {\n  clients(\n    where: {_or: [{name: {_ilike: $searchTerm}}, {contactEmail: {_ilike: $searchTerm}}]}\n    limit: 5\n  ) {\n    ...ClientMinimal\n  }\n  users(\n    where: {_or: [{computedName: {_ilike: $searchTerm}}, {firstName: {_ilike: $searchTerm}}, {lastName: {_ilike: $searchTerm}}, {email: {_ilike: $searchTerm}}]}\n    limit: 5\n  ) {\n    ...UserMinimal\n  }\n  payrolls(\n    where: {client: {name: {_ilike: $searchTerm}}, supersededDate: {_isNull: true}}\n    limit: 5\n  ) {\n    ...PayrollMinimal\n    client {\n      ...ClientMinimal\n    }\n  }\n}\n\nquery GetFileById($id: uuid!) {\n  filesByPk(id: $id) {\n    id\n    filename\n    bucket\n    objectKey\n    size\n    mimetype\n    url\n    clientId\n    payrollId\n    uploadedBy\n    category\n    isPublic\n    metadata\n    fileType\n    createdAt\n    client {\n      name\n    }\n    payroll {\n      name\n    }\n    uploadedBy\n  }\n}\n\nquery ListFiles($where: FilesBoolExp, $limit: Int, $offset: Int, $orderBy: [FilesOrderBy!]) {\n  files(where: $where, limit: $limit, offset: $offset, orderBy: $orderBy) {\n    id\n    filename\n    bucket\n    objectKey\n    size\n    mimetype\n    url\n    clientId\n    payrollId\n    uploadedBy\n    category\n    isPublic\n    metadata\n    fileType\n    createdAt\n    client {\n      name\n    }\n    payroll {\n      name\n    }\n    uploadedBy\n  }\n  filesAggregate(where: $where) {\n    aggregate {\n      count\n    }\n  }\n}": typeof types.GetDashboardMetricsDocument,
    "subscription RecentActivity($resourceTypes: [String!]) {\n  auditAuditLog(\n    where: {resourceType: {_in: $resourceTypes}, eventTime: {_gte: \"now() - interval '5 minutes'\"}}\n    orderBy: {eventTime: DESC}\n    limit: 20\n  ) {\n    ...AuditLogEntry\n  }\n}\n\nsubscription AuthenticationEvents($userId: uuid) {\n  auditAuthEvents(\n    where: {userId: {_eq: $userId}, eventTime: {_gte: \"now() - interval '10 minutes'\"}}\n    orderBy: {eventTime: DESC}\n  ) {\n    ...AuthEvent\n  }\n}\n\nsubscription SensitiveDataAccess($resourceTypes: [String!]!) {\n  auditDataAccessLog(\n    where: {resourceType: {_in: $resourceTypes}, accessedAt: {_gte: \"now() - interval '10 minutes'\"}}\n    orderBy: {accessedAt: DESC}\n  ) {\n    ...DataAccessLog\n  }\n}\n\nsubscription PermissionChangeStream {\n  auditPermissionChanges(orderBy: {changedAt: DESC}, limit: 10) {\n    ...PermissionChange\n  }\n}": typeof types.RecentActivityDocument,
};
const documents: Documents = {
    "fragment AuthUserCore on Users {\n  id\n  firstName\n  lastName\n  computedName\n  email\n  role\n  isActive\n  clerkUserId\n  createdAt\n  updatedAt\n}\n\nfragment AuthUserWithRoles on Users {\n  ...AuthUserCore\n  roleAssignments {\n    id\n    roleId\n    role {\n      id\n      name\n      displayName\n      description\n      priority\n      isSystemRole\n    }\n  }\n}\n\nfragment AuthRoleCore on Roles {\n  id\n  name\n  displayName\n  description\n  priority\n  isSystemRole\n  createdAt\n  updatedAt\n}\n\nfragment AuthPermissionCore on Permissions {\n  id\n  resourceId\n  action\n  description\n  legacyPermissionName\n  createdAt\n  updatedAt\n}\n\nfragment AuthUserRoleWithDetails on UserRoles {\n  id\n  userId\n  roleId\n  createdAt\n  updatedAt\n  user {\n    id\n    firstName\n    lastName\n    computedName\n    email\n    isActive\n  }\n  role {\n    id\n    name\n    displayName\n    description\n    priority\n  }\n}\n\nfragment PermissionOverrideCore on PermissionOverrides {\n  id\n  userId\n  role\n  resource\n  operation\n  granted\n  conditions\n  createdBy\n  expiresAt\n  createdAt\n  updatedAt\n}\n\nfragment UserInvitationCore on UserInvitations {\n  id\n  email\n  firstName\n  lastName\n  invitedRole\n  managerId\n  clerkInvitationId\n  clerkTicket\n  invitationMetadata\n  invitedBy\n  invitedAt\n  acceptedAt\n  acceptedBy\n  expiresAt\n  invitationStatus\n  revokedAt\n  revokedBy\n  revokeReason\n  createdAt\n  updatedAt\n}\n\nfragment UserInvitationWithDetails on UserInvitations {\n  ...UserInvitationCore\n  invitedByUser {\n    id\n    firstName\n    lastName\n    computedName\n    email\n    role\n  }\n  managerUser {\n    id\n    firstName\n    lastName\n    computedName\n    email\n    role\n  }\n  acceptedByUser {\n    id\n    firstName\n    lastName\n    computedName\n    email\n    clerkUserId\n    isActive\n  }\n}": types.AuthUserCoreFragmentDoc,
    "mutation AssignRoleToUser($userId: uuid!, $roleId: uuid!) {\n  insertUserRoles(objects: [{userId: $userId, roleId: $roleId}]) {\n    returning {\n      id\n      userId\n      roleId\n      role {\n        name\n        displayName\n        priority\n      }\n    }\n  }\n}\n\nmutation RemoveRoleFromUser($userRoleId: uuid!) {\n  deleteUserRolesByPk(id: $userRoleId) {\n    id\n    roleId\n  }\n}\n\nmutation UpdateUserRoleAssignment($id: uuid!, $set: UserRolesSetInput!) {\n  updateUserRolesByPk(pkColumns: {id: $id}, _set: $set) {\n    id\n    userId\n    roleId\n    updatedAt\n  }\n}\n\nmutation SetUserRoles($userId: uuid!, $roleIds: [UserRolesInsertInput!]!) {\n  deleteUserRoles(where: {userId: {_eq: $userId}}) {\n    affectedRows\n  }\n  insertUserRoles(objects: $roleIds) {\n    returning {\n      id\n      userId\n      roleId\n      role {\n        name\n        displayName\n      }\n    }\n    affectedRows\n  }\n}\n\nmutation CreateUserPermissionOverride($userId: uuid!, $resource: String!, $operation: String!, $granted: Boolean!, $conditions: jsonb = null, $expiresAt: timestamptz = null, $reason: String = null) {\n  insertPermissionOverrides(\n    objects: [{userId: $userId, resource: $resource, operation: $operation, granted: $granted, conditions: $conditions, expiresAt: $expiresAt, reason: $reason}]\n  ) {\n    returning {\n      id\n      userId\n      resource\n      operation\n      granted\n      conditions\n      expiresAt\n      reason\n      createdAt\n    }\n  }\n}\n\nmutation UpdateUserPermissionOverride($id: uuid!, $set: PermissionOverridesSetInput!) {\n  updatePermissionOverridesByPk(pkColumns: {id: $id}, _set: $set) {\n    id\n    userId\n    resource\n    operation\n    granted\n    expiresAt\n    reason\n    updatedAt\n  }\n}\n\nmutation RemoveUserPermissionOverride($id: uuid!) {\n  deletePermissionOverridesByPk(id: $id) {\n    id\n    userId\n    resource\n    operation\n  }\n}\n\nmutation CreateUserInvitation($email: String!, $firstName: String!, $lastName: String!, $invitedRole: String!, $managerId: uuid, $clerkInvitationId: String, $clerkTicket: String, $invitationMetadata: jsonb, $invitedBy: uuid!, $expiresAt: timestamptz!) {\n  insertUserInvitations(\n    objects: [{email: $email, firstName: $firstName, lastName: $lastName, invitedRole: $invitedRole, managerId: $managerId, clerkInvitationId: $clerkInvitationId, clerkTicket: $clerkTicket, invitationMetadata: $invitationMetadata, invitedBy: $invitedBy, expiresAt: $expiresAt, invitationStatus: \"pending\"}]\n  ) {\n    returning {\n      ...UserInvitationDetail\n    }\n  }\n}\n\nmutation CompleteInvitationAcceptance($invitationId: uuid!, $clerkUserId: String!, $userEmail: String!, $firstName: String!, $lastName: String!) {\n  insertUsers(\n    objects: [{clerkUserId: $clerkUserId, email: $userEmail, firstName: $firstName, lastName: $lastName, isActive: true}]\n  ) {\n    returning {\n      id\n      email\n      firstName\n      lastName\n      computedName\n      clerkUserId\n      isActive\n      createdAt\n    }\n  }\n  updateUserInvitationsByPk(\n    pkColumns: {id: $invitationId}\n    _set: {invitationStatus: \"accepted\", acceptedAt: \"now()\", updatedAt: \"now()\"}\n  ) {\n    id\n    status\n    acceptedAt\n  }\n}\n\nmutation AssignInvitationRole($userId: uuid!, $roleId: uuid!, $invitationId: uuid!) {\n  insertUserRoles(objects: [{userId: $userId, roleId: $roleId}]) {\n    returning {\n      id\n      userId\n      roleId\n      role {\n        id\n        name\n        displayName\n      }\n    }\n  }\n}\n\nmutation CancelUserInvitation($invitationId: uuid!) {\n  updateUserInvitationsByPk(\n    pkColumns: {id: $invitationId}\n    _set: {invitationStatus: \"cancelled\", updatedAt: \"now()\"}\n  ) {\n    ...UserInvitationDetail\n  }\n}\n\nmutation ResendUserInvitation($invitationId: uuid!, $newExpiresAt: timestamptz!, $newClerkTicket: String, $newClerkInvitationId: String) {\n  updateUserInvitationsByPk(\n    pkColumns: {id: $invitationId}\n    _set: {expiresAt: $newExpiresAt, clerkTicket: $newClerkTicket, clerkInvitationId: $newClerkInvitationId, invitationStatus: \"pending\", updatedAt: \"now()\"}\n  ) {\n    ...UserInvitationDetail\n  }\n}\n\nmutation MarkExpiredInvitations {\n  updateUserInvitations(\n    where: {invitationStatus: {_eq: \"pending\"}, expiresAt: {_lt: \"now()\"}}\n    _set: {invitationStatus: \"expired\", updatedAt: \"now()\"}\n  ) {\n    affectedRows\n  }\n}\n\nmutation RevokeInvitation($invitationId: uuid!, $revokeReason: String!, $revokedBy: uuid!) {\n  updateUserInvitationsByPk(\n    pkColumns: {id: $invitationId}\n    _set: {invitationStatus: \"revoked\", revokedAt: \"now()\", revokedBy: $revokedBy, revokeReason: $revokeReason, updatedAt: \"now()\"}\n  ) {\n    ...UserInvitationCore\n  }\n}\n\nmutation ResendInvitationEnhanced($invitationId: uuid!, $newExpiresAt: timestamptz!, $newClerkTicket: String, $newClerkInvitationId: String) {\n  updateUserInvitationsByPk(\n    pkColumns: {id: $invitationId}\n    _set: {expiresAt: $newExpiresAt, clerkTicket: $newClerkTicket, clerkInvitationId: $newClerkInvitationId, invitationStatus: \"pending\", updatedAt: \"now()\"}\n  ) {\n    ...UserInvitationCore\n  }\n}\n\nmutation CreateInvitationEnhanced($email: String!, $firstName: String!, $lastName: String!, $invitedRole: String!, $managerId: uuid, $clerkInvitationId: String, $clerkTicket: String, $invitationMetadata: jsonb, $invitedBy: uuid!, $expiresAt: timestamptz!) {\n  insertUserInvitations(\n    objects: [{email: $email, firstName: $firstName, lastName: $lastName, invitedRole: $invitedRole, managerId: $managerId, clerkInvitationId: $clerkInvitationId, clerkTicket: $clerkTicket, invitationMetadata: $invitationMetadata, invitedBy: $invitedBy, expiresAt: $expiresAt}]\n  ) {\n    returning {\n      ...UserInvitationCore\n    }\n  }\n}\n\nmutation AcceptInvitationEnhanced($invitationId: uuid!, $acceptedBy: uuid!) {\n  updateUserInvitationsByPk(\n    pkColumns: {id: $invitationId}\n    _set: {invitationStatus: \"accepted\", acceptedAt: \"now()\", acceptedBy: $acceptedBy, updatedAt: \"now()\"}\n  ) {\n    ...UserInvitationCore\n  }\n}\n\nmutation BulkRevokeInvitations($invitationIds: [uuid!]!, $revokeReason: String!, $revokedBy: uuid!) {\n  updateUserInvitations(\n    where: {id: {_in: $invitationIds}}\n    _set: {invitationStatus: \"revoked\", revokedAt: \"now()\", revokedBy: $revokedBy, revokeReason: $revokeReason, updatedAt: \"now()\"}\n  ) {\n    returning {\n      ...UserInvitationCore\n    }\n    affectedRows\n  }\n}\n\nmutation DeactivateUser($userId: uuid!, $reason: String!, $deactivatedBy: uuid!, $deactivatedByString: String!) {\n  updateUsersByPk(\n    pkColumns: {id: $userId}\n    _set: {status: \"inactive\", isActive: false, deactivatedAt: \"now()\", deactivatedBy: $deactivatedByString, statusChangeReason: $reason, statusChangedAt: \"now()\", statusChangedBy: $deactivatedBy, updatedAt: \"now()\"}\n  ) {\n    id\n    email\n    firstName\n    lastName\n    computedName\n    status\n    isActive\n    deactivatedAt\n    deactivatedBy\n    statusChangeReason\n    statusChangedAt\n    statusChangedBy\n  }\n}\n\nmutation LockUser($userId: uuid!, $reason: String!, $lockedBy: uuid!) {\n  updateUsersByPk(\n    pkColumns: {id: $userId}\n    _set: {status: \"locked\", isActive: false, statusChangeReason: $reason, statusChangedAt: \"now()\", statusChangedBy: $lockedBy, updatedAt: \"now()\"}\n  ) {\n    id\n    email\n    firstName\n    lastName\n    computedName\n    status\n    isActive\n    statusChangeReason\n    statusChangedAt\n    statusChangedBy\n  }\n}\n\nmutation UnlockUser($userId: uuid!, $reason: String!, $unlockedBy: uuid!) {\n  updateUsersByPk(\n    pkColumns: {id: $userId}\n    _set: {status: \"active\", isActive: true, statusChangeReason: $reason, statusChangedAt: \"now()\", statusChangedBy: $unlockedBy, updatedAt: \"now()\"}\n  ) {\n    id\n    email\n    firstName\n    lastName\n    computedName\n    status\n    isActive\n    statusChangeReason\n    statusChangedAt\n    statusChangedBy\n  }\n}\n\nmutation ReactivateUser($userId: uuid!, $reason: String!, $reactivatedBy: uuid!) {\n  updateUsersByPk(\n    pkColumns: {id: $userId}\n    _set: {status: \"active\", isActive: true, deactivatedAt: null, deactivatedBy: null, statusChangeReason: $reason, statusChangedAt: \"now()\", statusChangedBy: $reactivatedBy, updatedAt: \"now()\"}\n  ) {\n    id\n    email\n    firstName\n    lastName\n    computedName\n    status\n    isActive\n    deactivatedAt\n    deactivatedBy\n    statusChangeReason\n    statusChangedAt\n    statusChangedBy\n  }\n}\n\nmutation BulkChangeUserStatus($userIds: [uuid!]!, $newStatus: user_status_enum!, $reason: String!, $changedBy: uuid!, $setInactive: Boolean! = false) {\n  updateUsers(\n    where: {id: {_in: $userIds}}\n    _set: {status: $newStatus, isActive: $setInactive, statusChangeReason: $reason, statusChangedAt: \"now()\", statusChangedBy: $changedBy, updatedAt: \"now()\"}\n  ) {\n    returning {\n      id\n      email\n      firstName\n      lastName\n      computedName\n      status\n      isActive\n      statusChangeReason\n      statusChangedAt\n      statusChangedBy\n    }\n    affectedRows\n  }\n}\n\nmutation UpdateUserStatus($userId: uuid!, $newStatus: user_status_enum!, $reason: String!, $changedBy: uuid!, $metadata: jsonb = null) {\n  updateUsersByPk(\n    pkColumns: {id: $userId}\n    _set: {status: $newStatus, isActive: true, statusChangeReason: $reason, statusChangedAt: \"now()\", statusChangedBy: $changedBy, updatedAt: \"now()\"}\n  ) {\n    id\n    email\n    firstName\n    lastName\n    computedName\n    status\n    isActive\n    role\n    statusChangeReason\n    statusChangedAt\n    statusChangedBy\n    deactivatedAt\n    deactivatedBy\n    createdAt\n    updatedAt\n  }\n}\n\nmutation DeleteExpiredInvitation($invitationId: uuid!) {\n  deleteUserInvitationsByPk(id: $invitationId) {\n    id\n    email\n    invitationStatus\n    expiresAt\n  }\n}\n\nmutation DeleteUser($userId: uuid!) {\n  deleteUsersByPk(id: $userId) {\n    id\n    email\n    firstName\n    lastName\n    role\n    createdAt\n  }\n}\n\nmutation BulkDeleteExpiredInvitations($invitationIds: [uuid!]!) {\n  deleteUserInvitations(where: {id: {_in: $invitationIds}}) {\n    affectedRows\n    returning {\n      id\n      email\n      invitationStatus\n      expiresAt\n    }\n  }\n}\n\nmutation BulkDeleteOrphanedUsers($userIds: [uuid!]!) {\n  deleteUsers(where: {id: {_in: $userIds}}) {\n    affectedRows\n    returning {\n      id\n      email\n      firstName\n      lastName\n      role\n      createdAt\n    }\n  }\n}": types.AssignRoleToUserDocument,
    "query GetCurrentUserRoles {\n  users(limit: 1) {\n    id\n    email\n    isActive\n    isStaff\n    roleAssignments {\n      role {\n        id\n        name\n        displayName\n        description\n        priority\n        isSystemRole\n        rolePermissions {\n          permission {\n            id\n            action\n            description\n            resource {\n              id\n              name\n              displayName\n              description\n            }\n          }\n          conditions\n        }\n      }\n    }\n  }\n}\n\nquery GetAllRoles {\n  roles(orderBy: {priority: DESC}) {\n    id\n    name\n    displayName\n    description\n    priority\n    isSystemRole\n    rolePermissions {\n      id\n      conditions\n      permission {\n        id\n        action\n        description\n        resource {\n          id\n          name\n          displayName\n          description\n        }\n      }\n    }\n  }\n}\n\nquery GetResourcesAndPermissions {\n  resources(orderBy: {name: ASC}) {\n    id\n    name\n    displayName\n    description\n    permissions {\n      id\n      action\n      description\n    }\n  }\n}\n\nquery GetUsersWithRoles($limit: Int = 50, $offset: Int = 0) {\n  users(limit: $limit, offset: $offset, orderBy: {createdAt: DESC}) {\n    id\n    email\n    isActive\n    isStaff\n    roleAssignments {\n      id\n      role {\n        id\n        name\n        displayName\n        priority\n      }\n    }\n  }\n}\n\nquery GetUserPermissionOverrides($userId: uuid!) {\n  permissionOverrides(where: {userId: {_eq: $userId}}, orderBy: {createdAt: DESC}) {\n    id\n    resource\n    operation\n    granted\n    conditions\n    expiresAt\n  }\n}\n\nquery GetRolePermissionOverrides($roleName: String!) {\n  permissionOverrides(where: {role: {_eq: $roleName}}, orderBy: {createdAt: DESC}) {\n    id\n    resource\n    operation\n    granted\n    conditions\n    expiresAt\n  }\n}\n\nquery SearchUsersByEmail($emailPattern: String!) {\n  users(where: {email: {_ilike: $emailPattern}}, limit: 10, orderBy: {email: ASC}) {\n    id\n    email\n    isActive\n    roleAssignments {\n      role {\n        name\n        displayName\n      }\n    }\n  }\n}\n\nquery GetRoleHierarchy {\n  roles(orderBy: {priority: DESC}) {\n    id\n    name\n    displayName\n    description\n    priority\n    isSystemRole\n    rolePermissionsAggregate {\n      aggregate {\n        count\n      }\n    }\n    userRolesAggregate {\n      aggregate {\n        count\n      }\n    }\n  }\n}\n\nquery GetPermissionAuditLogs($limit: Int = 50, $offset: Int = 0, $startDate: timestamptz, $endDate: timestamptz) {\n  auditPermissionChanges(\n    where: {changedAt: {_gte: $startDate, _lte: $endDate}}\n    orderBy: {changedAt: DESC}\n    limit: $limit\n    offset: $offset\n  ) {\n    id\n    targetUserId\n    changedByUserId\n    changeType\n    reason\n    oldPermissions\n    newPermissions\n    changedAt\n  }\n}\n\nquery GetPendingInvitations($limit: Int = 50, $offset: Int = 0, $now: timestamptz!) {\n  userInvitations(\n    where: {invitationStatus: {_eq: \"pending\"}, expiresAt: {_gt: $now}}\n    orderBy: {createdAt: DESC}\n    limit: $limit\n    offset: $offset\n  ) {\n    ...UserInvitationCore\n  }\n}\n\nquery GetInvitationByTicket($clerkTicket: String!) {\n  userInvitations(where: {clerkTicket: {_eq: $clerkTicket}}, limit: 1) {\n    ...UserInvitationWithDetails\n  }\n}\n\nquery GetInvitationByClerkId($clerkInvitationId: String!) {\n  userInvitations(where: {clerkInvitationId: {_eq: $clerkInvitationId}}, limit: 1) {\n    ...UserInvitationWithDetails\n  }\n}\n\nquery GetInvitationHistory($email: String!, $limit: Int = 10) {\n  userInvitations(\n    where: {email: {_eq: $email}}\n    orderBy: {invitedAt: DESC}\n    limit: $limit\n  ) {\n    id\n    email\n    firstName\n    lastName\n    invitedRole\n    invitationStatus\n    invitedAt\n    acceptedAt\n    expiresAt\n    invitedByUser {\n      ...UserMinimal\n    }\n    acceptedByUser {\n      ...UserMinimal\n      clerkUserId\n    }\n  }\n}\n\nquery GetInvitationsBySender($invitedBy: uuid!, $limit: Int = 50) {\n  userInvitations(\n    where: {invitedBy: {_eq: $invitedBy}}\n    orderBy: {invitedAt: DESC}\n    limit: $limit\n  ) {\n    id\n    email\n    firstName\n    lastName\n    invitedRole\n    invitationStatus\n    invitedAt\n    acceptedAt\n    expiresAt\n    acceptedByUser {\n      firstName\n      lastName\n      computedName\n      email\n    }\n  }\n}\n\nquery GetExpiredInvitations($now: timestamptz!) {\n  userInvitations(\n    where: {_or: [{invitationStatus: {_eq: \"expired\"}}, {expiresAt: {_lt: $now}}]}\n    orderBy: {expiresAt: DESC}\n  ) {\n    ...UserInvitationWithDetails\n  }\n}\n\nquery ValidateInvitationRolePermissions($invitedRole: String!, $invitedBy: uuid!) {\n  users(where: {id: {_eq: $invitedBy}}) {\n    id\n    role\n    roleAssignments {\n      role {\n        name\n        priority\n        rolePermissions {\n          permission {\n            action\n            resource {\n              name\n            }\n          }\n        }\n      }\n    }\n  }\n  roles(where: {name: {_eq: $invitedRole}}) {\n    id\n    name\n    priority\n    isSystemRole\n  }\n}\n\nquery GetInvitationById($invitationId: uuid!) {\n  userInvitationsByPk(id: $invitationId) {\n    ...UserInvitationWithDetails\n  }\n}\n\nquery GetResendableInvitations($invitedBy: uuid!, $limit: Int = 50) {\n  userInvitations(\n    where: {invitedBy: {_eq: $invitedBy}, invitationStatus: {_in: [\"pending\", \"expired\"]}}\n    orderBy: {invitedAt: DESC}\n    limit: $limit\n  ) {\n    ...UserInvitationCore\n  }\n}\n\nquery GetInvitationsWithStatus($statuses: [invitation_status_enum!], $limit: Int = 50, $offset: Int = 0, $orderBy: [UserInvitationsOrderBy!] = [{createdAt: DESC}]) {\n  userInvitations(\n    where: {invitationStatus: {_in: $statuses}}\n    orderBy: $orderBy\n    limit: $limit\n    offset: $offset\n  ) {\n    ...UserInvitationWithDetails\n  }\n  userInvitationsAggregate(where: {invitationStatus: {_in: $statuses}}) {\n    aggregate {\n      count\n    }\n  }\n}\n\nquery GetInvitationDashboardStats($now: timestamptz!, $sevenDaysFromNow: timestamptz!) {\n  pending: userInvitationsAggregate(\n    where: {invitationStatus: {_eq: \"pending\"}, expiresAt: {_gt: $now}}\n  ) {\n    aggregate {\n      count\n    }\n  }\n  expired: userInvitationsAggregate(where: {invitationStatus: {_eq: \"expired\"}}) {\n    aggregate {\n      count\n    }\n  }\n  accepted: userInvitationsAggregate(where: {invitationStatus: {_eq: \"accepted\"}}) {\n    aggregate {\n      count\n    }\n  }\n  revoked: userInvitationsAggregate(where: {invitationStatus: {_eq: \"revoked\"}}) {\n    aggregate {\n      count\n    }\n  }\n  expiringSoon: userInvitationsAggregate(\n    where: {invitationStatus: {_eq: \"pending\"}, expiresAt: {_gt: $now, _lt: $sevenDaysFromNow}}\n  ) {\n    aggregate {\n      count\n    }\n  }\n  recentInvitations: userInvitations(orderBy: {createdAt: DESC}, limit: 10) {\n    id\n    email\n    firstName\n    lastName\n    invitedRole\n    invitationStatus\n    createdAt\n    expiresAt\n    invitedByUser {\n      id\n      firstName\n      lastName\n      computedName\n      email\n    }\n  }\n}\n\nquery GetRevokedInvitations($limit: Int = 50, $offset: Int = 0) {\n  userInvitations(\n    where: {invitationStatus: {_eq: \"revoked\"}}\n    orderBy: {revokedAt: DESC}\n    limit: $limit\n    offset: $offset\n  ) {\n    ...UserInvitationCore\n  }\n}\n\nquery GetInvitationAuditHistory($email: String, $invitedBy: uuid, $startDate: timestamptz, $endDate: timestamptz, $limit: Int = 100) {\n  userInvitations(\n    where: {_and: [{email: {_eq: $email}}, {invitedBy: {_eq: $invitedBy}}, {createdAt: {_gte: $startDate}}, {createdAt: {_lte: $endDate}}]}\n    orderBy: {createdAt: DESC}\n    limit: $limit\n  ) {\n    ...UserInvitationWithDetails\n  }\n}\n\nquery GetExpiringInvitations($now: timestamptz!, $futureDate: timestamptz!) {\n  userInvitations(\n    where: {invitationStatus: {_eq: \"pending\"}, expiresAt: {_gt: $now, _lt: $futureDate}}\n    orderBy: {expiresAt: ASC}\n  ) {\n    ...UserInvitationWithDetails\n  }\n}\n\nquery SearchInvitations($searchTerm: String!, $limit: Int = 20) {\n  userInvitations(\n    where: {_or: [{email: {_ilike: $searchTerm}}, {firstName: {_ilike: $searchTerm}}, {lastName: {_ilike: $searchTerm}}]}\n    orderBy: {createdAt: DESC}\n    limit: $limit\n  ) {\n    ...UserInvitationWithDetails\n  }\n}\n\nquery GetInvitationByIdDetailed($invitationId: uuid!) {\n  userInvitationsByPk(id: $invitationId) {\n    ...UserInvitationWithDetails\n  }\n}\n\nquery GetUsersByStatus($statuses: [user_status_enum!], $limit: Int = 50, $offset: Int = 0, $orderBy: [UsersOrderBy!] = [{updatedAt: DESC}]) {\n  users(\n    where: {status: {_in: $statuses}}\n    orderBy: $orderBy\n    limit: $limit\n    offset: $offset\n  ) {\n    id\n    email\n    firstName\n    lastName\n    computedName\n    role\n    status\n    isActive\n    isStaff\n    statusChangedAt\n    statusChangedBy\n    statusChangeReason\n    deactivatedAt\n    deactivatedBy\n    createdAt\n    updatedAt\n  }\n  usersAggregate(where: {status: {_in: $statuses}}) {\n    aggregate {\n      count\n    }\n  }\n}\n\nquery GetUserStatusDashboardStats($thirtyDaysAgo: timestamptz = \"2024-01-01T00:00:00Z\") {\n  active: usersAggregate(where: {status: {_eq: \"active\"}}) {\n    aggregate {\n      count\n    }\n  }\n  inactive: usersAggregate(where: {status: {_eq: \"inactive\"}}) {\n    aggregate {\n      count\n    }\n  }\n  locked: usersAggregate(where: {status: {_eq: \"locked\"}}) {\n    aggregate {\n      count\n    }\n  }\n  pending: usersAggregate(where: {status: {_eq: \"pending\"}}) {\n    aggregate {\n      count\n    }\n  }\n  recentStatusChanges: users(\n    where: {statusChangedAt: {_gte: $thirtyDaysAgo}}\n    orderBy: {statusChangedAt: DESC}\n    limit: 10\n  ) {\n    id\n    email\n    firstName\n    lastName\n    computedName\n    role\n    status\n    statusChangedAt\n    statusChangeReason\n  }\n  staff: usersAggregate(where: {isStaff: {_eq: true}}) {\n    aggregate {\n      count\n    }\n  }\n  byRole: users {\n    role\n  }\n}\n\nquery GetUsersRequiringAttention($limit: Int = 20) {\n  locked: users(\n    where: {status: {_eq: \"locked\"}}\n    orderBy: {statusChangedAt: DESC}\n    limit: $limit\n  ) {\n    id\n    email\n    firstName\n    lastName\n    computedName\n    role\n    status\n    statusChangedAt\n    statusChangeReason\n  }\n  inactive: users(\n    where: {status: {_eq: \"inactive\"}}\n    orderBy: {deactivatedAt: DESC}\n    limit: $limit\n  ) {\n    id\n    email\n    firstName\n    lastName\n    computedName\n    role\n    status\n    deactivatedAt\n    statusChangeReason\n  }\n  pending: users(\n    where: {status: {_eq: \"pending\"}}\n    orderBy: {createdAt: DESC}\n    limit: $limit\n  ) {\n    id\n    email\n    firstName\n    lastName\n    computedName\n    role\n    status\n    createdAt\n  }\n}\n\nquery GetUserStatusHistory($userId: uuid!, $startDate: timestamptz, $endDate: timestamptz, $limit: Int = 50) {\n  user: usersByPk(id: $userId) {\n    id\n    email\n    firstName\n    lastName\n    computedName\n    role\n    status\n    isActive\n    statusChangedAt\n    statusChangedBy\n    statusChangeReason\n    deactivatedAt\n    deactivatedBy\n    createdAt\n    updatedAt\n  }\n}\n\nquery SearchUsersAdvanced($searchTerm: String, $statuses: [user_status_enum!], $roles: [user_role!], $isStaff: Boolean, $limit: Int = 20) {\n  users(\n    where: {_and: [{_or: [{email: {_ilike: \"%${searchTerm}%\"}}, {computedName: {_ilike: \"%${searchTerm}%\"}}]}, {status: {_in: $statuses}}, {role: {_in: $roles}}, {isStaff: {_eq: $isStaff}}]}\n    orderBy: {updatedAt: DESC}\n    limit: $limit\n  ) {\n    id\n    email\n    firstName\n    lastName\n    computedName\n    role\n    status\n    isActive\n    isStaff\n    statusChangedAt\n    statusChangeReason\n    deactivatedAt\n    createdAt\n  }\n}\n\nquery GetUserWithStatusDetails($userId: uuid!) {\n  usersByPk(id: $userId) {\n    id\n    email\n    firstName\n    lastName\n    computedName\n    role\n    status\n    isActive\n    isStaff\n    clerkUserId\n    statusChangedAt\n    statusChangedBy\n    statusChangeReason\n    deactivatedAt\n    deactivatedBy\n    createdAt\n    updatedAt\n  }\n}\n\nquery GetOrphanedInvitations {\n  userInvitations(\n    where: {invitationStatus: {_eq: \"accepted\"}}\n    orderBy: {createdAt: DESC}\n  ) {\n    id\n    email\n    firstName\n    lastName\n    invitationStatus\n    acceptedBy\n    createdAt\n    invitedBy\n    invitedByUser {\n      id\n      firstName\n      lastName\n      email\n    }\n  }\n}\n\nquery GetUsersWithoutClerkId {\n  users(\n    where: {_or: [{clerkUserId: {_isNull: true}}, {clerkUserId: {_eq: \"\"}}]}\n    orderBy: {createdAt: DESC}\n  ) {\n    id\n    email\n    firstName\n    lastName\n    role\n    createdAt\n    updatedAt\n    isActive\n  }\n}\n\nquery GetExpiredInvitationsForCleanup {\n  userInvitations(\n    where: {_or: [{invitationStatus: {_eq: \"expired\"}}, {expiresAt: {_lt: \"now()\"}}]}\n    orderBy: {expiresAt: DESC}\n  ) {\n    id\n    email\n    firstName\n    lastName\n    invitationStatus\n    expiresAt\n    createdAt\n    clerkInvitationId\n  }\n}\n\nfragment UserInvitationDetail on UserInvitations {\n  id\n  email\n  firstName\n  lastName\n  invitedRole\n  managerId\n  clerkInvitationId\n  clerkTicket\n  invitationMetadata\n  invitedBy\n  invitationStatus\n  expiresAt\n  createdAt\n  updatedAt\n}": types.GetCurrentUserRolesDocument,
    "subscription UserAuthStatusUpdates($userId: uuid!) {\n  users(where: {id: {_eq: $userId}}) {\n    id\n    isActive\n    role\n    updatedAt\n    deactivatedAt\n    deactivatedBy\n  }\n}\n\nsubscription UserSessionUpdates($clerkUserId: String!) {\n  users(where: {clerkUserId: {_eq: $clerkUserId}}) {\n    id\n    isActive\n    role\n    updatedAt\n    clerkUserId\n  }\n}\n\nsubscription AuthEventsUpdates($userId: uuid!) {\n  auditAuthEvents(\n    where: {userId: {_eq: $userId}}\n    orderBy: {eventTime: DESC}\n    limit: 20\n  ) {\n    id\n    eventType\n    eventTime\n    ipAddress\n    userAgent\n    success\n    failureReason\n    userId\n  }\n}\n\nsubscription UserRoleUpdates($userId: uuid!) {\n  users(where: {id: {_eq: $userId}}) {\n    id\n    role\n    isStaff\n    isActive\n    roleAssignments {\n      id\n      roleId\n      role {\n        id\n        name\n        displayName\n        priority\n        isSystemRole\n      }\n    }\n    updatedAt\n  }\n}\n\nsubscription UserPermissionUpdates($userId: uuid!) {\n  users(where: {id: {_eq: $userId}}) {\n    id\n    role\n    roleAssignments {\n      roleId\n      role {\n        name\n        rolePermissions {\n          id\n          permissionId\n          conditions\n          permission {\n            id\n            action\n            description\n            resource {\n              name\n              displayName\n            }\n          }\n        }\n      }\n    }\n    updatedAt\n  }\n}\n\nsubscription RolePermissionChanges($roleId: uuid!) {\n  rolePermissions(where: {roleId: {_eq: $roleId}}) {\n    id\n    roleId\n    permissionId\n    conditions\n    createdAt\n    updatedAt\n    permission {\n      id\n      action\n      description\n      resource {\n        name\n        displayName\n      }\n    }\n  }\n}\n\nsubscription FailedAuthAttemptsUpdates {\n  auditAuthEvents(\n    where: {success: {_eq: false}, eventTime: {_gte: \"now() - interval '1 hour'\"}}\n    orderBy: {eventTime: DESC}\n  ) {\n    id\n    eventType\n    eventTime\n    ipAddress\n    userAgent\n    failureReason\n    userId\n  }\n}\n\nsubscription SuspiciousActivityUpdates {\n  auditAuthEvents(\n    where: {_or: [{eventType: {_eq: \"multiple_failed_attempts\"}}, {eventType: {_eq: \"unusual_location\"}}, {eventType: {_eq: \"suspicious_activity\"}}], eventTime: {_gte: \"now() - interval '24 hours'\"}}\n    orderBy: {eventTime: DESC}\n  ) {\n    id\n    eventType\n    eventTime\n    ipAddress\n    userAgent\n    userId\n    metadata\n  }\n}\n\nsubscription SecurityAlertsUpdates {\n  auditAuthEvents(\n    where: {eventType: {_in: [\"account_locked\", \"unauthorized_access_attempt\", \"privilege_escalation_attempt\", \"suspicious_activity\"]}, eventTime: {_gte: \"now() - interval '1 hour'\"}}\n    orderBy: {eventTime: DESC}\n  ) {\n    id\n    eventType\n    eventTime\n    ipAddress\n    userId\n    metadata\n  }\n}\n\nsubscription PermissionChangesUpdates {\n  auditPermissionChanges(orderBy: {changedAt: DESC}, limit: 50) {\n    id\n    changeType\n    targetUserId\n    changedByUserId\n    reason\n    oldPermissions\n    newPermissions\n    changedAt\n  }\n}\n\nsubscription RoleAssignmentUpdates {\n  userRoles(orderBy: {createdAt: DESC}) {\n    id\n    userId\n    roleId\n    createdAt\n    updatedAt\n    user {\n      id\n      firstName\n      lastName\n      computedName\n      email\n    }\n    role {\n      id\n      name\n      displayName\n      priority\n    }\n  }\n}\n\nsubscription AuthSystemHealthUpdates {\n  auditAuthEvents(\n    where: {eventType: {_eq: \"login\"}, success: {_eq: true}, eventTime: {_gte: \"now() - interval '1 hour'\"}}\n    orderBy: {eventTime: DESC}\n    limit: 10\n  ) {\n    id\n    eventType\n    eventTime\n    userId\n    success\n  }\n}\n\nsubscription ActiveSessionsUpdates {\n  auditAuthEvents(\n    where: {eventType: {_eq: \"session_active\"}, eventTime: {_gte: \"now() - interval '30 minutes'\"}}\n    orderBy: {eventTime: DESC}\n  ) {\n    id\n    userId\n    eventTime\n    ipAddress\n  }\n}\n\nsubscription UserSecurityStatusUpdates($userId: uuid!) {\n  users(where: {id: {_eq: $userId}}) {\n    id\n    isActive\n    role\n    updatedAt\n  }\n}\n\nsubscription MFAEventsUpdates($userId: uuid!) {\n  auditAuthEvents(\n    where: {userId: {_eq: $userId}, eventType: {_like: \"mfa%\"}}\n    orderBy: {eventTime: DESC}\n    limit: 10\n  ) {\n    id\n    eventType\n    eventTime\n    success\n    failureReason\n    metadata\n  }\n}\n\nsubscription UserDeactivationUpdates {\n  users(\n    where: {isActive: {_eq: false}, deactivatedAt: {_gte: \"now() - interval '24 hours'\"}}\n    orderBy: {deactivatedAt: DESC}\n  ) {\n    id\n    firstName\n    lastName\n    computedName\n    email\n    role\n    deactivatedAt\n    deactivatedBy\n  }\n}\n\nsubscription PrivilegeChangesUpdates {\n  users(\n    where: {role: {_in: [\"org_admin\", \"manager\", \"developer\"]}, updatedAt: {_gte: \"now() - interval '1 hour'\"}}\n    orderBy: {updatedAt: DESC}\n  ) {\n    id\n    firstName\n    lastName\n    computedName\n    email\n    role\n    updatedAt\n    roleAssignments {\n      role {\n        name\n        priority\n      }\n    }\n  }\n}\n\nsubscription ComplianceEventsUpdates {\n  auditPermissionChanges(\n    where: {changeType: {_in: [\"role_assigned\", \"role_removed\", \"permission_granted\", \"permission_revoked\", \"admin_access\"]}, changedAt: {_gte: \"now() - interval '1 hour'\"}}\n    orderBy: {changedAt: DESC}\n  ) {\n    id\n    changeType\n    targetUserId\n    changedByUserId\n    reason\n    oldPermissions\n    newPermissions\n    changedAt\n  }\n}\n\nsubscription DataAccessMonitoring($userId: uuid!) {\n  auditDataAccessLog(\n    where: {userId: {_eq: $userId}, accessedAt: {_gte: \"now() - interval '24 hours'\"}}\n    orderBy: {accessedAt: DESC}\n    limit: 100\n  ) {\n    id\n    userId\n    resourceType\n    resourceId\n    accessType\n    accessedAt\n    ipAddress\n    dataClassification\n    rowCount\n  }\n}\n\nsubscription SecurityIncidentsUpdates {\n  auditAuthEvents(\n    where: {eventType: {_in: [\"security_incident\", \"data_breach_attempt\", \"unauthorized_admin_access\", \"multiple_failed_mfa\"]}, eventTime: {_gte: \"now() - interval '24 hours'\"}}\n    orderBy: {eventTime: DESC}\n  ) {\n    id\n    eventType\n    eventTime\n    userId\n    ipAddress\n    userAgent\n    metadata\n  }\n}\n\nsubscription EmergencyAuthUpdates {\n  auditAuthEvents(\n    where: {eventType: {_eq: \"emergency_access\"}, eventTime: {_gte: \"now() - interval '1 hour'\"}}\n    orderBy: {eventTime: DESC}\n  ) {\n    id\n    eventType\n    eventTime\n    userId\n    ipAddress\n    metadata\n  }\n}": types.UserAuthStatusUpdatesDocument,
    "fragment UserMinimal on Users {\n  id\n  firstName\n  lastName\n  computedName\n  email\n}\n\nfragment UserCoreShared on Users {\n  ...UserMinimal\n  role\n  isActive\n}\n\nfragment UserBasic on Users {\n  ...UserCoreShared\n  clerkUserId\n  createdAt\n  updatedAt\n}\n\nfragment UserBase on Users {\n  ...UserBasic\n}\n\nfragment UserWithRole on Users {\n  ...UserBasic\n  username\n  isStaff\n}\n\nfragment UserProfile on Users {\n  ...UserWithRole\n  clerkUserId\n  image\n  managerId\n  deactivatedAt\n  deactivatedBy\n  manager {\n    ...UserMinimal\n  }\n}\n\nfragment UserSearchResult on Users {\n  ...UserCoreShared\n  username\n  isStaff\n}\n\nfragment ClientMinimal on Clients {\n  id\n  name\n}\n\nfragment ClientBase on Clients {\n  id\n  name\n  active\n  contactEmail\n  contactPerson\n  contactPhone\n  createdAt\n}\n\nfragment ClientWithStats on Clients {\n  ...ClientBase\n  currentEmployeeCount: payrollsAggregate(\n    where: {supersededDate: {_isNull: true}}\n  ) {\n    aggregate {\n      sum {\n        employeeCount\n      }\n    }\n  }\n  activePayrollCount: payrollsAggregate(\n    where: {supersededDate: {_isNull: true}, status: {_eq: \"Active\"}}\n  ) {\n    aggregate {\n      count\n    }\n  }\n}\n\nfragment ClientListBase on Clients {\n  ...ClientBase\n  payrollCount: payrollsAggregate(where: {supersededDate: {_isNull: true}}) {\n    aggregate {\n      count\n    }\n  }\n}\n\nfragment PayrollMinimal on Payrolls {\n  id\n  name\n  employeeCount\n  status\n}\n\nfragment PayrollBase on Payrolls {\n  id\n  name\n  employeeCount\n  status\n  payrollSystem\n  processingTime\n  processingDaysBeforeEft\n  versionNumber\n  supersededDate\n  createdAt\n  updatedAt\n}\n\nfragment PayrollWithClient on Payrolls {\n  ...PayrollBase\n  clientId\n  client {\n    id\n    name\n    active\n  }\n}\n\nfragment PayrollListItem on Payrolls {\n  ...PayrollWithClient\n  primaryConsultantUserId\n  backupConsultantUserId\n  managerUserId\n  createdByUserId\n  cycleId\n  dateTypeId\n  dateValue\n  payrollCycle {\n    id\n    name\n    description\n  }\n  payrollDateType {\n    id\n    name\n    description\n  }\n  primaryConsultant {\n    ...UserMinimal\n  }\n  backupConsultant {\n    ...UserMinimal\n  }\n  assignedManager {\n    ...UserMinimal\n  }\n}\n\nfragment PayrollWithDates on Payrolls {\n  ...PayrollBase\n  goLiveDate\n  payrollDates(orderBy: {originalEftDate: ASC}) {\n    id\n    originalEftDate\n    adjustedEftDate\n    notes\n  }\n}\n\nfragment PayrollFullDetail on Payrolls {\n  ...PayrollWithDates\n  ...PayrollWithClient\n  dateTypeId\n  cycleId\n  dateValue\n  versionReason\n  supersededDate\n  parentPayrollId\n  parentPayroll {\n    id\n    versionNumber\n  }\n  childPayrolls(orderBy: {versionNumber: DESC}) {\n    id\n    versionNumber\n    versionReason\n    createdAt\n  }\n  primaryConsultant {\n    ...UserMinimal\n  }\n  backupConsultant {\n    ...UserMinimal\n  }\n  assignedManager {\n    ...UserMinimal\n  }\n}\n\nfragment NoteWithAuthor on Notes {\n  id\n  content\n  isImportant\n  createdAt\n  entityId\n  entityType\n  author {\n    ...UserMinimal\n  }\n}\n\nfragment PermissionBase on Permissions {\n  id\n  resourceId\n  description\n  legacyPermissionName\n  action\n}\n\nfragment RoleWithPermissions on Roles {\n  id\n  name\n  displayName\n  description\n  isSystemRole\n  priority\n  rolePermissions {\n    permission {\n      ...PermissionBase\n    }\n  }\n}\n\nfragment AuditLogEntry on AuditAuditLog {\n  id\n  userId\n  userEmail\n  userRole\n  action\n  resourceType\n  resourceId\n  eventTime\n  success\n  errorMessage\n  ipAddress\n  userAgent\n  requestId\n  sessionId\n  metadata\n  oldValues\n  newValues\n  createdAt\n}\n\nfragment AuthEvent on AuditAuthEvents {\n  id\n  userId\n  userEmail\n  eventType\n  eventTime\n  success\n  failureReason\n  ipAddress\n  userAgent\n  metadata\n}\n\nfragment DataAccessLog on AuditDataAccessLog {\n  id\n  userId\n  resourceType\n  resourceId\n  accessType\n  accessedAt\n  dataClassification\n  fieldsAccessed\n  rowCount\n  ipAddress\n  metadata\n}\n\nfragment PermissionChange on AuditPermissionChanges {\n  id\n  changedAt\n  changedByUserId\n  targetUserId\n  targetRoleId\n  changeType\n  permissionType\n  oldPermissions\n  newPermissions\n  reason\n  approvedByUserId\n}\n\nfragment PayrollDateInfo on PayrollDates {\n  id\n  originalEftDate\n  adjustedEftDate\n  notes\n  createdAt\n}\n\nfragment PermissionOverrideInfo on PermissionOverrides {\n  id\n  userId\n  role\n  resource\n  operation\n  granted\n  reason\n  conditions\n  expiresAt\n  createdBy\n  createdAt\n}\n\nfragment PayrollTableRow on Payrolls {\n  ...PayrollListItem\n  goLiveDate\n  processingTime\n  versionNumber\n  cycleId\n  payrollCycle {\n    id\n    name\n    description\n  }\n  nextPayrollDate: payrollDates(\n    where: {_or: [{adjustedEftDate: {_gte: \"now()\"}}, {originalEftDate: {_gte: \"now()\"}}]}\n    orderBy: [{adjustedEftDate: ASC}, {originalEftDate: ASC}]\n    limit: 1\n  ) {\n    originalEftDate\n    adjustedEftDate\n    processingDate\n  }\n}\n\nfragment BillingItemMinimal on BillingItems {\n  id\n  description\n  amount\n  status\n  createdAt\n}\n\nfragment BillingItemBase on BillingItems {\n  ...BillingItemMinimal\n  clientId\n  staffUserId\n  isApproved\n  approvalDate\n  approvedBy\n  createdAt\n  updatedAt\n}\n\nfragment BillingItemWithClient on BillingItems {\n  ...BillingItemBase\n  client {\n    ...ClientMinimal\n  }\n  staffUser {\n    ...UserMinimal\n  }\n  approver: approvedByUser {\n    ...UserMinimal\n  }\n}\n\nfragment InvoiceMinimal on Invoices {\n  id\n  invoiceNumber\n  totalAmount\n  status\n  dueDate\n}\n\nfragment InvoiceBase on Invoices {\n  ...InvoiceMinimal\n  clientId\n  invoiceDate\n  taxAmount\n  subtotal\n  notes\n  createdAt\n  updatedAt\n}\n\nfragment InvoiceWithClient on Invoices {\n  ...InvoiceBase\n  client {\n    ...ClientMinimal\n  }\n}\n\nfragment FileMinimal on Files {\n  id\n  filename\n  size\n  mimetype\n  url\n}\n\nfragment FileBase on Files {\n  ...FileMinimal\n  bucket\n  objectKey\n  uploadedBy\n  category\n  fileType\n  isPublic\n  createdAt\n}\n\nfragment FileWithUploader on Files {\n  ...FileBase\n  uploadedByUser {\n    ...UserMinimal\n  }\n}\n\nfragment InvitationMinimal on UserInvitations {\n  id\n  email\n  invitedRole\n  invitationStatus\n}\n\nfragment InvitationBase on UserInvitations {\n  ...InvitationMinimal\n  invitedBy\n  expiresAt\n  acceptedAt\n  revokedAt\n  createdAt\n}\n\nfragment InvitationWithInviter on UserInvitations {\n  ...InvitationBase\n  invitedByUser {\n    ...UserMinimal\n  }\n}\n\nfragment ClientDashboardStats on Clients {\n  ...ClientMinimal\n  totalPayrolls: payrollsAggregate {\n    aggregate {\n      count\n    }\n  }\n  activePayrolls: payrollsAggregate(where: {status: {_eq: \"Active\"}}) {\n    aggregate {\n      count\n    }\n  }\n  totalEmployees: payrollsAggregate {\n    aggregate {\n      sum {\n        employeeCount\n      }\n    }\n  }\n}\n\nfragment UserActivityStats on Users {\n  ...UserMinimal\n  staffBillingItems(orderBy: {createdAt: DESC}, limit: 5) {\n    ...BillingItemMinimal\n  }\n  authoredNotes(orderBy: {createdAt: DESC}, limit: 3) {\n    ...NoteWithAuthor\n  }\n}": types.UserMinimalFragmentDoc,
    "mutation LogAuditEvent($input: AuditAuditLogInsertInput!) {\n  insertAuditAuditLog(objects: [$input]) {\n    returning {\n      id\n      eventTime\n    }\n  }\n}\n\nmutation InsertFile($input: FilesInsertInput!) {\n  insertFiles(objects: [$input]) {\n    returning {\n      id\n      filename\n      bucket\n      objectKey\n      size\n      mimetype\n      url\n      clientId\n      payrollId\n      uploadedBy\n      category\n      isPublic\n      metadata\n      fileType\n      createdAt\n    }\n  }\n}\n\nmutation UpdateFileMetadata($id: uuid!, $updates: FilesSetInput!) {\n  updateFilesByPk(pkColumns: {id: $id}, _set: $updates) {\n    id\n    filename\n    bucket\n    objectKey\n    size\n    mimetype\n    url\n    clientId\n    payrollId\n    uploadedBy\n    category\n    isPublic\n    metadata\n    fileType\n    createdAt\n  }\n}\n\nmutation DeleteFile($id: uuid!) {\n  deleteFilesByPk(id: $id) {\n    id\n    filename\n    objectKey\n  }\n}\n\nmutation RefreshData {\n  __typename\n}": types.LogAuditEventDocument,
    "query GetDashboardMetrics($userId: uuid!) {\n  clientsAggregate(where: {active: {_eq: true}}) {\n    aggregate {\n      count\n    }\n  }\n  activePayrollsAggregate: payrollsAggregate(\n    where: {supersededDate: {_isNull: true}, status: {_nin: [\"Completed\", \"Failed\"]}}\n  ) {\n    aggregate {\n      count\n    }\n  }\n  totalEmployeesAggregate: payrollsAggregate(\n    where: {supersededDate: {_isNull: true}}\n  ) {\n    aggregate {\n      sum {\n        employeeCount\n      }\n    }\n  }\n  upcomingPayrolls: payrolls(\n    where: {supersededDate: {_isNull: true}, status: {_nin: [\"Completed\", \"Failed\", \"Cancelled\"]}}\n    orderBy: {updatedAt: DESC}\n    limit: 5\n  ) {\n    ...PayrollMinimal\n    client {\n      ...ClientMinimal\n    }\n  }\n}\n\nquery GetDashboardStatsOptimized($limit: Int = 10) {\n  clientsAggregate {\n    aggregate {\n      count\n    }\n  }\n  totalPayrolls: payrollsAggregate(where: {supersededDate: {_isNull: true}}) {\n    aggregate {\n      count\n    }\n  }\n  activePayrolls: payrollsAggregate(\n    where: {supersededDate: {_isNull: true}, status: {_eq: \"Active\"}}\n  ) {\n    aggregate {\n      count\n    }\n  }\n  upcomingPayrolls: payrolls(\n    where: {supersededDate: {_isNull: true}, status: {_eq: \"Active\"}, payrollDates: {adjustedEftDate: {_gte: \"now()\"}}}\n    orderBy: {updatedAt: DESC}\n    limit: $limit\n  ) {\n    id\n    name\n    status\n    client {\n      id\n      name\n    }\n    nextEftDate: payrollDates(\n      where: {adjustedEftDate: {_gte: \"now()\"}}\n      orderBy: {adjustedEftDate: ASC}\n      limit: 1\n    ) {\n      originalEftDate\n      adjustedEftDate\n      processingDate\n    }\n  }\n}\n\nquery GetClientsDashboardStats {\n  activeClientsCount: clientsAggregate(where: {active: {_eq: true}}) {\n    aggregate {\n      count\n    }\n  }\n  totalPayrollsCount: payrollsAggregate(where: {supersededDate: {_isNull: true}}) {\n    aggregate {\n      count\n    }\n  }\n  totalEmployeesSum: payrollsAggregate(where: {supersededDate: {_isNull: true}}) {\n    aggregate {\n      sum {\n        employeeCount\n      }\n    }\n  }\n  clientsNeedingAttention: clients(\n    where: {active: {_eq: true}, _not: {payrolls: {supersededDate: {_isNull: true}}}}\n  ) {\n    ...ClientMinimal\n  }\n}\n\nquery GetCurrentUser($userId: uuid!) {\n  user: usersByPk(id: $userId) {\n    ...UserProfile\n  }\n}\n\nquery GetUsersForDropdown($role: user_role) {\n  users(\n    where: {isActive: {_eq: true}, role: {_eq: $role}}\n    orderBy: {computedName: ASC}\n  ) {\n    ...UserMinimal\n  }\n}\n\nquery GetSystemHealth {\n  databaseHealth: users(limit: 1) {\n    id\n  }\n  recentActivity: auditAuditLogAggregate(\n    where: {eventTime: {_gte: \"now() - interval '1 hour'\"}}\n  ) {\n    aggregate {\n      count\n    }\n  }\n}\n\nquery GlobalSearch($searchTerm: String!) {\n  clients(\n    where: {_or: [{name: {_ilike: $searchTerm}}, {contactEmail: {_ilike: $searchTerm}}]}\n    limit: 5\n  ) {\n    ...ClientMinimal\n  }\n  users(\n    where: {_or: [{computedName: {_ilike: $searchTerm}}, {firstName: {_ilike: $searchTerm}}, {lastName: {_ilike: $searchTerm}}, {email: {_ilike: $searchTerm}}]}\n    limit: 5\n  ) {\n    ...UserMinimal\n  }\n  payrolls(\n    where: {client: {name: {_ilike: $searchTerm}}, supersededDate: {_isNull: true}}\n    limit: 5\n  ) {\n    ...PayrollMinimal\n    client {\n      ...ClientMinimal\n    }\n  }\n}\n\nquery GetFileById($id: uuid!) {\n  filesByPk(id: $id) {\n    id\n    filename\n    bucket\n    objectKey\n    size\n    mimetype\n    url\n    clientId\n    payrollId\n    uploadedBy\n    category\n    isPublic\n    metadata\n    fileType\n    createdAt\n    client {\n      name\n    }\n    payroll {\n      name\n    }\n    uploadedBy\n  }\n}\n\nquery ListFiles($where: FilesBoolExp, $limit: Int, $offset: Int, $orderBy: [FilesOrderBy!]) {\n  files(where: $where, limit: $limit, offset: $offset, orderBy: $orderBy) {\n    id\n    filename\n    bucket\n    objectKey\n    size\n    mimetype\n    url\n    clientId\n    payrollId\n    uploadedBy\n    category\n    isPublic\n    metadata\n    fileType\n    createdAt\n    client {\n      name\n    }\n    payroll {\n      name\n    }\n    uploadedBy\n  }\n  filesAggregate(where: $where) {\n    aggregate {\n      count\n    }\n  }\n}": types.GetDashboardMetricsDocument,
    "subscription RecentActivity($resourceTypes: [String!]) {\n  auditAuditLog(\n    where: {resourceType: {_in: $resourceTypes}, eventTime: {_gte: \"now() - interval '5 minutes'\"}}\n    orderBy: {eventTime: DESC}\n    limit: 20\n  ) {\n    ...AuditLogEntry\n  }\n}\n\nsubscription AuthenticationEvents($userId: uuid) {\n  auditAuthEvents(\n    where: {userId: {_eq: $userId}, eventTime: {_gte: \"now() - interval '10 minutes'\"}}\n    orderBy: {eventTime: DESC}\n  ) {\n    ...AuthEvent\n  }\n}\n\nsubscription SensitiveDataAccess($resourceTypes: [String!]!) {\n  auditDataAccessLog(\n    where: {resourceType: {_in: $resourceTypes}, accessedAt: {_gte: \"now() - interval '10 minutes'\"}}\n    orderBy: {accessedAt: DESC}\n  ) {\n    ...DataAccessLog\n  }\n}\n\nsubscription PermissionChangeStream {\n  auditPermissionChanges(orderBy: {changedAt: DESC}, limit: 10) {\n    ...PermissionChange\n  }\n}": types.RecentActivityDocument,
};

/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 *
 *
 * @example
 * ```ts
 * const query = gql(`query GetUser($id: ID!) { user(id: $id) { name } }`);
 * ```
 *
 * The query argument is unknown!
 * Please regenerate the types.
 */
export function gql(source: string): unknown;

/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "fragment AuthUserCore on Users {\n  id\n  firstName\n  lastName\n  computedName\n  email\n  role\n  isActive\n  clerkUserId\n  createdAt\n  updatedAt\n}\n\nfragment AuthUserWithRoles on Users {\n  ...AuthUserCore\n  roleAssignments {\n    id\n    roleId\n    role {\n      id\n      name\n      displayName\n      description\n      priority\n      isSystemRole\n    }\n  }\n}\n\nfragment AuthRoleCore on Roles {\n  id\n  name\n  displayName\n  description\n  priority\n  isSystemRole\n  createdAt\n  updatedAt\n}\n\nfragment AuthPermissionCore on Permissions {\n  id\n  resourceId\n  action\n  description\n  legacyPermissionName\n  createdAt\n  updatedAt\n}\n\nfragment AuthUserRoleWithDetails on UserRoles {\n  id\n  userId\n  roleId\n  createdAt\n  updatedAt\n  user {\n    id\n    firstName\n    lastName\n    computedName\n    email\n    isActive\n  }\n  role {\n    id\n    name\n    displayName\n    description\n    priority\n  }\n}\n\nfragment PermissionOverrideCore on PermissionOverrides {\n  id\n  userId\n  role\n  resource\n  operation\n  granted\n  conditions\n  createdBy\n  expiresAt\n  createdAt\n  updatedAt\n}\n\nfragment UserInvitationCore on UserInvitations {\n  id\n  email\n  firstName\n  lastName\n  invitedRole\n  managerId\n  clerkInvitationId\n  clerkTicket\n  invitationMetadata\n  invitedBy\n  invitedAt\n  acceptedAt\n  acceptedBy\n  expiresAt\n  invitationStatus\n  revokedAt\n  revokedBy\n  revokeReason\n  createdAt\n  updatedAt\n}\n\nfragment UserInvitationWithDetails on UserInvitations {\n  ...UserInvitationCore\n  invitedByUser {\n    id\n    firstName\n    lastName\n    computedName\n    email\n    role\n  }\n  managerUser {\n    id\n    firstName\n    lastName\n    computedName\n    email\n    role\n  }\n  acceptedByUser {\n    id\n    firstName\n    lastName\n    computedName\n    email\n    clerkUserId\n    isActive\n  }\n}"): (typeof documents)["fragment AuthUserCore on Users {\n  id\n  firstName\n  lastName\n  computedName\n  email\n  role\n  isActive\n  clerkUserId\n  createdAt\n  updatedAt\n}\n\nfragment AuthUserWithRoles on Users {\n  ...AuthUserCore\n  roleAssignments {\n    id\n    roleId\n    role {\n      id\n      name\n      displayName\n      description\n      priority\n      isSystemRole\n    }\n  }\n}\n\nfragment AuthRoleCore on Roles {\n  id\n  name\n  displayName\n  description\n  priority\n  isSystemRole\n  createdAt\n  updatedAt\n}\n\nfragment AuthPermissionCore on Permissions {\n  id\n  resourceId\n  action\n  description\n  legacyPermissionName\n  createdAt\n  updatedAt\n}\n\nfragment AuthUserRoleWithDetails on UserRoles {\n  id\n  userId\n  roleId\n  createdAt\n  updatedAt\n  user {\n    id\n    firstName\n    lastName\n    computedName\n    email\n    isActive\n  }\n  role {\n    id\n    name\n    displayName\n    description\n    priority\n  }\n}\n\nfragment PermissionOverrideCore on PermissionOverrides {\n  id\n  userId\n  role\n  resource\n  operation\n  granted\n  conditions\n  createdBy\n  expiresAt\n  createdAt\n  updatedAt\n}\n\nfragment UserInvitationCore on UserInvitations {\n  id\n  email\n  firstName\n  lastName\n  invitedRole\n  managerId\n  clerkInvitationId\n  clerkTicket\n  invitationMetadata\n  invitedBy\n  invitedAt\n  acceptedAt\n  acceptedBy\n  expiresAt\n  invitationStatus\n  revokedAt\n  revokedBy\n  revokeReason\n  createdAt\n  updatedAt\n}\n\nfragment UserInvitationWithDetails on UserInvitations {\n  ...UserInvitationCore\n  invitedByUser {\n    id\n    firstName\n    lastName\n    computedName\n    email\n    role\n  }\n  managerUser {\n    id\n    firstName\n    lastName\n    computedName\n    email\n    role\n  }\n  acceptedByUser {\n    id\n    firstName\n    lastName\n    computedName\n    email\n    clerkUserId\n    isActive\n  }\n}"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "mutation AssignRoleToUser($userId: uuid!, $roleId: uuid!) {\n  insertUserRoles(objects: [{userId: $userId, roleId: $roleId}]) {\n    returning {\n      id\n      userId\n      roleId\n      role {\n        name\n        displayName\n        priority\n      }\n    }\n  }\n}\n\nmutation RemoveRoleFromUser($userRoleId: uuid!) {\n  deleteUserRolesByPk(id: $userRoleId) {\n    id\n    roleId\n  }\n}\n\nmutation UpdateUserRoleAssignment($id: uuid!, $set: UserRolesSetInput!) {\n  updateUserRolesByPk(pkColumns: {id: $id}, _set: $set) {\n    id\n    userId\n    roleId\n    updatedAt\n  }\n}\n\nmutation SetUserRoles($userId: uuid!, $roleIds: [UserRolesInsertInput!]!) {\n  deleteUserRoles(where: {userId: {_eq: $userId}}) {\n    affectedRows\n  }\n  insertUserRoles(objects: $roleIds) {\n    returning {\n      id\n      userId\n      roleId\n      role {\n        name\n        displayName\n      }\n    }\n    affectedRows\n  }\n}\n\nmutation CreateUserPermissionOverride($userId: uuid!, $resource: String!, $operation: String!, $granted: Boolean!, $conditions: jsonb = null, $expiresAt: timestamptz = null, $reason: String = null) {\n  insertPermissionOverrides(\n    objects: [{userId: $userId, resource: $resource, operation: $operation, granted: $granted, conditions: $conditions, expiresAt: $expiresAt, reason: $reason}]\n  ) {\n    returning {\n      id\n      userId\n      resource\n      operation\n      granted\n      conditions\n      expiresAt\n      reason\n      createdAt\n    }\n  }\n}\n\nmutation UpdateUserPermissionOverride($id: uuid!, $set: PermissionOverridesSetInput!) {\n  updatePermissionOverridesByPk(pkColumns: {id: $id}, _set: $set) {\n    id\n    userId\n    resource\n    operation\n    granted\n    expiresAt\n    reason\n    updatedAt\n  }\n}\n\nmutation RemoveUserPermissionOverride($id: uuid!) {\n  deletePermissionOverridesByPk(id: $id) {\n    id\n    userId\n    resource\n    operation\n  }\n}\n\nmutation CreateUserInvitation($email: String!, $firstName: String!, $lastName: String!, $invitedRole: String!, $managerId: uuid, $clerkInvitationId: String, $clerkTicket: String, $invitationMetadata: jsonb, $invitedBy: uuid!, $expiresAt: timestamptz!) {\n  insertUserInvitations(\n    objects: [{email: $email, firstName: $firstName, lastName: $lastName, invitedRole: $invitedRole, managerId: $managerId, clerkInvitationId: $clerkInvitationId, clerkTicket: $clerkTicket, invitationMetadata: $invitationMetadata, invitedBy: $invitedBy, expiresAt: $expiresAt, invitationStatus: \"pending\"}]\n  ) {\n    returning {\n      ...UserInvitationDetail\n    }\n  }\n}\n\nmutation CompleteInvitationAcceptance($invitationId: uuid!, $clerkUserId: String!, $userEmail: String!, $firstName: String!, $lastName: String!) {\n  insertUsers(\n    objects: [{clerkUserId: $clerkUserId, email: $userEmail, firstName: $firstName, lastName: $lastName, isActive: true}]\n  ) {\n    returning {\n      id\n      email\n      firstName\n      lastName\n      computedName\n      clerkUserId\n      isActive\n      createdAt\n    }\n  }\n  updateUserInvitationsByPk(\n    pkColumns: {id: $invitationId}\n    _set: {invitationStatus: \"accepted\", acceptedAt: \"now()\", updatedAt: \"now()\"}\n  ) {\n    id\n    status\n    acceptedAt\n  }\n}\n\nmutation AssignInvitationRole($userId: uuid!, $roleId: uuid!, $invitationId: uuid!) {\n  insertUserRoles(objects: [{userId: $userId, roleId: $roleId}]) {\n    returning {\n      id\n      userId\n      roleId\n      role {\n        id\n        name\n        displayName\n      }\n    }\n  }\n}\n\nmutation CancelUserInvitation($invitationId: uuid!) {\n  updateUserInvitationsByPk(\n    pkColumns: {id: $invitationId}\n    _set: {invitationStatus: \"cancelled\", updatedAt: \"now()\"}\n  ) {\n    ...UserInvitationDetail\n  }\n}\n\nmutation ResendUserInvitation($invitationId: uuid!, $newExpiresAt: timestamptz!, $newClerkTicket: String, $newClerkInvitationId: String) {\n  updateUserInvitationsByPk(\n    pkColumns: {id: $invitationId}\n    _set: {expiresAt: $newExpiresAt, clerkTicket: $newClerkTicket, clerkInvitationId: $newClerkInvitationId, invitationStatus: \"pending\", updatedAt: \"now()\"}\n  ) {\n    ...UserInvitationDetail\n  }\n}\n\nmutation MarkExpiredInvitations {\n  updateUserInvitations(\n    where: {invitationStatus: {_eq: \"pending\"}, expiresAt: {_lt: \"now()\"}}\n    _set: {invitationStatus: \"expired\", updatedAt: \"now()\"}\n  ) {\n    affectedRows\n  }\n}\n\nmutation RevokeInvitation($invitationId: uuid!, $revokeReason: String!, $revokedBy: uuid!) {\n  updateUserInvitationsByPk(\n    pkColumns: {id: $invitationId}\n    _set: {invitationStatus: \"revoked\", revokedAt: \"now()\", revokedBy: $revokedBy, revokeReason: $revokeReason, updatedAt: \"now()\"}\n  ) {\n    ...UserInvitationCore\n  }\n}\n\nmutation ResendInvitationEnhanced($invitationId: uuid!, $newExpiresAt: timestamptz!, $newClerkTicket: String, $newClerkInvitationId: String) {\n  updateUserInvitationsByPk(\n    pkColumns: {id: $invitationId}\n    _set: {expiresAt: $newExpiresAt, clerkTicket: $newClerkTicket, clerkInvitationId: $newClerkInvitationId, invitationStatus: \"pending\", updatedAt: \"now()\"}\n  ) {\n    ...UserInvitationCore\n  }\n}\n\nmutation CreateInvitationEnhanced($email: String!, $firstName: String!, $lastName: String!, $invitedRole: String!, $managerId: uuid, $clerkInvitationId: String, $clerkTicket: String, $invitationMetadata: jsonb, $invitedBy: uuid!, $expiresAt: timestamptz!) {\n  insertUserInvitations(\n    objects: [{email: $email, firstName: $firstName, lastName: $lastName, invitedRole: $invitedRole, managerId: $managerId, clerkInvitationId: $clerkInvitationId, clerkTicket: $clerkTicket, invitationMetadata: $invitationMetadata, invitedBy: $invitedBy, expiresAt: $expiresAt}]\n  ) {\n    returning {\n      ...UserInvitationCore\n    }\n  }\n}\n\nmutation AcceptInvitationEnhanced($invitationId: uuid!, $acceptedBy: uuid!) {\n  updateUserInvitationsByPk(\n    pkColumns: {id: $invitationId}\n    _set: {invitationStatus: \"accepted\", acceptedAt: \"now()\", acceptedBy: $acceptedBy, updatedAt: \"now()\"}\n  ) {\n    ...UserInvitationCore\n  }\n}\n\nmutation BulkRevokeInvitations($invitationIds: [uuid!]!, $revokeReason: String!, $revokedBy: uuid!) {\n  updateUserInvitations(\n    where: {id: {_in: $invitationIds}}\n    _set: {invitationStatus: \"revoked\", revokedAt: \"now()\", revokedBy: $revokedBy, revokeReason: $revokeReason, updatedAt: \"now()\"}\n  ) {\n    returning {\n      ...UserInvitationCore\n    }\n    affectedRows\n  }\n}\n\nmutation DeactivateUser($userId: uuid!, $reason: String!, $deactivatedBy: uuid!, $deactivatedByString: String!) {\n  updateUsersByPk(\n    pkColumns: {id: $userId}\n    _set: {status: \"inactive\", isActive: false, deactivatedAt: \"now()\", deactivatedBy: $deactivatedByString, statusChangeReason: $reason, statusChangedAt: \"now()\", statusChangedBy: $deactivatedBy, updatedAt: \"now()\"}\n  ) {\n    id\n    email\n    firstName\n    lastName\n    computedName\n    status\n    isActive\n    deactivatedAt\n    deactivatedBy\n    statusChangeReason\n    statusChangedAt\n    statusChangedBy\n  }\n}\n\nmutation LockUser($userId: uuid!, $reason: String!, $lockedBy: uuid!) {\n  updateUsersByPk(\n    pkColumns: {id: $userId}\n    _set: {status: \"locked\", isActive: false, statusChangeReason: $reason, statusChangedAt: \"now()\", statusChangedBy: $lockedBy, updatedAt: \"now()\"}\n  ) {\n    id\n    email\n    firstName\n    lastName\n    computedName\n    status\n    isActive\n    statusChangeReason\n    statusChangedAt\n    statusChangedBy\n  }\n}\n\nmutation UnlockUser($userId: uuid!, $reason: String!, $unlockedBy: uuid!) {\n  updateUsersByPk(\n    pkColumns: {id: $userId}\n    _set: {status: \"active\", isActive: true, statusChangeReason: $reason, statusChangedAt: \"now()\", statusChangedBy: $unlockedBy, updatedAt: \"now()\"}\n  ) {\n    id\n    email\n    firstName\n    lastName\n    computedName\n    status\n    isActive\n    statusChangeReason\n    statusChangedAt\n    statusChangedBy\n  }\n}\n\nmutation ReactivateUser($userId: uuid!, $reason: String!, $reactivatedBy: uuid!) {\n  updateUsersByPk(\n    pkColumns: {id: $userId}\n    _set: {status: \"active\", isActive: true, deactivatedAt: null, deactivatedBy: null, statusChangeReason: $reason, statusChangedAt: \"now()\", statusChangedBy: $reactivatedBy, updatedAt: \"now()\"}\n  ) {\n    id\n    email\n    firstName\n    lastName\n    computedName\n    status\n    isActive\n    deactivatedAt\n    deactivatedBy\n    statusChangeReason\n    statusChangedAt\n    statusChangedBy\n  }\n}\n\nmutation BulkChangeUserStatus($userIds: [uuid!]!, $newStatus: user_status_enum!, $reason: String!, $changedBy: uuid!, $setInactive: Boolean! = false) {\n  updateUsers(\n    where: {id: {_in: $userIds}}\n    _set: {status: $newStatus, isActive: $setInactive, statusChangeReason: $reason, statusChangedAt: \"now()\", statusChangedBy: $changedBy, updatedAt: \"now()\"}\n  ) {\n    returning {\n      id\n      email\n      firstName\n      lastName\n      computedName\n      status\n      isActive\n      statusChangeReason\n      statusChangedAt\n      statusChangedBy\n    }\n    affectedRows\n  }\n}\n\nmutation UpdateUserStatus($userId: uuid!, $newStatus: user_status_enum!, $reason: String!, $changedBy: uuid!, $metadata: jsonb = null) {\n  updateUsersByPk(\n    pkColumns: {id: $userId}\n    _set: {status: $newStatus, isActive: true, statusChangeReason: $reason, statusChangedAt: \"now()\", statusChangedBy: $changedBy, updatedAt: \"now()\"}\n  ) {\n    id\n    email\n    firstName\n    lastName\n    computedName\n    status\n    isActive\n    role\n    statusChangeReason\n    statusChangedAt\n    statusChangedBy\n    deactivatedAt\n    deactivatedBy\n    createdAt\n    updatedAt\n  }\n}\n\nmutation DeleteExpiredInvitation($invitationId: uuid!) {\n  deleteUserInvitationsByPk(id: $invitationId) {\n    id\n    email\n    invitationStatus\n    expiresAt\n  }\n}\n\nmutation DeleteUser($userId: uuid!) {\n  deleteUsersByPk(id: $userId) {\n    id\n    email\n    firstName\n    lastName\n    role\n    createdAt\n  }\n}\n\nmutation BulkDeleteExpiredInvitations($invitationIds: [uuid!]!) {\n  deleteUserInvitations(where: {id: {_in: $invitationIds}}) {\n    affectedRows\n    returning {\n      id\n      email\n      invitationStatus\n      expiresAt\n    }\n  }\n}\n\nmutation BulkDeleteOrphanedUsers($userIds: [uuid!]!) {\n  deleteUsers(where: {id: {_in: $userIds}}) {\n    affectedRows\n    returning {\n      id\n      email\n      firstName\n      lastName\n      role\n      createdAt\n    }\n  }\n}"): (typeof documents)["mutation AssignRoleToUser($userId: uuid!, $roleId: uuid!) {\n  insertUserRoles(objects: [{userId: $userId, roleId: $roleId}]) {\n    returning {\n      id\n      userId\n      roleId\n      role {\n        name\n        displayName\n        priority\n      }\n    }\n  }\n}\n\nmutation RemoveRoleFromUser($userRoleId: uuid!) {\n  deleteUserRolesByPk(id: $userRoleId) {\n    id\n    roleId\n  }\n}\n\nmutation UpdateUserRoleAssignment($id: uuid!, $set: UserRolesSetInput!) {\n  updateUserRolesByPk(pkColumns: {id: $id}, _set: $set) {\n    id\n    userId\n    roleId\n    updatedAt\n  }\n}\n\nmutation SetUserRoles($userId: uuid!, $roleIds: [UserRolesInsertInput!]!) {\n  deleteUserRoles(where: {userId: {_eq: $userId}}) {\n    affectedRows\n  }\n  insertUserRoles(objects: $roleIds) {\n    returning {\n      id\n      userId\n      roleId\n      role {\n        name\n        displayName\n      }\n    }\n    affectedRows\n  }\n}\n\nmutation CreateUserPermissionOverride($userId: uuid!, $resource: String!, $operation: String!, $granted: Boolean!, $conditions: jsonb = null, $expiresAt: timestamptz = null, $reason: String = null) {\n  insertPermissionOverrides(\n    objects: [{userId: $userId, resource: $resource, operation: $operation, granted: $granted, conditions: $conditions, expiresAt: $expiresAt, reason: $reason}]\n  ) {\n    returning {\n      id\n      userId\n      resource\n      operation\n      granted\n      conditions\n      expiresAt\n      reason\n      createdAt\n    }\n  }\n}\n\nmutation UpdateUserPermissionOverride($id: uuid!, $set: PermissionOverridesSetInput!) {\n  updatePermissionOverridesByPk(pkColumns: {id: $id}, _set: $set) {\n    id\n    userId\n    resource\n    operation\n    granted\n    expiresAt\n    reason\n    updatedAt\n  }\n}\n\nmutation RemoveUserPermissionOverride($id: uuid!) {\n  deletePermissionOverridesByPk(id: $id) {\n    id\n    userId\n    resource\n    operation\n  }\n}\n\nmutation CreateUserInvitation($email: String!, $firstName: String!, $lastName: String!, $invitedRole: String!, $managerId: uuid, $clerkInvitationId: String, $clerkTicket: String, $invitationMetadata: jsonb, $invitedBy: uuid!, $expiresAt: timestamptz!) {\n  insertUserInvitations(\n    objects: [{email: $email, firstName: $firstName, lastName: $lastName, invitedRole: $invitedRole, managerId: $managerId, clerkInvitationId: $clerkInvitationId, clerkTicket: $clerkTicket, invitationMetadata: $invitationMetadata, invitedBy: $invitedBy, expiresAt: $expiresAt, invitationStatus: \"pending\"}]\n  ) {\n    returning {\n      ...UserInvitationDetail\n    }\n  }\n}\n\nmutation CompleteInvitationAcceptance($invitationId: uuid!, $clerkUserId: String!, $userEmail: String!, $firstName: String!, $lastName: String!) {\n  insertUsers(\n    objects: [{clerkUserId: $clerkUserId, email: $userEmail, firstName: $firstName, lastName: $lastName, isActive: true}]\n  ) {\n    returning {\n      id\n      email\n      firstName\n      lastName\n      computedName\n      clerkUserId\n      isActive\n      createdAt\n    }\n  }\n  updateUserInvitationsByPk(\n    pkColumns: {id: $invitationId}\n    _set: {invitationStatus: \"accepted\", acceptedAt: \"now()\", updatedAt: \"now()\"}\n  ) {\n    id\n    status\n    acceptedAt\n  }\n}\n\nmutation AssignInvitationRole($userId: uuid!, $roleId: uuid!, $invitationId: uuid!) {\n  insertUserRoles(objects: [{userId: $userId, roleId: $roleId}]) {\n    returning {\n      id\n      userId\n      roleId\n      role {\n        id\n        name\n        displayName\n      }\n    }\n  }\n}\n\nmutation CancelUserInvitation($invitationId: uuid!) {\n  updateUserInvitationsByPk(\n    pkColumns: {id: $invitationId}\n    _set: {invitationStatus: \"cancelled\", updatedAt: \"now()\"}\n  ) {\n    ...UserInvitationDetail\n  }\n}\n\nmutation ResendUserInvitation($invitationId: uuid!, $newExpiresAt: timestamptz!, $newClerkTicket: String, $newClerkInvitationId: String) {\n  updateUserInvitationsByPk(\n    pkColumns: {id: $invitationId}\n    _set: {expiresAt: $newExpiresAt, clerkTicket: $newClerkTicket, clerkInvitationId: $newClerkInvitationId, invitationStatus: \"pending\", updatedAt: \"now()\"}\n  ) {\n    ...UserInvitationDetail\n  }\n}\n\nmutation MarkExpiredInvitations {\n  updateUserInvitations(\n    where: {invitationStatus: {_eq: \"pending\"}, expiresAt: {_lt: \"now()\"}}\n    _set: {invitationStatus: \"expired\", updatedAt: \"now()\"}\n  ) {\n    affectedRows\n  }\n}\n\nmutation RevokeInvitation($invitationId: uuid!, $revokeReason: String!, $revokedBy: uuid!) {\n  updateUserInvitationsByPk(\n    pkColumns: {id: $invitationId}\n    _set: {invitationStatus: \"revoked\", revokedAt: \"now()\", revokedBy: $revokedBy, revokeReason: $revokeReason, updatedAt: \"now()\"}\n  ) {\n    ...UserInvitationCore\n  }\n}\n\nmutation ResendInvitationEnhanced($invitationId: uuid!, $newExpiresAt: timestamptz!, $newClerkTicket: String, $newClerkInvitationId: String) {\n  updateUserInvitationsByPk(\n    pkColumns: {id: $invitationId}\n    _set: {expiresAt: $newExpiresAt, clerkTicket: $newClerkTicket, clerkInvitationId: $newClerkInvitationId, invitationStatus: \"pending\", updatedAt: \"now()\"}\n  ) {\n    ...UserInvitationCore\n  }\n}\n\nmutation CreateInvitationEnhanced($email: String!, $firstName: String!, $lastName: String!, $invitedRole: String!, $managerId: uuid, $clerkInvitationId: String, $clerkTicket: String, $invitationMetadata: jsonb, $invitedBy: uuid!, $expiresAt: timestamptz!) {\n  insertUserInvitations(\n    objects: [{email: $email, firstName: $firstName, lastName: $lastName, invitedRole: $invitedRole, managerId: $managerId, clerkInvitationId: $clerkInvitationId, clerkTicket: $clerkTicket, invitationMetadata: $invitationMetadata, invitedBy: $invitedBy, expiresAt: $expiresAt}]\n  ) {\n    returning {\n      ...UserInvitationCore\n    }\n  }\n}\n\nmutation AcceptInvitationEnhanced($invitationId: uuid!, $acceptedBy: uuid!) {\n  updateUserInvitationsByPk(\n    pkColumns: {id: $invitationId}\n    _set: {invitationStatus: \"accepted\", acceptedAt: \"now()\", acceptedBy: $acceptedBy, updatedAt: \"now()\"}\n  ) {\n    ...UserInvitationCore\n  }\n}\n\nmutation BulkRevokeInvitations($invitationIds: [uuid!]!, $revokeReason: String!, $revokedBy: uuid!) {\n  updateUserInvitations(\n    where: {id: {_in: $invitationIds}}\n    _set: {invitationStatus: \"revoked\", revokedAt: \"now()\", revokedBy: $revokedBy, revokeReason: $revokeReason, updatedAt: \"now()\"}\n  ) {\n    returning {\n      ...UserInvitationCore\n    }\n    affectedRows\n  }\n}\n\nmutation DeactivateUser($userId: uuid!, $reason: String!, $deactivatedBy: uuid!, $deactivatedByString: String!) {\n  updateUsersByPk(\n    pkColumns: {id: $userId}\n    _set: {status: \"inactive\", isActive: false, deactivatedAt: \"now()\", deactivatedBy: $deactivatedByString, statusChangeReason: $reason, statusChangedAt: \"now()\", statusChangedBy: $deactivatedBy, updatedAt: \"now()\"}\n  ) {\n    id\n    email\n    firstName\n    lastName\n    computedName\n    status\n    isActive\n    deactivatedAt\n    deactivatedBy\n    statusChangeReason\n    statusChangedAt\n    statusChangedBy\n  }\n}\n\nmutation LockUser($userId: uuid!, $reason: String!, $lockedBy: uuid!) {\n  updateUsersByPk(\n    pkColumns: {id: $userId}\n    _set: {status: \"locked\", isActive: false, statusChangeReason: $reason, statusChangedAt: \"now()\", statusChangedBy: $lockedBy, updatedAt: \"now()\"}\n  ) {\n    id\n    email\n    firstName\n    lastName\n    computedName\n    status\n    isActive\n    statusChangeReason\n    statusChangedAt\n    statusChangedBy\n  }\n}\n\nmutation UnlockUser($userId: uuid!, $reason: String!, $unlockedBy: uuid!) {\n  updateUsersByPk(\n    pkColumns: {id: $userId}\n    _set: {status: \"active\", isActive: true, statusChangeReason: $reason, statusChangedAt: \"now()\", statusChangedBy: $unlockedBy, updatedAt: \"now()\"}\n  ) {\n    id\n    email\n    firstName\n    lastName\n    computedName\n    status\n    isActive\n    statusChangeReason\n    statusChangedAt\n    statusChangedBy\n  }\n}\n\nmutation ReactivateUser($userId: uuid!, $reason: String!, $reactivatedBy: uuid!) {\n  updateUsersByPk(\n    pkColumns: {id: $userId}\n    _set: {status: \"active\", isActive: true, deactivatedAt: null, deactivatedBy: null, statusChangeReason: $reason, statusChangedAt: \"now()\", statusChangedBy: $reactivatedBy, updatedAt: \"now()\"}\n  ) {\n    id\n    email\n    firstName\n    lastName\n    computedName\n    status\n    isActive\n    deactivatedAt\n    deactivatedBy\n    statusChangeReason\n    statusChangedAt\n    statusChangedBy\n  }\n}\n\nmutation BulkChangeUserStatus($userIds: [uuid!]!, $newStatus: user_status_enum!, $reason: String!, $changedBy: uuid!, $setInactive: Boolean! = false) {\n  updateUsers(\n    where: {id: {_in: $userIds}}\n    _set: {status: $newStatus, isActive: $setInactive, statusChangeReason: $reason, statusChangedAt: \"now()\", statusChangedBy: $changedBy, updatedAt: \"now()\"}\n  ) {\n    returning {\n      id\n      email\n      firstName\n      lastName\n      computedName\n      status\n      isActive\n      statusChangeReason\n      statusChangedAt\n      statusChangedBy\n    }\n    affectedRows\n  }\n}\n\nmutation UpdateUserStatus($userId: uuid!, $newStatus: user_status_enum!, $reason: String!, $changedBy: uuid!, $metadata: jsonb = null) {\n  updateUsersByPk(\n    pkColumns: {id: $userId}\n    _set: {status: $newStatus, isActive: true, statusChangeReason: $reason, statusChangedAt: \"now()\", statusChangedBy: $changedBy, updatedAt: \"now()\"}\n  ) {\n    id\n    email\n    firstName\n    lastName\n    computedName\n    status\n    isActive\n    role\n    statusChangeReason\n    statusChangedAt\n    statusChangedBy\n    deactivatedAt\n    deactivatedBy\n    createdAt\n    updatedAt\n  }\n}\n\nmutation DeleteExpiredInvitation($invitationId: uuid!) {\n  deleteUserInvitationsByPk(id: $invitationId) {\n    id\n    email\n    invitationStatus\n    expiresAt\n  }\n}\n\nmutation DeleteUser($userId: uuid!) {\n  deleteUsersByPk(id: $userId) {\n    id\n    email\n    firstName\n    lastName\n    role\n    createdAt\n  }\n}\n\nmutation BulkDeleteExpiredInvitations($invitationIds: [uuid!]!) {\n  deleteUserInvitations(where: {id: {_in: $invitationIds}}) {\n    affectedRows\n    returning {\n      id\n      email\n      invitationStatus\n      expiresAt\n    }\n  }\n}\n\nmutation BulkDeleteOrphanedUsers($userIds: [uuid!]!) {\n  deleteUsers(where: {id: {_in: $userIds}}) {\n    affectedRows\n    returning {\n      id\n      email\n      firstName\n      lastName\n      role\n      createdAt\n    }\n  }\n}"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "query GetCurrentUserRoles {\n  users(limit: 1) {\n    id\n    email\n    isActive\n    isStaff\n    roleAssignments {\n      role {\n        id\n        name\n        displayName\n        description\n        priority\n        isSystemRole\n        rolePermissions {\n          permission {\n            id\n            action\n            description\n            resource {\n              id\n              name\n              displayName\n              description\n            }\n          }\n          conditions\n        }\n      }\n    }\n  }\n}\n\nquery GetAllRoles {\n  roles(orderBy: {priority: DESC}) {\n    id\n    name\n    displayName\n    description\n    priority\n    isSystemRole\n    rolePermissions {\n      id\n      conditions\n      permission {\n        id\n        action\n        description\n        resource {\n          id\n          name\n          displayName\n          description\n        }\n      }\n    }\n  }\n}\n\nquery GetResourcesAndPermissions {\n  resources(orderBy: {name: ASC}) {\n    id\n    name\n    displayName\n    description\n    permissions {\n      id\n      action\n      description\n    }\n  }\n}\n\nquery GetUsersWithRoles($limit: Int = 50, $offset: Int = 0) {\n  users(limit: $limit, offset: $offset, orderBy: {createdAt: DESC}) {\n    id\n    email\n    isActive\n    isStaff\n    roleAssignments {\n      id\n      role {\n        id\n        name\n        displayName\n        priority\n      }\n    }\n  }\n}\n\nquery GetUserPermissionOverrides($userId: uuid!) {\n  permissionOverrides(where: {userId: {_eq: $userId}}, orderBy: {createdAt: DESC}) {\n    id\n    resource\n    operation\n    granted\n    conditions\n    expiresAt\n  }\n}\n\nquery GetRolePermissionOverrides($roleName: String!) {\n  permissionOverrides(where: {role: {_eq: $roleName}}, orderBy: {createdAt: DESC}) {\n    id\n    resource\n    operation\n    granted\n    conditions\n    expiresAt\n  }\n}\n\nquery SearchUsersByEmail($emailPattern: String!) {\n  users(where: {email: {_ilike: $emailPattern}}, limit: 10, orderBy: {email: ASC}) {\n    id\n    email\n    isActive\n    roleAssignments {\n      role {\n        name\n        displayName\n      }\n    }\n  }\n}\n\nquery GetRoleHierarchy {\n  roles(orderBy: {priority: DESC}) {\n    id\n    name\n    displayName\n    description\n    priority\n    isSystemRole\n    rolePermissionsAggregate {\n      aggregate {\n        count\n      }\n    }\n    userRolesAggregate {\n      aggregate {\n        count\n      }\n    }\n  }\n}\n\nquery GetPermissionAuditLogs($limit: Int = 50, $offset: Int = 0, $startDate: timestamptz, $endDate: timestamptz) {\n  auditPermissionChanges(\n    where: {changedAt: {_gte: $startDate, _lte: $endDate}}\n    orderBy: {changedAt: DESC}\n    limit: $limit\n    offset: $offset\n  ) {\n    id\n    targetUserId\n    changedByUserId\n    changeType\n    reason\n    oldPermissions\n    newPermissions\n    changedAt\n  }\n}\n\nquery GetPendingInvitations($limit: Int = 50, $offset: Int = 0, $now: timestamptz!) {\n  userInvitations(\n    where: {invitationStatus: {_eq: \"pending\"}, expiresAt: {_gt: $now}}\n    orderBy: {createdAt: DESC}\n    limit: $limit\n    offset: $offset\n  ) {\n    ...UserInvitationCore\n  }\n}\n\nquery GetInvitationByTicket($clerkTicket: String!) {\n  userInvitations(where: {clerkTicket: {_eq: $clerkTicket}}, limit: 1) {\n    ...UserInvitationWithDetails\n  }\n}\n\nquery GetInvitationByClerkId($clerkInvitationId: String!) {\n  userInvitations(where: {clerkInvitationId: {_eq: $clerkInvitationId}}, limit: 1) {\n    ...UserInvitationWithDetails\n  }\n}\n\nquery GetInvitationHistory($email: String!, $limit: Int = 10) {\n  userInvitations(\n    where: {email: {_eq: $email}}\n    orderBy: {invitedAt: DESC}\n    limit: $limit\n  ) {\n    id\n    email\n    firstName\n    lastName\n    invitedRole\n    invitationStatus\n    invitedAt\n    acceptedAt\n    expiresAt\n    invitedByUser {\n      ...UserMinimal\n    }\n    acceptedByUser {\n      ...UserMinimal\n      clerkUserId\n    }\n  }\n}\n\nquery GetInvitationsBySender($invitedBy: uuid!, $limit: Int = 50) {\n  userInvitations(\n    where: {invitedBy: {_eq: $invitedBy}}\n    orderBy: {invitedAt: DESC}\n    limit: $limit\n  ) {\n    id\n    email\n    firstName\n    lastName\n    invitedRole\n    invitationStatus\n    invitedAt\n    acceptedAt\n    expiresAt\n    acceptedByUser {\n      firstName\n      lastName\n      computedName\n      email\n    }\n  }\n}\n\nquery GetExpiredInvitations($now: timestamptz!) {\n  userInvitations(\n    where: {_or: [{invitationStatus: {_eq: \"expired\"}}, {expiresAt: {_lt: $now}}]}\n    orderBy: {expiresAt: DESC}\n  ) {\n    ...UserInvitationWithDetails\n  }\n}\n\nquery ValidateInvitationRolePermissions($invitedRole: String!, $invitedBy: uuid!) {\n  users(where: {id: {_eq: $invitedBy}}) {\n    id\n    role\n    roleAssignments {\n      role {\n        name\n        priority\n        rolePermissions {\n          permission {\n            action\n            resource {\n              name\n            }\n          }\n        }\n      }\n    }\n  }\n  roles(where: {name: {_eq: $invitedRole}}) {\n    id\n    name\n    priority\n    isSystemRole\n  }\n}\n\nquery GetInvitationById($invitationId: uuid!) {\n  userInvitationsByPk(id: $invitationId) {\n    ...UserInvitationWithDetails\n  }\n}\n\nquery GetResendableInvitations($invitedBy: uuid!, $limit: Int = 50) {\n  userInvitations(\n    where: {invitedBy: {_eq: $invitedBy}, invitationStatus: {_in: [\"pending\", \"expired\"]}}\n    orderBy: {invitedAt: DESC}\n    limit: $limit\n  ) {\n    ...UserInvitationCore\n  }\n}\n\nquery GetInvitationsWithStatus($statuses: [invitation_status_enum!], $limit: Int = 50, $offset: Int = 0, $orderBy: [UserInvitationsOrderBy!] = [{createdAt: DESC}]) {\n  userInvitations(\n    where: {invitationStatus: {_in: $statuses}}\n    orderBy: $orderBy\n    limit: $limit\n    offset: $offset\n  ) {\n    ...UserInvitationWithDetails\n  }\n  userInvitationsAggregate(where: {invitationStatus: {_in: $statuses}}) {\n    aggregate {\n      count\n    }\n  }\n}\n\nquery GetInvitationDashboardStats($now: timestamptz!, $sevenDaysFromNow: timestamptz!) {\n  pending: userInvitationsAggregate(\n    where: {invitationStatus: {_eq: \"pending\"}, expiresAt: {_gt: $now}}\n  ) {\n    aggregate {\n      count\n    }\n  }\n  expired: userInvitationsAggregate(where: {invitationStatus: {_eq: \"expired\"}}) {\n    aggregate {\n      count\n    }\n  }\n  accepted: userInvitationsAggregate(where: {invitationStatus: {_eq: \"accepted\"}}) {\n    aggregate {\n      count\n    }\n  }\n  revoked: userInvitationsAggregate(where: {invitationStatus: {_eq: \"revoked\"}}) {\n    aggregate {\n      count\n    }\n  }\n  expiringSoon: userInvitationsAggregate(\n    where: {invitationStatus: {_eq: \"pending\"}, expiresAt: {_gt: $now, _lt: $sevenDaysFromNow}}\n  ) {\n    aggregate {\n      count\n    }\n  }\n  recentInvitations: userInvitations(orderBy: {createdAt: DESC}, limit: 10) {\n    id\n    email\n    firstName\n    lastName\n    invitedRole\n    invitationStatus\n    createdAt\n    expiresAt\n    invitedByUser {\n      id\n      firstName\n      lastName\n      computedName\n      email\n    }\n  }\n}\n\nquery GetRevokedInvitations($limit: Int = 50, $offset: Int = 0) {\n  userInvitations(\n    where: {invitationStatus: {_eq: \"revoked\"}}\n    orderBy: {revokedAt: DESC}\n    limit: $limit\n    offset: $offset\n  ) {\n    ...UserInvitationCore\n  }\n}\n\nquery GetInvitationAuditHistory($email: String, $invitedBy: uuid, $startDate: timestamptz, $endDate: timestamptz, $limit: Int = 100) {\n  userInvitations(\n    where: {_and: [{email: {_eq: $email}}, {invitedBy: {_eq: $invitedBy}}, {createdAt: {_gte: $startDate}}, {createdAt: {_lte: $endDate}}]}\n    orderBy: {createdAt: DESC}\n    limit: $limit\n  ) {\n    ...UserInvitationWithDetails\n  }\n}\n\nquery GetExpiringInvitations($now: timestamptz!, $futureDate: timestamptz!) {\n  userInvitations(\n    where: {invitationStatus: {_eq: \"pending\"}, expiresAt: {_gt: $now, _lt: $futureDate}}\n    orderBy: {expiresAt: ASC}\n  ) {\n    ...UserInvitationWithDetails\n  }\n}\n\nquery SearchInvitations($searchTerm: String!, $limit: Int = 20) {\n  userInvitations(\n    where: {_or: [{email: {_ilike: $searchTerm}}, {firstName: {_ilike: $searchTerm}}, {lastName: {_ilike: $searchTerm}}]}\n    orderBy: {createdAt: DESC}\n    limit: $limit\n  ) {\n    ...UserInvitationWithDetails\n  }\n}\n\nquery GetInvitationByIdDetailed($invitationId: uuid!) {\n  userInvitationsByPk(id: $invitationId) {\n    ...UserInvitationWithDetails\n  }\n}\n\nquery GetUsersByStatus($statuses: [user_status_enum!], $limit: Int = 50, $offset: Int = 0, $orderBy: [UsersOrderBy!] = [{updatedAt: DESC}]) {\n  users(\n    where: {status: {_in: $statuses}}\n    orderBy: $orderBy\n    limit: $limit\n    offset: $offset\n  ) {\n    id\n    email\n    firstName\n    lastName\n    computedName\n    role\n    status\n    isActive\n    isStaff\n    statusChangedAt\n    statusChangedBy\n    statusChangeReason\n    deactivatedAt\n    deactivatedBy\n    createdAt\n    updatedAt\n  }\n  usersAggregate(where: {status: {_in: $statuses}}) {\n    aggregate {\n      count\n    }\n  }\n}\n\nquery GetUserStatusDashboardStats($thirtyDaysAgo: timestamptz = \"2024-01-01T00:00:00Z\") {\n  active: usersAggregate(where: {status: {_eq: \"active\"}}) {\n    aggregate {\n      count\n    }\n  }\n  inactive: usersAggregate(where: {status: {_eq: \"inactive\"}}) {\n    aggregate {\n      count\n    }\n  }\n  locked: usersAggregate(where: {status: {_eq: \"locked\"}}) {\n    aggregate {\n      count\n    }\n  }\n  pending: usersAggregate(where: {status: {_eq: \"pending\"}}) {\n    aggregate {\n      count\n    }\n  }\n  recentStatusChanges: users(\n    where: {statusChangedAt: {_gte: $thirtyDaysAgo}}\n    orderBy: {statusChangedAt: DESC}\n    limit: 10\n  ) {\n    id\n    email\n    firstName\n    lastName\n    computedName\n    role\n    status\n    statusChangedAt\n    statusChangeReason\n  }\n  staff: usersAggregate(where: {isStaff: {_eq: true}}) {\n    aggregate {\n      count\n    }\n  }\n  byRole: users {\n    role\n  }\n}\n\nquery GetUsersRequiringAttention($limit: Int = 20) {\n  locked: users(\n    where: {status: {_eq: \"locked\"}}\n    orderBy: {statusChangedAt: DESC}\n    limit: $limit\n  ) {\n    id\n    email\n    firstName\n    lastName\n    computedName\n    role\n    status\n    statusChangedAt\n    statusChangeReason\n  }\n  inactive: users(\n    where: {status: {_eq: \"inactive\"}}\n    orderBy: {deactivatedAt: DESC}\n    limit: $limit\n  ) {\n    id\n    email\n    firstName\n    lastName\n    computedName\n    role\n    status\n    deactivatedAt\n    statusChangeReason\n  }\n  pending: users(\n    where: {status: {_eq: \"pending\"}}\n    orderBy: {createdAt: DESC}\n    limit: $limit\n  ) {\n    id\n    email\n    firstName\n    lastName\n    computedName\n    role\n    status\n    createdAt\n  }\n}\n\nquery GetUserStatusHistory($userId: uuid!, $startDate: timestamptz, $endDate: timestamptz, $limit: Int = 50) {\n  user: usersByPk(id: $userId) {\n    id\n    email\n    firstName\n    lastName\n    computedName\n    role\n    status\n    isActive\n    statusChangedAt\n    statusChangedBy\n    statusChangeReason\n    deactivatedAt\n    deactivatedBy\n    createdAt\n    updatedAt\n  }\n}\n\nquery SearchUsersAdvanced($searchTerm: String, $statuses: [user_status_enum!], $roles: [user_role!], $isStaff: Boolean, $limit: Int = 20) {\n  users(\n    where: {_and: [{_or: [{email: {_ilike: \"%${searchTerm}%\"}}, {computedName: {_ilike: \"%${searchTerm}%\"}}]}, {status: {_in: $statuses}}, {role: {_in: $roles}}, {isStaff: {_eq: $isStaff}}]}\n    orderBy: {updatedAt: DESC}\n    limit: $limit\n  ) {\n    id\n    email\n    firstName\n    lastName\n    computedName\n    role\n    status\n    isActive\n    isStaff\n    statusChangedAt\n    statusChangeReason\n    deactivatedAt\n    createdAt\n  }\n}\n\nquery GetUserWithStatusDetails($userId: uuid!) {\n  usersByPk(id: $userId) {\n    id\n    email\n    firstName\n    lastName\n    computedName\n    role\n    status\n    isActive\n    isStaff\n    clerkUserId\n    statusChangedAt\n    statusChangedBy\n    statusChangeReason\n    deactivatedAt\n    deactivatedBy\n    createdAt\n    updatedAt\n  }\n}\n\nquery GetOrphanedInvitations {\n  userInvitations(\n    where: {invitationStatus: {_eq: \"accepted\"}}\n    orderBy: {createdAt: DESC}\n  ) {\n    id\n    email\n    firstName\n    lastName\n    invitationStatus\n    acceptedBy\n    createdAt\n    invitedBy\n    invitedByUser {\n      id\n      firstName\n      lastName\n      email\n    }\n  }\n}\n\nquery GetUsersWithoutClerkId {\n  users(\n    where: {_or: [{clerkUserId: {_isNull: true}}, {clerkUserId: {_eq: \"\"}}]}\n    orderBy: {createdAt: DESC}\n  ) {\n    id\n    email\n    firstName\n    lastName\n    role\n    createdAt\n    updatedAt\n    isActive\n  }\n}\n\nquery GetExpiredInvitationsForCleanup {\n  userInvitations(\n    where: {_or: [{invitationStatus: {_eq: \"expired\"}}, {expiresAt: {_lt: \"now()\"}}]}\n    orderBy: {expiresAt: DESC}\n  ) {\n    id\n    email\n    firstName\n    lastName\n    invitationStatus\n    expiresAt\n    createdAt\n    clerkInvitationId\n  }\n}\n\nfragment UserInvitationDetail on UserInvitations {\n  id\n  email\n  firstName\n  lastName\n  invitedRole\n  managerId\n  clerkInvitationId\n  clerkTicket\n  invitationMetadata\n  invitedBy\n  invitationStatus\n  expiresAt\n  createdAt\n  updatedAt\n}"): (typeof documents)["query GetCurrentUserRoles {\n  users(limit: 1) {\n    id\n    email\n    isActive\n    isStaff\n    roleAssignments {\n      role {\n        id\n        name\n        displayName\n        description\n        priority\n        isSystemRole\n        rolePermissions {\n          permission {\n            id\n            action\n            description\n            resource {\n              id\n              name\n              displayName\n              description\n            }\n          }\n          conditions\n        }\n      }\n    }\n  }\n}\n\nquery GetAllRoles {\n  roles(orderBy: {priority: DESC}) {\n    id\n    name\n    displayName\n    description\n    priority\n    isSystemRole\n    rolePermissions {\n      id\n      conditions\n      permission {\n        id\n        action\n        description\n        resource {\n          id\n          name\n          displayName\n          description\n        }\n      }\n    }\n  }\n}\n\nquery GetResourcesAndPermissions {\n  resources(orderBy: {name: ASC}) {\n    id\n    name\n    displayName\n    description\n    permissions {\n      id\n      action\n      description\n    }\n  }\n}\n\nquery GetUsersWithRoles($limit: Int = 50, $offset: Int = 0) {\n  users(limit: $limit, offset: $offset, orderBy: {createdAt: DESC}) {\n    id\n    email\n    isActive\n    isStaff\n    roleAssignments {\n      id\n      role {\n        id\n        name\n        displayName\n        priority\n      }\n    }\n  }\n}\n\nquery GetUserPermissionOverrides($userId: uuid!) {\n  permissionOverrides(where: {userId: {_eq: $userId}}, orderBy: {createdAt: DESC}) {\n    id\n    resource\n    operation\n    granted\n    conditions\n    expiresAt\n  }\n}\n\nquery GetRolePermissionOverrides($roleName: String!) {\n  permissionOverrides(where: {role: {_eq: $roleName}}, orderBy: {createdAt: DESC}) {\n    id\n    resource\n    operation\n    granted\n    conditions\n    expiresAt\n  }\n}\n\nquery SearchUsersByEmail($emailPattern: String!) {\n  users(where: {email: {_ilike: $emailPattern}}, limit: 10, orderBy: {email: ASC}) {\n    id\n    email\n    isActive\n    roleAssignments {\n      role {\n        name\n        displayName\n      }\n    }\n  }\n}\n\nquery GetRoleHierarchy {\n  roles(orderBy: {priority: DESC}) {\n    id\n    name\n    displayName\n    description\n    priority\n    isSystemRole\n    rolePermissionsAggregate {\n      aggregate {\n        count\n      }\n    }\n    userRolesAggregate {\n      aggregate {\n        count\n      }\n    }\n  }\n}\n\nquery GetPermissionAuditLogs($limit: Int = 50, $offset: Int = 0, $startDate: timestamptz, $endDate: timestamptz) {\n  auditPermissionChanges(\n    where: {changedAt: {_gte: $startDate, _lte: $endDate}}\n    orderBy: {changedAt: DESC}\n    limit: $limit\n    offset: $offset\n  ) {\n    id\n    targetUserId\n    changedByUserId\n    changeType\n    reason\n    oldPermissions\n    newPermissions\n    changedAt\n  }\n}\n\nquery GetPendingInvitations($limit: Int = 50, $offset: Int = 0, $now: timestamptz!) {\n  userInvitations(\n    where: {invitationStatus: {_eq: \"pending\"}, expiresAt: {_gt: $now}}\n    orderBy: {createdAt: DESC}\n    limit: $limit\n    offset: $offset\n  ) {\n    ...UserInvitationCore\n  }\n}\n\nquery GetInvitationByTicket($clerkTicket: String!) {\n  userInvitations(where: {clerkTicket: {_eq: $clerkTicket}}, limit: 1) {\n    ...UserInvitationWithDetails\n  }\n}\n\nquery GetInvitationByClerkId($clerkInvitationId: String!) {\n  userInvitations(where: {clerkInvitationId: {_eq: $clerkInvitationId}}, limit: 1) {\n    ...UserInvitationWithDetails\n  }\n}\n\nquery GetInvitationHistory($email: String!, $limit: Int = 10) {\n  userInvitations(\n    where: {email: {_eq: $email}}\n    orderBy: {invitedAt: DESC}\n    limit: $limit\n  ) {\n    id\n    email\n    firstName\n    lastName\n    invitedRole\n    invitationStatus\n    invitedAt\n    acceptedAt\n    expiresAt\n    invitedByUser {\n      ...UserMinimal\n    }\n    acceptedByUser {\n      ...UserMinimal\n      clerkUserId\n    }\n  }\n}\n\nquery GetInvitationsBySender($invitedBy: uuid!, $limit: Int = 50) {\n  userInvitations(\n    where: {invitedBy: {_eq: $invitedBy}}\n    orderBy: {invitedAt: DESC}\n    limit: $limit\n  ) {\n    id\n    email\n    firstName\n    lastName\n    invitedRole\n    invitationStatus\n    invitedAt\n    acceptedAt\n    expiresAt\n    acceptedByUser {\n      firstName\n      lastName\n      computedName\n      email\n    }\n  }\n}\n\nquery GetExpiredInvitations($now: timestamptz!) {\n  userInvitations(\n    where: {_or: [{invitationStatus: {_eq: \"expired\"}}, {expiresAt: {_lt: $now}}]}\n    orderBy: {expiresAt: DESC}\n  ) {\n    ...UserInvitationWithDetails\n  }\n}\n\nquery ValidateInvitationRolePermissions($invitedRole: String!, $invitedBy: uuid!) {\n  users(where: {id: {_eq: $invitedBy}}) {\n    id\n    role\n    roleAssignments {\n      role {\n        name\n        priority\n        rolePermissions {\n          permission {\n            action\n            resource {\n              name\n            }\n          }\n        }\n      }\n    }\n  }\n  roles(where: {name: {_eq: $invitedRole}}) {\n    id\n    name\n    priority\n    isSystemRole\n  }\n}\n\nquery GetInvitationById($invitationId: uuid!) {\n  userInvitationsByPk(id: $invitationId) {\n    ...UserInvitationWithDetails\n  }\n}\n\nquery GetResendableInvitations($invitedBy: uuid!, $limit: Int = 50) {\n  userInvitations(\n    where: {invitedBy: {_eq: $invitedBy}, invitationStatus: {_in: [\"pending\", \"expired\"]}}\n    orderBy: {invitedAt: DESC}\n    limit: $limit\n  ) {\n    ...UserInvitationCore\n  }\n}\n\nquery GetInvitationsWithStatus($statuses: [invitation_status_enum!], $limit: Int = 50, $offset: Int = 0, $orderBy: [UserInvitationsOrderBy!] = [{createdAt: DESC}]) {\n  userInvitations(\n    where: {invitationStatus: {_in: $statuses}}\n    orderBy: $orderBy\n    limit: $limit\n    offset: $offset\n  ) {\n    ...UserInvitationWithDetails\n  }\n  userInvitationsAggregate(where: {invitationStatus: {_in: $statuses}}) {\n    aggregate {\n      count\n    }\n  }\n}\n\nquery GetInvitationDashboardStats($now: timestamptz!, $sevenDaysFromNow: timestamptz!) {\n  pending: userInvitationsAggregate(\n    where: {invitationStatus: {_eq: \"pending\"}, expiresAt: {_gt: $now}}\n  ) {\n    aggregate {\n      count\n    }\n  }\n  expired: userInvitationsAggregate(where: {invitationStatus: {_eq: \"expired\"}}) {\n    aggregate {\n      count\n    }\n  }\n  accepted: userInvitationsAggregate(where: {invitationStatus: {_eq: \"accepted\"}}) {\n    aggregate {\n      count\n    }\n  }\n  revoked: userInvitationsAggregate(where: {invitationStatus: {_eq: \"revoked\"}}) {\n    aggregate {\n      count\n    }\n  }\n  expiringSoon: userInvitationsAggregate(\n    where: {invitationStatus: {_eq: \"pending\"}, expiresAt: {_gt: $now, _lt: $sevenDaysFromNow}}\n  ) {\n    aggregate {\n      count\n    }\n  }\n  recentInvitations: userInvitations(orderBy: {createdAt: DESC}, limit: 10) {\n    id\n    email\n    firstName\n    lastName\n    invitedRole\n    invitationStatus\n    createdAt\n    expiresAt\n    invitedByUser {\n      id\n      firstName\n      lastName\n      computedName\n      email\n    }\n  }\n}\n\nquery GetRevokedInvitations($limit: Int = 50, $offset: Int = 0) {\n  userInvitations(\n    where: {invitationStatus: {_eq: \"revoked\"}}\n    orderBy: {revokedAt: DESC}\n    limit: $limit\n    offset: $offset\n  ) {\n    ...UserInvitationCore\n  }\n}\n\nquery GetInvitationAuditHistory($email: String, $invitedBy: uuid, $startDate: timestamptz, $endDate: timestamptz, $limit: Int = 100) {\n  userInvitations(\n    where: {_and: [{email: {_eq: $email}}, {invitedBy: {_eq: $invitedBy}}, {createdAt: {_gte: $startDate}}, {createdAt: {_lte: $endDate}}]}\n    orderBy: {createdAt: DESC}\n    limit: $limit\n  ) {\n    ...UserInvitationWithDetails\n  }\n}\n\nquery GetExpiringInvitations($now: timestamptz!, $futureDate: timestamptz!) {\n  userInvitations(\n    where: {invitationStatus: {_eq: \"pending\"}, expiresAt: {_gt: $now, _lt: $futureDate}}\n    orderBy: {expiresAt: ASC}\n  ) {\n    ...UserInvitationWithDetails\n  }\n}\n\nquery SearchInvitations($searchTerm: String!, $limit: Int = 20) {\n  userInvitations(\n    where: {_or: [{email: {_ilike: $searchTerm}}, {firstName: {_ilike: $searchTerm}}, {lastName: {_ilike: $searchTerm}}]}\n    orderBy: {createdAt: DESC}\n    limit: $limit\n  ) {\n    ...UserInvitationWithDetails\n  }\n}\n\nquery GetInvitationByIdDetailed($invitationId: uuid!) {\n  userInvitationsByPk(id: $invitationId) {\n    ...UserInvitationWithDetails\n  }\n}\n\nquery GetUsersByStatus($statuses: [user_status_enum!], $limit: Int = 50, $offset: Int = 0, $orderBy: [UsersOrderBy!] = [{updatedAt: DESC}]) {\n  users(\n    where: {status: {_in: $statuses}}\n    orderBy: $orderBy\n    limit: $limit\n    offset: $offset\n  ) {\n    id\n    email\n    firstName\n    lastName\n    computedName\n    role\n    status\n    isActive\n    isStaff\n    statusChangedAt\n    statusChangedBy\n    statusChangeReason\n    deactivatedAt\n    deactivatedBy\n    createdAt\n    updatedAt\n  }\n  usersAggregate(where: {status: {_in: $statuses}}) {\n    aggregate {\n      count\n    }\n  }\n}\n\nquery GetUserStatusDashboardStats($thirtyDaysAgo: timestamptz = \"2024-01-01T00:00:00Z\") {\n  active: usersAggregate(where: {status: {_eq: \"active\"}}) {\n    aggregate {\n      count\n    }\n  }\n  inactive: usersAggregate(where: {status: {_eq: \"inactive\"}}) {\n    aggregate {\n      count\n    }\n  }\n  locked: usersAggregate(where: {status: {_eq: \"locked\"}}) {\n    aggregate {\n      count\n    }\n  }\n  pending: usersAggregate(where: {status: {_eq: \"pending\"}}) {\n    aggregate {\n      count\n    }\n  }\n  recentStatusChanges: users(\n    where: {statusChangedAt: {_gte: $thirtyDaysAgo}}\n    orderBy: {statusChangedAt: DESC}\n    limit: 10\n  ) {\n    id\n    email\n    firstName\n    lastName\n    computedName\n    role\n    status\n    statusChangedAt\n    statusChangeReason\n  }\n  staff: usersAggregate(where: {isStaff: {_eq: true}}) {\n    aggregate {\n      count\n    }\n  }\n  byRole: users {\n    role\n  }\n}\n\nquery GetUsersRequiringAttention($limit: Int = 20) {\n  locked: users(\n    where: {status: {_eq: \"locked\"}}\n    orderBy: {statusChangedAt: DESC}\n    limit: $limit\n  ) {\n    id\n    email\n    firstName\n    lastName\n    computedName\n    role\n    status\n    statusChangedAt\n    statusChangeReason\n  }\n  inactive: users(\n    where: {status: {_eq: \"inactive\"}}\n    orderBy: {deactivatedAt: DESC}\n    limit: $limit\n  ) {\n    id\n    email\n    firstName\n    lastName\n    computedName\n    role\n    status\n    deactivatedAt\n    statusChangeReason\n  }\n  pending: users(\n    where: {status: {_eq: \"pending\"}}\n    orderBy: {createdAt: DESC}\n    limit: $limit\n  ) {\n    id\n    email\n    firstName\n    lastName\n    computedName\n    role\n    status\n    createdAt\n  }\n}\n\nquery GetUserStatusHistory($userId: uuid!, $startDate: timestamptz, $endDate: timestamptz, $limit: Int = 50) {\n  user: usersByPk(id: $userId) {\n    id\n    email\n    firstName\n    lastName\n    computedName\n    role\n    status\n    isActive\n    statusChangedAt\n    statusChangedBy\n    statusChangeReason\n    deactivatedAt\n    deactivatedBy\n    createdAt\n    updatedAt\n  }\n}\n\nquery SearchUsersAdvanced($searchTerm: String, $statuses: [user_status_enum!], $roles: [user_role!], $isStaff: Boolean, $limit: Int = 20) {\n  users(\n    where: {_and: [{_or: [{email: {_ilike: \"%${searchTerm}%\"}}, {computedName: {_ilike: \"%${searchTerm}%\"}}]}, {status: {_in: $statuses}}, {role: {_in: $roles}}, {isStaff: {_eq: $isStaff}}]}\n    orderBy: {updatedAt: DESC}\n    limit: $limit\n  ) {\n    id\n    email\n    firstName\n    lastName\n    computedName\n    role\n    status\n    isActive\n    isStaff\n    statusChangedAt\n    statusChangeReason\n    deactivatedAt\n    createdAt\n  }\n}\n\nquery GetUserWithStatusDetails($userId: uuid!) {\n  usersByPk(id: $userId) {\n    id\n    email\n    firstName\n    lastName\n    computedName\n    role\n    status\n    isActive\n    isStaff\n    clerkUserId\n    statusChangedAt\n    statusChangedBy\n    statusChangeReason\n    deactivatedAt\n    deactivatedBy\n    createdAt\n    updatedAt\n  }\n}\n\nquery GetOrphanedInvitations {\n  userInvitations(\n    where: {invitationStatus: {_eq: \"accepted\"}}\n    orderBy: {createdAt: DESC}\n  ) {\n    id\n    email\n    firstName\n    lastName\n    invitationStatus\n    acceptedBy\n    createdAt\n    invitedBy\n    invitedByUser {\n      id\n      firstName\n      lastName\n      email\n    }\n  }\n}\n\nquery GetUsersWithoutClerkId {\n  users(\n    where: {_or: [{clerkUserId: {_isNull: true}}, {clerkUserId: {_eq: \"\"}}]}\n    orderBy: {createdAt: DESC}\n  ) {\n    id\n    email\n    firstName\n    lastName\n    role\n    createdAt\n    updatedAt\n    isActive\n  }\n}\n\nquery GetExpiredInvitationsForCleanup {\n  userInvitations(\n    where: {_or: [{invitationStatus: {_eq: \"expired\"}}, {expiresAt: {_lt: \"now()\"}}]}\n    orderBy: {expiresAt: DESC}\n  ) {\n    id\n    email\n    firstName\n    lastName\n    invitationStatus\n    expiresAt\n    createdAt\n    clerkInvitationId\n  }\n}\n\nfragment UserInvitationDetail on UserInvitations {\n  id\n  email\n  firstName\n  lastName\n  invitedRole\n  managerId\n  clerkInvitationId\n  clerkTicket\n  invitationMetadata\n  invitedBy\n  invitationStatus\n  expiresAt\n  createdAt\n  updatedAt\n}"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "subscription UserAuthStatusUpdates($userId: uuid!) {\n  users(where: {id: {_eq: $userId}}) {\n    id\n    isActive\n    role\n    updatedAt\n    deactivatedAt\n    deactivatedBy\n  }\n}\n\nsubscription UserSessionUpdates($clerkUserId: String!) {\n  users(where: {clerkUserId: {_eq: $clerkUserId}}) {\n    id\n    isActive\n    role\n    updatedAt\n    clerkUserId\n  }\n}\n\nsubscription AuthEventsUpdates($userId: uuid!) {\n  auditAuthEvents(\n    where: {userId: {_eq: $userId}}\n    orderBy: {eventTime: DESC}\n    limit: 20\n  ) {\n    id\n    eventType\n    eventTime\n    ipAddress\n    userAgent\n    success\n    failureReason\n    userId\n  }\n}\n\nsubscription UserRoleUpdates($userId: uuid!) {\n  users(where: {id: {_eq: $userId}}) {\n    id\n    role\n    isStaff\n    isActive\n    roleAssignments {\n      id\n      roleId\n      role {\n        id\n        name\n        displayName\n        priority\n        isSystemRole\n      }\n    }\n    updatedAt\n  }\n}\n\nsubscription UserPermissionUpdates($userId: uuid!) {\n  users(where: {id: {_eq: $userId}}) {\n    id\n    role\n    roleAssignments {\n      roleId\n      role {\n        name\n        rolePermissions {\n          id\n          permissionId\n          conditions\n          permission {\n            id\n            action\n            description\n            resource {\n              name\n              displayName\n            }\n          }\n        }\n      }\n    }\n    updatedAt\n  }\n}\n\nsubscription RolePermissionChanges($roleId: uuid!) {\n  rolePermissions(where: {roleId: {_eq: $roleId}}) {\n    id\n    roleId\n    permissionId\n    conditions\n    createdAt\n    updatedAt\n    permission {\n      id\n      action\n      description\n      resource {\n        name\n        displayName\n      }\n    }\n  }\n}\n\nsubscription FailedAuthAttemptsUpdates {\n  auditAuthEvents(\n    where: {success: {_eq: false}, eventTime: {_gte: \"now() - interval '1 hour'\"}}\n    orderBy: {eventTime: DESC}\n  ) {\n    id\n    eventType\n    eventTime\n    ipAddress\n    userAgent\n    failureReason\n    userId\n  }\n}\n\nsubscription SuspiciousActivityUpdates {\n  auditAuthEvents(\n    where: {_or: [{eventType: {_eq: \"multiple_failed_attempts\"}}, {eventType: {_eq: \"unusual_location\"}}, {eventType: {_eq: \"suspicious_activity\"}}], eventTime: {_gte: \"now() - interval '24 hours'\"}}\n    orderBy: {eventTime: DESC}\n  ) {\n    id\n    eventType\n    eventTime\n    ipAddress\n    userAgent\n    userId\n    metadata\n  }\n}\n\nsubscription SecurityAlertsUpdates {\n  auditAuthEvents(\n    where: {eventType: {_in: [\"account_locked\", \"unauthorized_access_attempt\", \"privilege_escalation_attempt\", \"suspicious_activity\"]}, eventTime: {_gte: \"now() - interval '1 hour'\"}}\n    orderBy: {eventTime: DESC}\n  ) {\n    id\n    eventType\n    eventTime\n    ipAddress\n    userId\n    metadata\n  }\n}\n\nsubscription PermissionChangesUpdates {\n  auditPermissionChanges(orderBy: {changedAt: DESC}, limit: 50) {\n    id\n    changeType\n    targetUserId\n    changedByUserId\n    reason\n    oldPermissions\n    newPermissions\n    changedAt\n  }\n}\n\nsubscription RoleAssignmentUpdates {\n  userRoles(orderBy: {createdAt: DESC}) {\n    id\n    userId\n    roleId\n    createdAt\n    updatedAt\n    user {\n      id\n      firstName\n      lastName\n      computedName\n      email\n    }\n    role {\n      id\n      name\n      displayName\n      priority\n    }\n  }\n}\n\nsubscription AuthSystemHealthUpdates {\n  auditAuthEvents(\n    where: {eventType: {_eq: \"login\"}, success: {_eq: true}, eventTime: {_gte: \"now() - interval '1 hour'\"}}\n    orderBy: {eventTime: DESC}\n    limit: 10\n  ) {\n    id\n    eventType\n    eventTime\n    userId\n    success\n  }\n}\n\nsubscription ActiveSessionsUpdates {\n  auditAuthEvents(\n    where: {eventType: {_eq: \"session_active\"}, eventTime: {_gte: \"now() - interval '30 minutes'\"}}\n    orderBy: {eventTime: DESC}\n  ) {\n    id\n    userId\n    eventTime\n    ipAddress\n  }\n}\n\nsubscription UserSecurityStatusUpdates($userId: uuid!) {\n  users(where: {id: {_eq: $userId}}) {\n    id\n    isActive\n    role\n    updatedAt\n  }\n}\n\nsubscription MFAEventsUpdates($userId: uuid!) {\n  auditAuthEvents(\n    where: {userId: {_eq: $userId}, eventType: {_like: \"mfa%\"}}\n    orderBy: {eventTime: DESC}\n    limit: 10\n  ) {\n    id\n    eventType\n    eventTime\n    success\n    failureReason\n    metadata\n  }\n}\n\nsubscription UserDeactivationUpdates {\n  users(\n    where: {isActive: {_eq: false}, deactivatedAt: {_gte: \"now() - interval '24 hours'\"}}\n    orderBy: {deactivatedAt: DESC}\n  ) {\n    id\n    firstName\n    lastName\n    computedName\n    email\n    role\n    deactivatedAt\n    deactivatedBy\n  }\n}\n\nsubscription PrivilegeChangesUpdates {\n  users(\n    where: {role: {_in: [\"org_admin\", \"manager\", \"developer\"]}, updatedAt: {_gte: \"now() - interval '1 hour'\"}}\n    orderBy: {updatedAt: DESC}\n  ) {\n    id\n    firstName\n    lastName\n    computedName\n    email\n    role\n    updatedAt\n    roleAssignments {\n      role {\n        name\n        priority\n      }\n    }\n  }\n}\n\nsubscription ComplianceEventsUpdates {\n  auditPermissionChanges(\n    where: {changeType: {_in: [\"role_assigned\", \"role_removed\", \"permission_granted\", \"permission_revoked\", \"admin_access\"]}, changedAt: {_gte: \"now() - interval '1 hour'\"}}\n    orderBy: {changedAt: DESC}\n  ) {\n    id\n    changeType\n    targetUserId\n    changedByUserId\n    reason\n    oldPermissions\n    newPermissions\n    changedAt\n  }\n}\n\nsubscription DataAccessMonitoring($userId: uuid!) {\n  auditDataAccessLog(\n    where: {userId: {_eq: $userId}, accessedAt: {_gte: \"now() - interval '24 hours'\"}}\n    orderBy: {accessedAt: DESC}\n    limit: 100\n  ) {\n    id\n    userId\n    resourceType\n    resourceId\n    accessType\n    accessedAt\n    ipAddress\n    dataClassification\n    rowCount\n  }\n}\n\nsubscription SecurityIncidentsUpdates {\n  auditAuthEvents(\n    where: {eventType: {_in: [\"security_incident\", \"data_breach_attempt\", \"unauthorized_admin_access\", \"multiple_failed_mfa\"]}, eventTime: {_gte: \"now() - interval '24 hours'\"}}\n    orderBy: {eventTime: DESC}\n  ) {\n    id\n    eventType\n    eventTime\n    userId\n    ipAddress\n    userAgent\n    metadata\n  }\n}\n\nsubscription EmergencyAuthUpdates {\n  auditAuthEvents(\n    where: {eventType: {_eq: \"emergency_access\"}, eventTime: {_gte: \"now() - interval '1 hour'\"}}\n    orderBy: {eventTime: DESC}\n  ) {\n    id\n    eventType\n    eventTime\n    userId\n    ipAddress\n    metadata\n  }\n}"): (typeof documents)["subscription UserAuthStatusUpdates($userId: uuid!) {\n  users(where: {id: {_eq: $userId}}) {\n    id\n    isActive\n    role\n    updatedAt\n    deactivatedAt\n    deactivatedBy\n  }\n}\n\nsubscription UserSessionUpdates($clerkUserId: String!) {\n  users(where: {clerkUserId: {_eq: $clerkUserId}}) {\n    id\n    isActive\n    role\n    updatedAt\n    clerkUserId\n  }\n}\n\nsubscription AuthEventsUpdates($userId: uuid!) {\n  auditAuthEvents(\n    where: {userId: {_eq: $userId}}\n    orderBy: {eventTime: DESC}\n    limit: 20\n  ) {\n    id\n    eventType\n    eventTime\n    ipAddress\n    userAgent\n    success\n    failureReason\n    userId\n  }\n}\n\nsubscription UserRoleUpdates($userId: uuid!) {\n  users(where: {id: {_eq: $userId}}) {\n    id\n    role\n    isStaff\n    isActive\n    roleAssignments {\n      id\n      roleId\n      role {\n        id\n        name\n        displayName\n        priority\n        isSystemRole\n      }\n    }\n    updatedAt\n  }\n}\n\nsubscription UserPermissionUpdates($userId: uuid!) {\n  users(where: {id: {_eq: $userId}}) {\n    id\n    role\n    roleAssignments {\n      roleId\n      role {\n        name\n        rolePermissions {\n          id\n          permissionId\n          conditions\n          permission {\n            id\n            action\n            description\n            resource {\n              name\n              displayName\n            }\n          }\n        }\n      }\n    }\n    updatedAt\n  }\n}\n\nsubscription RolePermissionChanges($roleId: uuid!) {\n  rolePermissions(where: {roleId: {_eq: $roleId}}) {\n    id\n    roleId\n    permissionId\n    conditions\n    createdAt\n    updatedAt\n    permission {\n      id\n      action\n      description\n      resource {\n        name\n        displayName\n      }\n    }\n  }\n}\n\nsubscription FailedAuthAttemptsUpdates {\n  auditAuthEvents(\n    where: {success: {_eq: false}, eventTime: {_gte: \"now() - interval '1 hour'\"}}\n    orderBy: {eventTime: DESC}\n  ) {\n    id\n    eventType\n    eventTime\n    ipAddress\n    userAgent\n    failureReason\n    userId\n  }\n}\n\nsubscription SuspiciousActivityUpdates {\n  auditAuthEvents(\n    where: {_or: [{eventType: {_eq: \"multiple_failed_attempts\"}}, {eventType: {_eq: \"unusual_location\"}}, {eventType: {_eq: \"suspicious_activity\"}}], eventTime: {_gte: \"now() - interval '24 hours'\"}}\n    orderBy: {eventTime: DESC}\n  ) {\n    id\n    eventType\n    eventTime\n    ipAddress\n    userAgent\n    userId\n    metadata\n  }\n}\n\nsubscription SecurityAlertsUpdates {\n  auditAuthEvents(\n    where: {eventType: {_in: [\"account_locked\", \"unauthorized_access_attempt\", \"privilege_escalation_attempt\", \"suspicious_activity\"]}, eventTime: {_gte: \"now() - interval '1 hour'\"}}\n    orderBy: {eventTime: DESC}\n  ) {\n    id\n    eventType\n    eventTime\n    ipAddress\n    userId\n    metadata\n  }\n}\n\nsubscription PermissionChangesUpdates {\n  auditPermissionChanges(orderBy: {changedAt: DESC}, limit: 50) {\n    id\n    changeType\n    targetUserId\n    changedByUserId\n    reason\n    oldPermissions\n    newPermissions\n    changedAt\n  }\n}\n\nsubscription RoleAssignmentUpdates {\n  userRoles(orderBy: {createdAt: DESC}) {\n    id\n    userId\n    roleId\n    createdAt\n    updatedAt\n    user {\n      id\n      firstName\n      lastName\n      computedName\n      email\n    }\n    role {\n      id\n      name\n      displayName\n      priority\n    }\n  }\n}\n\nsubscription AuthSystemHealthUpdates {\n  auditAuthEvents(\n    where: {eventType: {_eq: \"login\"}, success: {_eq: true}, eventTime: {_gte: \"now() - interval '1 hour'\"}}\n    orderBy: {eventTime: DESC}\n    limit: 10\n  ) {\n    id\n    eventType\n    eventTime\n    userId\n    success\n  }\n}\n\nsubscription ActiveSessionsUpdates {\n  auditAuthEvents(\n    where: {eventType: {_eq: \"session_active\"}, eventTime: {_gte: \"now() - interval '30 minutes'\"}}\n    orderBy: {eventTime: DESC}\n  ) {\n    id\n    userId\n    eventTime\n    ipAddress\n  }\n}\n\nsubscription UserSecurityStatusUpdates($userId: uuid!) {\n  users(where: {id: {_eq: $userId}}) {\n    id\n    isActive\n    role\n    updatedAt\n  }\n}\n\nsubscription MFAEventsUpdates($userId: uuid!) {\n  auditAuthEvents(\n    where: {userId: {_eq: $userId}, eventType: {_like: \"mfa%\"}}\n    orderBy: {eventTime: DESC}\n    limit: 10\n  ) {\n    id\n    eventType\n    eventTime\n    success\n    failureReason\n    metadata\n  }\n}\n\nsubscription UserDeactivationUpdates {\n  users(\n    where: {isActive: {_eq: false}, deactivatedAt: {_gte: \"now() - interval '24 hours'\"}}\n    orderBy: {deactivatedAt: DESC}\n  ) {\n    id\n    firstName\n    lastName\n    computedName\n    email\n    role\n    deactivatedAt\n    deactivatedBy\n  }\n}\n\nsubscription PrivilegeChangesUpdates {\n  users(\n    where: {role: {_in: [\"org_admin\", \"manager\", \"developer\"]}, updatedAt: {_gte: \"now() - interval '1 hour'\"}}\n    orderBy: {updatedAt: DESC}\n  ) {\n    id\n    firstName\n    lastName\n    computedName\n    email\n    role\n    updatedAt\n    roleAssignments {\n      role {\n        name\n        priority\n      }\n    }\n  }\n}\n\nsubscription ComplianceEventsUpdates {\n  auditPermissionChanges(\n    where: {changeType: {_in: [\"role_assigned\", \"role_removed\", \"permission_granted\", \"permission_revoked\", \"admin_access\"]}, changedAt: {_gte: \"now() - interval '1 hour'\"}}\n    orderBy: {changedAt: DESC}\n  ) {\n    id\n    changeType\n    targetUserId\n    changedByUserId\n    reason\n    oldPermissions\n    newPermissions\n    changedAt\n  }\n}\n\nsubscription DataAccessMonitoring($userId: uuid!) {\n  auditDataAccessLog(\n    where: {userId: {_eq: $userId}, accessedAt: {_gte: \"now() - interval '24 hours'\"}}\n    orderBy: {accessedAt: DESC}\n    limit: 100\n  ) {\n    id\n    userId\n    resourceType\n    resourceId\n    accessType\n    accessedAt\n    ipAddress\n    dataClassification\n    rowCount\n  }\n}\n\nsubscription SecurityIncidentsUpdates {\n  auditAuthEvents(\n    where: {eventType: {_in: [\"security_incident\", \"data_breach_attempt\", \"unauthorized_admin_access\", \"multiple_failed_mfa\"]}, eventTime: {_gte: \"now() - interval '24 hours'\"}}\n    orderBy: {eventTime: DESC}\n  ) {\n    id\n    eventType\n    eventTime\n    userId\n    ipAddress\n    userAgent\n    metadata\n  }\n}\n\nsubscription EmergencyAuthUpdates {\n  auditAuthEvents(\n    where: {eventType: {_eq: \"emergency_access\"}, eventTime: {_gte: \"now() - interval '1 hour'\"}}\n    orderBy: {eventTime: DESC}\n  ) {\n    id\n    eventType\n    eventTime\n    userId\n    ipAddress\n    metadata\n  }\n}"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "fragment UserMinimal on Users {\n  id\n  firstName\n  lastName\n  computedName\n  email\n}\n\nfragment UserCoreShared on Users {\n  ...UserMinimal\n  role\n  isActive\n}\n\nfragment UserBasic on Users {\n  ...UserCoreShared\n  clerkUserId\n  createdAt\n  updatedAt\n}\n\nfragment UserBase on Users {\n  ...UserBasic\n}\n\nfragment UserWithRole on Users {\n  ...UserBasic\n  username\n  isStaff\n}\n\nfragment UserProfile on Users {\n  ...UserWithRole\n  clerkUserId\n  image\n  managerId\n  deactivatedAt\n  deactivatedBy\n  manager {\n    ...UserMinimal\n  }\n}\n\nfragment UserSearchResult on Users {\n  ...UserCoreShared\n  username\n  isStaff\n}\n\nfragment ClientMinimal on Clients {\n  id\n  name\n}\n\nfragment ClientBase on Clients {\n  id\n  name\n  active\n  contactEmail\n  contactPerson\n  contactPhone\n  createdAt\n}\n\nfragment ClientWithStats on Clients {\n  ...ClientBase\n  currentEmployeeCount: payrollsAggregate(\n    where: {supersededDate: {_isNull: true}}\n  ) {\n    aggregate {\n      sum {\n        employeeCount\n      }\n    }\n  }\n  activePayrollCount: payrollsAggregate(\n    where: {supersededDate: {_isNull: true}, status: {_eq: \"Active\"}}\n  ) {\n    aggregate {\n      count\n    }\n  }\n}\n\nfragment ClientListBase on Clients {\n  ...ClientBase\n  payrollCount: payrollsAggregate(where: {supersededDate: {_isNull: true}}) {\n    aggregate {\n      count\n    }\n  }\n}\n\nfragment PayrollMinimal on Payrolls {\n  id\n  name\n  employeeCount\n  status\n}\n\nfragment PayrollBase on Payrolls {\n  id\n  name\n  employeeCount\n  status\n  payrollSystem\n  processingTime\n  processingDaysBeforeEft\n  versionNumber\n  supersededDate\n  createdAt\n  updatedAt\n}\n\nfragment PayrollWithClient on Payrolls {\n  ...PayrollBase\n  clientId\n  client {\n    id\n    name\n    active\n  }\n}\n\nfragment PayrollListItem on Payrolls {\n  ...PayrollWithClient\n  primaryConsultantUserId\n  backupConsultantUserId\n  managerUserId\n  createdByUserId\n  cycleId\n  dateTypeId\n  dateValue\n  payrollCycle {\n    id\n    name\n    description\n  }\n  payrollDateType {\n    id\n    name\n    description\n  }\n  primaryConsultant {\n    ...UserMinimal\n  }\n  backupConsultant {\n    ...UserMinimal\n  }\n  assignedManager {\n    ...UserMinimal\n  }\n}\n\nfragment PayrollWithDates on Payrolls {\n  ...PayrollBase\n  goLiveDate\n  payrollDates(orderBy: {originalEftDate: ASC}) {\n    id\n    originalEftDate\n    adjustedEftDate\n    notes\n  }\n}\n\nfragment PayrollFullDetail on Payrolls {\n  ...PayrollWithDates\n  ...PayrollWithClient\n  dateTypeId\n  cycleId\n  dateValue\n  versionReason\n  supersededDate\n  parentPayrollId\n  parentPayroll {\n    id\n    versionNumber\n  }\n  childPayrolls(orderBy: {versionNumber: DESC}) {\n    id\n    versionNumber\n    versionReason\n    createdAt\n  }\n  primaryConsultant {\n    ...UserMinimal\n  }\n  backupConsultant {\n    ...UserMinimal\n  }\n  assignedManager {\n    ...UserMinimal\n  }\n}\n\nfragment NoteWithAuthor on Notes {\n  id\n  content\n  isImportant\n  createdAt\n  entityId\n  entityType\n  author {\n    ...UserMinimal\n  }\n}\n\nfragment PermissionBase on Permissions {\n  id\n  resourceId\n  description\n  legacyPermissionName\n  action\n}\n\nfragment RoleWithPermissions on Roles {\n  id\n  name\n  displayName\n  description\n  isSystemRole\n  priority\n  rolePermissions {\n    permission {\n      ...PermissionBase\n    }\n  }\n}\n\nfragment AuditLogEntry on AuditAuditLog {\n  id\n  userId\n  userEmail\n  userRole\n  action\n  resourceType\n  resourceId\n  eventTime\n  success\n  errorMessage\n  ipAddress\n  userAgent\n  requestId\n  sessionId\n  metadata\n  oldValues\n  newValues\n  createdAt\n}\n\nfragment AuthEvent on AuditAuthEvents {\n  id\n  userId\n  userEmail\n  eventType\n  eventTime\n  success\n  failureReason\n  ipAddress\n  userAgent\n  metadata\n}\n\nfragment DataAccessLog on AuditDataAccessLog {\n  id\n  userId\n  resourceType\n  resourceId\n  accessType\n  accessedAt\n  dataClassification\n  fieldsAccessed\n  rowCount\n  ipAddress\n  metadata\n}\n\nfragment PermissionChange on AuditPermissionChanges {\n  id\n  changedAt\n  changedByUserId\n  targetUserId\n  targetRoleId\n  changeType\n  permissionType\n  oldPermissions\n  newPermissions\n  reason\n  approvedByUserId\n}\n\nfragment PayrollDateInfo on PayrollDates {\n  id\n  originalEftDate\n  adjustedEftDate\n  notes\n  createdAt\n}\n\nfragment PermissionOverrideInfo on PermissionOverrides {\n  id\n  userId\n  role\n  resource\n  operation\n  granted\n  reason\n  conditions\n  expiresAt\n  createdBy\n  createdAt\n}\n\nfragment PayrollTableRow on Payrolls {\n  ...PayrollListItem\n  goLiveDate\n  processingTime\n  versionNumber\n  cycleId\n  payrollCycle {\n    id\n    name\n    description\n  }\n  nextPayrollDate: payrollDates(\n    where: {_or: [{adjustedEftDate: {_gte: \"now()\"}}, {originalEftDate: {_gte: \"now()\"}}]}\n    orderBy: [{adjustedEftDate: ASC}, {originalEftDate: ASC}]\n    limit: 1\n  ) {\n    originalEftDate\n    adjustedEftDate\n    processingDate\n  }\n}\n\nfragment BillingItemMinimal on BillingItems {\n  id\n  description\n  amount\n  status\n  createdAt\n}\n\nfragment BillingItemBase on BillingItems {\n  ...BillingItemMinimal\n  clientId\n  staffUserId\n  isApproved\n  approvalDate\n  approvedBy\n  createdAt\n  updatedAt\n}\n\nfragment BillingItemWithClient on BillingItems {\n  ...BillingItemBase\n  client {\n    ...ClientMinimal\n  }\n  staffUser {\n    ...UserMinimal\n  }\n  approver: approvedByUser {\n    ...UserMinimal\n  }\n}\n\nfragment InvoiceMinimal on Invoices {\n  id\n  invoiceNumber\n  totalAmount\n  status\n  dueDate\n}\n\nfragment InvoiceBase on Invoices {\n  ...InvoiceMinimal\n  clientId\n  invoiceDate\n  taxAmount\n  subtotal\n  notes\n  createdAt\n  updatedAt\n}\n\nfragment InvoiceWithClient on Invoices {\n  ...InvoiceBase\n  client {\n    ...ClientMinimal\n  }\n}\n\nfragment FileMinimal on Files {\n  id\n  filename\n  size\n  mimetype\n  url\n}\n\nfragment FileBase on Files {\n  ...FileMinimal\n  bucket\n  objectKey\n  uploadedBy\n  category\n  fileType\n  isPublic\n  createdAt\n}\n\nfragment FileWithUploader on Files {\n  ...FileBase\n  uploadedByUser {\n    ...UserMinimal\n  }\n}\n\nfragment InvitationMinimal on UserInvitations {\n  id\n  email\n  invitedRole\n  invitationStatus\n}\n\nfragment InvitationBase on UserInvitations {\n  ...InvitationMinimal\n  invitedBy\n  expiresAt\n  acceptedAt\n  revokedAt\n  createdAt\n}\n\nfragment InvitationWithInviter on UserInvitations {\n  ...InvitationBase\n  invitedByUser {\n    ...UserMinimal\n  }\n}\n\nfragment ClientDashboardStats on Clients {\n  ...ClientMinimal\n  totalPayrolls: payrollsAggregate {\n    aggregate {\n      count\n    }\n  }\n  activePayrolls: payrollsAggregate(where: {status: {_eq: \"Active\"}}) {\n    aggregate {\n      count\n    }\n  }\n  totalEmployees: payrollsAggregate {\n    aggregate {\n      sum {\n        employeeCount\n      }\n    }\n  }\n}\n\nfragment UserActivityStats on Users {\n  ...UserMinimal\n  staffBillingItems(orderBy: {createdAt: DESC}, limit: 5) {\n    ...BillingItemMinimal\n  }\n  authoredNotes(orderBy: {createdAt: DESC}, limit: 3) {\n    ...NoteWithAuthor\n  }\n}"): (typeof documents)["fragment UserMinimal on Users {\n  id\n  firstName\n  lastName\n  computedName\n  email\n}\n\nfragment UserCoreShared on Users {\n  ...UserMinimal\n  role\n  isActive\n}\n\nfragment UserBasic on Users {\n  ...UserCoreShared\n  clerkUserId\n  createdAt\n  updatedAt\n}\n\nfragment UserBase on Users {\n  ...UserBasic\n}\n\nfragment UserWithRole on Users {\n  ...UserBasic\n  username\n  isStaff\n}\n\nfragment UserProfile on Users {\n  ...UserWithRole\n  clerkUserId\n  image\n  managerId\n  deactivatedAt\n  deactivatedBy\n  manager {\n    ...UserMinimal\n  }\n}\n\nfragment UserSearchResult on Users {\n  ...UserCoreShared\n  username\n  isStaff\n}\n\nfragment ClientMinimal on Clients {\n  id\n  name\n}\n\nfragment ClientBase on Clients {\n  id\n  name\n  active\n  contactEmail\n  contactPerson\n  contactPhone\n  createdAt\n}\n\nfragment ClientWithStats on Clients {\n  ...ClientBase\n  currentEmployeeCount: payrollsAggregate(\n    where: {supersededDate: {_isNull: true}}\n  ) {\n    aggregate {\n      sum {\n        employeeCount\n      }\n    }\n  }\n  activePayrollCount: payrollsAggregate(\n    where: {supersededDate: {_isNull: true}, status: {_eq: \"Active\"}}\n  ) {\n    aggregate {\n      count\n    }\n  }\n}\n\nfragment ClientListBase on Clients {\n  ...ClientBase\n  payrollCount: payrollsAggregate(where: {supersededDate: {_isNull: true}}) {\n    aggregate {\n      count\n    }\n  }\n}\n\nfragment PayrollMinimal on Payrolls {\n  id\n  name\n  employeeCount\n  status\n}\n\nfragment PayrollBase on Payrolls {\n  id\n  name\n  employeeCount\n  status\n  payrollSystem\n  processingTime\n  processingDaysBeforeEft\n  versionNumber\n  supersededDate\n  createdAt\n  updatedAt\n}\n\nfragment PayrollWithClient on Payrolls {\n  ...PayrollBase\n  clientId\n  client {\n    id\n    name\n    active\n  }\n}\n\nfragment PayrollListItem on Payrolls {\n  ...PayrollWithClient\n  primaryConsultantUserId\n  backupConsultantUserId\n  managerUserId\n  createdByUserId\n  cycleId\n  dateTypeId\n  dateValue\n  payrollCycle {\n    id\n    name\n    description\n  }\n  payrollDateType {\n    id\n    name\n    description\n  }\n  primaryConsultant {\n    ...UserMinimal\n  }\n  backupConsultant {\n    ...UserMinimal\n  }\n  assignedManager {\n    ...UserMinimal\n  }\n}\n\nfragment PayrollWithDates on Payrolls {\n  ...PayrollBase\n  goLiveDate\n  payrollDates(orderBy: {originalEftDate: ASC}) {\n    id\n    originalEftDate\n    adjustedEftDate\n    notes\n  }\n}\n\nfragment PayrollFullDetail on Payrolls {\n  ...PayrollWithDates\n  ...PayrollWithClient\n  dateTypeId\n  cycleId\n  dateValue\n  versionReason\n  supersededDate\n  parentPayrollId\n  parentPayroll {\n    id\n    versionNumber\n  }\n  childPayrolls(orderBy: {versionNumber: DESC}) {\n    id\n    versionNumber\n    versionReason\n    createdAt\n  }\n  primaryConsultant {\n    ...UserMinimal\n  }\n  backupConsultant {\n    ...UserMinimal\n  }\n  assignedManager {\n    ...UserMinimal\n  }\n}\n\nfragment NoteWithAuthor on Notes {\n  id\n  content\n  isImportant\n  createdAt\n  entityId\n  entityType\n  author {\n    ...UserMinimal\n  }\n}\n\nfragment PermissionBase on Permissions {\n  id\n  resourceId\n  description\n  legacyPermissionName\n  action\n}\n\nfragment RoleWithPermissions on Roles {\n  id\n  name\n  displayName\n  description\n  isSystemRole\n  priority\n  rolePermissions {\n    permission {\n      ...PermissionBase\n    }\n  }\n}\n\nfragment AuditLogEntry on AuditAuditLog {\n  id\n  userId\n  userEmail\n  userRole\n  action\n  resourceType\n  resourceId\n  eventTime\n  success\n  errorMessage\n  ipAddress\n  userAgent\n  requestId\n  sessionId\n  metadata\n  oldValues\n  newValues\n  createdAt\n}\n\nfragment AuthEvent on AuditAuthEvents {\n  id\n  userId\n  userEmail\n  eventType\n  eventTime\n  success\n  failureReason\n  ipAddress\n  userAgent\n  metadata\n}\n\nfragment DataAccessLog on AuditDataAccessLog {\n  id\n  userId\n  resourceType\n  resourceId\n  accessType\n  accessedAt\n  dataClassification\n  fieldsAccessed\n  rowCount\n  ipAddress\n  metadata\n}\n\nfragment PermissionChange on AuditPermissionChanges {\n  id\n  changedAt\n  changedByUserId\n  targetUserId\n  targetRoleId\n  changeType\n  permissionType\n  oldPermissions\n  newPermissions\n  reason\n  approvedByUserId\n}\n\nfragment PayrollDateInfo on PayrollDates {\n  id\n  originalEftDate\n  adjustedEftDate\n  notes\n  createdAt\n}\n\nfragment PermissionOverrideInfo on PermissionOverrides {\n  id\n  userId\n  role\n  resource\n  operation\n  granted\n  reason\n  conditions\n  expiresAt\n  createdBy\n  createdAt\n}\n\nfragment PayrollTableRow on Payrolls {\n  ...PayrollListItem\n  goLiveDate\n  processingTime\n  versionNumber\n  cycleId\n  payrollCycle {\n    id\n    name\n    description\n  }\n  nextPayrollDate: payrollDates(\n    where: {_or: [{adjustedEftDate: {_gte: \"now()\"}}, {originalEftDate: {_gte: \"now()\"}}]}\n    orderBy: [{adjustedEftDate: ASC}, {originalEftDate: ASC}]\n    limit: 1\n  ) {\n    originalEftDate\n    adjustedEftDate\n    processingDate\n  }\n}\n\nfragment BillingItemMinimal on BillingItems {\n  id\n  description\n  amount\n  status\n  createdAt\n}\n\nfragment BillingItemBase on BillingItems {\n  ...BillingItemMinimal\n  clientId\n  staffUserId\n  isApproved\n  approvalDate\n  approvedBy\n  createdAt\n  updatedAt\n}\n\nfragment BillingItemWithClient on BillingItems {\n  ...BillingItemBase\n  client {\n    ...ClientMinimal\n  }\n  staffUser {\n    ...UserMinimal\n  }\n  approver: approvedByUser {\n    ...UserMinimal\n  }\n}\n\nfragment InvoiceMinimal on Invoices {\n  id\n  invoiceNumber\n  totalAmount\n  status\n  dueDate\n}\n\nfragment InvoiceBase on Invoices {\n  ...InvoiceMinimal\n  clientId\n  invoiceDate\n  taxAmount\n  subtotal\n  notes\n  createdAt\n  updatedAt\n}\n\nfragment InvoiceWithClient on Invoices {\n  ...InvoiceBase\n  client {\n    ...ClientMinimal\n  }\n}\n\nfragment FileMinimal on Files {\n  id\n  filename\n  size\n  mimetype\n  url\n}\n\nfragment FileBase on Files {\n  ...FileMinimal\n  bucket\n  objectKey\n  uploadedBy\n  category\n  fileType\n  isPublic\n  createdAt\n}\n\nfragment FileWithUploader on Files {\n  ...FileBase\n  uploadedByUser {\n    ...UserMinimal\n  }\n}\n\nfragment InvitationMinimal on UserInvitations {\n  id\n  email\n  invitedRole\n  invitationStatus\n}\n\nfragment InvitationBase on UserInvitations {\n  ...InvitationMinimal\n  invitedBy\n  expiresAt\n  acceptedAt\n  revokedAt\n  createdAt\n}\n\nfragment InvitationWithInviter on UserInvitations {\n  ...InvitationBase\n  invitedByUser {\n    ...UserMinimal\n  }\n}\n\nfragment ClientDashboardStats on Clients {\n  ...ClientMinimal\n  totalPayrolls: payrollsAggregate {\n    aggregate {\n      count\n    }\n  }\n  activePayrolls: payrollsAggregate(where: {status: {_eq: \"Active\"}}) {\n    aggregate {\n      count\n    }\n  }\n  totalEmployees: payrollsAggregate {\n    aggregate {\n      sum {\n        employeeCount\n      }\n    }\n  }\n}\n\nfragment UserActivityStats on Users {\n  ...UserMinimal\n  staffBillingItems(orderBy: {createdAt: DESC}, limit: 5) {\n    ...BillingItemMinimal\n  }\n  authoredNotes(orderBy: {createdAt: DESC}, limit: 3) {\n    ...NoteWithAuthor\n  }\n}"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "mutation LogAuditEvent($input: AuditAuditLogInsertInput!) {\n  insertAuditAuditLog(objects: [$input]) {\n    returning {\n      id\n      eventTime\n    }\n  }\n}\n\nmutation InsertFile($input: FilesInsertInput!) {\n  insertFiles(objects: [$input]) {\n    returning {\n      id\n      filename\n      bucket\n      objectKey\n      size\n      mimetype\n      url\n      clientId\n      payrollId\n      uploadedBy\n      category\n      isPublic\n      metadata\n      fileType\n      createdAt\n    }\n  }\n}\n\nmutation UpdateFileMetadata($id: uuid!, $updates: FilesSetInput!) {\n  updateFilesByPk(pkColumns: {id: $id}, _set: $updates) {\n    id\n    filename\n    bucket\n    objectKey\n    size\n    mimetype\n    url\n    clientId\n    payrollId\n    uploadedBy\n    category\n    isPublic\n    metadata\n    fileType\n    createdAt\n  }\n}\n\nmutation DeleteFile($id: uuid!) {\n  deleteFilesByPk(id: $id) {\n    id\n    filename\n    objectKey\n  }\n}\n\nmutation RefreshData {\n  __typename\n}"): (typeof documents)["mutation LogAuditEvent($input: AuditAuditLogInsertInput!) {\n  insertAuditAuditLog(objects: [$input]) {\n    returning {\n      id\n      eventTime\n    }\n  }\n}\n\nmutation InsertFile($input: FilesInsertInput!) {\n  insertFiles(objects: [$input]) {\n    returning {\n      id\n      filename\n      bucket\n      objectKey\n      size\n      mimetype\n      url\n      clientId\n      payrollId\n      uploadedBy\n      category\n      isPublic\n      metadata\n      fileType\n      createdAt\n    }\n  }\n}\n\nmutation UpdateFileMetadata($id: uuid!, $updates: FilesSetInput!) {\n  updateFilesByPk(pkColumns: {id: $id}, _set: $updates) {\n    id\n    filename\n    bucket\n    objectKey\n    size\n    mimetype\n    url\n    clientId\n    payrollId\n    uploadedBy\n    category\n    isPublic\n    metadata\n    fileType\n    createdAt\n  }\n}\n\nmutation DeleteFile($id: uuid!) {\n  deleteFilesByPk(id: $id) {\n    id\n    filename\n    objectKey\n  }\n}\n\nmutation RefreshData {\n  __typename\n}"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "query GetDashboardMetrics($userId: uuid!) {\n  clientsAggregate(where: {active: {_eq: true}}) {\n    aggregate {\n      count\n    }\n  }\n  activePayrollsAggregate: payrollsAggregate(\n    where: {supersededDate: {_isNull: true}, status: {_nin: [\"Completed\", \"Failed\"]}}\n  ) {\n    aggregate {\n      count\n    }\n  }\n  totalEmployeesAggregate: payrollsAggregate(\n    where: {supersededDate: {_isNull: true}}\n  ) {\n    aggregate {\n      sum {\n        employeeCount\n      }\n    }\n  }\n  upcomingPayrolls: payrolls(\n    where: {supersededDate: {_isNull: true}, status: {_nin: [\"Completed\", \"Failed\", \"Cancelled\"]}}\n    orderBy: {updatedAt: DESC}\n    limit: 5\n  ) {\n    ...PayrollMinimal\n    client {\n      ...ClientMinimal\n    }\n  }\n}\n\nquery GetDashboardStatsOptimized($limit: Int = 10) {\n  clientsAggregate {\n    aggregate {\n      count\n    }\n  }\n  totalPayrolls: payrollsAggregate(where: {supersededDate: {_isNull: true}}) {\n    aggregate {\n      count\n    }\n  }\n  activePayrolls: payrollsAggregate(\n    where: {supersededDate: {_isNull: true}, status: {_eq: \"Active\"}}\n  ) {\n    aggregate {\n      count\n    }\n  }\n  upcomingPayrolls: payrolls(\n    where: {supersededDate: {_isNull: true}, status: {_eq: \"Active\"}, payrollDates: {adjustedEftDate: {_gte: \"now()\"}}}\n    orderBy: {updatedAt: DESC}\n    limit: $limit\n  ) {\n    id\n    name\n    status\n    client {\n      id\n      name\n    }\n    nextEftDate: payrollDates(\n      where: {adjustedEftDate: {_gte: \"now()\"}}\n      orderBy: {adjustedEftDate: ASC}\n      limit: 1\n    ) {\n      originalEftDate\n      adjustedEftDate\n      processingDate\n    }\n  }\n}\n\nquery GetClientsDashboardStats {\n  activeClientsCount: clientsAggregate(where: {active: {_eq: true}}) {\n    aggregate {\n      count\n    }\n  }\n  totalPayrollsCount: payrollsAggregate(where: {supersededDate: {_isNull: true}}) {\n    aggregate {\n      count\n    }\n  }\n  totalEmployeesSum: payrollsAggregate(where: {supersededDate: {_isNull: true}}) {\n    aggregate {\n      sum {\n        employeeCount\n      }\n    }\n  }\n  clientsNeedingAttention: clients(\n    where: {active: {_eq: true}, _not: {payrolls: {supersededDate: {_isNull: true}}}}\n  ) {\n    ...ClientMinimal\n  }\n}\n\nquery GetCurrentUser($userId: uuid!) {\n  user: usersByPk(id: $userId) {\n    ...UserProfile\n  }\n}\n\nquery GetUsersForDropdown($role: user_role) {\n  users(\n    where: {isActive: {_eq: true}, role: {_eq: $role}}\n    orderBy: {computedName: ASC}\n  ) {\n    ...UserMinimal\n  }\n}\n\nquery GetSystemHealth {\n  databaseHealth: users(limit: 1) {\n    id\n  }\n  recentActivity: auditAuditLogAggregate(\n    where: {eventTime: {_gte: \"now() - interval '1 hour'\"}}\n  ) {\n    aggregate {\n      count\n    }\n  }\n}\n\nquery GlobalSearch($searchTerm: String!) {\n  clients(\n    where: {_or: [{name: {_ilike: $searchTerm}}, {contactEmail: {_ilike: $searchTerm}}]}\n    limit: 5\n  ) {\n    ...ClientMinimal\n  }\n  users(\n    where: {_or: [{computedName: {_ilike: $searchTerm}}, {firstName: {_ilike: $searchTerm}}, {lastName: {_ilike: $searchTerm}}, {email: {_ilike: $searchTerm}}]}\n    limit: 5\n  ) {\n    ...UserMinimal\n  }\n  payrolls(\n    where: {client: {name: {_ilike: $searchTerm}}, supersededDate: {_isNull: true}}\n    limit: 5\n  ) {\n    ...PayrollMinimal\n    client {\n      ...ClientMinimal\n    }\n  }\n}\n\nquery GetFileById($id: uuid!) {\n  filesByPk(id: $id) {\n    id\n    filename\n    bucket\n    objectKey\n    size\n    mimetype\n    url\n    clientId\n    payrollId\n    uploadedBy\n    category\n    isPublic\n    metadata\n    fileType\n    createdAt\n    client {\n      name\n    }\n    payroll {\n      name\n    }\n    uploadedBy\n  }\n}\n\nquery ListFiles($where: FilesBoolExp, $limit: Int, $offset: Int, $orderBy: [FilesOrderBy!]) {\n  files(where: $where, limit: $limit, offset: $offset, orderBy: $orderBy) {\n    id\n    filename\n    bucket\n    objectKey\n    size\n    mimetype\n    url\n    clientId\n    payrollId\n    uploadedBy\n    category\n    isPublic\n    metadata\n    fileType\n    createdAt\n    client {\n      name\n    }\n    payroll {\n      name\n    }\n    uploadedBy\n  }\n  filesAggregate(where: $where) {\n    aggregate {\n      count\n    }\n  }\n}"): (typeof documents)["query GetDashboardMetrics($userId: uuid!) {\n  clientsAggregate(where: {active: {_eq: true}}) {\n    aggregate {\n      count\n    }\n  }\n  activePayrollsAggregate: payrollsAggregate(\n    where: {supersededDate: {_isNull: true}, status: {_nin: [\"Completed\", \"Failed\"]}}\n  ) {\n    aggregate {\n      count\n    }\n  }\n  totalEmployeesAggregate: payrollsAggregate(\n    where: {supersededDate: {_isNull: true}}\n  ) {\n    aggregate {\n      sum {\n        employeeCount\n      }\n    }\n  }\n  upcomingPayrolls: payrolls(\n    where: {supersededDate: {_isNull: true}, status: {_nin: [\"Completed\", \"Failed\", \"Cancelled\"]}}\n    orderBy: {updatedAt: DESC}\n    limit: 5\n  ) {\n    ...PayrollMinimal\n    client {\n      ...ClientMinimal\n    }\n  }\n}\n\nquery GetDashboardStatsOptimized($limit: Int = 10) {\n  clientsAggregate {\n    aggregate {\n      count\n    }\n  }\n  totalPayrolls: payrollsAggregate(where: {supersededDate: {_isNull: true}}) {\n    aggregate {\n      count\n    }\n  }\n  activePayrolls: payrollsAggregate(\n    where: {supersededDate: {_isNull: true}, status: {_eq: \"Active\"}}\n  ) {\n    aggregate {\n      count\n    }\n  }\n  upcomingPayrolls: payrolls(\n    where: {supersededDate: {_isNull: true}, status: {_eq: \"Active\"}, payrollDates: {adjustedEftDate: {_gte: \"now()\"}}}\n    orderBy: {updatedAt: DESC}\n    limit: $limit\n  ) {\n    id\n    name\n    status\n    client {\n      id\n      name\n    }\n    nextEftDate: payrollDates(\n      where: {adjustedEftDate: {_gte: \"now()\"}}\n      orderBy: {adjustedEftDate: ASC}\n      limit: 1\n    ) {\n      originalEftDate\n      adjustedEftDate\n      processingDate\n    }\n  }\n}\n\nquery GetClientsDashboardStats {\n  activeClientsCount: clientsAggregate(where: {active: {_eq: true}}) {\n    aggregate {\n      count\n    }\n  }\n  totalPayrollsCount: payrollsAggregate(where: {supersededDate: {_isNull: true}}) {\n    aggregate {\n      count\n    }\n  }\n  totalEmployeesSum: payrollsAggregate(where: {supersededDate: {_isNull: true}}) {\n    aggregate {\n      sum {\n        employeeCount\n      }\n    }\n  }\n  clientsNeedingAttention: clients(\n    where: {active: {_eq: true}, _not: {payrolls: {supersededDate: {_isNull: true}}}}\n  ) {\n    ...ClientMinimal\n  }\n}\n\nquery GetCurrentUser($userId: uuid!) {\n  user: usersByPk(id: $userId) {\n    ...UserProfile\n  }\n}\n\nquery GetUsersForDropdown($role: user_role) {\n  users(\n    where: {isActive: {_eq: true}, role: {_eq: $role}}\n    orderBy: {computedName: ASC}\n  ) {\n    ...UserMinimal\n  }\n}\n\nquery GetSystemHealth {\n  databaseHealth: users(limit: 1) {\n    id\n  }\n  recentActivity: auditAuditLogAggregate(\n    where: {eventTime: {_gte: \"now() - interval '1 hour'\"}}\n  ) {\n    aggregate {\n      count\n    }\n  }\n}\n\nquery GlobalSearch($searchTerm: String!) {\n  clients(\n    where: {_or: [{name: {_ilike: $searchTerm}}, {contactEmail: {_ilike: $searchTerm}}]}\n    limit: 5\n  ) {\n    ...ClientMinimal\n  }\n  users(\n    where: {_or: [{computedName: {_ilike: $searchTerm}}, {firstName: {_ilike: $searchTerm}}, {lastName: {_ilike: $searchTerm}}, {email: {_ilike: $searchTerm}}]}\n    limit: 5\n  ) {\n    ...UserMinimal\n  }\n  payrolls(\n    where: {client: {name: {_ilike: $searchTerm}}, supersededDate: {_isNull: true}}\n    limit: 5\n  ) {\n    ...PayrollMinimal\n    client {\n      ...ClientMinimal\n    }\n  }\n}\n\nquery GetFileById($id: uuid!) {\n  filesByPk(id: $id) {\n    id\n    filename\n    bucket\n    objectKey\n    size\n    mimetype\n    url\n    clientId\n    payrollId\n    uploadedBy\n    category\n    isPublic\n    metadata\n    fileType\n    createdAt\n    client {\n      name\n    }\n    payroll {\n      name\n    }\n    uploadedBy\n  }\n}\n\nquery ListFiles($where: FilesBoolExp, $limit: Int, $offset: Int, $orderBy: [FilesOrderBy!]) {\n  files(where: $where, limit: $limit, offset: $offset, orderBy: $orderBy) {\n    id\n    filename\n    bucket\n    objectKey\n    size\n    mimetype\n    url\n    clientId\n    payrollId\n    uploadedBy\n    category\n    isPublic\n    metadata\n    fileType\n    createdAt\n    client {\n      name\n    }\n    payroll {\n      name\n    }\n    uploadedBy\n  }\n  filesAggregate(where: $where) {\n    aggregate {\n      count\n    }\n  }\n}"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "subscription RecentActivity($resourceTypes: [String!]) {\n  auditAuditLog(\n    where: {resourceType: {_in: $resourceTypes}, eventTime: {_gte: \"now() - interval '5 minutes'\"}}\n    orderBy: {eventTime: DESC}\n    limit: 20\n  ) {\n    ...AuditLogEntry\n  }\n}\n\nsubscription AuthenticationEvents($userId: uuid) {\n  auditAuthEvents(\n    where: {userId: {_eq: $userId}, eventTime: {_gte: \"now() - interval '10 minutes'\"}}\n    orderBy: {eventTime: DESC}\n  ) {\n    ...AuthEvent\n  }\n}\n\nsubscription SensitiveDataAccess($resourceTypes: [String!]!) {\n  auditDataAccessLog(\n    where: {resourceType: {_in: $resourceTypes}, accessedAt: {_gte: \"now() - interval '10 minutes'\"}}\n    orderBy: {accessedAt: DESC}\n  ) {\n    ...DataAccessLog\n  }\n}\n\nsubscription PermissionChangeStream {\n  auditPermissionChanges(orderBy: {changedAt: DESC}, limit: 10) {\n    ...PermissionChange\n  }\n}"): (typeof documents)["subscription RecentActivity($resourceTypes: [String!]) {\n  auditAuditLog(\n    where: {resourceType: {_in: $resourceTypes}, eventTime: {_gte: \"now() - interval '5 minutes'\"}}\n    orderBy: {eventTime: DESC}\n    limit: 20\n  ) {\n    ...AuditLogEntry\n  }\n}\n\nsubscription AuthenticationEvents($userId: uuid) {\n  auditAuthEvents(\n    where: {userId: {_eq: $userId}, eventTime: {_gte: \"now() - interval '10 minutes'\"}}\n    orderBy: {eventTime: DESC}\n  ) {\n    ...AuthEvent\n  }\n}\n\nsubscription SensitiveDataAccess($resourceTypes: [String!]!) {\n  auditDataAccessLog(\n    where: {resourceType: {_in: $resourceTypes}, accessedAt: {_gte: \"now() - interval '10 minutes'\"}}\n    orderBy: {accessedAt: DESC}\n  ) {\n    ...DataAccessLog\n  }\n}\n\nsubscription PermissionChangeStream {\n  auditPermissionChanges(orderBy: {changedAt: DESC}, limit: 10) {\n    ...PermissionChange\n  }\n}"];

export function gql(source: string) {
  return (documents as any)[source] ?? {};
}

export type DocumentType<TDocumentNode extends DocumentNode<any, any>> = TDocumentNode extends DocumentNode<  infer TType,  any>  ? TType  : never;