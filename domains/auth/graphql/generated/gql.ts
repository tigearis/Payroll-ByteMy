/* eslint-disable */
import * as types from './graphql';
import type { TypedDocumentNode as DocumentNode } from '@graphql-typed-document-node/core';

/**
 * Map of all GraphQL operations in the project.
 *
 * This map has several performance disadvantages:
 * 1. It is not tree-shakeable, so it will include all operations in the project.
 * 2. It is not minifiable, so the string of a GraphQL query will be multiple times inside the bundle.
 * 3. It does not support dead code elimination, so it will add unused operations.
 *
 * Therefore it is highly recommended to use the babel or swc plugin for production.
 * Learn more about it here: https://the-guild.dev/graphql/codegen/plugins/presets/preset-client#reducing-bundle-size
 */
type Documents = {
    "fragment AuthUserCore on users {\n  id\n  name\n  email\n  role\n  isActive\n  clerkUserId\n  createdAt\n  updatedAt\n}\n\nfragment AuthUserWithRoles on users {\n  ...AuthUserCore\n  assignedRoles {\n    id\n    roleId\n    assignedRole {\n      id\n      name\n      displayName\n      description\n      priority\n      isSystemRole\n    }\n  }\n}\n\nfragment AuthRoleCore on roles {\n  id\n  name\n  displayName\n  description\n  priority\n  isSystemRole\n  createdAt\n  updatedAt\n}\n\nfragment AuthPermissionCore on permissions {\n  id\n  resourceId\n  action\n  description\n  legacyPermissionName\n  createdAt\n  updatedAt\n}\n\nfragment AuthUserRoleWithDetails on userRoles {\n  id\n  userId\n  roleId\n  createdAt\n  updatedAt\n  roleUser {\n    id\n    name\n    email\n    isActive\n  }\n  assignedRole {\n    id\n    name\n    displayName\n    description\n    priority\n  }\n}\n\nfragment PermissionOverrideCore on permissionOverrides {\n  id\n  userId\n  role\n  resource\n  operation\n  granted\n  conditions\n  createdBy\n  expiresAt\n  createdAt\n  updatedAt\n}\n\nfragment UserInvitationCore on userInvitations {\n  id\n  email\n  firstName\n  lastName\n  invitedRole\n  managerId\n  clerkInvitationId\n  clerkTicket\n  invitationMetadata\n  invitedBy\n  invitedAt\n  acceptedAt\n  acceptedBy\n  expiresAt\n  status\n  createdAt\n  updatedAt\n}\n\nfragment UserInvitationWithDetails on userInvitations {\n  ...UserInvitationCore\n  invitedByUser {\n    id\n    name\n    email\n    role\n  }\n  managerUser {\n    id\n    name\n    email\n    role\n  }\n  acceptedByUser {\n    id\n    name\n    email\n    clerkUserId\n    isActive\n  }\n}": typeof types.AuthUserCoreFragmentDoc,
    "mutation AssignRoleToUser($userId: uuid!, $roleId: uuid!) {\n  insertUserRole(object: {userId: $userId, roleId: $roleId}) {\n    id\n    userId\n    roleId\n    assignedRole {\n      name\n      displayName\n      priority\n    }\n  }\n}\n\nmutation RemoveRoleFromUser($userRoleId: uuid!) {\n  deleteUserRoleById(id: $userRoleId) {\n    id\n    roleId\n  }\n}\n\nmutation UpdateUserRoleAssignment($id: uuid!, $set: userRolesSetInput!) {\n  updateUserRoleById(pkColumns: {id: $id}, _set: $set) {\n    id\n    userId\n    roleId\n    updatedAt\n  }\n}\n\nmutation SetUserRoles($userId: uuid!, $roleIds: [userRolesInsertInput!]!) {\n  bulkDeleteUserRoles(where: {userId: {_eq: $userId}}) {\n    affectedRows\n  }\n  bulkInsertUserRoles(objects: $roleIds) {\n    returning {\n      id\n      userId\n      roleId\n      assignedRole {\n        name\n        displayName\n      }\n    }\n    affectedRows\n  }\n}\n\nmutation CreateUserPermissionOverride($userId: uuid!, $resource: String!, $operation: String!, $granted: Boolean!, $conditions: jsonb = null, $expiresAt: timestamptz = null, $reason: String = null) {\n  insertPermissionOverride(\n    object: {userId: $userId, resource: $resource, operation: $operation, granted: $granted, conditions: $conditions, expiresAt: $expiresAt, reason: $reason}\n  ) {\n    id\n    userId\n    resource\n    operation\n    granted\n    conditions\n    expiresAt\n    reason\n    createdAt\n  }\n}\n\nmutation UpdateUserPermissionOverride($id: uuid!, $set: permissionOverridesSetInput!) {\n  updatePermissionOverrideById(pkColumns: {id: $id}, _set: $set) {\n    id\n    userId\n    resource\n    operation\n    granted\n    expiresAt\n    reason\n    updatedAt\n  }\n}\n\nmutation RemoveUserPermissionOverride($id: uuid!) {\n  deletePermissionOverrideById(id: $id) {\n    id\n    userId\n    resource\n    operation\n  }\n}\n\nmutation CreateUserInvitation($email: String!, $firstName: String!, $lastName: String!, $invitedRole: String!, $managerId: uuid, $clerkInvitationId: String, $clerkTicket: String, $invitationMetadata: jsonb, $invitedBy: uuid!, $expiresAt: timestamptz!) {\n  insertUserInvitation(\n    object: {email: $email, firstName: $firstName, lastName: $lastName, invitedRole: $invitedRole, managerId: $managerId, clerkInvitationId: $clerkInvitationId, clerkTicket: $clerkTicket, invitationMetadata: $invitationMetadata, invitedBy: $invitedBy, expiresAt: $expiresAt, status: \"pending\"}\n  ) {\n    id\n    email\n    firstName\n    lastName\n    invitedRole\n    managerId\n    clerkTicket\n    invitedAt\n    expiresAt\n    status\n    invitedByUser {\n      name\n      email\n      role\n    }\n  }\n}\n\nmutation CompleteInvitationAcceptance($invitationId: uuid!, $clerkUserId: String!, $userEmail: String!, $userName: String!) {\n  updateUserInvitationById(\n    pkColumns: {id: $invitationId}\n    _set: {status: \"accepted\", acceptedAt: \"now()\"}\n  ) {\n    id\n    email\n    firstName\n    lastName\n    invitedRole\n    managerId\n    status\n    acceptedAt\n  }\n  insertUser(\n    object: {clerkUserId: $clerkUserId, email: $userEmail, name: $userName, isActive: true, isStaff: true}\n  ) {\n    id\n    clerkUserId\n    email\n    name\n    isActive\n  }\n}\n\nmutation AssignInvitationRole($userId: uuid!, $roleId: uuid!, $invitationId: uuid!) {\n  insertUserRole(object: {userId: $userId, roleId: $roleId}) {\n    id\n    userId\n    roleId\n    assignedRole {\n      name\n      displayName\n      priority\n    }\n  }\n  updateUserInvitationById(\n    pkColumns: {id: $invitationId}\n    _set: {acceptedBy: $userId}\n  ) {\n    id\n    acceptedBy\n  }\n  insertPermissionAuditLog(\n    object: {userId: $userId, action: \"role_assigned_from_invitation\", resource: \"user_roles\", newValue: {roleId: $roleId, invitationId: $invitationId}, timestamp: \"now()\"}\n  ) {\n    id\n    timestamp\n  }\n}\n\nmutation CancelUserInvitation($invitationId: uuid!) {\n  updateUserInvitationById(\n    pkColumns: {id: $invitationId}\n    _set: {status: \"cancelled\"}\n  ) {\n    id\n    status\n    updatedAt\n  }\n}\n\nmutation ResendUserInvitation($invitationId: uuid!, $newExpiresAt: timestamptz!, $newClerkTicket: String, $newClerkInvitationId: String) {\n  updateUserInvitationById(\n    pkColumns: {id: $invitationId}\n    _set: {status: \"pending\", expiresAt: $newExpiresAt, clerkTicket: $newClerkTicket, clerkInvitationId: $newClerkInvitationId, updatedAt: \"now()\"}\n  ) {\n    id\n    email\n    firstName\n    lastName\n    invitedRole\n    status\n    expiresAt\n    updatedAt\n    invitedByUser {\n      name\n      email\n    }\n  }\n}\n\nmutation MarkExpiredInvitations {\n  bulkUpdateUserInvitations(\n    where: {status: {_eq: \"pending\"}, expiresAt: {_lt: \"now()\"}}\n    _set: {status: \"expired\"}\n  ) {\n    affectedRows\n    returning {\n      id\n      email\n      status\n      expiresAt\n    }\n  }\n}": typeof types.AssignRoleToUserDocument,
    "query GetCurrentUserRoles {\n  users(limit: 1) {\n    id\n    email\n    isActive\n    isStaff\n    assignedRoles {\n      assignedRole {\n        id\n        name\n        displayName\n        description\n        priority\n        isSystemRole\n        assignedPermissions {\n          grantedPermission {\n            id\n            action\n            description\n            relatedResource {\n              id\n              name\n              displayName\n              description\n            }\n          }\n          conditions\n        }\n      }\n    }\n  }\n}\n\nquery GetAllRoles {\n  roles(orderBy: {priority: DESC}) {\n    id\n    name\n    displayName\n    description\n    priority\n    isSystemRole\n    assignedPermissions {\n      id\n      conditions\n      grantedPermission {\n        id\n        action\n        description\n        relatedResource {\n          id\n          name\n          displayName\n          description\n        }\n      }\n    }\n  }\n}\n\nquery GetResourcesAndPermissions {\n  resources(orderBy: {name: ASC}) {\n    id\n    name\n    displayName\n    description\n    availablePermissions {\n      id\n      action\n      description\n    }\n  }\n}\n\nquery GetUsersWithRoles($limit: Int = 50, $offset: Int = 0) {\n  users(limit: $limit, offset: $offset, orderBy: {createdAt: DESC}) {\n    id\n    email\n    isActive\n    isStaff\n    assignedRoles {\n      id\n      assignedRole {\n        id\n        name\n        displayName\n        priority\n      }\n    }\n  }\n}\n\nquery GetUserPermissionOverrides($userId: uuid!) {\n  permissionOverrides(where: {userId: {_eq: $userId}}, orderBy: {createdAt: DESC}) {\n    id\n    resource\n    operation\n    granted\n    conditions\n    expiresAt\n  }\n}\n\nquery GetRolePermissionOverrides($roleName: String!) {\n  permissionOverrides(where: {role: {_eq: $roleName}}, orderBy: {createdAt: DESC}) {\n    id\n    resource\n    operation\n    granted\n    conditions\n    expiresAt\n  }\n}\n\nquery SearchUsersByEmail($emailPattern: String!) {\n  users(where: {email: {_ilike: $emailPattern}}, limit: 10, orderBy: {email: ASC}) {\n    id\n    email\n    isActive\n    assignedRoles {\n      assignedRole {\n        name\n        displayName\n      }\n    }\n  }\n}\n\nquery GetRoleHierarchy {\n  roles(orderBy: {priority: DESC}) {\n    id\n    name\n    displayName\n    description\n    priority\n    isSystemRole\n    assignedPermissionsAggregate {\n      aggregate {\n        count\n      }\n    }\n    assignedToUsersAggregate {\n      aggregate {\n        count\n      }\n    }\n  }\n}\n\nquery GetPermissionAuditLogs($limit: Int = 50, $offset: Int = 0, $startDate: timestamptz, $endDate: timestamptz) {\n  permissionAuditLogs(\n    where: {timestamp: {_gte: $startDate, _lte: $endDate}}\n    orderBy: {timestamp: DESC}\n    limit: $limit\n    offset: $offset\n  ) {\n    id\n    userId\n    targetUserId\n    action\n    resource\n    previousValue\n    newValue\n    timestamp\n    createdAt\n  }\n}\n\nquery GetPendingInvitations($limit: Int = 50, $offset: Int = 0) {\n  userInvitations(\n    where: {status: {_eq: \"pending\"}}\n    orderBy: {invitedAt: DESC}\n    limit: $limit\n    offset: $offset\n  ) {\n    id\n    email\n    firstName\n    lastName\n    invitedRole\n    managerId\n    invitedAt\n    expiresAt\n    status\n    invitedByUser {\n      name\n      email\n      role\n    }\n    managerUser {\n      name\n      email\n    }\n  }\n}\n\nquery GetInvitationByTicket($clerkTicket: String!) {\n  userInvitations(\n    where: {clerkTicket: {_eq: $clerkTicket}, status: {_eq: \"pending\"}, expiresAt: {_gt: \"now()\"}}\n    limit: 1\n  ) {\n    id\n    email\n    firstName\n    lastName\n    invitedRole\n    managerId\n    invitationMetadata\n    invitedAt\n    expiresAt\n    invitedByUser {\n      name\n      email\n      role\n    }\n    managerUser {\n      name\n      email\n    }\n  }\n}\n\nquery GetInvitationHistory($email: String!, $limit: Int = 10) {\n  userInvitations(\n    where: {email: {_eq: $email}}\n    orderBy: {invitedAt: DESC}\n    limit: $limit\n  ) {\n    id\n    email\n    firstName\n    lastName\n    invitedRole\n    status\n    invitedAt\n    acceptedAt\n    expiresAt\n    invitedByUser {\n      name\n      email\n    }\n    acceptedByUser {\n      name\n      email\n      clerkUserId\n    }\n  }\n}\n\nquery GetInvitationsBySender($invitedBy: uuid!, $limit: Int = 50) {\n  userInvitations(\n    where: {invitedBy: {_eq: $invitedBy}}\n    orderBy: {invitedAt: DESC}\n    limit: $limit\n  ) {\n    id\n    email\n    firstName\n    lastName\n    invitedRole\n    status\n    invitedAt\n    acceptedAt\n    expiresAt\n    acceptedByUser {\n      name\n      email\n    }\n  }\n}\n\nquery GetExpiredInvitations($limit: Int = 100) {\n  userInvitations(\n    where: {status: {_eq: \"pending\"}, expiresAt: {_lt: \"now()\"}}\n    orderBy: {expiresAt: ASC}\n    limit: $limit\n  ) {\n    id\n    email\n    firstName\n    lastName\n    invitedRole\n    invitedAt\n    expiresAt\n  }\n}\n\nquery ValidateInvitationRolePermissions($invitedRole: String!, $invitedBy: uuid!) {\n  users(where: {id: {_eq: $invitedBy}}) {\n    id\n    role\n    assignedRoles {\n      assignedRole {\n        name\n        priority\n        assignedPermissions {\n          grantedPermission {\n            action\n            relatedResource {\n              name\n            }\n          }\n        }\n      }\n    }\n  }\n  roles(where: {name: {_eq: $invitedRole}}) {\n    id\n    name\n    priority\n    isSystemRole\n  }\n}\n\nquery GetInvitationById($invitationId: uuid!) {\n  userInvitations(where: {id: {_eq: $invitationId}}) {\n    id\n    email\n    firstName\n    lastName\n    invitedRole\n    managerId\n    clerkInvitationId\n    clerkTicket\n    invitationMetadata\n    invitedBy\n    invitedAt\n    acceptedAt\n    expiresAt\n    status\n    invitedByUser {\n      id\n      name\n      email\n      role\n    }\n    managerUser {\n      id\n      name\n      email\n    }\n  }\n}\n\nquery GetResendableInvitations($invitedBy: uuid!, $limit: Int = 50) {\n  userInvitations(\n    where: {invitedBy: {_eq: $invitedBy}, status: {_in: [\"pending\", \"expired\"]}}\n    orderBy: {invitedAt: DESC}\n    limit: $limit\n  ) {\n    id\n    email\n    firstName\n    lastName\n    invitedRole\n    status\n    invitedAt\n    expiresAt\n    acceptedAt\n  }\n}": typeof types.GetCurrentUserRolesDocument,
    "subscription UserAuthStatusUpdates($userId: uuid!) {\n  users(where: {id: {_eq: $userId}}) {\n    id\n    isActive\n    role\n    updatedAt\n    deactivatedAt\n    deactivatedBy\n  }\n}\n\nsubscription UserSessionUpdates($clerkUserId: String!) {\n  users(where: {clerkUserId: {_eq: $clerkUserId}}) {\n    id\n    isActive\n    role\n    updatedAt\n    clerkUserId\n  }\n}\n\nsubscription AuthEventsUpdates($userId: uuid!) {\n  authEvents(\n    where: {userId: {_eq: $userId}}\n    orderBy: {eventTime: DESC}\n    limit: 20\n  ) {\n    id\n    eventType\n    eventTime\n    ipAddress\n    userAgent\n    success\n    failureReason\n    userId\n  }\n}\n\nsubscription UserRoleUpdates($userId: uuid!) {\n  users(where: {id: {_eq: $userId}}) {\n    id\n    role\n    isStaff\n    isActive\n    assignedRoles {\n      id\n      roleId\n      assignedRole {\n        id\n        name\n        displayName\n        priority\n        isSystemRole\n      }\n    }\n    updatedAt\n  }\n}\n\nsubscription UserPermissionUpdates($userId: uuid!) {\n  users(where: {id: {_eq: $userId}}) {\n    id\n    role\n    assignedRoles {\n      roleId\n      assignedRole {\n        name\n        assignedPermissions {\n          id\n          permissionId\n          conditions\n          grantedPermission {\n            id\n            action\n            description\n            relatedResource {\n              name\n              displayName\n            }\n          }\n        }\n      }\n    }\n    updatedAt\n  }\n}\n\nsubscription RolePermissionChanges($roleId: uuid!) {\n  rolePermissions(where: {roleId: {_eq: $roleId}}) {\n    id\n    roleId\n    permissionId\n    conditions\n    createdAt\n    updatedAt\n    grantedPermission {\n      id\n      action\n      description\n      relatedResource {\n        name\n        displayName\n      }\n    }\n  }\n}\n\nsubscription FailedAuthAttemptsUpdates {\n  authEvents(\n    where: {success: {_eq: false}, eventTime: {_gte: \"now() - interval '1 hour'\"}}\n    orderBy: {eventTime: DESC}\n  ) {\n    id\n    eventType\n    eventTime\n    ipAddress\n    userAgent\n    failureReason\n    userId\n  }\n}\n\nsubscription SuspiciousActivityUpdates {\n  authEvents(\n    where: {_or: [{eventType: {_eq: \"multiple_failed_attempts\"}}, {eventType: {_eq: \"unusual_location\"}}, {eventType: {_eq: \"suspicious_activity\"}}], eventTime: {_gte: \"now() - interval '24 hours'\"}}\n    orderBy: {eventTime: DESC}\n  ) {\n    id\n    eventType\n    eventTime\n    ipAddress\n    userAgent\n    userId\n    metadata\n  }\n}\n\nsubscription SecurityAlertsUpdates {\n  authEvents(\n    where: {eventType: {_in: [\"account_locked\", \"unauthorized_access_attempt\", \"privilege_escalation_attempt\", \"suspicious_activity\"]}, eventTime: {_gte: \"now() - interval '1 hour'\"}}\n    orderBy: {eventTime: DESC}\n  ) {\n    id\n    eventType\n    eventTime\n    ipAddress\n    userId\n    metadata\n  }\n}\n\nsubscription PermissionChangesUpdates {\n  permissionAuditLogs(orderBy: {timestamp: DESC}, limit: 50) {\n    id\n    action\n    resource\n    operation\n    previousValue\n    newValue\n    timestamp\n    userId\n    performedByUser {\n      name\n      email\n      role\n    }\n  }\n}\n\nsubscription RoleAssignmentUpdates {\n  userRoles(orderBy: {createdAt: DESC}) {\n    id\n    userId\n    roleId\n    createdAt\n    updatedAt\n    roleUser {\n      id\n      name\n      email\n    }\n    assignedRole {\n      id\n      name\n      displayName\n      priority\n    }\n  }\n}\n\nsubscription AuthSystemHealthUpdates {\n  authEvents(\n    where: {eventType: {_eq: \"login\"}, success: {_eq: true}, eventTime: {_gte: \"now() - interval '1 hour'\"}}\n    orderBy: {eventTime: DESC}\n    limit: 10\n  ) {\n    id\n    eventType\n    eventTime\n    userId\n    success\n  }\n}\n\nsubscription ActiveSessionsUpdates {\n  authEvents(\n    where: {eventType: {_eq: \"session_active\"}, eventTime: {_gte: \"now() - interval '30 minutes'\"}}\n    orderBy: {eventTime: DESC}\n  ) {\n    id\n    userId\n    eventTime\n    ipAddress\n  }\n}\n\nsubscription UserSecurityStatusUpdates($userId: uuid!) {\n  users(where: {id: {_eq: $userId}}) {\n    id\n    isActive\n    role\n    updatedAt\n  }\n}\n\nsubscription MFAEventsUpdates($userId: uuid!) {\n  authEvents(\n    where: {userId: {_eq: $userId}, eventType: {_like: \"mfa%\"}}\n    orderBy: {eventTime: DESC}\n    limit: 10\n  ) {\n    id\n    eventType\n    eventTime\n    success\n    failureReason\n    metadata\n  }\n}\n\nsubscription UserDeactivationUpdates {\n  users(\n    where: {isActive: {_eq: false}, deactivatedAt: {_gte: \"now() - interval '24 hours'\"}}\n    orderBy: {deactivatedAt: DESC}\n  ) {\n    id\n    name\n    email\n    role\n    deactivatedAt\n    deactivatedBy\n  }\n}\n\nsubscription PrivilegeChangesUpdates {\n  users(\n    where: {role: {_in: [\"org_admin\", \"manager\", \"developer\"]}, updatedAt: {_gte: \"now() - interval '1 hour'\"}}\n    orderBy: {updatedAt: DESC}\n  ) {\n    id\n    name\n    email\n    role\n    updatedAt\n    assignedRoles {\n      assignedRole {\n        name\n        priority\n      }\n    }\n  }\n}\n\nsubscription ComplianceEventsUpdates {\n  permissionAuditLogs(\n    where: {action: {_in: [\"role_assigned\", \"role_removed\", \"permission_granted\", \"permission_revoked\", \"admin_access\"]}, timestamp: {_gte: \"now() - interval '1 hour'\"}}\n    orderBy: {timestamp: DESC}\n  ) {\n    id\n    action\n    resource\n    operation\n    previousValue\n    newValue\n    timestamp\n    userId\n    performedByUser {\n      name\n      email\n      role\n    }\n  }\n}\n\nsubscription DataAccessMonitoring($userId: uuid!) {\n  dataAccessLogs(\n    where: {userId: {_eq: $userId}, accessedAt: {_gte: \"now() - interval '24 hours'\"}}\n    orderBy: {accessedAt: DESC}\n    limit: 100\n  ) {\n    id\n    userId\n    resourceType\n    resourceId\n    accessType\n    accessedAt\n    ipAddress\n    dataClassification\n    rowCount\n  }\n}\n\nsubscription SecurityIncidentsUpdates {\n  authEvents(\n    where: {eventType: {_in: [\"security_incident\", \"data_breach_attempt\", \"unauthorized_admin_access\", \"multiple_failed_mfa\"]}, eventTime: {_gte: \"now() - interval '24 hours'\"}}\n    orderBy: {eventTime: DESC}\n  ) {\n    id\n    eventType\n    eventTime\n    userId\n    ipAddress\n    userAgent\n    metadata\n  }\n}\n\nsubscription EmergencyAuthUpdates {\n  authEvents(\n    where: {eventType: {_eq: \"emergency_access\"}, eventTime: {_gte: \"now() - interval '1 hour'\"}}\n    orderBy: {eventTime: DESC}\n  ) {\n    id\n    eventType\n    eventTime\n    userId\n    ipAddress\n    metadata\n  }\n}": typeof types.UserAuthStatusUpdatesDocument,
    "fragment UserCore on users {\n  id\n  name\n  email\n  username\n  role\n  isActive\n  isStaff\n  clerkUserId\n  createdAt\n  updatedAt\n}\n\nfragment UserBasic on users {\n  id\n  name\n  email\n  role\n  isActive\n}\n\nfragment UserWithManager on users {\n  ...UserCore\n  managerId\n  managerUser {\n    ...UserBasic\n  }\n}\n\nfragment RoleCore on roles {\n  id\n  name\n  description\n  displayName\n  priority\n  isSystemRole\n  createdAt\n}\n\nfragment PermissionCore on permissions {\n  id\n  action\n  description\n  resourceId\n  createdAt\n  updatedAt\n}\n\nfragment PermissionWithResource on permissions {\n  ...PermissionCore\n  relatedResource {\n    id\n    name\n    description\n  }\n}\n\nfragment ClientCore on clients {\n  id\n  name\n  contactEmail\n  contactPerson\n  contactPhone\n  active\n  createdAt\n  updatedAt\n}\n\nfragment ClientBasic on clients {\n  id\n  name\n  active\n}\n\nfragment ResourceCore on resources {\n  id\n  name\n  displayName\n  description\n  createdAt\n  updatedAt\n}\n\nfragment UserRoleCore on userRoles {\n  id\n  userId\n  roleId\n  createdAt\n  updatedAt\n}\n\nfragment RolePermissionCore on rolePermissions {\n  id\n  roleId\n  permissionId\n  conditions\n  createdAt\n  updatedAt\n}\n\nfragment AuditFields on auditLogs {\n  id\n  eventTime\n  action\n  resourceType\n  resourceId\n  userId\n  ipAddress\n  userAgent\n  success\n  userEmail\n  userRole\n}": typeof types.UserCoreFragmentDoc,
};
const documents: Documents = {
    "fragment AuthUserCore on users {\n  id\n  name\n  email\n  role\n  isActive\n  clerkUserId\n  createdAt\n  updatedAt\n}\n\nfragment AuthUserWithRoles on users {\n  ...AuthUserCore\n  assignedRoles {\n    id\n    roleId\n    assignedRole {\n      id\n      name\n      displayName\n      description\n      priority\n      isSystemRole\n    }\n  }\n}\n\nfragment AuthRoleCore on roles {\n  id\n  name\n  displayName\n  description\n  priority\n  isSystemRole\n  createdAt\n  updatedAt\n}\n\nfragment AuthPermissionCore on permissions {\n  id\n  resourceId\n  action\n  description\n  legacyPermissionName\n  createdAt\n  updatedAt\n}\n\nfragment AuthUserRoleWithDetails on userRoles {\n  id\n  userId\n  roleId\n  createdAt\n  updatedAt\n  roleUser {\n    id\n    name\n    email\n    isActive\n  }\n  assignedRole {\n    id\n    name\n    displayName\n    description\n    priority\n  }\n}\n\nfragment PermissionOverrideCore on permissionOverrides {\n  id\n  userId\n  role\n  resource\n  operation\n  granted\n  conditions\n  createdBy\n  expiresAt\n  createdAt\n  updatedAt\n}\n\nfragment UserInvitationCore on userInvitations {\n  id\n  email\n  firstName\n  lastName\n  invitedRole\n  managerId\n  clerkInvitationId\n  clerkTicket\n  invitationMetadata\n  invitedBy\n  invitedAt\n  acceptedAt\n  acceptedBy\n  expiresAt\n  status\n  createdAt\n  updatedAt\n}\n\nfragment UserInvitationWithDetails on userInvitations {\n  ...UserInvitationCore\n  invitedByUser {\n    id\n    name\n    email\n    role\n  }\n  managerUser {\n    id\n    name\n    email\n    role\n  }\n  acceptedByUser {\n    id\n    name\n    email\n    clerkUserId\n    isActive\n  }\n}": types.AuthUserCoreFragmentDoc,
    "mutation AssignRoleToUser($userId: uuid!, $roleId: uuid!) {\n  insertUserRole(object: {userId: $userId, roleId: $roleId}) {\n    id\n    userId\n    roleId\n    assignedRole {\n      name\n      displayName\n      priority\n    }\n  }\n}\n\nmutation RemoveRoleFromUser($userRoleId: uuid!) {\n  deleteUserRoleById(id: $userRoleId) {\n    id\n    roleId\n  }\n}\n\nmutation UpdateUserRoleAssignment($id: uuid!, $set: userRolesSetInput!) {\n  updateUserRoleById(pkColumns: {id: $id}, _set: $set) {\n    id\n    userId\n    roleId\n    updatedAt\n  }\n}\n\nmutation SetUserRoles($userId: uuid!, $roleIds: [userRolesInsertInput!]!) {\n  bulkDeleteUserRoles(where: {userId: {_eq: $userId}}) {\n    affectedRows\n  }\n  bulkInsertUserRoles(objects: $roleIds) {\n    returning {\n      id\n      userId\n      roleId\n      assignedRole {\n        name\n        displayName\n      }\n    }\n    affectedRows\n  }\n}\n\nmutation CreateUserPermissionOverride($userId: uuid!, $resource: String!, $operation: String!, $granted: Boolean!, $conditions: jsonb = null, $expiresAt: timestamptz = null, $reason: String = null) {\n  insertPermissionOverride(\n    object: {userId: $userId, resource: $resource, operation: $operation, granted: $granted, conditions: $conditions, expiresAt: $expiresAt, reason: $reason}\n  ) {\n    id\n    userId\n    resource\n    operation\n    granted\n    conditions\n    expiresAt\n    reason\n    createdAt\n  }\n}\n\nmutation UpdateUserPermissionOverride($id: uuid!, $set: permissionOverridesSetInput!) {\n  updatePermissionOverrideById(pkColumns: {id: $id}, _set: $set) {\n    id\n    userId\n    resource\n    operation\n    granted\n    expiresAt\n    reason\n    updatedAt\n  }\n}\n\nmutation RemoveUserPermissionOverride($id: uuid!) {\n  deletePermissionOverrideById(id: $id) {\n    id\n    userId\n    resource\n    operation\n  }\n}\n\nmutation CreateUserInvitation($email: String!, $firstName: String!, $lastName: String!, $invitedRole: String!, $managerId: uuid, $clerkInvitationId: String, $clerkTicket: String, $invitationMetadata: jsonb, $invitedBy: uuid!, $expiresAt: timestamptz!) {\n  insertUserInvitation(\n    object: {email: $email, firstName: $firstName, lastName: $lastName, invitedRole: $invitedRole, managerId: $managerId, clerkInvitationId: $clerkInvitationId, clerkTicket: $clerkTicket, invitationMetadata: $invitationMetadata, invitedBy: $invitedBy, expiresAt: $expiresAt, status: \"pending\"}\n  ) {\n    id\n    email\n    firstName\n    lastName\n    invitedRole\n    managerId\n    clerkTicket\n    invitedAt\n    expiresAt\n    status\n    invitedByUser {\n      name\n      email\n      role\n    }\n  }\n}\n\nmutation CompleteInvitationAcceptance($invitationId: uuid!, $clerkUserId: String!, $userEmail: String!, $userName: String!) {\n  updateUserInvitationById(\n    pkColumns: {id: $invitationId}\n    _set: {status: \"accepted\", acceptedAt: \"now()\"}\n  ) {\n    id\n    email\n    firstName\n    lastName\n    invitedRole\n    managerId\n    status\n    acceptedAt\n  }\n  insertUser(\n    object: {clerkUserId: $clerkUserId, email: $userEmail, name: $userName, isActive: true, isStaff: true}\n  ) {\n    id\n    clerkUserId\n    email\n    name\n    isActive\n  }\n}\n\nmutation AssignInvitationRole($userId: uuid!, $roleId: uuid!, $invitationId: uuid!) {\n  insertUserRole(object: {userId: $userId, roleId: $roleId}) {\n    id\n    userId\n    roleId\n    assignedRole {\n      name\n      displayName\n      priority\n    }\n  }\n  updateUserInvitationById(\n    pkColumns: {id: $invitationId}\n    _set: {acceptedBy: $userId}\n  ) {\n    id\n    acceptedBy\n  }\n  insertPermissionAuditLog(\n    object: {userId: $userId, action: \"role_assigned_from_invitation\", resource: \"user_roles\", newValue: {roleId: $roleId, invitationId: $invitationId}, timestamp: \"now()\"}\n  ) {\n    id\n    timestamp\n  }\n}\n\nmutation CancelUserInvitation($invitationId: uuid!) {\n  updateUserInvitationById(\n    pkColumns: {id: $invitationId}\n    _set: {status: \"cancelled\"}\n  ) {\n    id\n    status\n    updatedAt\n  }\n}\n\nmutation ResendUserInvitation($invitationId: uuid!, $newExpiresAt: timestamptz!, $newClerkTicket: String, $newClerkInvitationId: String) {\n  updateUserInvitationById(\n    pkColumns: {id: $invitationId}\n    _set: {status: \"pending\", expiresAt: $newExpiresAt, clerkTicket: $newClerkTicket, clerkInvitationId: $newClerkInvitationId, updatedAt: \"now()\"}\n  ) {\n    id\n    email\n    firstName\n    lastName\n    invitedRole\n    status\n    expiresAt\n    updatedAt\n    invitedByUser {\n      name\n      email\n    }\n  }\n}\n\nmutation MarkExpiredInvitations {\n  bulkUpdateUserInvitations(\n    where: {status: {_eq: \"pending\"}, expiresAt: {_lt: \"now()\"}}\n    _set: {status: \"expired\"}\n  ) {\n    affectedRows\n    returning {\n      id\n      email\n      status\n      expiresAt\n    }\n  }\n}": types.AssignRoleToUserDocument,
    "query GetCurrentUserRoles {\n  users(limit: 1) {\n    id\n    email\n    isActive\n    isStaff\n    assignedRoles {\n      assignedRole {\n        id\n        name\n        displayName\n        description\n        priority\n        isSystemRole\n        assignedPermissions {\n          grantedPermission {\n            id\n            action\n            description\n            relatedResource {\n              id\n              name\n              displayName\n              description\n            }\n          }\n          conditions\n        }\n      }\n    }\n  }\n}\n\nquery GetAllRoles {\n  roles(orderBy: {priority: DESC}) {\n    id\n    name\n    displayName\n    description\n    priority\n    isSystemRole\n    assignedPermissions {\n      id\n      conditions\n      grantedPermission {\n        id\n        action\n        description\n        relatedResource {\n          id\n          name\n          displayName\n          description\n        }\n      }\n    }\n  }\n}\n\nquery GetResourcesAndPermissions {\n  resources(orderBy: {name: ASC}) {\n    id\n    name\n    displayName\n    description\n    availablePermissions {\n      id\n      action\n      description\n    }\n  }\n}\n\nquery GetUsersWithRoles($limit: Int = 50, $offset: Int = 0) {\n  users(limit: $limit, offset: $offset, orderBy: {createdAt: DESC}) {\n    id\n    email\n    isActive\n    isStaff\n    assignedRoles {\n      id\n      assignedRole {\n        id\n        name\n        displayName\n        priority\n      }\n    }\n  }\n}\n\nquery GetUserPermissionOverrides($userId: uuid!) {\n  permissionOverrides(where: {userId: {_eq: $userId}}, orderBy: {createdAt: DESC}) {\n    id\n    resource\n    operation\n    granted\n    conditions\n    expiresAt\n  }\n}\n\nquery GetRolePermissionOverrides($roleName: String!) {\n  permissionOverrides(where: {role: {_eq: $roleName}}, orderBy: {createdAt: DESC}) {\n    id\n    resource\n    operation\n    granted\n    conditions\n    expiresAt\n  }\n}\n\nquery SearchUsersByEmail($emailPattern: String!) {\n  users(where: {email: {_ilike: $emailPattern}}, limit: 10, orderBy: {email: ASC}) {\n    id\n    email\n    isActive\n    assignedRoles {\n      assignedRole {\n        name\n        displayName\n      }\n    }\n  }\n}\n\nquery GetRoleHierarchy {\n  roles(orderBy: {priority: DESC}) {\n    id\n    name\n    displayName\n    description\n    priority\n    isSystemRole\n    assignedPermissionsAggregate {\n      aggregate {\n        count\n      }\n    }\n    assignedToUsersAggregate {\n      aggregate {\n        count\n      }\n    }\n  }\n}\n\nquery GetPermissionAuditLogs($limit: Int = 50, $offset: Int = 0, $startDate: timestamptz, $endDate: timestamptz) {\n  permissionAuditLogs(\n    where: {timestamp: {_gte: $startDate, _lte: $endDate}}\n    orderBy: {timestamp: DESC}\n    limit: $limit\n    offset: $offset\n  ) {\n    id\n    userId\n    targetUserId\n    action\n    resource\n    previousValue\n    newValue\n    timestamp\n    createdAt\n  }\n}\n\nquery GetPendingInvitations($limit: Int = 50, $offset: Int = 0) {\n  userInvitations(\n    where: {status: {_eq: \"pending\"}}\n    orderBy: {invitedAt: DESC}\n    limit: $limit\n    offset: $offset\n  ) {\n    id\n    email\n    firstName\n    lastName\n    invitedRole\n    managerId\n    invitedAt\n    expiresAt\n    status\n    invitedByUser {\n      name\n      email\n      role\n    }\n    managerUser {\n      name\n      email\n    }\n  }\n}\n\nquery GetInvitationByTicket($clerkTicket: String!) {\n  userInvitations(\n    where: {clerkTicket: {_eq: $clerkTicket}, status: {_eq: \"pending\"}, expiresAt: {_gt: \"now()\"}}\n    limit: 1\n  ) {\n    id\n    email\n    firstName\n    lastName\n    invitedRole\n    managerId\n    invitationMetadata\n    invitedAt\n    expiresAt\n    invitedByUser {\n      name\n      email\n      role\n    }\n    managerUser {\n      name\n      email\n    }\n  }\n}\n\nquery GetInvitationHistory($email: String!, $limit: Int = 10) {\n  userInvitations(\n    where: {email: {_eq: $email}}\n    orderBy: {invitedAt: DESC}\n    limit: $limit\n  ) {\n    id\n    email\n    firstName\n    lastName\n    invitedRole\n    status\n    invitedAt\n    acceptedAt\n    expiresAt\n    invitedByUser {\n      name\n      email\n    }\n    acceptedByUser {\n      name\n      email\n      clerkUserId\n    }\n  }\n}\n\nquery GetInvitationsBySender($invitedBy: uuid!, $limit: Int = 50) {\n  userInvitations(\n    where: {invitedBy: {_eq: $invitedBy}}\n    orderBy: {invitedAt: DESC}\n    limit: $limit\n  ) {\n    id\n    email\n    firstName\n    lastName\n    invitedRole\n    status\n    invitedAt\n    acceptedAt\n    expiresAt\n    acceptedByUser {\n      name\n      email\n    }\n  }\n}\n\nquery GetExpiredInvitations($limit: Int = 100) {\n  userInvitations(\n    where: {status: {_eq: \"pending\"}, expiresAt: {_lt: \"now()\"}}\n    orderBy: {expiresAt: ASC}\n    limit: $limit\n  ) {\n    id\n    email\n    firstName\n    lastName\n    invitedRole\n    invitedAt\n    expiresAt\n  }\n}\n\nquery ValidateInvitationRolePermissions($invitedRole: String!, $invitedBy: uuid!) {\n  users(where: {id: {_eq: $invitedBy}}) {\n    id\n    role\n    assignedRoles {\n      assignedRole {\n        name\n        priority\n        assignedPermissions {\n          grantedPermission {\n            action\n            relatedResource {\n              name\n            }\n          }\n        }\n      }\n    }\n  }\n  roles(where: {name: {_eq: $invitedRole}}) {\n    id\n    name\n    priority\n    isSystemRole\n  }\n}\n\nquery GetInvitationById($invitationId: uuid!) {\n  userInvitations(where: {id: {_eq: $invitationId}}) {\n    id\n    email\n    firstName\n    lastName\n    invitedRole\n    managerId\n    clerkInvitationId\n    clerkTicket\n    invitationMetadata\n    invitedBy\n    invitedAt\n    acceptedAt\n    expiresAt\n    status\n    invitedByUser {\n      id\n      name\n      email\n      role\n    }\n    managerUser {\n      id\n      name\n      email\n    }\n  }\n}\n\nquery GetResendableInvitations($invitedBy: uuid!, $limit: Int = 50) {\n  userInvitations(\n    where: {invitedBy: {_eq: $invitedBy}, status: {_in: [\"pending\", \"expired\"]}}\n    orderBy: {invitedAt: DESC}\n    limit: $limit\n  ) {\n    id\n    email\n    firstName\n    lastName\n    invitedRole\n    status\n    invitedAt\n    expiresAt\n    acceptedAt\n  }\n}": types.GetCurrentUserRolesDocument,
    "subscription UserAuthStatusUpdates($userId: uuid!) {\n  users(where: {id: {_eq: $userId}}) {\n    id\n    isActive\n    role\n    updatedAt\n    deactivatedAt\n    deactivatedBy\n  }\n}\n\nsubscription UserSessionUpdates($clerkUserId: String!) {\n  users(where: {clerkUserId: {_eq: $clerkUserId}}) {\n    id\n    isActive\n    role\n    updatedAt\n    clerkUserId\n  }\n}\n\nsubscription AuthEventsUpdates($userId: uuid!) {\n  authEvents(\n    where: {userId: {_eq: $userId}}\n    orderBy: {eventTime: DESC}\n    limit: 20\n  ) {\n    id\n    eventType\n    eventTime\n    ipAddress\n    userAgent\n    success\n    failureReason\n    userId\n  }\n}\n\nsubscription UserRoleUpdates($userId: uuid!) {\n  users(where: {id: {_eq: $userId}}) {\n    id\n    role\n    isStaff\n    isActive\n    assignedRoles {\n      id\n      roleId\n      assignedRole {\n        id\n        name\n        displayName\n        priority\n        isSystemRole\n      }\n    }\n    updatedAt\n  }\n}\n\nsubscription UserPermissionUpdates($userId: uuid!) {\n  users(where: {id: {_eq: $userId}}) {\n    id\n    role\n    assignedRoles {\n      roleId\n      assignedRole {\n        name\n        assignedPermissions {\n          id\n          permissionId\n          conditions\n          grantedPermission {\n            id\n            action\n            description\n            relatedResource {\n              name\n              displayName\n            }\n          }\n        }\n      }\n    }\n    updatedAt\n  }\n}\n\nsubscription RolePermissionChanges($roleId: uuid!) {\n  rolePermissions(where: {roleId: {_eq: $roleId}}) {\n    id\n    roleId\n    permissionId\n    conditions\n    createdAt\n    updatedAt\n    grantedPermission {\n      id\n      action\n      description\n      relatedResource {\n        name\n        displayName\n      }\n    }\n  }\n}\n\nsubscription FailedAuthAttemptsUpdates {\n  authEvents(\n    where: {success: {_eq: false}, eventTime: {_gte: \"now() - interval '1 hour'\"}}\n    orderBy: {eventTime: DESC}\n  ) {\n    id\n    eventType\n    eventTime\n    ipAddress\n    userAgent\n    failureReason\n    userId\n  }\n}\n\nsubscription SuspiciousActivityUpdates {\n  authEvents(\n    where: {_or: [{eventType: {_eq: \"multiple_failed_attempts\"}}, {eventType: {_eq: \"unusual_location\"}}, {eventType: {_eq: \"suspicious_activity\"}}], eventTime: {_gte: \"now() - interval '24 hours'\"}}\n    orderBy: {eventTime: DESC}\n  ) {\n    id\n    eventType\n    eventTime\n    ipAddress\n    userAgent\n    userId\n    metadata\n  }\n}\n\nsubscription SecurityAlertsUpdates {\n  authEvents(\n    where: {eventType: {_in: [\"account_locked\", \"unauthorized_access_attempt\", \"privilege_escalation_attempt\", \"suspicious_activity\"]}, eventTime: {_gte: \"now() - interval '1 hour'\"}}\n    orderBy: {eventTime: DESC}\n  ) {\n    id\n    eventType\n    eventTime\n    ipAddress\n    userId\n    metadata\n  }\n}\n\nsubscription PermissionChangesUpdates {\n  permissionAuditLogs(orderBy: {timestamp: DESC}, limit: 50) {\n    id\n    action\n    resource\n    operation\n    previousValue\n    newValue\n    timestamp\n    userId\n    performedByUser {\n      name\n      email\n      role\n    }\n  }\n}\n\nsubscription RoleAssignmentUpdates {\n  userRoles(orderBy: {createdAt: DESC}) {\n    id\n    userId\n    roleId\n    createdAt\n    updatedAt\n    roleUser {\n      id\n      name\n      email\n    }\n    assignedRole {\n      id\n      name\n      displayName\n      priority\n    }\n  }\n}\n\nsubscription AuthSystemHealthUpdates {\n  authEvents(\n    where: {eventType: {_eq: \"login\"}, success: {_eq: true}, eventTime: {_gte: \"now() - interval '1 hour'\"}}\n    orderBy: {eventTime: DESC}\n    limit: 10\n  ) {\n    id\n    eventType\n    eventTime\n    userId\n    success\n  }\n}\n\nsubscription ActiveSessionsUpdates {\n  authEvents(\n    where: {eventType: {_eq: \"session_active\"}, eventTime: {_gte: \"now() - interval '30 minutes'\"}}\n    orderBy: {eventTime: DESC}\n  ) {\n    id\n    userId\n    eventTime\n    ipAddress\n  }\n}\n\nsubscription UserSecurityStatusUpdates($userId: uuid!) {\n  users(where: {id: {_eq: $userId}}) {\n    id\n    isActive\n    role\n    updatedAt\n  }\n}\n\nsubscription MFAEventsUpdates($userId: uuid!) {\n  authEvents(\n    where: {userId: {_eq: $userId}, eventType: {_like: \"mfa%\"}}\n    orderBy: {eventTime: DESC}\n    limit: 10\n  ) {\n    id\n    eventType\n    eventTime\n    success\n    failureReason\n    metadata\n  }\n}\n\nsubscription UserDeactivationUpdates {\n  users(\n    where: {isActive: {_eq: false}, deactivatedAt: {_gte: \"now() - interval '24 hours'\"}}\n    orderBy: {deactivatedAt: DESC}\n  ) {\n    id\n    name\n    email\n    role\n    deactivatedAt\n    deactivatedBy\n  }\n}\n\nsubscription PrivilegeChangesUpdates {\n  users(\n    where: {role: {_in: [\"org_admin\", \"manager\", \"developer\"]}, updatedAt: {_gte: \"now() - interval '1 hour'\"}}\n    orderBy: {updatedAt: DESC}\n  ) {\n    id\n    name\n    email\n    role\n    updatedAt\n    assignedRoles {\n      assignedRole {\n        name\n        priority\n      }\n    }\n  }\n}\n\nsubscription ComplianceEventsUpdates {\n  permissionAuditLogs(\n    where: {action: {_in: [\"role_assigned\", \"role_removed\", \"permission_granted\", \"permission_revoked\", \"admin_access\"]}, timestamp: {_gte: \"now() - interval '1 hour'\"}}\n    orderBy: {timestamp: DESC}\n  ) {\n    id\n    action\n    resource\n    operation\n    previousValue\n    newValue\n    timestamp\n    userId\n    performedByUser {\n      name\n      email\n      role\n    }\n  }\n}\n\nsubscription DataAccessMonitoring($userId: uuid!) {\n  dataAccessLogs(\n    where: {userId: {_eq: $userId}, accessedAt: {_gte: \"now() - interval '24 hours'\"}}\n    orderBy: {accessedAt: DESC}\n    limit: 100\n  ) {\n    id\n    userId\n    resourceType\n    resourceId\n    accessType\n    accessedAt\n    ipAddress\n    dataClassification\n    rowCount\n  }\n}\n\nsubscription SecurityIncidentsUpdates {\n  authEvents(\n    where: {eventType: {_in: [\"security_incident\", \"data_breach_attempt\", \"unauthorized_admin_access\", \"multiple_failed_mfa\"]}, eventTime: {_gte: \"now() - interval '24 hours'\"}}\n    orderBy: {eventTime: DESC}\n  ) {\n    id\n    eventType\n    eventTime\n    userId\n    ipAddress\n    userAgent\n    metadata\n  }\n}\n\nsubscription EmergencyAuthUpdates {\n  authEvents(\n    where: {eventType: {_eq: \"emergency_access\"}, eventTime: {_gte: \"now() - interval '1 hour'\"}}\n    orderBy: {eventTime: DESC}\n  ) {\n    id\n    eventType\n    eventTime\n    userId\n    ipAddress\n    metadata\n  }\n}": types.UserAuthStatusUpdatesDocument,
    "fragment UserCore on users {\n  id\n  name\n  email\n  username\n  role\n  isActive\n  isStaff\n  clerkUserId\n  createdAt\n  updatedAt\n}\n\nfragment UserBasic on users {\n  id\n  name\n  email\n  role\n  isActive\n}\n\nfragment UserWithManager on users {\n  ...UserCore\n  managerId\n  managerUser {\n    ...UserBasic\n  }\n}\n\nfragment RoleCore on roles {\n  id\n  name\n  description\n  displayName\n  priority\n  isSystemRole\n  createdAt\n}\n\nfragment PermissionCore on permissions {\n  id\n  action\n  description\n  resourceId\n  createdAt\n  updatedAt\n}\n\nfragment PermissionWithResource on permissions {\n  ...PermissionCore\n  relatedResource {\n    id\n    name\n    description\n  }\n}\n\nfragment ClientCore on clients {\n  id\n  name\n  contactEmail\n  contactPerson\n  contactPhone\n  active\n  createdAt\n  updatedAt\n}\n\nfragment ClientBasic on clients {\n  id\n  name\n  active\n}\n\nfragment ResourceCore on resources {\n  id\n  name\n  displayName\n  description\n  createdAt\n  updatedAt\n}\n\nfragment UserRoleCore on userRoles {\n  id\n  userId\n  roleId\n  createdAt\n  updatedAt\n}\n\nfragment RolePermissionCore on rolePermissions {\n  id\n  roleId\n  permissionId\n  conditions\n  createdAt\n  updatedAt\n}\n\nfragment AuditFields on auditLogs {\n  id\n  eventTime\n  action\n  resourceType\n  resourceId\n  userId\n  ipAddress\n  userAgent\n  success\n  userEmail\n  userRole\n}": types.UserCoreFragmentDoc,
};

/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 *
 *
 * @example
 * ```ts
 * const query = graphql(`query GetUser($id: ID!) { user(id: $id) { name } }`);
 * ```
 *
 * The query argument is unknown!
 * Please regenerate the types.
 */
export function graphql(source: string): unknown;

/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "fragment AuthUserCore on users {\n  id\n  name\n  email\n  role\n  isActive\n  clerkUserId\n  createdAt\n  updatedAt\n}\n\nfragment AuthUserWithRoles on users {\n  ...AuthUserCore\n  assignedRoles {\n    id\n    roleId\n    assignedRole {\n      id\n      name\n      displayName\n      description\n      priority\n      isSystemRole\n    }\n  }\n}\n\nfragment AuthRoleCore on roles {\n  id\n  name\n  displayName\n  description\n  priority\n  isSystemRole\n  createdAt\n  updatedAt\n}\n\nfragment AuthPermissionCore on permissions {\n  id\n  resourceId\n  action\n  description\n  legacyPermissionName\n  createdAt\n  updatedAt\n}\n\nfragment AuthUserRoleWithDetails on userRoles {\n  id\n  userId\n  roleId\n  createdAt\n  updatedAt\n  roleUser {\n    id\n    name\n    email\n    isActive\n  }\n  assignedRole {\n    id\n    name\n    displayName\n    description\n    priority\n  }\n}\n\nfragment PermissionOverrideCore on permissionOverrides {\n  id\n  userId\n  role\n  resource\n  operation\n  granted\n  conditions\n  createdBy\n  expiresAt\n  createdAt\n  updatedAt\n}\n\nfragment UserInvitationCore on userInvitations {\n  id\n  email\n  firstName\n  lastName\n  invitedRole\n  managerId\n  clerkInvitationId\n  clerkTicket\n  invitationMetadata\n  invitedBy\n  invitedAt\n  acceptedAt\n  acceptedBy\n  expiresAt\n  status\n  createdAt\n  updatedAt\n}\n\nfragment UserInvitationWithDetails on userInvitations {\n  ...UserInvitationCore\n  invitedByUser {\n    id\n    name\n    email\n    role\n  }\n  managerUser {\n    id\n    name\n    email\n    role\n  }\n  acceptedByUser {\n    id\n    name\n    email\n    clerkUserId\n    isActive\n  }\n}"): (typeof documents)["fragment AuthUserCore on users {\n  id\n  name\n  email\n  role\n  isActive\n  clerkUserId\n  createdAt\n  updatedAt\n}\n\nfragment AuthUserWithRoles on users {\n  ...AuthUserCore\n  assignedRoles {\n    id\n    roleId\n    assignedRole {\n      id\n      name\n      displayName\n      description\n      priority\n      isSystemRole\n    }\n  }\n}\n\nfragment AuthRoleCore on roles {\n  id\n  name\n  displayName\n  description\n  priority\n  isSystemRole\n  createdAt\n  updatedAt\n}\n\nfragment AuthPermissionCore on permissions {\n  id\n  resourceId\n  action\n  description\n  legacyPermissionName\n  createdAt\n  updatedAt\n}\n\nfragment AuthUserRoleWithDetails on userRoles {\n  id\n  userId\n  roleId\n  createdAt\n  updatedAt\n  roleUser {\n    id\n    name\n    email\n    isActive\n  }\n  assignedRole {\n    id\n    name\n    displayName\n    description\n    priority\n  }\n}\n\nfragment PermissionOverrideCore on permissionOverrides {\n  id\n  userId\n  role\n  resource\n  operation\n  granted\n  conditions\n  createdBy\n  expiresAt\n  createdAt\n  updatedAt\n}\n\nfragment UserInvitationCore on userInvitations {\n  id\n  email\n  firstName\n  lastName\n  invitedRole\n  managerId\n  clerkInvitationId\n  clerkTicket\n  invitationMetadata\n  invitedBy\n  invitedAt\n  acceptedAt\n  acceptedBy\n  expiresAt\n  status\n  createdAt\n  updatedAt\n}\n\nfragment UserInvitationWithDetails on userInvitations {\n  ...UserInvitationCore\n  invitedByUser {\n    id\n    name\n    email\n    role\n  }\n  managerUser {\n    id\n    name\n    email\n    role\n  }\n  acceptedByUser {\n    id\n    name\n    email\n    clerkUserId\n    isActive\n  }\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "mutation AssignRoleToUser($userId: uuid!, $roleId: uuid!) {\n  insertUserRole(object: {userId: $userId, roleId: $roleId}) {\n    id\n    userId\n    roleId\n    assignedRole {\n      name\n      displayName\n      priority\n    }\n  }\n}\n\nmutation RemoveRoleFromUser($userRoleId: uuid!) {\n  deleteUserRoleById(id: $userRoleId) {\n    id\n    roleId\n  }\n}\n\nmutation UpdateUserRoleAssignment($id: uuid!, $set: userRolesSetInput!) {\n  updateUserRoleById(pkColumns: {id: $id}, _set: $set) {\n    id\n    userId\n    roleId\n    updatedAt\n  }\n}\n\nmutation SetUserRoles($userId: uuid!, $roleIds: [userRolesInsertInput!]!) {\n  bulkDeleteUserRoles(where: {userId: {_eq: $userId}}) {\n    affectedRows\n  }\n  bulkInsertUserRoles(objects: $roleIds) {\n    returning {\n      id\n      userId\n      roleId\n      assignedRole {\n        name\n        displayName\n      }\n    }\n    affectedRows\n  }\n}\n\nmutation CreateUserPermissionOverride($userId: uuid!, $resource: String!, $operation: String!, $granted: Boolean!, $conditions: jsonb = null, $expiresAt: timestamptz = null, $reason: String = null) {\n  insertPermissionOverride(\n    object: {userId: $userId, resource: $resource, operation: $operation, granted: $granted, conditions: $conditions, expiresAt: $expiresAt, reason: $reason}\n  ) {\n    id\n    userId\n    resource\n    operation\n    granted\n    conditions\n    expiresAt\n    reason\n    createdAt\n  }\n}\n\nmutation UpdateUserPermissionOverride($id: uuid!, $set: permissionOverridesSetInput!) {\n  updatePermissionOverrideById(pkColumns: {id: $id}, _set: $set) {\n    id\n    userId\n    resource\n    operation\n    granted\n    expiresAt\n    reason\n    updatedAt\n  }\n}\n\nmutation RemoveUserPermissionOverride($id: uuid!) {\n  deletePermissionOverrideById(id: $id) {\n    id\n    userId\n    resource\n    operation\n  }\n}\n\nmutation CreateUserInvitation($email: String!, $firstName: String!, $lastName: String!, $invitedRole: String!, $managerId: uuid, $clerkInvitationId: String, $clerkTicket: String, $invitationMetadata: jsonb, $invitedBy: uuid!, $expiresAt: timestamptz!) {\n  insertUserInvitation(\n    object: {email: $email, firstName: $firstName, lastName: $lastName, invitedRole: $invitedRole, managerId: $managerId, clerkInvitationId: $clerkInvitationId, clerkTicket: $clerkTicket, invitationMetadata: $invitationMetadata, invitedBy: $invitedBy, expiresAt: $expiresAt, status: \"pending\"}\n  ) {\n    id\n    email\n    firstName\n    lastName\n    invitedRole\n    managerId\n    clerkTicket\n    invitedAt\n    expiresAt\n    status\n    invitedByUser {\n      name\n      email\n      role\n    }\n  }\n}\n\nmutation CompleteInvitationAcceptance($invitationId: uuid!, $clerkUserId: String!, $userEmail: String!, $userName: String!) {\n  updateUserInvitationById(\n    pkColumns: {id: $invitationId}\n    _set: {status: \"accepted\", acceptedAt: \"now()\"}\n  ) {\n    id\n    email\n    firstName\n    lastName\n    invitedRole\n    managerId\n    status\n    acceptedAt\n  }\n  insertUser(\n    object: {clerkUserId: $clerkUserId, email: $userEmail, name: $userName, isActive: true, isStaff: true}\n  ) {\n    id\n    clerkUserId\n    email\n    name\n    isActive\n  }\n}\n\nmutation AssignInvitationRole($userId: uuid!, $roleId: uuid!, $invitationId: uuid!) {\n  insertUserRole(object: {userId: $userId, roleId: $roleId}) {\n    id\n    userId\n    roleId\n    assignedRole {\n      name\n      displayName\n      priority\n    }\n  }\n  updateUserInvitationById(\n    pkColumns: {id: $invitationId}\n    _set: {acceptedBy: $userId}\n  ) {\n    id\n    acceptedBy\n  }\n  insertPermissionAuditLog(\n    object: {userId: $userId, action: \"role_assigned_from_invitation\", resource: \"user_roles\", newValue: {roleId: $roleId, invitationId: $invitationId}, timestamp: \"now()\"}\n  ) {\n    id\n    timestamp\n  }\n}\n\nmutation CancelUserInvitation($invitationId: uuid!) {\n  updateUserInvitationById(\n    pkColumns: {id: $invitationId}\n    _set: {status: \"cancelled\"}\n  ) {\n    id\n    status\n    updatedAt\n  }\n}\n\nmutation ResendUserInvitation($invitationId: uuid!, $newExpiresAt: timestamptz!, $newClerkTicket: String, $newClerkInvitationId: String) {\n  updateUserInvitationById(\n    pkColumns: {id: $invitationId}\n    _set: {status: \"pending\", expiresAt: $newExpiresAt, clerkTicket: $newClerkTicket, clerkInvitationId: $newClerkInvitationId, updatedAt: \"now()\"}\n  ) {\n    id\n    email\n    firstName\n    lastName\n    invitedRole\n    status\n    expiresAt\n    updatedAt\n    invitedByUser {\n      name\n      email\n    }\n  }\n}\n\nmutation MarkExpiredInvitations {\n  bulkUpdateUserInvitations(\n    where: {status: {_eq: \"pending\"}, expiresAt: {_lt: \"now()\"}}\n    _set: {status: \"expired\"}\n  ) {\n    affectedRows\n    returning {\n      id\n      email\n      status\n      expiresAt\n    }\n  }\n}"): (typeof documents)["mutation AssignRoleToUser($userId: uuid!, $roleId: uuid!) {\n  insertUserRole(object: {userId: $userId, roleId: $roleId}) {\n    id\n    userId\n    roleId\n    assignedRole {\n      name\n      displayName\n      priority\n    }\n  }\n}\n\nmutation RemoveRoleFromUser($userRoleId: uuid!) {\n  deleteUserRoleById(id: $userRoleId) {\n    id\n    roleId\n  }\n}\n\nmutation UpdateUserRoleAssignment($id: uuid!, $set: userRolesSetInput!) {\n  updateUserRoleById(pkColumns: {id: $id}, _set: $set) {\n    id\n    userId\n    roleId\n    updatedAt\n  }\n}\n\nmutation SetUserRoles($userId: uuid!, $roleIds: [userRolesInsertInput!]!) {\n  bulkDeleteUserRoles(where: {userId: {_eq: $userId}}) {\n    affectedRows\n  }\n  bulkInsertUserRoles(objects: $roleIds) {\n    returning {\n      id\n      userId\n      roleId\n      assignedRole {\n        name\n        displayName\n      }\n    }\n    affectedRows\n  }\n}\n\nmutation CreateUserPermissionOverride($userId: uuid!, $resource: String!, $operation: String!, $granted: Boolean!, $conditions: jsonb = null, $expiresAt: timestamptz = null, $reason: String = null) {\n  insertPermissionOverride(\n    object: {userId: $userId, resource: $resource, operation: $operation, granted: $granted, conditions: $conditions, expiresAt: $expiresAt, reason: $reason}\n  ) {\n    id\n    userId\n    resource\n    operation\n    granted\n    conditions\n    expiresAt\n    reason\n    createdAt\n  }\n}\n\nmutation UpdateUserPermissionOverride($id: uuid!, $set: permissionOverridesSetInput!) {\n  updatePermissionOverrideById(pkColumns: {id: $id}, _set: $set) {\n    id\n    userId\n    resource\n    operation\n    granted\n    expiresAt\n    reason\n    updatedAt\n  }\n}\n\nmutation RemoveUserPermissionOverride($id: uuid!) {\n  deletePermissionOverrideById(id: $id) {\n    id\n    userId\n    resource\n    operation\n  }\n}\n\nmutation CreateUserInvitation($email: String!, $firstName: String!, $lastName: String!, $invitedRole: String!, $managerId: uuid, $clerkInvitationId: String, $clerkTicket: String, $invitationMetadata: jsonb, $invitedBy: uuid!, $expiresAt: timestamptz!) {\n  insertUserInvitation(\n    object: {email: $email, firstName: $firstName, lastName: $lastName, invitedRole: $invitedRole, managerId: $managerId, clerkInvitationId: $clerkInvitationId, clerkTicket: $clerkTicket, invitationMetadata: $invitationMetadata, invitedBy: $invitedBy, expiresAt: $expiresAt, status: \"pending\"}\n  ) {\n    id\n    email\n    firstName\n    lastName\n    invitedRole\n    managerId\n    clerkTicket\n    invitedAt\n    expiresAt\n    status\n    invitedByUser {\n      name\n      email\n      role\n    }\n  }\n}\n\nmutation CompleteInvitationAcceptance($invitationId: uuid!, $clerkUserId: String!, $userEmail: String!, $userName: String!) {\n  updateUserInvitationById(\n    pkColumns: {id: $invitationId}\n    _set: {status: \"accepted\", acceptedAt: \"now()\"}\n  ) {\n    id\n    email\n    firstName\n    lastName\n    invitedRole\n    managerId\n    status\n    acceptedAt\n  }\n  insertUser(\n    object: {clerkUserId: $clerkUserId, email: $userEmail, name: $userName, isActive: true, isStaff: true}\n  ) {\n    id\n    clerkUserId\n    email\n    name\n    isActive\n  }\n}\n\nmutation AssignInvitationRole($userId: uuid!, $roleId: uuid!, $invitationId: uuid!) {\n  insertUserRole(object: {userId: $userId, roleId: $roleId}) {\n    id\n    userId\n    roleId\n    assignedRole {\n      name\n      displayName\n      priority\n    }\n  }\n  updateUserInvitationById(\n    pkColumns: {id: $invitationId}\n    _set: {acceptedBy: $userId}\n  ) {\n    id\n    acceptedBy\n  }\n  insertPermissionAuditLog(\n    object: {userId: $userId, action: \"role_assigned_from_invitation\", resource: \"user_roles\", newValue: {roleId: $roleId, invitationId: $invitationId}, timestamp: \"now()\"}\n  ) {\n    id\n    timestamp\n  }\n}\n\nmutation CancelUserInvitation($invitationId: uuid!) {\n  updateUserInvitationById(\n    pkColumns: {id: $invitationId}\n    _set: {status: \"cancelled\"}\n  ) {\n    id\n    status\n    updatedAt\n  }\n}\n\nmutation ResendUserInvitation($invitationId: uuid!, $newExpiresAt: timestamptz!, $newClerkTicket: String, $newClerkInvitationId: String) {\n  updateUserInvitationById(\n    pkColumns: {id: $invitationId}\n    _set: {status: \"pending\", expiresAt: $newExpiresAt, clerkTicket: $newClerkTicket, clerkInvitationId: $newClerkInvitationId, updatedAt: \"now()\"}\n  ) {\n    id\n    email\n    firstName\n    lastName\n    invitedRole\n    status\n    expiresAt\n    updatedAt\n    invitedByUser {\n      name\n      email\n    }\n  }\n}\n\nmutation MarkExpiredInvitations {\n  bulkUpdateUserInvitations(\n    where: {status: {_eq: \"pending\"}, expiresAt: {_lt: \"now()\"}}\n    _set: {status: \"expired\"}\n  ) {\n    affectedRows\n    returning {\n      id\n      email\n      status\n      expiresAt\n    }\n  }\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "query GetCurrentUserRoles {\n  users(limit: 1) {\n    id\n    email\n    isActive\n    isStaff\n    assignedRoles {\n      assignedRole {\n        id\n        name\n        displayName\n        description\n        priority\n        isSystemRole\n        assignedPermissions {\n          grantedPermission {\n            id\n            action\n            description\n            relatedResource {\n              id\n              name\n              displayName\n              description\n            }\n          }\n          conditions\n        }\n      }\n    }\n  }\n}\n\nquery GetAllRoles {\n  roles(orderBy: {priority: DESC}) {\n    id\n    name\n    displayName\n    description\n    priority\n    isSystemRole\n    assignedPermissions {\n      id\n      conditions\n      grantedPermission {\n        id\n        action\n        description\n        relatedResource {\n          id\n          name\n          displayName\n          description\n        }\n      }\n    }\n  }\n}\n\nquery GetResourcesAndPermissions {\n  resources(orderBy: {name: ASC}) {\n    id\n    name\n    displayName\n    description\n    availablePermissions {\n      id\n      action\n      description\n    }\n  }\n}\n\nquery GetUsersWithRoles($limit: Int = 50, $offset: Int = 0) {\n  users(limit: $limit, offset: $offset, orderBy: {createdAt: DESC}) {\n    id\n    email\n    isActive\n    isStaff\n    assignedRoles {\n      id\n      assignedRole {\n        id\n        name\n        displayName\n        priority\n      }\n    }\n  }\n}\n\nquery GetUserPermissionOverrides($userId: uuid!) {\n  permissionOverrides(where: {userId: {_eq: $userId}}, orderBy: {createdAt: DESC}) {\n    id\n    resource\n    operation\n    granted\n    conditions\n    expiresAt\n  }\n}\n\nquery GetRolePermissionOverrides($roleName: String!) {\n  permissionOverrides(where: {role: {_eq: $roleName}}, orderBy: {createdAt: DESC}) {\n    id\n    resource\n    operation\n    granted\n    conditions\n    expiresAt\n  }\n}\n\nquery SearchUsersByEmail($emailPattern: String!) {\n  users(where: {email: {_ilike: $emailPattern}}, limit: 10, orderBy: {email: ASC}) {\n    id\n    email\n    isActive\n    assignedRoles {\n      assignedRole {\n        name\n        displayName\n      }\n    }\n  }\n}\n\nquery GetRoleHierarchy {\n  roles(orderBy: {priority: DESC}) {\n    id\n    name\n    displayName\n    description\n    priority\n    isSystemRole\n    assignedPermissionsAggregate {\n      aggregate {\n        count\n      }\n    }\n    assignedToUsersAggregate {\n      aggregate {\n        count\n      }\n    }\n  }\n}\n\nquery GetPermissionAuditLogs($limit: Int = 50, $offset: Int = 0, $startDate: timestamptz, $endDate: timestamptz) {\n  permissionAuditLogs(\n    where: {timestamp: {_gte: $startDate, _lte: $endDate}}\n    orderBy: {timestamp: DESC}\n    limit: $limit\n    offset: $offset\n  ) {\n    id\n    userId\n    targetUserId\n    action\n    resource\n    previousValue\n    newValue\n    timestamp\n    createdAt\n  }\n}\n\nquery GetPendingInvitations($limit: Int = 50, $offset: Int = 0) {\n  userInvitations(\n    where: {status: {_eq: \"pending\"}}\n    orderBy: {invitedAt: DESC}\n    limit: $limit\n    offset: $offset\n  ) {\n    id\n    email\n    firstName\n    lastName\n    invitedRole\n    managerId\n    invitedAt\n    expiresAt\n    status\n    invitedByUser {\n      name\n      email\n      role\n    }\n    managerUser {\n      name\n      email\n    }\n  }\n}\n\nquery GetInvitationByTicket($clerkTicket: String!) {\n  userInvitations(\n    where: {clerkTicket: {_eq: $clerkTicket}, status: {_eq: \"pending\"}, expiresAt: {_gt: \"now()\"}}\n    limit: 1\n  ) {\n    id\n    email\n    firstName\n    lastName\n    invitedRole\n    managerId\n    invitationMetadata\n    invitedAt\n    expiresAt\n    invitedByUser {\n      name\n      email\n      role\n    }\n    managerUser {\n      name\n      email\n    }\n  }\n}\n\nquery GetInvitationHistory($email: String!, $limit: Int = 10) {\n  userInvitations(\n    where: {email: {_eq: $email}}\n    orderBy: {invitedAt: DESC}\n    limit: $limit\n  ) {\n    id\n    email\n    firstName\n    lastName\n    invitedRole\n    status\n    invitedAt\n    acceptedAt\n    expiresAt\n    invitedByUser {\n      name\n      email\n    }\n    acceptedByUser {\n      name\n      email\n      clerkUserId\n    }\n  }\n}\n\nquery GetInvitationsBySender($invitedBy: uuid!, $limit: Int = 50) {\n  userInvitations(\n    where: {invitedBy: {_eq: $invitedBy}}\n    orderBy: {invitedAt: DESC}\n    limit: $limit\n  ) {\n    id\n    email\n    firstName\n    lastName\n    invitedRole\n    status\n    invitedAt\n    acceptedAt\n    expiresAt\n    acceptedByUser {\n      name\n      email\n    }\n  }\n}\n\nquery GetExpiredInvitations($limit: Int = 100) {\n  userInvitations(\n    where: {status: {_eq: \"pending\"}, expiresAt: {_lt: \"now()\"}}\n    orderBy: {expiresAt: ASC}\n    limit: $limit\n  ) {\n    id\n    email\n    firstName\n    lastName\n    invitedRole\n    invitedAt\n    expiresAt\n  }\n}\n\nquery ValidateInvitationRolePermissions($invitedRole: String!, $invitedBy: uuid!) {\n  users(where: {id: {_eq: $invitedBy}}) {\n    id\n    role\n    assignedRoles {\n      assignedRole {\n        name\n        priority\n        assignedPermissions {\n          grantedPermission {\n            action\n            relatedResource {\n              name\n            }\n          }\n        }\n      }\n    }\n  }\n  roles(where: {name: {_eq: $invitedRole}}) {\n    id\n    name\n    priority\n    isSystemRole\n  }\n}\n\nquery GetInvitationById($invitationId: uuid!) {\n  userInvitations(where: {id: {_eq: $invitationId}}) {\n    id\n    email\n    firstName\n    lastName\n    invitedRole\n    managerId\n    clerkInvitationId\n    clerkTicket\n    invitationMetadata\n    invitedBy\n    invitedAt\n    acceptedAt\n    expiresAt\n    status\n    invitedByUser {\n      id\n      name\n      email\n      role\n    }\n    managerUser {\n      id\n      name\n      email\n    }\n  }\n}\n\nquery GetResendableInvitations($invitedBy: uuid!, $limit: Int = 50) {\n  userInvitations(\n    where: {invitedBy: {_eq: $invitedBy}, status: {_in: [\"pending\", \"expired\"]}}\n    orderBy: {invitedAt: DESC}\n    limit: $limit\n  ) {\n    id\n    email\n    firstName\n    lastName\n    invitedRole\n    status\n    invitedAt\n    expiresAt\n    acceptedAt\n  }\n}"): (typeof documents)["query GetCurrentUserRoles {\n  users(limit: 1) {\n    id\n    email\n    isActive\n    isStaff\n    assignedRoles {\n      assignedRole {\n        id\n        name\n        displayName\n        description\n        priority\n        isSystemRole\n        assignedPermissions {\n          grantedPermission {\n            id\n            action\n            description\n            relatedResource {\n              id\n              name\n              displayName\n              description\n            }\n          }\n          conditions\n        }\n      }\n    }\n  }\n}\n\nquery GetAllRoles {\n  roles(orderBy: {priority: DESC}) {\n    id\n    name\n    displayName\n    description\n    priority\n    isSystemRole\n    assignedPermissions {\n      id\n      conditions\n      grantedPermission {\n        id\n        action\n        description\n        relatedResource {\n          id\n          name\n          displayName\n          description\n        }\n      }\n    }\n  }\n}\n\nquery GetResourcesAndPermissions {\n  resources(orderBy: {name: ASC}) {\n    id\n    name\n    displayName\n    description\n    availablePermissions {\n      id\n      action\n      description\n    }\n  }\n}\n\nquery GetUsersWithRoles($limit: Int = 50, $offset: Int = 0) {\n  users(limit: $limit, offset: $offset, orderBy: {createdAt: DESC}) {\n    id\n    email\n    isActive\n    isStaff\n    assignedRoles {\n      id\n      assignedRole {\n        id\n        name\n        displayName\n        priority\n      }\n    }\n  }\n}\n\nquery GetUserPermissionOverrides($userId: uuid!) {\n  permissionOverrides(where: {userId: {_eq: $userId}}, orderBy: {createdAt: DESC}) {\n    id\n    resource\n    operation\n    granted\n    conditions\n    expiresAt\n  }\n}\n\nquery GetRolePermissionOverrides($roleName: String!) {\n  permissionOverrides(where: {role: {_eq: $roleName}}, orderBy: {createdAt: DESC}) {\n    id\n    resource\n    operation\n    granted\n    conditions\n    expiresAt\n  }\n}\n\nquery SearchUsersByEmail($emailPattern: String!) {\n  users(where: {email: {_ilike: $emailPattern}}, limit: 10, orderBy: {email: ASC}) {\n    id\n    email\n    isActive\n    assignedRoles {\n      assignedRole {\n        name\n        displayName\n      }\n    }\n  }\n}\n\nquery GetRoleHierarchy {\n  roles(orderBy: {priority: DESC}) {\n    id\n    name\n    displayName\n    description\n    priority\n    isSystemRole\n    assignedPermissionsAggregate {\n      aggregate {\n        count\n      }\n    }\n    assignedToUsersAggregate {\n      aggregate {\n        count\n      }\n    }\n  }\n}\n\nquery GetPermissionAuditLogs($limit: Int = 50, $offset: Int = 0, $startDate: timestamptz, $endDate: timestamptz) {\n  permissionAuditLogs(\n    where: {timestamp: {_gte: $startDate, _lte: $endDate}}\n    orderBy: {timestamp: DESC}\n    limit: $limit\n    offset: $offset\n  ) {\n    id\n    userId\n    targetUserId\n    action\n    resource\n    previousValue\n    newValue\n    timestamp\n    createdAt\n  }\n}\n\nquery GetPendingInvitations($limit: Int = 50, $offset: Int = 0) {\n  userInvitations(\n    where: {status: {_eq: \"pending\"}}\n    orderBy: {invitedAt: DESC}\n    limit: $limit\n    offset: $offset\n  ) {\n    id\n    email\n    firstName\n    lastName\n    invitedRole\n    managerId\n    invitedAt\n    expiresAt\n    status\n    invitedByUser {\n      name\n      email\n      role\n    }\n    managerUser {\n      name\n      email\n    }\n  }\n}\n\nquery GetInvitationByTicket($clerkTicket: String!) {\n  userInvitations(\n    where: {clerkTicket: {_eq: $clerkTicket}, status: {_eq: \"pending\"}, expiresAt: {_gt: \"now()\"}}\n    limit: 1\n  ) {\n    id\n    email\n    firstName\n    lastName\n    invitedRole\n    managerId\n    invitationMetadata\n    invitedAt\n    expiresAt\n    invitedByUser {\n      name\n      email\n      role\n    }\n    managerUser {\n      name\n      email\n    }\n  }\n}\n\nquery GetInvitationHistory($email: String!, $limit: Int = 10) {\n  userInvitations(\n    where: {email: {_eq: $email}}\n    orderBy: {invitedAt: DESC}\n    limit: $limit\n  ) {\n    id\n    email\n    firstName\n    lastName\n    invitedRole\n    status\n    invitedAt\n    acceptedAt\n    expiresAt\n    invitedByUser {\n      name\n      email\n    }\n    acceptedByUser {\n      name\n      email\n      clerkUserId\n    }\n  }\n}\n\nquery GetInvitationsBySender($invitedBy: uuid!, $limit: Int = 50) {\n  userInvitations(\n    where: {invitedBy: {_eq: $invitedBy}}\n    orderBy: {invitedAt: DESC}\n    limit: $limit\n  ) {\n    id\n    email\n    firstName\n    lastName\n    invitedRole\n    status\n    invitedAt\n    acceptedAt\n    expiresAt\n    acceptedByUser {\n      name\n      email\n    }\n  }\n}\n\nquery GetExpiredInvitations($limit: Int = 100) {\n  userInvitations(\n    where: {status: {_eq: \"pending\"}, expiresAt: {_lt: \"now()\"}}\n    orderBy: {expiresAt: ASC}\n    limit: $limit\n  ) {\n    id\n    email\n    firstName\n    lastName\n    invitedRole\n    invitedAt\n    expiresAt\n  }\n}\n\nquery ValidateInvitationRolePermissions($invitedRole: String!, $invitedBy: uuid!) {\n  users(where: {id: {_eq: $invitedBy}}) {\n    id\n    role\n    assignedRoles {\n      assignedRole {\n        name\n        priority\n        assignedPermissions {\n          grantedPermission {\n            action\n            relatedResource {\n              name\n            }\n          }\n        }\n      }\n    }\n  }\n  roles(where: {name: {_eq: $invitedRole}}) {\n    id\n    name\n    priority\n    isSystemRole\n  }\n}\n\nquery GetInvitationById($invitationId: uuid!) {\n  userInvitations(where: {id: {_eq: $invitationId}}) {\n    id\n    email\n    firstName\n    lastName\n    invitedRole\n    managerId\n    clerkInvitationId\n    clerkTicket\n    invitationMetadata\n    invitedBy\n    invitedAt\n    acceptedAt\n    expiresAt\n    status\n    invitedByUser {\n      id\n      name\n      email\n      role\n    }\n    managerUser {\n      id\n      name\n      email\n    }\n  }\n}\n\nquery GetResendableInvitations($invitedBy: uuid!, $limit: Int = 50) {\n  userInvitations(\n    where: {invitedBy: {_eq: $invitedBy}, status: {_in: [\"pending\", \"expired\"]}}\n    orderBy: {invitedAt: DESC}\n    limit: $limit\n  ) {\n    id\n    email\n    firstName\n    lastName\n    invitedRole\n    status\n    invitedAt\n    expiresAt\n    acceptedAt\n  }\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "subscription UserAuthStatusUpdates($userId: uuid!) {\n  users(where: {id: {_eq: $userId}}) {\n    id\n    isActive\n    role\n    updatedAt\n    deactivatedAt\n    deactivatedBy\n  }\n}\n\nsubscription UserSessionUpdates($clerkUserId: String!) {\n  users(where: {clerkUserId: {_eq: $clerkUserId}}) {\n    id\n    isActive\n    role\n    updatedAt\n    clerkUserId\n  }\n}\n\nsubscription AuthEventsUpdates($userId: uuid!) {\n  authEvents(\n    where: {userId: {_eq: $userId}}\n    orderBy: {eventTime: DESC}\n    limit: 20\n  ) {\n    id\n    eventType\n    eventTime\n    ipAddress\n    userAgent\n    success\n    failureReason\n    userId\n  }\n}\n\nsubscription UserRoleUpdates($userId: uuid!) {\n  users(where: {id: {_eq: $userId}}) {\n    id\n    role\n    isStaff\n    isActive\n    assignedRoles {\n      id\n      roleId\n      assignedRole {\n        id\n        name\n        displayName\n        priority\n        isSystemRole\n      }\n    }\n    updatedAt\n  }\n}\n\nsubscription UserPermissionUpdates($userId: uuid!) {\n  users(where: {id: {_eq: $userId}}) {\n    id\n    role\n    assignedRoles {\n      roleId\n      assignedRole {\n        name\n        assignedPermissions {\n          id\n          permissionId\n          conditions\n          grantedPermission {\n            id\n            action\n            description\n            relatedResource {\n              name\n              displayName\n            }\n          }\n        }\n      }\n    }\n    updatedAt\n  }\n}\n\nsubscription RolePermissionChanges($roleId: uuid!) {\n  rolePermissions(where: {roleId: {_eq: $roleId}}) {\n    id\n    roleId\n    permissionId\n    conditions\n    createdAt\n    updatedAt\n    grantedPermission {\n      id\n      action\n      description\n      relatedResource {\n        name\n        displayName\n      }\n    }\n  }\n}\n\nsubscription FailedAuthAttemptsUpdates {\n  authEvents(\n    where: {success: {_eq: false}, eventTime: {_gte: \"now() - interval '1 hour'\"}}\n    orderBy: {eventTime: DESC}\n  ) {\n    id\n    eventType\n    eventTime\n    ipAddress\n    userAgent\n    failureReason\n    userId\n  }\n}\n\nsubscription SuspiciousActivityUpdates {\n  authEvents(\n    where: {_or: [{eventType: {_eq: \"multiple_failed_attempts\"}}, {eventType: {_eq: \"unusual_location\"}}, {eventType: {_eq: \"suspicious_activity\"}}], eventTime: {_gte: \"now() - interval '24 hours'\"}}\n    orderBy: {eventTime: DESC}\n  ) {\n    id\n    eventType\n    eventTime\n    ipAddress\n    userAgent\n    userId\n    metadata\n  }\n}\n\nsubscription SecurityAlertsUpdates {\n  authEvents(\n    where: {eventType: {_in: [\"account_locked\", \"unauthorized_access_attempt\", \"privilege_escalation_attempt\", \"suspicious_activity\"]}, eventTime: {_gte: \"now() - interval '1 hour'\"}}\n    orderBy: {eventTime: DESC}\n  ) {\n    id\n    eventType\n    eventTime\n    ipAddress\n    userId\n    metadata\n  }\n}\n\nsubscription PermissionChangesUpdates {\n  permissionAuditLogs(orderBy: {timestamp: DESC}, limit: 50) {\n    id\n    action\n    resource\n    operation\n    previousValue\n    newValue\n    timestamp\n    userId\n    performedByUser {\n      name\n      email\n      role\n    }\n  }\n}\n\nsubscription RoleAssignmentUpdates {\n  userRoles(orderBy: {createdAt: DESC}) {\n    id\n    userId\n    roleId\n    createdAt\n    updatedAt\n    roleUser {\n      id\n      name\n      email\n    }\n    assignedRole {\n      id\n      name\n      displayName\n      priority\n    }\n  }\n}\n\nsubscription AuthSystemHealthUpdates {\n  authEvents(\n    where: {eventType: {_eq: \"login\"}, success: {_eq: true}, eventTime: {_gte: \"now() - interval '1 hour'\"}}\n    orderBy: {eventTime: DESC}\n    limit: 10\n  ) {\n    id\n    eventType\n    eventTime\n    userId\n    success\n  }\n}\n\nsubscription ActiveSessionsUpdates {\n  authEvents(\n    where: {eventType: {_eq: \"session_active\"}, eventTime: {_gte: \"now() - interval '30 minutes'\"}}\n    orderBy: {eventTime: DESC}\n  ) {\n    id\n    userId\n    eventTime\n    ipAddress\n  }\n}\n\nsubscription UserSecurityStatusUpdates($userId: uuid!) {\n  users(where: {id: {_eq: $userId}}) {\n    id\n    isActive\n    role\n    updatedAt\n  }\n}\n\nsubscription MFAEventsUpdates($userId: uuid!) {\n  authEvents(\n    where: {userId: {_eq: $userId}, eventType: {_like: \"mfa%\"}}\n    orderBy: {eventTime: DESC}\n    limit: 10\n  ) {\n    id\n    eventType\n    eventTime\n    success\n    failureReason\n    metadata\n  }\n}\n\nsubscription UserDeactivationUpdates {\n  users(\n    where: {isActive: {_eq: false}, deactivatedAt: {_gte: \"now() - interval '24 hours'\"}}\n    orderBy: {deactivatedAt: DESC}\n  ) {\n    id\n    name\n    email\n    role\n    deactivatedAt\n    deactivatedBy\n  }\n}\n\nsubscription PrivilegeChangesUpdates {\n  users(\n    where: {role: {_in: [\"org_admin\", \"manager\", \"developer\"]}, updatedAt: {_gte: \"now() - interval '1 hour'\"}}\n    orderBy: {updatedAt: DESC}\n  ) {\n    id\n    name\n    email\n    role\n    updatedAt\n    assignedRoles {\n      assignedRole {\n        name\n        priority\n      }\n    }\n  }\n}\n\nsubscription ComplianceEventsUpdates {\n  permissionAuditLogs(\n    where: {action: {_in: [\"role_assigned\", \"role_removed\", \"permission_granted\", \"permission_revoked\", \"admin_access\"]}, timestamp: {_gte: \"now() - interval '1 hour'\"}}\n    orderBy: {timestamp: DESC}\n  ) {\n    id\n    action\n    resource\n    operation\n    previousValue\n    newValue\n    timestamp\n    userId\n    performedByUser {\n      name\n      email\n      role\n    }\n  }\n}\n\nsubscription DataAccessMonitoring($userId: uuid!) {\n  dataAccessLogs(\n    where: {userId: {_eq: $userId}, accessedAt: {_gte: \"now() - interval '24 hours'\"}}\n    orderBy: {accessedAt: DESC}\n    limit: 100\n  ) {\n    id\n    userId\n    resourceType\n    resourceId\n    accessType\n    accessedAt\n    ipAddress\n    dataClassification\n    rowCount\n  }\n}\n\nsubscription SecurityIncidentsUpdates {\n  authEvents(\n    where: {eventType: {_in: [\"security_incident\", \"data_breach_attempt\", \"unauthorized_admin_access\", \"multiple_failed_mfa\"]}, eventTime: {_gte: \"now() - interval '24 hours'\"}}\n    orderBy: {eventTime: DESC}\n  ) {\n    id\n    eventType\n    eventTime\n    userId\n    ipAddress\n    userAgent\n    metadata\n  }\n}\n\nsubscription EmergencyAuthUpdates {\n  authEvents(\n    where: {eventType: {_eq: \"emergency_access\"}, eventTime: {_gte: \"now() - interval '1 hour'\"}}\n    orderBy: {eventTime: DESC}\n  ) {\n    id\n    eventType\n    eventTime\n    userId\n    ipAddress\n    metadata\n  }\n}"): (typeof documents)["subscription UserAuthStatusUpdates($userId: uuid!) {\n  users(where: {id: {_eq: $userId}}) {\n    id\n    isActive\n    role\n    updatedAt\n    deactivatedAt\n    deactivatedBy\n  }\n}\n\nsubscription UserSessionUpdates($clerkUserId: String!) {\n  users(where: {clerkUserId: {_eq: $clerkUserId}}) {\n    id\n    isActive\n    role\n    updatedAt\n    clerkUserId\n  }\n}\n\nsubscription AuthEventsUpdates($userId: uuid!) {\n  authEvents(\n    where: {userId: {_eq: $userId}}\n    orderBy: {eventTime: DESC}\n    limit: 20\n  ) {\n    id\n    eventType\n    eventTime\n    ipAddress\n    userAgent\n    success\n    failureReason\n    userId\n  }\n}\n\nsubscription UserRoleUpdates($userId: uuid!) {\n  users(where: {id: {_eq: $userId}}) {\n    id\n    role\n    isStaff\n    isActive\n    assignedRoles {\n      id\n      roleId\n      assignedRole {\n        id\n        name\n        displayName\n        priority\n        isSystemRole\n      }\n    }\n    updatedAt\n  }\n}\n\nsubscription UserPermissionUpdates($userId: uuid!) {\n  users(where: {id: {_eq: $userId}}) {\n    id\n    role\n    assignedRoles {\n      roleId\n      assignedRole {\n        name\n        assignedPermissions {\n          id\n          permissionId\n          conditions\n          grantedPermission {\n            id\n            action\n            description\n            relatedResource {\n              name\n              displayName\n            }\n          }\n        }\n      }\n    }\n    updatedAt\n  }\n}\n\nsubscription RolePermissionChanges($roleId: uuid!) {\n  rolePermissions(where: {roleId: {_eq: $roleId}}) {\n    id\n    roleId\n    permissionId\n    conditions\n    createdAt\n    updatedAt\n    grantedPermission {\n      id\n      action\n      description\n      relatedResource {\n        name\n        displayName\n      }\n    }\n  }\n}\n\nsubscription FailedAuthAttemptsUpdates {\n  authEvents(\n    where: {success: {_eq: false}, eventTime: {_gte: \"now() - interval '1 hour'\"}}\n    orderBy: {eventTime: DESC}\n  ) {\n    id\n    eventType\n    eventTime\n    ipAddress\n    userAgent\n    failureReason\n    userId\n  }\n}\n\nsubscription SuspiciousActivityUpdates {\n  authEvents(\n    where: {_or: [{eventType: {_eq: \"multiple_failed_attempts\"}}, {eventType: {_eq: \"unusual_location\"}}, {eventType: {_eq: \"suspicious_activity\"}}], eventTime: {_gte: \"now() - interval '24 hours'\"}}\n    orderBy: {eventTime: DESC}\n  ) {\n    id\n    eventType\n    eventTime\n    ipAddress\n    userAgent\n    userId\n    metadata\n  }\n}\n\nsubscription SecurityAlertsUpdates {\n  authEvents(\n    where: {eventType: {_in: [\"account_locked\", \"unauthorized_access_attempt\", \"privilege_escalation_attempt\", \"suspicious_activity\"]}, eventTime: {_gte: \"now() - interval '1 hour'\"}}\n    orderBy: {eventTime: DESC}\n  ) {\n    id\n    eventType\n    eventTime\n    ipAddress\n    userId\n    metadata\n  }\n}\n\nsubscription PermissionChangesUpdates {\n  permissionAuditLogs(orderBy: {timestamp: DESC}, limit: 50) {\n    id\n    action\n    resource\n    operation\n    previousValue\n    newValue\n    timestamp\n    userId\n    performedByUser {\n      name\n      email\n      role\n    }\n  }\n}\n\nsubscription RoleAssignmentUpdates {\n  userRoles(orderBy: {createdAt: DESC}) {\n    id\n    userId\n    roleId\n    createdAt\n    updatedAt\n    roleUser {\n      id\n      name\n      email\n    }\n    assignedRole {\n      id\n      name\n      displayName\n      priority\n    }\n  }\n}\n\nsubscription AuthSystemHealthUpdates {\n  authEvents(\n    where: {eventType: {_eq: \"login\"}, success: {_eq: true}, eventTime: {_gte: \"now() - interval '1 hour'\"}}\n    orderBy: {eventTime: DESC}\n    limit: 10\n  ) {\n    id\n    eventType\n    eventTime\n    userId\n    success\n  }\n}\n\nsubscription ActiveSessionsUpdates {\n  authEvents(\n    where: {eventType: {_eq: \"session_active\"}, eventTime: {_gte: \"now() - interval '30 minutes'\"}}\n    orderBy: {eventTime: DESC}\n  ) {\n    id\n    userId\n    eventTime\n    ipAddress\n  }\n}\n\nsubscription UserSecurityStatusUpdates($userId: uuid!) {\n  users(where: {id: {_eq: $userId}}) {\n    id\n    isActive\n    role\n    updatedAt\n  }\n}\n\nsubscription MFAEventsUpdates($userId: uuid!) {\n  authEvents(\n    where: {userId: {_eq: $userId}, eventType: {_like: \"mfa%\"}}\n    orderBy: {eventTime: DESC}\n    limit: 10\n  ) {\n    id\n    eventType\n    eventTime\n    success\n    failureReason\n    metadata\n  }\n}\n\nsubscription UserDeactivationUpdates {\n  users(\n    where: {isActive: {_eq: false}, deactivatedAt: {_gte: \"now() - interval '24 hours'\"}}\n    orderBy: {deactivatedAt: DESC}\n  ) {\n    id\n    name\n    email\n    role\n    deactivatedAt\n    deactivatedBy\n  }\n}\n\nsubscription PrivilegeChangesUpdates {\n  users(\n    where: {role: {_in: [\"org_admin\", \"manager\", \"developer\"]}, updatedAt: {_gte: \"now() - interval '1 hour'\"}}\n    orderBy: {updatedAt: DESC}\n  ) {\n    id\n    name\n    email\n    role\n    updatedAt\n    assignedRoles {\n      assignedRole {\n        name\n        priority\n      }\n    }\n  }\n}\n\nsubscription ComplianceEventsUpdates {\n  permissionAuditLogs(\n    where: {action: {_in: [\"role_assigned\", \"role_removed\", \"permission_granted\", \"permission_revoked\", \"admin_access\"]}, timestamp: {_gte: \"now() - interval '1 hour'\"}}\n    orderBy: {timestamp: DESC}\n  ) {\n    id\n    action\n    resource\n    operation\n    previousValue\n    newValue\n    timestamp\n    userId\n    performedByUser {\n      name\n      email\n      role\n    }\n  }\n}\n\nsubscription DataAccessMonitoring($userId: uuid!) {\n  dataAccessLogs(\n    where: {userId: {_eq: $userId}, accessedAt: {_gte: \"now() - interval '24 hours'\"}}\n    orderBy: {accessedAt: DESC}\n    limit: 100\n  ) {\n    id\n    userId\n    resourceType\n    resourceId\n    accessType\n    accessedAt\n    ipAddress\n    dataClassification\n    rowCount\n  }\n}\n\nsubscription SecurityIncidentsUpdates {\n  authEvents(\n    where: {eventType: {_in: [\"security_incident\", \"data_breach_attempt\", \"unauthorized_admin_access\", \"multiple_failed_mfa\"]}, eventTime: {_gte: \"now() - interval '24 hours'\"}}\n    orderBy: {eventTime: DESC}\n  ) {\n    id\n    eventType\n    eventTime\n    userId\n    ipAddress\n    userAgent\n    metadata\n  }\n}\n\nsubscription EmergencyAuthUpdates {\n  authEvents(\n    where: {eventType: {_eq: \"emergency_access\"}, eventTime: {_gte: \"now() - interval '1 hour'\"}}\n    orderBy: {eventTime: DESC}\n  ) {\n    id\n    eventType\n    eventTime\n    userId\n    ipAddress\n    metadata\n  }\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "fragment UserCore on users {\n  id\n  name\n  email\n  username\n  role\n  isActive\n  isStaff\n  clerkUserId\n  createdAt\n  updatedAt\n}\n\nfragment UserBasic on users {\n  id\n  name\n  email\n  role\n  isActive\n}\n\nfragment UserWithManager on users {\n  ...UserCore\n  managerId\n  managerUser {\n    ...UserBasic\n  }\n}\n\nfragment RoleCore on roles {\n  id\n  name\n  description\n  displayName\n  priority\n  isSystemRole\n  createdAt\n}\n\nfragment PermissionCore on permissions {\n  id\n  action\n  description\n  resourceId\n  createdAt\n  updatedAt\n}\n\nfragment PermissionWithResource on permissions {\n  ...PermissionCore\n  relatedResource {\n    id\n    name\n    description\n  }\n}\n\nfragment ClientCore on clients {\n  id\n  name\n  contactEmail\n  contactPerson\n  contactPhone\n  active\n  createdAt\n  updatedAt\n}\n\nfragment ClientBasic on clients {\n  id\n  name\n  active\n}\n\nfragment ResourceCore on resources {\n  id\n  name\n  displayName\n  description\n  createdAt\n  updatedAt\n}\n\nfragment UserRoleCore on userRoles {\n  id\n  userId\n  roleId\n  createdAt\n  updatedAt\n}\n\nfragment RolePermissionCore on rolePermissions {\n  id\n  roleId\n  permissionId\n  conditions\n  createdAt\n  updatedAt\n}\n\nfragment AuditFields on auditLogs {\n  id\n  eventTime\n  action\n  resourceType\n  resourceId\n  userId\n  ipAddress\n  userAgent\n  success\n  userEmail\n  userRole\n}"): (typeof documents)["fragment UserCore on users {\n  id\n  name\n  email\n  username\n  role\n  isActive\n  isStaff\n  clerkUserId\n  createdAt\n  updatedAt\n}\n\nfragment UserBasic on users {\n  id\n  name\n  email\n  role\n  isActive\n}\n\nfragment UserWithManager on users {\n  ...UserCore\n  managerId\n  managerUser {\n    ...UserBasic\n  }\n}\n\nfragment RoleCore on roles {\n  id\n  name\n  description\n  displayName\n  priority\n  isSystemRole\n  createdAt\n}\n\nfragment PermissionCore on permissions {\n  id\n  action\n  description\n  resourceId\n  createdAt\n  updatedAt\n}\n\nfragment PermissionWithResource on permissions {\n  ...PermissionCore\n  relatedResource {\n    id\n    name\n    description\n  }\n}\n\nfragment ClientCore on clients {\n  id\n  name\n  contactEmail\n  contactPerson\n  contactPhone\n  active\n  createdAt\n  updatedAt\n}\n\nfragment ClientBasic on clients {\n  id\n  name\n  active\n}\n\nfragment ResourceCore on resources {\n  id\n  name\n  displayName\n  description\n  createdAt\n  updatedAt\n}\n\nfragment UserRoleCore on userRoles {\n  id\n  userId\n  roleId\n  createdAt\n  updatedAt\n}\n\nfragment RolePermissionCore on rolePermissions {\n  id\n  roleId\n  permissionId\n  conditions\n  createdAt\n  updatedAt\n}\n\nfragment AuditFields on auditLogs {\n  id\n  eventTime\n  action\n  resourceType\n  resourceId\n  userId\n  ipAddress\n  userAgent\n  success\n  userEmail\n  userRole\n}"];

export function graphql(source: string) {
  return (documents as any)[source] ?? {};
}

export type DocumentType<TDocumentNode extends DocumentNode<any, any>> = TDocumentNode extends DocumentNode<  infer TType,  any>  ? TType  : never;