/* eslint-disable */
import * as types from './graphql';
import type { TypedDocumentNode as DocumentNode } from '@graphql-typed-document-node/core';

/**
 * Map of all GraphQL operations in the project.
 *
 * This map has several performance disadvantages:
 * 1. It is not tree-shakeable, so it will include all operations in the project.
 * 2. It is not minifiable, so the string of a GraphQL query will be multiple times inside the bundle.
 * 3. It does not support dead code elimination, so it will add unused operations.
 *
 * Therefore it is highly recommended to use the babel or swc plugin for production.
 * Learn more about it here: https://the-guild.dev/graphql/codegen/plugins/presets/preset-client#reducing-bundle-size
 */
type Documents = {
    "fragment UserCore on users {\n  id\n  name\n  email\n  isActive\n  isStaff\n  role\n  clerkUserId\n  createdAt\n  updatedAt\n}\n\nfragment RoleCore on roles {\n  id\n  name\n  displayName\n  description\n  priority\n  isSystemRole\n  createdAt\n  updatedAt\n}\n\nfragment PermissionCore on permissions {\n  id\n  resourceId\n  action\n  description\n  legacy_permission_name\n  createdAt\n  updatedAt\n}\n\nfragment ResourceCore on resources {\n  id\n  name\n  displayName\n  description\n  createdAt\n  updatedAt\n}\n\nfragment UserRoleCore on user_roles {\n  id\n  userId\n  roleId\n  createdAt\n  updatedAt\n}\n\nfragment AuthUserRoleWithDetails on user_roles {\n  ...UserRoleCore\n  user {\n    ...UserCore\n  }\n  role {\n    ...RoleCore\n  }\n}\n\nfragment RolePermissionCore on role_permissions {\n  id\n  roleId\n  permissionId\n  conditions\n  createdAt\n  updatedAt\n}\n\nfragment PermissionOverrideCore on permission_overrides {\n  id\n  userId\n  resource\n  operation\n  granted\n  conditions\n  expiresAt\n  createdBy\n  createdAt\n  updatedAt\n}": typeof types.UserCoreFragmentDoc,
    "mutation AssignRoleToUser($userId: uuid!, $roleId: uuid!) {\n  insertUserRole(object: {roleId: $roleId}) {\n    id\n    roleId\n    role {\n      name\n      displayName\n      priority\n    }\n  }\n}\n\nmutation RemoveRoleFromUser($userRoleId: uuid!) {\n  deleteUserRole(id: $userRoleId) {\n    id\n    roleId\n  }\n}\n\nmutation SetUserRoles($userId: uuid!, $roleIds: [user_roles_insert_input!]!) {\n  deleteUserRoles(where: {userId: {_eq: $userId}}) {\n    affected_rows\n  }\n  insertUserRoles(objects: $roleIds) {\n    affected_rows\n    returning {\n      id\n      role {\n        name\n        displayName\n        priority\n      }\n    }\n  }\n}\n\nmutation CreateUserPermissionOverride($userId: uuid!, $resource: String!, $operation: String!, $granted: Boolean!, $conditions: jsonb = null, $expiresAt: timestamptz = null, $reason: String = null) {\n  insertPermissionOverride(\n    object: {resource: $resource, operation: $operation, granted: $granted, conditions: $conditions, expiresAt: $expiresAt, reason: $reason}\n  ) {\n    id\n    resource\n    operation\n    granted\n    conditions\n    expiresAt\n    reason\n  }\n}\n\nmutation CreateRolePermissionOverride($role: String!, $resource: String!, $operation: String!, $granted: Boolean!, $conditions: jsonb = null, $expiresAt: timestamptz = null, $reason: String = null) {\n  insertPermissionOverride(\n    object: {role: $role, resource: $resource, operation: $operation, granted: $granted, conditions: $conditions, expiresAt: $expiresAt, reason: $reason}\n  ) {\n    id\n    role\n    resource\n    operation\n    granted\n    conditions\n    expiresAt\n    reason\n  }\n}\n\nmutation UpdatePermissionOverride($id: uuid!, $granted: Boolean = null, $conditions: jsonb = null, $expiresAt: timestamptz = null, $reason: String = null) {\n  updatePermissionOverride(\n    pk_columns: {id: $id}\n    _set: {granted: $granted, conditions: $conditions, expiresAt: $expiresAt, reason: $reason}\n  ) {\n    id\n    role\n    resource\n    operation\n    granted\n    conditions\n    expiresAt\n    reason\n  }\n}\n\nmutation DeletePermissionOverride($id: uuid!) {\n  deletePermissionOverride(id: $id) {\n    id\n    role\n    resource\n    operation\n  }\n}\n\nmutation CreateCustomRole($name: String!, $displayName: String!, $description: String!, $priority: Int!) {\n  insertRole(\n    object: {name: $name, displayName: $displayName, description: $description, priority: $priority, isSystemRole: false}\n  ) {\n    id\n    name\n    displayName\n    description\n    priority\n    isSystemRole\n  }\n}\n\nmutation UpdateRole($id: uuid!, $displayName: String = null, $description: String = null, $priority: Int = null) {\n  updateRole(\n    pk_columns: {id: $id}\n    _set: {displayName: $displayName, description: $description, priority: $priority}\n  ) {\n    id\n    name\n    displayName\n    description\n    priority\n  }\n}\n\nmutation DeleteCustomRole($id: uuid!) {\n  deleteRole(id: $id) {\n    id\n    name\n    displayName\n  }\n}\n\nmutation AssignPermissionToRole($roleId: uuid!, $permissionId: uuid!, $conditions: jsonb = null) {\n  insertRolePermission(\n    object: {roleId: $roleId, permissionId: $permissionId, conditions: $conditions}\n  ) {\n    id\n    roleId\n    permissionId\n    conditions\n    permission {\n      action\n      resource {\n        name\n        displayName\n      }\n    }\n    role {\n      name\n      displayName\n    }\n  }\n}\n\nmutation RemovePermissionFromRole($rolePermissionId: uuid!) {\n  deleteRolePermission(id: $rolePermissionId) {\n    id\n    roleId\n    permissionId\n  }\n}\n\nmutation UpdateRolePermissionConditions($rolePermissionId: uuid!, $conditions: jsonb = null) {\n  updateRolePermission(\n    pk_columns: {id: $rolePermissionId}\n    _set: {conditions: $conditions}\n  ) {\n    id\n    conditions\n    permission {\n      action\n      resource {\n        name\n        displayName\n      }\n    }\n  }\n}\n\nmutation BulkUpdateUserRoles($userId: uuid!, $newUserRoles: [user_roles_insert_input!]!, $reason: String = null) {\n  deleteUserRoles(where: {userId: {_eq: $userId}}) {\n    affected_rows\n  }\n  insertUserRoles(objects: $newUserRoles) {\n    affected_rows\n    returning {\n      id\n      role {\n        name\n        displayName\n        priority\n      }\n    }\n  }\n}\n\nmutation EmergencyRevokeUserAccess($userId: uuid!, $reason: String!) {\n  deleteUserRoles(where: {userId: {_eq: $userId}}) {\n    affected_rows\n  }\n  insertPermissionOverrides(\n    objects: [{resource: \"system_settings\", operation: \"read\", granted: false, reason: $reason}, {resource: \"user_management\", operation: \"read\", granted: false, reason: $reason}, {resource: \"billing\", operation: \"read\", granted: false, reason: $reason}]\n  ) {\n    affected_rows\n  }\n}\n\nmutation RestoreUserAccess($userId: uuid!, $viewerRoleId: uuid!) {\n  deletePermissionOverrides(where: {granted: {_eq: false}}) {\n    affected_rows\n  }\n  insertUserRole(object: {roleId: $viewerRoleId}) {\n    id\n    role {\n      name\n      displayName\n    }\n  }\n}\n\nmutation AssignUserRole($object: user_roles_insert_input!) {\n  insertUserRole(object: $object) {\n    ...AuthUserRoleWithDetails\n  }\n}\n\nmutation RemoveUserRole($id: uuid!) {\n  deleteUserRole(id: $id) {\n    id\n  }\n}\n\nmutation UpdateUserRole($id: uuid!, $set: user_roles_set_input!) {\n  updateUserRole(pk_columns: {id: $id}, _set: $set) {\n    ...AuthUserRoleWithDetails\n  }\n}\n\nmutation CreatePermissionOverride($object: permission_overrides_insert_input!) {\n  insertPermissionOverride(object: $object) {\n    ...PermissionOverrideCore\n  }\n}\n\nmutation UpdatePermissionOverrideById($id: uuid!, $set: permission_overrides_set_input!) {\n  updatePermissionOverride(pk_columns: {id: $id}, _set: $set) {\n    ...PermissionOverrideCore\n  }\n}\n\nmutation DeletePermissionOverrideById($id: uuid!) {\n  deletePermissionOverride(id: $id) {\n    id\n  }\n}\n\nmutation CreateRole($object: roles_insert_input!) {\n  insertRole(object: $object) {\n    ...RoleCore\n  }\n}\n\nmutation UpdateRoleById($id: uuid!, $set: roles_set_input!) {\n  updateRole(pk_columns: {id: $id}, _set: $set) {\n    ...RoleCore\n  }\n}\n\nmutation DeleteRole($id: uuid!) {\n  deleteRole(id: $id) {\n    id\n  }\n}\n\nmutation AssignRolePermission($object: role_permissions_insert_input!) {\n  insertRolePermission(object: $object) {\n    ...RolePermissionCore\n  }\n}\n\nmutation RemoveRolePermission($id: uuid!) {\n  deleteRolePermission(id: $id) {\n    id\n  }\n}\n\nmutation UpdateRolePermission($id: uuid!, $set: role_permissions_set_input!) {\n  updateRolePermission(pk_columns: {id: $id}, _set: $set) {\n    ...RolePermissionCore\n  }\n}": typeof types.AssignRoleToUserDocument,
    "query GetCurrentUserRoles {\n  users(limit: 1) {\n    id\n    email\n    isActive\n    isStaff\n    userRoles {\n      role {\n        id\n        name\n        displayName\n        description\n        priority\n        isSystemRole\n        rolePermissions {\n          permission {\n            id\n            action\n            description\n            resource {\n              id\n              name\n              displayName\n              description\n            }\n          }\n          conditions\n        }\n      }\n    }\n  }\n}\n\nquery GetAllRoles {\n  roles(order_by: {priority: desc}) {\n    id\n    name\n    displayName\n    description\n    priority\n    isSystemRole\n    rolePermissions {\n      id\n      conditions\n      permission {\n        id\n        action\n        description\n        resource {\n          id\n          name\n          displayName\n          description\n        }\n      }\n    }\n  }\n}\n\nquery GetResourcesAndPermissions {\n  resources(order_by: {name: asc}) {\n    id\n    name\n    displayName\n    description\n    permissions {\n      id\n      action\n      description\n    }\n  }\n}\n\nquery GetUsersWithRoles($limit: Int = 50, $offset: Int = 0) {\n  users(limit: $limit, offset: $offset, order_by: {createdAt: desc}) {\n    id\n    email\n    isActive\n    isStaff\n    userRoles {\n      id\n      role {\n        id\n        name\n        displayName\n        priority\n      }\n    }\n  }\n}\n\nquery GetUserPermissionOverrides($userId: uuid!) {\n  permissionOverrides(\n    where: {userId: {_eq: $userId}}\n    order_by: {createdAt: desc}\n  ) {\n    id\n    resource\n    operation\n    granted\n    conditions\n    expiresAt\n  }\n}\n\nquery GetRolePermissionOverrides($roleName: String!) {\n  permissionOverrides(\n    where: {role: {_eq: $roleName}}\n    order_by: {createdAt: desc}\n  ) {\n    id\n    resource\n    operation\n    granted\n    conditions\n    expiresAt\n  }\n}\n\nquery SearchUsersByEmail($emailPattern: String!) {\n  users(\n    where: {email: {_ilike: $emailPattern}}\n    limit: 10\n    order_by: {email: asc}\n  ) {\n    id\n    email\n    isActive\n    userRoles {\n      role {\n        name\n        displayName\n      }\n    }\n  }\n}\n\nquery GetRoleHierarchy {\n  roles(order_by: {priority: desc}) {\n    id\n    name\n    displayName\n    description\n    priority\n    isSystemRole\n    rolePermissions_aggregate {\n      aggregate {\n        count\n      }\n    }\n    userRoles_aggregate {\n      aggregate {\n        count\n      }\n    }\n  }\n}\n\nquery GetPermissionAuditLogs($limit: Int = 50, $offset: Int = 0, $startDate: timestamptz, $endDate: timestamptz) {\n  permissionAuditLogs(\n    where: {timestamp: {_gte: $startDate, _lte: $endDate}}\n    order_by: {timestamp: desc}\n    limit: $limit\n    offset: $offset\n  ) {\n    id\n    userId\n    targetUserId\n    action\n    resource\n    previous_value\n    new_value\n    timestamp\n    created_at\n  }\n}": typeof types.GetCurrentUserRolesDocument,
};
const documents: Documents = {
    "fragment UserCore on users {\n  id\n  name\n  email\n  isActive\n  isStaff\n  role\n  clerkUserId\n  createdAt\n  updatedAt\n}\n\nfragment RoleCore on roles {\n  id\n  name\n  displayName\n  description\n  priority\n  isSystemRole\n  createdAt\n  updatedAt\n}\n\nfragment PermissionCore on permissions {\n  id\n  resourceId\n  action\n  description\n  legacy_permission_name\n  createdAt\n  updatedAt\n}\n\nfragment ResourceCore on resources {\n  id\n  name\n  displayName\n  description\n  createdAt\n  updatedAt\n}\n\nfragment UserRoleCore on user_roles {\n  id\n  userId\n  roleId\n  createdAt\n  updatedAt\n}\n\nfragment AuthUserRoleWithDetails on user_roles {\n  ...UserRoleCore\n  user {\n    ...UserCore\n  }\n  role {\n    ...RoleCore\n  }\n}\n\nfragment RolePermissionCore on role_permissions {\n  id\n  roleId\n  permissionId\n  conditions\n  createdAt\n  updatedAt\n}\n\nfragment PermissionOverrideCore on permission_overrides {\n  id\n  userId\n  resource\n  operation\n  granted\n  conditions\n  expiresAt\n  createdBy\n  createdAt\n  updatedAt\n}": types.UserCoreFragmentDoc,
    "mutation AssignRoleToUser($userId: uuid!, $roleId: uuid!) {\n  insertUserRole(object: {roleId: $roleId}) {\n    id\n    roleId\n    role {\n      name\n      displayName\n      priority\n    }\n  }\n}\n\nmutation RemoveRoleFromUser($userRoleId: uuid!) {\n  deleteUserRole(id: $userRoleId) {\n    id\n    roleId\n  }\n}\n\nmutation SetUserRoles($userId: uuid!, $roleIds: [user_roles_insert_input!]!) {\n  deleteUserRoles(where: {userId: {_eq: $userId}}) {\n    affected_rows\n  }\n  insertUserRoles(objects: $roleIds) {\n    affected_rows\n    returning {\n      id\n      role {\n        name\n        displayName\n        priority\n      }\n    }\n  }\n}\n\nmutation CreateUserPermissionOverride($userId: uuid!, $resource: String!, $operation: String!, $granted: Boolean!, $conditions: jsonb = null, $expiresAt: timestamptz = null, $reason: String = null) {\n  insertPermissionOverride(\n    object: {resource: $resource, operation: $operation, granted: $granted, conditions: $conditions, expiresAt: $expiresAt, reason: $reason}\n  ) {\n    id\n    resource\n    operation\n    granted\n    conditions\n    expiresAt\n    reason\n  }\n}\n\nmutation CreateRolePermissionOverride($role: String!, $resource: String!, $operation: String!, $granted: Boolean!, $conditions: jsonb = null, $expiresAt: timestamptz = null, $reason: String = null) {\n  insertPermissionOverride(\n    object: {role: $role, resource: $resource, operation: $operation, granted: $granted, conditions: $conditions, expiresAt: $expiresAt, reason: $reason}\n  ) {\n    id\n    role\n    resource\n    operation\n    granted\n    conditions\n    expiresAt\n    reason\n  }\n}\n\nmutation UpdatePermissionOverride($id: uuid!, $granted: Boolean = null, $conditions: jsonb = null, $expiresAt: timestamptz = null, $reason: String = null) {\n  updatePermissionOverride(\n    pk_columns: {id: $id}\n    _set: {granted: $granted, conditions: $conditions, expiresAt: $expiresAt, reason: $reason}\n  ) {\n    id\n    role\n    resource\n    operation\n    granted\n    conditions\n    expiresAt\n    reason\n  }\n}\n\nmutation DeletePermissionOverride($id: uuid!) {\n  deletePermissionOverride(id: $id) {\n    id\n    role\n    resource\n    operation\n  }\n}\n\nmutation CreateCustomRole($name: String!, $displayName: String!, $description: String!, $priority: Int!) {\n  insertRole(\n    object: {name: $name, displayName: $displayName, description: $description, priority: $priority, isSystemRole: false}\n  ) {\n    id\n    name\n    displayName\n    description\n    priority\n    isSystemRole\n  }\n}\n\nmutation UpdateRole($id: uuid!, $displayName: String = null, $description: String = null, $priority: Int = null) {\n  updateRole(\n    pk_columns: {id: $id}\n    _set: {displayName: $displayName, description: $description, priority: $priority}\n  ) {\n    id\n    name\n    displayName\n    description\n    priority\n  }\n}\n\nmutation DeleteCustomRole($id: uuid!) {\n  deleteRole(id: $id) {\n    id\n    name\n    displayName\n  }\n}\n\nmutation AssignPermissionToRole($roleId: uuid!, $permissionId: uuid!, $conditions: jsonb = null) {\n  insertRolePermission(\n    object: {roleId: $roleId, permissionId: $permissionId, conditions: $conditions}\n  ) {\n    id\n    roleId\n    permissionId\n    conditions\n    permission {\n      action\n      resource {\n        name\n        displayName\n      }\n    }\n    role {\n      name\n      displayName\n    }\n  }\n}\n\nmutation RemovePermissionFromRole($rolePermissionId: uuid!) {\n  deleteRolePermission(id: $rolePermissionId) {\n    id\n    roleId\n    permissionId\n  }\n}\n\nmutation UpdateRolePermissionConditions($rolePermissionId: uuid!, $conditions: jsonb = null) {\n  updateRolePermission(\n    pk_columns: {id: $rolePermissionId}\n    _set: {conditions: $conditions}\n  ) {\n    id\n    conditions\n    permission {\n      action\n      resource {\n        name\n        displayName\n      }\n    }\n  }\n}\n\nmutation BulkUpdateUserRoles($userId: uuid!, $newUserRoles: [user_roles_insert_input!]!, $reason: String = null) {\n  deleteUserRoles(where: {userId: {_eq: $userId}}) {\n    affected_rows\n  }\n  insertUserRoles(objects: $newUserRoles) {\n    affected_rows\n    returning {\n      id\n      role {\n        name\n        displayName\n        priority\n      }\n    }\n  }\n}\n\nmutation EmergencyRevokeUserAccess($userId: uuid!, $reason: String!) {\n  deleteUserRoles(where: {userId: {_eq: $userId}}) {\n    affected_rows\n  }\n  insertPermissionOverrides(\n    objects: [{resource: \"system_settings\", operation: \"read\", granted: false, reason: $reason}, {resource: \"user_management\", operation: \"read\", granted: false, reason: $reason}, {resource: \"billing\", operation: \"read\", granted: false, reason: $reason}]\n  ) {\n    affected_rows\n  }\n}\n\nmutation RestoreUserAccess($userId: uuid!, $viewerRoleId: uuid!) {\n  deletePermissionOverrides(where: {granted: {_eq: false}}) {\n    affected_rows\n  }\n  insertUserRole(object: {roleId: $viewerRoleId}) {\n    id\n    role {\n      name\n      displayName\n    }\n  }\n}\n\nmutation AssignUserRole($object: user_roles_insert_input!) {\n  insertUserRole(object: $object) {\n    ...AuthUserRoleWithDetails\n  }\n}\n\nmutation RemoveUserRole($id: uuid!) {\n  deleteUserRole(id: $id) {\n    id\n  }\n}\n\nmutation UpdateUserRole($id: uuid!, $set: user_roles_set_input!) {\n  updateUserRole(pk_columns: {id: $id}, _set: $set) {\n    ...AuthUserRoleWithDetails\n  }\n}\n\nmutation CreatePermissionOverride($object: permission_overrides_insert_input!) {\n  insertPermissionOverride(object: $object) {\n    ...PermissionOverrideCore\n  }\n}\n\nmutation UpdatePermissionOverrideById($id: uuid!, $set: permission_overrides_set_input!) {\n  updatePermissionOverride(pk_columns: {id: $id}, _set: $set) {\n    ...PermissionOverrideCore\n  }\n}\n\nmutation DeletePermissionOverrideById($id: uuid!) {\n  deletePermissionOverride(id: $id) {\n    id\n  }\n}\n\nmutation CreateRole($object: roles_insert_input!) {\n  insertRole(object: $object) {\n    ...RoleCore\n  }\n}\n\nmutation UpdateRoleById($id: uuid!, $set: roles_set_input!) {\n  updateRole(pk_columns: {id: $id}, _set: $set) {\n    ...RoleCore\n  }\n}\n\nmutation DeleteRole($id: uuid!) {\n  deleteRole(id: $id) {\n    id\n  }\n}\n\nmutation AssignRolePermission($object: role_permissions_insert_input!) {\n  insertRolePermission(object: $object) {\n    ...RolePermissionCore\n  }\n}\n\nmutation RemoveRolePermission($id: uuid!) {\n  deleteRolePermission(id: $id) {\n    id\n  }\n}\n\nmutation UpdateRolePermission($id: uuid!, $set: role_permissions_set_input!) {\n  updateRolePermission(pk_columns: {id: $id}, _set: $set) {\n    ...RolePermissionCore\n  }\n}": types.AssignRoleToUserDocument,
    "query GetCurrentUserRoles {\n  users(limit: 1) {\n    id\n    email\n    isActive\n    isStaff\n    userRoles {\n      role {\n        id\n        name\n        displayName\n        description\n        priority\n        isSystemRole\n        rolePermissions {\n          permission {\n            id\n            action\n            description\n            resource {\n              id\n              name\n              displayName\n              description\n            }\n          }\n          conditions\n        }\n      }\n    }\n  }\n}\n\nquery GetAllRoles {\n  roles(order_by: {priority: desc}) {\n    id\n    name\n    displayName\n    description\n    priority\n    isSystemRole\n    rolePermissions {\n      id\n      conditions\n      permission {\n        id\n        action\n        description\n        resource {\n          id\n          name\n          displayName\n          description\n        }\n      }\n    }\n  }\n}\n\nquery GetResourcesAndPermissions {\n  resources(order_by: {name: asc}) {\n    id\n    name\n    displayName\n    description\n    permissions {\n      id\n      action\n      description\n    }\n  }\n}\n\nquery GetUsersWithRoles($limit: Int = 50, $offset: Int = 0) {\n  users(limit: $limit, offset: $offset, order_by: {createdAt: desc}) {\n    id\n    email\n    isActive\n    isStaff\n    userRoles {\n      id\n      role {\n        id\n        name\n        displayName\n        priority\n      }\n    }\n  }\n}\n\nquery GetUserPermissionOverrides($userId: uuid!) {\n  permissionOverrides(\n    where: {userId: {_eq: $userId}}\n    order_by: {createdAt: desc}\n  ) {\n    id\n    resource\n    operation\n    granted\n    conditions\n    expiresAt\n  }\n}\n\nquery GetRolePermissionOverrides($roleName: String!) {\n  permissionOverrides(\n    where: {role: {_eq: $roleName}}\n    order_by: {createdAt: desc}\n  ) {\n    id\n    resource\n    operation\n    granted\n    conditions\n    expiresAt\n  }\n}\n\nquery SearchUsersByEmail($emailPattern: String!) {\n  users(\n    where: {email: {_ilike: $emailPattern}}\n    limit: 10\n    order_by: {email: asc}\n  ) {\n    id\n    email\n    isActive\n    userRoles {\n      role {\n        name\n        displayName\n      }\n    }\n  }\n}\n\nquery GetRoleHierarchy {\n  roles(order_by: {priority: desc}) {\n    id\n    name\n    displayName\n    description\n    priority\n    isSystemRole\n    rolePermissions_aggregate {\n      aggregate {\n        count\n      }\n    }\n    userRoles_aggregate {\n      aggregate {\n        count\n      }\n    }\n  }\n}\n\nquery GetPermissionAuditLogs($limit: Int = 50, $offset: Int = 0, $startDate: timestamptz, $endDate: timestamptz) {\n  permissionAuditLogs(\n    where: {timestamp: {_gte: $startDate, _lte: $endDate}}\n    order_by: {timestamp: desc}\n    limit: $limit\n    offset: $offset\n  ) {\n    id\n    userId\n    targetUserId\n    action\n    resource\n    previous_value\n    new_value\n    timestamp\n    created_at\n  }\n}": types.GetCurrentUserRolesDocument,
};

/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 *
 *
 * @example
 * ```ts
 * const query = graphql(`query GetUser($id: ID!) { user(id: $id) { name } }`);
 * ```
 *
 * The query argument is unknown!
 * Please regenerate the types.
 */
export function graphql(source: string): unknown;

/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "fragment UserCore on users {\n  id\n  name\n  email\n  isActive\n  isStaff\n  role\n  clerkUserId\n  createdAt\n  updatedAt\n}\n\nfragment RoleCore on roles {\n  id\n  name\n  displayName\n  description\n  priority\n  isSystemRole\n  createdAt\n  updatedAt\n}\n\nfragment PermissionCore on permissions {\n  id\n  resourceId\n  action\n  description\n  legacy_permission_name\n  createdAt\n  updatedAt\n}\n\nfragment ResourceCore on resources {\n  id\n  name\n  displayName\n  description\n  createdAt\n  updatedAt\n}\n\nfragment UserRoleCore on user_roles {\n  id\n  userId\n  roleId\n  createdAt\n  updatedAt\n}\n\nfragment AuthUserRoleWithDetails on user_roles {\n  ...UserRoleCore\n  user {\n    ...UserCore\n  }\n  role {\n    ...RoleCore\n  }\n}\n\nfragment RolePermissionCore on role_permissions {\n  id\n  roleId\n  permissionId\n  conditions\n  createdAt\n  updatedAt\n}\n\nfragment PermissionOverrideCore on permission_overrides {\n  id\n  userId\n  resource\n  operation\n  granted\n  conditions\n  expiresAt\n  createdBy\n  createdAt\n  updatedAt\n}"): (typeof documents)["fragment UserCore on users {\n  id\n  name\n  email\n  isActive\n  isStaff\n  role\n  clerkUserId\n  createdAt\n  updatedAt\n}\n\nfragment RoleCore on roles {\n  id\n  name\n  displayName\n  description\n  priority\n  isSystemRole\n  createdAt\n  updatedAt\n}\n\nfragment PermissionCore on permissions {\n  id\n  resourceId\n  action\n  description\n  legacy_permission_name\n  createdAt\n  updatedAt\n}\n\nfragment ResourceCore on resources {\n  id\n  name\n  displayName\n  description\n  createdAt\n  updatedAt\n}\n\nfragment UserRoleCore on user_roles {\n  id\n  userId\n  roleId\n  createdAt\n  updatedAt\n}\n\nfragment AuthUserRoleWithDetails on user_roles {\n  ...UserRoleCore\n  user {\n    ...UserCore\n  }\n  role {\n    ...RoleCore\n  }\n}\n\nfragment RolePermissionCore on role_permissions {\n  id\n  roleId\n  permissionId\n  conditions\n  createdAt\n  updatedAt\n}\n\nfragment PermissionOverrideCore on permission_overrides {\n  id\n  userId\n  resource\n  operation\n  granted\n  conditions\n  expiresAt\n  createdBy\n  createdAt\n  updatedAt\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "mutation AssignRoleToUser($userId: uuid!, $roleId: uuid!) {\n  insertUserRole(object: {roleId: $roleId}) {\n    id\n    roleId\n    role {\n      name\n      displayName\n      priority\n    }\n  }\n}\n\nmutation RemoveRoleFromUser($userRoleId: uuid!) {\n  deleteUserRole(id: $userRoleId) {\n    id\n    roleId\n  }\n}\n\nmutation SetUserRoles($userId: uuid!, $roleIds: [user_roles_insert_input!]!) {\n  deleteUserRoles(where: {userId: {_eq: $userId}}) {\n    affected_rows\n  }\n  insertUserRoles(objects: $roleIds) {\n    affected_rows\n    returning {\n      id\n      role {\n        name\n        displayName\n        priority\n      }\n    }\n  }\n}\n\nmutation CreateUserPermissionOverride($userId: uuid!, $resource: String!, $operation: String!, $granted: Boolean!, $conditions: jsonb = null, $expiresAt: timestamptz = null, $reason: String = null) {\n  insertPermissionOverride(\n    object: {resource: $resource, operation: $operation, granted: $granted, conditions: $conditions, expiresAt: $expiresAt, reason: $reason}\n  ) {\n    id\n    resource\n    operation\n    granted\n    conditions\n    expiresAt\n    reason\n  }\n}\n\nmutation CreateRolePermissionOverride($role: String!, $resource: String!, $operation: String!, $granted: Boolean!, $conditions: jsonb = null, $expiresAt: timestamptz = null, $reason: String = null) {\n  insertPermissionOverride(\n    object: {role: $role, resource: $resource, operation: $operation, granted: $granted, conditions: $conditions, expiresAt: $expiresAt, reason: $reason}\n  ) {\n    id\n    role\n    resource\n    operation\n    granted\n    conditions\n    expiresAt\n    reason\n  }\n}\n\nmutation UpdatePermissionOverride($id: uuid!, $granted: Boolean = null, $conditions: jsonb = null, $expiresAt: timestamptz = null, $reason: String = null) {\n  updatePermissionOverride(\n    pk_columns: {id: $id}\n    _set: {granted: $granted, conditions: $conditions, expiresAt: $expiresAt, reason: $reason}\n  ) {\n    id\n    role\n    resource\n    operation\n    granted\n    conditions\n    expiresAt\n    reason\n  }\n}\n\nmutation DeletePermissionOverride($id: uuid!) {\n  deletePermissionOverride(id: $id) {\n    id\n    role\n    resource\n    operation\n  }\n}\n\nmutation CreateCustomRole($name: String!, $displayName: String!, $description: String!, $priority: Int!) {\n  insertRole(\n    object: {name: $name, displayName: $displayName, description: $description, priority: $priority, isSystemRole: false}\n  ) {\n    id\n    name\n    displayName\n    description\n    priority\n    isSystemRole\n  }\n}\n\nmutation UpdateRole($id: uuid!, $displayName: String = null, $description: String = null, $priority: Int = null) {\n  updateRole(\n    pk_columns: {id: $id}\n    _set: {displayName: $displayName, description: $description, priority: $priority}\n  ) {\n    id\n    name\n    displayName\n    description\n    priority\n  }\n}\n\nmutation DeleteCustomRole($id: uuid!) {\n  deleteRole(id: $id) {\n    id\n    name\n    displayName\n  }\n}\n\nmutation AssignPermissionToRole($roleId: uuid!, $permissionId: uuid!, $conditions: jsonb = null) {\n  insertRolePermission(\n    object: {roleId: $roleId, permissionId: $permissionId, conditions: $conditions}\n  ) {\n    id\n    roleId\n    permissionId\n    conditions\n    permission {\n      action\n      resource {\n        name\n        displayName\n      }\n    }\n    role {\n      name\n      displayName\n    }\n  }\n}\n\nmutation RemovePermissionFromRole($rolePermissionId: uuid!) {\n  deleteRolePermission(id: $rolePermissionId) {\n    id\n    roleId\n    permissionId\n  }\n}\n\nmutation UpdateRolePermissionConditions($rolePermissionId: uuid!, $conditions: jsonb = null) {\n  updateRolePermission(\n    pk_columns: {id: $rolePermissionId}\n    _set: {conditions: $conditions}\n  ) {\n    id\n    conditions\n    permission {\n      action\n      resource {\n        name\n        displayName\n      }\n    }\n  }\n}\n\nmutation BulkUpdateUserRoles($userId: uuid!, $newUserRoles: [user_roles_insert_input!]!, $reason: String = null) {\n  deleteUserRoles(where: {userId: {_eq: $userId}}) {\n    affected_rows\n  }\n  insertUserRoles(objects: $newUserRoles) {\n    affected_rows\n    returning {\n      id\n      role {\n        name\n        displayName\n        priority\n      }\n    }\n  }\n}\n\nmutation EmergencyRevokeUserAccess($userId: uuid!, $reason: String!) {\n  deleteUserRoles(where: {userId: {_eq: $userId}}) {\n    affected_rows\n  }\n  insertPermissionOverrides(\n    objects: [{resource: \"system_settings\", operation: \"read\", granted: false, reason: $reason}, {resource: \"user_management\", operation: \"read\", granted: false, reason: $reason}, {resource: \"billing\", operation: \"read\", granted: false, reason: $reason}]\n  ) {\n    affected_rows\n  }\n}\n\nmutation RestoreUserAccess($userId: uuid!, $viewerRoleId: uuid!) {\n  deletePermissionOverrides(where: {granted: {_eq: false}}) {\n    affected_rows\n  }\n  insertUserRole(object: {roleId: $viewerRoleId}) {\n    id\n    role {\n      name\n      displayName\n    }\n  }\n}\n\nmutation AssignUserRole($object: user_roles_insert_input!) {\n  insertUserRole(object: $object) {\n    ...AuthUserRoleWithDetails\n  }\n}\n\nmutation RemoveUserRole($id: uuid!) {\n  deleteUserRole(id: $id) {\n    id\n  }\n}\n\nmutation UpdateUserRole($id: uuid!, $set: user_roles_set_input!) {\n  updateUserRole(pk_columns: {id: $id}, _set: $set) {\n    ...AuthUserRoleWithDetails\n  }\n}\n\nmutation CreatePermissionOverride($object: permission_overrides_insert_input!) {\n  insertPermissionOverride(object: $object) {\n    ...PermissionOverrideCore\n  }\n}\n\nmutation UpdatePermissionOverrideById($id: uuid!, $set: permission_overrides_set_input!) {\n  updatePermissionOverride(pk_columns: {id: $id}, _set: $set) {\n    ...PermissionOverrideCore\n  }\n}\n\nmutation DeletePermissionOverrideById($id: uuid!) {\n  deletePermissionOverride(id: $id) {\n    id\n  }\n}\n\nmutation CreateRole($object: roles_insert_input!) {\n  insertRole(object: $object) {\n    ...RoleCore\n  }\n}\n\nmutation UpdateRoleById($id: uuid!, $set: roles_set_input!) {\n  updateRole(pk_columns: {id: $id}, _set: $set) {\n    ...RoleCore\n  }\n}\n\nmutation DeleteRole($id: uuid!) {\n  deleteRole(id: $id) {\n    id\n  }\n}\n\nmutation AssignRolePermission($object: role_permissions_insert_input!) {\n  insertRolePermission(object: $object) {\n    ...RolePermissionCore\n  }\n}\n\nmutation RemoveRolePermission($id: uuid!) {\n  deleteRolePermission(id: $id) {\n    id\n  }\n}\n\nmutation UpdateRolePermission($id: uuid!, $set: role_permissions_set_input!) {\n  updateRolePermission(pk_columns: {id: $id}, _set: $set) {\n    ...RolePermissionCore\n  }\n}"): (typeof documents)["mutation AssignRoleToUser($userId: uuid!, $roleId: uuid!) {\n  insertUserRole(object: {roleId: $roleId}) {\n    id\n    roleId\n    role {\n      name\n      displayName\n      priority\n    }\n  }\n}\n\nmutation RemoveRoleFromUser($userRoleId: uuid!) {\n  deleteUserRole(id: $userRoleId) {\n    id\n    roleId\n  }\n}\n\nmutation SetUserRoles($userId: uuid!, $roleIds: [user_roles_insert_input!]!) {\n  deleteUserRoles(where: {userId: {_eq: $userId}}) {\n    affected_rows\n  }\n  insertUserRoles(objects: $roleIds) {\n    affected_rows\n    returning {\n      id\n      role {\n        name\n        displayName\n        priority\n      }\n    }\n  }\n}\n\nmutation CreateUserPermissionOverride($userId: uuid!, $resource: String!, $operation: String!, $granted: Boolean!, $conditions: jsonb = null, $expiresAt: timestamptz = null, $reason: String = null) {\n  insertPermissionOverride(\n    object: {resource: $resource, operation: $operation, granted: $granted, conditions: $conditions, expiresAt: $expiresAt, reason: $reason}\n  ) {\n    id\n    resource\n    operation\n    granted\n    conditions\n    expiresAt\n    reason\n  }\n}\n\nmutation CreateRolePermissionOverride($role: String!, $resource: String!, $operation: String!, $granted: Boolean!, $conditions: jsonb = null, $expiresAt: timestamptz = null, $reason: String = null) {\n  insertPermissionOverride(\n    object: {role: $role, resource: $resource, operation: $operation, granted: $granted, conditions: $conditions, expiresAt: $expiresAt, reason: $reason}\n  ) {\n    id\n    role\n    resource\n    operation\n    granted\n    conditions\n    expiresAt\n    reason\n  }\n}\n\nmutation UpdatePermissionOverride($id: uuid!, $granted: Boolean = null, $conditions: jsonb = null, $expiresAt: timestamptz = null, $reason: String = null) {\n  updatePermissionOverride(\n    pk_columns: {id: $id}\n    _set: {granted: $granted, conditions: $conditions, expiresAt: $expiresAt, reason: $reason}\n  ) {\n    id\n    role\n    resource\n    operation\n    granted\n    conditions\n    expiresAt\n    reason\n  }\n}\n\nmutation DeletePermissionOverride($id: uuid!) {\n  deletePermissionOverride(id: $id) {\n    id\n    role\n    resource\n    operation\n  }\n}\n\nmutation CreateCustomRole($name: String!, $displayName: String!, $description: String!, $priority: Int!) {\n  insertRole(\n    object: {name: $name, displayName: $displayName, description: $description, priority: $priority, isSystemRole: false}\n  ) {\n    id\n    name\n    displayName\n    description\n    priority\n    isSystemRole\n  }\n}\n\nmutation UpdateRole($id: uuid!, $displayName: String = null, $description: String = null, $priority: Int = null) {\n  updateRole(\n    pk_columns: {id: $id}\n    _set: {displayName: $displayName, description: $description, priority: $priority}\n  ) {\n    id\n    name\n    displayName\n    description\n    priority\n  }\n}\n\nmutation DeleteCustomRole($id: uuid!) {\n  deleteRole(id: $id) {\n    id\n    name\n    displayName\n  }\n}\n\nmutation AssignPermissionToRole($roleId: uuid!, $permissionId: uuid!, $conditions: jsonb = null) {\n  insertRolePermission(\n    object: {roleId: $roleId, permissionId: $permissionId, conditions: $conditions}\n  ) {\n    id\n    roleId\n    permissionId\n    conditions\n    permission {\n      action\n      resource {\n        name\n        displayName\n      }\n    }\n    role {\n      name\n      displayName\n    }\n  }\n}\n\nmutation RemovePermissionFromRole($rolePermissionId: uuid!) {\n  deleteRolePermission(id: $rolePermissionId) {\n    id\n    roleId\n    permissionId\n  }\n}\n\nmutation UpdateRolePermissionConditions($rolePermissionId: uuid!, $conditions: jsonb = null) {\n  updateRolePermission(\n    pk_columns: {id: $rolePermissionId}\n    _set: {conditions: $conditions}\n  ) {\n    id\n    conditions\n    permission {\n      action\n      resource {\n        name\n        displayName\n      }\n    }\n  }\n}\n\nmutation BulkUpdateUserRoles($userId: uuid!, $newUserRoles: [user_roles_insert_input!]!, $reason: String = null) {\n  deleteUserRoles(where: {userId: {_eq: $userId}}) {\n    affected_rows\n  }\n  insertUserRoles(objects: $newUserRoles) {\n    affected_rows\n    returning {\n      id\n      role {\n        name\n        displayName\n        priority\n      }\n    }\n  }\n}\n\nmutation EmergencyRevokeUserAccess($userId: uuid!, $reason: String!) {\n  deleteUserRoles(where: {userId: {_eq: $userId}}) {\n    affected_rows\n  }\n  insertPermissionOverrides(\n    objects: [{resource: \"system_settings\", operation: \"read\", granted: false, reason: $reason}, {resource: \"user_management\", operation: \"read\", granted: false, reason: $reason}, {resource: \"billing\", operation: \"read\", granted: false, reason: $reason}]\n  ) {\n    affected_rows\n  }\n}\n\nmutation RestoreUserAccess($userId: uuid!, $viewerRoleId: uuid!) {\n  deletePermissionOverrides(where: {granted: {_eq: false}}) {\n    affected_rows\n  }\n  insertUserRole(object: {roleId: $viewerRoleId}) {\n    id\n    role {\n      name\n      displayName\n    }\n  }\n}\n\nmutation AssignUserRole($object: user_roles_insert_input!) {\n  insertUserRole(object: $object) {\n    ...AuthUserRoleWithDetails\n  }\n}\n\nmutation RemoveUserRole($id: uuid!) {\n  deleteUserRole(id: $id) {\n    id\n  }\n}\n\nmutation UpdateUserRole($id: uuid!, $set: user_roles_set_input!) {\n  updateUserRole(pk_columns: {id: $id}, _set: $set) {\n    ...AuthUserRoleWithDetails\n  }\n}\n\nmutation CreatePermissionOverride($object: permission_overrides_insert_input!) {\n  insertPermissionOverride(object: $object) {\n    ...PermissionOverrideCore\n  }\n}\n\nmutation UpdatePermissionOverrideById($id: uuid!, $set: permission_overrides_set_input!) {\n  updatePermissionOverride(pk_columns: {id: $id}, _set: $set) {\n    ...PermissionOverrideCore\n  }\n}\n\nmutation DeletePermissionOverrideById($id: uuid!) {\n  deletePermissionOverride(id: $id) {\n    id\n  }\n}\n\nmutation CreateRole($object: roles_insert_input!) {\n  insertRole(object: $object) {\n    ...RoleCore\n  }\n}\n\nmutation UpdateRoleById($id: uuid!, $set: roles_set_input!) {\n  updateRole(pk_columns: {id: $id}, _set: $set) {\n    ...RoleCore\n  }\n}\n\nmutation DeleteRole($id: uuid!) {\n  deleteRole(id: $id) {\n    id\n  }\n}\n\nmutation AssignRolePermission($object: role_permissions_insert_input!) {\n  insertRolePermission(object: $object) {\n    ...RolePermissionCore\n  }\n}\n\nmutation RemoveRolePermission($id: uuid!) {\n  deleteRolePermission(id: $id) {\n    id\n  }\n}\n\nmutation UpdateRolePermission($id: uuid!, $set: role_permissions_set_input!) {\n  updateRolePermission(pk_columns: {id: $id}, _set: $set) {\n    ...RolePermissionCore\n  }\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "query GetCurrentUserRoles {\n  users(limit: 1) {\n    id\n    email\n    isActive\n    isStaff\n    userRoles {\n      role {\n        id\n        name\n        displayName\n        description\n        priority\n        isSystemRole\n        rolePermissions {\n          permission {\n            id\n            action\n            description\n            resource {\n              id\n              name\n              displayName\n              description\n            }\n          }\n          conditions\n        }\n      }\n    }\n  }\n}\n\nquery GetAllRoles {\n  roles(order_by: {priority: desc}) {\n    id\n    name\n    displayName\n    description\n    priority\n    isSystemRole\n    rolePermissions {\n      id\n      conditions\n      permission {\n        id\n        action\n        description\n        resource {\n          id\n          name\n          displayName\n          description\n        }\n      }\n    }\n  }\n}\n\nquery GetResourcesAndPermissions {\n  resources(order_by: {name: asc}) {\n    id\n    name\n    displayName\n    description\n    permissions {\n      id\n      action\n      description\n    }\n  }\n}\n\nquery GetUsersWithRoles($limit: Int = 50, $offset: Int = 0) {\n  users(limit: $limit, offset: $offset, order_by: {createdAt: desc}) {\n    id\n    email\n    isActive\n    isStaff\n    userRoles {\n      id\n      role {\n        id\n        name\n        displayName\n        priority\n      }\n    }\n  }\n}\n\nquery GetUserPermissionOverrides($userId: uuid!) {\n  permissionOverrides(\n    where: {userId: {_eq: $userId}}\n    order_by: {createdAt: desc}\n  ) {\n    id\n    resource\n    operation\n    granted\n    conditions\n    expiresAt\n  }\n}\n\nquery GetRolePermissionOverrides($roleName: String!) {\n  permissionOverrides(\n    where: {role: {_eq: $roleName}}\n    order_by: {createdAt: desc}\n  ) {\n    id\n    resource\n    operation\n    granted\n    conditions\n    expiresAt\n  }\n}\n\nquery SearchUsersByEmail($emailPattern: String!) {\n  users(\n    where: {email: {_ilike: $emailPattern}}\n    limit: 10\n    order_by: {email: asc}\n  ) {\n    id\n    email\n    isActive\n    userRoles {\n      role {\n        name\n        displayName\n      }\n    }\n  }\n}\n\nquery GetRoleHierarchy {\n  roles(order_by: {priority: desc}) {\n    id\n    name\n    displayName\n    description\n    priority\n    isSystemRole\n    rolePermissions_aggregate {\n      aggregate {\n        count\n      }\n    }\n    userRoles_aggregate {\n      aggregate {\n        count\n      }\n    }\n  }\n}\n\nquery GetPermissionAuditLogs($limit: Int = 50, $offset: Int = 0, $startDate: timestamptz, $endDate: timestamptz) {\n  permissionAuditLogs(\n    where: {timestamp: {_gte: $startDate, _lte: $endDate}}\n    order_by: {timestamp: desc}\n    limit: $limit\n    offset: $offset\n  ) {\n    id\n    userId\n    targetUserId\n    action\n    resource\n    previous_value\n    new_value\n    timestamp\n    created_at\n  }\n}"): (typeof documents)["query GetCurrentUserRoles {\n  users(limit: 1) {\n    id\n    email\n    isActive\n    isStaff\n    userRoles {\n      role {\n        id\n        name\n        displayName\n        description\n        priority\n        isSystemRole\n        rolePermissions {\n          permission {\n            id\n            action\n            description\n            resource {\n              id\n              name\n              displayName\n              description\n            }\n          }\n          conditions\n        }\n      }\n    }\n  }\n}\n\nquery GetAllRoles {\n  roles(order_by: {priority: desc}) {\n    id\n    name\n    displayName\n    description\n    priority\n    isSystemRole\n    rolePermissions {\n      id\n      conditions\n      permission {\n        id\n        action\n        description\n        resource {\n          id\n          name\n          displayName\n          description\n        }\n      }\n    }\n  }\n}\n\nquery GetResourcesAndPermissions {\n  resources(order_by: {name: asc}) {\n    id\n    name\n    displayName\n    description\n    permissions {\n      id\n      action\n      description\n    }\n  }\n}\n\nquery GetUsersWithRoles($limit: Int = 50, $offset: Int = 0) {\n  users(limit: $limit, offset: $offset, order_by: {createdAt: desc}) {\n    id\n    email\n    isActive\n    isStaff\n    userRoles {\n      id\n      role {\n        id\n        name\n        displayName\n        priority\n      }\n    }\n  }\n}\n\nquery GetUserPermissionOverrides($userId: uuid!) {\n  permissionOverrides(\n    where: {userId: {_eq: $userId}}\n    order_by: {createdAt: desc}\n  ) {\n    id\n    resource\n    operation\n    granted\n    conditions\n    expiresAt\n  }\n}\n\nquery GetRolePermissionOverrides($roleName: String!) {\n  permissionOverrides(\n    where: {role: {_eq: $roleName}}\n    order_by: {createdAt: desc}\n  ) {\n    id\n    resource\n    operation\n    granted\n    conditions\n    expiresAt\n  }\n}\n\nquery SearchUsersByEmail($emailPattern: String!) {\n  users(\n    where: {email: {_ilike: $emailPattern}}\n    limit: 10\n    order_by: {email: asc}\n  ) {\n    id\n    email\n    isActive\n    userRoles {\n      role {\n        name\n        displayName\n      }\n    }\n  }\n}\n\nquery GetRoleHierarchy {\n  roles(order_by: {priority: desc}) {\n    id\n    name\n    displayName\n    description\n    priority\n    isSystemRole\n    rolePermissions_aggregate {\n      aggregate {\n        count\n      }\n    }\n    userRoles_aggregate {\n      aggregate {\n        count\n      }\n    }\n  }\n}\n\nquery GetPermissionAuditLogs($limit: Int = 50, $offset: Int = 0, $startDate: timestamptz, $endDate: timestamptz) {\n  permissionAuditLogs(\n    where: {timestamp: {_gte: $startDate, _lte: $endDate}}\n    order_by: {timestamp: desc}\n    limit: $limit\n    offset: $offset\n  ) {\n    id\n    userId\n    targetUserId\n    action\n    resource\n    previous_value\n    new_value\n    timestamp\n    created_at\n  }\n}"];

export function graphql(source: string) {
  return (documents as any)[source] ?? {};
}

export type DocumentType<TDocumentNode extends DocumentNode<any, any>> = TDocumentNode extends DocumentNode<  infer TType,  any>  ? TType  : never;