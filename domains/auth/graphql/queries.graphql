# ================================
# RBAC SYSTEM GRAPHQL QUERIES
# Following project GraphQL standards
# ================================

# Get current user's roles and permissions
query GetCurrentUserRoles {
  users(limit: 1) {
    id
    email
    isActive
    isStaff
    assignedRoles {
      assignedRole {
        id
        name
        displayName
        description
        priority
        isSystemRole
        assignedPermissions {
          grantedPermission {
            id
            action
            description
            relatedResource {
              id
              name
              displayName
              description
            }
          }
          conditions
        }
      }
    }
  }
}

# Get all available roles (for admin interfaces)
query GetAllRoles {
  roles(orderBy: { priority: DESC }) {
    id
    name
    displayName
    description
    priority
    isSystemRole
    assignedPermissions {
      id
      conditions
      grantedPermission {
        id
        action
        description
        relatedResource {
          id
          name
          displayName
          description
        }
      }
    }
  }
}

# Get all resources and their permissions
query GetResourcesAndPermissions {
  resources(orderBy: { name: ASC }) {
    id
    name
    displayName
    description
    availablePermissions {
      id
      action
      description
    }
  }
}

# Get users with their role assignments (admin view)
query GetUsersWithRoles($limit: Int = 50, $offset: Int = 0) {
  users(limit: $limit, offset: $offset, orderBy: { createdAt: DESC }) {
    id
    email
    isActive
    isStaff
    assignedRoles {
      id
      assignedRole {
        id
        name
        displayName
        priority
      }
    }
  }
}

# Get permission overrides for a user
query GetUserPermissionOverrides($userId: uuid!) {
  permissionOverrides(
    where: { userId: { _eq: $userId } }
    orderBy: { createdAt: DESC }
  ) {
    id
    resource
    operation
    granted
    conditions
    expiresAt
  }
}

# Get role-based permission overrides
query GetRolePermissionOverrides($roleName: String!) {
  permissionOverrides(
    where: { role: { _eq: $roleName } }
    orderBy: { createdAt: DESC }
  ) {
    id
    resource
    operation
    granted
    conditions
    expiresAt
  }
}

# Search users by email (for role assignment)
query SearchUsersByEmail($emailPattern: String!) {
  users(
    where: { email: { _ilike: $emailPattern } }
    limit: 10
    orderBy: { email: ASC }
  ) {
    id
    email
    isActive
    assignedRoles {
      assignedRole {
        name
        displayName
      }
    }
  }
}

# Get role hierarchy with inheritance visualization
query GetRoleHierarchy {
  roles(orderBy: { priority: DESC }) {
    id
    name
    displayName
    description
    priority
    isSystemRole
    # Count of direct permissions
    assignedPermissionsAggregate {
      aggregate {
        count
      }
    }
    # Count of users with this role
    assignedToUsersAggregate {
      aggregate {
        count
      }
    }
  }
}

# Get audit logs related to permission changes
query GetPermissionAuditLogs(
  $limit: Int = 50
  $offset: Int = 0
  $startDate: timestamptz
  $endDate: timestamptz
) {
  permissionAuditLogs(
    where: { timestamp: { _gte: $startDate, _lte: $endDate } }
    orderBy: { timestamp: DESC }
    limit: $limit
    offset: $offset
  ) {
    id
    userId
    targetUserId
    action
    resource
    previousValue
    newValue
    timestamp
    createdAt
  }
}

# ================================
# USER INVITATION QUERIES
# Focus: Invitation management and validation
# ================================

# Get pending invitations (admin view)
query GetPendingInvitations($limit: Int = 50, $offset: Int = 0) {
  userInvitations(
    where: { status: { _eq: "pending" } }
    orderBy: { invitedAt: DESC }
    limit: $limit
    offset: $offset
  ) {
    id
    email
    firstName
    lastName
    invitedRole
    managerId
    invitedAt
    expiresAt
    status
    invitedByUser {
      name
      email
      role
    }
    managerUser {
      name
      email
    }
  }
}

# Get invitation by Clerk ticket (for acceptance flow)
query GetInvitationByTicket($clerkTicket: String!) {
  userInvitations(
    where: { 
      clerkTicket: { _eq: $clerkTicket }
      status: { _eq: "pending" }
      expiresAt: { _gt: "now()" }
    }
    limit: 1
  ) {
    id
    email
    firstName
    lastName
    invitedRole
    managerId
    invitationMetadata
    invitedAt
    expiresAt
    invitedByUser {
      name
      email
      role
    }
    managerUser {
      name
      email
    }
  }
}

# Get invitation history for a user (admin view)
query GetInvitationHistory($email: String!, $limit: Int = 10) {
  userInvitations(
    where: { email: { _eq: $email } }
    orderBy: { invitedAt: DESC }
    limit: $limit
  ) {
    id
    email
    firstName
    lastName
    invitedRole
    status
    invitedAt
    acceptedAt
    expiresAt
    invitedByUser {
      name
      email
    }
    acceptedByUser {
      name
      email
      clerkUserId
    }
  }
}

# Get all invitations sent by a user
query GetInvitationsBySender($invitedBy: uuid!, $limit: Int = 50) {
  userInvitations(
    where: { invitedBy: { _eq: $invitedBy } }
    orderBy: { invitedAt: DESC }
    limit: $limit
  ) {
    id
    email
    firstName
    lastName
    invitedRole
    status
    invitedAt
    acceptedAt
    expiresAt
    acceptedByUser {
      name
      email
    }
  }
}

# Get expired invitations for cleanup
query GetExpiredInvitations($limit: Int = 100) {
  userInvitations(
    where: { 
      status: { _eq: "pending" }
      expiresAt: { _lt: "now()" }
    }
    orderBy: { expiresAt: ASC }
    limit: $limit
  ) {
    id
    email
    firstName
    lastName
    invitedRole
    invitedAt
    expiresAt
  }
}

# Validate invitation role assignment permissions
query ValidateInvitationRolePermissions($invitedRole: String!, $invitedBy: uuid!) {
  # Get the inviter's roles and permissions
  users(where: { id: { _eq: $invitedBy } }) {
    id
    role
    assignedRoles {
      assignedRole {
        name
        priority
        assignedPermissions {
          grantedPermission {
            action
            relatedResource {
              name
            }
          }
        }
      }
    }
  }
  
  # Get the target role details
  roles(where: { name: { _eq: $invitedRole } }) {
    id
    name
    priority
    isSystemRole
  }
}

# Get invitation by ID for resending
query GetInvitationById($invitationId: uuid!) {
  userInvitations(where: { id: { _eq: $invitationId } }) {
    id
    email
    firstName
    lastName
    invitedRole
    managerId
    clerkInvitationId
    clerkTicket
    invitationMetadata
    invitedBy
    invitedAt
    acceptedAt
    expiresAt
    status
    invitedByUser {
      id
      name
      email
      role
    }
    managerUser {
      id
      name
      email
    }
  }
}

# Get resendable invitations (pending or expired, not accepted)
query GetResendableInvitations($invitedBy: uuid!, $limit: Int = 50) {
  userInvitations(
    where: { 
      invitedBy: { _eq: $invitedBy }
      status: { _in: ["pending", "expired"] }
    }
    orderBy: { invitedAt: DESC }
    limit: $limit
  ) {
    id
    email
    firstName
    lastName
    invitedRole
    status
    invitedAt
    expiresAt
    acceptedAt
  }
}

# NOTE: API key management queries removed - api_keys table not found in schema
# File: lib/security/persistent-api-keys.ts still uses inline GraphQL

