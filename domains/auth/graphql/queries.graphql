# ================================
# RBAC SYSTEM GRAPHQL QUERIES
# Following project GraphQL standards
# ================================

# Get current user's roles and permissions
query GetCurrentUserRoles {
  users(limit: 1) {
    id
    email
    isActive
    isStaff
    userRoles {
      role {
        id
        name
        displayName
        description
        priority
        isSystemRole
        rolePermissions {
          permission {
            id
            action
            description
            resource {
              id
              name
              displayName
              description
            }
          }
          conditions
        }
      }
    }
  }
}

# Get all available roles (for admin interfaces)
query GetAllRoles {
  roles(order_by: { priority: desc }) {
    id
    name
    displayName
    description
    priority
    isSystemRole
    rolePermissions {
      id
      conditions
      permission {
        id
        action
        description
        resource {
          id
          name
          displayName
          description
        }
      }
    }
  }
}

# Get all resources and their permissions
query GetResourcesAndPermissions {
  resources(order_by: { name: asc }) {
    id
    name
    displayName
    description
    permissions {
      id
      action
      description
    }
  }
}

# Get users with their role assignments (admin view)
query GetUsersWithRoles($limit: Int = 50, $offset: Int = 0) {
  users(limit: $limit, offset: $offset, order_by: { createdAt: desc }) {
    id
    email
    isActive
    isStaff
    userRoles {
      id
      role {
        id
        name
        displayName
        priority
      }
    }
  }
}

# Get permission overrides for a user
query GetUserPermissionOverrides($userId: uuid!) {
  permissionOverrides(
    where: { userId: { _eq: $userId } }
    order_by: { createdAt: desc }
  ) {
    id
    resource
    operation
    granted
    conditions
    expiresAt
  }
}

# Get role-based permission overrides
query GetRolePermissionOverrides($roleName: String!) {
  permissionOverrides(
    where: { role: { _eq: $roleName } }
    order_by: { createdAt: desc }
  ) {
    id
    resource
    operation
    granted
    conditions
    expiresAt
  }
}

# Search users by email (for role assignment)
query SearchUsersByEmail($emailPattern: String!) {
  users(
    where: { email: { _ilike: $emailPattern } }
    limit: 10
    order_by: { email: asc }
  ) {
    id
    email
    isActive
    userRoles {
      role {
        name
        displayName
      }
    }
  }
}

# Get role hierarchy with inheritance visualization
query GetRoleHierarchy {
  roles(order_by: { priority: desc }) {
    id
    name
    displayName
    description
    priority
    isSystemRole
    # Count of direct permissions
    rolePermissions_aggregate {
      aggregate {
        count
      }
    }
    # Count of users with this role
    userRoles_aggregate {
      aggregate {
        count
      }
    }
  }
}

# Get audit logs related to permission changes
query GetPermissionAuditLogs(
  $limit: Int = 50
  $offset: Int = 0
  $startDate: timestamptz
  $endDate: timestamptz
) {
  permissionAuditLogs(
    where: { timestamp: { _gte: $startDate, _lte: $endDate } }
    order_by: { timestamp: desc }
    limit: $limit
    offset: $offset
  ) {
    id
    userId
    targetUserId
    action
    resource
    previous_value
    new_value
    timestamp
    created_at
  }
}

# NOTE: GetHasuraClaimsForUser query cannot be added yet because 
# get_hasura_claims function is not exposed in GraphQL schema.
# This needs to be added to Hasura metadata first.

# NOTE: API key management queries removed - api_keys table not found in schema
# File: lib/security/persistent-api-keys.ts still uses inline GraphQL

