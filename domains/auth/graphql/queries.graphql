# ================================
# RBAC SYSTEM GRAPHQL QUERIES
# Following project GraphQL standards
# ================================

# Get current user's roles and permissions
query GetCurrentUserRoles {
  users(limit: 1) {
    id
    email
    isActive
    isStaff
    assignedRoles {
      assignedRole {
        id
        name
        displayName
        description
        priority
        isSystemRole
        assignedPermissions {
          grantedPermission {
            id
            action
            description
            relatedResource {
              id
              name
              displayName
              description
            }
          }
          conditions
        }
      }
    }
  }
}

# Get all available roles (for admin interfaces)
query GetAllRoles {
  roles(orderBy: { priority: DESC }) {
    id
    name
    displayName
    description
    priority
    isSystemRole
    assignedPermissions {
      id
      conditions
      grantedPermission {
        id
        action
        description
        relatedResource {
          id
          name
          displayName
          description
        }
      }
    }
  }
}

# Get all resources and their permissions
query GetResourcesAndPermissions {
  resources(orderBy: { name: ASC }) {
    id
    name
    displayName
    description
    availablePermissions {
      id
      action
      description
    }
  }
}

# Get users with their role assignments (admin view)
query GetUsersWithRoles($limit: Int = 50, $offset: Int = 0) {
  users(limit: $limit, offset: $offset, orderBy: { createdAt: DESC }) {
    id
    email
    isActive
    isStaff
    assignedRoles {
      id
      assignedRole {
        id
        name
        displayName
        priority
      }
    }
  }
}

# Get permission overrides for a user
query GetUserPermissionOverrides($userId: uuid!) {
  permissionOverrides(
    where: { userId: { _eq: $userId } }
    orderBy: { createdAt: DESC }
  ) {
    id
    resource
    operation
    granted
    conditions
    expiresAt
  }
}

# Get role-based permission overrides
query GetRolePermissionOverrides($roleName: String!) {
  permissionOverrides(
    where: { role: { _eq: $roleName } }
    orderBy: { createdAt: DESC }
  ) {
    id
    resource
    operation
    granted
    conditions
    expiresAt
  }
}

# Search users by email (for role assignment)
query SearchUsersByEmail($emailPattern: String!) {
  users(
    where: { email: { _ilike: $emailPattern } }
    limit: 10
    orderBy: { email: ASC }
  ) {
    id
    email
    isActive
    assignedRoles {
      assignedRole {
        name
        displayName
      }
    }
  }
}

# Get role hierarchy with inheritance visualization
query GetRoleHierarchy {
  roles(orderBy: { priority: DESC }) {
    id
    name
    displayName
    description
    priority
    isSystemRole
    # Count of direct permissions
    assignedPermissionsAggregate {
      aggregate {
        count
      }
    }
    # Count of users with this role
    assignedToUsersAggregate {
      aggregate {
        count
      }
    }
  }
}

# Get audit logs related to permission changes
query GetPermissionAuditLogs(
  $limit: Int = 50
  $offset: Int = 0
  $startDate: timestamptz
  $endDate: timestamptz
) {
  permissionAuditLogs(
    where: { timestamp: { _gte: $startDate, _lte: $endDate } }
    orderBy: { timestamp: DESC }
    limit: $limit
    offset: $offset
  ) {
    id
    userId
    targetUserId
    action
    resource
    previousValue
    newValue
    timestamp
    createdAt
  }
}

# ================================
# USER INVITATION QUERIES
# Focus: Invitation management and validation
# ================================

# Get pending invitations (admin view)
query GetPendingInvitations($limit: Int = 50, $offset: Int = 0, $now: timestamptz!) {
  userInvitations(
    where: { invitationStatus: { _eq: "pending" }, expiresAt: { _gt: $now } }
    orderBy: { createdAt: DESC }
    limit: $limit
    offset: $offset
  ) {
    ...UserInvitationCore
  }
}

# Get invitation by Clerk ticket (for acceptance flow)
query GetInvitationByTicket($clerkTicket: String!) {
  userInvitations(where: { clerkTicket: { _eq: $clerkTicket } }, limit: 1) {
    ...UserInvitationDetail
  }
}

# Get invitation history for a user (admin view)
query GetInvitationHistory($email: String!, $limit: Int = 10) {
  userInvitations(
    where: { email: { _eq: $email } }
    orderBy: { invitedAt: DESC }
    limit: $limit
  ) {
    id
    email
    firstName
    lastName
    invitedRole
    invitationStatus
    invitedAt
    acceptedAt
    expiresAt
    invitedByUser {
      name
      email
    }
    acceptedByUser {
      name
      email
      clerkUserId
    }
  }
}

# Get all invitations sent by a user
query GetInvitationsBySender($invitedBy: uuid!, $limit: Int = 50) {
  userInvitations(
    where: { invitedBy: { _eq: $invitedBy } }
    orderBy: { invitedAt: DESC }
    limit: $limit
  ) {
    id
    email
    firstName
    lastName
    invitedRole
    invitationStatus
    invitedAt
    acceptedAt
    expiresAt
    acceptedByUser {
      name
      email
    }
  }
}

# Get expired invitations for cleanup
query GetExpiredInvitations($now: timestamptz!) {
  userInvitations(
    where: {
      _or: [{ status: { _eq: "expired" } }, { expiresAt: { _lt: $now } }]
    }
    orderBy: { expiresAt: DESC }
  ) {
    ...UserInvitationDetail
  }
}

# Validate invitation role assignment permissions
query ValidateInvitationRolePermissions(
  $invitedRole: String!
  $invitedBy: uuid!
) {
  # Get the inviter's roles and permissions
  users(where: { id: { _eq: $invitedBy } }) {
    id
    role
    assignedRoles {
      assignedRole {
        name
        priority
        assignedPermissions {
          grantedPermission {
            action
            relatedResource {
              name
            }
          }
        }
      }
    }
  }

  # Get the target role details
  roles(where: { name: { _eq: $invitedRole } }) {
    id
    name
    priority
    isSystemRole
  }
}

# Get invitation by ID for resending
query GetInvitationById($invitationId: uuid!) {
  userInvitationById(id: $invitationId) {
    ...UserInvitationDetail
  }
}

# Get resendable invitations (pending or expired, not accepted)
query GetResendableInvitations($invitedBy: uuid!, $limit: Int = 50) {
  userInvitations(
    where: {
      invitedBy: { _eq: $invitedBy }
      invitationStatus: { _in: ["pending", "expired"] }
    }
    orderBy: { invitedAt: DESC }
    limit: $limit
  ) {
    ...UserInvitationCore
  }
}

# ================================
# PHASE 2: ENHANCED INVITATION QUERIES
# Focus: Comprehensive invitation lifecycle management
# ================================

# Get all invitations with status filtering
query GetInvitationsWithStatus(
  $statuses: [invitation_status_enum!]
  $limit: Int = 50
  $offset: Int = 0
  $orderBy: [userInvitationsOrderBy!] = [{ createdAt: DESC }]
) {
  userInvitations(
    where: { invitationStatus: { _in: $statuses } }
    orderBy: $orderBy
    limit: $limit
    offset: $offset
  ) {
    ...UserInvitationWithDetails
  }
  
  userInvitationsAggregate(
    where: { invitationStatus: { _in: $statuses } }
  ) {
    aggregate {
      count
    }
  }
}

# Get invitation dashboard statistics
query GetInvitationDashboardStats($now: timestamptz!, $sevenDaysFromNow: timestamptz!) {
  pending: userInvitationsAggregate(
    where: { invitationStatus: { _eq: "pending" }, expiresAt: { _gt: $now } }
  ) {
    aggregate { count }
  }
  
  expired: userInvitationsAggregate(
    where: { invitationStatus: { _eq: "expired" } }
  ) {
    aggregate { count }
  }
  
  accepted: userInvitationsAggregate(
    where: { invitationStatus: { _eq: "accepted" } }
  ) {
    aggregate { count }
  }
  
  revoked: userInvitationsAggregate(
    where: { invitationStatus: { _eq: "revoked" } }
  ) {
    aggregate { count }
  }
  
  expiringSoon: userInvitationsAggregate(
    where: {
      invitationStatus: { _eq: "pending" }
      expiresAt: { _gt: $now, _lt: $sevenDaysFromNow }
    }
  ) {
    aggregate { count }
  }

  recentInvitations: userInvitations(
    orderBy: { createdAt: DESC }
    limit: 10
  ) {
    id
    email
    firstName
    lastName
    invitedRole
    invitationStatus
    createdAt
    expiresAt
    invitedByUser {
      id
      name
      email
    }
  }
}

# Get revoked invitations with details
query GetRevokedInvitations($limit: Int = 50, $offset: Int = 0) {
  userInvitations(
    where: { invitationStatus: { _eq: "revoked" } }
    orderBy: { revokedAt: DESC }
    limit: $limit
    offset: $offset
  ) {
    ...UserInvitationCore
  }
}

# Get invitation history for audit purposes
query GetInvitationAuditHistory(
  $email: String
  $invitedBy: uuid
  $startDate: timestamptz
  $endDate: timestamptz
  $limit: Int = 100
) {
  userInvitations(
    where: {
      _and: [
        { email: { _eq: $email } }
        { invitedBy: { _eq: $invitedBy } }
        { createdAt: { _gte: $startDate } }
        { createdAt: { _lte: $endDate } }
      ]
    }
    orderBy: { createdAt: DESC }
    limit: $limit
  ) {
    ...UserInvitationWithDetails
  }
}

# Get expiring invitations for notifications
query GetExpiringInvitations($now: timestamptz!, $futureDate: timestamptz!) {
  userInvitations(
    where: {
      invitationStatus: { _eq: "pending" }
      expiresAt: {
        _gt: $now
        _lt: $futureDate
      }
    }
    orderBy: { expiresAt: ASC }
  ) {
    ...UserInvitationWithDetails
  }
}

# Search invitations by email or name
query SearchInvitations(
  $searchTerm: String!
  $limit: Int = 20
) {
  userInvitations(
    where: {
      _or: [
        { email: { _ilike: $searchTerm } }
        { firstName: { _ilike: $searchTerm } }
        { lastName: { _ilike: $searchTerm } }
      ]
    }
    orderBy: { createdAt: DESC }
    limit: $limit
  ) {
    ...UserInvitationWithDetails
  }
}

# Get invitation by ID with full details
query GetInvitationByIdDetailed($invitationId: uuid!) {
  userInvitationById(id: $invitationId) {
    ...UserInvitationWithDetails
  }
}

# ================================
# PHASE 3: USER STATUS MANAGEMENT QUERIES
# Focus: User lifecycle management and audit reporting
# ================================

# Get users by status with filtering and pagination
query GetUsersByStatus(
  $statuses: [user_status_enum!]
  $limit: Int = 50
  $offset: Int = 0
  $orderBy: [usersOrderBy!] = [{ updatedAt: DESC }]
) {
  users(
    where: { status: { _in: $statuses } }
    orderBy: $orderBy
    limit: $limit
    offset: $offset
  ) {
    id
    email
    name
    role
    status
    isActive
    isStaff
    statusChangedAt
    statusChangedBy
    statusChangeReason
    deactivatedAt
    deactivatedBy
    createdAt
    updatedAt
  }
  
  usersAggregate(
    where: { status: { _in: $statuses } }
  ) {
    aggregate {
      count
    }
  }
}

# Get user status dashboard statistics
query GetUserStatusDashboardStats($thirtyDaysAgo: timestamptz = "2024-01-01T00:00:00Z") {
  active: usersAggregate(
    where: { status: { _eq: "active" } }
  ) {
    aggregate { count }
  }
  
  inactive: usersAggregate(
    where: { status: { _eq: "inactive" } }
  ) {
    aggregate { count }
  }
  
  locked: usersAggregate(
    where: { status: { _eq: "locked" } }
  ) {
    aggregate { count }
  }
  
  pending: usersAggregate(
    where: { status: { _eq: "pending" } }
  ) {
    aggregate { count }
  }
  
  recentStatusChanges: users(
    where: { statusChangedAt: { _gte: $thirtyDaysAgo } }
    orderBy: { statusChangedAt: DESC }
    limit: 10
  ) {
    id
    email
    name
    role
    status
    statusChangedAt
    statusChangeReason
  }
  
  staff: usersAggregate(
    where: { isStaff: { _eq: true } }
  ) {
    aggregate { count }
  }
  
  byRole: users {
    role
  }
}

# Get users requiring attention (locked, inactive, etc.)
query GetUsersRequiringAttention($limit: Int = 20) {
  locked: users(
    where: { status: { _eq: "locked" } }
    orderBy: { statusChangedAt: DESC }
    limit: $limit
  ) {
    id
    email
    name
    role
    status
    statusChangedAt
    statusChangeReason
  }
  
  inactive: users(
    where: { status: { _eq: "inactive" } }
    orderBy: { deactivatedAt: DESC }
    limit: $limit
  ) {
    id
    email
    name
    role
    status
    deactivatedAt
    statusChangeReason
  }
  
  pending: users(
    where: { status: { _eq: "pending" } }
    orderBy: { createdAt: DESC }
    limit: $limit
  ) {
    id
    email
    name
    role
    status
    createdAt
  }
}

# Get user status history for audit purposes
query GetUserStatusHistory(
  $userId: uuid!
  $startDate: timestamptz
  $endDate: timestamptz
  $limit: Int = 50
) {
  # Current user status
  user: userById(id: $userId) {
    id
    email
    name
    role
    status
    isActive
    statusChangedAt
    statusChangedBy
    statusChangeReason
    deactivatedAt
    deactivatedBy
    createdAt
    updatedAt
  }
  
  # Note: Audit logs query removed - will be implemented when audit.audit_log table is properly exposed
}

# Search users with advanced filtering
query SearchUsersAdvanced(
  $searchTerm: String
  $statuses: [user_status_enum!]
  $roles: [user_role!]
  $isStaff: Boolean
  $limit: Int = 20
) {
  users(
    where: {
      _and: [
        {
          _or: [
            { email: { _ilike: "%${searchTerm}%" } }
            { name: { _ilike: "%${searchTerm}%" } }
          ]
        }
        { status: { _in: $statuses } }
        { role: { _in: $roles } }
        { isStaff: { _eq: $isStaff } }
      ]
    }
    orderBy: { updatedAt: DESC }
    limit: $limit
  ) {
    id
    email
    name
    role
    status
    isActive
    isStaff
    statusChangedAt
    statusChangeReason
    deactivatedAt
    createdAt
  }
}

# Get user details with status information
query GetUserWithStatusDetails($userId: uuid!) {
  userById(id: $userId) {
    id
    email
    name
    role
    status
    isActive
    isStaff
    clerkUserId
    statusChangedAt
    statusChangedBy
    statusChangeReason
    deactivatedAt
    deactivatedBy
    createdAt
    updatedAt
  }
}

# NOTE: API key management queries removed - api_keys table not found in schema
# File: lib/security/persistent-api-keys.ts still uses inline GraphQL

# User invitation fragments
fragment UserInvitationDetail on userInvitations {
  id
  email
  firstName
  lastName
  invitedRole
  managerId
  clerkInvitationId
  clerkTicket
  invitationMetadata
  invitedBy
  status
  expiresAt
  createdAt
  updatedAt
}
