# ================================
# RBAC SYSTEM GRAPHQL MUTATIONS
# Following project GraphQL standards
# ================================

# Assign role to user
mutation AssignRoleToUser($userId: uuid!, $roleId: uuid!) {
  insertUserRole(object: {
    roleId: $roleId
  }) {
    id
    roleId
    role {
      name
      displayName
      priority
    }
  }
}

# Remove role from user
mutation RemoveRoleFromUser($userRoleId: uuid!) {
  deleteUserRole(id: $userRoleId) {
    id
    roleId
  }
}

# Bulk assign roles to user (replace all existing roles)
mutation SetUserRoles($userId: uuid!, $roleIds: [user_roles_insert_input!]!) {
  # First remove existing roles
  deleteUserRoles(where: { userId: { _eq: $userId } }) {
    affected_rows
  }
  
  # Then insert new roles
  insertUserRoles(objects: $roleIds) {
    affected_rows
    returning {
      id
      role {
        name
        displayName
        priority
      }
    }
  }
}

# Create permission override for user
mutation CreateUserPermissionOverride(
  $userId: uuid!,
  $resource: String!,
  $operation: String!,
  $granted: Boolean!,
  $conditions: jsonb = null,
  $expiresAt: timestamptz = null,
  $reason: String = null
) {
  insertPermissionOverride(object: {
    resource: $resource,
    operation: $operation,
    granted: $granted,
    conditions: $conditions,
    expiresAt: $expiresAt,
    reason: $reason
  }) {
    id
    resource
    operation
    granted
    conditions
    expiresAt
    reason
  }
}

# Create role-based permission override
mutation CreateRolePermissionOverride(
  $role: String!,
  $resource: String!,
  $operation: String!,
  $granted: Boolean!,
  $conditions: jsonb = null,
  $expiresAt: timestamptz = null,
  $reason: String = null
) {
  insertPermissionOverride(object: {
    role: $role,
    resource: $resource,
    operation: $operation,
    granted: $granted,
    conditions: $conditions,
    expiresAt: $expiresAt,
    reason: $reason
  }) {
    id
    role
    resource
    operation
    granted
    conditions
    expiresAt
    reason
  }
}

# Update permission override
mutation UpdatePermissionOverride(
  $id: uuid!,
  $granted: Boolean = null,
  $conditions: jsonb = null,
  $expiresAt: timestamptz = null,
  $reason: String = null
) {
  updatePermissionOverride(
    pk_columns: { id: $id },
    _set: {
      granted: $granted,
      conditions: $conditions,
      expiresAt: $expiresAt,
      reason: $reason,
    }
  ) {
    id
    role
    resource
    operation
    granted
    conditions
    expiresAt
    reason
  }
}

# Delete permission override
mutation DeletePermissionOverride($id: uuid!) {
  deletePermissionOverride(id: $id) {
    id
    role
    resource
    operation
  }
}

# Create custom role
mutation CreateCustomRole(
  $name: String!,
  $displayName: String!,
  $description: String!,
  $priority: Int!
) {
  insertRole(object: {
    name: $name,
    displayName: $displayName,
    description: $description,
    priority: $priority,
    isSystemRole: false
  }) {
    id
    name
    displayName
    description
    priority
    isSystemRole
  }
}

# Update role
mutation UpdateRole(
  $id: uuid!,
  $displayName: String = null,
  $description: String = null,
  $priority: Int = null
) {
  updateRole(
    pk_columns: { id: $id },
    _set: {
      displayName: $displayName,
      description: $description,
      priority: $priority,
    }
  ) {
    id
    name
    displayName
    description
    priority
  }
}

# Delete custom role (only non-system roles)
mutation DeleteCustomRole($id: uuid!) {
  deleteRole(id: $id) {
    id
    name
    displayName
  }
}

# Assign permission to role
mutation AssignPermissionToRole(
  $roleId: uuid!,
  $permissionId: uuid!,
  $conditions: jsonb = null
) {
  insertRolePermission(object: {
    roleId: $roleId,
    permissionId: $permissionId,
    conditions: $conditions
  }) {
    id
    roleId
    permissionId
    conditions
    permission {
      action
      resource {
        name
        displayName
      }
    }
    role {
      name
      displayName
    }
  }
}

# Remove permission from role
mutation RemovePermissionFromRole($rolePermissionId: uuid!) {
  deleteRolePermission(id: $rolePermissionId) {
    id
    roleId
    permissionId
  }
}

# Update role permission conditions
mutation UpdateRolePermissionConditions(
  $rolePermissionId: uuid!,
  $conditions: jsonb = null
) {
  updateRolePermission(
    pk_columns: { id: $rolePermissionId },
    _set: {
      conditions: $conditions,
    }
  ) {
    id
    conditions
    permission {
      action
      resource {
        name
        displayName
      }
    }
  }
}

# Bulk update user roles with audit logging
mutation BulkUpdateUserRoles(
  $userId: uuid!,
  $newRoleIds: [uuid!]!,
  $reason: String = null
) {
  # This would typically be a custom function that handles:
  # 1. Audit logging of the change
  # 2. Atomic role replacement
  # 3. Notification of the change
  
  # For now, we'll do the basic operation
  deleteUserRoles(where: { userId: { _eq: $userId } }) {
    affected_rows
  }
  
  insertUserRoles(objects: [
    # This would be dynamically generated based on newRoleIds
  ]) {
    affected_rows
    returning {
      id
      role {
        name
        displayName
        priority
      }
    }
  }
}

# Emergency: Revoke all permissions for a user (security lockdown)
mutation EmergencyRevokeUserAccess($userId: uuid!, $reason: String!) {
  # Remove all role assignments
  deleteUserRoles(where: { userId: { _eq: $userId } }) {
    affected_rows
  }
  
  # Add explicit deny overrides for critical resources
  insertPermissionOverrides(objects: [
    {
      resource: "system_settings",
      operation: "read",
      granted: false,
      reason: $reason
    },
    {
      resource: "user_management",
      operation: "read",
      granted: false,
      reason: $reason
    },
    {
      resource: "billing",
      operation: "read",
      granted: false,
      reason: $reason
    }
  ]) {
    affected_rows
  }
}

# Restore user access (remove emergency restrictions)
mutation RestoreUserAccess($userId: uuid!, $viewerRoleId: uuid!) {
  # Remove deny overrides
  deletePermissionOverrides(
    where: { 
      granted: { _eq: false }
    }
  ) {
    affected_rows
  }
  
  # Assign default viewer role
  insertUserRole(object: {
    roleId: $viewerRoleId
  }) {
    id
    role {
      name
      displayName
    }
  }
}

# Auth Domain Mutations

# User Role Management
mutation AssignUserRole($object: user_roles_insert_input!) {
  insertUserRole(object: $object) {
    ...AuthUserRoleWithDetails
  }
}

mutation RemoveUserRole($id: uuid!) {
  deleteUserRole(id: $id) {
    id
  }
}

mutation UpdateUserRole($id: uuid!, $set: user_roles_set_input!) {
  updateUserRole(pk_columns: { id: $id }, _set: $set) {
    ...AuthUserRoleWithDetails
  }
}

# Permission Overrides
mutation CreatePermissionOverride($object: permission_overrides_insert_input!) {
  insertPermissionOverride(object: $object) {
    ...PermissionOverrideCore
  }
}

mutation UpdatePermissionOverrideById($id: uuid!, $set: permission_overrides_set_input!) {
  updatePermissionOverride(pk_columns: { id: $id }, _set: $set) {
    ...PermissionOverrideCore
  }
}

mutation DeletePermissionOverrideById($id: uuid!) {
  deletePermissionOverride(id: $id) {
    id
  }
}

# Role Management
mutation CreateRole($object: roles_insert_input!) {
  insertRole(object: $object) {
    ...RoleCore
  }
}

mutation UpdateRoleById($id: uuid!, $set: roles_set_input!) {
  updateRole(pk_columns: { id: $id }, _set: $set) {
    ...RoleCore
  }
}

mutation DeleteRole($id: uuid!) {
  deleteRole(id: $id) {
    id
  }
}

# Role Permission Management
mutation AssignRolePermission($object: role_permissions_insert_input!) {
  insertRolePermission(object: $object) {
    ...RolePermissionCore
  }
}

mutation RemoveRolePermission($id: uuid!) {
  deleteRolePermission(id: $id) {
    id
  }
}

mutation UpdateRolePermission($id: uuid!, $set: role_permissions_set_input!) {
  updateRolePermission(pk_columns: { id: $id }, _set: $set) {
    ...RolePermissionCore
  }
} 