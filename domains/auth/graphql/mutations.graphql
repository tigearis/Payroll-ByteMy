# Authentication Domain Mutations
# Security Classification: CRITICAL - User authentication and authorization
# SOC2 Compliance: User access control with audit logging

# ================================
# USER ROLE ASSIGNMENT MUTATIONS
# Focus: User-centric role assignments
# ================================

# Assign role to user (primary auth operation)
mutation AssignRoleToUser($userId: uuid!, $roleId: uuid!) {
  insertUserRole(object: { userId: $userId, roleId: $roleId }) {
    id
    userId
    roleId
    assignedRole {
      name
      displayName
      priority
    }
  }
}

# Remove role from user
mutation RemoveRoleFromUser($userRoleId: uuid!) {
  deleteUserRoleById(id: $userRoleId) {
    id
    roleId
  }
}

# Update user role assignment
mutation UpdateUserRoleAssignment($id: uuid!, $set: userRolesSetInput!) {
  updateUserRoleById(pkColumns: { id: $id }, _set: $set) {
    id
    userId
    roleId
    updatedAt
  }
}

# Bulk assign roles to user (replace all existing roles)
mutation SetUserRoles($userId: uuid!, $roleIds: [userRolesInsertInput!]!) {
  # First remove existing roles
  bulkDeleteUserRoles(where: { userId: { _eq: $userId } }) {
    affectedRows
  }

  # Then insert new roles
  bulkInsertUserRoles(objects: $roleIds) {
    returning {
      id
      userId
      roleId
      assignedRole {
        name
        displayName
      }
    }
    affectedRows
  }
}

# ================================
# USER PERMISSION OVERRIDES
# Focus: Individual user permission exceptions
# ================================

# Create permission override for specific user
mutation CreateUserPermissionOverride(
  $userId: uuid!
  $resource: String!
  $operation: String!
  $granted: Boolean!
  $conditions: jsonb = null
  $expiresAt: timestamptz = null
  $reason: String = null
) {
  insertPermissionOverride(
    object: {
      userId: $userId
      resource: $resource
      operation: $operation
      granted: $granted
      conditions: $conditions
      expiresAt: $expiresAt
      reason: $reason
    }
  ) {
    id
    userId
    resource
    operation
    granted
    conditions
    expiresAt
    reason
    createdAt
  }
}

# Update user permission override
mutation UpdateUserPermissionOverride(
  $id: uuid!
  $set: permissionOverridesSetInput!
) {
  updatePermissionOverrideById(pkColumns: { id: $id }, _set: $set) {
    id
    userId
    resource
    operation
    granted
    expiresAt
    reason
    updatedAt
  }
}

# Remove user permission override
mutation RemoveUserPermissionOverride($id: uuid!) {
  deletePermissionOverrideById(id: $id) {
    id
    userId
    resource
    operation
  }
}

# ================================
# USER INVITATION FLOW MUTATIONS
# Focus: Two-stage invitation process
# ================================

# Create invitation record when invitation is sent
mutation CreateUserInvitation(
  $email: String!
  $firstName: String!
  $lastName: String!
  $invitedRole: String!
  $managerId: uuid
  $clerkInvitationId: String
  $clerkTicket: String
  $invitationMetadata: jsonb
  $invitedBy: uuid!
  $expiresAt: timestamptz!
) {
  insertUserInvitation(
    object: {
      email: $email
      firstName: $firstName
      lastName: $lastName
      invitedRole: $invitedRole
      managerId: $managerId
      clerkInvitationId: $clerkInvitationId
      clerkTicket: $clerkTicket
      invitationMetadata: $invitationMetadata
      invitedBy: $invitedBy
      expiresAt: $expiresAt
      status: "pending"
    }
  ) {
    id
    email
    firstName
    lastName
    invitedRole
    managerId
    clerkTicket
    invitedAt
    expiresAt
    status
    invitedByUser {
      name
      email
      role
    }
  }
}

# Complete invitation acceptance (creates user and assigns role)
mutation CompleteInvitationAcceptance(
  $invitationId: uuid!
  $clerkUserId: String!
  $userEmail: String!
  $userName: String!
) {
  # Mark invitation as accepted
  updateUserInvitationById(
    pkColumns: { id: $invitationId }
    _set: { 
      status: "accepted"
      acceptedAt: "now()"
    }
  ) {
    id
    email
    firstName
    lastName
    invitedRole
    managerId
    status
    acceptedAt
  }

  # Create the user record
  insertUser(
    object: {
      clerkUserId: $clerkUserId
      email: $userEmail
      name: $userName
      isActive: true
      isStaff: true
    }
  ) {
    id
    clerkUserId
    email
    name
    isActive
  }
}

# Assign role to newly created user (separate mutation for role assignment)
mutation AssignInvitationRole(
  $userId: uuid!
  $roleId: uuid!
  $invitationId: uuid!
) {
  # Assign the role
  insertUserRole(object: { userId: $userId, roleId: $roleId }) {
    id
    userId
    roleId
    assignedRole {
      name
      displayName
      priority
    }
  }

  # Update invitation with the created user
  updateUserInvitationById(
    pkColumns: { id: $invitationId }
    _set: { acceptedBy: $userId }
  ) {
    id
    acceptedBy
  }

  # Log the role assignment for audit
  insertPermissionAuditLog(
    object: {
      userId: $userId
      action: "role_assigned_from_invitation"
      resource: "user_roles"
      newValue: { roleId: $roleId, invitationId: $invitationId }
      timestamp: "now()"
    }
  ) {
    id
    timestamp
  }
}

# Cancel invitation
mutation CancelUserInvitation($invitationId: uuid!) {
  updateUserInvitationById(
    pkColumns: { id: $invitationId }
    _set: { status: "cancelled" }
  ) {
    id
    status
    updatedAt
  }
}

# Resend invitation (update expiry and status)
mutation ResendUserInvitation(
  $invitationId: uuid!
  $newExpiresAt: timestamptz!
  $newClerkTicket: String
  $newClerkInvitationId: String
) {
  updateUserInvitationById(
    pkColumns: { id: $invitationId }
    _set: { 
      status: "pending"
      expiresAt: $newExpiresAt
      clerkTicket: $newClerkTicket
      clerkInvitationId: $newClerkInvitationId
      updatedAt: "now()"
    }
  ) {
    id
    email
    firstName
    lastName
    invitedRole
    status
    expiresAt
    updatedAt
    invitedByUser {
      name
      email
    }
  }
}

# Mark expired invitations as expired (bulk operation)
mutation MarkExpiredInvitations {
  bulkUpdateUserInvitations(
    where: { 
      status: { _eq: "pending" }
      expiresAt: { _lt: "now()" }
    }
    _set: { status: "expired" }
  ) {
    affectedRows
    returning {
      id
      email
      status
      expiresAt
    }
  }
}