/* eslint-disable */
import * as types from "./graphql";
import type { TypedDocumentNode as DocumentNode } from "@graphql-typed-document-node/core";

/**
 * Map of all GraphQL operations in the project.
 *
 * This map has several performance disadvantages:
 * 1. It is not tree-shakeable, so it will include all operations in the project.
 * 2. It is not minifiable, so the string of a GraphQL query will be multiple times inside the bundle.
 * 3. It does not support dead code elimination, so it will add unused operations.
 *
 * Therefore it is highly recommended to use the babel or swc plugin for production.
 * Learn more about it here: https://the-guild.dev/graphql/codegen/plugins/presets/preset-client#reducing-bundle-size
 */
type Documents = {
  "fragment ClientBasicInfo on clients {\n  id\n  name\n}\n\nfragment ClientWithContact on clients {\n  ...ClientBasicInfo\n  contactEmail\n  contactPhone\n}\n\nfragment ClientForBilling on clients {\n  id\n  name\n  billing_contactPerson: contactPerson\n  billing_contact_email: contactEmail\n}\n\nfragment ClientForAudit on clients {\n  id\n  name\n}\n\nfragment ClientWithRelations on clients {\n  ...ClientWithContact\n  active\n  payrolls {\n    id\n    name\n  }\n  notes: externalSystems {\n    id\n    id\n    system_id\n  }\n}": typeof types.ClientBasicInfoFragmentDoc;
  'mutation CreateClient($name: String!, $contactName: String, $contactEmail: String, $contactPhone: String, $address: String, $city: String, $state: String, $postalCode: String, $country: String = "Australia") {\n  insertClient(\n    object: {name: $name, contactEmail: $contactEmail, contactPhone: $contactPhone}\n  ) {\n    ...ClientWithContact\n  }\n}\n\nmutation UpdateClient($id: uuid!, $name: String, $contactName: String, $contactEmail: String, $contactPhone: String, $address: String, $city: String, $state: String, $postalCode: String, $country: String) {\n  updateClient(\n    pk_columns: {id: $id}\n    _set: {name: $name, contactEmail: $contactEmail, contactPhone: $contactPhone}\n  ) {\n    ...ClientWithContact\n  }\n}\n\nmutation UpdateClientStatus($id: uuid!, $active: Boolean!) {\n  updateClient(pk_columns: {id: $id}, _set: {active: $active, updatedAt: "now()"}) {\n    ...ClientBasicInfo\n  }\n}\n\nmutation DeactivateClient($id: uuid!) {\n  updateClient(pk_columns: {id: $id}, _set: {active: false, updatedAt: "now()"}) {\n    ...ClientBasicInfo\n  }\n}\n\nmutation ActivateClient($id: uuid!) {\n  updateClient(pk_columns: {id: $id}, _set: {active: true, updatedAt: "now()"}) {\n    ...ClientBasicInfo\n  }\n}\n\nmutation ArchiveClient($id: uuid!) {\n  updateClient(pk_columns: {id: $id}, _set: {active: false, updatedAt: "now()"}) {\n    id\n    name\n  }\n}\n\nmutation BulkUpdateClientStatus($clientIds: [uuid!]!, $active: Boolean!) {\n  updateClients(\n    where: {id: {_in: $clientIds}}\n    _set: {active: $active, updatedAt: "now()"}\n  ) {\n    affected_rows\n    returning {\n      ...ClientBasicInfo\n    }\n  }\n}': typeof types.CreateClientDocument;
  "query GetClients {\n  clients(where: {active: {_eq: true}}, order_by: {name: asc}) {\n    ...ClientBasicInfo\n  }\n}\n\nquery GetClientsWithContact {\n  clients(where: {active: {_eq: true}}, order_by: {name: asc}) {\n    ...ClientWithContact\n  }\n}\n\nquery GetClientById($id: uuid!) {\n  client(id: $id) {\n    ...ClientWithRelations\n  }\n}\n\nquery GetClientBasicById($id: uuid!) {\n  client(id: $id) {\n    ...ClientBasicInfo\n  }\n}\n\nquery GetActiveClients {\n  clients(where: {active: {_eq: true}}, order_by: {name: asc}) {\n    ...ClientBasicInfo\n  }\n}\n\nquery GetClientsForBilling {\n  clients(where: {active: {_eq: true}}, order_by: {name: asc}) {\n    ...ClientForBilling\n  }\n}\n\nquery SearchClients($searchTerm: String!) {\n  clients(\n    where: {_and: [{active: {_eq: true}}, {_or: [{name: {_ilike: $searchTerm}}, {contactPerson: {_ilike: $searchTerm}}, {contactEmail: {_ilike: $searchTerm}}]}]}\n    order_by: {name: asc}\n    limit: 50\n  ) {\n    ...ClientWithContact\n  }\n}\n\nquery GetClientsForAudit {\n  clients(order_by: {createdAt: desc}) {\n    ...ClientForAudit\n  }\n}\n\nquery GetClientStats {\n  clientsAggregate {\n    aggregate {\n      count\n    }\n  }\n  active_clients: clientsAggregate(where: {active: {_eq: true}}) {\n    aggregate {\n      count\n    }\n  }\n  inactive_clients: clientsAggregate(where: {active: {_eq: false}}) {\n    aggregate {\n      count\n    }\n  }\n}": typeof types.GetClientsDocument;
};
const documents: Documents = {
  "fragment ClientBasicInfo on clients {\n  id\n  name\n}\n\nfragment ClientWithContact on clients {\n  ...ClientBasicInfo\n  contactEmail\n  contactPhone\n}\n\nfragment ClientForBilling on clients {\n  id\n  name\n  billing_contactPerson: contactPerson\n  billing_contact_email: contactEmail\n}\n\nfragment ClientForAudit on clients {\n  id\n  name\n}\n\nfragment ClientWithRelations on clients {\n  ...ClientWithContact\n  active\n  payrolls {\n    id\n    name\n  }\n  notes: externalSystems {\n    id\n    id\n    system_id\n  }\n}":
    types.ClientBasicInfoFragmentDoc,
  'mutation CreateClient($name: String!, $contactName: String, $contactEmail: String, $contactPhone: String, $address: String, $city: String, $state: String, $postalCode: String, $country: String = "Australia") {\n  insertClient(\n    object: {name: $name, contactEmail: $contactEmail, contactPhone: $contactPhone}\n  ) {\n    ...ClientWithContact\n  }\n}\n\nmutation UpdateClient($id: uuid!, $name: String, $contactName: String, $contactEmail: String, $contactPhone: String, $address: String, $city: String, $state: String, $postalCode: String, $country: String) {\n  updateClient(\n    pk_columns: {id: $id}\n    _set: {name: $name, contactEmail: $contactEmail, contactPhone: $contactPhone}\n  ) {\n    ...ClientWithContact\n  }\n}\n\nmutation UpdateClientStatus($id: uuid!, $active: Boolean!) {\n  updateClient(pk_columns: {id: $id}, _set: {active: $active, updatedAt: "now()"}) {\n    ...ClientBasicInfo\n  }\n}\n\nmutation DeactivateClient($id: uuid!) {\n  updateClient(pk_columns: {id: $id}, _set: {active: false, updatedAt: "now()"}) {\n    ...ClientBasicInfo\n  }\n}\n\nmutation ActivateClient($id: uuid!) {\n  updateClient(pk_columns: {id: $id}, _set: {active: true, updatedAt: "now()"}) {\n    ...ClientBasicInfo\n  }\n}\n\nmutation ArchiveClient($id: uuid!) {\n  updateClient(pk_columns: {id: $id}, _set: {active: false, updatedAt: "now()"}) {\n    id\n    name\n  }\n}\n\nmutation BulkUpdateClientStatus($clientIds: [uuid!]!, $active: Boolean!) {\n  updateClients(\n    where: {id: {_in: $clientIds}}\n    _set: {active: $active, updatedAt: "now()"}\n  ) {\n    affected_rows\n    returning {\n      ...ClientBasicInfo\n    }\n  }\n}':
    types.CreateClientDocument,
  "query GetClients {\n  clients(where: {active: {_eq: true}}, order_by: {name: asc}) {\n    ...ClientBasicInfo\n  }\n}\n\nquery GetClientsWithContact {\n  clients(where: {active: {_eq: true}}, order_by: {name: asc}) {\n    ...ClientWithContact\n  }\n}\n\nquery GetClientById($id: uuid!) {\n  client(id: $id) {\n    ...ClientWithRelations\n  }\n}\n\nquery GetClientBasicById($id: uuid!) {\n  client(id: $id) {\n    ...ClientBasicInfo\n  }\n}\n\nquery GetActiveClients {\n  clients(where: {active: {_eq: true}}, order_by: {name: asc}) {\n    ...ClientBasicInfo\n  }\n}\n\nquery GetClientsForBilling {\n  clients(where: {active: {_eq: true}}, order_by: {name: asc}) {\n    ...ClientForBilling\n  }\n}\n\nquery SearchClients($searchTerm: String!) {\n  clients(\n    where: {_and: [{active: {_eq: true}}, {_or: [{name: {_ilike: $searchTerm}}, {contactPerson: {_ilike: $searchTerm}}, {contactEmail: {_ilike: $searchTerm}}]}]}\n    order_by: {name: asc}\n    limit: 50\n  ) {\n    ...ClientWithContact\n  }\n}\n\nquery GetClientsForAudit {\n  clients(order_by: {createdAt: desc}) {\n    ...ClientForAudit\n  }\n}\n\nquery GetClientStats {\n  clientsAggregate {\n    aggregate {\n      count\n    }\n  }\n  active_clients: clientsAggregate(where: {active: {_eq: true}}) {\n    aggregate {\n      count\n    }\n  }\n  inactive_clients: clientsAggregate(where: {active: {_eq: false}}) {\n    aggregate {\n      count\n    }\n  }\n}":
    types.GetClientsDocument,
};

/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 *
 *
 * @example
 * ```ts
 * const query = graphql(`query GetUser($id: ID!) { user(id: $id) { name } }`);
 * ```
 *
 * The query argument is unknown!
 * Please regenerate the types.
 */
export function graphql(source: string): unknown;

/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(
  source: "fragment ClientBasicInfo on clients {\n  id\n  name\n}\n\nfragment ClientWithContact on clients {\n  ...ClientBasicInfo\n  contactEmail\n  contactPhone\n}\n\nfragment ClientForBilling on clients {\n  id\n  name\n  billing_contactPerson: contactPerson\n  billing_contact_email: contactEmail\n}\n\nfragment ClientForAudit on clients {\n  id\n  name\n}\n\nfragment ClientWithRelations on clients {\n  ...ClientWithContact\n  active\n  payrolls {\n    id\n    name\n  }\n  notes: externalSystems {\n    id\n    id\n    system_id\n  }\n}"
): (typeof documents)["fragment ClientBasicInfo on clients {\n  id\n  name\n}\n\nfragment ClientWithContact on clients {\n  ...ClientBasicInfo\n  contactEmail\n  contactPhone\n}\n\nfragment ClientForBilling on clients {\n  id\n  name\n  billing_contactPerson: contactPerson\n  billing_contact_email: contactEmail\n}\n\nfragment ClientForAudit on clients {\n  id\n  name\n}\n\nfragment ClientWithRelations on clients {\n  ...ClientWithContact\n  active\n  payrolls {\n    id\n    name\n  }\n  notes: externalSystems {\n    id\n    id\n    system_id\n  }\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(
  source: 'mutation CreateClient($name: String!, $contactName: String, $contactEmail: String, $contactPhone: String, $address: String, $city: String, $state: String, $postalCode: String, $country: String = "Australia") {\n  insertClient(\n    object: {name: $name, contactEmail: $contactEmail, contactPhone: $contactPhone}\n  ) {\n    ...ClientWithContact\n  }\n}\n\nmutation UpdateClient($id: uuid!, $name: String, $contactName: String, $contactEmail: String, $contactPhone: String, $address: String, $city: String, $state: String, $postalCode: String, $country: String) {\n  updateClient(\n    pk_columns: {id: $id}\n    _set: {name: $name, contactEmail: $contactEmail, contactPhone: $contactPhone}\n  ) {\n    ...ClientWithContact\n  }\n}\n\nmutation UpdateClientStatus($id: uuid!, $active: Boolean!) {\n  updateClient(pk_columns: {id: $id}, _set: {active: $active, updatedAt: "now()"}) {\n    ...ClientBasicInfo\n  }\n}\n\nmutation DeactivateClient($id: uuid!) {\n  updateClient(pk_columns: {id: $id}, _set: {active: false, updatedAt: "now()"}) {\n    ...ClientBasicInfo\n  }\n}\n\nmutation ActivateClient($id: uuid!) {\n  updateClient(pk_columns: {id: $id}, _set: {active: true, updatedAt: "now()"}) {\n    ...ClientBasicInfo\n  }\n}\n\nmutation ArchiveClient($id: uuid!) {\n  updateClient(pk_columns: {id: $id}, _set: {active: false, updatedAt: "now()"}) {\n    id\n    name\n  }\n}\n\nmutation BulkUpdateClientStatus($clientIds: [uuid!]!, $active: Boolean!) {\n  updateClients(\n    where: {id: {_in: $clientIds}}\n    _set: {active: $active, updatedAt: "now()"}\n  ) {\n    affected_rows\n    returning {\n      ...ClientBasicInfo\n    }\n  }\n}'
): (typeof documents)['mutation CreateClient($name: String!, $contactName: String, $contactEmail: String, $contactPhone: String, $address: String, $city: String, $state: String, $postalCode: String, $country: String = "Australia") {\n  insertClient(\n    object: {name: $name, contactEmail: $contactEmail, contactPhone: $contactPhone}\n  ) {\n    ...ClientWithContact\n  }\n}\n\nmutation UpdateClient($id: uuid!, $name: String, $contactName: String, $contactEmail: String, $contactPhone: String, $address: String, $city: String, $state: String, $postalCode: String, $country: String) {\n  updateClient(\n    pk_columns: {id: $id}\n    _set: {name: $name, contactEmail: $contactEmail, contactPhone: $contactPhone}\n  ) {\n    ...ClientWithContact\n  }\n}\n\nmutation UpdateClientStatus($id: uuid!, $active: Boolean!) {\n  updateClient(pk_columns: {id: $id}, _set: {active: $active, updatedAt: "now()"}) {\n    ...ClientBasicInfo\n  }\n}\n\nmutation DeactivateClient($id: uuid!) {\n  updateClient(pk_columns: {id: $id}, _set: {active: false, updatedAt: "now()"}) {\n    ...ClientBasicInfo\n  }\n}\n\nmutation ActivateClient($id: uuid!) {\n  updateClient(pk_columns: {id: $id}, _set: {active: true, updatedAt: "now()"}) {\n    ...ClientBasicInfo\n  }\n}\n\nmutation ArchiveClient($id: uuid!) {\n  updateClient(pk_columns: {id: $id}, _set: {active: false, updatedAt: "now()"}) {\n    id\n    name\n  }\n}\n\nmutation BulkUpdateClientStatus($clientIds: [uuid!]!, $active: Boolean!) {\n  updateClients(\n    where: {id: {_in: $clientIds}}\n    _set: {active: $active, updatedAt: "now()"}\n  ) {\n    affected_rows\n    returning {\n      ...ClientBasicInfo\n    }\n  }\n}'];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(
  source: "query GetClients {\n  clients(where: {active: {_eq: true}}, order_by: {name: asc}) {\n    ...ClientBasicInfo\n  }\n}\n\nquery GetClientsWithContact {\n  clients(where: {active: {_eq: true}}, order_by: {name: asc}) {\n    ...ClientWithContact\n  }\n}\n\nquery GetClientById($id: uuid!) {\n  client(id: $id) {\n    ...ClientWithRelations\n  }\n}\n\nquery GetClientBasicById($id: uuid!) {\n  client(id: $id) {\n    ...ClientBasicInfo\n  }\n}\n\nquery GetActiveClients {\n  clients(where: {active: {_eq: true}}, order_by: {name: asc}) {\n    ...ClientBasicInfo\n  }\n}\n\nquery GetClientsForBilling {\n  clients(where: {active: {_eq: true}}, order_by: {name: asc}) {\n    ...ClientForBilling\n  }\n}\n\nquery SearchClients($searchTerm: String!) {\n  clients(\n    where: {_and: [{active: {_eq: true}}, {_or: [{name: {_ilike: $searchTerm}}, {contactPerson: {_ilike: $searchTerm}}, {contactEmail: {_ilike: $searchTerm}}]}]}\n    order_by: {name: asc}\n    limit: 50\n  ) {\n    ...ClientWithContact\n  }\n}\n\nquery GetClientsForAudit {\n  clients(order_by: {createdAt: desc}) {\n    ...ClientForAudit\n  }\n}\n\nquery GetClientStats {\n  clientsAggregate {\n    aggregate {\n      count\n    }\n  }\n  active_clients: clientsAggregate(where: {active: {_eq: true}}) {\n    aggregate {\n      count\n    }\n  }\n  inactive_clients: clientsAggregate(where: {active: {_eq: false}}) {\n    aggregate {\n      count\n    }\n  }\n}"
): (typeof documents)["query GetClients {\n  clients(where: {active: {_eq: true}}, order_by: {name: asc}) {\n    ...ClientBasicInfo\n  }\n}\n\nquery GetClientsWithContact {\n  clients(where: {active: {_eq: true}}, order_by: {name: asc}) {\n    ...ClientWithContact\n  }\n}\n\nquery GetClientById($id: uuid!) {\n  client(id: $id) {\n    ...ClientWithRelations\n  }\n}\n\nquery GetClientBasicById($id: uuid!) {\n  client(id: $id) {\n    ...ClientBasicInfo\n  }\n}\n\nquery GetActiveClients {\n  clients(where: {active: {_eq: true}}, order_by: {name: asc}) {\n    ...ClientBasicInfo\n  }\n}\n\nquery GetClientsForBilling {\n  clients(where: {active: {_eq: true}}, order_by: {name: asc}) {\n    ...ClientForBilling\n  }\n}\n\nquery SearchClients($searchTerm: String!) {\n  clients(\n    where: {_and: [{active: {_eq: true}}, {_or: [{name: {_ilike: $searchTerm}}, {contactPerson: {_ilike: $searchTerm}}, {contactEmail: {_ilike: $searchTerm}}]}]}\n    order_by: {name: asc}\n    limit: 50\n  ) {\n    ...ClientWithContact\n  }\n}\n\nquery GetClientsForAudit {\n  clients(order_by: {createdAt: desc}) {\n    ...ClientForAudit\n  }\n}\n\nquery GetClientStats {\n  clientsAggregate {\n    aggregate {\n      count\n    }\n  }\n  active_clients: clientsAggregate(where: {active: {_eq: true}}) {\n    aggregate {\n      count\n    }\n  }\n  inactive_clients: clientsAggregate(where: {active: {_eq: false}}) {\n    aggregate {\n      count\n    }\n  }\n}"];

export function graphql(source: string) {
  return (documents as any)[source] ?? {};
}

export type DocumentType<TDocumentNode extends DocumentNode<any, any>> =
  TDocumentNode extends DocumentNode<infer TType, any> ? TType : never;
