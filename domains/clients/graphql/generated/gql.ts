/* eslint-disable */
import * as types from './graphql';
import type { TypedDocumentNode as DocumentNode } from '@graphql-typed-document-node/core';

/**
 * Map of all GraphQL operations in the project.
 *
 * This map has several performance disadvantages:
 * 1. It is not tree-shakeable, so it will include all operations in the project.
 * 2. It is not minifiable, so the string of a GraphQL query will be multiple times inside the bundle.
 * 3. It does not support dead code elimination, so it will add unused operations.
 *
 * Therefore it is highly recommended to use the babel or swc plugin for production.
 * Learn more about it here: https://the-guild.dev/graphql/codegen/plugins/presets/preset-client#reducing-bundle-size
 */
type Documents = {
    "fragment ClientBasicInfo on clients {\n  id\n  name\n}\n\nfragment ClientWithContact on clients {\n  ...ClientBasicInfo\n  contactEmail\n  contactPhone\n}\n\nfragment ClientForBilling on clients {\n  id\n  name\n  contactPerson\n  contactEmail\n}\n\nfragment ClientForAudit on clients {\n  id\n  name\n}\n\nfragment ClientWithRelations on clients {\n  ...ClientWithContact\n  active\n  contactPerson\n  createdAt\n  updatedAt\n  payrolls(where: {supersededDate: {_isNull: true}}) {\n    id\n    name\n    status\n    employeeCount\n    createdAt\n    updatedAt\n    primaryConsultant {\n      id\n      name\n    }\n    manager {\n      id\n      name\n    }\n    payrollCycle {\n      id\n      name\n    }\n    supersededDate\n  }\n}\n\nfragment ClientSummary on clients {\n  id\n  name\n  active\n}\n\nfragment ClientListItem on clients {\n  ...ClientSummary\n  contactEmail\n  contactPhone\n  payrollCount: payrollsAggregate {\n    aggregate {\n      count\n    }\n  }\n}\n\nfragment ClientDashboardCard on clients {\n  ...ClientSummary\n  activePayrolls: payrollsAggregate(where: {supersededDate: {_isNull: true}}) {\n    aggregate {\n      count\n    }\n  }\n}\n\nfragment ClientTableRow on clients {\n  ...ClientListItem\n  contactPerson\n  updatedAt\n}\n\nfragment ClientMinimal on clients {\n  id\n  name\n}\n\nfragment ClientWithMetrics on clients {\n  ...ClientSummary\n  totalPayrolls: payrollsAggregate {\n    aggregate {\n      count\n    }\n  }\n  activePayrolls: payrollsAggregate(where: {supersededDate: {_isNull: true}}) {\n    aggregate {\n      count\n    }\n  }\n  recentPayrolls: payrolls(orderBy: {updatedAt: DESC}, limit: 3) {\n    id\n    name\n    status\n    updatedAt\n  }\n}": typeof types.ClientBasicInfoFragmentDoc,
    "mutation CreateClient($name: String!, $contactName: String, $contactEmail: String, $contactPhone: String, $address: String, $city: String, $state: String, $postalCode: String, $country: String = \"Australia\") {\n  insertClient(\n    object: {name: $name, contactEmail: $contactEmail, contactPhone: $contactPhone}\n  ) {\n    ...ClientWithContact\n  }\n}\n\nmutation UpdateClient($id: uuid!, $name: String, $contactName: String, $contactEmail: String, $contactPhone: String, $address: String, $city: String, $state: String, $postalCode: String, $country: String) {\n  updateClientById(\n    pkColumns: {id: $id}\n    _set: {name: $name, contactEmail: $contactEmail, contactPhone: $contactPhone}\n  ) {\n    ...ClientWithContact\n  }\n}\n\nmutation UpdateClientStatus($id: uuid!, $active: Boolean!) {\n  updateClientById(\n    pkColumns: {id: $id}\n    _set: {active: $active, updatedAt: \"now()\"}\n  ) {\n    ...ClientBasicInfo\n  }\n}\n\nmutation DeactivateClient($id: uuid!) {\n  updateClientById(\n    pkColumns: {id: $id}\n    _set: {active: false, updatedAt: \"now()\"}\n  ) {\n    ...ClientBasicInfo\n  }\n}\n\nmutation ActivateClient($id: uuid!) {\n  updateClientById(pkColumns: {id: $id}, _set: {active: true, updatedAt: \"now()\"}) {\n    ...ClientBasicInfo\n  }\n}\n\nmutation ArchiveClient($id: uuid!) {\n  updateClientById(\n    pkColumns: {id: $id}\n    _set: {active: false, updatedAt: \"now()\"}\n  ) {\n    id\n    name\n  }\n}\n\nmutation BulkUpdateClientStatus($clientIds: [uuid!]!, $active: Boolean!) {\n  bulkUpdateClients(\n    where: {id: {_in: $clientIds}}\n    _set: {active: $active, updatedAt: \"now()\"}\n  ) {\n    affectedRows\n    returning {\n      ...ClientBasicInfo\n    }\n  }\n}": typeof types.CreateClientDocument,
    "query GetClients {\n  clients(where: {active: {_eq: true}}, orderBy: {name: ASC}) {\n    ...ClientBasicInfo\n  }\n}\n\nquery GetClientsSimple {\n  clients {\n    id\n    name\n  }\n}\n\nquery GetClientsWithContact {\n  clients(where: {active: {_eq: true}}, orderBy: {name: ASC}) {\n    ...ClientWithContact\n  }\n}\n\nquery GetClientById($id: uuid!) {\n  clientById(id: $id) {\n    ...ClientWithRelations\n  }\n}\n\nquery GetClientBasicById($id: uuid!) {\n  clientById(id: $id) {\n    ...ClientBasicInfo\n  }\n}\n\nquery GetActiveClients {\n  clients(where: {active: {_eq: true}}, orderBy: {name: ASC}) {\n    ...ClientBasicInfo\n  }\n}\n\nquery GetClientsForBilling {\n  clients(where: {active: {_eq: true}}, orderBy: {name: ASC}) {\n    ...ClientForBilling\n  }\n}\n\nquery SearchClients($searchTerm: String!) {\n  clients(\n    where: {_and: [{active: {_eq: true}}, {_or: [{name: {_ilike: $searchTerm}}, {contactPerson: {_ilike: $searchTerm}}, {contactEmail: {_ilike: $searchTerm}}]}]}\n    orderBy: {name: ASC}\n    limit: 50\n  ) {\n    ...ClientWithContact\n  }\n}\n\nquery GetClientsForAudit {\n  clients(orderBy: {createdAt: DESC}) {\n    ...ClientForAudit\n  }\n}\n\nquery GetClientStats {\n  clientsAggregate {\n    aggregate {\n      count\n    }\n  }\n  active_clients: clientsAggregate(where: {active: {_eq: true}}) {\n    aggregate {\n      count\n    }\n  }\n  inactive_clients: clientsAggregate(where: {active: {_eq: false}}) {\n    aggregate {\n      count\n    }\n  }\n}\n\nquery GetClientsPaginated($limit: Int = 20, $offset: Int = 0, $where: clientsBoolExp = {}, $orderBy: [clientsOrderBy!] = [{name: ASC}]) {\n  clients(\n    limit: $limit\n    offset: $offset\n    where: {_and: [{active: {_eq: true}}, $where]}\n    orderBy: $orderBy\n  ) {\n    ...ClientListItem\n  }\n  clientsAggregate(where: {_and: [{active: {_eq: true}}, $where]}) {\n    aggregate {\n      count\n    }\n  }\n}\n\nquery GetAllClientsPaginated($limit: Int = 20, $offset: Int = 0, $where: clientsBoolExp = {}, $orderBy: [clientsOrderBy!] = [{name: ASC}]) {\n  clients(limit: $limit, offset: $offset, where: $where, orderBy: $orderBy) {\n    ...ClientTableRow\n  }\n  allClientsAggregate: clientsAggregate(where: $where) {\n    aggregate {\n      count\n    }\n  }\n}\n\nquery SearchClientsPaginated($searchTerm: String!, $limit: Int = 20, $offset: Int = 0) {\n  clients(\n    where: {_and: [{active: {_eq: true}}, {_or: [{name: {_ilike: $searchTerm}}, {contactPerson: {_ilike: $searchTerm}}, {contactEmail: {_ilike: $searchTerm}}]}]}\n    orderBy: {name: ASC}\n    limit: $limit\n    offset: $offset\n  ) {\n    ...ClientListItem\n  }\n  searchAggregate: clientsAggregate(\n    where: {_and: [{active: {_eq: true}}, {_or: [{name: {_ilike: $searchTerm}}, {contactPerson: {_ilike: $searchTerm}}, {contactEmail: {_ilike: $searchTerm}}]}]}\n  ) {\n    aggregate {\n      count\n    }\n  }\n}\n\nquery GetInactiveClientsPaginated($limit: Int = 20, $offset: Int = 0) {\n  clients(\n    where: {active: {_eq: false}}\n    orderBy: {name: ASC}\n    limit: $limit\n    offset: $offset\n  ) {\n    ...ClientTableRow\n  }\n  inactiveAggregate: clientsAggregate(where: {active: {_eq: false}}) {\n    aggregate {\n      count\n    }\n  }\n}\n\nquery GetClientsQuickList {\n  clients(where: {active: {_eq: true}}, orderBy: {name: ASC}) {\n    ...ClientMinimal\n  }\n}\n\nquery GetClientCard($id: uuid!) {\n  clientById(id: $id) {\n    ...ClientSummary\n    contactEmail\n    payrollCount: payrollsAggregate(where: {supersededDate: {_isNull: true}}) {\n      aggregate {\n        count\n      }\n    }\n  }\n}\n\nquery GetAllClientsForDeveloper {\n  clients {\n    id\n    name\n    contactPerson\n    contactEmail\n    active\n  }\n}\n\nquery GetClientOptions {\n  clients(where: {active: {_eq: true}}, orderBy: {name: ASC}) {\n    id\n    name\n  }\n}\n\nquery GetClientDashboardCards($limit: Int = 12) {\n  clients(where: {active: {_eq: true}}, orderBy: {name: ASC}, limit: $limit) {\n    ...ClientDashboardCard\n  }\n}\n\nquery GetClientWithActivePayrolls($id: uuid!) {\n  clientById(id: $id) {\n    ...ClientSummary\n    contactEmail\n    contactPhone\n    contactPerson\n    activePayrolls: payrolls(\n      where: {supersededDate: {_isNull: true}}\n      orderBy: {name: ASC}\n    ) {\n      id\n      name\n      status\n      primaryConsultant {\n        name\n      }\n    }\n  }\n}\n\nquery GetAllClientsForDeveloper {\n  clients {\n    id\n    name\n    contactPerson\n    contactEmail\n    active\n  }\n}": typeof types.GetClientsDocument,
    "subscription ClientUpdates($id: uuid!) {\n  clientById(id: $id) {\n    ...ClientWithRelations\n  }\n}\n\nsubscription ClientListUpdates {\n  clients(where: {active: {_eq: true}}, orderBy: {name: ASC}) {\n    ...ClientBasicInfo\n  }\n}\n\nsubscription ClientStatusUpdates($id: uuid!) {\n  clientById(id: $id) {\n    id\n    name\n    active\n    updatedAt\n  }\n}\n\nsubscription ClientPayrollUpdates($clientId: uuid!) {\n  payrolls(\n    where: {clientId: {_eq: $clientId}, supersededDate: {_isNull: true}}\n    orderBy: {updatedAt: DESC}\n  ) {\n    id\n    name\n    status\n    updatedAt\n  }\n}\n\nsubscription ActiveClientsCount {\n  clientsAggregate(where: {active: {_eq: true}}) {\n    aggregate {\n      count\n    }\n  }\n}\n\nsubscription ClientDashboardUpdates {\n  clients(where: {active: {_eq: true}}, orderBy: {name: ASC}, limit: 10) {\n    ...ClientDashboardCard\n  }\n}\n\nsubscription ClientMetricsUpdates($id: uuid!) {\n  clientById(id: $id) {\n    ...ClientWithMetrics\n  }\n}": typeof types.ClientUpdatesDocument,
    "fragment UserCore on users {\n  id\n  name\n  email\n  username\n  role\n  isActive\n  isStaff\n  clerkUserId\n  createdAt\n  updatedAt\n}\n\nfragment UserBasic on users {\n  id\n  name\n  email\n  role\n  isActive\n}\n\nfragment UserWithManager on users {\n  ...UserCore\n  managerId\n  managerUser {\n    ...UserBasic\n  }\n}\n\nfragment RoleCore on roles {\n  id\n  name\n  description\n  displayName\n  priority\n  isSystemRole\n  createdAt\n}\n\nfragment PermissionCore on permissions {\n  id\n  action\n  description\n  resourceId\n  createdAt\n  updatedAt\n}\n\nfragment PermissionWithResource on permissions {\n  ...PermissionCore\n  relatedResource {\n    id\n    name\n    description\n  }\n}\n\nfragment ClientCore on clients {\n  id\n  name\n  contactEmail\n  contactPerson\n  contactPhone\n  active\n  createdAt\n  updatedAt\n}\n\nfragment ClientBasic on clients {\n  id\n  name\n  active\n}\n\nfragment ResourceCore on resources {\n  id\n  name\n  displayName\n  description\n  createdAt\n  updatedAt\n}\n\nfragment UserRoleCore on userRoles {\n  id\n  userId\n  roleId\n  createdAt\n  updatedAt\n}\n\nfragment RolePermissionCore on rolePermissions {\n  id\n  roleId\n  permissionId\n  conditions\n  createdAt\n  updatedAt\n}\n\nfragment AuditFields on auditLogs {\n  id\n  eventTime\n  action\n  resourceType\n  resourceId\n  userId\n  ipAddress\n  userAgent\n  success\n  userEmail\n  userRole\n}": typeof types.UserCoreFragmentDoc,
};
const documents: Documents = {
    "fragment ClientBasicInfo on clients {\n  id\n  name\n}\n\nfragment ClientWithContact on clients {\n  ...ClientBasicInfo\n  contactEmail\n  contactPhone\n}\n\nfragment ClientForBilling on clients {\n  id\n  name\n  contactPerson\n  contactEmail\n}\n\nfragment ClientForAudit on clients {\n  id\n  name\n}\n\nfragment ClientWithRelations on clients {\n  ...ClientWithContact\n  active\n  contactPerson\n  createdAt\n  updatedAt\n  payrolls(where: {supersededDate: {_isNull: true}}) {\n    id\n    name\n    status\n    employeeCount\n    createdAt\n    updatedAt\n    primaryConsultant {\n      id\n      name\n    }\n    manager {\n      id\n      name\n    }\n    payrollCycle {\n      id\n      name\n    }\n    supersededDate\n  }\n}\n\nfragment ClientSummary on clients {\n  id\n  name\n  active\n}\n\nfragment ClientListItem on clients {\n  ...ClientSummary\n  contactEmail\n  contactPhone\n  payrollCount: payrollsAggregate {\n    aggregate {\n      count\n    }\n  }\n}\n\nfragment ClientDashboardCard on clients {\n  ...ClientSummary\n  activePayrolls: payrollsAggregate(where: {supersededDate: {_isNull: true}}) {\n    aggregate {\n      count\n    }\n  }\n}\n\nfragment ClientTableRow on clients {\n  ...ClientListItem\n  contactPerson\n  updatedAt\n}\n\nfragment ClientMinimal on clients {\n  id\n  name\n}\n\nfragment ClientWithMetrics on clients {\n  ...ClientSummary\n  totalPayrolls: payrollsAggregate {\n    aggregate {\n      count\n    }\n  }\n  activePayrolls: payrollsAggregate(where: {supersededDate: {_isNull: true}}) {\n    aggregate {\n      count\n    }\n  }\n  recentPayrolls: payrolls(orderBy: {updatedAt: DESC}, limit: 3) {\n    id\n    name\n    status\n    updatedAt\n  }\n}": types.ClientBasicInfoFragmentDoc,
    "mutation CreateClient($name: String!, $contactName: String, $contactEmail: String, $contactPhone: String, $address: String, $city: String, $state: String, $postalCode: String, $country: String = \"Australia\") {\n  insertClient(\n    object: {name: $name, contactEmail: $contactEmail, contactPhone: $contactPhone}\n  ) {\n    ...ClientWithContact\n  }\n}\n\nmutation UpdateClient($id: uuid!, $name: String, $contactName: String, $contactEmail: String, $contactPhone: String, $address: String, $city: String, $state: String, $postalCode: String, $country: String) {\n  updateClientById(\n    pkColumns: {id: $id}\n    _set: {name: $name, contactEmail: $contactEmail, contactPhone: $contactPhone}\n  ) {\n    ...ClientWithContact\n  }\n}\n\nmutation UpdateClientStatus($id: uuid!, $active: Boolean!) {\n  updateClientById(\n    pkColumns: {id: $id}\n    _set: {active: $active, updatedAt: \"now()\"}\n  ) {\n    ...ClientBasicInfo\n  }\n}\n\nmutation DeactivateClient($id: uuid!) {\n  updateClientById(\n    pkColumns: {id: $id}\n    _set: {active: false, updatedAt: \"now()\"}\n  ) {\n    ...ClientBasicInfo\n  }\n}\n\nmutation ActivateClient($id: uuid!) {\n  updateClientById(pkColumns: {id: $id}, _set: {active: true, updatedAt: \"now()\"}) {\n    ...ClientBasicInfo\n  }\n}\n\nmutation ArchiveClient($id: uuid!) {\n  updateClientById(\n    pkColumns: {id: $id}\n    _set: {active: false, updatedAt: \"now()\"}\n  ) {\n    id\n    name\n  }\n}\n\nmutation BulkUpdateClientStatus($clientIds: [uuid!]!, $active: Boolean!) {\n  bulkUpdateClients(\n    where: {id: {_in: $clientIds}}\n    _set: {active: $active, updatedAt: \"now()\"}\n  ) {\n    affectedRows\n    returning {\n      ...ClientBasicInfo\n    }\n  }\n}": types.CreateClientDocument,
    "query GetClients {\n  clients(where: {active: {_eq: true}}, orderBy: {name: ASC}) {\n    ...ClientBasicInfo\n  }\n}\n\nquery GetClientsSimple {\n  clients {\n    id\n    name\n  }\n}\n\nquery GetClientsWithContact {\n  clients(where: {active: {_eq: true}}, orderBy: {name: ASC}) {\n    ...ClientWithContact\n  }\n}\n\nquery GetClientById($id: uuid!) {\n  clientById(id: $id) {\n    ...ClientWithRelations\n  }\n}\n\nquery GetClientBasicById($id: uuid!) {\n  clientById(id: $id) {\n    ...ClientBasicInfo\n  }\n}\n\nquery GetActiveClients {\n  clients(where: {active: {_eq: true}}, orderBy: {name: ASC}) {\n    ...ClientBasicInfo\n  }\n}\n\nquery GetClientsForBilling {\n  clients(where: {active: {_eq: true}}, orderBy: {name: ASC}) {\n    ...ClientForBilling\n  }\n}\n\nquery SearchClients($searchTerm: String!) {\n  clients(\n    where: {_and: [{active: {_eq: true}}, {_or: [{name: {_ilike: $searchTerm}}, {contactPerson: {_ilike: $searchTerm}}, {contactEmail: {_ilike: $searchTerm}}]}]}\n    orderBy: {name: ASC}\n    limit: 50\n  ) {\n    ...ClientWithContact\n  }\n}\n\nquery GetClientsForAudit {\n  clients(orderBy: {createdAt: DESC}) {\n    ...ClientForAudit\n  }\n}\n\nquery GetClientStats {\n  clientsAggregate {\n    aggregate {\n      count\n    }\n  }\n  active_clients: clientsAggregate(where: {active: {_eq: true}}) {\n    aggregate {\n      count\n    }\n  }\n  inactive_clients: clientsAggregate(where: {active: {_eq: false}}) {\n    aggregate {\n      count\n    }\n  }\n}\n\nquery GetClientsPaginated($limit: Int = 20, $offset: Int = 0, $where: clientsBoolExp = {}, $orderBy: [clientsOrderBy!] = [{name: ASC}]) {\n  clients(\n    limit: $limit\n    offset: $offset\n    where: {_and: [{active: {_eq: true}}, $where]}\n    orderBy: $orderBy\n  ) {\n    ...ClientListItem\n  }\n  clientsAggregate(where: {_and: [{active: {_eq: true}}, $where]}) {\n    aggregate {\n      count\n    }\n  }\n}\n\nquery GetAllClientsPaginated($limit: Int = 20, $offset: Int = 0, $where: clientsBoolExp = {}, $orderBy: [clientsOrderBy!] = [{name: ASC}]) {\n  clients(limit: $limit, offset: $offset, where: $where, orderBy: $orderBy) {\n    ...ClientTableRow\n  }\n  allClientsAggregate: clientsAggregate(where: $where) {\n    aggregate {\n      count\n    }\n  }\n}\n\nquery SearchClientsPaginated($searchTerm: String!, $limit: Int = 20, $offset: Int = 0) {\n  clients(\n    where: {_and: [{active: {_eq: true}}, {_or: [{name: {_ilike: $searchTerm}}, {contactPerson: {_ilike: $searchTerm}}, {contactEmail: {_ilike: $searchTerm}}]}]}\n    orderBy: {name: ASC}\n    limit: $limit\n    offset: $offset\n  ) {\n    ...ClientListItem\n  }\n  searchAggregate: clientsAggregate(\n    where: {_and: [{active: {_eq: true}}, {_or: [{name: {_ilike: $searchTerm}}, {contactPerson: {_ilike: $searchTerm}}, {contactEmail: {_ilike: $searchTerm}}]}]}\n  ) {\n    aggregate {\n      count\n    }\n  }\n}\n\nquery GetInactiveClientsPaginated($limit: Int = 20, $offset: Int = 0) {\n  clients(\n    where: {active: {_eq: false}}\n    orderBy: {name: ASC}\n    limit: $limit\n    offset: $offset\n  ) {\n    ...ClientTableRow\n  }\n  inactiveAggregate: clientsAggregate(where: {active: {_eq: false}}) {\n    aggregate {\n      count\n    }\n  }\n}\n\nquery GetClientsQuickList {\n  clients(where: {active: {_eq: true}}, orderBy: {name: ASC}) {\n    ...ClientMinimal\n  }\n}\n\nquery GetClientCard($id: uuid!) {\n  clientById(id: $id) {\n    ...ClientSummary\n    contactEmail\n    payrollCount: payrollsAggregate(where: {supersededDate: {_isNull: true}}) {\n      aggregate {\n        count\n      }\n    }\n  }\n}\n\nquery GetAllClientsForDeveloper {\n  clients {\n    id\n    name\n    contactPerson\n    contactEmail\n    active\n  }\n}\n\nquery GetClientOptions {\n  clients(where: {active: {_eq: true}}, orderBy: {name: ASC}) {\n    id\n    name\n  }\n}\n\nquery GetClientDashboardCards($limit: Int = 12) {\n  clients(where: {active: {_eq: true}}, orderBy: {name: ASC}, limit: $limit) {\n    ...ClientDashboardCard\n  }\n}\n\nquery GetClientWithActivePayrolls($id: uuid!) {\n  clientById(id: $id) {\n    ...ClientSummary\n    contactEmail\n    contactPhone\n    contactPerson\n    activePayrolls: payrolls(\n      where: {supersededDate: {_isNull: true}}\n      orderBy: {name: ASC}\n    ) {\n      id\n      name\n      status\n      primaryConsultant {\n        name\n      }\n    }\n  }\n}\n\nquery GetAllClientsForDeveloper {\n  clients {\n    id\n    name\n    contactPerson\n    contactEmail\n    active\n  }\n}": types.GetClientsDocument,
    "subscription ClientUpdates($id: uuid!) {\n  clientById(id: $id) {\n    ...ClientWithRelations\n  }\n}\n\nsubscription ClientListUpdates {\n  clients(where: {active: {_eq: true}}, orderBy: {name: ASC}) {\n    ...ClientBasicInfo\n  }\n}\n\nsubscription ClientStatusUpdates($id: uuid!) {\n  clientById(id: $id) {\n    id\n    name\n    active\n    updatedAt\n  }\n}\n\nsubscription ClientPayrollUpdates($clientId: uuid!) {\n  payrolls(\n    where: {clientId: {_eq: $clientId}, supersededDate: {_isNull: true}}\n    orderBy: {updatedAt: DESC}\n  ) {\n    id\n    name\n    status\n    updatedAt\n  }\n}\n\nsubscription ActiveClientsCount {\n  clientsAggregate(where: {active: {_eq: true}}) {\n    aggregate {\n      count\n    }\n  }\n}\n\nsubscription ClientDashboardUpdates {\n  clients(where: {active: {_eq: true}}, orderBy: {name: ASC}, limit: 10) {\n    ...ClientDashboardCard\n  }\n}\n\nsubscription ClientMetricsUpdates($id: uuid!) {\n  clientById(id: $id) {\n    ...ClientWithMetrics\n  }\n}": types.ClientUpdatesDocument,
    "fragment UserCore on users {\n  id\n  name\n  email\n  username\n  role\n  isActive\n  isStaff\n  clerkUserId\n  createdAt\n  updatedAt\n}\n\nfragment UserBasic on users {\n  id\n  name\n  email\n  role\n  isActive\n}\n\nfragment UserWithManager on users {\n  ...UserCore\n  managerId\n  managerUser {\n    ...UserBasic\n  }\n}\n\nfragment RoleCore on roles {\n  id\n  name\n  description\n  displayName\n  priority\n  isSystemRole\n  createdAt\n}\n\nfragment PermissionCore on permissions {\n  id\n  action\n  description\n  resourceId\n  createdAt\n  updatedAt\n}\n\nfragment PermissionWithResource on permissions {\n  ...PermissionCore\n  relatedResource {\n    id\n    name\n    description\n  }\n}\n\nfragment ClientCore on clients {\n  id\n  name\n  contactEmail\n  contactPerson\n  contactPhone\n  active\n  createdAt\n  updatedAt\n}\n\nfragment ClientBasic on clients {\n  id\n  name\n  active\n}\n\nfragment ResourceCore on resources {\n  id\n  name\n  displayName\n  description\n  createdAt\n  updatedAt\n}\n\nfragment UserRoleCore on userRoles {\n  id\n  userId\n  roleId\n  createdAt\n  updatedAt\n}\n\nfragment RolePermissionCore on rolePermissions {\n  id\n  roleId\n  permissionId\n  conditions\n  createdAt\n  updatedAt\n}\n\nfragment AuditFields on auditLogs {\n  id\n  eventTime\n  action\n  resourceType\n  resourceId\n  userId\n  ipAddress\n  userAgent\n  success\n  userEmail\n  userRole\n}": types.UserCoreFragmentDoc,
};

/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 *
 *
 * @example
 * ```ts
 * const query = graphql(`query GetUser($id: ID!) { user(id: $id) { name } }`);
 * ```
 *
 * The query argument is unknown!
 * Please regenerate the types.
 */
export function graphql(source: string): unknown;

/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "fragment ClientBasicInfo on clients {\n  id\n  name\n}\n\nfragment ClientWithContact on clients {\n  ...ClientBasicInfo\n  contactEmail\n  contactPhone\n}\n\nfragment ClientForBilling on clients {\n  id\n  name\n  contactPerson\n  contactEmail\n}\n\nfragment ClientForAudit on clients {\n  id\n  name\n}\n\nfragment ClientWithRelations on clients {\n  ...ClientWithContact\n  active\n  contactPerson\n  createdAt\n  updatedAt\n  payrolls(where: {supersededDate: {_isNull: true}}) {\n    id\n    name\n    status\n    employeeCount\n    createdAt\n    updatedAt\n    primaryConsultant {\n      id\n      name\n    }\n    manager {\n      id\n      name\n    }\n    payrollCycle {\n      id\n      name\n    }\n    supersededDate\n  }\n}\n\nfragment ClientSummary on clients {\n  id\n  name\n  active\n}\n\nfragment ClientListItem on clients {\n  ...ClientSummary\n  contactEmail\n  contactPhone\n  payrollCount: payrollsAggregate {\n    aggregate {\n      count\n    }\n  }\n}\n\nfragment ClientDashboardCard on clients {\n  ...ClientSummary\n  activePayrolls: payrollsAggregate(where: {supersededDate: {_isNull: true}}) {\n    aggregate {\n      count\n    }\n  }\n}\n\nfragment ClientTableRow on clients {\n  ...ClientListItem\n  contactPerson\n  updatedAt\n}\n\nfragment ClientMinimal on clients {\n  id\n  name\n}\n\nfragment ClientWithMetrics on clients {\n  ...ClientSummary\n  totalPayrolls: payrollsAggregate {\n    aggregate {\n      count\n    }\n  }\n  activePayrolls: payrollsAggregate(where: {supersededDate: {_isNull: true}}) {\n    aggregate {\n      count\n    }\n  }\n  recentPayrolls: payrolls(orderBy: {updatedAt: DESC}, limit: 3) {\n    id\n    name\n    status\n    updatedAt\n  }\n}"): (typeof documents)["fragment ClientBasicInfo on clients {\n  id\n  name\n}\n\nfragment ClientWithContact on clients {\n  ...ClientBasicInfo\n  contactEmail\n  contactPhone\n}\n\nfragment ClientForBilling on clients {\n  id\n  name\n  contactPerson\n  contactEmail\n}\n\nfragment ClientForAudit on clients {\n  id\n  name\n}\n\nfragment ClientWithRelations on clients {\n  ...ClientWithContact\n  active\n  contactPerson\n  createdAt\n  updatedAt\n  payrolls(where: {supersededDate: {_isNull: true}}) {\n    id\n    name\n    status\n    employeeCount\n    createdAt\n    updatedAt\n    primaryConsultant {\n      id\n      name\n    }\n    manager {\n      id\n      name\n    }\n    payrollCycle {\n      id\n      name\n    }\n    supersededDate\n  }\n}\n\nfragment ClientSummary on clients {\n  id\n  name\n  active\n}\n\nfragment ClientListItem on clients {\n  ...ClientSummary\n  contactEmail\n  contactPhone\n  payrollCount: payrollsAggregate {\n    aggregate {\n      count\n    }\n  }\n}\n\nfragment ClientDashboardCard on clients {\n  ...ClientSummary\n  activePayrolls: payrollsAggregate(where: {supersededDate: {_isNull: true}}) {\n    aggregate {\n      count\n    }\n  }\n}\n\nfragment ClientTableRow on clients {\n  ...ClientListItem\n  contactPerson\n  updatedAt\n}\n\nfragment ClientMinimal on clients {\n  id\n  name\n}\n\nfragment ClientWithMetrics on clients {\n  ...ClientSummary\n  totalPayrolls: payrollsAggregate {\n    aggregate {\n      count\n    }\n  }\n  activePayrolls: payrollsAggregate(where: {supersededDate: {_isNull: true}}) {\n    aggregate {\n      count\n    }\n  }\n  recentPayrolls: payrolls(orderBy: {updatedAt: DESC}, limit: 3) {\n    id\n    name\n    status\n    updatedAt\n  }\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "mutation CreateClient($name: String!, $contactName: String, $contactEmail: String, $contactPhone: String, $address: String, $city: String, $state: String, $postalCode: String, $country: String = \"Australia\") {\n  insertClient(\n    object: {name: $name, contactEmail: $contactEmail, contactPhone: $contactPhone}\n  ) {\n    ...ClientWithContact\n  }\n}\n\nmutation UpdateClient($id: uuid!, $name: String, $contactName: String, $contactEmail: String, $contactPhone: String, $address: String, $city: String, $state: String, $postalCode: String, $country: String) {\n  updateClientById(\n    pkColumns: {id: $id}\n    _set: {name: $name, contactEmail: $contactEmail, contactPhone: $contactPhone}\n  ) {\n    ...ClientWithContact\n  }\n}\n\nmutation UpdateClientStatus($id: uuid!, $active: Boolean!) {\n  updateClientById(\n    pkColumns: {id: $id}\n    _set: {active: $active, updatedAt: \"now()\"}\n  ) {\n    ...ClientBasicInfo\n  }\n}\n\nmutation DeactivateClient($id: uuid!) {\n  updateClientById(\n    pkColumns: {id: $id}\n    _set: {active: false, updatedAt: \"now()\"}\n  ) {\n    ...ClientBasicInfo\n  }\n}\n\nmutation ActivateClient($id: uuid!) {\n  updateClientById(pkColumns: {id: $id}, _set: {active: true, updatedAt: \"now()\"}) {\n    ...ClientBasicInfo\n  }\n}\n\nmutation ArchiveClient($id: uuid!) {\n  updateClientById(\n    pkColumns: {id: $id}\n    _set: {active: false, updatedAt: \"now()\"}\n  ) {\n    id\n    name\n  }\n}\n\nmutation BulkUpdateClientStatus($clientIds: [uuid!]!, $active: Boolean!) {\n  bulkUpdateClients(\n    where: {id: {_in: $clientIds}}\n    _set: {active: $active, updatedAt: \"now()\"}\n  ) {\n    affectedRows\n    returning {\n      ...ClientBasicInfo\n    }\n  }\n}"): (typeof documents)["mutation CreateClient($name: String!, $contactName: String, $contactEmail: String, $contactPhone: String, $address: String, $city: String, $state: String, $postalCode: String, $country: String = \"Australia\") {\n  insertClient(\n    object: {name: $name, contactEmail: $contactEmail, contactPhone: $contactPhone}\n  ) {\n    ...ClientWithContact\n  }\n}\n\nmutation UpdateClient($id: uuid!, $name: String, $contactName: String, $contactEmail: String, $contactPhone: String, $address: String, $city: String, $state: String, $postalCode: String, $country: String) {\n  updateClientById(\n    pkColumns: {id: $id}\n    _set: {name: $name, contactEmail: $contactEmail, contactPhone: $contactPhone}\n  ) {\n    ...ClientWithContact\n  }\n}\n\nmutation UpdateClientStatus($id: uuid!, $active: Boolean!) {\n  updateClientById(\n    pkColumns: {id: $id}\n    _set: {active: $active, updatedAt: \"now()\"}\n  ) {\n    ...ClientBasicInfo\n  }\n}\n\nmutation DeactivateClient($id: uuid!) {\n  updateClientById(\n    pkColumns: {id: $id}\n    _set: {active: false, updatedAt: \"now()\"}\n  ) {\n    ...ClientBasicInfo\n  }\n}\n\nmutation ActivateClient($id: uuid!) {\n  updateClientById(pkColumns: {id: $id}, _set: {active: true, updatedAt: \"now()\"}) {\n    ...ClientBasicInfo\n  }\n}\n\nmutation ArchiveClient($id: uuid!) {\n  updateClientById(\n    pkColumns: {id: $id}\n    _set: {active: false, updatedAt: \"now()\"}\n  ) {\n    id\n    name\n  }\n}\n\nmutation BulkUpdateClientStatus($clientIds: [uuid!]!, $active: Boolean!) {\n  bulkUpdateClients(\n    where: {id: {_in: $clientIds}}\n    _set: {active: $active, updatedAt: \"now()\"}\n  ) {\n    affectedRows\n    returning {\n      ...ClientBasicInfo\n    }\n  }\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "query GetClients {\n  clients(where: {active: {_eq: true}}, orderBy: {name: ASC}) {\n    ...ClientBasicInfo\n  }\n}\n\nquery GetClientsSimple {\n  clients {\n    id\n    name\n  }\n}\n\nquery GetClientsWithContact {\n  clients(where: {active: {_eq: true}}, orderBy: {name: ASC}) {\n    ...ClientWithContact\n  }\n}\n\nquery GetClientById($id: uuid!) {\n  clientById(id: $id) {\n    ...ClientWithRelations\n  }\n}\n\nquery GetClientBasicById($id: uuid!) {\n  clientById(id: $id) {\n    ...ClientBasicInfo\n  }\n}\n\nquery GetActiveClients {\n  clients(where: {active: {_eq: true}}, orderBy: {name: ASC}) {\n    ...ClientBasicInfo\n  }\n}\n\nquery GetClientsForBilling {\n  clients(where: {active: {_eq: true}}, orderBy: {name: ASC}) {\n    ...ClientForBilling\n  }\n}\n\nquery SearchClients($searchTerm: String!) {\n  clients(\n    where: {_and: [{active: {_eq: true}}, {_or: [{name: {_ilike: $searchTerm}}, {contactPerson: {_ilike: $searchTerm}}, {contactEmail: {_ilike: $searchTerm}}]}]}\n    orderBy: {name: ASC}\n    limit: 50\n  ) {\n    ...ClientWithContact\n  }\n}\n\nquery GetClientsForAudit {\n  clients(orderBy: {createdAt: DESC}) {\n    ...ClientForAudit\n  }\n}\n\nquery GetClientStats {\n  clientsAggregate {\n    aggregate {\n      count\n    }\n  }\n  active_clients: clientsAggregate(where: {active: {_eq: true}}) {\n    aggregate {\n      count\n    }\n  }\n  inactive_clients: clientsAggregate(where: {active: {_eq: false}}) {\n    aggregate {\n      count\n    }\n  }\n}\n\nquery GetClientsPaginated($limit: Int = 20, $offset: Int = 0, $where: clientsBoolExp = {}, $orderBy: [clientsOrderBy!] = [{name: ASC}]) {\n  clients(\n    limit: $limit\n    offset: $offset\n    where: {_and: [{active: {_eq: true}}, $where]}\n    orderBy: $orderBy\n  ) {\n    ...ClientListItem\n  }\n  clientsAggregate(where: {_and: [{active: {_eq: true}}, $where]}) {\n    aggregate {\n      count\n    }\n  }\n}\n\nquery GetAllClientsPaginated($limit: Int = 20, $offset: Int = 0, $where: clientsBoolExp = {}, $orderBy: [clientsOrderBy!] = [{name: ASC}]) {\n  clients(limit: $limit, offset: $offset, where: $where, orderBy: $orderBy) {\n    ...ClientTableRow\n  }\n  allClientsAggregate: clientsAggregate(where: $where) {\n    aggregate {\n      count\n    }\n  }\n}\n\nquery SearchClientsPaginated($searchTerm: String!, $limit: Int = 20, $offset: Int = 0) {\n  clients(\n    where: {_and: [{active: {_eq: true}}, {_or: [{name: {_ilike: $searchTerm}}, {contactPerson: {_ilike: $searchTerm}}, {contactEmail: {_ilike: $searchTerm}}]}]}\n    orderBy: {name: ASC}\n    limit: $limit\n    offset: $offset\n  ) {\n    ...ClientListItem\n  }\n  searchAggregate: clientsAggregate(\n    where: {_and: [{active: {_eq: true}}, {_or: [{name: {_ilike: $searchTerm}}, {contactPerson: {_ilike: $searchTerm}}, {contactEmail: {_ilike: $searchTerm}}]}]}\n  ) {\n    aggregate {\n      count\n    }\n  }\n}\n\nquery GetInactiveClientsPaginated($limit: Int = 20, $offset: Int = 0) {\n  clients(\n    where: {active: {_eq: false}}\n    orderBy: {name: ASC}\n    limit: $limit\n    offset: $offset\n  ) {\n    ...ClientTableRow\n  }\n  inactiveAggregate: clientsAggregate(where: {active: {_eq: false}}) {\n    aggregate {\n      count\n    }\n  }\n}\n\nquery GetClientsQuickList {\n  clients(where: {active: {_eq: true}}, orderBy: {name: ASC}) {\n    ...ClientMinimal\n  }\n}\n\nquery GetClientCard($id: uuid!) {\n  clientById(id: $id) {\n    ...ClientSummary\n    contactEmail\n    payrollCount: payrollsAggregate(where: {supersededDate: {_isNull: true}}) {\n      aggregate {\n        count\n      }\n    }\n  }\n}\n\nquery GetAllClientsForDeveloper {\n  clients {\n    id\n    name\n    contactPerson\n    contactEmail\n    active\n  }\n}\n\nquery GetClientOptions {\n  clients(where: {active: {_eq: true}}, orderBy: {name: ASC}) {\n    id\n    name\n  }\n}\n\nquery GetClientDashboardCards($limit: Int = 12) {\n  clients(where: {active: {_eq: true}}, orderBy: {name: ASC}, limit: $limit) {\n    ...ClientDashboardCard\n  }\n}\n\nquery GetClientWithActivePayrolls($id: uuid!) {\n  clientById(id: $id) {\n    ...ClientSummary\n    contactEmail\n    contactPhone\n    contactPerson\n    activePayrolls: payrolls(\n      where: {supersededDate: {_isNull: true}}\n      orderBy: {name: ASC}\n    ) {\n      id\n      name\n      status\n      primaryConsultant {\n        name\n      }\n    }\n  }\n}\n\nquery GetAllClientsForDeveloper {\n  clients {\n    id\n    name\n    contactPerson\n    contactEmail\n    active\n  }\n}"): (typeof documents)["query GetClients {\n  clients(where: {active: {_eq: true}}, orderBy: {name: ASC}) {\n    ...ClientBasicInfo\n  }\n}\n\nquery GetClientsSimple {\n  clients {\n    id\n    name\n  }\n}\n\nquery GetClientsWithContact {\n  clients(where: {active: {_eq: true}}, orderBy: {name: ASC}) {\n    ...ClientWithContact\n  }\n}\n\nquery GetClientById($id: uuid!) {\n  clientById(id: $id) {\n    ...ClientWithRelations\n  }\n}\n\nquery GetClientBasicById($id: uuid!) {\n  clientById(id: $id) {\n    ...ClientBasicInfo\n  }\n}\n\nquery GetActiveClients {\n  clients(where: {active: {_eq: true}}, orderBy: {name: ASC}) {\n    ...ClientBasicInfo\n  }\n}\n\nquery GetClientsForBilling {\n  clients(where: {active: {_eq: true}}, orderBy: {name: ASC}) {\n    ...ClientForBilling\n  }\n}\n\nquery SearchClients($searchTerm: String!) {\n  clients(\n    where: {_and: [{active: {_eq: true}}, {_or: [{name: {_ilike: $searchTerm}}, {contactPerson: {_ilike: $searchTerm}}, {contactEmail: {_ilike: $searchTerm}}]}]}\n    orderBy: {name: ASC}\n    limit: 50\n  ) {\n    ...ClientWithContact\n  }\n}\n\nquery GetClientsForAudit {\n  clients(orderBy: {createdAt: DESC}) {\n    ...ClientForAudit\n  }\n}\n\nquery GetClientStats {\n  clientsAggregate {\n    aggregate {\n      count\n    }\n  }\n  active_clients: clientsAggregate(where: {active: {_eq: true}}) {\n    aggregate {\n      count\n    }\n  }\n  inactive_clients: clientsAggregate(where: {active: {_eq: false}}) {\n    aggregate {\n      count\n    }\n  }\n}\n\nquery GetClientsPaginated($limit: Int = 20, $offset: Int = 0, $where: clientsBoolExp = {}, $orderBy: [clientsOrderBy!] = [{name: ASC}]) {\n  clients(\n    limit: $limit\n    offset: $offset\n    where: {_and: [{active: {_eq: true}}, $where]}\n    orderBy: $orderBy\n  ) {\n    ...ClientListItem\n  }\n  clientsAggregate(where: {_and: [{active: {_eq: true}}, $where]}) {\n    aggregate {\n      count\n    }\n  }\n}\n\nquery GetAllClientsPaginated($limit: Int = 20, $offset: Int = 0, $where: clientsBoolExp = {}, $orderBy: [clientsOrderBy!] = [{name: ASC}]) {\n  clients(limit: $limit, offset: $offset, where: $where, orderBy: $orderBy) {\n    ...ClientTableRow\n  }\n  allClientsAggregate: clientsAggregate(where: $where) {\n    aggregate {\n      count\n    }\n  }\n}\n\nquery SearchClientsPaginated($searchTerm: String!, $limit: Int = 20, $offset: Int = 0) {\n  clients(\n    where: {_and: [{active: {_eq: true}}, {_or: [{name: {_ilike: $searchTerm}}, {contactPerson: {_ilike: $searchTerm}}, {contactEmail: {_ilike: $searchTerm}}]}]}\n    orderBy: {name: ASC}\n    limit: $limit\n    offset: $offset\n  ) {\n    ...ClientListItem\n  }\n  searchAggregate: clientsAggregate(\n    where: {_and: [{active: {_eq: true}}, {_or: [{name: {_ilike: $searchTerm}}, {contactPerson: {_ilike: $searchTerm}}, {contactEmail: {_ilike: $searchTerm}}]}]}\n  ) {\n    aggregate {\n      count\n    }\n  }\n}\n\nquery GetInactiveClientsPaginated($limit: Int = 20, $offset: Int = 0) {\n  clients(\n    where: {active: {_eq: false}}\n    orderBy: {name: ASC}\n    limit: $limit\n    offset: $offset\n  ) {\n    ...ClientTableRow\n  }\n  inactiveAggregate: clientsAggregate(where: {active: {_eq: false}}) {\n    aggregate {\n      count\n    }\n  }\n}\n\nquery GetClientsQuickList {\n  clients(where: {active: {_eq: true}}, orderBy: {name: ASC}) {\n    ...ClientMinimal\n  }\n}\n\nquery GetClientCard($id: uuid!) {\n  clientById(id: $id) {\n    ...ClientSummary\n    contactEmail\n    payrollCount: payrollsAggregate(where: {supersededDate: {_isNull: true}}) {\n      aggregate {\n        count\n      }\n    }\n  }\n}\n\nquery GetAllClientsForDeveloper {\n  clients {\n    id\n    name\n    contactPerson\n    contactEmail\n    active\n  }\n}\n\nquery GetClientOptions {\n  clients(where: {active: {_eq: true}}, orderBy: {name: ASC}) {\n    id\n    name\n  }\n}\n\nquery GetClientDashboardCards($limit: Int = 12) {\n  clients(where: {active: {_eq: true}}, orderBy: {name: ASC}, limit: $limit) {\n    ...ClientDashboardCard\n  }\n}\n\nquery GetClientWithActivePayrolls($id: uuid!) {\n  clientById(id: $id) {\n    ...ClientSummary\n    contactEmail\n    contactPhone\n    contactPerson\n    activePayrolls: payrolls(\n      where: {supersededDate: {_isNull: true}}\n      orderBy: {name: ASC}\n    ) {\n      id\n      name\n      status\n      primaryConsultant {\n        name\n      }\n    }\n  }\n}\n\nquery GetAllClientsForDeveloper {\n  clients {\n    id\n    name\n    contactPerson\n    contactEmail\n    active\n  }\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "subscription ClientUpdates($id: uuid!) {\n  clientById(id: $id) {\n    ...ClientWithRelations\n  }\n}\n\nsubscription ClientListUpdates {\n  clients(where: {active: {_eq: true}}, orderBy: {name: ASC}) {\n    ...ClientBasicInfo\n  }\n}\n\nsubscription ClientStatusUpdates($id: uuid!) {\n  clientById(id: $id) {\n    id\n    name\n    active\n    updatedAt\n  }\n}\n\nsubscription ClientPayrollUpdates($clientId: uuid!) {\n  payrolls(\n    where: {clientId: {_eq: $clientId}, supersededDate: {_isNull: true}}\n    orderBy: {updatedAt: DESC}\n  ) {\n    id\n    name\n    status\n    updatedAt\n  }\n}\n\nsubscription ActiveClientsCount {\n  clientsAggregate(where: {active: {_eq: true}}) {\n    aggregate {\n      count\n    }\n  }\n}\n\nsubscription ClientDashboardUpdates {\n  clients(where: {active: {_eq: true}}, orderBy: {name: ASC}, limit: 10) {\n    ...ClientDashboardCard\n  }\n}\n\nsubscription ClientMetricsUpdates($id: uuid!) {\n  clientById(id: $id) {\n    ...ClientWithMetrics\n  }\n}"): (typeof documents)["subscription ClientUpdates($id: uuid!) {\n  clientById(id: $id) {\n    ...ClientWithRelations\n  }\n}\n\nsubscription ClientListUpdates {\n  clients(where: {active: {_eq: true}}, orderBy: {name: ASC}) {\n    ...ClientBasicInfo\n  }\n}\n\nsubscription ClientStatusUpdates($id: uuid!) {\n  clientById(id: $id) {\n    id\n    name\n    active\n    updatedAt\n  }\n}\n\nsubscription ClientPayrollUpdates($clientId: uuid!) {\n  payrolls(\n    where: {clientId: {_eq: $clientId}, supersededDate: {_isNull: true}}\n    orderBy: {updatedAt: DESC}\n  ) {\n    id\n    name\n    status\n    updatedAt\n  }\n}\n\nsubscription ActiveClientsCount {\n  clientsAggregate(where: {active: {_eq: true}}) {\n    aggregate {\n      count\n    }\n  }\n}\n\nsubscription ClientDashboardUpdates {\n  clients(where: {active: {_eq: true}}, orderBy: {name: ASC}, limit: 10) {\n    ...ClientDashboardCard\n  }\n}\n\nsubscription ClientMetricsUpdates($id: uuid!) {\n  clientById(id: $id) {\n    ...ClientWithMetrics\n  }\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "fragment UserCore on users {\n  id\n  name\n  email\n  username\n  role\n  isActive\n  isStaff\n  clerkUserId\n  createdAt\n  updatedAt\n}\n\nfragment UserBasic on users {\n  id\n  name\n  email\n  role\n  isActive\n}\n\nfragment UserWithManager on users {\n  ...UserCore\n  managerId\n  managerUser {\n    ...UserBasic\n  }\n}\n\nfragment RoleCore on roles {\n  id\n  name\n  description\n  displayName\n  priority\n  isSystemRole\n  createdAt\n}\n\nfragment PermissionCore on permissions {\n  id\n  action\n  description\n  resourceId\n  createdAt\n  updatedAt\n}\n\nfragment PermissionWithResource on permissions {\n  ...PermissionCore\n  relatedResource {\n    id\n    name\n    description\n  }\n}\n\nfragment ClientCore on clients {\n  id\n  name\n  contactEmail\n  contactPerson\n  contactPhone\n  active\n  createdAt\n  updatedAt\n}\n\nfragment ClientBasic on clients {\n  id\n  name\n  active\n}\n\nfragment ResourceCore on resources {\n  id\n  name\n  displayName\n  description\n  createdAt\n  updatedAt\n}\n\nfragment UserRoleCore on userRoles {\n  id\n  userId\n  roleId\n  createdAt\n  updatedAt\n}\n\nfragment RolePermissionCore on rolePermissions {\n  id\n  roleId\n  permissionId\n  conditions\n  createdAt\n  updatedAt\n}\n\nfragment AuditFields on auditLogs {\n  id\n  eventTime\n  action\n  resourceType\n  resourceId\n  userId\n  ipAddress\n  userAgent\n  success\n  userEmail\n  userRole\n}"): (typeof documents)["fragment UserCore on users {\n  id\n  name\n  email\n  username\n  role\n  isActive\n  isStaff\n  clerkUserId\n  createdAt\n  updatedAt\n}\n\nfragment UserBasic on users {\n  id\n  name\n  email\n  role\n  isActive\n}\n\nfragment UserWithManager on users {\n  ...UserCore\n  managerId\n  managerUser {\n    ...UserBasic\n  }\n}\n\nfragment RoleCore on roles {\n  id\n  name\n  description\n  displayName\n  priority\n  isSystemRole\n  createdAt\n}\n\nfragment PermissionCore on permissions {\n  id\n  action\n  description\n  resourceId\n  createdAt\n  updatedAt\n}\n\nfragment PermissionWithResource on permissions {\n  ...PermissionCore\n  relatedResource {\n    id\n    name\n    description\n  }\n}\n\nfragment ClientCore on clients {\n  id\n  name\n  contactEmail\n  contactPerson\n  contactPhone\n  active\n  createdAt\n  updatedAt\n}\n\nfragment ClientBasic on clients {\n  id\n  name\n  active\n}\n\nfragment ResourceCore on resources {\n  id\n  name\n  displayName\n  description\n  createdAt\n  updatedAt\n}\n\nfragment UserRoleCore on userRoles {\n  id\n  userId\n  roleId\n  createdAt\n  updatedAt\n}\n\nfragment RolePermissionCore on rolePermissions {\n  id\n  roleId\n  permissionId\n  conditions\n  createdAt\n  updatedAt\n}\n\nfragment AuditFields on auditLogs {\n  id\n  eventTime\n  action\n  resourceType\n  resourceId\n  userId\n  ipAddress\n  userAgent\n  success\n  userEmail\n  userRole\n}"];

export function graphql(source: string) {
  return (documents as any)[source] ?? {};
}

export type DocumentType<TDocumentNode extends DocumentNode<any, any>> = TDocumentNode extends DocumentNode<  infer TType,  any>  ? TType  : never;