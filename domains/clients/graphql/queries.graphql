# Client Domain Queries

# Get paginated list of clients
query GetClientsList(
  $limit: Int = 20
  $offset: Int = 0
  $where: clientsBoolExp
  $orderBy: [clientsOrderBy!] = { name: ASC }
) {
  clients(limit: $limit, offset: $offset, where: $where, orderBy: $orderBy) {
    ...ClientListItem
  }
  clientsAggregate(where: $where) {
    aggregate {
      count
    }
  }
}

# GetClientsListWithStats
# Optimized combined query for clients listing page that consolidates client data with dashboard statistics
# Performance: Reduces network requests from 2 separate queries to 1 combined query (50% reduction)
# Replaces: GetClientsListDocument, GetClientsDashboardStatsDocument
# Domain: clients | Security: HIGH | Complexity: MEDIUM
# Params: limit (page size), offset (pagination), where (filters), orderBy (sorting)
# Returns: Combined client data with list, pagination, dashboard stats, and attention monitoring
# Usage: Main clients page (/clients) to load client list with dashboard stats
# Features: Real-time dashboard statistics, client attention monitoring, recent activity tracking
# Since: Priority 2 optimization (2025-06-27) | Classification: SOC2_COMPLIANT
query GetClientsListWithStats(
  $limit: Int = 20
  $offset: Int = 0
  $where: clientsBoolExp
  $orderBy: [clientsOrderBy!] = { name: ASC }
) {
  # Main clients list with pagination
  clients(limit: $limit, offset: $offset, where: $where, orderBy: $orderBy) {
    ...ClientListItem
  }
  
  # Pagination metadata
  clientsAggregate(where: $where) {
    aggregate {
      count
    }
  }
  
  # Dashboard statistics (combines GetClientsDashboardStats)
  activeClientsCount: clientsAggregate(where: {active: {_eq: true}}) {
    aggregate {
      count
    }
  }
  
  # Total employees across all clients
  totalEmployeesAcrossClients: payrollsAggregate(where: {supersededDate: {_isNull: true}}) {
    aggregate {
      sum {
        employeeCount
      }
    }
  }
  
  # Clients needing attention (no active payrolls)
  clientsNeedingAttention: clients(
    where: {
      active: {_eq: true}
      _not: {
        payrolls: {
          supersededDate: {_isNull: true}
          status: {_eq: "Active"}
        }
      }
    }
    limit: 5
  ) {
    ...ClientMinimal
  }
  
  # Recent client activity
  recentlyUpdatedClients: clients(
    where: {active: {_eq: true}}
    orderBy: {updatedAt: DESC}
    limit: 3
  ) {
    ...ClientMinimal
    updatedAt
  }
}

# Get single client by ID
query GetClientById($id: uuid!) {
  client: clientById(id: $id) {
    ...ClientWithStats
    # Basic client fields that exist in schema
    createdAt
    updatedAt

    # Payroll history
    payrollHistory: payrolls(
      where: { supersededDate: { _isNull: true } }
      orderBy: { createdAt: DESC }
      limit: 10
    ) {
      ...PayrollMinimal
    }

    # Related notes would be queried separately through the notes table
  }
}

# Get clients for dropdown selection
query GetClientsForDropdown {
  clients(where: { active: { _eq: true } }, orderBy: { name: ASC }) {
    ...ClientMinimal
  }
}

# Search clients - fixing field references
query SearchClients($searchTerm: String!) {
  clients(
    where: {
      _or: [
        { name: { _ilike: $searchTerm } }
        { contactEmail: { _ilike: $searchTerm } }
        { contactPhone: { _ilike: $searchTerm } }
      ]
    }
    limit: 10
  ) {
    ...ClientWithConsultant
  }
}

# Get client activity
query GetClientActivity($clientId: String!, $limit: Int = 20) {
  auditLogs(
    where: { resourceType: { _eq: "client" }, resourceId: { _eq: $clientId } }
    orderBy: { eventTime: DESC }
    limit: $limit
  ) {
    ...AuditLogEntry
  }
}

# Simple clients list for payroll creation
query GetClientsSimple {
  clients(where: { active: { _eq: true } }, orderBy: { name: ASC }) {
    ...ClientBasic
  }
}

# All clients for developer/admin use
query GetAllClientsForDeveloper {
  clients(orderBy: { name: ASC }) {
    ...ClientBasic
    payrollsAggregate {
      aggregate {
        count
      }
    }
  }
}

# Legacy compatibility - maps to GetClientsList  
query GetClients($limit: Int = 20, $offset: Int = 0) {
  clients(limit: $limit, offset: $offset, orderBy: { name: ASC }) {
    ...ClientListItem
  }
  clientsAggregate {
    aggregate {
      count
    }
  }
}

# Get client statistics for dashboard
query GetClientStats {
  clientsAggregate {
    aggregate {
      count
    }
  }
}
