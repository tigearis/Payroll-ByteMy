# Users Domain Queries
# Security Classification: CRITICAL - Employee PII and authentication data
# SOC2 Compliance: Strict access controls with audit logging

query GetUsers($limit: Int = 50, $offset: Int = 0, $where: usersBoolExp) {
  users(
    limit: $limit
    offset: $offset
    where: $where
    orderBy: { name: ASC }
  ) {
    ...UsersUserCore
    username
    image
    managerId
  }
}

# Simple user list for forms and dropdowns (migrated from payrolls/new/page.tsx)
query GetUsersForDropdown {
  users {
    id
    name
    email
    role
  }
}

# Managers query for user management
query GetManagers {
  users(where: { role: { _in: ["manager", "org_admin"] }, isActive: { _eq: true } }) {
    ...UsersUserCore
    username
    image
    managerId
  }
}

# User statistics for dashboard - simple count
query GetUserCount {
  usersAggregate {
    aggregate {
      count
    }
  }
}

query GetActiveUsers {
  users(where: { isActive: { _eq: true } }, orderBy: { name: ASC }) {
    ...UserBasicInfo
  }
}

query GetUserById($id: uuid!) {
  userById(id: $id) {
    id
    name
    email
    role
    username
    image
    isStaff
    isActive
    managerId
    clerkUserId
    managerUser {
      id
      name
      email
      role
    }
  }
}

query GetUserByClerkId($clerkUserId: String!) {
  users(where: { clerkUserId: { _eq: $clerkUserId } }, limit: 1) {
    id
    name
    email
    role
    username
    image
    isStaff
    isActive
    managerId
    clerkUserId
  }
}

query GetUserByEmail($email: String!) {
  users(where: { email: { _eq: $email } }) {
    id
    name
    email
    role
    username
    image
    isStaff
    isActive
    managerId
    clerkUserId
    managerUser {
      id
      name
      email
      role
    }
  }
}

# Staff-specific queries (replacing old staff domain)
query GetStaffList {
  users(
    where: {
      isActive: { _eq: true }
      role: { _in: ["consultant", "manager", "org_admin"] }
    }
    orderBy: { name: ASC }
  ) {
    id
    name
    email
    role
    username
    image
    isStaff
    isActive
    managerId
    clerkUserId
    managerUser {
      id
      name
      email
      role
    }
  }
}

query GetStaffById($id: uuid!) {
  userById(id: $id) {
    id
    name
    email
    role
    username
    image
    isStaff
    isActive
    clerkUserId
    createdAt
    updatedAt
    # leaves removed - relationship not available
  }
}

query GetAllUsersList {
  users(where: { isActive: { _eq: true } }, orderBy: { name: ASC }) {
    id
    name
    email
    role
    username
    image
    isStaff
    isActive
    managerId
    clerkUserId
  }
}

query GetUserProfile($id: uuid!) {
  userById(id: $id) {
    ...UserWithProfile
  }
}

query GetUsersWithRoles {
  users(where: { isActive: { _eq: true } }, orderBy: { name: ASC }) {
    ...UserRoleInfo
  }
}

query GetUserPermissions($id: uuid!) {
  userById(id: $id) {
    ...UserPermissionsInfo
  }
}

query SearchUsers($searchTerm: String!) {
  users(
    where: {
      _and: [
        { isActive: { _eq: true } }
        {
          _or: [
            { name: { _ilike: $searchTerm } }
            { email: { _ilike: $searchTerm } }
            { username: { _ilike: $searchTerm } }
          ]
        }
      ]
    }
    orderBy: { name: ASC }
    limit: 50
  ) {
    ...UserWithProfile
  }
}

# Audit queries - limited fields for compliance
query GetUsersForAudit {
  users(orderBy: { createdAt: DESC }) {
    ...UserForAudit
  }
}

query GetUserStats {
  usersAggregate {
    aggregate {
      count
    }
  }
  activeUsers: usersAggregate(where: { isActive: { _eq: true } }) {
    aggregate {
      count
    }
  }
  byRole: usersAggregate {
    nodes {
      role
    }
    aggregate {
      count
    }
  }
}

# Authentication helper queries
query GetUserSessionInfo($id: uuid!) {
  userById(id: $id) {
    id
    name
    email
    role
    isActive
  }
}

# Extracted from inline GraphQL operations
query GetCurrentUser($currentUserId: uuid!) {
  userById(id: $currentUserId) {
    id
    name
    role
    isStaff
    isActive
    managerId
    clerkUserId
    createdAt
    updatedAt
  }
}

query GetUserRole($userId: uuid!) {
  userById(id: $userId) {
    id
    role
    isStaff
    isActive
  }
}

query GetUserRoleFallback($userId: uuid!) {
  userById(id: $userId) {
    id
    role
    isStaff
    isActive
    clerkUserId
  }
}

query GetUsersWithLimit($limit: Int = 10) {
  users(limit: $limit) {
    id
    name
    email
    role
    isStaff
    clerkUserId
  }
}

query GetUserProfileSettings($id: uuid!) {
  userById(id: $id) {
    id
    name
    email
    role
    isStaff
    isActive
    clerkUserId
    managerUser {
      id
      name
      email
    }
  }
}

# API Route Queries - Migrated from inline GraphQL

query GetUsersWithFiltering(
  $limit: Int = 50
  $offset: Int = 0
  $where: usersBoolExp
) {
  users(
    limit: $limit
    offset: $offset
    where: $where
    orderBy: { createdAt: DESC }
  ) {
    id
    name
    email
    role
    createdAt
    updatedAt
    isStaff
    isActive
    managerId
    clerkUserId
    managerUser {
      id
      name
      email
    }
  }
  usersAggregate(where: $where) {
    aggregate {
      count
    }
  }
}

query GetDeveloperManagers {
  users(
    where: { role: { _in: ["developer", "manager"] } }
    orderBy: { name: ASC }
  ) {
    id
    name
    email
    role
  }
}

query GetUserRoleSecure($userId: uuid!) {
  userById(id: $userId) {
    id
    role
    isStaff
    isActive
  }
}

query GetUserRoleFallbackSecure($userId: uuid!) {
  userById(id: $userId) {
    id
    role
    isStaff
    isActive
    clerkUserId
  }
}

# Migrated from inline operations - Priority 1 fixes

query GetUserProfileComplete($id: uuid!) {
  userById(id: $id) {
    id
    name
    email
    username
    image
    role
    isStaff
    isActive
    createdAt
    updatedAt
    clerkUserId
    managerUser {
      id
      name
      email
      image
    }
    # directReports removed - relationship not available
    primaryConsultantPayrolls {
      id
      name
      status
      client {
        name
      }
      employeeCount
    }
    backupConsultantPayrolls {
      id
      name
      status
      client {
        name
      }
    }
    managedPayrolls {
      id
      name
      status
      client {
        name
      }
    }
    # leaves removed - relationship not available
    # userWorkSchedules needed instead of workSchedules
  }
}

# User deletion queries - migrated from app/api/staff/delete/route.ts

query GetUserForDeletion($id: uuid!) {
  userById(id: $id) {
    id
    name
    email
    role
    clerkUserId
    isStaff
    isActive
    createdAt
    managerUser {
      id
      name
      email
    }
  }

  payrolls(
    where: {
      _or: [
        { primaryConsultantUserId: { _eq: $id } }
        { backupConsultantUserId: { _eq: $id } }
        { managerUserId: { _eq: $id } }
      ]
      status: { _eq: "Active" }
    }
  ) {
    id
    name
    status
  }

  subordinates: users(
    where: { managerId: { _eq: $id }, isActive: { _eq: true } }
  ) {
    id
    name
    email
  }

  # pendingLeaves removed - should be in leave domain
}

query GetCurrentUserRole($clerkUserId: String!) {
  users(where: { clerkUserId: { _eq: $clerkUserId } }) {
    id
    role
    isStaff
    isActive
  }
}

# Phase 2: Paginated queries for performance optimization

query GetUsersPaginated(
  $limit: Int = 20
  $offset: Int = 0
  $where: usersBoolExp = {}
  $orderBy: [usersOrderBy!] = [{ name: ASC }]
) {
  users(
    limit: $limit
    offset: $offset
    where: { _and: [{ isActive: { _eq: true } }, $where] }
    orderBy: $orderBy
  ) {
    ...UserListItem
  }

  usersAggregate(where: { _and: [{ isActive: { _eq: true } }, $where] }) {
    aggregate {
      count
    }
  }
}

query GetAllUsersPaginated(
  $limit: Int = 20
  $offset: Int = 0
  $where: usersBoolExp = {}
  $orderBy: [usersOrderBy!] = [{ name: ASC }]
) {
  users(limit: $limit, offset: $offset, where: $where, orderBy: $orderBy) {
    ...UserTableRow
  }

  allUsersAggregate: usersAggregate(where: $where) {
    aggregate {
      count
    }
  }
}

query GetStaffPaginated(
  $limit: Int = 20
  $offset: Int = 0
  $where: usersBoolExp = {}
) {
  users(
    limit: $limit
    offset: $offset
    where: {
      _and: [
        { isActive: { _eq: true } }
        { role: { _in: ["consultant", "manager", "org_admin"] } }
        $where
      ]
    }
    orderBy: { name: ASC }
  ) {
    ...UserListItem
    managerUser {
      ...UserMinimal
    }
  }

  staffAggregate: usersAggregate(
    where: {
      _and: [
        { isActive: { _eq: true } }
        { role: { _in: ["consultant", "manager", "org_admin"] } }
        $where
      ]
    }
  ) {
    aggregate {
      count
    }
  }
}

query SearchUsersPaginated(
  $searchTerm: String!
  $limit: Int = 20
  $offset: Int = 0
) {
  users(
    where: {
      _and: [
        { isActive: { _eq: true } }
        {
          _or: [
            { name: { _ilike: $searchTerm } }
            { email: { _ilike: $searchTerm } }
            { username: { _ilike: $searchTerm } }
          ]
        }
      ]
    }
    orderBy: { name: ASC }
    limit: $limit
    offset: $offset
  ) {
    ...UserListItem
  }

  searchAggregate: usersAggregate(
    where: {
      _and: [
        { isActive: { _eq: true } }
        {
          _or: [
            { name: { _ilike: $searchTerm } }
            { email: { _ilike: $searchTerm } }
            { username: { _ilike: $searchTerm } }
          ]
        }
      ]
    }
  ) {
    aggregate {
      count
    }
  }
}

# Enhanced user queries migrated from /app/api/users/[id]/route.ts

query GetUserByIdComplete($id: uuid!) {
  userById(id: $id) {
    id
    name
    email
    role
    createdAt
    updatedAt
    isStaff
    managerId
    clerkUserId
    managerUser {
      id
      name
      email
      role
    }
    # directReports removed - relationship not available
  }
}

query GetUserByClerkIdComplete($clerkId: String!) {
  users(where: { clerkUserId: { _eq: $clerkId } }) {
    id
    name
    email
    role
    createdAt
    updatedAt
    isStaff
    managerId
    clerkUserId
    managerUser {
      id
      name
      email
      role
    }
    # directReports removed - relationship not available
  }
}

# Migrated from app/api/staff/update-role/route.ts

query GetUserClerkId($id: uuid!) {
  userById(id: $id) {
    id
    name
    email
    role
    clerkUserId
  }
}

# Phase 2: Optimized user queries to reduce over-fetching

query GetUsersQuickList {
  # Minimal user data for quick lists and dropdowns
  users(where: { isActive: { _eq: true } }, orderBy: { name: ASC }) {
    ...UserMinimal
  }
}

query GetStaffQuickList {
  # Minimal staff data for assignments and dropdowns
  users(
    where: {
      isActive: { _eq: true }
      role: { _in: ["consultant", "manager", "org_admin"] }
    }
    orderBy: { name: ASC }
  ) {
    ...UserMinimal
  }
}

query GetManagersQuickList {
  # Minimal manager data for hierarchy views
  users(
    where: { isActive: { _eq: true }, role: { _in: ["manager", "org_admin"] } }
    orderBy: { name: ASC }
  ) {
    ...UserMinimal
  }
}

query GetUserCard($id: uuid!) {
  # Minimal user data for user cards and preview
  userById(id: $id) {
    ...UserSummary
    email
    managerUser {
      ...UserMinimal
    }
  }
}

query GetUserAssignmentData($id: uuid!) {
  # Essential data for assignment views (payrolls, clients)
  userById(id: $id) {
    ...UserSummary
    email
    activePayrollCount: primaryConsultantPayrollsAggregate(
      where: { supersededDate: { _isNull: true } }
    ) {
      aggregate {
        count
      }
    }
    backupPayrollCount: backupConsultantPayrollsAggregate(
      where: { supersededDate: { _isNull: true } }
    ) {
      aggregate {
        count
      }
    }
  }
}

query GetUserWorkload($id: uuid!) {
  # Workload data without full details
  userById(id: $id) {
    ...UserSummary
    primaryPayrolls: primaryConsultantPayrolls(
      where: { supersededDate: { _isNull: true } }
      limit: 10
    ) {
      id
      name
      status
      client {
        name
      }
    }
    backupPayrolls: backupConsultantPayrolls(
      where: { supersededDate: { _isNull: true } }
      limit: 10
    ) {
      id
      name
      status
      client {
        name
      }
    }
  }
}
