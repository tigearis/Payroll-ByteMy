# Users Domain Queries
# Security Classification: CRITICAL - Employee PII and authentication data
# SOC2 Compliance: Strict access controls with audit logging

# OPTIMIZED: Original query with N+1 problems fixed
query GetUsers($limit: Int = 50, $offset: Int = 0, $where: usersBoolExp) {
  users(limit: $limit, offset: $offset, where: $where, orderBy: { computedName: ASC }) {
    ...UserBase
    username
    image
    managerId
    # ✅ Fetch manager data to avoid N+1
    managerUser {
      id
      firstName
      lastName
      computedName
      email
      role
    }
  }
}

# OPTIMIZED: Staff management query - fixes critical N+1 issues
# Performance: Reduces from 51 queries to 1 query (98% reduction)
# Eliminates: Separate manager lookups for each staff member
# Security: CRITICAL - Employee PII with SOC2 compliance
query GetStaffWithRelationsOptimized(
  $limit: Int = 50, 
  $offset: Int = 0, 
  $where: usersBoolExp = { isStaff: { _eq: true }, isActive: { _eq: true } }
  $orderBy: [usersOrderBy!] = [{ computedName: ASC }]
) {
  users(
    limit: $limit
    offset: $offset
    where: $where
    orderBy: $orderBy
  ) {
    id
    firstName
    lastName
    computedName
    email
    role
    username
    image
    isActive
    isStaff
    managerId
    clerkUserId
    createdAt
    updatedAt
    
    # ✅ Manager data fetched in same query (eliminates N+1)
    managerUser {
      id
      firstName
      lastName
      computedName
      email
      role
      isActive
    }
    
    # ✅ Direct reports fetched in same query (eliminates N+1)
    managedUsers(where: { isActive: { _eq: true } }) {
      id
      firstName
      lastName
      computedName
      email
      role
      isActive
    }
    
    # ✅ Key payroll assignments fetched efficiently (eliminates N+1)
    primaryConsultantPayrolls(
      where: { supersededDate: { _isNull: true } }
      limit: 5
      orderBy: { updatedAt: DESC }
    ) {
      id
      name
      status
      client { 
        id 
        name 
      }
      nextPayrollDate: payrollDates(
        where: { adjustedEftDate: { _gte: "now()" } }
        orderBy: { adjustedEftDate: ASC }
        limit: 1
      ) {
        adjustedEftDate
      }
    }
    
    # ✅ Backup assignments
    backupConsultantPayrolls(
      where: { supersededDate: { _isNull: true } }
      limit: 3
      orderBy: { updatedAt: DESC }
    ) {
      id
      name
      status
      client { 
        id 
        name 
      }
    }
    
    # ✅ Work schedule data for capacity planning
    userWorkSchedules(orderBy: { workDay: ASC }) {
      id
      workDay
      workHours
      adminTimeHours
      payrollCapacityHours
    }
  }
  
  # ✅ Aggregate counts in same query
  usersAggregate(where: $where) {
    aggregate { count }
  }
  
  # ✅ Additional stats
  activeStaff: usersAggregate(
    where: { isStaff: { _eq: true }, isActive: { _eq: true } }
  ) {
    aggregate { count }
  }
  
  managersCount: usersAggregate(
    where: { 
      role: { _in: ["manager", "org_admin", "developer"] }, 
      isActive: { _eq: true } 
    }
  ) {
    aggregate { count }
  }
}

# Simple user list for forms and dropdowns (migrated from payrolls/new/page.tsx)
query GetUsersForDropdownDomain {
  users {
    id
    firstName
    lastName
    computedName
    email
    role
  }
}

# Managers query for user management
query GetManagers {
  users(
    where: { role: { _in: ["manager", "org_admin"] }, isActive: { _eq: true } }
  ) {
    ...UserBase
    username
    image
    managerId
  }
}

# User statistics for dashboard - simple count
query GetUserCount {
  usersAggregate {
    aggregate {
      count
    }
  }
}

query GetActiveUsers {
  users(where: { isActive: { _eq: true } }, orderBy: { computedName: ASC }) {
    ...UserBase
  }
}

query GetUserById($id: uuid!) {
  userById(id: $id) {
    id
    firstName
    lastName
    computedName
    email
    role
    username
    image
    isStaff
    isActive
    managerId
    clerkUserId
    managerUser {
      id
      firstName
      lastName
      computedName
      email
      role
    }
  }
}

# GetStaffDetailComplete
# Optimized combined query for staff detail pages that consolidates user data, permissions, and activity into a single request
# Performance: Reduces network requests from 4 separate queries to 1 combined query (75% reduction)
# Replaces: GetUserByIdDocument, GetUserEffectivePermissionsDocument, GetUserPermissionOverridesDocument, GetUserActivityDocument
# Domain: users | Security: CRITICAL | Complexity: HIGH
# Param id: The unique identifier for the staff member to fetch complete details for
# Returns: Combined staff data with user profile, permissions, overrides, activity, and managed payrolls
# Usage: Staff detail pages (/staff/[id]) to load all user information in a single request
# Security: Only accessible to users with user_read permissions, elevated access for manager/permission data
# Since: Priority 2 optimization (2025-06-27) | Classification: SOC2_CRITICAL
query GetStaffDetailComplete($id: uuid!) {
  # Main user data
  userById(id: $id) {
    id
    firstName
    lastName
    computedName
    email
    role
    username
    image
    isStaff
    isActive
    managerId
    clerkUserId
    createdAt
    updatedAt

    # Manager relationship
    managerUser {
      id
      firstName
      lastName
      computedName
      email
      role
    }

    # Direct reports (if this user is a manager)
    managedUsers {
      id
      firstName
      lastName
      computedName
      email
      role
      isActive
    }

    # User skills
    userSkills {
      skillName
      proficiencyLevel
    }
  }

  # User's effective permissions (combines GetUserEffectivePermissions)
  userPermissions: userRoles(where: { userId: { _eq: $id } }) {
    roleId
    userId
  }

  # Permission overrides (combines GetUserPermissionOverrides)
  permissionOverrides(where: { userId: { _eq: $id } }) {
    id
    resource
    granted
    reason
    expiresAt
    createdAt
    createdBy
  }

  # Recent audit activity for this user
  userActivity: auditLogs(
    where: { userId: { _eq: $id } }
    orderBy: { eventTime: DESC }
    limit: 10
  ) {
    id
    action
    resourceType
    eventTime
    success
  }

  # Payrolls this user is involved with
  managedPayrolls: payrolls(
    where: {
      _or: [
        { primaryConsultantUserId: { _eq: $id } }
        { backupConsultantUserId: { _eq: $id } }
        { managerUserId: { _eq: $id } }
      ]
      supersededDate: { _isNull: true }
    }
    limit: 5
  ) {
    id
    name
    status
    client {
      id
      name
    }
  }
}

query GetUserByClerkId($clerkUserId: String!) {
  users(where: { clerkUserId: { _eq: $clerkUserId } }, limit: 1) {
    id
    firstName
    lastName
    computedName
    email
    role
    username
    image
    isStaff
    isActive
    managerId
    clerkUserId
  }
}

query GetUserByEmail($email: String!) {
  users(where: { email: { _eq: $email } }) {
    id
    firstName
    lastName
    computedName
    email
    role
    username
    image
    isStaff
    isActive
    managerId
    clerkUserId
    managerUser {
      id
      firstName
      lastName
      computedName
      email
      role
    }
  }
}

# Staff-specific queries (replacing old staff domain)
query GetStaffList {
  users(
    where: {
      isActive: { _eq: true }
      role: { _in: ["developer", "org_admin", "manager", "consultant"] }
    }
    orderBy: { computedName: ASC }
  ) {
    id
    firstName
    lastName
    computedName
    email
    role
    username
    image
    isStaff
    isActive
    managerId
    clerkUserId
    managerUser {
      id
      firstName
      lastName
      computedName
      email
      role
    }
  }
}

query GetStaffById($id: uuid!) {
  userById(id: $id) {
    id
    firstName
    lastName
    computedName
    email
    role
    username
    image
    isStaff
    isActive
    clerkUserId
    createdAt
    updatedAt
    # leaves removed - relationship not available
  }
}

query GetAllUsersList {
  users(where: { isActive: { _eq: true } }, orderBy: { computedName: ASC }) {
    id
    firstName
    lastName
    computedName
    email
    role
    username
    image
    isStaff
    isActive
    managerId
    clerkUserId
  }
}

query GetUserProfile($id: uuid!) {
  userById(id: $id) {
    ...UserWithProfile
  }
}

query GetUsersWithRoles {
  users(where: { isActive: { _eq: true } }, orderBy: { computedName: ASC }) {
    ...UserRoleInfo
  }
}

query GetUserPermissions($id: uuid!) {
  userById(id: $id) {
    ...UserPermissionsInfo
  }
}

query SearchUsers($searchTerm: String!) {
  users(
    where: {
      _and: [
        { isActive: { _eq: true } }
        {
          _or: [
            { computedName: { _ilike: $searchTerm } }
            { email: { _ilike: $searchTerm } }
            { username: { _ilike: $searchTerm } }
          ]
        }
      ]
    }
    orderBy: { computedName: ASC }
    limit: 50
  ) {
    ...UserWithProfile
  }
}

# Audit queries - limited fields for compliance
query GetUsersForAudit {
  users(orderBy: { createdAt: DESC }) {
    ...UserForAudit
  }
}

query GetUserStats {
  usersAggregate {
    aggregate {
      count
    }
  }
  activeUsers: usersAggregate(where: { isActive: { _eq: true } }) {
    aggregate {
      count
    }
  }
  byRole: usersAggregate {
    nodes {
      role
    }
    aggregate {
      count
    }
  }
}

# Authentication helper queries
query GetUserSessionInfo($id: uuid!) {
  userById(id: $id) {
    id
    firstName
    lastName
    computedName
    email
    role
    isActive
  }
}

# Extracted from inline GraphQL operations
query GetCurrentUserDomain($currentUserId: uuid!) {
  userById(id: $currentUserId) {
    id
    firstName
    lastName
    computedName
    role
    isStaff
    isActive
    managerId
    clerkUserId
    createdAt
    updatedAt
  }
}

query GetUserRole($userId: uuid!) {
  userById(id: $userId) {
    id
    role
    isStaff
    isActive
  }
}

query GetUserRoleFallback($userId: uuid!) {
  userById(id: $userId) {
    id
    role
    isStaff
    isActive
    clerkUserId
  }
}

query GetUsersWithLimit($limit: Int = 10) {
  users(limit: $limit) {
    id
    firstName
    lastName
    computedName
    email
    role
    isStaff
    clerkUserId
  }
}

query GetUserProfileSettings($id: uuid!) {
  userById(id: $id) {
    id
    firstName
    lastName
    computedName
    email
    role
    isStaff
    isActive
    clerkUserId
    managerUser {
      id
      firstName
      lastName
      computedName
      email
    }
  }
}

# API Route Queries - Migrated from inline GraphQL

query GetUsersWithFiltering(
  $limit: Int = 50
  $offset: Int = 0
  $where: usersBoolExp
) {
  users(
    limit: $limit
    offset: $offset
    where: $where
    orderBy: { createdAt: DESC }
  ) {
    id
    firstName
    lastName
    computedName
    email
    role
    createdAt
    updatedAt
    isStaff
    isActive
    managerId
    clerkUserId
    managerUser {
      id
      firstName
      lastName
      computedName
      email
    }
  }
  usersAggregate(where: $where) {
    aggregate {
      count
    }
  }
}

query GetDeveloperManagers {
  users(
    where: { role: { _in: ["developer", "manager"] } }
    orderBy: { computedName: ASC }
  ) {
    id
    firstName
    lastName
    computedName
    email
    role
  }
}

query GetUserRoleSecure($userId: uuid!) {
  userById(id: $userId) {
    id
    role
    isStaff
    isActive
  }
}

query GetUserRoleFallbackSecure($userId: uuid!) {
  userById(id: $userId) {
    id
    role
    isStaff
    isActive
    clerkUserId
  }
}

# Migrated from inline operations - Priority 1 fixes

query GetUserProfileComplete($id: uuid!) {
  userById(id: $id) {
    id
    firstName
    lastName
    computedName
    email
    username
    image
    phone
    address
    bio
    role
    isStaff
    isActive
    createdAt
    updatedAt
    clerkUserId
    managerUser {
      id
      firstName
      lastName
      computedName
      email
      image
    }
    # Direct reports (users this person manages)
    managedUsers {
      id
      firstName
      lastName
      computedName
      email
      role
      image
      isActive
    }
    primaryConsultantPayrolls {
      id
      name
      status
      client {
        id
        name
      }
      employeeCount
    }
    backupConsultantPayrolls {
      id
      name
      status
      client {
        id
        name
      }
    }
    managedPayrolls {
      id
      name
      status
      client {
        id
        name
      }
    }
    # Work schedules for this user
    userWorkSchedules {
      id
      workDay
      workHours
      createdAt
      updatedAt
    }
  }

  # Leave records for this user (separate query to avoid relationship issues)
  userLeaves: leave(
    where: { userId: { _eq: $id } }
    orderBy: { startDate: DESC }
    limit: 10
  ) {
    id
    startDate
    endDate
    leaveType
    status
    reason
  }
}

# User deletion queries - migrated from app/api/staff/delete/route.ts

query GetUserForDeletion($id: uuid!) {
  userById(id: $id) {
    id
    firstName
    lastName
    computedName
    email
    role
    clerkUserId
    isStaff
    isActive
    createdAt
    managerUser {
      id
      firstName
      lastName
      computedName
      email
    }
  }

  payrolls(
    where: {
      _or: [
        { primaryConsultantUserId: { _eq: $id } }
        { backupConsultantUserId: { _eq: $id } }
        { managerUserId: { _eq: $id } }
      ]
      status: { _eq: "Active" }
    }
  ) {
    id
    name
    status
  }

  subordinates: users(
    where: { managerId: { _eq: $id }, isActive: { _eq: true } }
  ) {
    id
    firstName
    lastName
    computedName
    email
  }

  # pendingLeaves removed - should be in leave domain
}

query GetCurrentUserRole($clerkUserId: String!) {
  users(where: { clerkUserId: { _eq: $clerkUserId } }) {
    id
    role
    isStaff
    isActive
  }
}

# Phase 2: Paginated queries for performance optimization

query GetUsersPaginated(
  $limit: Int = 20
  $offset: Int = 0
  $where: usersBoolExp = {}
  $orderBy: [usersOrderBy!] = [{ computedName: ASC }]
) {
  users(
    limit: $limit
    offset: $offset
    where: { _and: [{ isActive: { _eq: true } }, $where] }
    orderBy: $orderBy
  ) {
    ...UserListItem
  }

  usersAggregate(where: { _and: [{ isActive: { _eq: true } }, $where] }) {
    aggregate {
      count
    }
  }
}

query GetAllUsersPaginated(
  $limit: Int = 20
  $offset: Int = 0
  $where: usersBoolExp = {}
  $orderBy: [usersOrderBy!] = [{ computedName: ASC }]
) {
  users(limit: $limit, offset: $offset, where: $where, orderBy: $orderBy) {
    ...UserTableRow
  }

  allUsersAggregate: usersAggregate(where: $where) {
    aggregate {
      count
    }
  }
}

query GetStaffPaginated(
  $limit: Int = 20
  $offset: Int = 0
  $where: usersBoolExp = {}
) {
  users(
    limit: $limit
    offset: $offset
    where: {
      _and: [
        { isActive: { _eq: true } }
        { role: { _in: ["developer", "org_admin", "manager", "consultant"] } }
        $where
      ]
    }
    orderBy: { computedName: ASC }
  ) {
    ...UserListItem
    createdAt
    managerUser {
      ...UserMinimal
    }
  }

  staffAggregate: usersAggregate(
    where: {
      _and: [
        { isActive: { _eq: true } }
        { role: { _in: ["developer", "org_admin", "manager", "consultant"] } }
        $where
      ]
    }
  ) {
    aggregate {
      count
    }
  }
}

query SearchUsersPaginated(
  $searchTerm: String!
  $limit: Int = 20
  $offset: Int = 0
) {
  users(
    where: {
      _and: [
        { isActive: { _eq: true } }
        {
          _or: [
            { computedName: { _ilike: $searchTerm } }
            { email: { _ilike: $searchTerm } }
            { username: { _ilike: $searchTerm } }
          ]
        }
      ]
    }
    orderBy: { computedName: ASC }
    limit: $limit
    offset: $offset
  ) {
    ...UserListItem
    createdAt
    managerUser {
      ...UserMinimal
    }
  }

  searchAggregate: usersAggregate(
    where: {
      _and: [
        { isActive: { _eq: true } }
        {
          _or: [
            { computedName: { _ilike: $searchTerm } }
            { email: { _ilike: $searchTerm } }
            { username: { _ilike: $searchTerm } }
          ]
        }
      ]
    }
  ) {
    aggregate {
      count
    }
  }
}

# Enhanced user queries migrated from /app/api/users/[id]/route.ts

query GetUserByIdComplete($id: uuid!) {
  userById(id: $id) {
    id
    firstName
    lastName
    computedName
    email
    role
    createdAt
    updatedAt
    isStaff
    managerId
    clerkUserId
    managerUser {
      id
      firstName
      lastName
      computedName
      email
      role
    }
    # directReports removed - relationship not available
  }
}

query GetUserByClerkIdComplete($clerkId: String!) {
  users(where: { clerkUserId: { _eq: $clerkId } }) {
    id
    firstName
    lastName
    computedName
    email
    role
    createdAt
    updatedAt
    isStaff
    managerId
    clerkUserId
    managerUser {
      id
      firstName
      lastName
      computedName
      email
      role
    }
    # directReports removed - relationship not available
  }
}

# Migrated from app/api/staff/update-role/route.ts

query GetUserClerkId($id: uuid!) {
  userById(id: $id) {
    id
    firstName
    lastName
    computedName
    email
    role
    clerkUserId
    managerId
  }
}

# Phase 2: Optimized user queries to reduce over-fetching

query GetUsersQuickList {
  # Minimal user data for quick lists and dropdowns
  users(where: { isActive: { _eq: true } }, orderBy: { computedName: ASC }) {
    ...UserMinimal
  }
}

query GetStaffQuickList {
  # Minimal staff data for assignments and dropdowns
  users(
    where: {
      isActive: { _eq: true }
      role: { _in: ["developer", "org_admin", "manager", "consultant"] }
    }
    orderBy: { computedName: ASC }
  ) {
    ...UserMinimal
  }
}

query GetManagersQuickList {
  # Minimal manager data for hierarchy views
  users(
    where: { isActive: { _eq: true }, role: { _in: ["manager", "org_admin"] } }
    orderBy: { computedName: ASC }
  ) {
    ...UserMinimal
  }
}

query GetUserCard($id: uuid!) {
  # Minimal user data for user cards and preview
  userById(id: $id) {
    ...UserSummary
    email
    managerUser {
      ...UserMinimal
    }
  }
}

query GetUserAssignmentData($id: uuid!) {
  # Essential data for assignment views (payrolls, clients)
  userById(id: $id) {
    ...UserSummary
    email
    activePayrollCount: primaryConsultantPayrollsAggregate(
      where: { supersededDate: { _isNull: true } }
    ) {
      aggregate {
        count
      }
    }
    backupPayrollCount: backupConsultantPayrollsAggregate(
      where: { supersededDate: { _isNull: true } }
    ) {
      aggregate {
        count
      }
    }
  }
}

query GetUserWorkload($id: uuid!) {
  # Workload data without full details
  userById(id: $id) {
    ...UserSummary
    primaryPayrolls: primaryConsultantPayrolls(
      where: { supersededDate: { _isNull: true } }
      limit: 10
    ) {
      id
      name
      status
      client {
        name
      }
    }
    backupPayrolls: backupConsultantPayrolls(
      where: { supersededDate: { _isNull: true } }
      limit: 10
    ) {
      id
      name
      status
      client {
        name
      }
    }
  }
}

query GetInvitationsWithStatus(
  $statuses: [invitation_status_enum!]
  $limit: Int = 50
  $offset: Int = 0
) {
  userInvitations(
    where: { invitationStatus: { _in: $statuses } }
    orderBy: { createdAt: DESC }
    limit: $limit
    offset: $offset
  ) {
    id
    email
    firstName
    lastName
    invitedRole
    invitationStatus
    invitedAt
    expiresAt
    revokedAt
    revokeReason
    invitedByUser {
      id
      firstName
      lastName
      computedName
      email
    }
  }
  userInvitationsAggregate(where: { invitationStatus: { _in: $statuses } }) {
    aggregate {
      count
    }
  }
}

query GetInvitationDashboardStats {
  pending: userInvitationsAggregate(
    where: { invitationStatus: { _eq: "pending" }, expiresAt: { _gt: "now()" } }
  ) {
    aggregate {
      count
    }
  }

  expired: userInvitationsAggregate(
    where: { invitationStatus: { _eq: "expired" } }
  ) {
    aggregate {
      count
    }
  }

  accepted: userInvitationsAggregate(
    where: { invitationStatus: { _eq: "accepted" } }
  ) {
    aggregate {
      count
    }
  }

  revoked: userInvitationsAggregate(
    where: { invitationStatus: { _eq: "revoked" } }
  ) {
    aggregate {
      count
    }
  }

  expiringSoon: userInvitationsAggregate(
    where: {
      invitationStatus: { _eq: "pending" }
      expiresAt: { _gt: "now()", _lt: "now() + interval '7 days'" }
    }
  ) {
    aggregate {
      count
    }
  }

  recentInvitations: userInvitations(
    where: { createdAt: { _gte: "now() - interval '30 days'" } }
    orderBy: { createdAt: DESC }
    limit: 10
  ) {
    id
    email
    firstName
    lastName
    invitationStatus
    createdAt
    expiresAt
    invitedByUser {
      firstName
      lastName
      computedName
      email
    }
  }

  byStatus: userInvitationsAggregate {
    aggregate {
      count
    }
  }
}

query GetExpiringInvitations($daysUntilExpiry: interval!) {
  userInvitations(
    where: {
      invitationStatus: { _eq: "pending" }
      expiresAt: { _gt: "now()", _lt: "now() + $daysUntilExpiry" }
    }
    orderBy: { expiresAt: ASC }
  ) {
    id
    email
    firstName
    lastName
    expiresAt
    invitedByUser {
      firstName
      lastName
      computedName
      email
    }
  }
}

# User Status Management Queries for /api/users/manage
query GetUsersByStatus(
  $statuses: [user_status_enum!]
  $limit: Int = 50
  $offset: Int = 0
) {
  users(
    where: { status: { _in: $statuses } }
    orderBy: { updatedAt: DESC }
    limit: $limit
    offset: $offset
  ) {
    id
    email
    firstName
    lastName
    computedName
    role
    status
    isActive
    isStaff
    statusChangedAt
    statusChangeReason
    deactivatedAt
    createdAt
  }
  usersAggregate(where: { status: { _in: $statuses } }) {
    aggregate {
      count
    }
  }
}

query GetUserWithStatusDetails($userId: uuid!) {
  userById(id: $userId) {
    id
    email
    firstName
    lastName
    computedName
    role
    status
    isActive
    isStaff
    clerkUserId
    statusChangedAt
    statusChangedBy
    statusChangeReason
    deactivatedAt
    deactivatedBy
    createdAt
    updatedAt
  }
}

query GetCurrentUserRoleForManagement($userId: uuid!) {
  userById(id: $userId) {
    id
    role
  }
}
