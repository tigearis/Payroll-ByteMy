# Users Domain Queries
# Security Classification: CRITICAL - Employee PII and authentication data
# SOC2 Compliance: Strict access controls with audit logging

query GetUsers {
  users(where: { isActive: { _eq: true } }, order_by: { name: asc }) {
    id
    name
    email
    role
    username
    image
    isStaff
    isActive
    managerId
    clerkUserId
  }
}

query GetActiveUsers {
  users(where: { isActive: { _eq: true } }, order_by: { name: asc }) {
    ...UserBasicInfo
  }
}

query GetUserById($id: uuid!) {
  user(id: $id) {
    id
    name
    email
    role
    username
    image
    isStaff
    isActive
    managerId
    clerkUserId
    manager {
      id
      name
      email
      role
    }
  }
}

query GetUserByClerkId($clerkUserId: String!) {
  users(where: { clerkUserId: { _eq: $clerkUserId } }, limit: 1) {
    id
    name
    email
    role
    username
    image
    isStaff
    isActive
    managerId
    clerkUserId
  }
}

query GetUserByEmail($email: String!) {
  users(where: { email: { _eq: $email } }) {
    id
    name
    email
    role
    username
    image
    isStaff
    isActive
    managerId
    clerkUserId
    manager {
      id
      name
      email
      role
    }
  }
}

# Staff-specific queries (replacing old staff domain)
query GetStaffList {
  users(
    where: {
      isActive: { _eq: true }
      role: { _in: ["consultant", "manager", "org_admin"] }
    }
    order_by: { name: asc }
  ) {
    id
    name
    email
    role
    username
    image
    isStaff
    isActive
    managerId
    clerkUserId
    manager {
      id
      name
      email
      role
    }
  }
}

query GetStaffById($id: uuid!) {
  user(id: $id) {
    id
    name
    email
    role
    username
    image
    isStaff
    isActive
    clerkUserId
    createdAt
    updatedAt
    leaves {
      id
      startDate
      endDate
      leaveType
      status
      reason
    }
  }
}

query GetAllUsersList {
  users(where: { isActive: { _eq: true } }, order_by: { name: asc }) {
    id
    name
    email
    role
    username
    image
    isStaff
    isActive
    managerId
    clerkUserId
  }
}

query GetUserProfile($id: uuid!) {
  user(id: $id) {
    ...UserWithProfile
  }
}

query GetUsersWithRoles {
  users(where: { isActive: { _eq: true } }, order_by: { name: asc }) {
    ...UserRoleInfo
  }
}

query GetUserPermissions($id: uuid!) {
  user(id: $id) {
    ...UserPermissionsInfo
  }
}

query SearchUsers($searchTerm: String!) {
  users(
    where: {
      _and: [
        { isActive: { _eq: true } }
        {
          _or: [
            { name: { _ilike: $searchTerm } }
            { email: { _ilike: $searchTerm } }
            { username: { _ilike: $searchTerm } }
          ]
        }
      ]
    }
    order_by: { name: asc }
    limit: 50
  ) {
    ...UserWithProfile
  }
}

# Audit queries - limited fields for compliance
query GetUsersForAudit {
  users(order_by: { createdAt: desc }) {
    ...UserForAudit
  }
}

query GetUserStats {
  usersAggregate {
    aggregate {
      count
    }
  }
  activeUsers: usersAggregate(where: { isActive: { _eq: true } }) {
    aggregate {
      count
    }
  }
  byRole: usersAggregate {
    nodes {
      role
    }
    aggregate {
      count
    }
  }
}

# Authentication helper queries
query GetUserSessionInfo($id: uuid!) {
  user(id: $id) {
    id
    name
    email
    role
    isActive
  }
}

# Extracted from inline GraphQL operations
query GetCurrentUser($currentUserId: uuid!) {
  user(id: $currentUserId) {
    id
    name
    role
    isStaff
    isActive
    managerId
    clerkUserId
    createdAt
    updatedAt
  }
}

query GetUserRole($userId: uuid!) {
  user(id: $userId) {
    id
    role
    isStaff
    isActive
  }
}

query GetUserRoleFallback($userId: uuid!) {
  user(id: $userId) {
    id
    role
    isStaff
    isActive
    clerkUserId
  }
}

query GetUsersWithLimit($limit: Int = 10) {
  users(limit: $limit) {
    id
    name
    email
    role
    isStaff
    clerkUserId
  }
}

query GetUserProfileSettings($id: uuid!) {
  user(id: $id) {
    id
    name
    email
    role
    isStaff
    isActive
    clerkUserId
    manager {
      id
      name
      email
    }
  }
}

# API Route Queries - Migrated from inline GraphQL

query GetUsersWithFiltering(
  $limit: Int = 50
  $offset: Int = 0
  $where: users_bool_exp
) {
  users(
    limit: $limit
    offset: $offset
    where: $where
    order_by: { createdAt: desc }
  ) {
    id
    name
    email
    role
    createdAt
    updatedAt
    isStaff
    managerId
    clerkUserId
    manager {
      id
      name
      email
    }
  }
  usersAggregate(where: $where) {
    aggregate {
      count
    }
  }
}

query GetManagers {
  users(
    where: { role: { _in: ["developer", "manager"] } }
    order_by: { name: asc }
  ) {
    id
    name
    email
    role
  }
}

query GetUserRoleSecure($userId: uuid!) {
  user(id: $userId) {
    id
    role
    isStaff
    isActive
  }
}

query GetUserRoleFallbackSecure($userId: uuid!) {
  user(id: $userId) {
    id
    role
    isStaff
    isActive
    clerkUserId
  }
}

# Migrated from inline operations - Priority 1 fixes

query GetUserProfileComplete($id: uuid!) {
  user(id: $id) {
    id
    name
    email
    username
    image
    role
    isStaff
    isActive
    createdAt
    updatedAt
    clerkUserId
    manager {
      id
      name
      email
      image
    }
    directReports {
      id
      name
      email
      role
      image
    }
    primaryConsultantPayrolls {
      id
      name
      status
      client {
        name
      }
      employeeCount
    }
    backupConsultantPayrolls {
      id
      name
      status
      client {
        name
      }
    }
    managedPayrolls {
      id
      name
      status
      client {
        name
      }
    }
    leaves(order_by: { startDate: desc }, limit: 5) {
      id
      startDate
      endDate
      leaveType
      status
      reason
    }
    notesWritten(order_by: { created_at: desc }, limit: 5) {
      id
      content
      created_at
      entity_type
      entity_id
      is_important
    }
    workSchedules(order_by: { createdAt: desc }, limit: 7) {
      id
      workDay
      workHours
      createdAt
    }
  }
}

# User deletion queries - migrated from app/api/staff/delete/route.ts

query GetUserForDeletion($id: uuid!) {
  user(id: $id) {
    id
    name
    email
    role
    clerkUserId
    isStaff
    isActive
    createdAt
    manager {
      id
      name
      email
    }
  }
  
  payrolls(
    where: {
      _or: [
        { primaryConsultantUserId: { _eq: $id } }
        { backupConsultantUserId: { _eq: $id } }
        { managerUserId: { _eq: $id } }
      ]
      status: { _eq: "Active" }
    }
  ) {
    id
    name
    status
  }
  
  subordinates: users(
    where: { managerId: { _eq: $id }, isActive: { _eq: true } }
  ) {
    id
    name
    email
  }
  
  pendingLeaves: leaves(
    where: {
      _and: [
        { user: { managerId: { _eq: $id } } }
        { status: { _eq: "Pending" } }
      ]
    }
  ) {
    id
    user {
      name
    }
    leaveType
    startDate
    endDate
  }
}

query GetCurrentUserRole($clerkUserId: String!) {
  users(where: { clerkUserId: { _eq: $clerkUserId } }) {
    id
    role
    name
    email
  }
}
