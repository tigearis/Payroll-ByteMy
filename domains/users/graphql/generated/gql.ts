/* eslint-disable */
import * as types from './graphql';
import { TypedDocumentNode as DocumentNode } from '@graphql-typed-document-node/core';

/**
 * Map of all GraphQL operations in the project.
 *
 * This map has several performance disadvantages:
 * 1. It is not tree-shakeable, so it will include all operations in the project.
 * 2. It is not minifiable, so the string of a GraphQL query will be multiple times inside the bundle.
 * 3. It does not support dead code elimination, so it will add unused operations.
 *
 * Therefore it is highly recommended to use the babel or swc plugin for production.
 * Learn more about it here: https://the-guild.dev/graphql/codegen/plugins/presets/preset-client#reducing-bundle-size
 */
type Documents = {
    "fragment UserCore on users {\n  id\n  name\n  email\n  isActive\n  isStaff\n  role\n  position\n  clerkUserId\n  createdAt\n  updatedAt\n}\n\nfragment UserWithProfile on users {\n  ...UserCore\n  username\n  image\n  phone\n  address\n  bio\n}\n\nfragment UserWithRoles on users {\n  ...UserCore\n}\n\nfragment UserWithTeam on users {\n  ...UserCore\n}\n\nfragment UserWithWorkSchedule on users {\n  ...UserCore\n  userWorkSchedules {\n    id\n    workDay\n    workHours\n    adminTimeHours\n    payrollCapacityHours\n    usesDefaultAdminTime\n    createdAt\n    updatedAt\n  }\n}\n\nfragment UserWithPayrolls on users {\n  ...UserCore\n}\n\nfragment UserWithAllRelations on users {\n  ...UserWithProfile\n  userWorkSchedules {\n    id\n    workDay\n    workHours\n    adminTimeHours\n    payrollCapacityHours\n    usesDefaultAdminTime\n    createdAt\n    updatedAt\n  }\n}\n\nfragment UserBasicInfo on users {\n  id\n  name\n  email\n  role\n  position\n  username\n  image\n  isStaff\n  isActive\n  managerId\n  clerkUserId\n}\n\nfragment UserForStaff on users {\n  ...UserWithProfile\n}\n\nfragment UserForAuth on users {\n  id\n  name\n  email\n  role\n  isActive\n  clerkUserId\n}\n\nfragment UserForAudit on users {\n  id\n  name\n  email\n  role\n  isActive\n}\n\nfragment UserRoleInfo on users {\n  id\n  name\n  email\n  role\n  isActive\n}\n\nfragment UserPermissionsInfo on users {\n  id\n  name\n  role\n}\n\nfragment UserSummary on users {\n  id\n  name\n  role\n  position\n  isActive\n  isStaff\n}\n\nfragment UserListItem on users {\n  ...UserSummary\n  email\n  managerId\n  clerkUserId\n  updatedAt\n}\n\nfragment UserDashboardCard on users {\n  ...UserSummary\n  managerUser {\n    id\n    name\n  }\n}\n\nfragment UserTeamSummary on users {\n  ...UserSummary\n  email\n  managerUser {\n    id\n    name\n  }\n}\n\nfragment UserTableRow on users {\n  ...UserListItem\n  managerUser {\n    id\n    name\n  }\n}": typeof types.UserCoreFragmentDoc,
    "mutation CreateUser($object: usersInsertInput!) {\n  insertUser(object: $object) {\n    ...UserBase\n    username\n    image\n    managerId\n  }\n}\n\nmutation UpdateUser($id: uuid!, $set: usersSetInput!) {\n  updateUserById(pkColumns: {id: $id}, _set: $set) {\n    ...UserBase\n    username\n    image\n    managerId\n  }\n}\n\nmutation DeleteUser($id: uuid!) {\n  updateUserById(\n    pkColumns: {id: $id}\n    _set: {isActive: false, deactivatedAt: \"now()\"}\n  ) {\n    ...UserBase\n  }\n}\n\nmutation UpdateUserRole($id: uuid!, $role: user_role!) {\n  updateUserById(pkColumns: {id: $id}, _set: {role: $role}) {\n    ...UserBase\n  }\n}\n\nmutation BulkUpdateUsers($where: usersBoolExp!, $set: usersSetInput!) {\n  bulkUpdateUsers(where: $where, _set: $set) {\n    returning {\n      ...UserBase\n    }\n    affectedRows\n  }\n}\n\nmutation CreateUserFromClerk($clerkId: String!, $name: String!, $email: String!, $role: user_role = \"viewer\", $isStaff: Boolean = false, $managerId: uuid, $image: String) {\n  insertUser(\n    object: {clerkUserId: $clerkId, name: $name, email: $email, role: $role, isStaff: $isStaff, managerId: $managerId, image: $image}\n    onConflict: {constraint: users_clerk_user_id_key, updateColumns: [name, email, image, updatedAt]}\n  ) {\n    ...UserBase\n  }\n}\n\nmutation CreateUserByEmail($name: String!, $email: String!, $role: user_role!, $managerId: uuid, $isStaff: Boolean = true, $clerkUserId: String) {\n  insertUser(\n    object: {name: $name, email: $email, role: $role, managerId: $managerId, isStaff: $isStaff, isActive: true, clerkUserId: $clerkUserId}\n  ) {\n    ...UserBase\n  }\n}\n\nmutation UpdateUserProfile($id: uuid!, $input: usersSetInput!) {\n  updateUserById(pkColumns: {id: $id}, _set: $input) {\n    ...UserWithProfile\n  }\n}\n\nmutation DeactivateUser($id: uuid!) {\n  updateUserById(\n    pkColumns: {id: $id}\n    _set: {isActive: false, deactivatedAt: \"now()\"}\n  ) {\n    ...UserBase\n  }\n}\n\nmutation ReactivateUser($id: uuid!) {\n  updateUserById(\n    pkColumns: {id: $id}\n    _set: {isActive: true, deactivatedAt: null}\n  ) {\n    ...UserBase\n  }\n}\n\nmutation HardDeleteUser($id: uuid!) {\n  deleteUserById(id: $id) {\n    id\n    name\n    email\n  }\n}\n\nmutation UpdateStaffRole($id: uuid!, $role: user_role!) {\n  updateUserById(pkColumns: {id: $id}, _set: {role: $role}) {\n    ...UserBase\n    managerId\n  }\n}\n\nmutation UpdateUserRoleFromClerk($clerkUserId: String!, $role: user_role!) {\n  bulkUpdateUsers(where: {clerkUserId: {_eq: $clerkUserId}}, _set: {role: $role}) {\n    returning {\n      ...UserBase\n    }\n    affectedRows\n  }\n}\n\nmutation RevokeInvitation($invitationId: uuid!, $revokeReason: String!, $revokedBy: uuid!) {\n  updateUserInvitationById(\n    pkColumns: {id: $invitationId}\n    _set: {invitationStatus: \"revoked\", status: \"cancelled\", revokedAt: \"now()\", revokedBy: $revokedBy, revokeReason: $revokeReason, updatedAt: \"now()\"}\n  ) {\n    id\n    email\n    invitationStatus\n    revokedAt\n    revokeReason\n  }\n}\n\nmutation ResendInvitationEnhanced($invitationId: uuid!, $newExpiresAt: timestamptz!, $newClerkTicket: String, $newClerkInvitationId: String) {\n  updateUserInvitationById(\n    pkColumns: {id: $invitationId}\n    _set: {expiresAt: $newExpiresAt, clerkTicket: $newClerkTicket, clerkInvitationId: $newClerkInvitationId, invitationStatus: \"pending\", status: \"pending\", updatedAt: \"now()\"}\n  ) {\n    id\n    email\n    invitationStatus\n    expiresAt\n  }\n}\n\nmutation DeactivateUserWithReason($userId: uuid!, $reason: String!, $deactivatedBy: uuid!, $deactivatedByString: String!) {\n  updateUserById(\n    pkColumns: {id: $userId}\n    _set: {status: \"inactive\", isActive: false, deactivatedAt: \"now()\", deactivatedBy: $deactivatedByString, statusChangeReason: $reason, statusChangedAt: \"now()\", statusChangedBy: $deactivatedBy, updatedAt: \"now()\"}\n  ) {\n    id\n    email\n    name\n    status\n    isActive\n    deactivatedAt\n    statusChangeReason\n    statusChangedAt\n  }\n}\n\nmutation LockUserWithReason($userId: uuid!, $reason: String!, $lockedBy: uuid!) {\n  updateUserById(\n    pkColumns: {id: $userId}\n    _set: {status: \"locked\", isActive: false, statusChangeReason: $reason, statusChangedAt: \"now()\", statusChangedBy: $lockedBy, updatedAt: \"now()\"}\n  ) {\n    id\n    email\n    name\n    status\n    isActive\n    statusChangeReason\n    statusChangedAt\n  }\n}\n\nmutation UnlockUserWithReason($userId: uuid!, $reason: String!, $unlockedBy: uuid!) {\n  updateUserById(\n    pkColumns: {id: $userId}\n    _set: {status: \"active\", isActive: true, statusChangeReason: $reason, statusChangedAt: \"now()\", statusChangedBy: $unlockedBy, updatedAt: \"now()\"}\n  ) {\n    id\n    email\n    name\n    status\n    isActive\n    statusChangeReason\n    statusChangedAt\n  }\n}\n\nmutation ReactivateUserWithReason($userId: uuid!, $reason: String!, $reactivatedBy: uuid!) {\n  updateUserById(\n    pkColumns: {id: $userId}\n    _set: {status: \"active\", isActive: true, deactivatedAt: null, deactivatedBy: null, statusChangeReason: $reason, statusChangedAt: \"now()\", statusChangedBy: $reactivatedBy, updatedAt: \"now()\"}\n  ) {\n    id\n    email\n    name\n    status\n    isActive\n    statusChangeReason\n    statusChangedAt\n  }\n}": typeof types.CreateUserDocument,
    "query GetUsers($limit: Int = 50, $offset: Int = 0, $where: usersBoolExp) {\n  users(limit: $limit, offset: $offset, where: $where, orderBy: {name: ASC}) {\n    ...UserBase\n    username\n    image\n    managerId\n    managerUser {\n      id\n      name\n      email\n      role\n    }\n  }\n}\n\nquery GetStaffWithRelationsOptimized($limit: Int = 50, $offset: Int = 0, $where: usersBoolExp = {isStaff: {_eq: true}, isActive: {_eq: true}}, $orderBy: [usersOrderBy!] = [{name: ASC}]) {\n  users(limit: $limit, offset: $offset, where: $where, orderBy: $orderBy) {\n    id\n    name\n    email\n    role\n    username\n    image\n    isActive\n    isStaff\n    managerId\n    clerkUserId\n    createdAt\n    updatedAt\n    managerUser {\n      id\n      name\n      email\n      role\n      isActive\n    }\n    managedUsers(where: {isActive: {_eq: true}}) {\n      id\n      name\n      email\n      role\n      isActive\n    }\n    primaryConsultantPayrolls(\n      where: {supersededDate: {_isNull: true}}\n      limit: 5\n      orderBy: {updatedAt: DESC}\n    ) {\n      id\n      name\n      status\n      client {\n        id\n        name\n      }\n      nextPayrollDate: payrollDates(\n        where: {adjustedEftDate: {_gte: \"now()\"}}\n        orderBy: {adjustedEftDate: ASC}\n        limit: 1\n      ) {\n        adjustedEftDate\n      }\n    }\n    backupConsultantPayrolls(\n      where: {supersededDate: {_isNull: true}}\n      limit: 3\n      orderBy: {updatedAt: DESC}\n    ) {\n      id\n      name\n      status\n      client {\n        id\n        name\n      }\n    }\n    userWorkSchedules(orderBy: {workDay: ASC}) {\n      id\n      workDay\n      workHours\n      adminTimeHours\n      payrollCapacityHours\n    }\n  }\n  usersAggregate(where: $where) {\n    aggregate {\n      count\n    }\n  }\n  activeStaff: usersAggregate(\n    where: {isStaff: {_eq: true}, isActive: {_eq: true}}\n  ) {\n    aggregate {\n      count\n    }\n  }\n  managersCount: usersAggregate(\n    where: {role: {_in: [\"manager\", \"org_admin\", \"developer\"]}, isActive: {_eq: true}}\n  ) {\n    aggregate {\n      count\n    }\n  }\n}\n\nquery GetUsersForDropdownDomain {\n  users {\n    id\n    name\n    email\n    role\n  }\n}\n\nquery GetManagers {\n  users(where: {role: {_in: [\"manager\", \"org_admin\"]}, isActive: {_eq: true}}) {\n    ...UserBase\n    username\n    image\n    managerId\n  }\n}\n\nquery GetUserCount {\n  usersAggregate {\n    aggregate {\n      count\n    }\n  }\n}\n\nquery GetActiveUsers {\n  users(where: {isActive: {_eq: true}}, orderBy: {name: ASC}) {\n    ...UserBase\n  }\n}\n\nquery GetUserById($id: uuid!) {\n  userById(id: $id) {\n    id\n    name\n    email\n    role\n    username\n    image\n    isStaff\n    isActive\n    managerId\n    clerkUserId\n    managerUser {\n      id\n      name\n      email\n      role\n    }\n  }\n}\n\nquery GetStaffDetailComplete($id: uuid!) {\n  userById(id: $id) {\n    id\n    name\n    email\n    role\n    username\n    image\n    isStaff\n    isActive\n    managerId\n    clerkUserId\n    createdAt\n    updatedAt\n    managerUser {\n      id\n      name\n      email\n      role\n    }\n    managedUsers {\n      id\n      name\n      email\n      role\n      isActive\n    }\n    userSkills {\n      skillName\n      proficiencyLevel\n    }\n  }\n  userPermissions: userRoles(where: {userId: {_eq: $id}}) {\n    roleId\n    userId\n  }\n  permissionOverrides(where: {userId: {_eq: $id}}) {\n    id\n    resource\n    granted\n    reason\n    expiresAt\n    createdAt\n    createdBy\n  }\n  userActivity: auditLogs(\n    where: {userId: {_eq: $id}}\n    orderBy: {eventTime: DESC}\n    limit: 10\n  ) {\n    id\n    action\n    resourceType\n    eventTime\n    success\n  }\n  managedPayrolls: payrolls(\n    where: {_or: [{primaryConsultantUserId: {_eq: $id}}, {backupConsultantUserId: {_eq: $id}}, {managerUserId: {_eq: $id}}], supersededDate: {_isNull: true}}\n    limit: 5\n  ) {\n    id\n    name\n    status\n    client {\n      id\n      name\n    }\n  }\n}\n\nquery GetUserByClerkId($clerkUserId: String!) {\n  users(where: {clerkUserId: {_eq: $clerkUserId}}, limit: 1) {\n    id\n    name\n    email\n    role\n    username\n    image\n    isStaff\n    isActive\n    managerId\n    clerkUserId\n  }\n}\n\nquery GetUserByEmail($email: String!) {\n  users(where: {email: {_eq: $email}}) {\n    id\n    name\n    email\n    role\n    username\n    image\n    isStaff\n    isActive\n    managerId\n    clerkUserId\n    managerUser {\n      id\n      name\n      email\n      role\n    }\n  }\n}\n\nquery GetStaffList {\n  users(\n    where: {isActive: {_eq: true}, role: {_in: [\"developer\", \"org_admin\", \"manager\", \"consultant\"]}}\n    orderBy: {name: ASC}\n  ) {\n    id\n    name\n    email\n    role\n    username\n    image\n    isStaff\n    isActive\n    managerId\n    clerkUserId\n    managerUser {\n      id\n      name\n      email\n      role\n    }\n  }\n}\n\nquery GetStaffById($id: uuid!) {\n  userById(id: $id) {\n    id\n    name\n    email\n    role\n    username\n    image\n    isStaff\n    isActive\n    clerkUserId\n    createdAt\n    updatedAt\n  }\n}\n\nquery GetAllUsersList {\n  users(where: {isActive: {_eq: true}}, orderBy: {name: ASC}) {\n    id\n    name\n    email\n    role\n    username\n    image\n    isStaff\n    isActive\n    managerId\n    clerkUserId\n  }\n}\n\nquery GetUserProfile($id: uuid!) {\n  userById(id: $id) {\n    ...UserWithProfile\n  }\n}\n\nquery GetUsersWithRoles {\n  users(where: {isActive: {_eq: true}}, orderBy: {name: ASC}) {\n    ...UserRoleInfo\n  }\n}\n\nquery GetUserPermissions($id: uuid!) {\n  userById(id: $id) {\n    ...UserPermissionsInfo\n  }\n}\n\nquery SearchUsers($searchTerm: String!) {\n  users(\n    where: {_and: [{isActive: {_eq: true}}, {_or: [{name: {_ilike: $searchTerm}}, {email: {_ilike: $searchTerm}}, {username: {_ilike: $searchTerm}}]}]}\n    orderBy: {name: ASC}\n    limit: 50\n  ) {\n    ...UserWithProfile\n  }\n}\n\nquery GetUsersForAudit {\n  users(orderBy: {createdAt: DESC}) {\n    ...UserForAudit\n  }\n}\n\nquery GetUserStats {\n  usersAggregate {\n    aggregate {\n      count\n    }\n  }\n  activeUsers: usersAggregate(where: {isActive: {_eq: true}}) {\n    aggregate {\n      count\n    }\n  }\n  byRole: usersAggregate {\n    nodes {\n      role\n    }\n    aggregate {\n      count\n    }\n  }\n}\n\nquery GetUserSessionInfo($id: uuid!) {\n  userById(id: $id) {\n    id\n    name\n    email\n    role\n    isActive\n  }\n}\n\nquery GetCurrentUserDomain($currentUserId: uuid!) {\n  userById(id: $currentUserId) {\n    id\n    name\n    role\n    isStaff\n    isActive\n    managerId\n    clerkUserId\n    createdAt\n    updatedAt\n  }\n}\n\nquery GetUserRole($userId: uuid!) {\n  userById(id: $userId) {\n    id\n    role\n    isStaff\n    isActive\n  }\n}\n\nquery GetUserRoleFallback($userId: uuid!) {\n  userById(id: $userId) {\n    id\n    role\n    isStaff\n    isActive\n    clerkUserId\n  }\n}\n\nquery GetUsersWithLimit($limit: Int = 10) {\n  users(limit: $limit) {\n    id\n    name\n    email\n    role\n    isStaff\n    clerkUserId\n  }\n}\n\nquery GetUserProfileSettings($id: uuid!) {\n  userById(id: $id) {\n    id\n    name\n    email\n    role\n    isStaff\n    isActive\n    clerkUserId\n    managerUser {\n      id\n      name\n      email\n    }\n  }\n}\n\nquery GetUsersWithFiltering($limit: Int = 50, $offset: Int = 0, $where: usersBoolExp) {\n  users(limit: $limit, offset: $offset, where: $where, orderBy: {createdAt: DESC}) {\n    id\n    name\n    email\n    role\n    createdAt\n    updatedAt\n    isStaff\n    isActive\n    managerId\n    clerkUserId\n    managerUser {\n      id\n      name\n      email\n    }\n  }\n  usersAggregate(where: $where) {\n    aggregate {\n      count\n    }\n  }\n}\n\nquery GetDeveloperManagers {\n  users(where: {role: {_in: [\"developer\", \"manager\"]}}, orderBy: {name: ASC}) {\n    id\n    name\n    email\n    role\n  }\n}\n\nquery GetUserRoleSecure($userId: uuid!) {\n  userById(id: $userId) {\n    id\n    role\n    isStaff\n    isActive\n  }\n}\n\nquery GetUserRoleFallbackSecure($userId: uuid!) {\n  userById(id: $userId) {\n    id\n    role\n    isStaff\n    isActive\n    clerkUserId\n  }\n}\n\nquery GetUserProfileComplete($id: uuid!) {\n  userById(id: $id) {\n    id\n    name\n    email\n    username\n    image\n    phone\n    address\n    bio\n    role\n    isStaff\n    isActive\n    createdAt\n    updatedAt\n    clerkUserId\n    managerUser {\n      id\n      name\n      email\n      image\n    }\n    managedUsers {\n      id\n      name\n      email\n      role\n      image\n      isActive\n    }\n    primaryConsultantPayrolls {\n      id\n      name\n      status\n      client {\n        id\n        name\n      }\n      employeeCount\n    }\n    backupConsultantPayrolls {\n      id\n      name\n      status\n      client {\n        id\n        name\n      }\n    }\n    managedPayrolls {\n      id\n      name\n      status\n      client {\n        id\n        name\n      }\n    }\n    userWorkSchedules {\n      id\n      workDay\n      workHours\n      createdAt\n      updatedAt\n    }\n  }\n  userLeaves: leave(\n    where: {userId: {_eq: $id}}\n    orderBy: {startDate: DESC}\n    limit: 10\n  ) {\n    id\n    startDate\n    endDate\n    leaveType\n    status\n    reason\n  }\n}\n\nquery GetUserForDeletion($id: uuid!) {\n  userById(id: $id) {\n    id\n    name\n    email\n    role\n    clerkUserId\n    isStaff\n    isActive\n    createdAt\n    managerUser {\n      id\n      name\n      email\n    }\n  }\n  payrolls(\n    where: {_or: [{primaryConsultantUserId: {_eq: $id}}, {backupConsultantUserId: {_eq: $id}}, {managerUserId: {_eq: $id}}], status: {_eq: \"Active\"}}\n  ) {\n    id\n    name\n    status\n  }\n  subordinates: users(where: {managerId: {_eq: $id}, isActive: {_eq: true}}) {\n    id\n    name\n    email\n  }\n}\n\nquery GetCurrentUserRole($clerkUserId: String!) {\n  users(where: {clerkUserId: {_eq: $clerkUserId}}) {\n    id\n    role\n    isStaff\n    isActive\n  }\n}\n\nquery GetUsersPaginated($limit: Int = 20, $offset: Int = 0, $where: usersBoolExp = {}, $orderBy: [usersOrderBy!] = [{name: ASC}]) {\n  users(\n    limit: $limit\n    offset: $offset\n    where: {_and: [{isActive: {_eq: true}}, $where]}\n    orderBy: $orderBy\n  ) {\n    ...UserListItem\n  }\n  usersAggregate(where: {_and: [{isActive: {_eq: true}}, $where]}) {\n    aggregate {\n      count\n    }\n  }\n}\n\nquery GetAllUsersPaginated($limit: Int = 20, $offset: Int = 0, $where: usersBoolExp = {}, $orderBy: [usersOrderBy!] = [{name: ASC}]) {\n  users(limit: $limit, offset: $offset, where: $where, orderBy: $orderBy) {\n    ...UserTableRow\n  }\n  allUsersAggregate: usersAggregate(where: $where) {\n    aggregate {\n      count\n    }\n  }\n}\n\nquery GetStaffPaginated($limit: Int = 20, $offset: Int = 0, $where: usersBoolExp = {}) {\n  users(\n    limit: $limit\n    offset: $offset\n    where: {_and: [{isActive: {_eq: true}}, {role: {_in: [\"developer\", \"org_admin\", \"manager\", \"consultant\"]}}, $where]}\n    orderBy: {name: ASC}\n  ) {\n    ...UserListItem\n    createdAt\n    managerUser {\n      ...UserMinimal\n    }\n  }\n  staffAggregate: usersAggregate(\n    where: {_and: [{isActive: {_eq: true}}, {role: {_in: [\"developer\", \"org_admin\", \"manager\", \"consultant\"]}}, $where]}\n  ) {\n    aggregate {\n      count\n    }\n  }\n}\n\nquery SearchUsersPaginated($searchTerm: String!, $limit: Int = 20, $offset: Int = 0) {\n  users(\n    where: {_and: [{isActive: {_eq: true}}, {_or: [{name: {_ilike: $searchTerm}}, {email: {_ilike: $searchTerm}}, {username: {_ilike: $searchTerm}}]}]}\n    orderBy: {name: ASC}\n    limit: $limit\n    offset: $offset\n  ) {\n    ...UserListItem\n    createdAt\n    managerUser {\n      ...UserMinimal\n    }\n  }\n  searchAggregate: usersAggregate(\n    where: {_and: [{isActive: {_eq: true}}, {_or: [{name: {_ilike: $searchTerm}}, {email: {_ilike: $searchTerm}}, {username: {_ilike: $searchTerm}}]}]}\n  ) {\n    aggregate {\n      count\n    }\n  }\n}\n\nquery GetUserByIdComplete($id: uuid!) {\n  userById(id: $id) {\n    id\n    name\n    email\n    role\n    createdAt\n    updatedAt\n    isStaff\n    managerId\n    clerkUserId\n    managerUser {\n      id\n      name\n      email\n      role\n    }\n  }\n}\n\nquery GetUserByClerkIdComplete($clerkId: String!) {\n  users(where: {clerkUserId: {_eq: $clerkId}}) {\n    id\n    name\n    email\n    role\n    createdAt\n    updatedAt\n    isStaff\n    managerId\n    clerkUserId\n    managerUser {\n      id\n      name\n      email\n      role\n    }\n  }\n}\n\nquery GetUserClerkId($id: uuid!) {\n  userById(id: $id) {\n    id\n    name\n    email\n    role\n    clerkUserId\n    managerId\n  }\n}\n\nquery GetUsersQuickList {\n  users(where: {isActive: {_eq: true}}, orderBy: {name: ASC}) {\n    ...UserMinimal\n  }\n}\n\nquery GetStaffQuickList {\n  users(\n    where: {isActive: {_eq: true}, role: {_in: [\"developer\", \"org_admin\", \"manager\", \"consultant\"]}}\n    orderBy: {name: ASC}\n  ) {\n    ...UserMinimal\n  }\n}\n\nquery GetManagersQuickList {\n  users(\n    where: {isActive: {_eq: true}, role: {_in: [\"manager\", \"org_admin\"]}}\n    orderBy: {name: ASC}\n  ) {\n    ...UserMinimal\n  }\n}\n\nquery GetUserCard($id: uuid!) {\n  userById(id: $id) {\n    ...UserSummary\n    email\n    managerUser {\n      ...UserMinimal\n    }\n  }\n}\n\nquery GetUserAssignmentData($id: uuid!) {\n  userById(id: $id) {\n    ...UserSummary\n    email\n    activePayrollCount: primaryConsultantPayrollsAggregate(\n      where: {supersededDate: {_isNull: true}}\n    ) {\n      aggregate {\n        count\n      }\n    }\n    backupPayrollCount: backupConsultantPayrollsAggregate(\n      where: {supersededDate: {_isNull: true}}\n    ) {\n      aggregate {\n        count\n      }\n    }\n  }\n}\n\nquery GetUserWorkload($id: uuid!) {\n  userById(id: $id) {\n    ...UserSummary\n    primaryPayrolls: primaryConsultantPayrolls(\n      where: {supersededDate: {_isNull: true}}\n      limit: 10\n    ) {\n      id\n      name\n      status\n      client {\n        name\n      }\n    }\n    backupPayrolls: backupConsultantPayrolls(\n      where: {supersededDate: {_isNull: true}}\n      limit: 10\n    ) {\n      id\n      name\n      status\n      client {\n        name\n      }\n    }\n  }\n}\n\nquery GetInvitationsWithStatus($statuses: [invitation_status_enum!], $limit: Int = 50, $offset: Int = 0) {\n  userInvitations(\n    where: {invitationStatus: {_in: $statuses}}\n    orderBy: {createdAt: DESC}\n    limit: $limit\n    offset: $offset\n  ) {\n    id\n    email\n    firstName\n    lastName\n    invitedRole\n    invitationStatus\n    invitedAt\n    expiresAt\n    revokedAt\n    revokeReason\n    invitedByUser {\n      id\n      name\n      email\n    }\n  }\n  userInvitationsAggregate(where: {invitationStatus: {_in: $statuses}}) {\n    aggregate {\n      count\n    }\n  }\n}\n\nquery GetInvitationDashboardStats {\n  pending: userInvitationsAggregate(\n    where: {invitationStatus: {_eq: \"pending\"}, expiresAt: {_gt: \"now()\"}}\n  ) {\n    aggregate {\n      count\n    }\n  }\n  expired: userInvitationsAggregate(where: {invitationStatus: {_eq: \"expired\"}}) {\n    aggregate {\n      count\n    }\n  }\n  accepted: userInvitationsAggregate(where: {invitationStatus: {_eq: \"accepted\"}}) {\n    aggregate {\n      count\n    }\n  }\n  revoked: userInvitationsAggregate(where: {invitationStatus: {_eq: \"revoked\"}}) {\n    aggregate {\n      count\n    }\n  }\n  expiringSoon: userInvitationsAggregate(\n    where: {invitationStatus: {_eq: \"pending\"}, expiresAt: {_gt: \"now()\", _lt: \"now() + interval '7 days'\"}}\n  ) {\n    aggregate {\n      count\n    }\n  }\n  recentInvitations: userInvitations(\n    where: {createdAt: {_gte: \"now() - interval '30 days'\"}}\n    orderBy: {createdAt: DESC}\n    limit: 10\n  ) {\n    id\n    email\n    firstName\n    lastName\n    invitationStatus\n    createdAt\n    expiresAt\n    invitedByUser {\n      name\n      email\n    }\n  }\n  byStatus: userInvitationsAggregate {\n    aggregate {\n      count\n    }\n  }\n}\n\nquery GetExpiringInvitations($daysUntilExpiry: interval!) {\n  userInvitations(\n    where: {invitationStatus: {_eq: \"pending\"}, expiresAt: {_gt: \"now()\", _lt: \"now() + $daysUntilExpiry\"}}\n    orderBy: {expiresAt: ASC}\n  ) {\n    id\n    email\n    firstName\n    lastName\n    expiresAt\n    invitedByUser {\n      name\n      email\n    }\n  }\n}\n\nquery GetUsersByStatus($statuses: [user_status_enum!], $limit: Int = 50, $offset: Int = 0) {\n  users(\n    where: {status: {_in: $statuses}}\n    orderBy: {updatedAt: DESC}\n    limit: $limit\n    offset: $offset\n  ) {\n    id\n    email\n    name\n    role\n    status\n    isActive\n    isStaff\n    statusChangedAt\n    statusChangeReason\n    deactivatedAt\n    createdAt\n  }\n  usersAggregate(where: {status: {_in: $statuses}}) {\n    aggregate {\n      count\n    }\n  }\n}\n\nquery GetUserWithStatusDetails($userId: uuid!) {\n  userById(id: $userId) {\n    id\n    email\n    name\n    role\n    status\n    isActive\n    isStaff\n    clerkUserId\n    statusChangedAt\n    statusChangedBy\n    statusChangeReason\n    deactivatedAt\n    deactivatedBy\n    createdAt\n    updatedAt\n  }\n}\n\nquery GetCurrentUserRoleForManagement($userId: uuid!) {\n  userById(id: $userId) {\n    id\n    role\n  }\n}": typeof types.GetUsersDocument,
    "subscription UserUpdates($userId: uuid!) {\n  userById(id: $userId) {\n    ...UserProfile\n    updatedAt\n  }\n}\n\nsubscription ActiveUsers {\n  users(where: {isActive: {_eq: true}}) {\n    id\n    name\n    email\n    updatedAt\n  }\n}\n\nsubscription UserAuthEvents($userId: uuid!) {\n  authEvents(where: {userId: {_eq: $userId}}) {\n    id\n    createdAt\n    ipAddress\n    userAgent\n  }\n}\n\nsubscription PermissionOverrideChanges($userId: uuid!) {\n  permissionOverrides(where: {userId: {_eq: $userId}}, orderBy: {createdAt: DESC}) {\n    id\n    resource\n    operation\n    granted\n    reason\n    expiresAt\n    createdAt\n    createdBy\n    createdByUser {\n      ...UserMinimal\n    }\n  }\n}": typeof types.UserUpdatesDocument,
    "fragment UserMinimal on users {\n  id\n  name\n  email\n}\n\nfragment UserCoreShared on users {\n  ...UserMinimal\n  role\n  isActive\n}\n\nfragment UserBasic on users {\n  ...UserCoreShared\n  createdAt\n  updatedAt\n}\n\nfragment UserBase on users {\n  ...UserBasic\n}\n\nfragment UserWithRole on users {\n  ...UserBasic\n  username\n  isStaff\n}\n\nfragment UserProfile on users {\n  ...UserWithRole\n  clerkUserId\n  image\n  managerId\n  deactivatedAt\n  deactivatedBy\n  managerUser {\n    ...UserMinimal\n  }\n}\n\nfragment UserSearchResult on users {\n  ...UserCoreShared\n  username\n  isStaff\n}\n\nfragment ClientMinimal on clients {\n  id\n  name\n}\n\nfragment ClientBase on clients {\n  id\n  name\n  active\n  contactEmail\n  contactPerson\n  contactPhone\n  createdAt\n}\n\nfragment ClientWithStats on clients {\n  ...ClientBase\n  currentEmployeeCount: payrollsAggregate(\n    where: {supersededDate: {_isNull: true}}\n  ) {\n    aggregate {\n      sum {\n        employeeCount\n      }\n    }\n  }\n  activePayrollCount: payrollsAggregate(\n    where: {supersededDate: {_isNull: true}, status: {_eq: \"Active\"}}\n  ) {\n    aggregate {\n      count\n    }\n  }\n}\n\nfragment ClientListBase on clients {\n  ...ClientBase\n  payrollCount: payrollsAggregate(where: {supersededDate: {_isNull: true}}) {\n    aggregate {\n      count\n    }\n  }\n}\n\nfragment PayrollMinimal on payrolls {\n  id\n  name\n  employeeCount\n  status\n}\n\nfragment PayrollBase on payrolls {\n  id\n  name\n  employeeCount\n  status\n  payrollSystem\n  processingTime\n  processingDaysBeforeEft\n  versionNumber\n  createdAt\n  updatedAt\n}\n\nfragment PayrollWithClient on payrolls {\n  ...PayrollBase\n  clientId\n  client {\n    id\n    name\n    active\n  }\n}\n\nfragment PayrollListItem on payrolls {\n  ...PayrollWithClient\n  primaryConsultantUserId\n  backupConsultantUserId\n  managerUserId\n  createdByUserId\n  primaryConsultant {\n    ...UserMinimal\n  }\n  backupConsultant {\n    ...UserMinimal\n  }\n  manager {\n    ...UserMinimal\n  }\n}\n\nfragment PayrollWithDates on payrolls {\n  ...PayrollBase\n  goLiveDate\n  payrollDates(orderBy: {originalEftDate: ASC}) {\n    id\n    originalEftDate\n    adjustedEftDate\n    notes\n  }\n}\n\nfragment PayrollFullDetail on payrolls {\n  ...PayrollWithDates\n  ...PayrollWithClient\n  dateTypeId\n  cycleId\n  dateValue\n  versionReason\n  supersededDate\n  parentPayrollId\n  parentPayroll {\n    id\n    versionNumber\n  }\n  childPayrolls(orderBy: {versionNumber: DESC}) {\n    id\n    versionNumber\n    versionReason\n    createdAt\n  }\n  primaryConsultant {\n    ...UserMinimal\n  }\n  backupConsultant {\n    ...UserMinimal\n  }\n  manager {\n    ...UserMinimal\n  }\n}\n\nfragment NoteWithAuthor on notes {\n  id\n  content\n  isImportant\n  createdAt\n  entityId\n  entityType\n  authorUser {\n    ...UserMinimal\n  }\n}\n\nfragment PermissionBase on permissions {\n  id\n  resourceId\n  description\n  legacyPermissionName\n  action\n}\n\nfragment RoleWithPermissions on roles {\n  id\n  name\n  displayName\n  description\n  isSystemRole\n  priority\n  assignedPermissions {\n    grantedPermission {\n      ...PermissionBase\n    }\n  }\n}\n\nfragment AuditLogEntry on auditLogs {\n  id\n  userId\n  userEmail\n  userRole\n  action\n  resourceType\n  resourceId\n  eventTime\n  success\n  errorMessage\n  ipAddress\n  userAgent\n  requestId\n  sessionId\n  metadata\n  oldValues\n  newValues\n  createdAt\n}\n\nfragment AuthEvent on authEvents {\n  id\n  userId\n  userEmail\n  eventType\n  eventTime\n  success\n  failureReason\n  ipAddress\n  userAgent\n  metadata\n}\n\nfragment DataAccessLog on dataAccessLogs {\n  id\n  userId\n  resourceType\n  resourceId\n  accessType\n  accessedAt\n  dataClassification\n  fieldsAccessed\n  rowCount\n  ipAddress\n  metadata\n}\n\nfragment PermissionChange on permissionChanges {\n  id\n  changedAt\n  changedByUserId\n  targetUserId\n  targetRoleId\n  changeType\n  permissionType\n  oldPermissions\n  newPermissions\n  reason\n  approvedByUserId\n}\n\nfragment PayrollDateInfo on payrollDates {\n  id\n  originalEftDate\n  adjustedEftDate\n  notes\n  createdAt\n}\n\nfragment PermissionOverrideInfo on permissionOverrides {\n  id\n  userId\n  role\n  resource\n  operation\n  granted\n  reason\n  conditions\n  expiresAt\n  createdBy\n  createdAt\n}": typeof types.UserMinimalFragmentDoc,
    "mutation LogAuditEvent($input: auditLogsInsertInput!) {\n  insertAuditLogsOne: insertAuditLog(object: $input) {\n    id\n    eventTime\n  }\n}\n\nmutation RefreshData {\n  __typename\n}": typeof types.LogAuditEventDocument,
    "query GetDashboardMetrics($userId: uuid!) {\n  clientsAggregate(where: {active: {_eq: true}}) {\n    aggregate {\n      count\n    }\n  }\n  activePayrollsAggregate: payrollsAggregate(\n    where: {supersededDate: {_isNull: true}, status: {_nin: [\"Completed\", \"Failed\"]}}\n  ) {\n    aggregate {\n      count\n    }\n  }\n  totalEmployeesAggregate: payrollsAggregate(\n    where: {supersededDate: {_isNull: true}}\n  ) {\n    aggregate {\n      sum {\n        employeeCount\n      }\n    }\n  }\n  upcomingPayrolls: payrolls(\n    where: {supersededDate: {_isNull: true}, status: {_nin: [\"Completed\", \"Failed\", \"Cancelled\"]}}\n    orderBy: {updatedAt: DESC}\n    limit: 5\n  ) {\n    ...PayrollMinimal\n    client {\n      ...ClientMinimal\n    }\n  }\n}\n\nquery GetDashboardStatsOptimized($limit: Int = 10) {\n  clientsAggregate {\n    aggregate {\n      count\n    }\n  }\n  totalPayrolls: payrollsAggregate(where: {supersededDate: {_isNull: true}}) {\n    aggregate {\n      count\n    }\n  }\n  activePayrolls: payrollsAggregate(\n    where: {supersededDate: {_isNull: true}, status: {_eq: \"Active\"}}\n  ) {\n    aggregate {\n      count\n    }\n  }\n  upcomingPayrolls: payrolls(\n    where: {supersededDate: {_isNull: true}, status: {_eq: \"Active\"}}\n    orderBy: {updatedAt: DESC}\n    limit: $limit\n  ) {\n    id\n    name\n    status\n    client {\n      id\n      name\n    }\n  }\n}\n\nquery GetClientsDashboardStats {\n  activeClientsCount: clientsAggregate(where: {active: {_eq: true}}) {\n    aggregate {\n      count\n    }\n  }\n  totalPayrollsCount: payrollsAggregate(where: {supersededDate: {_isNull: true}}) {\n    aggregate {\n      count\n    }\n  }\n  totalEmployeesSum: payrollsAggregate(where: {supersededDate: {_isNull: true}}) {\n    aggregate {\n      sum {\n        employeeCount\n      }\n    }\n  }\n  clientsNeedingAttention: clients(\n    where: {active: {_eq: true}, _not: {payrolls: {supersededDate: {_isNull: true}}}}\n  ) {\n    ...ClientMinimal\n  }\n}\n\nquery GetCurrentUser($userId: uuid!) {\n  user: userById(id: $userId) {\n    ...UserProfile\n  }\n}\n\nquery GetUsersForDropdown($role: user_role) {\n  users(where: {isActive: {_eq: true}, role: {_eq: $role}}, orderBy: {name: ASC}) {\n    ...UserMinimal\n  }\n}\n\nquery GetSystemHealth {\n  databaseHealth: users(limit: 1) {\n    id\n  }\n  recentActivity: auditLogsAggregate(\n    where: {eventTime: {_gte: \"now() - interval '1 hour'\"}}\n  ) {\n    aggregate {\n      count\n    }\n  }\n}\n\nquery GlobalSearch($searchTerm: String!) {\n  clients(\n    where: {_or: [{name: {_ilike: $searchTerm}}, {contactEmail: {_ilike: $searchTerm}}]}\n    limit: 5\n  ) {\n    ...ClientMinimal\n  }\n  users(\n    where: {_or: [{name: {_ilike: $searchTerm}}, {email: {_ilike: $searchTerm}}]}\n    limit: 5\n  ) {\n    ...UserMinimal\n  }\n  payrolls(\n    where: {client: {name: {_ilike: $searchTerm}}, supersededDate: {_isNull: true}}\n    limit: 5\n  ) {\n    ...PayrollMinimal\n    client {\n      ...ClientMinimal\n    }\n  }\n}": typeof types.GetDashboardMetricsDocument,
    "subscription RecentActivity($resourceTypes: [String!]) {\n  auditLogs(\n    where: {resourceType: {_in: $resourceTypes}, eventTime: {_gte: \"now() - interval '5 minutes'\"}}\n    orderBy: {eventTime: DESC}\n    limit: 20\n  ) {\n    ...AuditLogEntry\n  }\n}\n\nsubscription AuthenticationEvents($userId: uuid) {\n  authEvents(\n    where: {userId: {_eq: $userId}, eventTime: {_gte: \"now() - interval '10 minutes'\"}}\n    orderBy: {eventTime: DESC}\n  ) {\n    ...AuthEvent\n  }\n}\n\nsubscription SensitiveDataAccess($resourceTypes: [String!]!) {\n  dataAccessLogs(\n    where: {resourceType: {_in: $resourceTypes}, accessedAt: {_gte: \"now() - interval '10 minutes'\"}}\n    orderBy: {accessedAt: DESC}\n  ) {\n    ...DataAccessLog\n  }\n}\n\nsubscription PermissionChangeStream {\n  permissionChanges(orderBy: {changedAt: DESC}, limit: 10) {\n    ...PermissionChange\n  }\n}": typeof types.RecentActivityDocument,
};
const documents: Documents = {
    "fragment UserCore on users {\n  id\n  name\n  email\n  isActive\n  isStaff\n  role\n  position\n  clerkUserId\n  createdAt\n  updatedAt\n}\n\nfragment UserWithProfile on users {\n  ...UserCore\n  username\n  image\n  phone\n  address\n  bio\n}\n\nfragment UserWithRoles on users {\n  ...UserCore\n}\n\nfragment UserWithTeam on users {\n  ...UserCore\n}\n\nfragment UserWithWorkSchedule on users {\n  ...UserCore\n  userWorkSchedules {\n    id\n    workDay\n    workHours\n    adminTimeHours\n    payrollCapacityHours\n    usesDefaultAdminTime\n    createdAt\n    updatedAt\n  }\n}\n\nfragment UserWithPayrolls on users {\n  ...UserCore\n}\n\nfragment UserWithAllRelations on users {\n  ...UserWithProfile\n  userWorkSchedules {\n    id\n    workDay\n    workHours\n    adminTimeHours\n    payrollCapacityHours\n    usesDefaultAdminTime\n    createdAt\n    updatedAt\n  }\n}\n\nfragment UserBasicInfo on users {\n  id\n  name\n  email\n  role\n  position\n  username\n  image\n  isStaff\n  isActive\n  managerId\n  clerkUserId\n}\n\nfragment UserForStaff on users {\n  ...UserWithProfile\n}\n\nfragment UserForAuth on users {\n  id\n  name\n  email\n  role\n  isActive\n  clerkUserId\n}\n\nfragment UserForAudit on users {\n  id\n  name\n  email\n  role\n  isActive\n}\n\nfragment UserRoleInfo on users {\n  id\n  name\n  email\n  role\n  isActive\n}\n\nfragment UserPermissionsInfo on users {\n  id\n  name\n  role\n}\n\nfragment UserSummary on users {\n  id\n  name\n  role\n  position\n  isActive\n  isStaff\n}\n\nfragment UserListItem on users {\n  ...UserSummary\n  email\n  managerId\n  clerkUserId\n  updatedAt\n}\n\nfragment UserDashboardCard on users {\n  ...UserSummary\n  managerUser {\n    id\n    name\n  }\n}\n\nfragment UserTeamSummary on users {\n  ...UserSummary\n  email\n  managerUser {\n    id\n    name\n  }\n}\n\nfragment UserTableRow on users {\n  ...UserListItem\n  managerUser {\n    id\n    name\n  }\n}": types.UserCoreFragmentDoc,
    "mutation CreateUser($object: usersInsertInput!) {\n  insertUser(object: $object) {\n    ...UserBase\n    username\n    image\n    managerId\n  }\n}\n\nmutation UpdateUser($id: uuid!, $set: usersSetInput!) {\n  updateUserById(pkColumns: {id: $id}, _set: $set) {\n    ...UserBase\n    username\n    image\n    managerId\n  }\n}\n\nmutation DeleteUser($id: uuid!) {\n  updateUserById(\n    pkColumns: {id: $id}\n    _set: {isActive: false, deactivatedAt: \"now()\"}\n  ) {\n    ...UserBase\n  }\n}\n\nmutation UpdateUserRole($id: uuid!, $role: user_role!) {\n  updateUserById(pkColumns: {id: $id}, _set: {role: $role}) {\n    ...UserBase\n  }\n}\n\nmutation BulkUpdateUsers($where: usersBoolExp!, $set: usersSetInput!) {\n  bulkUpdateUsers(where: $where, _set: $set) {\n    returning {\n      ...UserBase\n    }\n    affectedRows\n  }\n}\n\nmutation CreateUserFromClerk($clerkId: String!, $name: String!, $email: String!, $role: user_role = \"viewer\", $isStaff: Boolean = false, $managerId: uuid, $image: String) {\n  insertUser(\n    object: {clerkUserId: $clerkId, name: $name, email: $email, role: $role, isStaff: $isStaff, managerId: $managerId, image: $image}\n    onConflict: {constraint: users_clerk_user_id_key, updateColumns: [name, email, image, updatedAt]}\n  ) {\n    ...UserBase\n  }\n}\n\nmutation CreateUserByEmail($name: String!, $email: String!, $role: user_role!, $managerId: uuid, $isStaff: Boolean = true, $clerkUserId: String) {\n  insertUser(\n    object: {name: $name, email: $email, role: $role, managerId: $managerId, isStaff: $isStaff, isActive: true, clerkUserId: $clerkUserId}\n  ) {\n    ...UserBase\n  }\n}\n\nmutation UpdateUserProfile($id: uuid!, $input: usersSetInput!) {\n  updateUserById(pkColumns: {id: $id}, _set: $input) {\n    ...UserWithProfile\n  }\n}\n\nmutation DeactivateUser($id: uuid!) {\n  updateUserById(\n    pkColumns: {id: $id}\n    _set: {isActive: false, deactivatedAt: \"now()\"}\n  ) {\n    ...UserBase\n  }\n}\n\nmutation ReactivateUser($id: uuid!) {\n  updateUserById(\n    pkColumns: {id: $id}\n    _set: {isActive: true, deactivatedAt: null}\n  ) {\n    ...UserBase\n  }\n}\n\nmutation HardDeleteUser($id: uuid!) {\n  deleteUserById(id: $id) {\n    id\n    name\n    email\n  }\n}\n\nmutation UpdateStaffRole($id: uuid!, $role: user_role!) {\n  updateUserById(pkColumns: {id: $id}, _set: {role: $role}) {\n    ...UserBase\n    managerId\n  }\n}\n\nmutation UpdateUserRoleFromClerk($clerkUserId: String!, $role: user_role!) {\n  bulkUpdateUsers(where: {clerkUserId: {_eq: $clerkUserId}}, _set: {role: $role}) {\n    returning {\n      ...UserBase\n    }\n    affectedRows\n  }\n}\n\nmutation RevokeInvitation($invitationId: uuid!, $revokeReason: String!, $revokedBy: uuid!) {\n  updateUserInvitationById(\n    pkColumns: {id: $invitationId}\n    _set: {invitationStatus: \"revoked\", status: \"cancelled\", revokedAt: \"now()\", revokedBy: $revokedBy, revokeReason: $revokeReason, updatedAt: \"now()\"}\n  ) {\n    id\n    email\n    invitationStatus\n    revokedAt\n    revokeReason\n  }\n}\n\nmutation ResendInvitationEnhanced($invitationId: uuid!, $newExpiresAt: timestamptz!, $newClerkTicket: String, $newClerkInvitationId: String) {\n  updateUserInvitationById(\n    pkColumns: {id: $invitationId}\n    _set: {expiresAt: $newExpiresAt, clerkTicket: $newClerkTicket, clerkInvitationId: $newClerkInvitationId, invitationStatus: \"pending\", status: \"pending\", updatedAt: \"now()\"}\n  ) {\n    id\n    email\n    invitationStatus\n    expiresAt\n  }\n}\n\nmutation DeactivateUserWithReason($userId: uuid!, $reason: String!, $deactivatedBy: uuid!, $deactivatedByString: String!) {\n  updateUserById(\n    pkColumns: {id: $userId}\n    _set: {status: \"inactive\", isActive: false, deactivatedAt: \"now()\", deactivatedBy: $deactivatedByString, statusChangeReason: $reason, statusChangedAt: \"now()\", statusChangedBy: $deactivatedBy, updatedAt: \"now()\"}\n  ) {\n    id\n    email\n    name\n    status\n    isActive\n    deactivatedAt\n    statusChangeReason\n    statusChangedAt\n  }\n}\n\nmutation LockUserWithReason($userId: uuid!, $reason: String!, $lockedBy: uuid!) {\n  updateUserById(\n    pkColumns: {id: $userId}\n    _set: {status: \"locked\", isActive: false, statusChangeReason: $reason, statusChangedAt: \"now()\", statusChangedBy: $lockedBy, updatedAt: \"now()\"}\n  ) {\n    id\n    email\n    name\n    status\n    isActive\n    statusChangeReason\n    statusChangedAt\n  }\n}\n\nmutation UnlockUserWithReason($userId: uuid!, $reason: String!, $unlockedBy: uuid!) {\n  updateUserById(\n    pkColumns: {id: $userId}\n    _set: {status: \"active\", isActive: true, statusChangeReason: $reason, statusChangedAt: \"now()\", statusChangedBy: $unlockedBy, updatedAt: \"now()\"}\n  ) {\n    id\n    email\n    name\n    status\n    isActive\n    statusChangeReason\n    statusChangedAt\n  }\n}\n\nmutation ReactivateUserWithReason($userId: uuid!, $reason: String!, $reactivatedBy: uuid!) {\n  updateUserById(\n    pkColumns: {id: $userId}\n    _set: {status: \"active\", isActive: true, deactivatedAt: null, deactivatedBy: null, statusChangeReason: $reason, statusChangedAt: \"now()\", statusChangedBy: $reactivatedBy, updatedAt: \"now()\"}\n  ) {\n    id\n    email\n    name\n    status\n    isActive\n    statusChangeReason\n    statusChangedAt\n  }\n}": types.CreateUserDocument,
    "query GetUsers($limit: Int = 50, $offset: Int = 0, $where: usersBoolExp) {\n  users(limit: $limit, offset: $offset, where: $where, orderBy: {name: ASC}) {\n    ...UserBase\n    username\n    image\n    managerId\n    managerUser {\n      id\n      name\n      email\n      role\n    }\n  }\n}\n\nquery GetStaffWithRelationsOptimized($limit: Int = 50, $offset: Int = 0, $where: usersBoolExp = {isStaff: {_eq: true}, isActive: {_eq: true}}, $orderBy: [usersOrderBy!] = [{name: ASC}]) {\n  users(limit: $limit, offset: $offset, where: $where, orderBy: $orderBy) {\n    id\n    name\n    email\n    role\n    username\n    image\n    isActive\n    isStaff\n    managerId\n    clerkUserId\n    createdAt\n    updatedAt\n    managerUser {\n      id\n      name\n      email\n      role\n      isActive\n    }\n    managedUsers(where: {isActive: {_eq: true}}) {\n      id\n      name\n      email\n      role\n      isActive\n    }\n    primaryConsultantPayrolls(\n      where: {supersededDate: {_isNull: true}}\n      limit: 5\n      orderBy: {updatedAt: DESC}\n    ) {\n      id\n      name\n      status\n      client {\n        id\n        name\n      }\n      nextPayrollDate: payrollDates(\n        where: {adjustedEftDate: {_gte: \"now()\"}}\n        orderBy: {adjustedEftDate: ASC}\n        limit: 1\n      ) {\n        adjustedEftDate\n      }\n    }\n    backupConsultantPayrolls(\n      where: {supersededDate: {_isNull: true}}\n      limit: 3\n      orderBy: {updatedAt: DESC}\n    ) {\n      id\n      name\n      status\n      client {\n        id\n        name\n      }\n    }\n    userWorkSchedules(orderBy: {workDay: ASC}) {\n      id\n      workDay\n      workHours\n      adminTimeHours\n      payrollCapacityHours\n    }\n  }\n  usersAggregate(where: $where) {\n    aggregate {\n      count\n    }\n  }\n  activeStaff: usersAggregate(\n    where: {isStaff: {_eq: true}, isActive: {_eq: true}}\n  ) {\n    aggregate {\n      count\n    }\n  }\n  managersCount: usersAggregate(\n    where: {role: {_in: [\"manager\", \"org_admin\", \"developer\"]}, isActive: {_eq: true}}\n  ) {\n    aggregate {\n      count\n    }\n  }\n}\n\nquery GetUsersForDropdownDomain {\n  users {\n    id\n    name\n    email\n    role\n  }\n}\n\nquery GetManagers {\n  users(where: {role: {_in: [\"manager\", \"org_admin\"]}, isActive: {_eq: true}}) {\n    ...UserBase\n    username\n    image\n    managerId\n  }\n}\n\nquery GetUserCount {\n  usersAggregate {\n    aggregate {\n      count\n    }\n  }\n}\n\nquery GetActiveUsers {\n  users(where: {isActive: {_eq: true}}, orderBy: {name: ASC}) {\n    ...UserBase\n  }\n}\n\nquery GetUserById($id: uuid!) {\n  userById(id: $id) {\n    id\n    name\n    email\n    role\n    username\n    image\n    isStaff\n    isActive\n    managerId\n    clerkUserId\n    managerUser {\n      id\n      name\n      email\n      role\n    }\n  }\n}\n\nquery GetStaffDetailComplete($id: uuid!) {\n  userById(id: $id) {\n    id\n    name\n    email\n    role\n    username\n    image\n    isStaff\n    isActive\n    managerId\n    clerkUserId\n    createdAt\n    updatedAt\n    managerUser {\n      id\n      name\n      email\n      role\n    }\n    managedUsers {\n      id\n      name\n      email\n      role\n      isActive\n    }\n    userSkills {\n      skillName\n      proficiencyLevel\n    }\n  }\n  userPermissions: userRoles(where: {userId: {_eq: $id}}) {\n    roleId\n    userId\n  }\n  permissionOverrides(where: {userId: {_eq: $id}}) {\n    id\n    resource\n    granted\n    reason\n    expiresAt\n    createdAt\n    createdBy\n  }\n  userActivity: auditLogs(\n    where: {userId: {_eq: $id}}\n    orderBy: {eventTime: DESC}\n    limit: 10\n  ) {\n    id\n    action\n    resourceType\n    eventTime\n    success\n  }\n  managedPayrolls: payrolls(\n    where: {_or: [{primaryConsultantUserId: {_eq: $id}}, {backupConsultantUserId: {_eq: $id}}, {managerUserId: {_eq: $id}}], supersededDate: {_isNull: true}}\n    limit: 5\n  ) {\n    id\n    name\n    status\n    client {\n      id\n      name\n    }\n  }\n}\n\nquery GetUserByClerkId($clerkUserId: String!) {\n  users(where: {clerkUserId: {_eq: $clerkUserId}}, limit: 1) {\n    id\n    name\n    email\n    role\n    username\n    image\n    isStaff\n    isActive\n    managerId\n    clerkUserId\n  }\n}\n\nquery GetUserByEmail($email: String!) {\n  users(where: {email: {_eq: $email}}) {\n    id\n    name\n    email\n    role\n    username\n    image\n    isStaff\n    isActive\n    managerId\n    clerkUserId\n    managerUser {\n      id\n      name\n      email\n      role\n    }\n  }\n}\n\nquery GetStaffList {\n  users(\n    where: {isActive: {_eq: true}, role: {_in: [\"developer\", \"org_admin\", \"manager\", \"consultant\"]}}\n    orderBy: {name: ASC}\n  ) {\n    id\n    name\n    email\n    role\n    username\n    image\n    isStaff\n    isActive\n    managerId\n    clerkUserId\n    managerUser {\n      id\n      name\n      email\n      role\n    }\n  }\n}\n\nquery GetStaffById($id: uuid!) {\n  userById(id: $id) {\n    id\n    name\n    email\n    role\n    username\n    image\n    isStaff\n    isActive\n    clerkUserId\n    createdAt\n    updatedAt\n  }\n}\n\nquery GetAllUsersList {\n  users(where: {isActive: {_eq: true}}, orderBy: {name: ASC}) {\n    id\n    name\n    email\n    role\n    username\n    image\n    isStaff\n    isActive\n    managerId\n    clerkUserId\n  }\n}\n\nquery GetUserProfile($id: uuid!) {\n  userById(id: $id) {\n    ...UserWithProfile\n  }\n}\n\nquery GetUsersWithRoles {\n  users(where: {isActive: {_eq: true}}, orderBy: {name: ASC}) {\n    ...UserRoleInfo\n  }\n}\n\nquery GetUserPermissions($id: uuid!) {\n  userById(id: $id) {\n    ...UserPermissionsInfo\n  }\n}\n\nquery SearchUsers($searchTerm: String!) {\n  users(\n    where: {_and: [{isActive: {_eq: true}}, {_or: [{name: {_ilike: $searchTerm}}, {email: {_ilike: $searchTerm}}, {username: {_ilike: $searchTerm}}]}]}\n    orderBy: {name: ASC}\n    limit: 50\n  ) {\n    ...UserWithProfile\n  }\n}\n\nquery GetUsersForAudit {\n  users(orderBy: {createdAt: DESC}) {\n    ...UserForAudit\n  }\n}\n\nquery GetUserStats {\n  usersAggregate {\n    aggregate {\n      count\n    }\n  }\n  activeUsers: usersAggregate(where: {isActive: {_eq: true}}) {\n    aggregate {\n      count\n    }\n  }\n  byRole: usersAggregate {\n    nodes {\n      role\n    }\n    aggregate {\n      count\n    }\n  }\n}\n\nquery GetUserSessionInfo($id: uuid!) {\n  userById(id: $id) {\n    id\n    name\n    email\n    role\n    isActive\n  }\n}\n\nquery GetCurrentUserDomain($currentUserId: uuid!) {\n  userById(id: $currentUserId) {\n    id\n    name\n    role\n    isStaff\n    isActive\n    managerId\n    clerkUserId\n    createdAt\n    updatedAt\n  }\n}\n\nquery GetUserRole($userId: uuid!) {\n  userById(id: $userId) {\n    id\n    role\n    isStaff\n    isActive\n  }\n}\n\nquery GetUserRoleFallback($userId: uuid!) {\n  userById(id: $userId) {\n    id\n    role\n    isStaff\n    isActive\n    clerkUserId\n  }\n}\n\nquery GetUsersWithLimit($limit: Int = 10) {\n  users(limit: $limit) {\n    id\n    name\n    email\n    role\n    isStaff\n    clerkUserId\n  }\n}\n\nquery GetUserProfileSettings($id: uuid!) {\n  userById(id: $id) {\n    id\n    name\n    email\n    role\n    isStaff\n    isActive\n    clerkUserId\n    managerUser {\n      id\n      name\n      email\n    }\n  }\n}\n\nquery GetUsersWithFiltering($limit: Int = 50, $offset: Int = 0, $where: usersBoolExp) {\n  users(limit: $limit, offset: $offset, where: $where, orderBy: {createdAt: DESC}) {\n    id\n    name\n    email\n    role\n    createdAt\n    updatedAt\n    isStaff\n    isActive\n    managerId\n    clerkUserId\n    managerUser {\n      id\n      name\n      email\n    }\n  }\n  usersAggregate(where: $where) {\n    aggregate {\n      count\n    }\n  }\n}\n\nquery GetDeveloperManagers {\n  users(where: {role: {_in: [\"developer\", \"manager\"]}}, orderBy: {name: ASC}) {\n    id\n    name\n    email\n    role\n  }\n}\n\nquery GetUserRoleSecure($userId: uuid!) {\n  userById(id: $userId) {\n    id\n    role\n    isStaff\n    isActive\n  }\n}\n\nquery GetUserRoleFallbackSecure($userId: uuid!) {\n  userById(id: $userId) {\n    id\n    role\n    isStaff\n    isActive\n    clerkUserId\n  }\n}\n\nquery GetUserProfileComplete($id: uuid!) {\n  userById(id: $id) {\n    id\n    name\n    email\n    username\n    image\n    phone\n    address\n    bio\n    role\n    isStaff\n    isActive\n    createdAt\n    updatedAt\n    clerkUserId\n    managerUser {\n      id\n      name\n      email\n      image\n    }\n    managedUsers {\n      id\n      name\n      email\n      role\n      image\n      isActive\n    }\n    primaryConsultantPayrolls {\n      id\n      name\n      status\n      client {\n        id\n        name\n      }\n      employeeCount\n    }\n    backupConsultantPayrolls {\n      id\n      name\n      status\n      client {\n        id\n        name\n      }\n    }\n    managedPayrolls {\n      id\n      name\n      status\n      client {\n        id\n        name\n      }\n    }\n    userWorkSchedules {\n      id\n      workDay\n      workHours\n      createdAt\n      updatedAt\n    }\n  }\n  userLeaves: leave(\n    where: {userId: {_eq: $id}}\n    orderBy: {startDate: DESC}\n    limit: 10\n  ) {\n    id\n    startDate\n    endDate\n    leaveType\n    status\n    reason\n  }\n}\n\nquery GetUserForDeletion($id: uuid!) {\n  userById(id: $id) {\n    id\n    name\n    email\n    role\n    clerkUserId\n    isStaff\n    isActive\n    createdAt\n    managerUser {\n      id\n      name\n      email\n    }\n  }\n  payrolls(\n    where: {_or: [{primaryConsultantUserId: {_eq: $id}}, {backupConsultantUserId: {_eq: $id}}, {managerUserId: {_eq: $id}}], status: {_eq: \"Active\"}}\n  ) {\n    id\n    name\n    status\n  }\n  subordinates: users(where: {managerId: {_eq: $id}, isActive: {_eq: true}}) {\n    id\n    name\n    email\n  }\n}\n\nquery GetCurrentUserRole($clerkUserId: String!) {\n  users(where: {clerkUserId: {_eq: $clerkUserId}}) {\n    id\n    role\n    isStaff\n    isActive\n  }\n}\n\nquery GetUsersPaginated($limit: Int = 20, $offset: Int = 0, $where: usersBoolExp = {}, $orderBy: [usersOrderBy!] = [{name: ASC}]) {\n  users(\n    limit: $limit\n    offset: $offset\n    where: {_and: [{isActive: {_eq: true}}, $where]}\n    orderBy: $orderBy\n  ) {\n    ...UserListItem\n  }\n  usersAggregate(where: {_and: [{isActive: {_eq: true}}, $where]}) {\n    aggregate {\n      count\n    }\n  }\n}\n\nquery GetAllUsersPaginated($limit: Int = 20, $offset: Int = 0, $where: usersBoolExp = {}, $orderBy: [usersOrderBy!] = [{name: ASC}]) {\n  users(limit: $limit, offset: $offset, where: $where, orderBy: $orderBy) {\n    ...UserTableRow\n  }\n  allUsersAggregate: usersAggregate(where: $where) {\n    aggregate {\n      count\n    }\n  }\n}\n\nquery GetStaffPaginated($limit: Int = 20, $offset: Int = 0, $where: usersBoolExp = {}) {\n  users(\n    limit: $limit\n    offset: $offset\n    where: {_and: [{isActive: {_eq: true}}, {role: {_in: [\"developer\", \"org_admin\", \"manager\", \"consultant\"]}}, $where]}\n    orderBy: {name: ASC}\n  ) {\n    ...UserListItem\n    createdAt\n    managerUser {\n      ...UserMinimal\n    }\n  }\n  staffAggregate: usersAggregate(\n    where: {_and: [{isActive: {_eq: true}}, {role: {_in: [\"developer\", \"org_admin\", \"manager\", \"consultant\"]}}, $where]}\n  ) {\n    aggregate {\n      count\n    }\n  }\n}\n\nquery SearchUsersPaginated($searchTerm: String!, $limit: Int = 20, $offset: Int = 0) {\n  users(\n    where: {_and: [{isActive: {_eq: true}}, {_or: [{name: {_ilike: $searchTerm}}, {email: {_ilike: $searchTerm}}, {username: {_ilike: $searchTerm}}]}]}\n    orderBy: {name: ASC}\n    limit: $limit\n    offset: $offset\n  ) {\n    ...UserListItem\n    createdAt\n    managerUser {\n      ...UserMinimal\n    }\n  }\n  searchAggregate: usersAggregate(\n    where: {_and: [{isActive: {_eq: true}}, {_or: [{name: {_ilike: $searchTerm}}, {email: {_ilike: $searchTerm}}, {username: {_ilike: $searchTerm}}]}]}\n  ) {\n    aggregate {\n      count\n    }\n  }\n}\n\nquery GetUserByIdComplete($id: uuid!) {\n  userById(id: $id) {\n    id\n    name\n    email\n    role\n    createdAt\n    updatedAt\n    isStaff\n    managerId\n    clerkUserId\n    managerUser {\n      id\n      name\n      email\n      role\n    }\n  }\n}\n\nquery GetUserByClerkIdComplete($clerkId: String!) {\n  users(where: {clerkUserId: {_eq: $clerkId}}) {\n    id\n    name\n    email\n    role\n    createdAt\n    updatedAt\n    isStaff\n    managerId\n    clerkUserId\n    managerUser {\n      id\n      name\n      email\n      role\n    }\n  }\n}\n\nquery GetUserClerkId($id: uuid!) {\n  userById(id: $id) {\n    id\n    name\n    email\n    role\n    clerkUserId\n    managerId\n  }\n}\n\nquery GetUsersQuickList {\n  users(where: {isActive: {_eq: true}}, orderBy: {name: ASC}) {\n    ...UserMinimal\n  }\n}\n\nquery GetStaffQuickList {\n  users(\n    where: {isActive: {_eq: true}, role: {_in: [\"developer\", \"org_admin\", \"manager\", \"consultant\"]}}\n    orderBy: {name: ASC}\n  ) {\n    ...UserMinimal\n  }\n}\n\nquery GetManagersQuickList {\n  users(\n    where: {isActive: {_eq: true}, role: {_in: [\"manager\", \"org_admin\"]}}\n    orderBy: {name: ASC}\n  ) {\n    ...UserMinimal\n  }\n}\n\nquery GetUserCard($id: uuid!) {\n  userById(id: $id) {\n    ...UserSummary\n    email\n    managerUser {\n      ...UserMinimal\n    }\n  }\n}\n\nquery GetUserAssignmentData($id: uuid!) {\n  userById(id: $id) {\n    ...UserSummary\n    email\n    activePayrollCount: primaryConsultantPayrollsAggregate(\n      where: {supersededDate: {_isNull: true}}\n    ) {\n      aggregate {\n        count\n      }\n    }\n    backupPayrollCount: backupConsultantPayrollsAggregate(\n      where: {supersededDate: {_isNull: true}}\n    ) {\n      aggregate {\n        count\n      }\n    }\n  }\n}\n\nquery GetUserWorkload($id: uuid!) {\n  userById(id: $id) {\n    ...UserSummary\n    primaryPayrolls: primaryConsultantPayrolls(\n      where: {supersededDate: {_isNull: true}}\n      limit: 10\n    ) {\n      id\n      name\n      status\n      client {\n        name\n      }\n    }\n    backupPayrolls: backupConsultantPayrolls(\n      where: {supersededDate: {_isNull: true}}\n      limit: 10\n    ) {\n      id\n      name\n      status\n      client {\n        name\n      }\n    }\n  }\n}\n\nquery GetInvitationsWithStatus($statuses: [invitation_status_enum!], $limit: Int = 50, $offset: Int = 0) {\n  userInvitations(\n    where: {invitationStatus: {_in: $statuses}}\n    orderBy: {createdAt: DESC}\n    limit: $limit\n    offset: $offset\n  ) {\n    id\n    email\n    firstName\n    lastName\n    invitedRole\n    invitationStatus\n    invitedAt\n    expiresAt\n    revokedAt\n    revokeReason\n    invitedByUser {\n      id\n      name\n      email\n    }\n  }\n  userInvitationsAggregate(where: {invitationStatus: {_in: $statuses}}) {\n    aggregate {\n      count\n    }\n  }\n}\n\nquery GetInvitationDashboardStats {\n  pending: userInvitationsAggregate(\n    where: {invitationStatus: {_eq: \"pending\"}, expiresAt: {_gt: \"now()\"}}\n  ) {\n    aggregate {\n      count\n    }\n  }\n  expired: userInvitationsAggregate(where: {invitationStatus: {_eq: \"expired\"}}) {\n    aggregate {\n      count\n    }\n  }\n  accepted: userInvitationsAggregate(where: {invitationStatus: {_eq: \"accepted\"}}) {\n    aggregate {\n      count\n    }\n  }\n  revoked: userInvitationsAggregate(where: {invitationStatus: {_eq: \"revoked\"}}) {\n    aggregate {\n      count\n    }\n  }\n  expiringSoon: userInvitationsAggregate(\n    where: {invitationStatus: {_eq: \"pending\"}, expiresAt: {_gt: \"now()\", _lt: \"now() + interval '7 days'\"}}\n  ) {\n    aggregate {\n      count\n    }\n  }\n  recentInvitations: userInvitations(\n    where: {createdAt: {_gte: \"now() - interval '30 days'\"}}\n    orderBy: {createdAt: DESC}\n    limit: 10\n  ) {\n    id\n    email\n    firstName\n    lastName\n    invitationStatus\n    createdAt\n    expiresAt\n    invitedByUser {\n      name\n      email\n    }\n  }\n  byStatus: userInvitationsAggregate {\n    aggregate {\n      count\n    }\n  }\n}\n\nquery GetExpiringInvitations($daysUntilExpiry: interval!) {\n  userInvitations(\n    where: {invitationStatus: {_eq: \"pending\"}, expiresAt: {_gt: \"now()\", _lt: \"now() + $daysUntilExpiry\"}}\n    orderBy: {expiresAt: ASC}\n  ) {\n    id\n    email\n    firstName\n    lastName\n    expiresAt\n    invitedByUser {\n      name\n      email\n    }\n  }\n}\n\nquery GetUsersByStatus($statuses: [user_status_enum!], $limit: Int = 50, $offset: Int = 0) {\n  users(\n    where: {status: {_in: $statuses}}\n    orderBy: {updatedAt: DESC}\n    limit: $limit\n    offset: $offset\n  ) {\n    id\n    email\n    name\n    role\n    status\n    isActive\n    isStaff\n    statusChangedAt\n    statusChangeReason\n    deactivatedAt\n    createdAt\n  }\n  usersAggregate(where: {status: {_in: $statuses}}) {\n    aggregate {\n      count\n    }\n  }\n}\n\nquery GetUserWithStatusDetails($userId: uuid!) {\n  userById(id: $userId) {\n    id\n    email\n    name\n    role\n    status\n    isActive\n    isStaff\n    clerkUserId\n    statusChangedAt\n    statusChangedBy\n    statusChangeReason\n    deactivatedAt\n    deactivatedBy\n    createdAt\n    updatedAt\n  }\n}\n\nquery GetCurrentUserRoleForManagement($userId: uuid!) {\n  userById(id: $userId) {\n    id\n    role\n  }\n}": types.GetUsersDocument,
    "subscription UserUpdates($userId: uuid!) {\n  userById(id: $userId) {\n    ...UserProfile\n    updatedAt\n  }\n}\n\nsubscription ActiveUsers {\n  users(where: {isActive: {_eq: true}}) {\n    id\n    name\n    email\n    updatedAt\n  }\n}\n\nsubscription UserAuthEvents($userId: uuid!) {\n  authEvents(where: {userId: {_eq: $userId}}) {\n    id\n    createdAt\n    ipAddress\n    userAgent\n  }\n}\n\nsubscription PermissionOverrideChanges($userId: uuid!) {\n  permissionOverrides(where: {userId: {_eq: $userId}}, orderBy: {createdAt: DESC}) {\n    id\n    resource\n    operation\n    granted\n    reason\n    expiresAt\n    createdAt\n    createdBy\n    createdByUser {\n      ...UserMinimal\n    }\n  }\n}": types.UserUpdatesDocument,
    "fragment UserMinimal on users {\n  id\n  name\n  email\n}\n\nfragment UserCoreShared on users {\n  ...UserMinimal\n  role\n  isActive\n}\n\nfragment UserBasic on users {\n  ...UserCoreShared\n  createdAt\n  updatedAt\n}\n\nfragment UserBase on users {\n  ...UserBasic\n}\n\nfragment UserWithRole on users {\n  ...UserBasic\n  username\n  isStaff\n}\n\nfragment UserProfile on users {\n  ...UserWithRole\n  clerkUserId\n  image\n  managerId\n  deactivatedAt\n  deactivatedBy\n  managerUser {\n    ...UserMinimal\n  }\n}\n\nfragment UserSearchResult on users {\n  ...UserCoreShared\n  username\n  isStaff\n}\n\nfragment ClientMinimal on clients {\n  id\n  name\n}\n\nfragment ClientBase on clients {\n  id\n  name\n  active\n  contactEmail\n  contactPerson\n  contactPhone\n  createdAt\n}\n\nfragment ClientWithStats on clients {\n  ...ClientBase\n  currentEmployeeCount: payrollsAggregate(\n    where: {supersededDate: {_isNull: true}}\n  ) {\n    aggregate {\n      sum {\n        employeeCount\n      }\n    }\n  }\n  activePayrollCount: payrollsAggregate(\n    where: {supersededDate: {_isNull: true}, status: {_eq: \"Active\"}}\n  ) {\n    aggregate {\n      count\n    }\n  }\n}\n\nfragment ClientListBase on clients {\n  ...ClientBase\n  payrollCount: payrollsAggregate(where: {supersededDate: {_isNull: true}}) {\n    aggregate {\n      count\n    }\n  }\n}\n\nfragment PayrollMinimal on payrolls {\n  id\n  name\n  employeeCount\n  status\n}\n\nfragment PayrollBase on payrolls {\n  id\n  name\n  employeeCount\n  status\n  payrollSystem\n  processingTime\n  processingDaysBeforeEft\n  versionNumber\n  createdAt\n  updatedAt\n}\n\nfragment PayrollWithClient on payrolls {\n  ...PayrollBase\n  clientId\n  client {\n    id\n    name\n    active\n  }\n}\n\nfragment PayrollListItem on payrolls {\n  ...PayrollWithClient\n  primaryConsultantUserId\n  backupConsultantUserId\n  managerUserId\n  createdByUserId\n  primaryConsultant {\n    ...UserMinimal\n  }\n  backupConsultant {\n    ...UserMinimal\n  }\n  manager {\n    ...UserMinimal\n  }\n}\n\nfragment PayrollWithDates on payrolls {\n  ...PayrollBase\n  goLiveDate\n  payrollDates(orderBy: {originalEftDate: ASC}) {\n    id\n    originalEftDate\n    adjustedEftDate\n    notes\n  }\n}\n\nfragment PayrollFullDetail on payrolls {\n  ...PayrollWithDates\n  ...PayrollWithClient\n  dateTypeId\n  cycleId\n  dateValue\n  versionReason\n  supersededDate\n  parentPayrollId\n  parentPayroll {\n    id\n    versionNumber\n  }\n  childPayrolls(orderBy: {versionNumber: DESC}) {\n    id\n    versionNumber\n    versionReason\n    createdAt\n  }\n  primaryConsultant {\n    ...UserMinimal\n  }\n  backupConsultant {\n    ...UserMinimal\n  }\n  manager {\n    ...UserMinimal\n  }\n}\n\nfragment NoteWithAuthor on notes {\n  id\n  content\n  isImportant\n  createdAt\n  entityId\n  entityType\n  authorUser {\n    ...UserMinimal\n  }\n}\n\nfragment PermissionBase on permissions {\n  id\n  resourceId\n  description\n  legacyPermissionName\n  action\n}\n\nfragment RoleWithPermissions on roles {\n  id\n  name\n  displayName\n  description\n  isSystemRole\n  priority\n  assignedPermissions {\n    grantedPermission {\n      ...PermissionBase\n    }\n  }\n}\n\nfragment AuditLogEntry on auditLogs {\n  id\n  userId\n  userEmail\n  userRole\n  action\n  resourceType\n  resourceId\n  eventTime\n  success\n  errorMessage\n  ipAddress\n  userAgent\n  requestId\n  sessionId\n  metadata\n  oldValues\n  newValues\n  createdAt\n}\n\nfragment AuthEvent on authEvents {\n  id\n  userId\n  userEmail\n  eventType\n  eventTime\n  success\n  failureReason\n  ipAddress\n  userAgent\n  metadata\n}\n\nfragment DataAccessLog on dataAccessLogs {\n  id\n  userId\n  resourceType\n  resourceId\n  accessType\n  accessedAt\n  dataClassification\n  fieldsAccessed\n  rowCount\n  ipAddress\n  metadata\n}\n\nfragment PermissionChange on permissionChanges {\n  id\n  changedAt\n  changedByUserId\n  targetUserId\n  targetRoleId\n  changeType\n  permissionType\n  oldPermissions\n  newPermissions\n  reason\n  approvedByUserId\n}\n\nfragment PayrollDateInfo on payrollDates {\n  id\n  originalEftDate\n  adjustedEftDate\n  notes\n  createdAt\n}\n\nfragment PermissionOverrideInfo on permissionOverrides {\n  id\n  userId\n  role\n  resource\n  operation\n  granted\n  reason\n  conditions\n  expiresAt\n  createdBy\n  createdAt\n}": types.UserMinimalFragmentDoc,
    "mutation LogAuditEvent($input: auditLogsInsertInput!) {\n  insertAuditLogsOne: insertAuditLog(object: $input) {\n    id\n    eventTime\n  }\n}\n\nmutation RefreshData {\n  __typename\n}": types.LogAuditEventDocument,
    "query GetDashboardMetrics($userId: uuid!) {\n  clientsAggregate(where: {active: {_eq: true}}) {\n    aggregate {\n      count\n    }\n  }\n  activePayrollsAggregate: payrollsAggregate(\n    where: {supersededDate: {_isNull: true}, status: {_nin: [\"Completed\", \"Failed\"]}}\n  ) {\n    aggregate {\n      count\n    }\n  }\n  totalEmployeesAggregate: payrollsAggregate(\n    where: {supersededDate: {_isNull: true}}\n  ) {\n    aggregate {\n      sum {\n        employeeCount\n      }\n    }\n  }\n  upcomingPayrolls: payrolls(\n    where: {supersededDate: {_isNull: true}, status: {_nin: [\"Completed\", \"Failed\", \"Cancelled\"]}}\n    orderBy: {updatedAt: DESC}\n    limit: 5\n  ) {\n    ...PayrollMinimal\n    client {\n      ...ClientMinimal\n    }\n  }\n}\n\nquery GetDashboardStatsOptimized($limit: Int = 10) {\n  clientsAggregate {\n    aggregate {\n      count\n    }\n  }\n  totalPayrolls: payrollsAggregate(where: {supersededDate: {_isNull: true}}) {\n    aggregate {\n      count\n    }\n  }\n  activePayrolls: payrollsAggregate(\n    where: {supersededDate: {_isNull: true}, status: {_eq: \"Active\"}}\n  ) {\n    aggregate {\n      count\n    }\n  }\n  upcomingPayrolls: payrolls(\n    where: {supersededDate: {_isNull: true}, status: {_eq: \"Active\"}}\n    orderBy: {updatedAt: DESC}\n    limit: $limit\n  ) {\n    id\n    name\n    status\n    client {\n      id\n      name\n    }\n  }\n}\n\nquery GetClientsDashboardStats {\n  activeClientsCount: clientsAggregate(where: {active: {_eq: true}}) {\n    aggregate {\n      count\n    }\n  }\n  totalPayrollsCount: payrollsAggregate(where: {supersededDate: {_isNull: true}}) {\n    aggregate {\n      count\n    }\n  }\n  totalEmployeesSum: payrollsAggregate(where: {supersededDate: {_isNull: true}}) {\n    aggregate {\n      sum {\n        employeeCount\n      }\n    }\n  }\n  clientsNeedingAttention: clients(\n    where: {active: {_eq: true}, _not: {payrolls: {supersededDate: {_isNull: true}}}}\n  ) {\n    ...ClientMinimal\n  }\n}\n\nquery GetCurrentUser($userId: uuid!) {\n  user: userById(id: $userId) {\n    ...UserProfile\n  }\n}\n\nquery GetUsersForDropdown($role: user_role) {\n  users(where: {isActive: {_eq: true}, role: {_eq: $role}}, orderBy: {name: ASC}) {\n    ...UserMinimal\n  }\n}\n\nquery GetSystemHealth {\n  databaseHealth: users(limit: 1) {\n    id\n  }\n  recentActivity: auditLogsAggregate(\n    where: {eventTime: {_gte: \"now() - interval '1 hour'\"}}\n  ) {\n    aggregate {\n      count\n    }\n  }\n}\n\nquery GlobalSearch($searchTerm: String!) {\n  clients(\n    where: {_or: [{name: {_ilike: $searchTerm}}, {contactEmail: {_ilike: $searchTerm}}]}\n    limit: 5\n  ) {\n    ...ClientMinimal\n  }\n  users(\n    where: {_or: [{name: {_ilike: $searchTerm}}, {email: {_ilike: $searchTerm}}]}\n    limit: 5\n  ) {\n    ...UserMinimal\n  }\n  payrolls(\n    where: {client: {name: {_ilike: $searchTerm}}, supersededDate: {_isNull: true}}\n    limit: 5\n  ) {\n    ...PayrollMinimal\n    client {\n      ...ClientMinimal\n    }\n  }\n}": types.GetDashboardMetricsDocument,
    "subscription RecentActivity($resourceTypes: [String!]) {\n  auditLogs(\n    where: {resourceType: {_in: $resourceTypes}, eventTime: {_gte: \"now() - interval '5 minutes'\"}}\n    orderBy: {eventTime: DESC}\n    limit: 20\n  ) {\n    ...AuditLogEntry\n  }\n}\n\nsubscription AuthenticationEvents($userId: uuid) {\n  authEvents(\n    where: {userId: {_eq: $userId}, eventTime: {_gte: \"now() - interval '10 minutes'\"}}\n    orderBy: {eventTime: DESC}\n  ) {\n    ...AuthEvent\n  }\n}\n\nsubscription SensitiveDataAccess($resourceTypes: [String!]!) {\n  dataAccessLogs(\n    where: {resourceType: {_in: $resourceTypes}, accessedAt: {_gte: \"now() - interval '10 minutes'\"}}\n    orderBy: {accessedAt: DESC}\n  ) {\n    ...DataAccessLog\n  }\n}\n\nsubscription PermissionChangeStream {\n  permissionChanges(orderBy: {changedAt: DESC}, limit: 10) {\n    ...PermissionChange\n  }\n}": types.RecentActivityDocument,
};

/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 *
 *
 * @example
 * ```ts
 * const query = gql(`query GetUser($id: ID!) { user(id: $id) { name } }`);
 * ```
 *
 * The query argument is unknown!
 * Please regenerate the types.
 */
export function gql(source: string): unknown;

/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "fragment UserCore on users {\n  id\n  name\n  email\n  isActive\n  isStaff\n  role\n  position\n  clerkUserId\n  createdAt\n  updatedAt\n}\n\nfragment UserWithProfile on users {\n  ...UserCore\n  username\n  image\n  phone\n  address\n  bio\n}\n\nfragment UserWithRoles on users {\n  ...UserCore\n}\n\nfragment UserWithTeam on users {\n  ...UserCore\n}\n\nfragment UserWithWorkSchedule on users {\n  ...UserCore\n  userWorkSchedules {\n    id\n    workDay\n    workHours\n    adminTimeHours\n    payrollCapacityHours\n    usesDefaultAdminTime\n    createdAt\n    updatedAt\n  }\n}\n\nfragment UserWithPayrolls on users {\n  ...UserCore\n}\n\nfragment UserWithAllRelations on users {\n  ...UserWithProfile\n  userWorkSchedules {\n    id\n    workDay\n    workHours\n    adminTimeHours\n    payrollCapacityHours\n    usesDefaultAdminTime\n    createdAt\n    updatedAt\n  }\n}\n\nfragment UserBasicInfo on users {\n  id\n  name\n  email\n  role\n  position\n  username\n  image\n  isStaff\n  isActive\n  managerId\n  clerkUserId\n}\n\nfragment UserForStaff on users {\n  ...UserWithProfile\n}\n\nfragment UserForAuth on users {\n  id\n  name\n  email\n  role\n  isActive\n  clerkUserId\n}\n\nfragment UserForAudit on users {\n  id\n  name\n  email\n  role\n  isActive\n}\n\nfragment UserRoleInfo on users {\n  id\n  name\n  email\n  role\n  isActive\n}\n\nfragment UserPermissionsInfo on users {\n  id\n  name\n  role\n}\n\nfragment UserSummary on users {\n  id\n  name\n  role\n  position\n  isActive\n  isStaff\n}\n\nfragment UserListItem on users {\n  ...UserSummary\n  email\n  managerId\n  clerkUserId\n  updatedAt\n}\n\nfragment UserDashboardCard on users {\n  ...UserSummary\n  managerUser {\n    id\n    name\n  }\n}\n\nfragment UserTeamSummary on users {\n  ...UserSummary\n  email\n  managerUser {\n    id\n    name\n  }\n}\n\nfragment UserTableRow on users {\n  ...UserListItem\n  managerUser {\n    id\n    name\n  }\n}"): (typeof documents)["fragment UserCore on users {\n  id\n  name\n  email\n  isActive\n  isStaff\n  role\n  position\n  clerkUserId\n  createdAt\n  updatedAt\n}\n\nfragment UserWithProfile on users {\n  ...UserCore\n  username\n  image\n  phone\n  address\n  bio\n}\n\nfragment UserWithRoles on users {\n  ...UserCore\n}\n\nfragment UserWithTeam on users {\n  ...UserCore\n}\n\nfragment UserWithWorkSchedule on users {\n  ...UserCore\n  userWorkSchedules {\n    id\n    workDay\n    workHours\n    adminTimeHours\n    payrollCapacityHours\n    usesDefaultAdminTime\n    createdAt\n    updatedAt\n  }\n}\n\nfragment UserWithPayrolls on users {\n  ...UserCore\n}\n\nfragment UserWithAllRelations on users {\n  ...UserWithProfile\n  userWorkSchedules {\n    id\n    workDay\n    workHours\n    adminTimeHours\n    payrollCapacityHours\n    usesDefaultAdminTime\n    createdAt\n    updatedAt\n  }\n}\n\nfragment UserBasicInfo on users {\n  id\n  name\n  email\n  role\n  position\n  username\n  image\n  isStaff\n  isActive\n  managerId\n  clerkUserId\n}\n\nfragment UserForStaff on users {\n  ...UserWithProfile\n}\n\nfragment UserForAuth on users {\n  id\n  name\n  email\n  role\n  isActive\n  clerkUserId\n}\n\nfragment UserForAudit on users {\n  id\n  name\n  email\n  role\n  isActive\n}\n\nfragment UserRoleInfo on users {\n  id\n  name\n  email\n  role\n  isActive\n}\n\nfragment UserPermissionsInfo on users {\n  id\n  name\n  role\n}\n\nfragment UserSummary on users {\n  id\n  name\n  role\n  position\n  isActive\n  isStaff\n}\n\nfragment UserListItem on users {\n  ...UserSummary\n  email\n  managerId\n  clerkUserId\n  updatedAt\n}\n\nfragment UserDashboardCard on users {\n  ...UserSummary\n  managerUser {\n    id\n    name\n  }\n}\n\nfragment UserTeamSummary on users {\n  ...UserSummary\n  email\n  managerUser {\n    id\n    name\n  }\n}\n\nfragment UserTableRow on users {\n  ...UserListItem\n  managerUser {\n    id\n    name\n  }\n}"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "mutation CreateUser($object: usersInsertInput!) {\n  insertUser(object: $object) {\n    ...UserBase\n    username\n    image\n    managerId\n  }\n}\n\nmutation UpdateUser($id: uuid!, $set: usersSetInput!) {\n  updateUserById(pkColumns: {id: $id}, _set: $set) {\n    ...UserBase\n    username\n    image\n    managerId\n  }\n}\n\nmutation DeleteUser($id: uuid!) {\n  updateUserById(\n    pkColumns: {id: $id}\n    _set: {isActive: false, deactivatedAt: \"now()\"}\n  ) {\n    ...UserBase\n  }\n}\n\nmutation UpdateUserRole($id: uuid!, $role: user_role!) {\n  updateUserById(pkColumns: {id: $id}, _set: {role: $role}) {\n    ...UserBase\n  }\n}\n\nmutation BulkUpdateUsers($where: usersBoolExp!, $set: usersSetInput!) {\n  bulkUpdateUsers(where: $where, _set: $set) {\n    returning {\n      ...UserBase\n    }\n    affectedRows\n  }\n}\n\nmutation CreateUserFromClerk($clerkId: String!, $name: String!, $email: String!, $role: user_role = \"viewer\", $isStaff: Boolean = false, $managerId: uuid, $image: String) {\n  insertUser(\n    object: {clerkUserId: $clerkId, name: $name, email: $email, role: $role, isStaff: $isStaff, managerId: $managerId, image: $image}\n    onConflict: {constraint: users_clerk_user_id_key, updateColumns: [name, email, image, updatedAt]}\n  ) {\n    ...UserBase\n  }\n}\n\nmutation CreateUserByEmail($name: String!, $email: String!, $role: user_role!, $managerId: uuid, $isStaff: Boolean = true, $clerkUserId: String) {\n  insertUser(\n    object: {name: $name, email: $email, role: $role, managerId: $managerId, isStaff: $isStaff, isActive: true, clerkUserId: $clerkUserId}\n  ) {\n    ...UserBase\n  }\n}\n\nmutation UpdateUserProfile($id: uuid!, $input: usersSetInput!) {\n  updateUserById(pkColumns: {id: $id}, _set: $input) {\n    ...UserWithProfile\n  }\n}\n\nmutation DeactivateUser($id: uuid!) {\n  updateUserById(\n    pkColumns: {id: $id}\n    _set: {isActive: false, deactivatedAt: \"now()\"}\n  ) {\n    ...UserBase\n  }\n}\n\nmutation ReactivateUser($id: uuid!) {\n  updateUserById(\n    pkColumns: {id: $id}\n    _set: {isActive: true, deactivatedAt: null}\n  ) {\n    ...UserBase\n  }\n}\n\nmutation HardDeleteUser($id: uuid!) {\n  deleteUserById(id: $id) {\n    id\n    name\n    email\n  }\n}\n\nmutation UpdateStaffRole($id: uuid!, $role: user_role!) {\n  updateUserById(pkColumns: {id: $id}, _set: {role: $role}) {\n    ...UserBase\n    managerId\n  }\n}\n\nmutation UpdateUserRoleFromClerk($clerkUserId: String!, $role: user_role!) {\n  bulkUpdateUsers(where: {clerkUserId: {_eq: $clerkUserId}}, _set: {role: $role}) {\n    returning {\n      ...UserBase\n    }\n    affectedRows\n  }\n}\n\nmutation RevokeInvitation($invitationId: uuid!, $revokeReason: String!, $revokedBy: uuid!) {\n  updateUserInvitationById(\n    pkColumns: {id: $invitationId}\n    _set: {invitationStatus: \"revoked\", status: \"cancelled\", revokedAt: \"now()\", revokedBy: $revokedBy, revokeReason: $revokeReason, updatedAt: \"now()\"}\n  ) {\n    id\n    email\n    invitationStatus\n    revokedAt\n    revokeReason\n  }\n}\n\nmutation ResendInvitationEnhanced($invitationId: uuid!, $newExpiresAt: timestamptz!, $newClerkTicket: String, $newClerkInvitationId: String) {\n  updateUserInvitationById(\n    pkColumns: {id: $invitationId}\n    _set: {expiresAt: $newExpiresAt, clerkTicket: $newClerkTicket, clerkInvitationId: $newClerkInvitationId, invitationStatus: \"pending\", status: \"pending\", updatedAt: \"now()\"}\n  ) {\n    id\n    email\n    invitationStatus\n    expiresAt\n  }\n}\n\nmutation DeactivateUserWithReason($userId: uuid!, $reason: String!, $deactivatedBy: uuid!, $deactivatedByString: String!) {\n  updateUserById(\n    pkColumns: {id: $userId}\n    _set: {status: \"inactive\", isActive: false, deactivatedAt: \"now()\", deactivatedBy: $deactivatedByString, statusChangeReason: $reason, statusChangedAt: \"now()\", statusChangedBy: $deactivatedBy, updatedAt: \"now()\"}\n  ) {\n    id\n    email\n    name\n    status\n    isActive\n    deactivatedAt\n    statusChangeReason\n    statusChangedAt\n  }\n}\n\nmutation LockUserWithReason($userId: uuid!, $reason: String!, $lockedBy: uuid!) {\n  updateUserById(\n    pkColumns: {id: $userId}\n    _set: {status: \"locked\", isActive: false, statusChangeReason: $reason, statusChangedAt: \"now()\", statusChangedBy: $lockedBy, updatedAt: \"now()\"}\n  ) {\n    id\n    email\n    name\n    status\n    isActive\n    statusChangeReason\n    statusChangedAt\n  }\n}\n\nmutation UnlockUserWithReason($userId: uuid!, $reason: String!, $unlockedBy: uuid!) {\n  updateUserById(\n    pkColumns: {id: $userId}\n    _set: {status: \"active\", isActive: true, statusChangeReason: $reason, statusChangedAt: \"now()\", statusChangedBy: $unlockedBy, updatedAt: \"now()\"}\n  ) {\n    id\n    email\n    name\n    status\n    isActive\n    statusChangeReason\n    statusChangedAt\n  }\n}\n\nmutation ReactivateUserWithReason($userId: uuid!, $reason: String!, $reactivatedBy: uuid!) {\n  updateUserById(\n    pkColumns: {id: $userId}\n    _set: {status: \"active\", isActive: true, deactivatedAt: null, deactivatedBy: null, statusChangeReason: $reason, statusChangedAt: \"now()\", statusChangedBy: $reactivatedBy, updatedAt: \"now()\"}\n  ) {\n    id\n    email\n    name\n    status\n    isActive\n    statusChangeReason\n    statusChangedAt\n  }\n}"): (typeof documents)["mutation CreateUser($object: usersInsertInput!) {\n  insertUser(object: $object) {\n    ...UserBase\n    username\n    image\n    managerId\n  }\n}\n\nmutation UpdateUser($id: uuid!, $set: usersSetInput!) {\n  updateUserById(pkColumns: {id: $id}, _set: $set) {\n    ...UserBase\n    username\n    image\n    managerId\n  }\n}\n\nmutation DeleteUser($id: uuid!) {\n  updateUserById(\n    pkColumns: {id: $id}\n    _set: {isActive: false, deactivatedAt: \"now()\"}\n  ) {\n    ...UserBase\n  }\n}\n\nmutation UpdateUserRole($id: uuid!, $role: user_role!) {\n  updateUserById(pkColumns: {id: $id}, _set: {role: $role}) {\n    ...UserBase\n  }\n}\n\nmutation BulkUpdateUsers($where: usersBoolExp!, $set: usersSetInput!) {\n  bulkUpdateUsers(where: $where, _set: $set) {\n    returning {\n      ...UserBase\n    }\n    affectedRows\n  }\n}\n\nmutation CreateUserFromClerk($clerkId: String!, $name: String!, $email: String!, $role: user_role = \"viewer\", $isStaff: Boolean = false, $managerId: uuid, $image: String) {\n  insertUser(\n    object: {clerkUserId: $clerkId, name: $name, email: $email, role: $role, isStaff: $isStaff, managerId: $managerId, image: $image}\n    onConflict: {constraint: users_clerk_user_id_key, updateColumns: [name, email, image, updatedAt]}\n  ) {\n    ...UserBase\n  }\n}\n\nmutation CreateUserByEmail($name: String!, $email: String!, $role: user_role!, $managerId: uuid, $isStaff: Boolean = true, $clerkUserId: String) {\n  insertUser(\n    object: {name: $name, email: $email, role: $role, managerId: $managerId, isStaff: $isStaff, isActive: true, clerkUserId: $clerkUserId}\n  ) {\n    ...UserBase\n  }\n}\n\nmutation UpdateUserProfile($id: uuid!, $input: usersSetInput!) {\n  updateUserById(pkColumns: {id: $id}, _set: $input) {\n    ...UserWithProfile\n  }\n}\n\nmutation DeactivateUser($id: uuid!) {\n  updateUserById(\n    pkColumns: {id: $id}\n    _set: {isActive: false, deactivatedAt: \"now()\"}\n  ) {\n    ...UserBase\n  }\n}\n\nmutation ReactivateUser($id: uuid!) {\n  updateUserById(\n    pkColumns: {id: $id}\n    _set: {isActive: true, deactivatedAt: null}\n  ) {\n    ...UserBase\n  }\n}\n\nmutation HardDeleteUser($id: uuid!) {\n  deleteUserById(id: $id) {\n    id\n    name\n    email\n  }\n}\n\nmutation UpdateStaffRole($id: uuid!, $role: user_role!) {\n  updateUserById(pkColumns: {id: $id}, _set: {role: $role}) {\n    ...UserBase\n    managerId\n  }\n}\n\nmutation UpdateUserRoleFromClerk($clerkUserId: String!, $role: user_role!) {\n  bulkUpdateUsers(where: {clerkUserId: {_eq: $clerkUserId}}, _set: {role: $role}) {\n    returning {\n      ...UserBase\n    }\n    affectedRows\n  }\n}\n\nmutation RevokeInvitation($invitationId: uuid!, $revokeReason: String!, $revokedBy: uuid!) {\n  updateUserInvitationById(\n    pkColumns: {id: $invitationId}\n    _set: {invitationStatus: \"revoked\", status: \"cancelled\", revokedAt: \"now()\", revokedBy: $revokedBy, revokeReason: $revokeReason, updatedAt: \"now()\"}\n  ) {\n    id\n    email\n    invitationStatus\n    revokedAt\n    revokeReason\n  }\n}\n\nmutation ResendInvitationEnhanced($invitationId: uuid!, $newExpiresAt: timestamptz!, $newClerkTicket: String, $newClerkInvitationId: String) {\n  updateUserInvitationById(\n    pkColumns: {id: $invitationId}\n    _set: {expiresAt: $newExpiresAt, clerkTicket: $newClerkTicket, clerkInvitationId: $newClerkInvitationId, invitationStatus: \"pending\", status: \"pending\", updatedAt: \"now()\"}\n  ) {\n    id\n    email\n    invitationStatus\n    expiresAt\n  }\n}\n\nmutation DeactivateUserWithReason($userId: uuid!, $reason: String!, $deactivatedBy: uuid!, $deactivatedByString: String!) {\n  updateUserById(\n    pkColumns: {id: $userId}\n    _set: {status: \"inactive\", isActive: false, deactivatedAt: \"now()\", deactivatedBy: $deactivatedByString, statusChangeReason: $reason, statusChangedAt: \"now()\", statusChangedBy: $deactivatedBy, updatedAt: \"now()\"}\n  ) {\n    id\n    email\n    name\n    status\n    isActive\n    deactivatedAt\n    statusChangeReason\n    statusChangedAt\n  }\n}\n\nmutation LockUserWithReason($userId: uuid!, $reason: String!, $lockedBy: uuid!) {\n  updateUserById(\n    pkColumns: {id: $userId}\n    _set: {status: \"locked\", isActive: false, statusChangeReason: $reason, statusChangedAt: \"now()\", statusChangedBy: $lockedBy, updatedAt: \"now()\"}\n  ) {\n    id\n    email\n    name\n    status\n    isActive\n    statusChangeReason\n    statusChangedAt\n  }\n}\n\nmutation UnlockUserWithReason($userId: uuid!, $reason: String!, $unlockedBy: uuid!) {\n  updateUserById(\n    pkColumns: {id: $userId}\n    _set: {status: \"active\", isActive: true, statusChangeReason: $reason, statusChangedAt: \"now()\", statusChangedBy: $unlockedBy, updatedAt: \"now()\"}\n  ) {\n    id\n    email\n    name\n    status\n    isActive\n    statusChangeReason\n    statusChangedAt\n  }\n}\n\nmutation ReactivateUserWithReason($userId: uuid!, $reason: String!, $reactivatedBy: uuid!) {\n  updateUserById(\n    pkColumns: {id: $userId}\n    _set: {status: \"active\", isActive: true, deactivatedAt: null, deactivatedBy: null, statusChangeReason: $reason, statusChangedAt: \"now()\", statusChangedBy: $reactivatedBy, updatedAt: \"now()\"}\n  ) {\n    id\n    email\n    name\n    status\n    isActive\n    statusChangeReason\n    statusChangedAt\n  }\n}"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "query GetUsers($limit: Int = 50, $offset: Int = 0, $where: usersBoolExp) {\n  users(limit: $limit, offset: $offset, where: $where, orderBy: {name: ASC}) {\n    ...UserBase\n    username\n    image\n    managerId\n    managerUser {\n      id\n      name\n      email\n      role\n    }\n  }\n}\n\nquery GetStaffWithRelationsOptimized($limit: Int = 50, $offset: Int = 0, $where: usersBoolExp = {isStaff: {_eq: true}, isActive: {_eq: true}}, $orderBy: [usersOrderBy!] = [{name: ASC}]) {\n  users(limit: $limit, offset: $offset, where: $where, orderBy: $orderBy) {\n    id\n    name\n    email\n    role\n    username\n    image\n    isActive\n    isStaff\n    managerId\n    clerkUserId\n    createdAt\n    updatedAt\n    managerUser {\n      id\n      name\n      email\n      role\n      isActive\n    }\n    managedUsers(where: {isActive: {_eq: true}}) {\n      id\n      name\n      email\n      role\n      isActive\n    }\n    primaryConsultantPayrolls(\n      where: {supersededDate: {_isNull: true}}\n      limit: 5\n      orderBy: {updatedAt: DESC}\n    ) {\n      id\n      name\n      status\n      client {\n        id\n        name\n      }\n      nextPayrollDate: payrollDates(\n        where: {adjustedEftDate: {_gte: \"now()\"}}\n        orderBy: {adjustedEftDate: ASC}\n        limit: 1\n      ) {\n        adjustedEftDate\n      }\n    }\n    backupConsultantPayrolls(\n      where: {supersededDate: {_isNull: true}}\n      limit: 3\n      orderBy: {updatedAt: DESC}\n    ) {\n      id\n      name\n      status\n      client {\n        id\n        name\n      }\n    }\n    userWorkSchedules(orderBy: {workDay: ASC}) {\n      id\n      workDay\n      workHours\n      adminTimeHours\n      payrollCapacityHours\n    }\n  }\n  usersAggregate(where: $where) {\n    aggregate {\n      count\n    }\n  }\n  activeStaff: usersAggregate(\n    where: {isStaff: {_eq: true}, isActive: {_eq: true}}\n  ) {\n    aggregate {\n      count\n    }\n  }\n  managersCount: usersAggregate(\n    where: {role: {_in: [\"manager\", \"org_admin\", \"developer\"]}, isActive: {_eq: true}}\n  ) {\n    aggregate {\n      count\n    }\n  }\n}\n\nquery GetUsersForDropdownDomain {\n  users {\n    id\n    name\n    email\n    role\n  }\n}\n\nquery GetManagers {\n  users(where: {role: {_in: [\"manager\", \"org_admin\"]}, isActive: {_eq: true}}) {\n    ...UserBase\n    username\n    image\n    managerId\n  }\n}\n\nquery GetUserCount {\n  usersAggregate {\n    aggregate {\n      count\n    }\n  }\n}\n\nquery GetActiveUsers {\n  users(where: {isActive: {_eq: true}}, orderBy: {name: ASC}) {\n    ...UserBase\n  }\n}\n\nquery GetUserById($id: uuid!) {\n  userById(id: $id) {\n    id\n    name\n    email\n    role\n    username\n    image\n    isStaff\n    isActive\n    managerId\n    clerkUserId\n    managerUser {\n      id\n      name\n      email\n      role\n    }\n  }\n}\n\nquery GetStaffDetailComplete($id: uuid!) {\n  userById(id: $id) {\n    id\n    name\n    email\n    role\n    username\n    image\n    isStaff\n    isActive\n    managerId\n    clerkUserId\n    createdAt\n    updatedAt\n    managerUser {\n      id\n      name\n      email\n      role\n    }\n    managedUsers {\n      id\n      name\n      email\n      role\n      isActive\n    }\n    userSkills {\n      skillName\n      proficiencyLevel\n    }\n  }\n  userPermissions: userRoles(where: {userId: {_eq: $id}}) {\n    roleId\n    userId\n  }\n  permissionOverrides(where: {userId: {_eq: $id}}) {\n    id\n    resource\n    granted\n    reason\n    expiresAt\n    createdAt\n    createdBy\n  }\n  userActivity: auditLogs(\n    where: {userId: {_eq: $id}}\n    orderBy: {eventTime: DESC}\n    limit: 10\n  ) {\n    id\n    action\n    resourceType\n    eventTime\n    success\n  }\n  managedPayrolls: payrolls(\n    where: {_or: [{primaryConsultantUserId: {_eq: $id}}, {backupConsultantUserId: {_eq: $id}}, {managerUserId: {_eq: $id}}], supersededDate: {_isNull: true}}\n    limit: 5\n  ) {\n    id\n    name\n    status\n    client {\n      id\n      name\n    }\n  }\n}\n\nquery GetUserByClerkId($clerkUserId: String!) {\n  users(where: {clerkUserId: {_eq: $clerkUserId}}, limit: 1) {\n    id\n    name\n    email\n    role\n    username\n    image\n    isStaff\n    isActive\n    managerId\n    clerkUserId\n  }\n}\n\nquery GetUserByEmail($email: String!) {\n  users(where: {email: {_eq: $email}}) {\n    id\n    name\n    email\n    role\n    username\n    image\n    isStaff\n    isActive\n    managerId\n    clerkUserId\n    managerUser {\n      id\n      name\n      email\n      role\n    }\n  }\n}\n\nquery GetStaffList {\n  users(\n    where: {isActive: {_eq: true}, role: {_in: [\"developer\", \"org_admin\", \"manager\", \"consultant\"]}}\n    orderBy: {name: ASC}\n  ) {\n    id\n    name\n    email\n    role\n    username\n    image\n    isStaff\n    isActive\n    managerId\n    clerkUserId\n    managerUser {\n      id\n      name\n      email\n      role\n    }\n  }\n}\n\nquery GetStaffById($id: uuid!) {\n  userById(id: $id) {\n    id\n    name\n    email\n    role\n    username\n    image\n    isStaff\n    isActive\n    clerkUserId\n    createdAt\n    updatedAt\n  }\n}\n\nquery GetAllUsersList {\n  users(where: {isActive: {_eq: true}}, orderBy: {name: ASC}) {\n    id\n    name\n    email\n    role\n    username\n    image\n    isStaff\n    isActive\n    managerId\n    clerkUserId\n  }\n}\n\nquery GetUserProfile($id: uuid!) {\n  userById(id: $id) {\n    ...UserWithProfile\n  }\n}\n\nquery GetUsersWithRoles {\n  users(where: {isActive: {_eq: true}}, orderBy: {name: ASC}) {\n    ...UserRoleInfo\n  }\n}\n\nquery GetUserPermissions($id: uuid!) {\n  userById(id: $id) {\n    ...UserPermissionsInfo\n  }\n}\n\nquery SearchUsers($searchTerm: String!) {\n  users(\n    where: {_and: [{isActive: {_eq: true}}, {_or: [{name: {_ilike: $searchTerm}}, {email: {_ilike: $searchTerm}}, {username: {_ilike: $searchTerm}}]}]}\n    orderBy: {name: ASC}\n    limit: 50\n  ) {\n    ...UserWithProfile\n  }\n}\n\nquery GetUsersForAudit {\n  users(orderBy: {createdAt: DESC}) {\n    ...UserForAudit\n  }\n}\n\nquery GetUserStats {\n  usersAggregate {\n    aggregate {\n      count\n    }\n  }\n  activeUsers: usersAggregate(where: {isActive: {_eq: true}}) {\n    aggregate {\n      count\n    }\n  }\n  byRole: usersAggregate {\n    nodes {\n      role\n    }\n    aggregate {\n      count\n    }\n  }\n}\n\nquery GetUserSessionInfo($id: uuid!) {\n  userById(id: $id) {\n    id\n    name\n    email\n    role\n    isActive\n  }\n}\n\nquery GetCurrentUserDomain($currentUserId: uuid!) {\n  userById(id: $currentUserId) {\n    id\n    name\n    role\n    isStaff\n    isActive\n    managerId\n    clerkUserId\n    createdAt\n    updatedAt\n  }\n}\n\nquery GetUserRole($userId: uuid!) {\n  userById(id: $userId) {\n    id\n    role\n    isStaff\n    isActive\n  }\n}\n\nquery GetUserRoleFallback($userId: uuid!) {\n  userById(id: $userId) {\n    id\n    role\n    isStaff\n    isActive\n    clerkUserId\n  }\n}\n\nquery GetUsersWithLimit($limit: Int = 10) {\n  users(limit: $limit) {\n    id\n    name\n    email\n    role\n    isStaff\n    clerkUserId\n  }\n}\n\nquery GetUserProfileSettings($id: uuid!) {\n  userById(id: $id) {\n    id\n    name\n    email\n    role\n    isStaff\n    isActive\n    clerkUserId\n    managerUser {\n      id\n      name\n      email\n    }\n  }\n}\n\nquery GetUsersWithFiltering($limit: Int = 50, $offset: Int = 0, $where: usersBoolExp) {\n  users(limit: $limit, offset: $offset, where: $where, orderBy: {createdAt: DESC}) {\n    id\n    name\n    email\n    role\n    createdAt\n    updatedAt\n    isStaff\n    isActive\n    managerId\n    clerkUserId\n    managerUser {\n      id\n      name\n      email\n    }\n  }\n  usersAggregate(where: $where) {\n    aggregate {\n      count\n    }\n  }\n}\n\nquery GetDeveloperManagers {\n  users(where: {role: {_in: [\"developer\", \"manager\"]}}, orderBy: {name: ASC}) {\n    id\n    name\n    email\n    role\n  }\n}\n\nquery GetUserRoleSecure($userId: uuid!) {\n  userById(id: $userId) {\n    id\n    role\n    isStaff\n    isActive\n  }\n}\n\nquery GetUserRoleFallbackSecure($userId: uuid!) {\n  userById(id: $userId) {\n    id\n    role\n    isStaff\n    isActive\n    clerkUserId\n  }\n}\n\nquery GetUserProfileComplete($id: uuid!) {\n  userById(id: $id) {\n    id\n    name\n    email\n    username\n    image\n    phone\n    address\n    bio\n    role\n    isStaff\n    isActive\n    createdAt\n    updatedAt\n    clerkUserId\n    managerUser {\n      id\n      name\n      email\n      image\n    }\n    managedUsers {\n      id\n      name\n      email\n      role\n      image\n      isActive\n    }\n    primaryConsultantPayrolls {\n      id\n      name\n      status\n      client {\n        id\n        name\n      }\n      employeeCount\n    }\n    backupConsultantPayrolls {\n      id\n      name\n      status\n      client {\n        id\n        name\n      }\n    }\n    managedPayrolls {\n      id\n      name\n      status\n      client {\n        id\n        name\n      }\n    }\n    userWorkSchedules {\n      id\n      workDay\n      workHours\n      createdAt\n      updatedAt\n    }\n  }\n  userLeaves: leave(\n    where: {userId: {_eq: $id}}\n    orderBy: {startDate: DESC}\n    limit: 10\n  ) {\n    id\n    startDate\n    endDate\n    leaveType\n    status\n    reason\n  }\n}\n\nquery GetUserForDeletion($id: uuid!) {\n  userById(id: $id) {\n    id\n    name\n    email\n    role\n    clerkUserId\n    isStaff\n    isActive\n    createdAt\n    managerUser {\n      id\n      name\n      email\n    }\n  }\n  payrolls(\n    where: {_or: [{primaryConsultantUserId: {_eq: $id}}, {backupConsultantUserId: {_eq: $id}}, {managerUserId: {_eq: $id}}], status: {_eq: \"Active\"}}\n  ) {\n    id\n    name\n    status\n  }\n  subordinates: users(where: {managerId: {_eq: $id}, isActive: {_eq: true}}) {\n    id\n    name\n    email\n  }\n}\n\nquery GetCurrentUserRole($clerkUserId: String!) {\n  users(where: {clerkUserId: {_eq: $clerkUserId}}) {\n    id\n    role\n    isStaff\n    isActive\n  }\n}\n\nquery GetUsersPaginated($limit: Int = 20, $offset: Int = 0, $where: usersBoolExp = {}, $orderBy: [usersOrderBy!] = [{name: ASC}]) {\n  users(\n    limit: $limit\n    offset: $offset\n    where: {_and: [{isActive: {_eq: true}}, $where]}\n    orderBy: $orderBy\n  ) {\n    ...UserListItem\n  }\n  usersAggregate(where: {_and: [{isActive: {_eq: true}}, $where]}) {\n    aggregate {\n      count\n    }\n  }\n}\n\nquery GetAllUsersPaginated($limit: Int = 20, $offset: Int = 0, $where: usersBoolExp = {}, $orderBy: [usersOrderBy!] = [{name: ASC}]) {\n  users(limit: $limit, offset: $offset, where: $where, orderBy: $orderBy) {\n    ...UserTableRow\n  }\n  allUsersAggregate: usersAggregate(where: $where) {\n    aggregate {\n      count\n    }\n  }\n}\n\nquery GetStaffPaginated($limit: Int = 20, $offset: Int = 0, $where: usersBoolExp = {}) {\n  users(\n    limit: $limit\n    offset: $offset\n    where: {_and: [{isActive: {_eq: true}}, {role: {_in: [\"developer\", \"org_admin\", \"manager\", \"consultant\"]}}, $where]}\n    orderBy: {name: ASC}\n  ) {\n    ...UserListItem\n    createdAt\n    managerUser {\n      ...UserMinimal\n    }\n  }\n  staffAggregate: usersAggregate(\n    where: {_and: [{isActive: {_eq: true}}, {role: {_in: [\"developer\", \"org_admin\", \"manager\", \"consultant\"]}}, $where]}\n  ) {\n    aggregate {\n      count\n    }\n  }\n}\n\nquery SearchUsersPaginated($searchTerm: String!, $limit: Int = 20, $offset: Int = 0) {\n  users(\n    where: {_and: [{isActive: {_eq: true}}, {_or: [{name: {_ilike: $searchTerm}}, {email: {_ilike: $searchTerm}}, {username: {_ilike: $searchTerm}}]}]}\n    orderBy: {name: ASC}\n    limit: $limit\n    offset: $offset\n  ) {\n    ...UserListItem\n    createdAt\n    managerUser {\n      ...UserMinimal\n    }\n  }\n  searchAggregate: usersAggregate(\n    where: {_and: [{isActive: {_eq: true}}, {_or: [{name: {_ilike: $searchTerm}}, {email: {_ilike: $searchTerm}}, {username: {_ilike: $searchTerm}}]}]}\n  ) {\n    aggregate {\n      count\n    }\n  }\n}\n\nquery GetUserByIdComplete($id: uuid!) {\n  userById(id: $id) {\n    id\n    name\n    email\n    role\n    createdAt\n    updatedAt\n    isStaff\n    managerId\n    clerkUserId\n    managerUser {\n      id\n      name\n      email\n      role\n    }\n  }\n}\n\nquery GetUserByClerkIdComplete($clerkId: String!) {\n  users(where: {clerkUserId: {_eq: $clerkId}}) {\n    id\n    name\n    email\n    role\n    createdAt\n    updatedAt\n    isStaff\n    managerId\n    clerkUserId\n    managerUser {\n      id\n      name\n      email\n      role\n    }\n  }\n}\n\nquery GetUserClerkId($id: uuid!) {\n  userById(id: $id) {\n    id\n    name\n    email\n    role\n    clerkUserId\n    managerId\n  }\n}\n\nquery GetUsersQuickList {\n  users(where: {isActive: {_eq: true}}, orderBy: {name: ASC}) {\n    ...UserMinimal\n  }\n}\n\nquery GetStaffQuickList {\n  users(\n    where: {isActive: {_eq: true}, role: {_in: [\"developer\", \"org_admin\", \"manager\", \"consultant\"]}}\n    orderBy: {name: ASC}\n  ) {\n    ...UserMinimal\n  }\n}\n\nquery GetManagersQuickList {\n  users(\n    where: {isActive: {_eq: true}, role: {_in: [\"manager\", \"org_admin\"]}}\n    orderBy: {name: ASC}\n  ) {\n    ...UserMinimal\n  }\n}\n\nquery GetUserCard($id: uuid!) {\n  userById(id: $id) {\n    ...UserSummary\n    email\n    managerUser {\n      ...UserMinimal\n    }\n  }\n}\n\nquery GetUserAssignmentData($id: uuid!) {\n  userById(id: $id) {\n    ...UserSummary\n    email\n    activePayrollCount: primaryConsultantPayrollsAggregate(\n      where: {supersededDate: {_isNull: true}}\n    ) {\n      aggregate {\n        count\n      }\n    }\n    backupPayrollCount: backupConsultantPayrollsAggregate(\n      where: {supersededDate: {_isNull: true}}\n    ) {\n      aggregate {\n        count\n      }\n    }\n  }\n}\n\nquery GetUserWorkload($id: uuid!) {\n  userById(id: $id) {\n    ...UserSummary\n    primaryPayrolls: primaryConsultantPayrolls(\n      where: {supersededDate: {_isNull: true}}\n      limit: 10\n    ) {\n      id\n      name\n      status\n      client {\n        name\n      }\n    }\n    backupPayrolls: backupConsultantPayrolls(\n      where: {supersededDate: {_isNull: true}}\n      limit: 10\n    ) {\n      id\n      name\n      status\n      client {\n        name\n      }\n    }\n  }\n}\n\nquery GetInvitationsWithStatus($statuses: [invitation_status_enum!], $limit: Int = 50, $offset: Int = 0) {\n  userInvitations(\n    where: {invitationStatus: {_in: $statuses}}\n    orderBy: {createdAt: DESC}\n    limit: $limit\n    offset: $offset\n  ) {\n    id\n    email\n    firstName\n    lastName\n    invitedRole\n    invitationStatus\n    invitedAt\n    expiresAt\n    revokedAt\n    revokeReason\n    invitedByUser {\n      id\n      name\n      email\n    }\n  }\n  userInvitationsAggregate(where: {invitationStatus: {_in: $statuses}}) {\n    aggregate {\n      count\n    }\n  }\n}\n\nquery GetInvitationDashboardStats {\n  pending: userInvitationsAggregate(\n    where: {invitationStatus: {_eq: \"pending\"}, expiresAt: {_gt: \"now()\"}}\n  ) {\n    aggregate {\n      count\n    }\n  }\n  expired: userInvitationsAggregate(where: {invitationStatus: {_eq: \"expired\"}}) {\n    aggregate {\n      count\n    }\n  }\n  accepted: userInvitationsAggregate(where: {invitationStatus: {_eq: \"accepted\"}}) {\n    aggregate {\n      count\n    }\n  }\n  revoked: userInvitationsAggregate(where: {invitationStatus: {_eq: \"revoked\"}}) {\n    aggregate {\n      count\n    }\n  }\n  expiringSoon: userInvitationsAggregate(\n    where: {invitationStatus: {_eq: \"pending\"}, expiresAt: {_gt: \"now()\", _lt: \"now() + interval '7 days'\"}}\n  ) {\n    aggregate {\n      count\n    }\n  }\n  recentInvitations: userInvitations(\n    where: {createdAt: {_gte: \"now() - interval '30 days'\"}}\n    orderBy: {createdAt: DESC}\n    limit: 10\n  ) {\n    id\n    email\n    firstName\n    lastName\n    invitationStatus\n    createdAt\n    expiresAt\n    invitedByUser {\n      name\n      email\n    }\n  }\n  byStatus: userInvitationsAggregate {\n    aggregate {\n      count\n    }\n  }\n}\n\nquery GetExpiringInvitations($daysUntilExpiry: interval!) {\n  userInvitations(\n    where: {invitationStatus: {_eq: \"pending\"}, expiresAt: {_gt: \"now()\", _lt: \"now() + $daysUntilExpiry\"}}\n    orderBy: {expiresAt: ASC}\n  ) {\n    id\n    email\n    firstName\n    lastName\n    expiresAt\n    invitedByUser {\n      name\n      email\n    }\n  }\n}\n\nquery GetUsersByStatus($statuses: [user_status_enum!], $limit: Int = 50, $offset: Int = 0) {\n  users(\n    where: {status: {_in: $statuses}}\n    orderBy: {updatedAt: DESC}\n    limit: $limit\n    offset: $offset\n  ) {\n    id\n    email\n    name\n    role\n    status\n    isActive\n    isStaff\n    statusChangedAt\n    statusChangeReason\n    deactivatedAt\n    createdAt\n  }\n  usersAggregate(where: {status: {_in: $statuses}}) {\n    aggregate {\n      count\n    }\n  }\n}\n\nquery GetUserWithStatusDetails($userId: uuid!) {\n  userById(id: $userId) {\n    id\n    email\n    name\n    role\n    status\n    isActive\n    isStaff\n    clerkUserId\n    statusChangedAt\n    statusChangedBy\n    statusChangeReason\n    deactivatedAt\n    deactivatedBy\n    createdAt\n    updatedAt\n  }\n}\n\nquery GetCurrentUserRoleForManagement($userId: uuid!) {\n  userById(id: $userId) {\n    id\n    role\n  }\n}"): (typeof documents)["query GetUsers($limit: Int = 50, $offset: Int = 0, $where: usersBoolExp) {\n  users(limit: $limit, offset: $offset, where: $where, orderBy: {name: ASC}) {\n    ...UserBase\n    username\n    image\n    managerId\n    managerUser {\n      id\n      name\n      email\n      role\n    }\n  }\n}\n\nquery GetStaffWithRelationsOptimized($limit: Int = 50, $offset: Int = 0, $where: usersBoolExp = {isStaff: {_eq: true}, isActive: {_eq: true}}, $orderBy: [usersOrderBy!] = [{name: ASC}]) {\n  users(limit: $limit, offset: $offset, where: $where, orderBy: $orderBy) {\n    id\n    name\n    email\n    role\n    username\n    image\n    isActive\n    isStaff\n    managerId\n    clerkUserId\n    createdAt\n    updatedAt\n    managerUser {\n      id\n      name\n      email\n      role\n      isActive\n    }\n    managedUsers(where: {isActive: {_eq: true}}) {\n      id\n      name\n      email\n      role\n      isActive\n    }\n    primaryConsultantPayrolls(\n      where: {supersededDate: {_isNull: true}}\n      limit: 5\n      orderBy: {updatedAt: DESC}\n    ) {\n      id\n      name\n      status\n      client {\n        id\n        name\n      }\n      nextPayrollDate: payrollDates(\n        where: {adjustedEftDate: {_gte: \"now()\"}}\n        orderBy: {adjustedEftDate: ASC}\n        limit: 1\n      ) {\n        adjustedEftDate\n      }\n    }\n    backupConsultantPayrolls(\n      where: {supersededDate: {_isNull: true}}\n      limit: 3\n      orderBy: {updatedAt: DESC}\n    ) {\n      id\n      name\n      status\n      client {\n        id\n        name\n      }\n    }\n    userWorkSchedules(orderBy: {workDay: ASC}) {\n      id\n      workDay\n      workHours\n      adminTimeHours\n      payrollCapacityHours\n    }\n  }\n  usersAggregate(where: $where) {\n    aggregate {\n      count\n    }\n  }\n  activeStaff: usersAggregate(\n    where: {isStaff: {_eq: true}, isActive: {_eq: true}}\n  ) {\n    aggregate {\n      count\n    }\n  }\n  managersCount: usersAggregate(\n    where: {role: {_in: [\"manager\", \"org_admin\", \"developer\"]}, isActive: {_eq: true}}\n  ) {\n    aggregate {\n      count\n    }\n  }\n}\n\nquery GetUsersForDropdownDomain {\n  users {\n    id\n    name\n    email\n    role\n  }\n}\n\nquery GetManagers {\n  users(where: {role: {_in: [\"manager\", \"org_admin\"]}, isActive: {_eq: true}}) {\n    ...UserBase\n    username\n    image\n    managerId\n  }\n}\n\nquery GetUserCount {\n  usersAggregate {\n    aggregate {\n      count\n    }\n  }\n}\n\nquery GetActiveUsers {\n  users(where: {isActive: {_eq: true}}, orderBy: {name: ASC}) {\n    ...UserBase\n  }\n}\n\nquery GetUserById($id: uuid!) {\n  userById(id: $id) {\n    id\n    name\n    email\n    role\n    username\n    image\n    isStaff\n    isActive\n    managerId\n    clerkUserId\n    managerUser {\n      id\n      name\n      email\n      role\n    }\n  }\n}\n\nquery GetStaffDetailComplete($id: uuid!) {\n  userById(id: $id) {\n    id\n    name\n    email\n    role\n    username\n    image\n    isStaff\n    isActive\n    managerId\n    clerkUserId\n    createdAt\n    updatedAt\n    managerUser {\n      id\n      name\n      email\n      role\n    }\n    managedUsers {\n      id\n      name\n      email\n      role\n      isActive\n    }\n    userSkills {\n      skillName\n      proficiencyLevel\n    }\n  }\n  userPermissions: userRoles(where: {userId: {_eq: $id}}) {\n    roleId\n    userId\n  }\n  permissionOverrides(where: {userId: {_eq: $id}}) {\n    id\n    resource\n    granted\n    reason\n    expiresAt\n    createdAt\n    createdBy\n  }\n  userActivity: auditLogs(\n    where: {userId: {_eq: $id}}\n    orderBy: {eventTime: DESC}\n    limit: 10\n  ) {\n    id\n    action\n    resourceType\n    eventTime\n    success\n  }\n  managedPayrolls: payrolls(\n    where: {_or: [{primaryConsultantUserId: {_eq: $id}}, {backupConsultantUserId: {_eq: $id}}, {managerUserId: {_eq: $id}}], supersededDate: {_isNull: true}}\n    limit: 5\n  ) {\n    id\n    name\n    status\n    client {\n      id\n      name\n    }\n  }\n}\n\nquery GetUserByClerkId($clerkUserId: String!) {\n  users(where: {clerkUserId: {_eq: $clerkUserId}}, limit: 1) {\n    id\n    name\n    email\n    role\n    username\n    image\n    isStaff\n    isActive\n    managerId\n    clerkUserId\n  }\n}\n\nquery GetUserByEmail($email: String!) {\n  users(where: {email: {_eq: $email}}) {\n    id\n    name\n    email\n    role\n    username\n    image\n    isStaff\n    isActive\n    managerId\n    clerkUserId\n    managerUser {\n      id\n      name\n      email\n      role\n    }\n  }\n}\n\nquery GetStaffList {\n  users(\n    where: {isActive: {_eq: true}, role: {_in: [\"developer\", \"org_admin\", \"manager\", \"consultant\"]}}\n    orderBy: {name: ASC}\n  ) {\n    id\n    name\n    email\n    role\n    username\n    image\n    isStaff\n    isActive\n    managerId\n    clerkUserId\n    managerUser {\n      id\n      name\n      email\n      role\n    }\n  }\n}\n\nquery GetStaffById($id: uuid!) {\n  userById(id: $id) {\n    id\n    name\n    email\n    role\n    username\n    image\n    isStaff\n    isActive\n    clerkUserId\n    createdAt\n    updatedAt\n  }\n}\n\nquery GetAllUsersList {\n  users(where: {isActive: {_eq: true}}, orderBy: {name: ASC}) {\n    id\n    name\n    email\n    role\n    username\n    image\n    isStaff\n    isActive\n    managerId\n    clerkUserId\n  }\n}\n\nquery GetUserProfile($id: uuid!) {\n  userById(id: $id) {\n    ...UserWithProfile\n  }\n}\n\nquery GetUsersWithRoles {\n  users(where: {isActive: {_eq: true}}, orderBy: {name: ASC}) {\n    ...UserRoleInfo\n  }\n}\n\nquery GetUserPermissions($id: uuid!) {\n  userById(id: $id) {\n    ...UserPermissionsInfo\n  }\n}\n\nquery SearchUsers($searchTerm: String!) {\n  users(\n    where: {_and: [{isActive: {_eq: true}}, {_or: [{name: {_ilike: $searchTerm}}, {email: {_ilike: $searchTerm}}, {username: {_ilike: $searchTerm}}]}]}\n    orderBy: {name: ASC}\n    limit: 50\n  ) {\n    ...UserWithProfile\n  }\n}\n\nquery GetUsersForAudit {\n  users(orderBy: {createdAt: DESC}) {\n    ...UserForAudit\n  }\n}\n\nquery GetUserStats {\n  usersAggregate {\n    aggregate {\n      count\n    }\n  }\n  activeUsers: usersAggregate(where: {isActive: {_eq: true}}) {\n    aggregate {\n      count\n    }\n  }\n  byRole: usersAggregate {\n    nodes {\n      role\n    }\n    aggregate {\n      count\n    }\n  }\n}\n\nquery GetUserSessionInfo($id: uuid!) {\n  userById(id: $id) {\n    id\n    name\n    email\n    role\n    isActive\n  }\n}\n\nquery GetCurrentUserDomain($currentUserId: uuid!) {\n  userById(id: $currentUserId) {\n    id\n    name\n    role\n    isStaff\n    isActive\n    managerId\n    clerkUserId\n    createdAt\n    updatedAt\n  }\n}\n\nquery GetUserRole($userId: uuid!) {\n  userById(id: $userId) {\n    id\n    role\n    isStaff\n    isActive\n  }\n}\n\nquery GetUserRoleFallback($userId: uuid!) {\n  userById(id: $userId) {\n    id\n    role\n    isStaff\n    isActive\n    clerkUserId\n  }\n}\n\nquery GetUsersWithLimit($limit: Int = 10) {\n  users(limit: $limit) {\n    id\n    name\n    email\n    role\n    isStaff\n    clerkUserId\n  }\n}\n\nquery GetUserProfileSettings($id: uuid!) {\n  userById(id: $id) {\n    id\n    name\n    email\n    role\n    isStaff\n    isActive\n    clerkUserId\n    managerUser {\n      id\n      name\n      email\n    }\n  }\n}\n\nquery GetUsersWithFiltering($limit: Int = 50, $offset: Int = 0, $where: usersBoolExp) {\n  users(limit: $limit, offset: $offset, where: $where, orderBy: {createdAt: DESC}) {\n    id\n    name\n    email\n    role\n    createdAt\n    updatedAt\n    isStaff\n    isActive\n    managerId\n    clerkUserId\n    managerUser {\n      id\n      name\n      email\n    }\n  }\n  usersAggregate(where: $where) {\n    aggregate {\n      count\n    }\n  }\n}\n\nquery GetDeveloperManagers {\n  users(where: {role: {_in: [\"developer\", \"manager\"]}}, orderBy: {name: ASC}) {\n    id\n    name\n    email\n    role\n  }\n}\n\nquery GetUserRoleSecure($userId: uuid!) {\n  userById(id: $userId) {\n    id\n    role\n    isStaff\n    isActive\n  }\n}\n\nquery GetUserRoleFallbackSecure($userId: uuid!) {\n  userById(id: $userId) {\n    id\n    role\n    isStaff\n    isActive\n    clerkUserId\n  }\n}\n\nquery GetUserProfileComplete($id: uuid!) {\n  userById(id: $id) {\n    id\n    name\n    email\n    username\n    image\n    phone\n    address\n    bio\n    role\n    isStaff\n    isActive\n    createdAt\n    updatedAt\n    clerkUserId\n    managerUser {\n      id\n      name\n      email\n      image\n    }\n    managedUsers {\n      id\n      name\n      email\n      role\n      image\n      isActive\n    }\n    primaryConsultantPayrolls {\n      id\n      name\n      status\n      client {\n        id\n        name\n      }\n      employeeCount\n    }\n    backupConsultantPayrolls {\n      id\n      name\n      status\n      client {\n        id\n        name\n      }\n    }\n    managedPayrolls {\n      id\n      name\n      status\n      client {\n        id\n        name\n      }\n    }\n    userWorkSchedules {\n      id\n      workDay\n      workHours\n      createdAt\n      updatedAt\n    }\n  }\n  userLeaves: leave(\n    where: {userId: {_eq: $id}}\n    orderBy: {startDate: DESC}\n    limit: 10\n  ) {\n    id\n    startDate\n    endDate\n    leaveType\n    status\n    reason\n  }\n}\n\nquery GetUserForDeletion($id: uuid!) {\n  userById(id: $id) {\n    id\n    name\n    email\n    role\n    clerkUserId\n    isStaff\n    isActive\n    createdAt\n    managerUser {\n      id\n      name\n      email\n    }\n  }\n  payrolls(\n    where: {_or: [{primaryConsultantUserId: {_eq: $id}}, {backupConsultantUserId: {_eq: $id}}, {managerUserId: {_eq: $id}}], status: {_eq: \"Active\"}}\n  ) {\n    id\n    name\n    status\n  }\n  subordinates: users(where: {managerId: {_eq: $id}, isActive: {_eq: true}}) {\n    id\n    name\n    email\n  }\n}\n\nquery GetCurrentUserRole($clerkUserId: String!) {\n  users(where: {clerkUserId: {_eq: $clerkUserId}}) {\n    id\n    role\n    isStaff\n    isActive\n  }\n}\n\nquery GetUsersPaginated($limit: Int = 20, $offset: Int = 0, $where: usersBoolExp = {}, $orderBy: [usersOrderBy!] = [{name: ASC}]) {\n  users(\n    limit: $limit\n    offset: $offset\n    where: {_and: [{isActive: {_eq: true}}, $where]}\n    orderBy: $orderBy\n  ) {\n    ...UserListItem\n  }\n  usersAggregate(where: {_and: [{isActive: {_eq: true}}, $where]}) {\n    aggregate {\n      count\n    }\n  }\n}\n\nquery GetAllUsersPaginated($limit: Int = 20, $offset: Int = 0, $where: usersBoolExp = {}, $orderBy: [usersOrderBy!] = [{name: ASC}]) {\n  users(limit: $limit, offset: $offset, where: $where, orderBy: $orderBy) {\n    ...UserTableRow\n  }\n  allUsersAggregate: usersAggregate(where: $where) {\n    aggregate {\n      count\n    }\n  }\n}\n\nquery GetStaffPaginated($limit: Int = 20, $offset: Int = 0, $where: usersBoolExp = {}) {\n  users(\n    limit: $limit\n    offset: $offset\n    where: {_and: [{isActive: {_eq: true}}, {role: {_in: [\"developer\", \"org_admin\", \"manager\", \"consultant\"]}}, $where]}\n    orderBy: {name: ASC}\n  ) {\n    ...UserListItem\n    createdAt\n    managerUser {\n      ...UserMinimal\n    }\n  }\n  staffAggregate: usersAggregate(\n    where: {_and: [{isActive: {_eq: true}}, {role: {_in: [\"developer\", \"org_admin\", \"manager\", \"consultant\"]}}, $where]}\n  ) {\n    aggregate {\n      count\n    }\n  }\n}\n\nquery SearchUsersPaginated($searchTerm: String!, $limit: Int = 20, $offset: Int = 0) {\n  users(\n    where: {_and: [{isActive: {_eq: true}}, {_or: [{name: {_ilike: $searchTerm}}, {email: {_ilike: $searchTerm}}, {username: {_ilike: $searchTerm}}]}]}\n    orderBy: {name: ASC}\n    limit: $limit\n    offset: $offset\n  ) {\n    ...UserListItem\n    createdAt\n    managerUser {\n      ...UserMinimal\n    }\n  }\n  searchAggregate: usersAggregate(\n    where: {_and: [{isActive: {_eq: true}}, {_or: [{name: {_ilike: $searchTerm}}, {email: {_ilike: $searchTerm}}, {username: {_ilike: $searchTerm}}]}]}\n  ) {\n    aggregate {\n      count\n    }\n  }\n}\n\nquery GetUserByIdComplete($id: uuid!) {\n  userById(id: $id) {\n    id\n    name\n    email\n    role\n    createdAt\n    updatedAt\n    isStaff\n    managerId\n    clerkUserId\n    managerUser {\n      id\n      name\n      email\n      role\n    }\n  }\n}\n\nquery GetUserByClerkIdComplete($clerkId: String!) {\n  users(where: {clerkUserId: {_eq: $clerkId}}) {\n    id\n    name\n    email\n    role\n    createdAt\n    updatedAt\n    isStaff\n    managerId\n    clerkUserId\n    managerUser {\n      id\n      name\n      email\n      role\n    }\n  }\n}\n\nquery GetUserClerkId($id: uuid!) {\n  userById(id: $id) {\n    id\n    name\n    email\n    role\n    clerkUserId\n    managerId\n  }\n}\n\nquery GetUsersQuickList {\n  users(where: {isActive: {_eq: true}}, orderBy: {name: ASC}) {\n    ...UserMinimal\n  }\n}\n\nquery GetStaffQuickList {\n  users(\n    where: {isActive: {_eq: true}, role: {_in: [\"developer\", \"org_admin\", \"manager\", \"consultant\"]}}\n    orderBy: {name: ASC}\n  ) {\n    ...UserMinimal\n  }\n}\n\nquery GetManagersQuickList {\n  users(\n    where: {isActive: {_eq: true}, role: {_in: [\"manager\", \"org_admin\"]}}\n    orderBy: {name: ASC}\n  ) {\n    ...UserMinimal\n  }\n}\n\nquery GetUserCard($id: uuid!) {\n  userById(id: $id) {\n    ...UserSummary\n    email\n    managerUser {\n      ...UserMinimal\n    }\n  }\n}\n\nquery GetUserAssignmentData($id: uuid!) {\n  userById(id: $id) {\n    ...UserSummary\n    email\n    activePayrollCount: primaryConsultantPayrollsAggregate(\n      where: {supersededDate: {_isNull: true}}\n    ) {\n      aggregate {\n        count\n      }\n    }\n    backupPayrollCount: backupConsultantPayrollsAggregate(\n      where: {supersededDate: {_isNull: true}}\n    ) {\n      aggregate {\n        count\n      }\n    }\n  }\n}\n\nquery GetUserWorkload($id: uuid!) {\n  userById(id: $id) {\n    ...UserSummary\n    primaryPayrolls: primaryConsultantPayrolls(\n      where: {supersededDate: {_isNull: true}}\n      limit: 10\n    ) {\n      id\n      name\n      status\n      client {\n        name\n      }\n    }\n    backupPayrolls: backupConsultantPayrolls(\n      where: {supersededDate: {_isNull: true}}\n      limit: 10\n    ) {\n      id\n      name\n      status\n      client {\n        name\n      }\n    }\n  }\n}\n\nquery GetInvitationsWithStatus($statuses: [invitation_status_enum!], $limit: Int = 50, $offset: Int = 0) {\n  userInvitations(\n    where: {invitationStatus: {_in: $statuses}}\n    orderBy: {createdAt: DESC}\n    limit: $limit\n    offset: $offset\n  ) {\n    id\n    email\n    firstName\n    lastName\n    invitedRole\n    invitationStatus\n    invitedAt\n    expiresAt\n    revokedAt\n    revokeReason\n    invitedByUser {\n      id\n      name\n      email\n    }\n  }\n  userInvitationsAggregate(where: {invitationStatus: {_in: $statuses}}) {\n    aggregate {\n      count\n    }\n  }\n}\n\nquery GetInvitationDashboardStats {\n  pending: userInvitationsAggregate(\n    where: {invitationStatus: {_eq: \"pending\"}, expiresAt: {_gt: \"now()\"}}\n  ) {\n    aggregate {\n      count\n    }\n  }\n  expired: userInvitationsAggregate(where: {invitationStatus: {_eq: \"expired\"}}) {\n    aggregate {\n      count\n    }\n  }\n  accepted: userInvitationsAggregate(where: {invitationStatus: {_eq: \"accepted\"}}) {\n    aggregate {\n      count\n    }\n  }\n  revoked: userInvitationsAggregate(where: {invitationStatus: {_eq: \"revoked\"}}) {\n    aggregate {\n      count\n    }\n  }\n  expiringSoon: userInvitationsAggregate(\n    where: {invitationStatus: {_eq: \"pending\"}, expiresAt: {_gt: \"now()\", _lt: \"now() + interval '7 days'\"}}\n  ) {\n    aggregate {\n      count\n    }\n  }\n  recentInvitations: userInvitations(\n    where: {createdAt: {_gte: \"now() - interval '30 days'\"}}\n    orderBy: {createdAt: DESC}\n    limit: 10\n  ) {\n    id\n    email\n    firstName\n    lastName\n    invitationStatus\n    createdAt\n    expiresAt\n    invitedByUser {\n      name\n      email\n    }\n  }\n  byStatus: userInvitationsAggregate {\n    aggregate {\n      count\n    }\n  }\n}\n\nquery GetExpiringInvitations($daysUntilExpiry: interval!) {\n  userInvitations(\n    where: {invitationStatus: {_eq: \"pending\"}, expiresAt: {_gt: \"now()\", _lt: \"now() + $daysUntilExpiry\"}}\n    orderBy: {expiresAt: ASC}\n  ) {\n    id\n    email\n    firstName\n    lastName\n    expiresAt\n    invitedByUser {\n      name\n      email\n    }\n  }\n}\n\nquery GetUsersByStatus($statuses: [user_status_enum!], $limit: Int = 50, $offset: Int = 0) {\n  users(\n    where: {status: {_in: $statuses}}\n    orderBy: {updatedAt: DESC}\n    limit: $limit\n    offset: $offset\n  ) {\n    id\n    email\n    name\n    role\n    status\n    isActive\n    isStaff\n    statusChangedAt\n    statusChangeReason\n    deactivatedAt\n    createdAt\n  }\n  usersAggregate(where: {status: {_in: $statuses}}) {\n    aggregate {\n      count\n    }\n  }\n}\n\nquery GetUserWithStatusDetails($userId: uuid!) {\n  userById(id: $userId) {\n    id\n    email\n    name\n    role\n    status\n    isActive\n    isStaff\n    clerkUserId\n    statusChangedAt\n    statusChangedBy\n    statusChangeReason\n    deactivatedAt\n    deactivatedBy\n    createdAt\n    updatedAt\n  }\n}\n\nquery GetCurrentUserRoleForManagement($userId: uuid!) {\n  userById(id: $userId) {\n    id\n    role\n  }\n}"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "subscription UserUpdates($userId: uuid!) {\n  userById(id: $userId) {\n    ...UserProfile\n    updatedAt\n  }\n}\n\nsubscription ActiveUsers {\n  users(where: {isActive: {_eq: true}}) {\n    id\n    name\n    email\n    updatedAt\n  }\n}\n\nsubscription UserAuthEvents($userId: uuid!) {\n  authEvents(where: {userId: {_eq: $userId}}) {\n    id\n    createdAt\n    ipAddress\n    userAgent\n  }\n}\n\nsubscription PermissionOverrideChanges($userId: uuid!) {\n  permissionOverrides(where: {userId: {_eq: $userId}}, orderBy: {createdAt: DESC}) {\n    id\n    resource\n    operation\n    granted\n    reason\n    expiresAt\n    createdAt\n    createdBy\n    createdByUser {\n      ...UserMinimal\n    }\n  }\n}"): (typeof documents)["subscription UserUpdates($userId: uuid!) {\n  userById(id: $userId) {\n    ...UserProfile\n    updatedAt\n  }\n}\n\nsubscription ActiveUsers {\n  users(where: {isActive: {_eq: true}}) {\n    id\n    name\n    email\n    updatedAt\n  }\n}\n\nsubscription UserAuthEvents($userId: uuid!) {\n  authEvents(where: {userId: {_eq: $userId}}) {\n    id\n    createdAt\n    ipAddress\n    userAgent\n  }\n}\n\nsubscription PermissionOverrideChanges($userId: uuid!) {\n  permissionOverrides(where: {userId: {_eq: $userId}}, orderBy: {createdAt: DESC}) {\n    id\n    resource\n    operation\n    granted\n    reason\n    expiresAt\n    createdAt\n    createdBy\n    createdByUser {\n      ...UserMinimal\n    }\n  }\n}"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "fragment UserMinimal on users {\n  id\n  name\n  email\n}\n\nfragment UserCoreShared on users {\n  ...UserMinimal\n  role\n  isActive\n}\n\nfragment UserBasic on users {\n  ...UserCoreShared\n  createdAt\n  updatedAt\n}\n\nfragment UserBase on users {\n  ...UserBasic\n}\n\nfragment UserWithRole on users {\n  ...UserBasic\n  username\n  isStaff\n}\n\nfragment UserProfile on users {\n  ...UserWithRole\n  clerkUserId\n  image\n  managerId\n  deactivatedAt\n  deactivatedBy\n  managerUser {\n    ...UserMinimal\n  }\n}\n\nfragment UserSearchResult on users {\n  ...UserCoreShared\n  username\n  isStaff\n}\n\nfragment ClientMinimal on clients {\n  id\n  name\n}\n\nfragment ClientBase on clients {\n  id\n  name\n  active\n  contactEmail\n  contactPerson\n  contactPhone\n  createdAt\n}\n\nfragment ClientWithStats on clients {\n  ...ClientBase\n  currentEmployeeCount: payrollsAggregate(\n    where: {supersededDate: {_isNull: true}}\n  ) {\n    aggregate {\n      sum {\n        employeeCount\n      }\n    }\n  }\n  activePayrollCount: payrollsAggregate(\n    where: {supersededDate: {_isNull: true}, status: {_eq: \"Active\"}}\n  ) {\n    aggregate {\n      count\n    }\n  }\n}\n\nfragment ClientListBase on clients {\n  ...ClientBase\n  payrollCount: payrollsAggregate(where: {supersededDate: {_isNull: true}}) {\n    aggregate {\n      count\n    }\n  }\n}\n\nfragment PayrollMinimal on payrolls {\n  id\n  name\n  employeeCount\n  status\n}\n\nfragment PayrollBase on payrolls {\n  id\n  name\n  employeeCount\n  status\n  payrollSystem\n  processingTime\n  processingDaysBeforeEft\n  versionNumber\n  createdAt\n  updatedAt\n}\n\nfragment PayrollWithClient on payrolls {\n  ...PayrollBase\n  clientId\n  client {\n    id\n    name\n    active\n  }\n}\n\nfragment PayrollListItem on payrolls {\n  ...PayrollWithClient\n  primaryConsultantUserId\n  backupConsultantUserId\n  managerUserId\n  createdByUserId\n  primaryConsultant {\n    ...UserMinimal\n  }\n  backupConsultant {\n    ...UserMinimal\n  }\n  manager {\n    ...UserMinimal\n  }\n}\n\nfragment PayrollWithDates on payrolls {\n  ...PayrollBase\n  goLiveDate\n  payrollDates(orderBy: {originalEftDate: ASC}) {\n    id\n    originalEftDate\n    adjustedEftDate\n    notes\n  }\n}\n\nfragment PayrollFullDetail on payrolls {\n  ...PayrollWithDates\n  ...PayrollWithClient\n  dateTypeId\n  cycleId\n  dateValue\n  versionReason\n  supersededDate\n  parentPayrollId\n  parentPayroll {\n    id\n    versionNumber\n  }\n  childPayrolls(orderBy: {versionNumber: DESC}) {\n    id\n    versionNumber\n    versionReason\n    createdAt\n  }\n  primaryConsultant {\n    ...UserMinimal\n  }\n  backupConsultant {\n    ...UserMinimal\n  }\n  manager {\n    ...UserMinimal\n  }\n}\n\nfragment NoteWithAuthor on notes {\n  id\n  content\n  isImportant\n  createdAt\n  entityId\n  entityType\n  authorUser {\n    ...UserMinimal\n  }\n}\n\nfragment PermissionBase on permissions {\n  id\n  resourceId\n  description\n  legacyPermissionName\n  action\n}\n\nfragment RoleWithPermissions on roles {\n  id\n  name\n  displayName\n  description\n  isSystemRole\n  priority\n  assignedPermissions {\n    grantedPermission {\n      ...PermissionBase\n    }\n  }\n}\n\nfragment AuditLogEntry on auditLogs {\n  id\n  userId\n  userEmail\n  userRole\n  action\n  resourceType\n  resourceId\n  eventTime\n  success\n  errorMessage\n  ipAddress\n  userAgent\n  requestId\n  sessionId\n  metadata\n  oldValues\n  newValues\n  createdAt\n}\n\nfragment AuthEvent on authEvents {\n  id\n  userId\n  userEmail\n  eventType\n  eventTime\n  success\n  failureReason\n  ipAddress\n  userAgent\n  metadata\n}\n\nfragment DataAccessLog on dataAccessLogs {\n  id\n  userId\n  resourceType\n  resourceId\n  accessType\n  accessedAt\n  dataClassification\n  fieldsAccessed\n  rowCount\n  ipAddress\n  metadata\n}\n\nfragment PermissionChange on permissionChanges {\n  id\n  changedAt\n  changedByUserId\n  targetUserId\n  targetRoleId\n  changeType\n  permissionType\n  oldPermissions\n  newPermissions\n  reason\n  approvedByUserId\n}\n\nfragment PayrollDateInfo on payrollDates {\n  id\n  originalEftDate\n  adjustedEftDate\n  notes\n  createdAt\n}\n\nfragment PermissionOverrideInfo on permissionOverrides {\n  id\n  userId\n  role\n  resource\n  operation\n  granted\n  reason\n  conditions\n  expiresAt\n  createdBy\n  createdAt\n}"): (typeof documents)["fragment UserMinimal on users {\n  id\n  name\n  email\n}\n\nfragment UserCoreShared on users {\n  ...UserMinimal\n  role\n  isActive\n}\n\nfragment UserBasic on users {\n  ...UserCoreShared\n  createdAt\n  updatedAt\n}\n\nfragment UserBase on users {\n  ...UserBasic\n}\n\nfragment UserWithRole on users {\n  ...UserBasic\n  username\n  isStaff\n}\n\nfragment UserProfile on users {\n  ...UserWithRole\n  clerkUserId\n  image\n  managerId\n  deactivatedAt\n  deactivatedBy\n  managerUser {\n    ...UserMinimal\n  }\n}\n\nfragment UserSearchResult on users {\n  ...UserCoreShared\n  username\n  isStaff\n}\n\nfragment ClientMinimal on clients {\n  id\n  name\n}\n\nfragment ClientBase on clients {\n  id\n  name\n  active\n  contactEmail\n  contactPerson\n  contactPhone\n  createdAt\n}\n\nfragment ClientWithStats on clients {\n  ...ClientBase\n  currentEmployeeCount: payrollsAggregate(\n    where: {supersededDate: {_isNull: true}}\n  ) {\n    aggregate {\n      sum {\n        employeeCount\n      }\n    }\n  }\n  activePayrollCount: payrollsAggregate(\n    where: {supersededDate: {_isNull: true}, status: {_eq: \"Active\"}}\n  ) {\n    aggregate {\n      count\n    }\n  }\n}\n\nfragment ClientListBase on clients {\n  ...ClientBase\n  payrollCount: payrollsAggregate(where: {supersededDate: {_isNull: true}}) {\n    aggregate {\n      count\n    }\n  }\n}\n\nfragment PayrollMinimal on payrolls {\n  id\n  name\n  employeeCount\n  status\n}\n\nfragment PayrollBase on payrolls {\n  id\n  name\n  employeeCount\n  status\n  payrollSystem\n  processingTime\n  processingDaysBeforeEft\n  versionNumber\n  createdAt\n  updatedAt\n}\n\nfragment PayrollWithClient on payrolls {\n  ...PayrollBase\n  clientId\n  client {\n    id\n    name\n    active\n  }\n}\n\nfragment PayrollListItem on payrolls {\n  ...PayrollWithClient\n  primaryConsultantUserId\n  backupConsultantUserId\n  managerUserId\n  createdByUserId\n  primaryConsultant {\n    ...UserMinimal\n  }\n  backupConsultant {\n    ...UserMinimal\n  }\n  manager {\n    ...UserMinimal\n  }\n}\n\nfragment PayrollWithDates on payrolls {\n  ...PayrollBase\n  goLiveDate\n  payrollDates(orderBy: {originalEftDate: ASC}) {\n    id\n    originalEftDate\n    adjustedEftDate\n    notes\n  }\n}\n\nfragment PayrollFullDetail on payrolls {\n  ...PayrollWithDates\n  ...PayrollWithClient\n  dateTypeId\n  cycleId\n  dateValue\n  versionReason\n  supersededDate\n  parentPayrollId\n  parentPayroll {\n    id\n    versionNumber\n  }\n  childPayrolls(orderBy: {versionNumber: DESC}) {\n    id\n    versionNumber\n    versionReason\n    createdAt\n  }\n  primaryConsultant {\n    ...UserMinimal\n  }\n  backupConsultant {\n    ...UserMinimal\n  }\n  manager {\n    ...UserMinimal\n  }\n}\n\nfragment NoteWithAuthor on notes {\n  id\n  content\n  isImportant\n  createdAt\n  entityId\n  entityType\n  authorUser {\n    ...UserMinimal\n  }\n}\n\nfragment PermissionBase on permissions {\n  id\n  resourceId\n  description\n  legacyPermissionName\n  action\n}\n\nfragment RoleWithPermissions on roles {\n  id\n  name\n  displayName\n  description\n  isSystemRole\n  priority\n  assignedPermissions {\n    grantedPermission {\n      ...PermissionBase\n    }\n  }\n}\n\nfragment AuditLogEntry on auditLogs {\n  id\n  userId\n  userEmail\n  userRole\n  action\n  resourceType\n  resourceId\n  eventTime\n  success\n  errorMessage\n  ipAddress\n  userAgent\n  requestId\n  sessionId\n  metadata\n  oldValues\n  newValues\n  createdAt\n}\n\nfragment AuthEvent on authEvents {\n  id\n  userId\n  userEmail\n  eventType\n  eventTime\n  success\n  failureReason\n  ipAddress\n  userAgent\n  metadata\n}\n\nfragment DataAccessLog on dataAccessLogs {\n  id\n  userId\n  resourceType\n  resourceId\n  accessType\n  accessedAt\n  dataClassification\n  fieldsAccessed\n  rowCount\n  ipAddress\n  metadata\n}\n\nfragment PermissionChange on permissionChanges {\n  id\n  changedAt\n  changedByUserId\n  targetUserId\n  targetRoleId\n  changeType\n  permissionType\n  oldPermissions\n  newPermissions\n  reason\n  approvedByUserId\n}\n\nfragment PayrollDateInfo on payrollDates {\n  id\n  originalEftDate\n  adjustedEftDate\n  notes\n  createdAt\n}\n\nfragment PermissionOverrideInfo on permissionOverrides {\n  id\n  userId\n  role\n  resource\n  operation\n  granted\n  reason\n  conditions\n  expiresAt\n  createdBy\n  createdAt\n}"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "mutation LogAuditEvent($input: auditLogsInsertInput!) {\n  insertAuditLogsOne: insertAuditLog(object: $input) {\n    id\n    eventTime\n  }\n}\n\nmutation RefreshData {\n  __typename\n}"): (typeof documents)["mutation LogAuditEvent($input: auditLogsInsertInput!) {\n  insertAuditLogsOne: insertAuditLog(object: $input) {\n    id\n    eventTime\n  }\n}\n\nmutation RefreshData {\n  __typename\n}"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "query GetDashboardMetrics($userId: uuid!) {\n  clientsAggregate(where: {active: {_eq: true}}) {\n    aggregate {\n      count\n    }\n  }\n  activePayrollsAggregate: payrollsAggregate(\n    where: {supersededDate: {_isNull: true}, status: {_nin: [\"Completed\", \"Failed\"]}}\n  ) {\n    aggregate {\n      count\n    }\n  }\n  totalEmployeesAggregate: payrollsAggregate(\n    where: {supersededDate: {_isNull: true}}\n  ) {\n    aggregate {\n      sum {\n        employeeCount\n      }\n    }\n  }\n  upcomingPayrolls: payrolls(\n    where: {supersededDate: {_isNull: true}, status: {_nin: [\"Completed\", \"Failed\", \"Cancelled\"]}}\n    orderBy: {updatedAt: DESC}\n    limit: 5\n  ) {\n    ...PayrollMinimal\n    client {\n      ...ClientMinimal\n    }\n  }\n}\n\nquery GetDashboardStatsOptimized($limit: Int = 10) {\n  clientsAggregate {\n    aggregate {\n      count\n    }\n  }\n  totalPayrolls: payrollsAggregate(where: {supersededDate: {_isNull: true}}) {\n    aggregate {\n      count\n    }\n  }\n  activePayrolls: payrollsAggregate(\n    where: {supersededDate: {_isNull: true}, status: {_eq: \"Active\"}}\n  ) {\n    aggregate {\n      count\n    }\n  }\n  upcomingPayrolls: payrolls(\n    where: {supersededDate: {_isNull: true}, status: {_eq: \"Active\"}}\n    orderBy: {updatedAt: DESC}\n    limit: $limit\n  ) {\n    id\n    name\n    status\n    client {\n      id\n      name\n    }\n  }\n}\n\nquery GetClientsDashboardStats {\n  activeClientsCount: clientsAggregate(where: {active: {_eq: true}}) {\n    aggregate {\n      count\n    }\n  }\n  totalPayrollsCount: payrollsAggregate(where: {supersededDate: {_isNull: true}}) {\n    aggregate {\n      count\n    }\n  }\n  totalEmployeesSum: payrollsAggregate(where: {supersededDate: {_isNull: true}}) {\n    aggregate {\n      sum {\n        employeeCount\n      }\n    }\n  }\n  clientsNeedingAttention: clients(\n    where: {active: {_eq: true}, _not: {payrolls: {supersededDate: {_isNull: true}}}}\n  ) {\n    ...ClientMinimal\n  }\n}\n\nquery GetCurrentUser($userId: uuid!) {\n  user: userById(id: $userId) {\n    ...UserProfile\n  }\n}\n\nquery GetUsersForDropdown($role: user_role) {\n  users(where: {isActive: {_eq: true}, role: {_eq: $role}}, orderBy: {name: ASC}) {\n    ...UserMinimal\n  }\n}\n\nquery GetSystemHealth {\n  databaseHealth: users(limit: 1) {\n    id\n  }\n  recentActivity: auditLogsAggregate(\n    where: {eventTime: {_gte: \"now() - interval '1 hour'\"}}\n  ) {\n    aggregate {\n      count\n    }\n  }\n}\n\nquery GlobalSearch($searchTerm: String!) {\n  clients(\n    where: {_or: [{name: {_ilike: $searchTerm}}, {contactEmail: {_ilike: $searchTerm}}]}\n    limit: 5\n  ) {\n    ...ClientMinimal\n  }\n  users(\n    where: {_or: [{name: {_ilike: $searchTerm}}, {email: {_ilike: $searchTerm}}]}\n    limit: 5\n  ) {\n    ...UserMinimal\n  }\n  payrolls(\n    where: {client: {name: {_ilike: $searchTerm}}, supersededDate: {_isNull: true}}\n    limit: 5\n  ) {\n    ...PayrollMinimal\n    client {\n      ...ClientMinimal\n    }\n  }\n}"): (typeof documents)["query GetDashboardMetrics($userId: uuid!) {\n  clientsAggregate(where: {active: {_eq: true}}) {\n    aggregate {\n      count\n    }\n  }\n  activePayrollsAggregate: payrollsAggregate(\n    where: {supersededDate: {_isNull: true}, status: {_nin: [\"Completed\", \"Failed\"]}}\n  ) {\n    aggregate {\n      count\n    }\n  }\n  totalEmployeesAggregate: payrollsAggregate(\n    where: {supersededDate: {_isNull: true}}\n  ) {\n    aggregate {\n      sum {\n        employeeCount\n      }\n    }\n  }\n  upcomingPayrolls: payrolls(\n    where: {supersededDate: {_isNull: true}, status: {_nin: [\"Completed\", \"Failed\", \"Cancelled\"]}}\n    orderBy: {updatedAt: DESC}\n    limit: 5\n  ) {\n    ...PayrollMinimal\n    client {\n      ...ClientMinimal\n    }\n  }\n}\n\nquery GetDashboardStatsOptimized($limit: Int = 10) {\n  clientsAggregate {\n    aggregate {\n      count\n    }\n  }\n  totalPayrolls: payrollsAggregate(where: {supersededDate: {_isNull: true}}) {\n    aggregate {\n      count\n    }\n  }\n  activePayrolls: payrollsAggregate(\n    where: {supersededDate: {_isNull: true}, status: {_eq: \"Active\"}}\n  ) {\n    aggregate {\n      count\n    }\n  }\n  upcomingPayrolls: payrolls(\n    where: {supersededDate: {_isNull: true}, status: {_eq: \"Active\"}}\n    orderBy: {updatedAt: DESC}\n    limit: $limit\n  ) {\n    id\n    name\n    status\n    client {\n      id\n      name\n    }\n  }\n}\n\nquery GetClientsDashboardStats {\n  activeClientsCount: clientsAggregate(where: {active: {_eq: true}}) {\n    aggregate {\n      count\n    }\n  }\n  totalPayrollsCount: payrollsAggregate(where: {supersededDate: {_isNull: true}}) {\n    aggregate {\n      count\n    }\n  }\n  totalEmployeesSum: payrollsAggregate(where: {supersededDate: {_isNull: true}}) {\n    aggregate {\n      sum {\n        employeeCount\n      }\n    }\n  }\n  clientsNeedingAttention: clients(\n    where: {active: {_eq: true}, _not: {payrolls: {supersededDate: {_isNull: true}}}}\n  ) {\n    ...ClientMinimal\n  }\n}\n\nquery GetCurrentUser($userId: uuid!) {\n  user: userById(id: $userId) {\n    ...UserProfile\n  }\n}\n\nquery GetUsersForDropdown($role: user_role) {\n  users(where: {isActive: {_eq: true}, role: {_eq: $role}}, orderBy: {name: ASC}) {\n    ...UserMinimal\n  }\n}\n\nquery GetSystemHealth {\n  databaseHealth: users(limit: 1) {\n    id\n  }\n  recentActivity: auditLogsAggregate(\n    where: {eventTime: {_gte: \"now() - interval '1 hour'\"}}\n  ) {\n    aggregate {\n      count\n    }\n  }\n}\n\nquery GlobalSearch($searchTerm: String!) {\n  clients(\n    where: {_or: [{name: {_ilike: $searchTerm}}, {contactEmail: {_ilike: $searchTerm}}]}\n    limit: 5\n  ) {\n    ...ClientMinimal\n  }\n  users(\n    where: {_or: [{name: {_ilike: $searchTerm}}, {email: {_ilike: $searchTerm}}]}\n    limit: 5\n  ) {\n    ...UserMinimal\n  }\n  payrolls(\n    where: {client: {name: {_ilike: $searchTerm}}, supersededDate: {_isNull: true}}\n    limit: 5\n  ) {\n    ...PayrollMinimal\n    client {\n      ...ClientMinimal\n    }\n  }\n}"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "subscription RecentActivity($resourceTypes: [String!]) {\n  auditLogs(\n    where: {resourceType: {_in: $resourceTypes}, eventTime: {_gte: \"now() - interval '5 minutes'\"}}\n    orderBy: {eventTime: DESC}\n    limit: 20\n  ) {\n    ...AuditLogEntry\n  }\n}\n\nsubscription AuthenticationEvents($userId: uuid) {\n  authEvents(\n    where: {userId: {_eq: $userId}, eventTime: {_gte: \"now() - interval '10 minutes'\"}}\n    orderBy: {eventTime: DESC}\n  ) {\n    ...AuthEvent\n  }\n}\n\nsubscription SensitiveDataAccess($resourceTypes: [String!]!) {\n  dataAccessLogs(\n    where: {resourceType: {_in: $resourceTypes}, accessedAt: {_gte: \"now() - interval '10 minutes'\"}}\n    orderBy: {accessedAt: DESC}\n  ) {\n    ...DataAccessLog\n  }\n}\n\nsubscription PermissionChangeStream {\n  permissionChanges(orderBy: {changedAt: DESC}, limit: 10) {\n    ...PermissionChange\n  }\n}"): (typeof documents)["subscription RecentActivity($resourceTypes: [String!]) {\n  auditLogs(\n    where: {resourceType: {_in: $resourceTypes}, eventTime: {_gte: \"now() - interval '5 minutes'\"}}\n    orderBy: {eventTime: DESC}\n    limit: 20\n  ) {\n    ...AuditLogEntry\n  }\n}\n\nsubscription AuthenticationEvents($userId: uuid) {\n  authEvents(\n    where: {userId: {_eq: $userId}, eventTime: {_gte: \"now() - interval '10 minutes'\"}}\n    orderBy: {eventTime: DESC}\n  ) {\n    ...AuthEvent\n  }\n}\n\nsubscription SensitiveDataAccess($resourceTypes: [String!]!) {\n  dataAccessLogs(\n    where: {resourceType: {_in: $resourceTypes}, accessedAt: {_gte: \"now() - interval '10 minutes'\"}}\n    orderBy: {accessedAt: DESC}\n  ) {\n    ...DataAccessLog\n  }\n}\n\nsubscription PermissionChangeStream {\n  permissionChanges(orderBy: {changedAt: DESC}, limit: 10) {\n    ...PermissionChange\n  }\n}"];

export function gql(source: string) {
  return (documents as any)[source] ?? {};
}

export type DocumentType<TDocumentNode extends DocumentNode<any, any>> = TDocumentNode extends DocumentNode<  infer TType,  any>  ? TType  : never;