/* eslint-disable */
import * as types from './graphql';
import type { TypedDocumentNode as DocumentNode } from '@graphql-typed-document-node/core';

/**
 * Map of all GraphQL operations in the project.
 *
 * This map has several performance disadvantages:
 * 1. It is not tree-shakeable, so it will include all operations in the project.
 * 2. It is not minifiable, so the string of a GraphQL query will be multiple times inside the bundle.
 * 3. It does not support dead code elimination, so it will add unused operations.
 *
 * Therefore it is highly recommended to use the babel or swc plugin for production.
 * Learn more about it here: https://the-guild.dev/graphql/codegen/plugins/presets/preset-client#reducing-bundle-size
 */
type Documents = {
    "fragment UsersUserCore on users {\n  id\n  name\n  email\n  isActive\n  isStaff\n  role\n  clerkUserId\n  createdAt\n  updatedAt\n}\n\nfragment UserWithProfile on users {\n  ...UsersUserCore\n  username\n  image\n}\n\nfragment UserWithRoles on users {\n  ...UsersUserCore\n  assignedRoles {\n    id\n    roleId\n    assignedRole {\n      id\n      name\n      displayName\n      description\n      priority\n      isSystemRole\n      assignedPermissions {\n        id\n        conditions\n        permissionId\n        grantedPermission {\n          id\n          action\n          description\n          relatedResource {\n            id\n            name\n            displayName\n            description\n          }\n        }\n      }\n    }\n  }\n}\n\nfragment UserWithTeam on users {\n  ...UsersUserCore\n}\n\nfragment UserWithWorkSchedule on users {\n  ...UsersUserCore\n  userWorkSchedules {\n    id\n    workDay\n    workHours\n    createdAt\n    updatedAt\n  }\n}\n\nfragment UserWithPayrolls on users {\n  ...UsersUserCore\n}\n\nfragment UserWithAllRelations on users {\n  ...UserWithProfile\n  assignedRoles {\n    id\n    roleId\n    assignedRole {\n      id\n      name\n      displayName\n      description\n      priority\n    }\n  }\n  userWorkSchedules {\n    id\n    workDay\n    workHours\n    createdAt\n    updatedAt\n  }\n}\n\nfragment UserBasicInfo on users {\n  id\n  name\n  email\n  role\n  username\n  image\n  isStaff\n  isActive\n  managerId\n  clerkUserId\n}\n\nfragment UserForStaff on users {\n  ...UserWithProfile\n}\n\nfragment UserForAuth on users {\n  id\n  name\n  email\n  role\n  isActive\n  clerkUserId\n}\n\nfragment UserForAudit on users {\n  id\n  name\n  email\n  role\n  isActive\n}\n\nfragment UserRoleInfo on users {\n  id\n  name\n  email\n  role\n  isActive\n  assignedRoles {\n    roleId\n    assignedRole {\n      name\n      description\n    }\n  }\n}\n\nfragment UserPermissionsInfo on users {\n  id\n  name\n  role\n  assignedRoles {\n    roleId\n    assignedRole {\n      name\n      assignedPermissions {\n        permissionId\n        grantedPermission {\n          relatedResource {\n            name\n          }\n          action\n          description\n        }\n      }\n    }\n  }\n}\n\nfragment UserSummary on users {\n  id\n  name\n  role\n  isActive\n  isStaff\n}\n\nfragment UserListItem on users {\n  ...UserSummary\n  email\n  managerId\n  clerkUserId\n  updatedAt\n}\n\nfragment UserDashboardCard on users {\n  ...UserSummary\n  managerUser {\n    id\n    name\n  }\n}\n\nfragment UserTeamSummary on users {\n  ...UserSummary\n  email\n  managerUser {\n    id\n    name\n  }\n}\n\nfragment UserMinimal on users {\n  id\n  name\n  role\n}\n\nfragment UserTableRow on users {\n  ...UserListItem\n  managerUser {\n    id\n    name\n  }\n}": typeof types.UsersUserCoreFragmentDoc,
    "mutation CreateUser($object: usersInsertInput!) {\n  insertUser(object: $object) {\n    ...UsersUserCore\n    username\n    image\n    managerId\n  }\n}\n\nmutation UpdateUser($id: uuid!, $set: usersSetInput!) {\n  updateUserById(pkColumns: {id: $id}, _set: $set) {\n    ...UsersUserCore\n    username\n    image\n    managerId\n  }\n}\n\nmutation DeleteUser($id: uuid!) {\n  updateUserById(\n    pkColumns: {id: $id}\n    _set: {isActive: false, deactivatedAt: \"now()\"}\n  ) {\n    ...UserCore\n  }\n}\n\nmutation UpdateUserRole($id: uuid!, $role: user_role!) {\n  updateUserById(pkColumns: {id: $id}, _set: {role: $role}) {\n    ...UserCore\n  }\n}\n\nmutation BulkUpdateUsers($where: usersBoolExp!, $set: usersSetInput!) {\n  bulkUpdateUsers(where: $where, _set: $set) {\n    returning {\n      ...UserCore\n    }\n    affectedRows\n  }\n}\n\nmutation CreateUserFromClerk($clerkId: String!, $name: String!, $email: String!, $role: user_role = \"viewer\", $isStaff: Boolean = false, $managerId: uuid, $image: String) {\n  insertUser(\n    object: {clerkUserId: $clerkId, name: $name, email: $email, role: $role, isStaff: $isStaff, managerId: $managerId, image: $image}\n    onConflict: {constraint: users_clerk_user_id_key, updateColumns: [name, email, image, updatedAt]}\n  ) {\n    ...UserCore\n  }\n}\n\nmutation CreateUserByEmail($name: String!, $email: String!, $role: user_role!, $managerId: uuid) {\n  insertUser(\n    object: {name: $name, email: $email, role: $role, managerId: $managerId, isStaff: true, isActive: true}\n  ) {\n    ...UserCore\n  }\n}\n\nmutation UpdateUserProfile($id: uuid!, $name: String, $image: String) {\n  updateUserById(pkColumns: {id: $id}, _set: {name: $name, image: $image}) {\n    ...UserWithProfile\n  }\n}\n\nmutation DeactivateUser($id: uuid!) {\n  updateUserById(\n    pkColumns: {id: $id}\n    _set: {isActive: false, deactivatedAt: \"now()\"}\n  ) {\n    ...UserCore\n  }\n}\n\nmutation ReactivateUser($id: uuid!) {\n  updateUserById(\n    pkColumns: {id: $id}\n    _set: {isActive: true, deactivatedAt: null}\n  ) {\n    ...UserCore\n  }\n}\n\nmutation HardDeleteUser($id: uuid!) {\n  deleteUserById(id: $id) {\n    id\n    name\n    email\n  }\n}\n\nmutation UpdateStaffRole($id: uuid!, $role: user_role!) {\n  updateUserById(pkColumns: {id: $id}, _set: {role: $role}) {\n    ...UserCore\n  }\n}\n\nmutation UpdateUserRoleFromClerk($clerkUserId: String!, $role: user_role!) {\n  bulkUpdateUsers(where: {clerkUserId: {_eq: $clerkUserId}}, _set: {role: $role}) {\n    returning {\n      ...UserCore\n    }\n    affectedRows\n  }\n}": typeof types.CreateUserDocument,
    "query GetUsers($limit: Int = 50, $offset: Int = 0, $where: usersBoolExp) {\n  users(limit: $limit, offset: $offset, where: $where, orderBy: {name: ASC}) {\n    ...UsersUserCore\n    username\n    image\n    managerId\n  }\n}\n\nquery GetUsersForDropdown {\n  users {\n    id\n    name\n    email\n    role\n  }\n}\n\nquery GetManagers {\n  users(where: {role: {_in: [\"manager\", \"org_admin\"]}, isActive: {_eq: true}}) {\n    ...UsersUserCore\n    username\n    image\n    managerId\n  }\n}\n\nquery GetUserCount {\n  usersAggregate {\n    aggregate {\n      count\n    }\n  }\n}\n\nquery GetActiveUsers {\n  users(where: {isActive: {_eq: true}}, orderBy: {name: ASC}) {\n    ...UserBasicInfo\n  }\n}\n\nquery GetUserById($id: uuid!) {\n  userById(id: $id) {\n    id\n    name\n    email\n    role\n    username\n    image\n    isStaff\n    isActive\n    managerId\n    clerkUserId\n    managerUser {\n      id\n      name\n      email\n      role\n    }\n  }\n}\n\nquery GetUserByClerkId($clerkUserId: String!) {\n  users(where: {clerkUserId: {_eq: $clerkUserId}}, limit: 1) {\n    id\n    name\n    email\n    role\n    username\n    image\n    isStaff\n    isActive\n    managerId\n    clerkUserId\n  }\n}\n\nquery GetUserByEmail($email: String!) {\n  users(where: {email: {_eq: $email}}) {\n    id\n    name\n    email\n    role\n    username\n    image\n    isStaff\n    isActive\n    managerId\n    clerkUserId\n    managerUser {\n      id\n      name\n      email\n      role\n    }\n  }\n}\n\nquery GetStaffList {\n  users(\n    where: {isActive: {_eq: true}, role: {_in: [\"consultant\", \"manager\", \"org_admin\"]}}\n    orderBy: {name: ASC}\n  ) {\n    id\n    name\n    email\n    role\n    username\n    image\n    isStaff\n    isActive\n    managerId\n    clerkUserId\n    managerUser {\n      id\n      name\n      email\n      role\n    }\n  }\n}\n\nquery GetStaffById($id: uuid!) {\n  userById(id: $id) {\n    id\n    name\n    email\n    role\n    username\n    image\n    isStaff\n    isActive\n    clerkUserId\n    createdAt\n    updatedAt\n  }\n}\n\nquery GetAllUsersList {\n  users(where: {isActive: {_eq: true}}, orderBy: {name: ASC}) {\n    id\n    name\n    email\n    role\n    username\n    image\n    isStaff\n    isActive\n    managerId\n    clerkUserId\n  }\n}\n\nquery GetUserProfile($id: uuid!) {\n  userById(id: $id) {\n    ...UserWithProfile\n  }\n}\n\nquery GetUsersWithRoles {\n  users(where: {isActive: {_eq: true}}, orderBy: {name: ASC}) {\n    ...UserRoleInfo\n  }\n}\n\nquery GetUserPermissions($id: uuid!) {\n  userById(id: $id) {\n    ...UserPermissionsInfo\n  }\n}\n\nquery SearchUsers($searchTerm: String!) {\n  users(\n    where: {_and: [{isActive: {_eq: true}}, {_or: [{name: {_ilike: $searchTerm}}, {email: {_ilike: $searchTerm}}, {username: {_ilike: $searchTerm}}]}]}\n    orderBy: {name: ASC}\n    limit: 50\n  ) {\n    ...UserWithProfile\n  }\n}\n\nquery GetUsersForAudit {\n  users(orderBy: {createdAt: DESC}) {\n    ...UserForAudit\n  }\n}\n\nquery GetUserStats {\n  usersAggregate {\n    aggregate {\n      count\n    }\n  }\n  activeUsers: usersAggregate(where: {isActive: {_eq: true}}) {\n    aggregate {\n      count\n    }\n  }\n  byRole: usersAggregate {\n    nodes {\n      role\n    }\n    aggregate {\n      count\n    }\n  }\n}\n\nquery GetUserSessionInfo($id: uuid!) {\n  userById(id: $id) {\n    id\n    name\n    email\n    role\n    isActive\n  }\n}\n\nquery GetCurrentUser($currentUserId: uuid!) {\n  userById(id: $currentUserId) {\n    id\n    name\n    role\n    isStaff\n    isActive\n    managerId\n    clerkUserId\n    createdAt\n    updatedAt\n  }\n}\n\nquery GetUserRole($userId: uuid!) {\n  userById(id: $userId) {\n    id\n    role\n    isStaff\n    isActive\n  }\n}\n\nquery GetUserRoleFallback($userId: uuid!) {\n  userById(id: $userId) {\n    id\n    role\n    isStaff\n    isActive\n    clerkUserId\n  }\n}\n\nquery GetUsersWithLimit($limit: Int = 10) {\n  users(limit: $limit) {\n    id\n    name\n    email\n    role\n    isStaff\n    clerkUserId\n  }\n}\n\nquery GetUserProfileSettings($id: uuid!) {\n  userById(id: $id) {\n    id\n    name\n    email\n    role\n    isStaff\n    isActive\n    clerkUserId\n    managerUser {\n      id\n      name\n      email\n    }\n  }\n}\n\nquery GetUsersWithFiltering($limit: Int = 50, $offset: Int = 0, $where: usersBoolExp) {\n  users(limit: $limit, offset: $offset, where: $where, orderBy: {createdAt: DESC}) {\n    id\n    name\n    email\n    role\n    createdAt\n    updatedAt\n    isStaff\n    isActive\n    managerId\n    clerkUserId\n    managerUser {\n      id\n      name\n      email\n    }\n  }\n  usersAggregate(where: $where) {\n    aggregate {\n      count\n    }\n  }\n}\n\nquery GetDeveloperManagers {\n  users(where: {role: {_in: [\"developer\", \"manager\"]}}, orderBy: {name: ASC}) {\n    id\n    name\n    email\n    role\n  }\n}\n\nquery GetUserRoleSecure($userId: uuid!) {\n  userById(id: $userId) {\n    id\n    role\n    isStaff\n    isActive\n  }\n}\n\nquery GetUserRoleFallbackSecure($userId: uuid!) {\n  userById(id: $userId) {\n    id\n    role\n    isStaff\n    isActive\n    clerkUserId\n  }\n}\n\nquery GetUserProfileComplete($id: uuid!) {\n  userById(id: $id) {\n    id\n    name\n    email\n    username\n    image\n    role\n    isStaff\n    isActive\n    createdAt\n    updatedAt\n    clerkUserId\n    managerUser {\n      id\n      name\n      email\n      image\n    }\n    primaryConsultantPayrolls {\n      id\n      name\n      status\n      client {\n        name\n      }\n      employeeCount\n    }\n    backupConsultantPayrolls {\n      id\n      name\n      status\n      client {\n        name\n      }\n    }\n    managedPayrolls {\n      id\n      name\n      status\n      client {\n        name\n      }\n    }\n  }\n}\n\nquery GetUserForDeletion($id: uuid!) {\n  userById(id: $id) {\n    id\n    name\n    email\n    role\n    clerkUserId\n    isStaff\n    isActive\n    createdAt\n    managerUser {\n      id\n      name\n      email\n    }\n  }\n  payrolls(\n    where: {_or: [{primaryConsultantUserId: {_eq: $id}}, {backupConsultantUserId: {_eq: $id}}, {managerUserId: {_eq: $id}}], status: {_eq: \"Active\"}}\n  ) {\n    id\n    name\n    status\n  }\n  subordinates: users(where: {managerId: {_eq: $id}, isActive: {_eq: true}}) {\n    id\n    name\n    email\n  }\n}\n\nquery GetCurrentUserRole($clerkUserId: String!) {\n  users(where: {clerkUserId: {_eq: $clerkUserId}}) {\n    id\n    role\n    isStaff\n    isActive\n  }\n}\n\nquery GetUsersPaginated($limit: Int = 20, $offset: Int = 0, $where: usersBoolExp = {}, $orderBy: [usersOrderBy!] = [{name: ASC}]) {\n  users(\n    limit: $limit\n    offset: $offset\n    where: {_and: [{isActive: {_eq: true}}, $where]}\n    orderBy: $orderBy\n  ) {\n    ...UserListItem\n  }\n  usersAggregate(where: {_and: [{isActive: {_eq: true}}, $where]}) {\n    aggregate {\n      count\n    }\n  }\n}\n\nquery GetAllUsersPaginated($limit: Int = 20, $offset: Int = 0, $where: usersBoolExp = {}, $orderBy: [usersOrderBy!] = [{name: ASC}]) {\n  users(limit: $limit, offset: $offset, where: $where, orderBy: $orderBy) {\n    ...UserTableRow\n  }\n  allUsersAggregate: usersAggregate(where: $where) {\n    aggregate {\n      count\n    }\n  }\n}\n\nquery GetStaffPaginated($limit: Int = 20, $offset: Int = 0, $where: usersBoolExp = {}) {\n  users(\n    limit: $limit\n    offset: $offset\n    where: {_and: [{isActive: {_eq: true}}, {role: {_in: [\"consultant\", \"manager\", \"org_admin\"]}}, $where]}\n    orderBy: {name: ASC}\n  ) {\n    ...UserListItem\n    managerUser {\n      ...UserMinimal\n    }\n  }\n  staffAggregate: usersAggregate(\n    where: {_and: [{isActive: {_eq: true}}, {role: {_in: [\"consultant\", \"manager\", \"org_admin\"]}}, $where]}\n  ) {\n    aggregate {\n      count\n    }\n  }\n}\n\nquery SearchUsersPaginated($searchTerm: String!, $limit: Int = 20, $offset: Int = 0) {\n  users(\n    where: {_and: [{isActive: {_eq: true}}, {_or: [{name: {_ilike: $searchTerm}}, {email: {_ilike: $searchTerm}}, {username: {_ilike: $searchTerm}}]}]}\n    orderBy: {name: ASC}\n    limit: $limit\n    offset: $offset\n  ) {\n    ...UserListItem\n  }\n  searchAggregate: usersAggregate(\n    where: {_and: [{isActive: {_eq: true}}, {_or: [{name: {_ilike: $searchTerm}}, {email: {_ilike: $searchTerm}}, {username: {_ilike: $searchTerm}}]}]}\n  ) {\n    aggregate {\n      count\n    }\n  }\n}\n\nquery GetUserByIdComplete($id: uuid!) {\n  userById(id: $id) {\n    id\n    name\n    email\n    role\n    createdAt\n    updatedAt\n    isStaff\n    managerId\n    clerkUserId\n    managerUser {\n      id\n      name\n      email\n      role\n    }\n  }\n}\n\nquery GetUserByClerkIdComplete($clerkId: String!) {\n  users(where: {clerkUserId: {_eq: $clerkId}}) {\n    id\n    name\n    email\n    role\n    createdAt\n    updatedAt\n    isStaff\n    managerId\n    clerkUserId\n    managerUser {\n      id\n      name\n      email\n      role\n    }\n  }\n}\n\nquery GetUserClerkId($id: uuid!) {\n  userById(id: $id) {\n    id\n    name\n    email\n    role\n    clerkUserId\n  }\n}\n\nquery GetUsersQuickList {\n  users(where: {isActive: {_eq: true}}, orderBy: {name: ASC}) {\n    ...UserMinimal\n  }\n}\n\nquery GetStaffQuickList {\n  users(\n    where: {isActive: {_eq: true}, role: {_in: [\"consultant\", \"manager\", \"org_admin\"]}}\n    orderBy: {name: ASC}\n  ) {\n    ...UserMinimal\n  }\n}\n\nquery GetManagersQuickList {\n  users(\n    where: {isActive: {_eq: true}, role: {_in: [\"manager\", \"org_admin\"]}}\n    orderBy: {name: ASC}\n  ) {\n    ...UserMinimal\n  }\n}\n\nquery GetUserCard($id: uuid!) {\n  userById(id: $id) {\n    ...UserSummary\n    email\n    managerUser {\n      ...UserMinimal\n    }\n  }\n}\n\nquery GetUserAssignmentData($id: uuid!) {\n  userById(id: $id) {\n    ...UserSummary\n    email\n    activePayrollCount: primaryConsultantPayrollsAggregate(\n      where: {supersededDate: {_isNull: true}}\n    ) {\n      aggregate {\n        count\n      }\n    }\n    backupPayrollCount: backupConsultantPayrollsAggregate(\n      where: {supersededDate: {_isNull: true}}\n    ) {\n      aggregate {\n        count\n      }\n    }\n  }\n}\n\nquery GetUserWorkload($id: uuid!) {\n  userById(id: $id) {\n    ...UserSummary\n    primaryPayrolls: primaryConsultantPayrolls(\n      where: {supersededDate: {_isNull: true}}\n      limit: 10\n    ) {\n      id\n      name\n      status\n      client {\n        name\n      }\n    }\n    backupPayrolls: backupConsultantPayrolls(\n      where: {supersededDate: {_isNull: true}}\n      limit: 10\n    ) {\n      id\n      name\n      status\n      client {\n        name\n      }\n    }\n  }\n}": typeof types.GetUsersDocument,
    "subscription StaffSubscription {\n  users(where: {isStaff: {_eq: true}}) {\n    id\n    name\n    role\n    updatedAt\n  }\n}\n\nsubscription UserUpdates($id: uuid!) {\n  users(where: {id: {_eq: $id}}) {\n    ...UserBasicInfo\n  }\n}\n\nsubscription StaffListUpdates {\n  users(\n    where: {role: {_in: [\"consultant\", \"manager\", \"org_admin\"]}}\n    orderBy: {name: ASC}\n  ) {\n    ...UserBasicInfo\n  }\n}\n\nsubscription UserRoleChanges($userId: uuid!) {\n  users(where: {id: {_eq: $userId}}) {\n    id\n    role\n    isActive\n    isStaff\n    updatedAt\n    managerId\n  }\n}\n\nsubscription UserStatusUpdates($userId: uuid!) {\n  users(where: {id: {_eq: $userId}}) {\n    id\n    name\n    role\n    isActive\n    isStaff\n    deactivatedAt\n    deactivatedBy\n    updatedAt\n  }\n}\n\nsubscription ActiveUsersCount {\n  usersAggregate(where: {isActive: {_eq: true}}) {\n    aggregate {\n      count\n    }\n  }\n}\n\nsubscription UserSessionStatus($clerkUserId: String!) {\n  users(where: {clerkUserId: {_eq: $clerkUserId}}) {\n    id\n    role\n    isActive\n    updatedAt\n  }\n}\n\nsubscription TeamMemberUpdates($managerId: uuid!) {\n  users(where: {managerId: {_eq: $managerId}}) {\n    id\n    name\n    role\n    isActive\n    updatedAt\n  }\n}\n\nsubscription UserPermissionUpdates($userId: uuid!) {\n  users(where: {id: {_eq: $userId}}) {\n    id\n    role\n    isActive\n    assignedRoles {\n      roleId\n      assignedRole {\n        name\n        assignedPermissions {\n          permissionId\n          grantedPermission {\n            action\n            description\n            relatedResource {\n              name\n            }\n          }\n        }\n      }\n    }\n  }\n}": typeof types.StaffSubscriptionDocument,
    "fragment UserCore on users {\n  id\n  name\n  email\n  username\n  role\n  isActive\n  isStaff\n  clerkUserId\n  createdAt\n  updatedAt\n}\n\nfragment UserBasic on users {\n  id\n  name\n  email\n  role\n  isActive\n}\n\nfragment UserWithManager on users {\n  ...UserCore\n  managerId\n  managerUser {\n    ...UserBasic\n  }\n}\n\nfragment RoleCore on roles {\n  id\n  name\n  description\n  displayName\n  priority\n  isSystemRole\n  createdAt\n}\n\nfragment PermissionCore on permissions {\n  id\n  action\n  description\n  resourceId\n  createdAt\n  updatedAt\n}\n\nfragment PermissionWithResource on permissions {\n  ...PermissionCore\n  relatedResource {\n    id\n    name\n    description\n  }\n}\n\nfragment ClientCore on clients {\n  id\n  name\n  contactEmail\n  contactPerson\n  contactPhone\n  active\n  createdAt\n  updatedAt\n}\n\nfragment ClientBasic on clients {\n  id\n  name\n  active\n}\n\nfragment ResourceCore on resources {\n  id\n  name\n  displayName\n  description\n  createdAt\n  updatedAt\n}\n\nfragment UserRoleCore on userRoles {\n  id\n  userId\n  roleId\n  createdAt\n  updatedAt\n}\n\nfragment RolePermissionCore on rolePermissions {\n  id\n  roleId\n  permissionId\n  conditions\n  createdAt\n  updatedAt\n}\n\nfragment AuditFields on auditLogs {\n  id\n  eventTime\n  action\n  resourceType\n  resourceId\n  userId\n  ipAddress\n  userAgent\n  success\n  userEmail\n  userRole\n}": typeof types.UserCoreFragmentDoc,
};
const documents: Documents = {
    "fragment UsersUserCore on users {\n  id\n  name\n  email\n  isActive\n  isStaff\n  role\n  clerkUserId\n  createdAt\n  updatedAt\n}\n\nfragment UserWithProfile on users {\n  ...UsersUserCore\n  username\n  image\n}\n\nfragment UserWithRoles on users {\n  ...UsersUserCore\n  assignedRoles {\n    id\n    roleId\n    assignedRole {\n      id\n      name\n      displayName\n      description\n      priority\n      isSystemRole\n      assignedPermissions {\n        id\n        conditions\n        permissionId\n        grantedPermission {\n          id\n          action\n          description\n          relatedResource {\n            id\n            name\n            displayName\n            description\n          }\n        }\n      }\n    }\n  }\n}\n\nfragment UserWithTeam on users {\n  ...UsersUserCore\n}\n\nfragment UserWithWorkSchedule on users {\n  ...UsersUserCore\n  userWorkSchedules {\n    id\n    workDay\n    workHours\n    createdAt\n    updatedAt\n  }\n}\n\nfragment UserWithPayrolls on users {\n  ...UsersUserCore\n}\n\nfragment UserWithAllRelations on users {\n  ...UserWithProfile\n  assignedRoles {\n    id\n    roleId\n    assignedRole {\n      id\n      name\n      displayName\n      description\n      priority\n    }\n  }\n  userWorkSchedules {\n    id\n    workDay\n    workHours\n    createdAt\n    updatedAt\n  }\n}\n\nfragment UserBasicInfo on users {\n  id\n  name\n  email\n  role\n  username\n  image\n  isStaff\n  isActive\n  managerId\n  clerkUserId\n}\n\nfragment UserForStaff on users {\n  ...UserWithProfile\n}\n\nfragment UserForAuth on users {\n  id\n  name\n  email\n  role\n  isActive\n  clerkUserId\n}\n\nfragment UserForAudit on users {\n  id\n  name\n  email\n  role\n  isActive\n}\n\nfragment UserRoleInfo on users {\n  id\n  name\n  email\n  role\n  isActive\n  assignedRoles {\n    roleId\n    assignedRole {\n      name\n      description\n    }\n  }\n}\n\nfragment UserPermissionsInfo on users {\n  id\n  name\n  role\n  assignedRoles {\n    roleId\n    assignedRole {\n      name\n      assignedPermissions {\n        permissionId\n        grantedPermission {\n          relatedResource {\n            name\n          }\n          action\n          description\n        }\n      }\n    }\n  }\n}\n\nfragment UserSummary on users {\n  id\n  name\n  role\n  isActive\n  isStaff\n}\n\nfragment UserListItem on users {\n  ...UserSummary\n  email\n  managerId\n  clerkUserId\n  updatedAt\n}\n\nfragment UserDashboardCard on users {\n  ...UserSummary\n  managerUser {\n    id\n    name\n  }\n}\n\nfragment UserTeamSummary on users {\n  ...UserSummary\n  email\n  managerUser {\n    id\n    name\n  }\n}\n\nfragment UserMinimal on users {\n  id\n  name\n  role\n}\n\nfragment UserTableRow on users {\n  ...UserListItem\n  managerUser {\n    id\n    name\n  }\n}": types.UsersUserCoreFragmentDoc,
    "mutation CreateUser($object: usersInsertInput!) {\n  insertUser(object: $object) {\n    ...UsersUserCore\n    username\n    image\n    managerId\n  }\n}\n\nmutation UpdateUser($id: uuid!, $set: usersSetInput!) {\n  updateUserById(pkColumns: {id: $id}, _set: $set) {\n    ...UsersUserCore\n    username\n    image\n    managerId\n  }\n}\n\nmutation DeleteUser($id: uuid!) {\n  updateUserById(\n    pkColumns: {id: $id}\n    _set: {isActive: false, deactivatedAt: \"now()\"}\n  ) {\n    ...UserCore\n  }\n}\n\nmutation UpdateUserRole($id: uuid!, $role: user_role!) {\n  updateUserById(pkColumns: {id: $id}, _set: {role: $role}) {\n    ...UserCore\n  }\n}\n\nmutation BulkUpdateUsers($where: usersBoolExp!, $set: usersSetInput!) {\n  bulkUpdateUsers(where: $where, _set: $set) {\n    returning {\n      ...UserCore\n    }\n    affectedRows\n  }\n}\n\nmutation CreateUserFromClerk($clerkId: String!, $name: String!, $email: String!, $role: user_role = \"viewer\", $isStaff: Boolean = false, $managerId: uuid, $image: String) {\n  insertUser(\n    object: {clerkUserId: $clerkId, name: $name, email: $email, role: $role, isStaff: $isStaff, managerId: $managerId, image: $image}\n    onConflict: {constraint: users_clerk_user_id_key, updateColumns: [name, email, image, updatedAt]}\n  ) {\n    ...UserCore\n  }\n}\n\nmutation CreateUserByEmail($name: String!, $email: String!, $role: user_role!, $managerId: uuid) {\n  insertUser(\n    object: {name: $name, email: $email, role: $role, managerId: $managerId, isStaff: true, isActive: true}\n  ) {\n    ...UserCore\n  }\n}\n\nmutation UpdateUserProfile($id: uuid!, $name: String, $image: String) {\n  updateUserById(pkColumns: {id: $id}, _set: {name: $name, image: $image}) {\n    ...UserWithProfile\n  }\n}\n\nmutation DeactivateUser($id: uuid!) {\n  updateUserById(\n    pkColumns: {id: $id}\n    _set: {isActive: false, deactivatedAt: \"now()\"}\n  ) {\n    ...UserCore\n  }\n}\n\nmutation ReactivateUser($id: uuid!) {\n  updateUserById(\n    pkColumns: {id: $id}\n    _set: {isActive: true, deactivatedAt: null}\n  ) {\n    ...UserCore\n  }\n}\n\nmutation HardDeleteUser($id: uuid!) {\n  deleteUserById(id: $id) {\n    id\n    name\n    email\n  }\n}\n\nmutation UpdateStaffRole($id: uuid!, $role: user_role!) {\n  updateUserById(pkColumns: {id: $id}, _set: {role: $role}) {\n    ...UserCore\n  }\n}\n\nmutation UpdateUserRoleFromClerk($clerkUserId: String!, $role: user_role!) {\n  bulkUpdateUsers(where: {clerkUserId: {_eq: $clerkUserId}}, _set: {role: $role}) {\n    returning {\n      ...UserCore\n    }\n    affectedRows\n  }\n}": types.CreateUserDocument,
    "query GetUsers($limit: Int = 50, $offset: Int = 0, $where: usersBoolExp) {\n  users(limit: $limit, offset: $offset, where: $where, orderBy: {name: ASC}) {\n    ...UsersUserCore\n    username\n    image\n    managerId\n  }\n}\n\nquery GetUsersForDropdown {\n  users {\n    id\n    name\n    email\n    role\n  }\n}\n\nquery GetManagers {\n  users(where: {role: {_in: [\"manager\", \"org_admin\"]}, isActive: {_eq: true}}) {\n    ...UsersUserCore\n    username\n    image\n    managerId\n  }\n}\n\nquery GetUserCount {\n  usersAggregate {\n    aggregate {\n      count\n    }\n  }\n}\n\nquery GetActiveUsers {\n  users(where: {isActive: {_eq: true}}, orderBy: {name: ASC}) {\n    ...UserBasicInfo\n  }\n}\n\nquery GetUserById($id: uuid!) {\n  userById(id: $id) {\n    id\n    name\n    email\n    role\n    username\n    image\n    isStaff\n    isActive\n    managerId\n    clerkUserId\n    managerUser {\n      id\n      name\n      email\n      role\n    }\n  }\n}\n\nquery GetUserByClerkId($clerkUserId: String!) {\n  users(where: {clerkUserId: {_eq: $clerkUserId}}, limit: 1) {\n    id\n    name\n    email\n    role\n    username\n    image\n    isStaff\n    isActive\n    managerId\n    clerkUserId\n  }\n}\n\nquery GetUserByEmail($email: String!) {\n  users(where: {email: {_eq: $email}}) {\n    id\n    name\n    email\n    role\n    username\n    image\n    isStaff\n    isActive\n    managerId\n    clerkUserId\n    managerUser {\n      id\n      name\n      email\n      role\n    }\n  }\n}\n\nquery GetStaffList {\n  users(\n    where: {isActive: {_eq: true}, role: {_in: [\"consultant\", \"manager\", \"org_admin\"]}}\n    orderBy: {name: ASC}\n  ) {\n    id\n    name\n    email\n    role\n    username\n    image\n    isStaff\n    isActive\n    managerId\n    clerkUserId\n    managerUser {\n      id\n      name\n      email\n      role\n    }\n  }\n}\n\nquery GetStaffById($id: uuid!) {\n  userById(id: $id) {\n    id\n    name\n    email\n    role\n    username\n    image\n    isStaff\n    isActive\n    clerkUserId\n    createdAt\n    updatedAt\n  }\n}\n\nquery GetAllUsersList {\n  users(where: {isActive: {_eq: true}}, orderBy: {name: ASC}) {\n    id\n    name\n    email\n    role\n    username\n    image\n    isStaff\n    isActive\n    managerId\n    clerkUserId\n  }\n}\n\nquery GetUserProfile($id: uuid!) {\n  userById(id: $id) {\n    ...UserWithProfile\n  }\n}\n\nquery GetUsersWithRoles {\n  users(where: {isActive: {_eq: true}}, orderBy: {name: ASC}) {\n    ...UserRoleInfo\n  }\n}\n\nquery GetUserPermissions($id: uuid!) {\n  userById(id: $id) {\n    ...UserPermissionsInfo\n  }\n}\n\nquery SearchUsers($searchTerm: String!) {\n  users(\n    where: {_and: [{isActive: {_eq: true}}, {_or: [{name: {_ilike: $searchTerm}}, {email: {_ilike: $searchTerm}}, {username: {_ilike: $searchTerm}}]}]}\n    orderBy: {name: ASC}\n    limit: 50\n  ) {\n    ...UserWithProfile\n  }\n}\n\nquery GetUsersForAudit {\n  users(orderBy: {createdAt: DESC}) {\n    ...UserForAudit\n  }\n}\n\nquery GetUserStats {\n  usersAggregate {\n    aggregate {\n      count\n    }\n  }\n  activeUsers: usersAggregate(where: {isActive: {_eq: true}}) {\n    aggregate {\n      count\n    }\n  }\n  byRole: usersAggregate {\n    nodes {\n      role\n    }\n    aggregate {\n      count\n    }\n  }\n}\n\nquery GetUserSessionInfo($id: uuid!) {\n  userById(id: $id) {\n    id\n    name\n    email\n    role\n    isActive\n  }\n}\n\nquery GetCurrentUser($currentUserId: uuid!) {\n  userById(id: $currentUserId) {\n    id\n    name\n    role\n    isStaff\n    isActive\n    managerId\n    clerkUserId\n    createdAt\n    updatedAt\n  }\n}\n\nquery GetUserRole($userId: uuid!) {\n  userById(id: $userId) {\n    id\n    role\n    isStaff\n    isActive\n  }\n}\n\nquery GetUserRoleFallback($userId: uuid!) {\n  userById(id: $userId) {\n    id\n    role\n    isStaff\n    isActive\n    clerkUserId\n  }\n}\n\nquery GetUsersWithLimit($limit: Int = 10) {\n  users(limit: $limit) {\n    id\n    name\n    email\n    role\n    isStaff\n    clerkUserId\n  }\n}\n\nquery GetUserProfileSettings($id: uuid!) {\n  userById(id: $id) {\n    id\n    name\n    email\n    role\n    isStaff\n    isActive\n    clerkUserId\n    managerUser {\n      id\n      name\n      email\n    }\n  }\n}\n\nquery GetUsersWithFiltering($limit: Int = 50, $offset: Int = 0, $where: usersBoolExp) {\n  users(limit: $limit, offset: $offset, where: $where, orderBy: {createdAt: DESC}) {\n    id\n    name\n    email\n    role\n    createdAt\n    updatedAt\n    isStaff\n    isActive\n    managerId\n    clerkUserId\n    managerUser {\n      id\n      name\n      email\n    }\n  }\n  usersAggregate(where: $where) {\n    aggregate {\n      count\n    }\n  }\n}\n\nquery GetDeveloperManagers {\n  users(where: {role: {_in: [\"developer\", \"manager\"]}}, orderBy: {name: ASC}) {\n    id\n    name\n    email\n    role\n  }\n}\n\nquery GetUserRoleSecure($userId: uuid!) {\n  userById(id: $userId) {\n    id\n    role\n    isStaff\n    isActive\n  }\n}\n\nquery GetUserRoleFallbackSecure($userId: uuid!) {\n  userById(id: $userId) {\n    id\n    role\n    isStaff\n    isActive\n    clerkUserId\n  }\n}\n\nquery GetUserProfileComplete($id: uuid!) {\n  userById(id: $id) {\n    id\n    name\n    email\n    username\n    image\n    role\n    isStaff\n    isActive\n    createdAt\n    updatedAt\n    clerkUserId\n    managerUser {\n      id\n      name\n      email\n      image\n    }\n    primaryConsultantPayrolls {\n      id\n      name\n      status\n      client {\n        name\n      }\n      employeeCount\n    }\n    backupConsultantPayrolls {\n      id\n      name\n      status\n      client {\n        name\n      }\n    }\n    managedPayrolls {\n      id\n      name\n      status\n      client {\n        name\n      }\n    }\n  }\n}\n\nquery GetUserForDeletion($id: uuid!) {\n  userById(id: $id) {\n    id\n    name\n    email\n    role\n    clerkUserId\n    isStaff\n    isActive\n    createdAt\n    managerUser {\n      id\n      name\n      email\n    }\n  }\n  payrolls(\n    where: {_or: [{primaryConsultantUserId: {_eq: $id}}, {backupConsultantUserId: {_eq: $id}}, {managerUserId: {_eq: $id}}], status: {_eq: \"Active\"}}\n  ) {\n    id\n    name\n    status\n  }\n  subordinates: users(where: {managerId: {_eq: $id}, isActive: {_eq: true}}) {\n    id\n    name\n    email\n  }\n}\n\nquery GetCurrentUserRole($clerkUserId: String!) {\n  users(where: {clerkUserId: {_eq: $clerkUserId}}) {\n    id\n    role\n    isStaff\n    isActive\n  }\n}\n\nquery GetUsersPaginated($limit: Int = 20, $offset: Int = 0, $where: usersBoolExp = {}, $orderBy: [usersOrderBy!] = [{name: ASC}]) {\n  users(\n    limit: $limit\n    offset: $offset\n    where: {_and: [{isActive: {_eq: true}}, $where]}\n    orderBy: $orderBy\n  ) {\n    ...UserListItem\n  }\n  usersAggregate(where: {_and: [{isActive: {_eq: true}}, $where]}) {\n    aggregate {\n      count\n    }\n  }\n}\n\nquery GetAllUsersPaginated($limit: Int = 20, $offset: Int = 0, $where: usersBoolExp = {}, $orderBy: [usersOrderBy!] = [{name: ASC}]) {\n  users(limit: $limit, offset: $offset, where: $where, orderBy: $orderBy) {\n    ...UserTableRow\n  }\n  allUsersAggregate: usersAggregate(where: $where) {\n    aggregate {\n      count\n    }\n  }\n}\n\nquery GetStaffPaginated($limit: Int = 20, $offset: Int = 0, $where: usersBoolExp = {}) {\n  users(\n    limit: $limit\n    offset: $offset\n    where: {_and: [{isActive: {_eq: true}}, {role: {_in: [\"consultant\", \"manager\", \"org_admin\"]}}, $where]}\n    orderBy: {name: ASC}\n  ) {\n    ...UserListItem\n    managerUser {\n      ...UserMinimal\n    }\n  }\n  staffAggregate: usersAggregate(\n    where: {_and: [{isActive: {_eq: true}}, {role: {_in: [\"consultant\", \"manager\", \"org_admin\"]}}, $where]}\n  ) {\n    aggregate {\n      count\n    }\n  }\n}\n\nquery SearchUsersPaginated($searchTerm: String!, $limit: Int = 20, $offset: Int = 0) {\n  users(\n    where: {_and: [{isActive: {_eq: true}}, {_or: [{name: {_ilike: $searchTerm}}, {email: {_ilike: $searchTerm}}, {username: {_ilike: $searchTerm}}]}]}\n    orderBy: {name: ASC}\n    limit: $limit\n    offset: $offset\n  ) {\n    ...UserListItem\n  }\n  searchAggregate: usersAggregate(\n    where: {_and: [{isActive: {_eq: true}}, {_or: [{name: {_ilike: $searchTerm}}, {email: {_ilike: $searchTerm}}, {username: {_ilike: $searchTerm}}]}]}\n  ) {\n    aggregate {\n      count\n    }\n  }\n}\n\nquery GetUserByIdComplete($id: uuid!) {\n  userById(id: $id) {\n    id\n    name\n    email\n    role\n    createdAt\n    updatedAt\n    isStaff\n    managerId\n    clerkUserId\n    managerUser {\n      id\n      name\n      email\n      role\n    }\n  }\n}\n\nquery GetUserByClerkIdComplete($clerkId: String!) {\n  users(where: {clerkUserId: {_eq: $clerkId}}) {\n    id\n    name\n    email\n    role\n    createdAt\n    updatedAt\n    isStaff\n    managerId\n    clerkUserId\n    managerUser {\n      id\n      name\n      email\n      role\n    }\n  }\n}\n\nquery GetUserClerkId($id: uuid!) {\n  userById(id: $id) {\n    id\n    name\n    email\n    role\n    clerkUserId\n  }\n}\n\nquery GetUsersQuickList {\n  users(where: {isActive: {_eq: true}}, orderBy: {name: ASC}) {\n    ...UserMinimal\n  }\n}\n\nquery GetStaffQuickList {\n  users(\n    where: {isActive: {_eq: true}, role: {_in: [\"consultant\", \"manager\", \"org_admin\"]}}\n    orderBy: {name: ASC}\n  ) {\n    ...UserMinimal\n  }\n}\n\nquery GetManagersQuickList {\n  users(\n    where: {isActive: {_eq: true}, role: {_in: [\"manager\", \"org_admin\"]}}\n    orderBy: {name: ASC}\n  ) {\n    ...UserMinimal\n  }\n}\n\nquery GetUserCard($id: uuid!) {\n  userById(id: $id) {\n    ...UserSummary\n    email\n    managerUser {\n      ...UserMinimal\n    }\n  }\n}\n\nquery GetUserAssignmentData($id: uuid!) {\n  userById(id: $id) {\n    ...UserSummary\n    email\n    activePayrollCount: primaryConsultantPayrollsAggregate(\n      where: {supersededDate: {_isNull: true}}\n    ) {\n      aggregate {\n        count\n      }\n    }\n    backupPayrollCount: backupConsultantPayrollsAggregate(\n      where: {supersededDate: {_isNull: true}}\n    ) {\n      aggregate {\n        count\n      }\n    }\n  }\n}\n\nquery GetUserWorkload($id: uuid!) {\n  userById(id: $id) {\n    ...UserSummary\n    primaryPayrolls: primaryConsultantPayrolls(\n      where: {supersededDate: {_isNull: true}}\n      limit: 10\n    ) {\n      id\n      name\n      status\n      client {\n        name\n      }\n    }\n    backupPayrolls: backupConsultantPayrolls(\n      where: {supersededDate: {_isNull: true}}\n      limit: 10\n    ) {\n      id\n      name\n      status\n      client {\n        name\n      }\n    }\n  }\n}": types.GetUsersDocument,
    "subscription StaffSubscription {\n  users(where: {isStaff: {_eq: true}}) {\n    id\n    name\n    role\n    updatedAt\n  }\n}\n\nsubscription UserUpdates($id: uuid!) {\n  users(where: {id: {_eq: $id}}) {\n    ...UserBasicInfo\n  }\n}\n\nsubscription StaffListUpdates {\n  users(\n    where: {role: {_in: [\"consultant\", \"manager\", \"org_admin\"]}}\n    orderBy: {name: ASC}\n  ) {\n    ...UserBasicInfo\n  }\n}\n\nsubscription UserRoleChanges($userId: uuid!) {\n  users(where: {id: {_eq: $userId}}) {\n    id\n    role\n    isActive\n    isStaff\n    updatedAt\n    managerId\n  }\n}\n\nsubscription UserStatusUpdates($userId: uuid!) {\n  users(where: {id: {_eq: $userId}}) {\n    id\n    name\n    role\n    isActive\n    isStaff\n    deactivatedAt\n    deactivatedBy\n    updatedAt\n  }\n}\n\nsubscription ActiveUsersCount {\n  usersAggregate(where: {isActive: {_eq: true}}) {\n    aggregate {\n      count\n    }\n  }\n}\n\nsubscription UserSessionStatus($clerkUserId: String!) {\n  users(where: {clerkUserId: {_eq: $clerkUserId}}) {\n    id\n    role\n    isActive\n    updatedAt\n  }\n}\n\nsubscription TeamMemberUpdates($managerId: uuid!) {\n  users(where: {managerId: {_eq: $managerId}}) {\n    id\n    name\n    role\n    isActive\n    updatedAt\n  }\n}\n\nsubscription UserPermissionUpdates($userId: uuid!) {\n  users(where: {id: {_eq: $userId}}) {\n    id\n    role\n    isActive\n    assignedRoles {\n      roleId\n      assignedRole {\n        name\n        assignedPermissions {\n          permissionId\n          grantedPermission {\n            action\n            description\n            relatedResource {\n              name\n            }\n          }\n        }\n      }\n    }\n  }\n}": types.StaffSubscriptionDocument,
    "fragment UserCore on users {\n  id\n  name\n  email\n  username\n  role\n  isActive\n  isStaff\n  clerkUserId\n  createdAt\n  updatedAt\n}\n\nfragment UserBasic on users {\n  id\n  name\n  email\n  role\n  isActive\n}\n\nfragment UserWithManager on users {\n  ...UserCore\n  managerId\n  managerUser {\n    ...UserBasic\n  }\n}\n\nfragment RoleCore on roles {\n  id\n  name\n  description\n  displayName\n  priority\n  isSystemRole\n  createdAt\n}\n\nfragment PermissionCore on permissions {\n  id\n  action\n  description\n  resourceId\n  createdAt\n  updatedAt\n}\n\nfragment PermissionWithResource on permissions {\n  ...PermissionCore\n  relatedResource {\n    id\n    name\n    description\n  }\n}\n\nfragment ClientCore on clients {\n  id\n  name\n  contactEmail\n  contactPerson\n  contactPhone\n  active\n  createdAt\n  updatedAt\n}\n\nfragment ClientBasic on clients {\n  id\n  name\n  active\n}\n\nfragment ResourceCore on resources {\n  id\n  name\n  displayName\n  description\n  createdAt\n  updatedAt\n}\n\nfragment UserRoleCore on userRoles {\n  id\n  userId\n  roleId\n  createdAt\n  updatedAt\n}\n\nfragment RolePermissionCore on rolePermissions {\n  id\n  roleId\n  permissionId\n  conditions\n  createdAt\n  updatedAt\n}\n\nfragment AuditFields on auditLogs {\n  id\n  eventTime\n  action\n  resourceType\n  resourceId\n  userId\n  ipAddress\n  userAgent\n  success\n  userEmail\n  userRole\n}": types.UserCoreFragmentDoc,
};

/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 *
 *
 * @example
 * ```ts
 * const query = graphql(`query GetUser($id: ID!) { user(id: $id) { name } }`);
 * ```
 *
 * The query argument is unknown!
 * Please regenerate the types.
 */
export function graphql(source: string): unknown;

/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "fragment UsersUserCore on users {\n  id\n  name\n  email\n  isActive\n  isStaff\n  role\n  clerkUserId\n  createdAt\n  updatedAt\n}\n\nfragment UserWithProfile on users {\n  ...UsersUserCore\n  username\n  image\n}\n\nfragment UserWithRoles on users {\n  ...UsersUserCore\n  assignedRoles {\n    id\n    roleId\n    assignedRole {\n      id\n      name\n      displayName\n      description\n      priority\n      isSystemRole\n      assignedPermissions {\n        id\n        conditions\n        permissionId\n        grantedPermission {\n          id\n          action\n          description\n          relatedResource {\n            id\n            name\n            displayName\n            description\n          }\n        }\n      }\n    }\n  }\n}\n\nfragment UserWithTeam on users {\n  ...UsersUserCore\n}\n\nfragment UserWithWorkSchedule on users {\n  ...UsersUserCore\n  userWorkSchedules {\n    id\n    workDay\n    workHours\n    createdAt\n    updatedAt\n  }\n}\n\nfragment UserWithPayrolls on users {\n  ...UsersUserCore\n}\n\nfragment UserWithAllRelations on users {\n  ...UserWithProfile\n  assignedRoles {\n    id\n    roleId\n    assignedRole {\n      id\n      name\n      displayName\n      description\n      priority\n    }\n  }\n  userWorkSchedules {\n    id\n    workDay\n    workHours\n    createdAt\n    updatedAt\n  }\n}\n\nfragment UserBasicInfo on users {\n  id\n  name\n  email\n  role\n  username\n  image\n  isStaff\n  isActive\n  managerId\n  clerkUserId\n}\n\nfragment UserForStaff on users {\n  ...UserWithProfile\n}\n\nfragment UserForAuth on users {\n  id\n  name\n  email\n  role\n  isActive\n  clerkUserId\n}\n\nfragment UserForAudit on users {\n  id\n  name\n  email\n  role\n  isActive\n}\n\nfragment UserRoleInfo on users {\n  id\n  name\n  email\n  role\n  isActive\n  assignedRoles {\n    roleId\n    assignedRole {\n      name\n      description\n    }\n  }\n}\n\nfragment UserPermissionsInfo on users {\n  id\n  name\n  role\n  assignedRoles {\n    roleId\n    assignedRole {\n      name\n      assignedPermissions {\n        permissionId\n        grantedPermission {\n          relatedResource {\n            name\n          }\n          action\n          description\n        }\n      }\n    }\n  }\n}\n\nfragment UserSummary on users {\n  id\n  name\n  role\n  isActive\n  isStaff\n}\n\nfragment UserListItem on users {\n  ...UserSummary\n  email\n  managerId\n  clerkUserId\n  updatedAt\n}\n\nfragment UserDashboardCard on users {\n  ...UserSummary\n  managerUser {\n    id\n    name\n  }\n}\n\nfragment UserTeamSummary on users {\n  ...UserSummary\n  email\n  managerUser {\n    id\n    name\n  }\n}\n\nfragment UserMinimal on users {\n  id\n  name\n  role\n}\n\nfragment UserTableRow on users {\n  ...UserListItem\n  managerUser {\n    id\n    name\n  }\n}"): (typeof documents)["fragment UsersUserCore on users {\n  id\n  name\n  email\n  isActive\n  isStaff\n  role\n  clerkUserId\n  createdAt\n  updatedAt\n}\n\nfragment UserWithProfile on users {\n  ...UsersUserCore\n  username\n  image\n}\n\nfragment UserWithRoles on users {\n  ...UsersUserCore\n  assignedRoles {\n    id\n    roleId\n    assignedRole {\n      id\n      name\n      displayName\n      description\n      priority\n      isSystemRole\n      assignedPermissions {\n        id\n        conditions\n        permissionId\n        grantedPermission {\n          id\n          action\n          description\n          relatedResource {\n            id\n            name\n            displayName\n            description\n          }\n        }\n      }\n    }\n  }\n}\n\nfragment UserWithTeam on users {\n  ...UsersUserCore\n}\n\nfragment UserWithWorkSchedule on users {\n  ...UsersUserCore\n  userWorkSchedules {\n    id\n    workDay\n    workHours\n    createdAt\n    updatedAt\n  }\n}\n\nfragment UserWithPayrolls on users {\n  ...UsersUserCore\n}\n\nfragment UserWithAllRelations on users {\n  ...UserWithProfile\n  assignedRoles {\n    id\n    roleId\n    assignedRole {\n      id\n      name\n      displayName\n      description\n      priority\n    }\n  }\n  userWorkSchedules {\n    id\n    workDay\n    workHours\n    createdAt\n    updatedAt\n  }\n}\n\nfragment UserBasicInfo on users {\n  id\n  name\n  email\n  role\n  username\n  image\n  isStaff\n  isActive\n  managerId\n  clerkUserId\n}\n\nfragment UserForStaff on users {\n  ...UserWithProfile\n}\n\nfragment UserForAuth on users {\n  id\n  name\n  email\n  role\n  isActive\n  clerkUserId\n}\n\nfragment UserForAudit on users {\n  id\n  name\n  email\n  role\n  isActive\n}\n\nfragment UserRoleInfo on users {\n  id\n  name\n  email\n  role\n  isActive\n  assignedRoles {\n    roleId\n    assignedRole {\n      name\n      description\n    }\n  }\n}\n\nfragment UserPermissionsInfo on users {\n  id\n  name\n  role\n  assignedRoles {\n    roleId\n    assignedRole {\n      name\n      assignedPermissions {\n        permissionId\n        grantedPermission {\n          relatedResource {\n            name\n          }\n          action\n          description\n        }\n      }\n    }\n  }\n}\n\nfragment UserSummary on users {\n  id\n  name\n  role\n  isActive\n  isStaff\n}\n\nfragment UserListItem on users {\n  ...UserSummary\n  email\n  managerId\n  clerkUserId\n  updatedAt\n}\n\nfragment UserDashboardCard on users {\n  ...UserSummary\n  managerUser {\n    id\n    name\n  }\n}\n\nfragment UserTeamSummary on users {\n  ...UserSummary\n  email\n  managerUser {\n    id\n    name\n  }\n}\n\nfragment UserMinimal on users {\n  id\n  name\n  role\n}\n\nfragment UserTableRow on users {\n  ...UserListItem\n  managerUser {\n    id\n    name\n  }\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "mutation CreateUser($object: usersInsertInput!) {\n  insertUser(object: $object) {\n    ...UsersUserCore\n    username\n    image\n    managerId\n  }\n}\n\nmutation UpdateUser($id: uuid!, $set: usersSetInput!) {\n  updateUserById(pkColumns: {id: $id}, _set: $set) {\n    ...UsersUserCore\n    username\n    image\n    managerId\n  }\n}\n\nmutation DeleteUser($id: uuid!) {\n  updateUserById(\n    pkColumns: {id: $id}\n    _set: {isActive: false, deactivatedAt: \"now()\"}\n  ) {\n    ...UserCore\n  }\n}\n\nmutation UpdateUserRole($id: uuid!, $role: user_role!) {\n  updateUserById(pkColumns: {id: $id}, _set: {role: $role}) {\n    ...UserCore\n  }\n}\n\nmutation BulkUpdateUsers($where: usersBoolExp!, $set: usersSetInput!) {\n  bulkUpdateUsers(where: $where, _set: $set) {\n    returning {\n      ...UserCore\n    }\n    affectedRows\n  }\n}\n\nmutation CreateUserFromClerk($clerkId: String!, $name: String!, $email: String!, $role: user_role = \"viewer\", $isStaff: Boolean = false, $managerId: uuid, $image: String) {\n  insertUser(\n    object: {clerkUserId: $clerkId, name: $name, email: $email, role: $role, isStaff: $isStaff, managerId: $managerId, image: $image}\n    onConflict: {constraint: users_clerk_user_id_key, updateColumns: [name, email, image, updatedAt]}\n  ) {\n    ...UserCore\n  }\n}\n\nmutation CreateUserByEmail($name: String!, $email: String!, $role: user_role!, $managerId: uuid) {\n  insertUser(\n    object: {name: $name, email: $email, role: $role, managerId: $managerId, isStaff: true, isActive: true}\n  ) {\n    ...UserCore\n  }\n}\n\nmutation UpdateUserProfile($id: uuid!, $name: String, $image: String) {\n  updateUserById(pkColumns: {id: $id}, _set: {name: $name, image: $image}) {\n    ...UserWithProfile\n  }\n}\n\nmutation DeactivateUser($id: uuid!) {\n  updateUserById(\n    pkColumns: {id: $id}\n    _set: {isActive: false, deactivatedAt: \"now()\"}\n  ) {\n    ...UserCore\n  }\n}\n\nmutation ReactivateUser($id: uuid!) {\n  updateUserById(\n    pkColumns: {id: $id}\n    _set: {isActive: true, deactivatedAt: null}\n  ) {\n    ...UserCore\n  }\n}\n\nmutation HardDeleteUser($id: uuid!) {\n  deleteUserById(id: $id) {\n    id\n    name\n    email\n  }\n}\n\nmutation UpdateStaffRole($id: uuid!, $role: user_role!) {\n  updateUserById(pkColumns: {id: $id}, _set: {role: $role}) {\n    ...UserCore\n  }\n}\n\nmutation UpdateUserRoleFromClerk($clerkUserId: String!, $role: user_role!) {\n  bulkUpdateUsers(where: {clerkUserId: {_eq: $clerkUserId}}, _set: {role: $role}) {\n    returning {\n      ...UserCore\n    }\n    affectedRows\n  }\n}"): (typeof documents)["mutation CreateUser($object: usersInsertInput!) {\n  insertUser(object: $object) {\n    ...UsersUserCore\n    username\n    image\n    managerId\n  }\n}\n\nmutation UpdateUser($id: uuid!, $set: usersSetInput!) {\n  updateUserById(pkColumns: {id: $id}, _set: $set) {\n    ...UsersUserCore\n    username\n    image\n    managerId\n  }\n}\n\nmutation DeleteUser($id: uuid!) {\n  updateUserById(\n    pkColumns: {id: $id}\n    _set: {isActive: false, deactivatedAt: \"now()\"}\n  ) {\n    ...UserCore\n  }\n}\n\nmutation UpdateUserRole($id: uuid!, $role: user_role!) {\n  updateUserById(pkColumns: {id: $id}, _set: {role: $role}) {\n    ...UserCore\n  }\n}\n\nmutation BulkUpdateUsers($where: usersBoolExp!, $set: usersSetInput!) {\n  bulkUpdateUsers(where: $where, _set: $set) {\n    returning {\n      ...UserCore\n    }\n    affectedRows\n  }\n}\n\nmutation CreateUserFromClerk($clerkId: String!, $name: String!, $email: String!, $role: user_role = \"viewer\", $isStaff: Boolean = false, $managerId: uuid, $image: String) {\n  insertUser(\n    object: {clerkUserId: $clerkId, name: $name, email: $email, role: $role, isStaff: $isStaff, managerId: $managerId, image: $image}\n    onConflict: {constraint: users_clerk_user_id_key, updateColumns: [name, email, image, updatedAt]}\n  ) {\n    ...UserCore\n  }\n}\n\nmutation CreateUserByEmail($name: String!, $email: String!, $role: user_role!, $managerId: uuid) {\n  insertUser(\n    object: {name: $name, email: $email, role: $role, managerId: $managerId, isStaff: true, isActive: true}\n  ) {\n    ...UserCore\n  }\n}\n\nmutation UpdateUserProfile($id: uuid!, $name: String, $image: String) {\n  updateUserById(pkColumns: {id: $id}, _set: {name: $name, image: $image}) {\n    ...UserWithProfile\n  }\n}\n\nmutation DeactivateUser($id: uuid!) {\n  updateUserById(\n    pkColumns: {id: $id}\n    _set: {isActive: false, deactivatedAt: \"now()\"}\n  ) {\n    ...UserCore\n  }\n}\n\nmutation ReactivateUser($id: uuid!) {\n  updateUserById(\n    pkColumns: {id: $id}\n    _set: {isActive: true, deactivatedAt: null}\n  ) {\n    ...UserCore\n  }\n}\n\nmutation HardDeleteUser($id: uuid!) {\n  deleteUserById(id: $id) {\n    id\n    name\n    email\n  }\n}\n\nmutation UpdateStaffRole($id: uuid!, $role: user_role!) {\n  updateUserById(pkColumns: {id: $id}, _set: {role: $role}) {\n    ...UserCore\n  }\n}\n\nmutation UpdateUserRoleFromClerk($clerkUserId: String!, $role: user_role!) {\n  bulkUpdateUsers(where: {clerkUserId: {_eq: $clerkUserId}}, _set: {role: $role}) {\n    returning {\n      ...UserCore\n    }\n    affectedRows\n  }\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "query GetUsers($limit: Int = 50, $offset: Int = 0, $where: usersBoolExp) {\n  users(limit: $limit, offset: $offset, where: $where, orderBy: {name: ASC}) {\n    ...UsersUserCore\n    username\n    image\n    managerId\n  }\n}\n\nquery GetUsersForDropdown {\n  users {\n    id\n    name\n    email\n    role\n  }\n}\n\nquery GetManagers {\n  users(where: {role: {_in: [\"manager\", \"org_admin\"]}, isActive: {_eq: true}}) {\n    ...UsersUserCore\n    username\n    image\n    managerId\n  }\n}\n\nquery GetUserCount {\n  usersAggregate {\n    aggregate {\n      count\n    }\n  }\n}\n\nquery GetActiveUsers {\n  users(where: {isActive: {_eq: true}}, orderBy: {name: ASC}) {\n    ...UserBasicInfo\n  }\n}\n\nquery GetUserById($id: uuid!) {\n  userById(id: $id) {\n    id\n    name\n    email\n    role\n    username\n    image\n    isStaff\n    isActive\n    managerId\n    clerkUserId\n    managerUser {\n      id\n      name\n      email\n      role\n    }\n  }\n}\n\nquery GetUserByClerkId($clerkUserId: String!) {\n  users(where: {clerkUserId: {_eq: $clerkUserId}}, limit: 1) {\n    id\n    name\n    email\n    role\n    username\n    image\n    isStaff\n    isActive\n    managerId\n    clerkUserId\n  }\n}\n\nquery GetUserByEmail($email: String!) {\n  users(where: {email: {_eq: $email}}) {\n    id\n    name\n    email\n    role\n    username\n    image\n    isStaff\n    isActive\n    managerId\n    clerkUserId\n    managerUser {\n      id\n      name\n      email\n      role\n    }\n  }\n}\n\nquery GetStaffList {\n  users(\n    where: {isActive: {_eq: true}, role: {_in: [\"consultant\", \"manager\", \"org_admin\"]}}\n    orderBy: {name: ASC}\n  ) {\n    id\n    name\n    email\n    role\n    username\n    image\n    isStaff\n    isActive\n    managerId\n    clerkUserId\n    managerUser {\n      id\n      name\n      email\n      role\n    }\n  }\n}\n\nquery GetStaffById($id: uuid!) {\n  userById(id: $id) {\n    id\n    name\n    email\n    role\n    username\n    image\n    isStaff\n    isActive\n    clerkUserId\n    createdAt\n    updatedAt\n  }\n}\n\nquery GetAllUsersList {\n  users(where: {isActive: {_eq: true}}, orderBy: {name: ASC}) {\n    id\n    name\n    email\n    role\n    username\n    image\n    isStaff\n    isActive\n    managerId\n    clerkUserId\n  }\n}\n\nquery GetUserProfile($id: uuid!) {\n  userById(id: $id) {\n    ...UserWithProfile\n  }\n}\n\nquery GetUsersWithRoles {\n  users(where: {isActive: {_eq: true}}, orderBy: {name: ASC}) {\n    ...UserRoleInfo\n  }\n}\n\nquery GetUserPermissions($id: uuid!) {\n  userById(id: $id) {\n    ...UserPermissionsInfo\n  }\n}\n\nquery SearchUsers($searchTerm: String!) {\n  users(\n    where: {_and: [{isActive: {_eq: true}}, {_or: [{name: {_ilike: $searchTerm}}, {email: {_ilike: $searchTerm}}, {username: {_ilike: $searchTerm}}]}]}\n    orderBy: {name: ASC}\n    limit: 50\n  ) {\n    ...UserWithProfile\n  }\n}\n\nquery GetUsersForAudit {\n  users(orderBy: {createdAt: DESC}) {\n    ...UserForAudit\n  }\n}\n\nquery GetUserStats {\n  usersAggregate {\n    aggregate {\n      count\n    }\n  }\n  activeUsers: usersAggregate(where: {isActive: {_eq: true}}) {\n    aggregate {\n      count\n    }\n  }\n  byRole: usersAggregate {\n    nodes {\n      role\n    }\n    aggregate {\n      count\n    }\n  }\n}\n\nquery GetUserSessionInfo($id: uuid!) {\n  userById(id: $id) {\n    id\n    name\n    email\n    role\n    isActive\n  }\n}\n\nquery GetCurrentUser($currentUserId: uuid!) {\n  userById(id: $currentUserId) {\n    id\n    name\n    role\n    isStaff\n    isActive\n    managerId\n    clerkUserId\n    createdAt\n    updatedAt\n  }\n}\n\nquery GetUserRole($userId: uuid!) {\n  userById(id: $userId) {\n    id\n    role\n    isStaff\n    isActive\n  }\n}\n\nquery GetUserRoleFallback($userId: uuid!) {\n  userById(id: $userId) {\n    id\n    role\n    isStaff\n    isActive\n    clerkUserId\n  }\n}\n\nquery GetUsersWithLimit($limit: Int = 10) {\n  users(limit: $limit) {\n    id\n    name\n    email\n    role\n    isStaff\n    clerkUserId\n  }\n}\n\nquery GetUserProfileSettings($id: uuid!) {\n  userById(id: $id) {\n    id\n    name\n    email\n    role\n    isStaff\n    isActive\n    clerkUserId\n    managerUser {\n      id\n      name\n      email\n    }\n  }\n}\n\nquery GetUsersWithFiltering($limit: Int = 50, $offset: Int = 0, $where: usersBoolExp) {\n  users(limit: $limit, offset: $offset, where: $where, orderBy: {createdAt: DESC}) {\n    id\n    name\n    email\n    role\n    createdAt\n    updatedAt\n    isStaff\n    isActive\n    managerId\n    clerkUserId\n    managerUser {\n      id\n      name\n      email\n    }\n  }\n  usersAggregate(where: $where) {\n    aggregate {\n      count\n    }\n  }\n}\n\nquery GetDeveloperManagers {\n  users(where: {role: {_in: [\"developer\", \"manager\"]}}, orderBy: {name: ASC}) {\n    id\n    name\n    email\n    role\n  }\n}\n\nquery GetUserRoleSecure($userId: uuid!) {\n  userById(id: $userId) {\n    id\n    role\n    isStaff\n    isActive\n  }\n}\n\nquery GetUserRoleFallbackSecure($userId: uuid!) {\n  userById(id: $userId) {\n    id\n    role\n    isStaff\n    isActive\n    clerkUserId\n  }\n}\n\nquery GetUserProfileComplete($id: uuid!) {\n  userById(id: $id) {\n    id\n    name\n    email\n    username\n    image\n    role\n    isStaff\n    isActive\n    createdAt\n    updatedAt\n    clerkUserId\n    managerUser {\n      id\n      name\n      email\n      image\n    }\n    primaryConsultantPayrolls {\n      id\n      name\n      status\n      client {\n        name\n      }\n      employeeCount\n    }\n    backupConsultantPayrolls {\n      id\n      name\n      status\n      client {\n        name\n      }\n    }\n    managedPayrolls {\n      id\n      name\n      status\n      client {\n        name\n      }\n    }\n  }\n}\n\nquery GetUserForDeletion($id: uuid!) {\n  userById(id: $id) {\n    id\n    name\n    email\n    role\n    clerkUserId\n    isStaff\n    isActive\n    createdAt\n    managerUser {\n      id\n      name\n      email\n    }\n  }\n  payrolls(\n    where: {_or: [{primaryConsultantUserId: {_eq: $id}}, {backupConsultantUserId: {_eq: $id}}, {managerUserId: {_eq: $id}}], status: {_eq: \"Active\"}}\n  ) {\n    id\n    name\n    status\n  }\n  subordinates: users(where: {managerId: {_eq: $id}, isActive: {_eq: true}}) {\n    id\n    name\n    email\n  }\n}\n\nquery GetCurrentUserRole($clerkUserId: String!) {\n  users(where: {clerkUserId: {_eq: $clerkUserId}}) {\n    id\n    role\n    isStaff\n    isActive\n  }\n}\n\nquery GetUsersPaginated($limit: Int = 20, $offset: Int = 0, $where: usersBoolExp = {}, $orderBy: [usersOrderBy!] = [{name: ASC}]) {\n  users(\n    limit: $limit\n    offset: $offset\n    where: {_and: [{isActive: {_eq: true}}, $where]}\n    orderBy: $orderBy\n  ) {\n    ...UserListItem\n  }\n  usersAggregate(where: {_and: [{isActive: {_eq: true}}, $where]}) {\n    aggregate {\n      count\n    }\n  }\n}\n\nquery GetAllUsersPaginated($limit: Int = 20, $offset: Int = 0, $where: usersBoolExp = {}, $orderBy: [usersOrderBy!] = [{name: ASC}]) {\n  users(limit: $limit, offset: $offset, where: $where, orderBy: $orderBy) {\n    ...UserTableRow\n  }\n  allUsersAggregate: usersAggregate(where: $where) {\n    aggregate {\n      count\n    }\n  }\n}\n\nquery GetStaffPaginated($limit: Int = 20, $offset: Int = 0, $where: usersBoolExp = {}) {\n  users(\n    limit: $limit\n    offset: $offset\n    where: {_and: [{isActive: {_eq: true}}, {role: {_in: [\"consultant\", \"manager\", \"org_admin\"]}}, $where]}\n    orderBy: {name: ASC}\n  ) {\n    ...UserListItem\n    managerUser {\n      ...UserMinimal\n    }\n  }\n  staffAggregate: usersAggregate(\n    where: {_and: [{isActive: {_eq: true}}, {role: {_in: [\"consultant\", \"manager\", \"org_admin\"]}}, $where]}\n  ) {\n    aggregate {\n      count\n    }\n  }\n}\n\nquery SearchUsersPaginated($searchTerm: String!, $limit: Int = 20, $offset: Int = 0) {\n  users(\n    where: {_and: [{isActive: {_eq: true}}, {_or: [{name: {_ilike: $searchTerm}}, {email: {_ilike: $searchTerm}}, {username: {_ilike: $searchTerm}}]}]}\n    orderBy: {name: ASC}\n    limit: $limit\n    offset: $offset\n  ) {\n    ...UserListItem\n  }\n  searchAggregate: usersAggregate(\n    where: {_and: [{isActive: {_eq: true}}, {_or: [{name: {_ilike: $searchTerm}}, {email: {_ilike: $searchTerm}}, {username: {_ilike: $searchTerm}}]}]}\n  ) {\n    aggregate {\n      count\n    }\n  }\n}\n\nquery GetUserByIdComplete($id: uuid!) {\n  userById(id: $id) {\n    id\n    name\n    email\n    role\n    createdAt\n    updatedAt\n    isStaff\n    managerId\n    clerkUserId\n    managerUser {\n      id\n      name\n      email\n      role\n    }\n  }\n}\n\nquery GetUserByClerkIdComplete($clerkId: String!) {\n  users(where: {clerkUserId: {_eq: $clerkId}}) {\n    id\n    name\n    email\n    role\n    createdAt\n    updatedAt\n    isStaff\n    managerId\n    clerkUserId\n    managerUser {\n      id\n      name\n      email\n      role\n    }\n  }\n}\n\nquery GetUserClerkId($id: uuid!) {\n  userById(id: $id) {\n    id\n    name\n    email\n    role\n    clerkUserId\n  }\n}\n\nquery GetUsersQuickList {\n  users(where: {isActive: {_eq: true}}, orderBy: {name: ASC}) {\n    ...UserMinimal\n  }\n}\n\nquery GetStaffQuickList {\n  users(\n    where: {isActive: {_eq: true}, role: {_in: [\"consultant\", \"manager\", \"org_admin\"]}}\n    orderBy: {name: ASC}\n  ) {\n    ...UserMinimal\n  }\n}\n\nquery GetManagersQuickList {\n  users(\n    where: {isActive: {_eq: true}, role: {_in: [\"manager\", \"org_admin\"]}}\n    orderBy: {name: ASC}\n  ) {\n    ...UserMinimal\n  }\n}\n\nquery GetUserCard($id: uuid!) {\n  userById(id: $id) {\n    ...UserSummary\n    email\n    managerUser {\n      ...UserMinimal\n    }\n  }\n}\n\nquery GetUserAssignmentData($id: uuid!) {\n  userById(id: $id) {\n    ...UserSummary\n    email\n    activePayrollCount: primaryConsultantPayrollsAggregate(\n      where: {supersededDate: {_isNull: true}}\n    ) {\n      aggregate {\n        count\n      }\n    }\n    backupPayrollCount: backupConsultantPayrollsAggregate(\n      where: {supersededDate: {_isNull: true}}\n    ) {\n      aggregate {\n        count\n      }\n    }\n  }\n}\n\nquery GetUserWorkload($id: uuid!) {\n  userById(id: $id) {\n    ...UserSummary\n    primaryPayrolls: primaryConsultantPayrolls(\n      where: {supersededDate: {_isNull: true}}\n      limit: 10\n    ) {\n      id\n      name\n      status\n      client {\n        name\n      }\n    }\n    backupPayrolls: backupConsultantPayrolls(\n      where: {supersededDate: {_isNull: true}}\n      limit: 10\n    ) {\n      id\n      name\n      status\n      client {\n        name\n      }\n    }\n  }\n}"): (typeof documents)["query GetUsers($limit: Int = 50, $offset: Int = 0, $where: usersBoolExp) {\n  users(limit: $limit, offset: $offset, where: $where, orderBy: {name: ASC}) {\n    ...UsersUserCore\n    username\n    image\n    managerId\n  }\n}\n\nquery GetUsersForDropdown {\n  users {\n    id\n    name\n    email\n    role\n  }\n}\n\nquery GetManagers {\n  users(where: {role: {_in: [\"manager\", \"org_admin\"]}, isActive: {_eq: true}}) {\n    ...UsersUserCore\n    username\n    image\n    managerId\n  }\n}\n\nquery GetUserCount {\n  usersAggregate {\n    aggregate {\n      count\n    }\n  }\n}\n\nquery GetActiveUsers {\n  users(where: {isActive: {_eq: true}}, orderBy: {name: ASC}) {\n    ...UserBasicInfo\n  }\n}\n\nquery GetUserById($id: uuid!) {\n  userById(id: $id) {\n    id\n    name\n    email\n    role\n    username\n    image\n    isStaff\n    isActive\n    managerId\n    clerkUserId\n    managerUser {\n      id\n      name\n      email\n      role\n    }\n  }\n}\n\nquery GetUserByClerkId($clerkUserId: String!) {\n  users(where: {clerkUserId: {_eq: $clerkUserId}}, limit: 1) {\n    id\n    name\n    email\n    role\n    username\n    image\n    isStaff\n    isActive\n    managerId\n    clerkUserId\n  }\n}\n\nquery GetUserByEmail($email: String!) {\n  users(where: {email: {_eq: $email}}) {\n    id\n    name\n    email\n    role\n    username\n    image\n    isStaff\n    isActive\n    managerId\n    clerkUserId\n    managerUser {\n      id\n      name\n      email\n      role\n    }\n  }\n}\n\nquery GetStaffList {\n  users(\n    where: {isActive: {_eq: true}, role: {_in: [\"consultant\", \"manager\", \"org_admin\"]}}\n    orderBy: {name: ASC}\n  ) {\n    id\n    name\n    email\n    role\n    username\n    image\n    isStaff\n    isActive\n    managerId\n    clerkUserId\n    managerUser {\n      id\n      name\n      email\n      role\n    }\n  }\n}\n\nquery GetStaffById($id: uuid!) {\n  userById(id: $id) {\n    id\n    name\n    email\n    role\n    username\n    image\n    isStaff\n    isActive\n    clerkUserId\n    createdAt\n    updatedAt\n  }\n}\n\nquery GetAllUsersList {\n  users(where: {isActive: {_eq: true}}, orderBy: {name: ASC}) {\n    id\n    name\n    email\n    role\n    username\n    image\n    isStaff\n    isActive\n    managerId\n    clerkUserId\n  }\n}\n\nquery GetUserProfile($id: uuid!) {\n  userById(id: $id) {\n    ...UserWithProfile\n  }\n}\n\nquery GetUsersWithRoles {\n  users(where: {isActive: {_eq: true}}, orderBy: {name: ASC}) {\n    ...UserRoleInfo\n  }\n}\n\nquery GetUserPermissions($id: uuid!) {\n  userById(id: $id) {\n    ...UserPermissionsInfo\n  }\n}\n\nquery SearchUsers($searchTerm: String!) {\n  users(\n    where: {_and: [{isActive: {_eq: true}}, {_or: [{name: {_ilike: $searchTerm}}, {email: {_ilike: $searchTerm}}, {username: {_ilike: $searchTerm}}]}]}\n    orderBy: {name: ASC}\n    limit: 50\n  ) {\n    ...UserWithProfile\n  }\n}\n\nquery GetUsersForAudit {\n  users(orderBy: {createdAt: DESC}) {\n    ...UserForAudit\n  }\n}\n\nquery GetUserStats {\n  usersAggregate {\n    aggregate {\n      count\n    }\n  }\n  activeUsers: usersAggregate(where: {isActive: {_eq: true}}) {\n    aggregate {\n      count\n    }\n  }\n  byRole: usersAggregate {\n    nodes {\n      role\n    }\n    aggregate {\n      count\n    }\n  }\n}\n\nquery GetUserSessionInfo($id: uuid!) {\n  userById(id: $id) {\n    id\n    name\n    email\n    role\n    isActive\n  }\n}\n\nquery GetCurrentUser($currentUserId: uuid!) {\n  userById(id: $currentUserId) {\n    id\n    name\n    role\n    isStaff\n    isActive\n    managerId\n    clerkUserId\n    createdAt\n    updatedAt\n  }\n}\n\nquery GetUserRole($userId: uuid!) {\n  userById(id: $userId) {\n    id\n    role\n    isStaff\n    isActive\n  }\n}\n\nquery GetUserRoleFallback($userId: uuid!) {\n  userById(id: $userId) {\n    id\n    role\n    isStaff\n    isActive\n    clerkUserId\n  }\n}\n\nquery GetUsersWithLimit($limit: Int = 10) {\n  users(limit: $limit) {\n    id\n    name\n    email\n    role\n    isStaff\n    clerkUserId\n  }\n}\n\nquery GetUserProfileSettings($id: uuid!) {\n  userById(id: $id) {\n    id\n    name\n    email\n    role\n    isStaff\n    isActive\n    clerkUserId\n    managerUser {\n      id\n      name\n      email\n    }\n  }\n}\n\nquery GetUsersWithFiltering($limit: Int = 50, $offset: Int = 0, $where: usersBoolExp) {\n  users(limit: $limit, offset: $offset, where: $where, orderBy: {createdAt: DESC}) {\n    id\n    name\n    email\n    role\n    createdAt\n    updatedAt\n    isStaff\n    isActive\n    managerId\n    clerkUserId\n    managerUser {\n      id\n      name\n      email\n    }\n  }\n  usersAggregate(where: $where) {\n    aggregate {\n      count\n    }\n  }\n}\n\nquery GetDeveloperManagers {\n  users(where: {role: {_in: [\"developer\", \"manager\"]}}, orderBy: {name: ASC}) {\n    id\n    name\n    email\n    role\n  }\n}\n\nquery GetUserRoleSecure($userId: uuid!) {\n  userById(id: $userId) {\n    id\n    role\n    isStaff\n    isActive\n  }\n}\n\nquery GetUserRoleFallbackSecure($userId: uuid!) {\n  userById(id: $userId) {\n    id\n    role\n    isStaff\n    isActive\n    clerkUserId\n  }\n}\n\nquery GetUserProfileComplete($id: uuid!) {\n  userById(id: $id) {\n    id\n    name\n    email\n    username\n    image\n    role\n    isStaff\n    isActive\n    createdAt\n    updatedAt\n    clerkUserId\n    managerUser {\n      id\n      name\n      email\n      image\n    }\n    primaryConsultantPayrolls {\n      id\n      name\n      status\n      client {\n        name\n      }\n      employeeCount\n    }\n    backupConsultantPayrolls {\n      id\n      name\n      status\n      client {\n        name\n      }\n    }\n    managedPayrolls {\n      id\n      name\n      status\n      client {\n        name\n      }\n    }\n  }\n}\n\nquery GetUserForDeletion($id: uuid!) {\n  userById(id: $id) {\n    id\n    name\n    email\n    role\n    clerkUserId\n    isStaff\n    isActive\n    createdAt\n    managerUser {\n      id\n      name\n      email\n    }\n  }\n  payrolls(\n    where: {_or: [{primaryConsultantUserId: {_eq: $id}}, {backupConsultantUserId: {_eq: $id}}, {managerUserId: {_eq: $id}}], status: {_eq: \"Active\"}}\n  ) {\n    id\n    name\n    status\n  }\n  subordinates: users(where: {managerId: {_eq: $id}, isActive: {_eq: true}}) {\n    id\n    name\n    email\n  }\n}\n\nquery GetCurrentUserRole($clerkUserId: String!) {\n  users(where: {clerkUserId: {_eq: $clerkUserId}}) {\n    id\n    role\n    isStaff\n    isActive\n  }\n}\n\nquery GetUsersPaginated($limit: Int = 20, $offset: Int = 0, $where: usersBoolExp = {}, $orderBy: [usersOrderBy!] = [{name: ASC}]) {\n  users(\n    limit: $limit\n    offset: $offset\n    where: {_and: [{isActive: {_eq: true}}, $where]}\n    orderBy: $orderBy\n  ) {\n    ...UserListItem\n  }\n  usersAggregate(where: {_and: [{isActive: {_eq: true}}, $where]}) {\n    aggregate {\n      count\n    }\n  }\n}\n\nquery GetAllUsersPaginated($limit: Int = 20, $offset: Int = 0, $where: usersBoolExp = {}, $orderBy: [usersOrderBy!] = [{name: ASC}]) {\n  users(limit: $limit, offset: $offset, where: $where, orderBy: $orderBy) {\n    ...UserTableRow\n  }\n  allUsersAggregate: usersAggregate(where: $where) {\n    aggregate {\n      count\n    }\n  }\n}\n\nquery GetStaffPaginated($limit: Int = 20, $offset: Int = 0, $where: usersBoolExp = {}) {\n  users(\n    limit: $limit\n    offset: $offset\n    where: {_and: [{isActive: {_eq: true}}, {role: {_in: [\"consultant\", \"manager\", \"org_admin\"]}}, $where]}\n    orderBy: {name: ASC}\n  ) {\n    ...UserListItem\n    managerUser {\n      ...UserMinimal\n    }\n  }\n  staffAggregate: usersAggregate(\n    where: {_and: [{isActive: {_eq: true}}, {role: {_in: [\"consultant\", \"manager\", \"org_admin\"]}}, $where]}\n  ) {\n    aggregate {\n      count\n    }\n  }\n}\n\nquery SearchUsersPaginated($searchTerm: String!, $limit: Int = 20, $offset: Int = 0) {\n  users(\n    where: {_and: [{isActive: {_eq: true}}, {_or: [{name: {_ilike: $searchTerm}}, {email: {_ilike: $searchTerm}}, {username: {_ilike: $searchTerm}}]}]}\n    orderBy: {name: ASC}\n    limit: $limit\n    offset: $offset\n  ) {\n    ...UserListItem\n  }\n  searchAggregate: usersAggregate(\n    where: {_and: [{isActive: {_eq: true}}, {_or: [{name: {_ilike: $searchTerm}}, {email: {_ilike: $searchTerm}}, {username: {_ilike: $searchTerm}}]}]}\n  ) {\n    aggregate {\n      count\n    }\n  }\n}\n\nquery GetUserByIdComplete($id: uuid!) {\n  userById(id: $id) {\n    id\n    name\n    email\n    role\n    createdAt\n    updatedAt\n    isStaff\n    managerId\n    clerkUserId\n    managerUser {\n      id\n      name\n      email\n      role\n    }\n  }\n}\n\nquery GetUserByClerkIdComplete($clerkId: String!) {\n  users(where: {clerkUserId: {_eq: $clerkId}}) {\n    id\n    name\n    email\n    role\n    createdAt\n    updatedAt\n    isStaff\n    managerId\n    clerkUserId\n    managerUser {\n      id\n      name\n      email\n      role\n    }\n  }\n}\n\nquery GetUserClerkId($id: uuid!) {\n  userById(id: $id) {\n    id\n    name\n    email\n    role\n    clerkUserId\n  }\n}\n\nquery GetUsersQuickList {\n  users(where: {isActive: {_eq: true}}, orderBy: {name: ASC}) {\n    ...UserMinimal\n  }\n}\n\nquery GetStaffQuickList {\n  users(\n    where: {isActive: {_eq: true}, role: {_in: [\"consultant\", \"manager\", \"org_admin\"]}}\n    orderBy: {name: ASC}\n  ) {\n    ...UserMinimal\n  }\n}\n\nquery GetManagersQuickList {\n  users(\n    where: {isActive: {_eq: true}, role: {_in: [\"manager\", \"org_admin\"]}}\n    orderBy: {name: ASC}\n  ) {\n    ...UserMinimal\n  }\n}\n\nquery GetUserCard($id: uuid!) {\n  userById(id: $id) {\n    ...UserSummary\n    email\n    managerUser {\n      ...UserMinimal\n    }\n  }\n}\n\nquery GetUserAssignmentData($id: uuid!) {\n  userById(id: $id) {\n    ...UserSummary\n    email\n    activePayrollCount: primaryConsultantPayrollsAggregate(\n      where: {supersededDate: {_isNull: true}}\n    ) {\n      aggregate {\n        count\n      }\n    }\n    backupPayrollCount: backupConsultantPayrollsAggregate(\n      where: {supersededDate: {_isNull: true}}\n    ) {\n      aggregate {\n        count\n      }\n    }\n  }\n}\n\nquery GetUserWorkload($id: uuid!) {\n  userById(id: $id) {\n    ...UserSummary\n    primaryPayrolls: primaryConsultantPayrolls(\n      where: {supersededDate: {_isNull: true}}\n      limit: 10\n    ) {\n      id\n      name\n      status\n      client {\n        name\n      }\n    }\n    backupPayrolls: backupConsultantPayrolls(\n      where: {supersededDate: {_isNull: true}}\n      limit: 10\n    ) {\n      id\n      name\n      status\n      client {\n        name\n      }\n    }\n  }\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "subscription StaffSubscription {\n  users(where: {isStaff: {_eq: true}}) {\n    id\n    name\n    role\n    updatedAt\n  }\n}\n\nsubscription UserUpdates($id: uuid!) {\n  users(where: {id: {_eq: $id}}) {\n    ...UserBasicInfo\n  }\n}\n\nsubscription StaffListUpdates {\n  users(\n    where: {role: {_in: [\"consultant\", \"manager\", \"org_admin\"]}}\n    orderBy: {name: ASC}\n  ) {\n    ...UserBasicInfo\n  }\n}\n\nsubscription UserRoleChanges($userId: uuid!) {\n  users(where: {id: {_eq: $userId}}) {\n    id\n    role\n    isActive\n    isStaff\n    updatedAt\n    managerId\n  }\n}\n\nsubscription UserStatusUpdates($userId: uuid!) {\n  users(where: {id: {_eq: $userId}}) {\n    id\n    name\n    role\n    isActive\n    isStaff\n    deactivatedAt\n    deactivatedBy\n    updatedAt\n  }\n}\n\nsubscription ActiveUsersCount {\n  usersAggregate(where: {isActive: {_eq: true}}) {\n    aggregate {\n      count\n    }\n  }\n}\n\nsubscription UserSessionStatus($clerkUserId: String!) {\n  users(where: {clerkUserId: {_eq: $clerkUserId}}) {\n    id\n    role\n    isActive\n    updatedAt\n  }\n}\n\nsubscription TeamMemberUpdates($managerId: uuid!) {\n  users(where: {managerId: {_eq: $managerId}}) {\n    id\n    name\n    role\n    isActive\n    updatedAt\n  }\n}\n\nsubscription UserPermissionUpdates($userId: uuid!) {\n  users(where: {id: {_eq: $userId}}) {\n    id\n    role\n    isActive\n    assignedRoles {\n      roleId\n      assignedRole {\n        name\n        assignedPermissions {\n          permissionId\n          grantedPermission {\n            action\n            description\n            relatedResource {\n              name\n            }\n          }\n        }\n      }\n    }\n  }\n}"): (typeof documents)["subscription StaffSubscription {\n  users(where: {isStaff: {_eq: true}}) {\n    id\n    name\n    role\n    updatedAt\n  }\n}\n\nsubscription UserUpdates($id: uuid!) {\n  users(where: {id: {_eq: $id}}) {\n    ...UserBasicInfo\n  }\n}\n\nsubscription StaffListUpdates {\n  users(\n    where: {role: {_in: [\"consultant\", \"manager\", \"org_admin\"]}}\n    orderBy: {name: ASC}\n  ) {\n    ...UserBasicInfo\n  }\n}\n\nsubscription UserRoleChanges($userId: uuid!) {\n  users(where: {id: {_eq: $userId}}) {\n    id\n    role\n    isActive\n    isStaff\n    updatedAt\n    managerId\n  }\n}\n\nsubscription UserStatusUpdates($userId: uuid!) {\n  users(where: {id: {_eq: $userId}}) {\n    id\n    name\n    role\n    isActive\n    isStaff\n    deactivatedAt\n    deactivatedBy\n    updatedAt\n  }\n}\n\nsubscription ActiveUsersCount {\n  usersAggregate(where: {isActive: {_eq: true}}) {\n    aggregate {\n      count\n    }\n  }\n}\n\nsubscription UserSessionStatus($clerkUserId: String!) {\n  users(where: {clerkUserId: {_eq: $clerkUserId}}) {\n    id\n    role\n    isActive\n    updatedAt\n  }\n}\n\nsubscription TeamMemberUpdates($managerId: uuid!) {\n  users(where: {managerId: {_eq: $managerId}}) {\n    id\n    name\n    role\n    isActive\n    updatedAt\n  }\n}\n\nsubscription UserPermissionUpdates($userId: uuid!) {\n  users(where: {id: {_eq: $userId}}) {\n    id\n    role\n    isActive\n    assignedRoles {\n      roleId\n      assignedRole {\n        name\n        assignedPermissions {\n          permissionId\n          grantedPermission {\n            action\n            description\n            relatedResource {\n              name\n            }\n          }\n        }\n      }\n    }\n  }\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "fragment UserCore on users {\n  id\n  name\n  email\n  username\n  role\n  isActive\n  isStaff\n  clerkUserId\n  createdAt\n  updatedAt\n}\n\nfragment UserBasic on users {\n  id\n  name\n  email\n  role\n  isActive\n}\n\nfragment UserWithManager on users {\n  ...UserCore\n  managerId\n  managerUser {\n    ...UserBasic\n  }\n}\n\nfragment RoleCore on roles {\n  id\n  name\n  description\n  displayName\n  priority\n  isSystemRole\n  createdAt\n}\n\nfragment PermissionCore on permissions {\n  id\n  action\n  description\n  resourceId\n  createdAt\n  updatedAt\n}\n\nfragment PermissionWithResource on permissions {\n  ...PermissionCore\n  relatedResource {\n    id\n    name\n    description\n  }\n}\n\nfragment ClientCore on clients {\n  id\n  name\n  contactEmail\n  contactPerson\n  contactPhone\n  active\n  createdAt\n  updatedAt\n}\n\nfragment ClientBasic on clients {\n  id\n  name\n  active\n}\n\nfragment ResourceCore on resources {\n  id\n  name\n  displayName\n  description\n  createdAt\n  updatedAt\n}\n\nfragment UserRoleCore on userRoles {\n  id\n  userId\n  roleId\n  createdAt\n  updatedAt\n}\n\nfragment RolePermissionCore on rolePermissions {\n  id\n  roleId\n  permissionId\n  conditions\n  createdAt\n  updatedAt\n}\n\nfragment AuditFields on auditLogs {\n  id\n  eventTime\n  action\n  resourceType\n  resourceId\n  userId\n  ipAddress\n  userAgent\n  success\n  userEmail\n  userRole\n}"): (typeof documents)["fragment UserCore on users {\n  id\n  name\n  email\n  username\n  role\n  isActive\n  isStaff\n  clerkUserId\n  createdAt\n  updatedAt\n}\n\nfragment UserBasic on users {\n  id\n  name\n  email\n  role\n  isActive\n}\n\nfragment UserWithManager on users {\n  ...UserCore\n  managerId\n  managerUser {\n    ...UserBasic\n  }\n}\n\nfragment RoleCore on roles {\n  id\n  name\n  description\n  displayName\n  priority\n  isSystemRole\n  createdAt\n}\n\nfragment PermissionCore on permissions {\n  id\n  action\n  description\n  resourceId\n  createdAt\n  updatedAt\n}\n\nfragment PermissionWithResource on permissions {\n  ...PermissionCore\n  relatedResource {\n    id\n    name\n    description\n  }\n}\n\nfragment ClientCore on clients {\n  id\n  name\n  contactEmail\n  contactPerson\n  contactPhone\n  active\n  createdAt\n  updatedAt\n}\n\nfragment ClientBasic on clients {\n  id\n  name\n  active\n}\n\nfragment ResourceCore on resources {\n  id\n  name\n  displayName\n  description\n  createdAt\n  updatedAt\n}\n\nfragment UserRoleCore on userRoles {\n  id\n  userId\n  roleId\n  createdAt\n  updatedAt\n}\n\nfragment RolePermissionCore on rolePermissions {\n  id\n  roleId\n  permissionId\n  conditions\n  createdAt\n  updatedAt\n}\n\nfragment AuditFields on auditLogs {\n  id\n  eventTime\n  action\n  resourceType\n  resourceId\n  userId\n  ipAddress\n  userAgent\n  success\n  userEmail\n  userRole\n}"];

export function graphql(source: string) {
  return (documents as any)[source] ?? {};
}

export type DocumentType<TDocumentNode extends DocumentNode<any, any>> = TDocumentNode extends DocumentNode<  infer TType,  any>  ? TType  : never;