/* eslint-disable */
import * as types from './graphql';
import type { TypedDocumentNode as DocumentNode } from '@graphql-typed-document-node/core';

/**
 * Map of all GraphQL operations in the project.
 *
 * This map has several performance disadvantages:
 * 1. It is not tree-shakeable, so it will include all operations in the project.
 * 2. It is not minifiable, so the string of a GraphQL query will be multiple times inside the bundle.
 * 3. It does not support dead code elimination, so it will add unused operations.
 *
 * Therefore it is highly recommended to use the babel or swc plugin for production.
 * Learn more about it here: https://the-guild.dev/graphql/codegen/plugins/presets/preset-client#reducing-bundle-size
 */
type Documents = {
    "fragment UsersUserCore on users {\n  id\n  name\n  email\n  isActive\n  isStaff\n  role\n  clerkUserId\n  createdAt\n  updatedAt\n}\n\nfragment UserWithProfile on users {\n  ...UsersUserCore\n  username\n  image\n}\n\nfragment UserWithRoles on users {\n  ...UsersUserCore\n  userRoles {\n    id\n    role {\n      id\n      name\n      displayName\n      description\n      priority\n      isSystemRole\n      rolePermissions {\n        id\n        conditions\n        permission {\n          id\n          action\n          description\n          resource {\n            id\n            name\n            displayName\n            description\n          }\n        }\n      }\n    }\n  }\n}\n\nfragment UserWithTeam on users {\n  ...UsersUserCore\n  teamMembers {\n    id\n    name\n    email\n    isActive\n    role\n  }\n}\n\nfragment UserWithWorkSchedule on users {\n  ...UsersUserCore\n  workSchedules {\n    id\n    workDay\n    workHours\n    createdAt\n    updatedAt\n  }\n}\n\nfragment UserWithPayrolls on users {\n  ...UsersUserCore\n}\n\nfragment UserWithAllRelations on users {\n  ...UserWithProfile\n  userRoles {\n    id\n    role {\n      id\n      name\n      displayName\n      description\n      priority\n    }\n  }\n  teamMembers {\n    id\n    name\n    email\n    role\n  }\n  workSchedules {\n    id\n    workDay\n    workHours\n    createdAt\n    updatedAt\n  }\n}\n\nfragment UserBasicInfo on users {\n  id\n  name\n  email\n  role\n  username\n  image\n  isStaff\n  isActive\n  managerId\n  clerkUserId\n}\n\nfragment UserForStaff on users {\n  ...UserWithProfile\n}\n\nfragment UserForAuth on users {\n  id\n  name\n  email\n  role\n  isActive\n  clerkUserId\n}\n\nfragment UserForAudit on users {\n  id\n  name\n  email\n  role\n  isActive\n}\n\nfragment UserRoleInfo on users {\n  id\n  name\n  email\n  role\n  isActive\n  userRoles {\n    role {\n      name\n      description\n    }\n  }\n}\n\nfragment UserPermissionsInfo on users {\n  id\n  name\n  role\n  userRoles {\n    role {\n      name\n      rolePermissions {\n        permission {\n          resource {\n            name\n          }\n          action\n          description\n        }\n      }\n    }\n  }\n}": typeof types.UsersUserCoreFragmentDoc,
    "mutation CreateUser($object: users_insert_input!) {\n  insertUser(object: $object) {\n    id\n    name\n    email\n    role\n    username\n    image\n    isStaff\n    isActive\n    managerId\n    clerkUserId\n  }\n}\n\nmutation UpdateUser($id: uuid!, $set: users_set_input!) {\n  updateUser(pk_columns: {id: $id}, _set: $set) {\n    id\n    name\n    email\n    role\n    username\n    image\n    isStaff\n    isActive\n    managerId\n    clerkUserId\n  }\n}\n\nmutation DeleteUser($id: uuid!) {\n  updateUser(\n    pk_columns: {id: $id}\n    _set: {isActive: false, deactivatedAt: \"now()\"}\n  ) {\n    id\n    name\n    email\n    isActive\n    deactivatedAt\n  }\n}\n\nmutation UpdateStaff($id: uuid!, $set: users_set_input!) {\n  updateUser(pk_columns: {id: $id}, _set: $set) {\n    id\n    name\n    email\n    role\n    username\n    image\n    isStaff\n    isActive\n    managerId\n    clerkUserId\n  }\n}\n\nmutation DeleteStaff($id: uuid!) {\n  updateUser(\n    pk_columns: {id: $id}\n    _set: {isActive: false, deactivatedAt: \"now()\"}\n  ) {\n    id\n    name\n    email\n    isActive\n    deactivatedAt\n  }\n}\n\nmutation UpdateUserRoleFromClerk($clerkId: String!, $role: user_role!) {\n  updateUsers(\n    where: {clerkUserId: {_eq: $clerkId}}\n    _set: {role: $role, updatedAt: \"now()\"}\n  ) {\n    affected_rows\n    returning {\n      id\n      name\n      email\n      role\n      clerkUserId\n    }\n  }\n}\n\nmutation CreateUserInDatabase($clerkId: String!, $name: String!, $email: String!, $role: user_role = viewer, $isStaff: Boolean = false, $managerId: uuid, $image: String) {\n  insertUser(\n    object: {clerkUserId: $clerkId, name: $name, email: $email, role: $role, isStaff: $isStaff, managerId: $managerId, image: $image}\n    on_conflict: {constraint: users_clerk_user_id_key, update_columns: [name, email, image, updatedAt]}\n  ) {\n    id\n    name\n    email\n    role\n    clerkUserId\n    isStaff\n    managerId\n    image\n    createdAt\n    updatedAt\n  }\n}\n\nmutation CreateUserByEmail($name: String!, $email: String!, $role: user_role!, $isStaff: Boolean!, $managerId: uuid, $clerkUserId: String) {\n  insertUser(\n    object: {name: $name, email: $email, role: $role, isStaff: $isStaff, managerId: $managerId, clerkUserId: $clerkUserId}\n    on_conflict: {constraint: users_email_key, update_columns: [name, role, isStaff, managerId, updatedAt]}\n  ) {\n    id\n    name\n    email\n    role\n    isStaff\n    managerId\n    clerkUserId\n    createdAt\n    updatedAt\n  }\n}\n\nmutation CreateStaffDirect($object: users_insert_input!) {\n  insertUser(object: $object) {\n    id\n    name\n    email\n    role\n  }\n}\n\nmutation UpdateUserProfile($id: uuid!, $set: users_set_input!) {\n  updateUser(pk_columns: {id: $id}, _set: $set) {\n    id\n    name\n    email\n    username\n    image\n    role\n    isStaff\n    isActive\n    managerId\n    clerkUserId\n    createdAt\n    updatedAt\n  }\n}\n\nmutation DeactivateUser($id: uuid!, $deactivatedBy: String!) {\n  updateUser(\n    pk_columns: {id: $id}\n    _set: {isActive: false, isStaff: false, role: \"viewer\", deactivatedAt: \"now()\", deactivatedBy: $deactivatedBy, updatedAt: \"now()\"}\n  ) {\n    id\n    name\n    email\n    role\n    clerkUserId\n    isStaff\n    isActive\n    deactivatedAt\n    deactivatedBy\n    manager {\n      id\n      name\n      email\n    }\n  }\n}\n\nmutation HardDeleteUser($id: uuid!) {\n  deleteUser(id: $id) {\n    id\n    name\n    email\n    role\n    clerkUserId\n  }\n}\n\nmutation UpdateUserProfileSettings($id: uuid!, $name: String, $image: String) {\n  updateUser(\n    pk_columns: {id: $id}\n    _set: {name: $name, image: $image, updatedAt: \"now()\"}\n  ) {\n    id\n    name\n    image\n    updatedAt\n  }\n}": typeof types.CreateUserDocument,
    "query GetUsers {\n  users(where: {isActive: {_eq: true}}, order_by: {name: asc}) {\n    id\n    name\n    email\n    role\n    username\n    image\n    isStaff\n    isActive\n    managerId\n    clerkUserId\n  }\n}\n\nquery GetActiveUsers {\n  users(where: {isActive: {_eq: true}}, order_by: {name: asc}) {\n    ...UserBasicInfo\n  }\n}\n\nquery GetUserById($id: uuid!) {\n  user(id: $id) {\n    id\n    name\n    email\n    role\n    username\n    image\n    isStaff\n    isActive\n    managerId\n    clerkUserId\n    manager {\n      id\n      name\n      email\n      role\n    }\n  }\n}\n\nquery GetUserByClerkId($clerkUserId: String!) {\n  users(where: {clerkUserId: {_eq: $clerkUserId}}, limit: 1) {\n    id\n    name\n    email\n    role\n    username\n    image\n    isStaff\n    isActive\n    managerId\n    clerkUserId\n  }\n}\n\nquery GetUserByEmail($email: String!) {\n  users(where: {email: {_eq: $email}}) {\n    id\n    name\n    email\n    role\n    username\n    image\n    isStaff\n    isActive\n    managerId\n    clerkUserId\n    manager {\n      id\n      name\n      email\n      role\n    }\n  }\n}\n\nquery GetStaffList {\n  users(\n    where: {isActive: {_eq: true}, role: {_in: [\"consultant\", \"manager\", \"org_admin\"]}}\n    order_by: {name: asc}\n  ) {\n    id\n    name\n    email\n    role\n    username\n    image\n    isStaff\n    isActive\n    managerId\n    clerkUserId\n    manager {\n      id\n      name\n      email\n      role\n    }\n  }\n}\n\nquery GetStaffById($id: uuid!) {\n  user(id: $id) {\n    id\n    name\n    email\n    role\n    username\n    image\n    isStaff\n    isActive\n    clerkUserId\n    createdAt\n    updatedAt\n    leaves {\n      id\n      startDate\n      endDate\n      leaveType\n      status\n      reason\n    }\n  }\n}\n\nquery GetAllUsersList {\n  users(where: {isActive: {_eq: true}}, order_by: {name: asc}) {\n    id\n    name\n    email\n    role\n    username\n    image\n    isStaff\n    isActive\n    managerId\n    clerkUserId\n  }\n}\n\nquery GetUserProfile($id: uuid!) {\n  user(id: $id) {\n    ...UserWithProfile\n  }\n}\n\nquery GetUsersWithRoles {\n  users(where: {isActive: {_eq: true}}, order_by: {name: asc}) {\n    ...UserRoleInfo\n  }\n}\n\nquery GetUserPermissions($id: uuid!) {\n  user(id: $id) {\n    ...UserPermissionsInfo\n  }\n}\n\nquery SearchUsers($searchTerm: String!) {\n  users(\n    where: {_and: [{isActive: {_eq: true}}, {_or: [{name: {_ilike: $searchTerm}}, {email: {_ilike: $searchTerm}}, {username: {_ilike: $searchTerm}}]}]}\n    order_by: {name: asc}\n    limit: 50\n  ) {\n    ...UserWithProfile\n  }\n}\n\nquery GetUsersForAudit {\n  users(order_by: {createdAt: desc}) {\n    ...UserForAudit\n  }\n}\n\nquery GetUserStats {\n  usersAggregate {\n    aggregate {\n      count\n    }\n  }\n  activeUsers: usersAggregate(where: {isActive: {_eq: true}}) {\n    aggregate {\n      count\n    }\n  }\n  byRole: usersAggregate {\n    nodes {\n      role\n    }\n    aggregate {\n      count\n    }\n  }\n}\n\nquery GetUserSessionInfo($id: uuid!) {\n  user(id: $id) {\n    id\n    name\n    email\n    role\n    isActive\n  }\n}\n\nquery GetCurrentUser($currentUserId: uuid!) {\n  user(id: $currentUserId) {\n    id\n    name\n    role\n    isStaff\n    isActive\n    managerId\n    clerkUserId\n    createdAt\n    updatedAt\n  }\n}\n\nquery GetUserRole($userId: uuid!) {\n  user(id: $userId) {\n    id\n    role\n    isStaff\n    isActive\n  }\n}\n\nquery GetUserRoleFallback($userId: uuid!) {\n  user(id: $userId) {\n    id\n    role\n    isStaff\n    isActive\n    clerkUserId\n  }\n}\n\nquery GetUsersWithLimit($limit: Int = 10) {\n  users(limit: $limit) {\n    id\n    name\n    email\n    role\n    isStaff\n    clerkUserId\n  }\n}\n\nquery GetUserProfileSettings($id: uuid!) {\n  user(id: $id) {\n    id\n    name\n    email\n    role\n    isStaff\n    isActive\n    clerkUserId\n    manager {\n      id\n      name\n      email\n    }\n  }\n}\n\nquery GetUsersWithFiltering($limit: Int = 50, $offset: Int = 0, $where: users_bool_exp) {\n  users(\n    limit: $limit\n    offset: $offset\n    where: $where\n    order_by: {createdAt: desc}\n  ) {\n    id\n    name\n    email\n    role\n    createdAt\n    updatedAt\n    isStaff\n    managerId\n    clerkUserId\n    manager {\n      id\n      name\n      email\n    }\n  }\n  usersAggregate(where: $where) {\n    aggregate {\n      count\n    }\n  }\n}\n\nquery GetManagers {\n  users(where: {role: {_in: [\"developer\", \"manager\"]}}, order_by: {name: asc}) {\n    id\n    name\n    email\n    role\n  }\n}\n\nquery GetUserRoleSecure($userId: uuid!) {\n  user(id: $userId) {\n    id\n    role\n    isStaff\n    isActive\n  }\n}\n\nquery GetUserRoleFallbackSecure($userId: uuid!) {\n  user(id: $userId) {\n    id\n    role\n    isStaff\n    isActive\n    clerkUserId\n  }\n}\n\nquery GetUserProfileComplete($id: uuid!) {\n  user(id: $id) {\n    id\n    name\n    email\n    username\n    image\n    role\n    isStaff\n    isActive\n    createdAt\n    updatedAt\n    clerkUserId\n    manager {\n      id\n      name\n      email\n      image\n    }\n    directReports {\n      id\n      name\n      email\n      role\n      image\n    }\n    primaryConsultantPayrolls {\n      id\n      name\n      status\n      client {\n        name\n      }\n      employeeCount\n    }\n    backupConsultantPayrolls {\n      id\n      name\n      status\n      client {\n        name\n      }\n    }\n    managedPayrolls {\n      id\n      name\n      status\n      client {\n        name\n      }\n    }\n    leaves(order_by: {startDate: desc}, limit: 5) {\n      id\n      startDate\n      endDate\n      leaveType\n      status\n      reason\n    }\n    notesWritten(order_by: {created_at: desc}, limit: 5) {\n      id\n      content\n      created_at\n      entity_type\n      entity_id\n      is_important\n    }\n    workSchedules(order_by: {createdAt: desc}, limit: 7) {\n      id\n      workDay\n      workHours\n      createdAt\n    }\n  }\n}\n\nquery GetUserForDeletion($id: uuid!) {\n  user(id: $id) {\n    id\n    name\n    email\n    role\n    clerkUserId\n    isStaff\n    isActive\n    createdAt\n    manager {\n      id\n      name\n      email\n    }\n  }\n  payrolls(\n    where: {_or: [{primaryConsultantUserId: {_eq: $id}}, {backupConsultantUserId: {_eq: $id}}, {managerUserId: {_eq: $id}}], status: {_eq: \"Active\"}}\n  ) {\n    id\n    name\n    status\n  }\n  subordinates: users(where: {managerId: {_eq: $id}, isActive: {_eq: true}}) {\n    id\n    name\n    email\n  }\n  pendingLeaves: leaves(\n    where: {_and: [{user: {managerId: {_eq: $id}}}, {status: {_eq: \"Pending\"}}]}\n  ) {\n    id\n    user {\n      name\n    }\n    leaveType\n    startDate\n    endDate\n  }\n}\n\nquery GetCurrentUserRole($clerkUserId: String!) {\n  users(where: {clerkUserId: {_eq: $clerkUserId}}) {\n    id\n    role\n    name\n    email\n  }\n}": typeof types.GetUsersDocument,
    "subscription StaffSubscription {\n  users(where: {isStaff: {_eq: true}}) {\n    id\n    name\n    role\n    updatedAt\n  }\n}\n\nsubscription UserUpdates($id: uuid!) {\n  user(id: $id) {\n    ...UserBasicInfo\n  }\n}\n\nsubscription StaffListUpdates {\n  users(\n    where: {role: {_in: [\"consultant\", \"manager\", \"org_admin\"]}}\n    order_by: {name: asc}\n  ) {\n    ...UserBasicInfo\n  }\n}": typeof types.StaffSubscriptionDocument,
};
const documents: Documents = {
    "fragment UsersUserCore on users {\n  id\n  name\n  email\n  isActive\n  isStaff\n  role\n  clerkUserId\n  createdAt\n  updatedAt\n}\n\nfragment UserWithProfile on users {\n  ...UsersUserCore\n  username\n  image\n}\n\nfragment UserWithRoles on users {\n  ...UsersUserCore\n  userRoles {\n    id\n    role {\n      id\n      name\n      displayName\n      description\n      priority\n      isSystemRole\n      rolePermissions {\n        id\n        conditions\n        permission {\n          id\n          action\n          description\n          resource {\n            id\n            name\n            displayName\n            description\n          }\n        }\n      }\n    }\n  }\n}\n\nfragment UserWithTeam on users {\n  ...UsersUserCore\n  teamMembers {\n    id\n    name\n    email\n    isActive\n    role\n  }\n}\n\nfragment UserWithWorkSchedule on users {\n  ...UsersUserCore\n  workSchedules {\n    id\n    workDay\n    workHours\n    createdAt\n    updatedAt\n  }\n}\n\nfragment UserWithPayrolls on users {\n  ...UsersUserCore\n}\n\nfragment UserWithAllRelations on users {\n  ...UserWithProfile\n  userRoles {\n    id\n    role {\n      id\n      name\n      displayName\n      description\n      priority\n    }\n  }\n  teamMembers {\n    id\n    name\n    email\n    role\n  }\n  workSchedules {\n    id\n    workDay\n    workHours\n    createdAt\n    updatedAt\n  }\n}\n\nfragment UserBasicInfo on users {\n  id\n  name\n  email\n  role\n  username\n  image\n  isStaff\n  isActive\n  managerId\n  clerkUserId\n}\n\nfragment UserForStaff on users {\n  ...UserWithProfile\n}\n\nfragment UserForAuth on users {\n  id\n  name\n  email\n  role\n  isActive\n  clerkUserId\n}\n\nfragment UserForAudit on users {\n  id\n  name\n  email\n  role\n  isActive\n}\n\nfragment UserRoleInfo on users {\n  id\n  name\n  email\n  role\n  isActive\n  userRoles {\n    role {\n      name\n      description\n    }\n  }\n}\n\nfragment UserPermissionsInfo on users {\n  id\n  name\n  role\n  userRoles {\n    role {\n      name\n      rolePermissions {\n        permission {\n          resource {\n            name\n          }\n          action\n          description\n        }\n      }\n    }\n  }\n}": types.UsersUserCoreFragmentDoc,
    "mutation CreateUser($object: users_insert_input!) {\n  insertUser(object: $object) {\n    id\n    name\n    email\n    role\n    username\n    image\n    isStaff\n    isActive\n    managerId\n    clerkUserId\n  }\n}\n\nmutation UpdateUser($id: uuid!, $set: users_set_input!) {\n  updateUser(pk_columns: {id: $id}, _set: $set) {\n    id\n    name\n    email\n    role\n    username\n    image\n    isStaff\n    isActive\n    managerId\n    clerkUserId\n  }\n}\n\nmutation DeleteUser($id: uuid!) {\n  updateUser(\n    pk_columns: {id: $id}\n    _set: {isActive: false, deactivatedAt: \"now()\"}\n  ) {\n    id\n    name\n    email\n    isActive\n    deactivatedAt\n  }\n}\n\nmutation UpdateStaff($id: uuid!, $set: users_set_input!) {\n  updateUser(pk_columns: {id: $id}, _set: $set) {\n    id\n    name\n    email\n    role\n    username\n    image\n    isStaff\n    isActive\n    managerId\n    clerkUserId\n  }\n}\n\nmutation DeleteStaff($id: uuid!) {\n  updateUser(\n    pk_columns: {id: $id}\n    _set: {isActive: false, deactivatedAt: \"now()\"}\n  ) {\n    id\n    name\n    email\n    isActive\n    deactivatedAt\n  }\n}\n\nmutation UpdateUserRoleFromClerk($clerkId: String!, $role: user_role!) {\n  updateUsers(\n    where: {clerkUserId: {_eq: $clerkId}}\n    _set: {role: $role, updatedAt: \"now()\"}\n  ) {\n    affected_rows\n    returning {\n      id\n      name\n      email\n      role\n      clerkUserId\n    }\n  }\n}\n\nmutation CreateUserInDatabase($clerkId: String!, $name: String!, $email: String!, $role: user_role = viewer, $isStaff: Boolean = false, $managerId: uuid, $image: String) {\n  insertUser(\n    object: {clerkUserId: $clerkId, name: $name, email: $email, role: $role, isStaff: $isStaff, managerId: $managerId, image: $image}\n    on_conflict: {constraint: users_clerk_user_id_key, update_columns: [name, email, image, updatedAt]}\n  ) {\n    id\n    name\n    email\n    role\n    clerkUserId\n    isStaff\n    managerId\n    image\n    createdAt\n    updatedAt\n  }\n}\n\nmutation CreateUserByEmail($name: String!, $email: String!, $role: user_role!, $isStaff: Boolean!, $managerId: uuid, $clerkUserId: String) {\n  insertUser(\n    object: {name: $name, email: $email, role: $role, isStaff: $isStaff, managerId: $managerId, clerkUserId: $clerkUserId}\n    on_conflict: {constraint: users_email_key, update_columns: [name, role, isStaff, managerId, updatedAt]}\n  ) {\n    id\n    name\n    email\n    role\n    isStaff\n    managerId\n    clerkUserId\n    createdAt\n    updatedAt\n  }\n}\n\nmutation CreateStaffDirect($object: users_insert_input!) {\n  insertUser(object: $object) {\n    id\n    name\n    email\n    role\n  }\n}\n\nmutation UpdateUserProfile($id: uuid!, $set: users_set_input!) {\n  updateUser(pk_columns: {id: $id}, _set: $set) {\n    id\n    name\n    email\n    username\n    image\n    role\n    isStaff\n    isActive\n    managerId\n    clerkUserId\n    createdAt\n    updatedAt\n  }\n}\n\nmutation DeactivateUser($id: uuid!, $deactivatedBy: String!) {\n  updateUser(\n    pk_columns: {id: $id}\n    _set: {isActive: false, isStaff: false, role: \"viewer\", deactivatedAt: \"now()\", deactivatedBy: $deactivatedBy, updatedAt: \"now()\"}\n  ) {\n    id\n    name\n    email\n    role\n    clerkUserId\n    isStaff\n    isActive\n    deactivatedAt\n    deactivatedBy\n    manager {\n      id\n      name\n      email\n    }\n  }\n}\n\nmutation HardDeleteUser($id: uuid!) {\n  deleteUser(id: $id) {\n    id\n    name\n    email\n    role\n    clerkUserId\n  }\n}\n\nmutation UpdateUserProfileSettings($id: uuid!, $name: String, $image: String) {\n  updateUser(\n    pk_columns: {id: $id}\n    _set: {name: $name, image: $image, updatedAt: \"now()\"}\n  ) {\n    id\n    name\n    image\n    updatedAt\n  }\n}": types.CreateUserDocument,
    "query GetUsers {\n  users(where: {isActive: {_eq: true}}, order_by: {name: asc}) {\n    id\n    name\n    email\n    role\n    username\n    image\n    isStaff\n    isActive\n    managerId\n    clerkUserId\n  }\n}\n\nquery GetActiveUsers {\n  users(where: {isActive: {_eq: true}}, order_by: {name: asc}) {\n    ...UserBasicInfo\n  }\n}\n\nquery GetUserById($id: uuid!) {\n  user(id: $id) {\n    id\n    name\n    email\n    role\n    username\n    image\n    isStaff\n    isActive\n    managerId\n    clerkUserId\n    manager {\n      id\n      name\n      email\n      role\n    }\n  }\n}\n\nquery GetUserByClerkId($clerkUserId: String!) {\n  users(where: {clerkUserId: {_eq: $clerkUserId}}, limit: 1) {\n    id\n    name\n    email\n    role\n    username\n    image\n    isStaff\n    isActive\n    managerId\n    clerkUserId\n  }\n}\n\nquery GetUserByEmail($email: String!) {\n  users(where: {email: {_eq: $email}}) {\n    id\n    name\n    email\n    role\n    username\n    image\n    isStaff\n    isActive\n    managerId\n    clerkUserId\n    manager {\n      id\n      name\n      email\n      role\n    }\n  }\n}\n\nquery GetStaffList {\n  users(\n    where: {isActive: {_eq: true}, role: {_in: [\"consultant\", \"manager\", \"org_admin\"]}}\n    order_by: {name: asc}\n  ) {\n    id\n    name\n    email\n    role\n    username\n    image\n    isStaff\n    isActive\n    managerId\n    clerkUserId\n    manager {\n      id\n      name\n      email\n      role\n    }\n  }\n}\n\nquery GetStaffById($id: uuid!) {\n  user(id: $id) {\n    id\n    name\n    email\n    role\n    username\n    image\n    isStaff\n    isActive\n    clerkUserId\n    createdAt\n    updatedAt\n    leaves {\n      id\n      startDate\n      endDate\n      leaveType\n      status\n      reason\n    }\n  }\n}\n\nquery GetAllUsersList {\n  users(where: {isActive: {_eq: true}}, order_by: {name: asc}) {\n    id\n    name\n    email\n    role\n    username\n    image\n    isStaff\n    isActive\n    managerId\n    clerkUserId\n  }\n}\n\nquery GetUserProfile($id: uuid!) {\n  user(id: $id) {\n    ...UserWithProfile\n  }\n}\n\nquery GetUsersWithRoles {\n  users(where: {isActive: {_eq: true}}, order_by: {name: asc}) {\n    ...UserRoleInfo\n  }\n}\n\nquery GetUserPermissions($id: uuid!) {\n  user(id: $id) {\n    ...UserPermissionsInfo\n  }\n}\n\nquery SearchUsers($searchTerm: String!) {\n  users(\n    where: {_and: [{isActive: {_eq: true}}, {_or: [{name: {_ilike: $searchTerm}}, {email: {_ilike: $searchTerm}}, {username: {_ilike: $searchTerm}}]}]}\n    order_by: {name: asc}\n    limit: 50\n  ) {\n    ...UserWithProfile\n  }\n}\n\nquery GetUsersForAudit {\n  users(order_by: {createdAt: desc}) {\n    ...UserForAudit\n  }\n}\n\nquery GetUserStats {\n  usersAggregate {\n    aggregate {\n      count\n    }\n  }\n  activeUsers: usersAggregate(where: {isActive: {_eq: true}}) {\n    aggregate {\n      count\n    }\n  }\n  byRole: usersAggregate {\n    nodes {\n      role\n    }\n    aggregate {\n      count\n    }\n  }\n}\n\nquery GetUserSessionInfo($id: uuid!) {\n  user(id: $id) {\n    id\n    name\n    email\n    role\n    isActive\n  }\n}\n\nquery GetCurrentUser($currentUserId: uuid!) {\n  user(id: $currentUserId) {\n    id\n    name\n    role\n    isStaff\n    isActive\n    managerId\n    clerkUserId\n    createdAt\n    updatedAt\n  }\n}\n\nquery GetUserRole($userId: uuid!) {\n  user(id: $userId) {\n    id\n    role\n    isStaff\n    isActive\n  }\n}\n\nquery GetUserRoleFallback($userId: uuid!) {\n  user(id: $userId) {\n    id\n    role\n    isStaff\n    isActive\n    clerkUserId\n  }\n}\n\nquery GetUsersWithLimit($limit: Int = 10) {\n  users(limit: $limit) {\n    id\n    name\n    email\n    role\n    isStaff\n    clerkUserId\n  }\n}\n\nquery GetUserProfileSettings($id: uuid!) {\n  user(id: $id) {\n    id\n    name\n    email\n    role\n    isStaff\n    isActive\n    clerkUserId\n    manager {\n      id\n      name\n      email\n    }\n  }\n}\n\nquery GetUsersWithFiltering($limit: Int = 50, $offset: Int = 0, $where: users_bool_exp) {\n  users(\n    limit: $limit\n    offset: $offset\n    where: $where\n    order_by: {createdAt: desc}\n  ) {\n    id\n    name\n    email\n    role\n    createdAt\n    updatedAt\n    isStaff\n    managerId\n    clerkUserId\n    manager {\n      id\n      name\n      email\n    }\n  }\n  usersAggregate(where: $where) {\n    aggregate {\n      count\n    }\n  }\n}\n\nquery GetManagers {\n  users(where: {role: {_in: [\"developer\", \"manager\"]}}, order_by: {name: asc}) {\n    id\n    name\n    email\n    role\n  }\n}\n\nquery GetUserRoleSecure($userId: uuid!) {\n  user(id: $userId) {\n    id\n    role\n    isStaff\n    isActive\n  }\n}\n\nquery GetUserRoleFallbackSecure($userId: uuid!) {\n  user(id: $userId) {\n    id\n    role\n    isStaff\n    isActive\n    clerkUserId\n  }\n}\n\nquery GetUserProfileComplete($id: uuid!) {\n  user(id: $id) {\n    id\n    name\n    email\n    username\n    image\n    role\n    isStaff\n    isActive\n    createdAt\n    updatedAt\n    clerkUserId\n    manager {\n      id\n      name\n      email\n      image\n    }\n    directReports {\n      id\n      name\n      email\n      role\n      image\n    }\n    primaryConsultantPayrolls {\n      id\n      name\n      status\n      client {\n        name\n      }\n      employeeCount\n    }\n    backupConsultantPayrolls {\n      id\n      name\n      status\n      client {\n        name\n      }\n    }\n    managedPayrolls {\n      id\n      name\n      status\n      client {\n        name\n      }\n    }\n    leaves(order_by: {startDate: desc}, limit: 5) {\n      id\n      startDate\n      endDate\n      leaveType\n      status\n      reason\n    }\n    notesWritten(order_by: {created_at: desc}, limit: 5) {\n      id\n      content\n      created_at\n      entity_type\n      entity_id\n      is_important\n    }\n    workSchedules(order_by: {createdAt: desc}, limit: 7) {\n      id\n      workDay\n      workHours\n      createdAt\n    }\n  }\n}\n\nquery GetUserForDeletion($id: uuid!) {\n  user(id: $id) {\n    id\n    name\n    email\n    role\n    clerkUserId\n    isStaff\n    isActive\n    createdAt\n    manager {\n      id\n      name\n      email\n    }\n  }\n  payrolls(\n    where: {_or: [{primaryConsultantUserId: {_eq: $id}}, {backupConsultantUserId: {_eq: $id}}, {managerUserId: {_eq: $id}}], status: {_eq: \"Active\"}}\n  ) {\n    id\n    name\n    status\n  }\n  subordinates: users(where: {managerId: {_eq: $id}, isActive: {_eq: true}}) {\n    id\n    name\n    email\n  }\n  pendingLeaves: leaves(\n    where: {_and: [{user: {managerId: {_eq: $id}}}, {status: {_eq: \"Pending\"}}]}\n  ) {\n    id\n    user {\n      name\n    }\n    leaveType\n    startDate\n    endDate\n  }\n}\n\nquery GetCurrentUserRole($clerkUserId: String!) {\n  users(where: {clerkUserId: {_eq: $clerkUserId}}) {\n    id\n    role\n    name\n    email\n  }\n}": types.GetUsersDocument,
    "subscription StaffSubscription {\n  users(where: {isStaff: {_eq: true}}) {\n    id\n    name\n    role\n    updatedAt\n  }\n}\n\nsubscription UserUpdates($id: uuid!) {\n  user(id: $id) {\n    ...UserBasicInfo\n  }\n}\n\nsubscription StaffListUpdates {\n  users(\n    where: {role: {_in: [\"consultant\", \"manager\", \"org_admin\"]}}\n    order_by: {name: asc}\n  ) {\n    ...UserBasicInfo\n  }\n}": types.StaffSubscriptionDocument,
};

/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 *
 *
 * @example
 * ```ts
 * const query = graphql(`query GetUser($id: ID!) { user(id: $id) { name } }`);
 * ```
 *
 * The query argument is unknown!
 * Please regenerate the types.
 */
export function graphql(source: string): unknown;

/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "fragment UsersUserCore on users {\n  id\n  name\n  email\n  isActive\n  isStaff\n  role\n  clerkUserId\n  createdAt\n  updatedAt\n}\n\nfragment UserWithProfile on users {\n  ...UsersUserCore\n  username\n  image\n}\n\nfragment UserWithRoles on users {\n  ...UsersUserCore\n  userRoles {\n    id\n    role {\n      id\n      name\n      displayName\n      description\n      priority\n      isSystemRole\n      rolePermissions {\n        id\n        conditions\n        permission {\n          id\n          action\n          description\n          resource {\n            id\n            name\n            displayName\n            description\n          }\n        }\n      }\n    }\n  }\n}\n\nfragment UserWithTeam on users {\n  ...UsersUserCore\n  teamMembers {\n    id\n    name\n    email\n    isActive\n    role\n  }\n}\n\nfragment UserWithWorkSchedule on users {\n  ...UsersUserCore\n  workSchedules {\n    id\n    workDay\n    workHours\n    createdAt\n    updatedAt\n  }\n}\n\nfragment UserWithPayrolls on users {\n  ...UsersUserCore\n}\n\nfragment UserWithAllRelations on users {\n  ...UserWithProfile\n  userRoles {\n    id\n    role {\n      id\n      name\n      displayName\n      description\n      priority\n    }\n  }\n  teamMembers {\n    id\n    name\n    email\n    role\n  }\n  workSchedules {\n    id\n    workDay\n    workHours\n    createdAt\n    updatedAt\n  }\n}\n\nfragment UserBasicInfo on users {\n  id\n  name\n  email\n  role\n  username\n  image\n  isStaff\n  isActive\n  managerId\n  clerkUserId\n}\n\nfragment UserForStaff on users {\n  ...UserWithProfile\n}\n\nfragment UserForAuth on users {\n  id\n  name\n  email\n  role\n  isActive\n  clerkUserId\n}\n\nfragment UserForAudit on users {\n  id\n  name\n  email\n  role\n  isActive\n}\n\nfragment UserRoleInfo on users {\n  id\n  name\n  email\n  role\n  isActive\n  userRoles {\n    role {\n      name\n      description\n    }\n  }\n}\n\nfragment UserPermissionsInfo on users {\n  id\n  name\n  role\n  userRoles {\n    role {\n      name\n      rolePermissions {\n        permission {\n          resource {\n            name\n          }\n          action\n          description\n        }\n      }\n    }\n  }\n}"): (typeof documents)["fragment UsersUserCore on users {\n  id\n  name\n  email\n  isActive\n  isStaff\n  role\n  clerkUserId\n  createdAt\n  updatedAt\n}\n\nfragment UserWithProfile on users {\n  ...UsersUserCore\n  username\n  image\n}\n\nfragment UserWithRoles on users {\n  ...UsersUserCore\n  userRoles {\n    id\n    role {\n      id\n      name\n      displayName\n      description\n      priority\n      isSystemRole\n      rolePermissions {\n        id\n        conditions\n        permission {\n          id\n          action\n          description\n          resource {\n            id\n            name\n            displayName\n            description\n          }\n        }\n      }\n    }\n  }\n}\n\nfragment UserWithTeam on users {\n  ...UsersUserCore\n  teamMembers {\n    id\n    name\n    email\n    isActive\n    role\n  }\n}\n\nfragment UserWithWorkSchedule on users {\n  ...UsersUserCore\n  workSchedules {\n    id\n    workDay\n    workHours\n    createdAt\n    updatedAt\n  }\n}\n\nfragment UserWithPayrolls on users {\n  ...UsersUserCore\n}\n\nfragment UserWithAllRelations on users {\n  ...UserWithProfile\n  userRoles {\n    id\n    role {\n      id\n      name\n      displayName\n      description\n      priority\n    }\n  }\n  teamMembers {\n    id\n    name\n    email\n    role\n  }\n  workSchedules {\n    id\n    workDay\n    workHours\n    createdAt\n    updatedAt\n  }\n}\n\nfragment UserBasicInfo on users {\n  id\n  name\n  email\n  role\n  username\n  image\n  isStaff\n  isActive\n  managerId\n  clerkUserId\n}\n\nfragment UserForStaff on users {\n  ...UserWithProfile\n}\n\nfragment UserForAuth on users {\n  id\n  name\n  email\n  role\n  isActive\n  clerkUserId\n}\n\nfragment UserForAudit on users {\n  id\n  name\n  email\n  role\n  isActive\n}\n\nfragment UserRoleInfo on users {\n  id\n  name\n  email\n  role\n  isActive\n  userRoles {\n    role {\n      name\n      description\n    }\n  }\n}\n\nfragment UserPermissionsInfo on users {\n  id\n  name\n  role\n  userRoles {\n    role {\n      name\n      rolePermissions {\n        permission {\n          resource {\n            name\n          }\n          action\n          description\n        }\n      }\n    }\n  }\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "mutation CreateUser($object: users_insert_input!) {\n  insertUser(object: $object) {\n    id\n    name\n    email\n    role\n    username\n    image\n    isStaff\n    isActive\n    managerId\n    clerkUserId\n  }\n}\n\nmutation UpdateUser($id: uuid!, $set: users_set_input!) {\n  updateUser(pk_columns: {id: $id}, _set: $set) {\n    id\n    name\n    email\n    role\n    username\n    image\n    isStaff\n    isActive\n    managerId\n    clerkUserId\n  }\n}\n\nmutation DeleteUser($id: uuid!) {\n  updateUser(\n    pk_columns: {id: $id}\n    _set: {isActive: false, deactivatedAt: \"now()\"}\n  ) {\n    id\n    name\n    email\n    isActive\n    deactivatedAt\n  }\n}\n\nmutation UpdateStaff($id: uuid!, $set: users_set_input!) {\n  updateUser(pk_columns: {id: $id}, _set: $set) {\n    id\n    name\n    email\n    role\n    username\n    image\n    isStaff\n    isActive\n    managerId\n    clerkUserId\n  }\n}\n\nmutation DeleteStaff($id: uuid!) {\n  updateUser(\n    pk_columns: {id: $id}\n    _set: {isActive: false, deactivatedAt: \"now()\"}\n  ) {\n    id\n    name\n    email\n    isActive\n    deactivatedAt\n  }\n}\n\nmutation UpdateUserRoleFromClerk($clerkId: String!, $role: user_role!) {\n  updateUsers(\n    where: {clerkUserId: {_eq: $clerkId}}\n    _set: {role: $role, updatedAt: \"now()\"}\n  ) {\n    affected_rows\n    returning {\n      id\n      name\n      email\n      role\n      clerkUserId\n    }\n  }\n}\n\nmutation CreateUserInDatabase($clerkId: String!, $name: String!, $email: String!, $role: user_role = viewer, $isStaff: Boolean = false, $managerId: uuid, $image: String) {\n  insertUser(\n    object: {clerkUserId: $clerkId, name: $name, email: $email, role: $role, isStaff: $isStaff, managerId: $managerId, image: $image}\n    on_conflict: {constraint: users_clerk_user_id_key, update_columns: [name, email, image, updatedAt]}\n  ) {\n    id\n    name\n    email\n    role\n    clerkUserId\n    isStaff\n    managerId\n    image\n    createdAt\n    updatedAt\n  }\n}\n\nmutation CreateUserByEmail($name: String!, $email: String!, $role: user_role!, $isStaff: Boolean!, $managerId: uuid, $clerkUserId: String) {\n  insertUser(\n    object: {name: $name, email: $email, role: $role, isStaff: $isStaff, managerId: $managerId, clerkUserId: $clerkUserId}\n    on_conflict: {constraint: users_email_key, update_columns: [name, role, isStaff, managerId, updatedAt]}\n  ) {\n    id\n    name\n    email\n    role\n    isStaff\n    managerId\n    clerkUserId\n    createdAt\n    updatedAt\n  }\n}\n\nmutation CreateStaffDirect($object: users_insert_input!) {\n  insertUser(object: $object) {\n    id\n    name\n    email\n    role\n  }\n}\n\nmutation UpdateUserProfile($id: uuid!, $set: users_set_input!) {\n  updateUser(pk_columns: {id: $id}, _set: $set) {\n    id\n    name\n    email\n    username\n    image\n    role\n    isStaff\n    isActive\n    managerId\n    clerkUserId\n    createdAt\n    updatedAt\n  }\n}\n\nmutation DeactivateUser($id: uuid!, $deactivatedBy: String!) {\n  updateUser(\n    pk_columns: {id: $id}\n    _set: {isActive: false, isStaff: false, role: \"viewer\", deactivatedAt: \"now()\", deactivatedBy: $deactivatedBy, updatedAt: \"now()\"}\n  ) {\n    id\n    name\n    email\n    role\n    clerkUserId\n    isStaff\n    isActive\n    deactivatedAt\n    deactivatedBy\n    manager {\n      id\n      name\n      email\n    }\n  }\n}\n\nmutation HardDeleteUser($id: uuid!) {\n  deleteUser(id: $id) {\n    id\n    name\n    email\n    role\n    clerkUserId\n  }\n}\n\nmutation UpdateUserProfileSettings($id: uuid!, $name: String, $image: String) {\n  updateUser(\n    pk_columns: {id: $id}\n    _set: {name: $name, image: $image, updatedAt: \"now()\"}\n  ) {\n    id\n    name\n    image\n    updatedAt\n  }\n}"): (typeof documents)["mutation CreateUser($object: users_insert_input!) {\n  insertUser(object: $object) {\n    id\n    name\n    email\n    role\n    username\n    image\n    isStaff\n    isActive\n    managerId\n    clerkUserId\n  }\n}\n\nmutation UpdateUser($id: uuid!, $set: users_set_input!) {\n  updateUser(pk_columns: {id: $id}, _set: $set) {\n    id\n    name\n    email\n    role\n    username\n    image\n    isStaff\n    isActive\n    managerId\n    clerkUserId\n  }\n}\n\nmutation DeleteUser($id: uuid!) {\n  updateUser(\n    pk_columns: {id: $id}\n    _set: {isActive: false, deactivatedAt: \"now()\"}\n  ) {\n    id\n    name\n    email\n    isActive\n    deactivatedAt\n  }\n}\n\nmutation UpdateStaff($id: uuid!, $set: users_set_input!) {\n  updateUser(pk_columns: {id: $id}, _set: $set) {\n    id\n    name\n    email\n    role\n    username\n    image\n    isStaff\n    isActive\n    managerId\n    clerkUserId\n  }\n}\n\nmutation DeleteStaff($id: uuid!) {\n  updateUser(\n    pk_columns: {id: $id}\n    _set: {isActive: false, deactivatedAt: \"now()\"}\n  ) {\n    id\n    name\n    email\n    isActive\n    deactivatedAt\n  }\n}\n\nmutation UpdateUserRoleFromClerk($clerkId: String!, $role: user_role!) {\n  updateUsers(\n    where: {clerkUserId: {_eq: $clerkId}}\n    _set: {role: $role, updatedAt: \"now()\"}\n  ) {\n    affected_rows\n    returning {\n      id\n      name\n      email\n      role\n      clerkUserId\n    }\n  }\n}\n\nmutation CreateUserInDatabase($clerkId: String!, $name: String!, $email: String!, $role: user_role = viewer, $isStaff: Boolean = false, $managerId: uuid, $image: String) {\n  insertUser(\n    object: {clerkUserId: $clerkId, name: $name, email: $email, role: $role, isStaff: $isStaff, managerId: $managerId, image: $image}\n    on_conflict: {constraint: users_clerk_user_id_key, update_columns: [name, email, image, updatedAt]}\n  ) {\n    id\n    name\n    email\n    role\n    clerkUserId\n    isStaff\n    managerId\n    image\n    createdAt\n    updatedAt\n  }\n}\n\nmutation CreateUserByEmail($name: String!, $email: String!, $role: user_role!, $isStaff: Boolean!, $managerId: uuid, $clerkUserId: String) {\n  insertUser(\n    object: {name: $name, email: $email, role: $role, isStaff: $isStaff, managerId: $managerId, clerkUserId: $clerkUserId}\n    on_conflict: {constraint: users_email_key, update_columns: [name, role, isStaff, managerId, updatedAt]}\n  ) {\n    id\n    name\n    email\n    role\n    isStaff\n    managerId\n    clerkUserId\n    createdAt\n    updatedAt\n  }\n}\n\nmutation CreateStaffDirect($object: users_insert_input!) {\n  insertUser(object: $object) {\n    id\n    name\n    email\n    role\n  }\n}\n\nmutation UpdateUserProfile($id: uuid!, $set: users_set_input!) {\n  updateUser(pk_columns: {id: $id}, _set: $set) {\n    id\n    name\n    email\n    username\n    image\n    role\n    isStaff\n    isActive\n    managerId\n    clerkUserId\n    createdAt\n    updatedAt\n  }\n}\n\nmutation DeactivateUser($id: uuid!, $deactivatedBy: String!) {\n  updateUser(\n    pk_columns: {id: $id}\n    _set: {isActive: false, isStaff: false, role: \"viewer\", deactivatedAt: \"now()\", deactivatedBy: $deactivatedBy, updatedAt: \"now()\"}\n  ) {\n    id\n    name\n    email\n    role\n    clerkUserId\n    isStaff\n    isActive\n    deactivatedAt\n    deactivatedBy\n    manager {\n      id\n      name\n      email\n    }\n  }\n}\n\nmutation HardDeleteUser($id: uuid!) {\n  deleteUser(id: $id) {\n    id\n    name\n    email\n    role\n    clerkUserId\n  }\n}\n\nmutation UpdateUserProfileSettings($id: uuid!, $name: String, $image: String) {\n  updateUser(\n    pk_columns: {id: $id}\n    _set: {name: $name, image: $image, updatedAt: \"now()\"}\n  ) {\n    id\n    name\n    image\n    updatedAt\n  }\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "query GetUsers {\n  users(where: {isActive: {_eq: true}}, order_by: {name: asc}) {\n    id\n    name\n    email\n    role\n    username\n    image\n    isStaff\n    isActive\n    managerId\n    clerkUserId\n  }\n}\n\nquery GetActiveUsers {\n  users(where: {isActive: {_eq: true}}, order_by: {name: asc}) {\n    ...UserBasicInfo\n  }\n}\n\nquery GetUserById($id: uuid!) {\n  user(id: $id) {\n    id\n    name\n    email\n    role\n    username\n    image\n    isStaff\n    isActive\n    managerId\n    clerkUserId\n    manager {\n      id\n      name\n      email\n      role\n    }\n  }\n}\n\nquery GetUserByClerkId($clerkUserId: String!) {\n  users(where: {clerkUserId: {_eq: $clerkUserId}}, limit: 1) {\n    id\n    name\n    email\n    role\n    username\n    image\n    isStaff\n    isActive\n    managerId\n    clerkUserId\n  }\n}\n\nquery GetUserByEmail($email: String!) {\n  users(where: {email: {_eq: $email}}) {\n    id\n    name\n    email\n    role\n    username\n    image\n    isStaff\n    isActive\n    managerId\n    clerkUserId\n    manager {\n      id\n      name\n      email\n      role\n    }\n  }\n}\n\nquery GetStaffList {\n  users(\n    where: {isActive: {_eq: true}, role: {_in: [\"consultant\", \"manager\", \"org_admin\"]}}\n    order_by: {name: asc}\n  ) {\n    id\n    name\n    email\n    role\n    username\n    image\n    isStaff\n    isActive\n    managerId\n    clerkUserId\n    manager {\n      id\n      name\n      email\n      role\n    }\n  }\n}\n\nquery GetStaffById($id: uuid!) {\n  user(id: $id) {\n    id\n    name\n    email\n    role\n    username\n    image\n    isStaff\n    isActive\n    clerkUserId\n    createdAt\n    updatedAt\n    leaves {\n      id\n      startDate\n      endDate\n      leaveType\n      status\n      reason\n    }\n  }\n}\n\nquery GetAllUsersList {\n  users(where: {isActive: {_eq: true}}, order_by: {name: asc}) {\n    id\n    name\n    email\n    role\n    username\n    image\n    isStaff\n    isActive\n    managerId\n    clerkUserId\n  }\n}\n\nquery GetUserProfile($id: uuid!) {\n  user(id: $id) {\n    ...UserWithProfile\n  }\n}\n\nquery GetUsersWithRoles {\n  users(where: {isActive: {_eq: true}}, order_by: {name: asc}) {\n    ...UserRoleInfo\n  }\n}\n\nquery GetUserPermissions($id: uuid!) {\n  user(id: $id) {\n    ...UserPermissionsInfo\n  }\n}\n\nquery SearchUsers($searchTerm: String!) {\n  users(\n    where: {_and: [{isActive: {_eq: true}}, {_or: [{name: {_ilike: $searchTerm}}, {email: {_ilike: $searchTerm}}, {username: {_ilike: $searchTerm}}]}]}\n    order_by: {name: asc}\n    limit: 50\n  ) {\n    ...UserWithProfile\n  }\n}\n\nquery GetUsersForAudit {\n  users(order_by: {createdAt: desc}) {\n    ...UserForAudit\n  }\n}\n\nquery GetUserStats {\n  usersAggregate {\n    aggregate {\n      count\n    }\n  }\n  activeUsers: usersAggregate(where: {isActive: {_eq: true}}) {\n    aggregate {\n      count\n    }\n  }\n  byRole: usersAggregate {\n    nodes {\n      role\n    }\n    aggregate {\n      count\n    }\n  }\n}\n\nquery GetUserSessionInfo($id: uuid!) {\n  user(id: $id) {\n    id\n    name\n    email\n    role\n    isActive\n  }\n}\n\nquery GetCurrentUser($currentUserId: uuid!) {\n  user(id: $currentUserId) {\n    id\n    name\n    role\n    isStaff\n    isActive\n    managerId\n    clerkUserId\n    createdAt\n    updatedAt\n  }\n}\n\nquery GetUserRole($userId: uuid!) {\n  user(id: $userId) {\n    id\n    role\n    isStaff\n    isActive\n  }\n}\n\nquery GetUserRoleFallback($userId: uuid!) {\n  user(id: $userId) {\n    id\n    role\n    isStaff\n    isActive\n    clerkUserId\n  }\n}\n\nquery GetUsersWithLimit($limit: Int = 10) {\n  users(limit: $limit) {\n    id\n    name\n    email\n    role\n    isStaff\n    clerkUserId\n  }\n}\n\nquery GetUserProfileSettings($id: uuid!) {\n  user(id: $id) {\n    id\n    name\n    email\n    role\n    isStaff\n    isActive\n    clerkUserId\n    manager {\n      id\n      name\n      email\n    }\n  }\n}\n\nquery GetUsersWithFiltering($limit: Int = 50, $offset: Int = 0, $where: users_bool_exp) {\n  users(\n    limit: $limit\n    offset: $offset\n    where: $where\n    order_by: {createdAt: desc}\n  ) {\n    id\n    name\n    email\n    role\n    createdAt\n    updatedAt\n    isStaff\n    managerId\n    clerkUserId\n    manager {\n      id\n      name\n      email\n    }\n  }\n  usersAggregate(where: $where) {\n    aggregate {\n      count\n    }\n  }\n}\n\nquery GetManagers {\n  users(where: {role: {_in: [\"developer\", \"manager\"]}}, order_by: {name: asc}) {\n    id\n    name\n    email\n    role\n  }\n}\n\nquery GetUserRoleSecure($userId: uuid!) {\n  user(id: $userId) {\n    id\n    role\n    isStaff\n    isActive\n  }\n}\n\nquery GetUserRoleFallbackSecure($userId: uuid!) {\n  user(id: $userId) {\n    id\n    role\n    isStaff\n    isActive\n    clerkUserId\n  }\n}\n\nquery GetUserProfileComplete($id: uuid!) {\n  user(id: $id) {\n    id\n    name\n    email\n    username\n    image\n    role\n    isStaff\n    isActive\n    createdAt\n    updatedAt\n    clerkUserId\n    manager {\n      id\n      name\n      email\n      image\n    }\n    directReports {\n      id\n      name\n      email\n      role\n      image\n    }\n    primaryConsultantPayrolls {\n      id\n      name\n      status\n      client {\n        name\n      }\n      employeeCount\n    }\n    backupConsultantPayrolls {\n      id\n      name\n      status\n      client {\n        name\n      }\n    }\n    managedPayrolls {\n      id\n      name\n      status\n      client {\n        name\n      }\n    }\n    leaves(order_by: {startDate: desc}, limit: 5) {\n      id\n      startDate\n      endDate\n      leaveType\n      status\n      reason\n    }\n    notesWritten(order_by: {created_at: desc}, limit: 5) {\n      id\n      content\n      created_at\n      entity_type\n      entity_id\n      is_important\n    }\n    workSchedules(order_by: {createdAt: desc}, limit: 7) {\n      id\n      workDay\n      workHours\n      createdAt\n    }\n  }\n}\n\nquery GetUserForDeletion($id: uuid!) {\n  user(id: $id) {\n    id\n    name\n    email\n    role\n    clerkUserId\n    isStaff\n    isActive\n    createdAt\n    manager {\n      id\n      name\n      email\n    }\n  }\n  payrolls(\n    where: {_or: [{primaryConsultantUserId: {_eq: $id}}, {backupConsultantUserId: {_eq: $id}}, {managerUserId: {_eq: $id}}], status: {_eq: \"Active\"}}\n  ) {\n    id\n    name\n    status\n  }\n  subordinates: users(where: {managerId: {_eq: $id}, isActive: {_eq: true}}) {\n    id\n    name\n    email\n  }\n  pendingLeaves: leaves(\n    where: {_and: [{user: {managerId: {_eq: $id}}}, {status: {_eq: \"Pending\"}}]}\n  ) {\n    id\n    user {\n      name\n    }\n    leaveType\n    startDate\n    endDate\n  }\n}\n\nquery GetCurrentUserRole($clerkUserId: String!) {\n  users(where: {clerkUserId: {_eq: $clerkUserId}}) {\n    id\n    role\n    name\n    email\n  }\n}"): (typeof documents)["query GetUsers {\n  users(where: {isActive: {_eq: true}}, order_by: {name: asc}) {\n    id\n    name\n    email\n    role\n    username\n    image\n    isStaff\n    isActive\n    managerId\n    clerkUserId\n  }\n}\n\nquery GetActiveUsers {\n  users(where: {isActive: {_eq: true}}, order_by: {name: asc}) {\n    ...UserBasicInfo\n  }\n}\n\nquery GetUserById($id: uuid!) {\n  user(id: $id) {\n    id\n    name\n    email\n    role\n    username\n    image\n    isStaff\n    isActive\n    managerId\n    clerkUserId\n    manager {\n      id\n      name\n      email\n      role\n    }\n  }\n}\n\nquery GetUserByClerkId($clerkUserId: String!) {\n  users(where: {clerkUserId: {_eq: $clerkUserId}}, limit: 1) {\n    id\n    name\n    email\n    role\n    username\n    image\n    isStaff\n    isActive\n    managerId\n    clerkUserId\n  }\n}\n\nquery GetUserByEmail($email: String!) {\n  users(where: {email: {_eq: $email}}) {\n    id\n    name\n    email\n    role\n    username\n    image\n    isStaff\n    isActive\n    managerId\n    clerkUserId\n    manager {\n      id\n      name\n      email\n      role\n    }\n  }\n}\n\nquery GetStaffList {\n  users(\n    where: {isActive: {_eq: true}, role: {_in: [\"consultant\", \"manager\", \"org_admin\"]}}\n    order_by: {name: asc}\n  ) {\n    id\n    name\n    email\n    role\n    username\n    image\n    isStaff\n    isActive\n    managerId\n    clerkUserId\n    manager {\n      id\n      name\n      email\n      role\n    }\n  }\n}\n\nquery GetStaffById($id: uuid!) {\n  user(id: $id) {\n    id\n    name\n    email\n    role\n    username\n    image\n    isStaff\n    isActive\n    clerkUserId\n    createdAt\n    updatedAt\n    leaves {\n      id\n      startDate\n      endDate\n      leaveType\n      status\n      reason\n    }\n  }\n}\n\nquery GetAllUsersList {\n  users(where: {isActive: {_eq: true}}, order_by: {name: asc}) {\n    id\n    name\n    email\n    role\n    username\n    image\n    isStaff\n    isActive\n    managerId\n    clerkUserId\n  }\n}\n\nquery GetUserProfile($id: uuid!) {\n  user(id: $id) {\n    ...UserWithProfile\n  }\n}\n\nquery GetUsersWithRoles {\n  users(where: {isActive: {_eq: true}}, order_by: {name: asc}) {\n    ...UserRoleInfo\n  }\n}\n\nquery GetUserPermissions($id: uuid!) {\n  user(id: $id) {\n    ...UserPermissionsInfo\n  }\n}\n\nquery SearchUsers($searchTerm: String!) {\n  users(\n    where: {_and: [{isActive: {_eq: true}}, {_or: [{name: {_ilike: $searchTerm}}, {email: {_ilike: $searchTerm}}, {username: {_ilike: $searchTerm}}]}]}\n    order_by: {name: asc}\n    limit: 50\n  ) {\n    ...UserWithProfile\n  }\n}\n\nquery GetUsersForAudit {\n  users(order_by: {createdAt: desc}) {\n    ...UserForAudit\n  }\n}\n\nquery GetUserStats {\n  usersAggregate {\n    aggregate {\n      count\n    }\n  }\n  activeUsers: usersAggregate(where: {isActive: {_eq: true}}) {\n    aggregate {\n      count\n    }\n  }\n  byRole: usersAggregate {\n    nodes {\n      role\n    }\n    aggregate {\n      count\n    }\n  }\n}\n\nquery GetUserSessionInfo($id: uuid!) {\n  user(id: $id) {\n    id\n    name\n    email\n    role\n    isActive\n  }\n}\n\nquery GetCurrentUser($currentUserId: uuid!) {\n  user(id: $currentUserId) {\n    id\n    name\n    role\n    isStaff\n    isActive\n    managerId\n    clerkUserId\n    createdAt\n    updatedAt\n  }\n}\n\nquery GetUserRole($userId: uuid!) {\n  user(id: $userId) {\n    id\n    role\n    isStaff\n    isActive\n  }\n}\n\nquery GetUserRoleFallback($userId: uuid!) {\n  user(id: $userId) {\n    id\n    role\n    isStaff\n    isActive\n    clerkUserId\n  }\n}\n\nquery GetUsersWithLimit($limit: Int = 10) {\n  users(limit: $limit) {\n    id\n    name\n    email\n    role\n    isStaff\n    clerkUserId\n  }\n}\n\nquery GetUserProfileSettings($id: uuid!) {\n  user(id: $id) {\n    id\n    name\n    email\n    role\n    isStaff\n    isActive\n    clerkUserId\n    manager {\n      id\n      name\n      email\n    }\n  }\n}\n\nquery GetUsersWithFiltering($limit: Int = 50, $offset: Int = 0, $where: users_bool_exp) {\n  users(\n    limit: $limit\n    offset: $offset\n    where: $where\n    order_by: {createdAt: desc}\n  ) {\n    id\n    name\n    email\n    role\n    createdAt\n    updatedAt\n    isStaff\n    managerId\n    clerkUserId\n    manager {\n      id\n      name\n      email\n    }\n  }\n  usersAggregate(where: $where) {\n    aggregate {\n      count\n    }\n  }\n}\n\nquery GetManagers {\n  users(where: {role: {_in: [\"developer\", \"manager\"]}}, order_by: {name: asc}) {\n    id\n    name\n    email\n    role\n  }\n}\n\nquery GetUserRoleSecure($userId: uuid!) {\n  user(id: $userId) {\n    id\n    role\n    isStaff\n    isActive\n  }\n}\n\nquery GetUserRoleFallbackSecure($userId: uuid!) {\n  user(id: $userId) {\n    id\n    role\n    isStaff\n    isActive\n    clerkUserId\n  }\n}\n\nquery GetUserProfileComplete($id: uuid!) {\n  user(id: $id) {\n    id\n    name\n    email\n    username\n    image\n    role\n    isStaff\n    isActive\n    createdAt\n    updatedAt\n    clerkUserId\n    manager {\n      id\n      name\n      email\n      image\n    }\n    directReports {\n      id\n      name\n      email\n      role\n      image\n    }\n    primaryConsultantPayrolls {\n      id\n      name\n      status\n      client {\n        name\n      }\n      employeeCount\n    }\n    backupConsultantPayrolls {\n      id\n      name\n      status\n      client {\n        name\n      }\n    }\n    managedPayrolls {\n      id\n      name\n      status\n      client {\n        name\n      }\n    }\n    leaves(order_by: {startDate: desc}, limit: 5) {\n      id\n      startDate\n      endDate\n      leaveType\n      status\n      reason\n    }\n    notesWritten(order_by: {created_at: desc}, limit: 5) {\n      id\n      content\n      created_at\n      entity_type\n      entity_id\n      is_important\n    }\n    workSchedules(order_by: {createdAt: desc}, limit: 7) {\n      id\n      workDay\n      workHours\n      createdAt\n    }\n  }\n}\n\nquery GetUserForDeletion($id: uuid!) {\n  user(id: $id) {\n    id\n    name\n    email\n    role\n    clerkUserId\n    isStaff\n    isActive\n    createdAt\n    manager {\n      id\n      name\n      email\n    }\n  }\n  payrolls(\n    where: {_or: [{primaryConsultantUserId: {_eq: $id}}, {backupConsultantUserId: {_eq: $id}}, {managerUserId: {_eq: $id}}], status: {_eq: \"Active\"}}\n  ) {\n    id\n    name\n    status\n  }\n  subordinates: users(where: {managerId: {_eq: $id}, isActive: {_eq: true}}) {\n    id\n    name\n    email\n  }\n  pendingLeaves: leaves(\n    where: {_and: [{user: {managerId: {_eq: $id}}}, {status: {_eq: \"Pending\"}}]}\n  ) {\n    id\n    user {\n      name\n    }\n    leaveType\n    startDate\n    endDate\n  }\n}\n\nquery GetCurrentUserRole($clerkUserId: String!) {\n  users(where: {clerkUserId: {_eq: $clerkUserId}}) {\n    id\n    role\n    name\n    email\n  }\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "subscription StaffSubscription {\n  users(where: {isStaff: {_eq: true}}) {\n    id\n    name\n    role\n    updatedAt\n  }\n}\n\nsubscription UserUpdates($id: uuid!) {\n  user(id: $id) {\n    ...UserBasicInfo\n  }\n}\n\nsubscription StaffListUpdates {\n  users(\n    where: {role: {_in: [\"consultant\", \"manager\", \"org_admin\"]}}\n    order_by: {name: asc}\n  ) {\n    ...UserBasicInfo\n  }\n}"): (typeof documents)["subscription StaffSubscription {\n  users(where: {isStaff: {_eq: true}}) {\n    id\n    name\n    role\n    updatedAt\n  }\n}\n\nsubscription UserUpdates($id: uuid!) {\n  user(id: $id) {\n    ...UserBasicInfo\n  }\n}\n\nsubscription StaffListUpdates {\n  users(\n    where: {role: {_in: [\"consultant\", \"manager\", \"org_admin\"]}}\n    order_by: {name: asc}\n  ) {\n    ...UserBasicInfo\n  }\n}"];

export function graphql(source: string) {
  return (documents as any)[source] ?? {};
}

export type DocumentType<TDocumentNode extends DocumentNode<any, any>> = TDocumentNode extends DocumentNode<  infer TType,  any>  ? TType  : never;