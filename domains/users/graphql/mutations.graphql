# Users Domain Mutations
# Security Classification: CRITICAL - Employee PII and authentication data

mutation CreateUser($object: usersInsertInput!) {
  insertUser(object: $object) {
    ...UsersUserCore
    username
    image
    managerId
  }
}

mutation UpdateUser($id: uuid!, $set: usersSetInput!) {
  updateUserById(pkColumns: { id: $id }, _set: $set) {
    ...UsersUserCore
    username
    image
    managerId
  }
}

mutation DeleteUser($id: uuid!) {
  updateUserById(
    pkColumns: { id: $id }
    _set: { isActive: false, deactivatedAt: "now()" }
  ) {
    ...UserCore
  }
}

mutation UpdateUserRole($id: uuid!, $role: user_role!) {
  updateUserById(
    pkColumns: { id: $id }
    _set: { role: $role }
  ) {
    ...UserCore
  }
}

mutation BulkUpdateUsers($where: usersBoolExp!, $set: usersSetInput!) {
  bulkUpdateUsers(where: $where, _set: $set) {
    returning {
      ...UserCore
    }
    affectedRows
  }
}

mutation CreateUserFromClerk(
  $clerkId: String!
  $name: String!
  $email: String!
  $role: user_role = "viewer"
  $isStaff: Boolean = false
  $managerId: uuid
  $image: String
) {
  insertUser(
    object: {
      clerkUserId: $clerkId
      name: $name
      email: $email
      role: $role
      isStaff: $isStaff
      managerId: $managerId
      image: $image
    }
    onConflict: {
      constraint: users_clerk_user_id_key
      updateColumns: [name, email, image, updatedAt]
    }
  ) {
    ...UserCore
  }
}

mutation CreateUserByEmail(
  $name: String!
  $email: String!
  $role: user_role!
  $managerId: uuid
) {
  insertUser(
    object: {
      name: $name
      email: $email
      role: $role
      managerId: $managerId
      isStaff: true
      isActive: true
    }
  ) {
    ...UserCore
  }
}

mutation UpdateUserProfile($id: uuid!, $name: String, $image: String) {
  updateUserById(
    pkColumns: { id: $id }
    _set: { name: $name, image: $image }
  ) {
    ...UserWithProfile
  }
}

mutation DeactivateUser($id: uuid!) {
  updateUserById(
    pkColumns: { id: $id }
    _set: { isActive: false, deactivatedAt: "now()" }
  ) {
    ...UserCore
  }
}

mutation ReactivateUser($id: uuid!) {
  updateUserById(
    pkColumns: { id: $id }
    _set: { isActive: true, deactivatedAt: null }
  ) {
    ...UserCore
  }
}

# Hard delete mutation (use with caution)
mutation HardDeleteUser($id: uuid!) {
  deleteUserById(id: $id) {
    id
    name
    email
  }
}

# Staff role management
mutation UpdateStaffRole($id: uuid!, $role: user_role!) {
  updateUserById(
    pkColumns: { id: $id }
    _set: { role: $role }
  ) {
    ...UserCore
  }
}

# Clerk integration mutations
mutation UpdateUserRoleFromClerk($clerkUserId: String!, $role: user_role!) {
  bulkUpdateUsers(
    where: { clerkUserId: { _eq: $clerkUserId } }
    _set: { role: $role }
  ) {
    returning {
      ...UserCore
    }
    affectedRows
  }
}