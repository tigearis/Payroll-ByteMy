# Users Domain Mutations
# Security Classification: CRITICAL - Employee PII and authentication data

mutation CreateUser($object: UsersInsertInput!) {
  insertUsers(objects: [$object]) {
    returning {
      ...UserBase
      username
      image
      managerId
    }
  }
}

mutation UpdateUser($id: uuid!, $set: UsersSetInput!) {
  updateUsersByPk(pkColumns: { id: $id }, _set: $set) {
    ...UserBase
    username
    image
    managerId
  }
}

mutation DeleteUser($id: uuid!) {
  updateUsersByPk(
    pkColumns: { id: $id }
    _set: { isActive: false, deactivatedAt: "now()" }
  ) {
    ...UserBase
  }
}

mutation UpdateUserRole($id: uuid!, $role: user_role!) {
  updateUsersByPk(pkColumns: { id: $id }, _set: { role: $role }) {
    ...UserBase
  }
}

mutation BulkUpdateUsers($where: UsersBoolExp!, $set: UsersSetInput!) {
  updateUsers(where: $where, _set: $set) {
    returning {
      ...UserBase
    }
    affectedRows
  }
}

mutation CreateUserFromClerk(
  $clerkId: String!
  $firstName: String!
  $lastName: String!
  $email: String!
  $role: user_role = "viewer"
  $isStaff: Boolean = false
  $managerId: uuid
  $image: String
) {
  insertUsers(
    objects: [{
      clerkUserId: $clerkId
      firstName: $firstName
      lastName: $lastName
      email: $email
      role: $role
      isStaff: $isStaff
      managerId: $managerId
      image: $image
    }]
    onConflict: {
      constraint: users_clerk_user_id_key
      updateColumns: [firstName, lastName, email, image, updatedAt]
    }
  ) {
    returning {
      ...UserBase
    }
  }
}

mutation CreateUserByEmail(
  $firstName: String!
  $lastName: String!
  $email: String!
  $role: user_role!
  $managerId: uuid
  $isStaff: Boolean = true
  $clerkUserId: String
) {
  insertUsers(
    objects: [{
      firstName: $firstName
      lastName: $lastName
      email: $email
      role: $role
      managerId: $managerId
      isStaff: $isStaff
      isActive: true
      clerkUserId: $clerkUserId
    }]
  ) {
    returning {
      ...UserBase
    }
  }
}

mutation UpdateUserProfile($id: uuid!, $input: UsersSetInput!) {
  updateUsersByPk(pkColumns: { id: $id }, _set: $input) {
    ...UserWithProfile
  }
}

mutation DeactivateUser($id: uuid!) {
  updateUsersByPk(
    pkColumns: { id: $id }
    _set: { isActive: false, deactivatedAt: "now()" }
  ) {
    ...UserBase
  }
}

mutation ReactivateUser($id: uuid!) {
  updateUsersByPk(
    pkColumns: { id: $id }
    _set: { isActive: true, deactivatedAt: null }
  ) {
    ...UserBase
  }
}

# Hard delete mutation (use with caution)
mutation HardDeleteUser($id: uuid!) {
  deleteUsersByPk(id: $id) {
    id
    firstName
    lastName
    computedName
    email
  }
}

# Staff role management
mutation UpdateStaffRole($id: uuid!, $role: user_role!) {
  updateUsersByPk(pkColumns: { id: $id }, _set: { role: $role }) {
    ...UserBase
    managerId
  }
}

# Clerk integration mutations
mutation UpdateUserRoleFromClerk($clerkUserId: String!, $role: user_role!) {
  updateUsers(
    where: { clerkUserId: { _eq: $clerkUserId } }
    _set: { role: $role }
  ) {
    returning {
      ...UserBase
    }
    affectedRows
  }
}

mutation RevokeInvitation(
  $invitationId: uuid!
  $revokeReason: String!
  $revokedBy: uuid!
) {
  updateUserInvitationsByPk(
    pkColumns: { id: $invitationId }
    _set: {
      invitationStatus: "revoked"
      status: "cancelled"
      revokedAt: "now()"
      revokedBy: $revokedBy
      revokeReason: $revokeReason
      updatedAt: "now()"
    }
  ) {
    id
    email
    invitationStatus
    revokedAt
    revokeReason
  }
}

mutation ResendInvitationEnhanced(
  $invitationId: uuid!
  $newExpiresAt: timestamptz!
  $newClerkTicket: String
  $newClerkInvitationId: String
) {
  updateUserInvitationsByPk(
    pkColumns: { id: $invitationId }
    _set: {
      expiresAt: $newExpiresAt
      clerkTicket: $newClerkTicket
      clerkInvitationId: $newClerkInvitationId
      invitationStatus: "pending"
      status: "pending"
      updatedAt: "now()"
    }
  ) {
    id
    email
    invitationStatus
    expiresAt
  }
}

# User Status Management Mutations for /api/users/manage
mutation DeactivateUserWithReason(
  $userId: uuid!
  $reason: String!
  $deactivatedBy: uuid!
  $deactivatedByString: String!
) {
  updateUsersByPk(
    pkColumns: { id: $userId }
    _set: {
      status: "inactive"
      isActive: false
      deactivatedAt: "now()"
      deactivatedBy: $deactivatedByString
      statusChangeReason: $reason
      statusChangedAt: "now()"
      statusChangedBy: $deactivatedBy
      updatedAt: "now()"
    }
  ) {
    id
    email
    firstName
    lastName
    computedName
    status
    isActive
    deactivatedAt
    statusChangeReason
    statusChangedAt
  }
}

mutation LockUserWithReason(
  $userId: uuid!
  $reason: String!
  $lockedBy: uuid!
) {
  updateUsersByPk(
    pkColumns: { id: $userId }
    _set: {
      status: "locked"
      isActive: false
      statusChangeReason: $reason
      statusChangedAt: "now()"
      statusChangedBy: $lockedBy
      updatedAt: "now()"
    }
  ) {
    id
    email
    firstName
    lastName
    computedName
    status
    isActive
    statusChangeReason
    statusChangedAt
  }
}

mutation UnlockUserWithReason(
  $userId: uuid!
  $reason: String!
  $unlockedBy: uuid!
) {
  updateUsersByPk(
    pkColumns: { id: $userId }
    _set: {
      status: "active"
      isActive: true
      statusChangeReason: $reason
      statusChangedAt: "now()"
      statusChangedBy: $unlockedBy
      updatedAt: "now()"
    }
  ) {
    id
    email
    firstName
    lastName
    computedName
    status
    isActive
    statusChangeReason
    statusChangedAt
  }
}

mutation ReactivateUserWithReason(
  $userId: uuid!
  $reason: String!
  $reactivatedBy: uuid!
) {
  updateUsersByPk(
    pkColumns: { id: $userId }
    _set: {
      status: "active"
      isActive: true
      deactivatedAt: null
      deactivatedBy: null
      statusChangeReason: $reason
      statusChangedAt: "now()"
      statusChangedBy: $reactivatedBy
      updatedAt: "now()"
    }
  ) {
    id
    email
    firstName
    lastName
    computedName
    status
    isActive
    statusChangeReason
    statusChangedAt
  }
}
