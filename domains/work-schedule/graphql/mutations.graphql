# Work Schedule Domain Mutations with Capacity Planning
# Security Classification: MEDIUM - Employee scheduling and time management

# Core CRUD operations with capacity fields
mutation CreateWorkSchedule($object: workScheduleInsertInput!) {
  insertWorkSchedule(object: $object) {
    ...WorkScheduleComplete
  }
}

mutation UpdateWorkSchedule($id: uuid!, $set: workScheduleSetInput!) {
  updateWorkScheduleById(pkColumns: { id: $id }, _set: $set) {
    ...WorkScheduleComplete
  }
}

mutation DeleteWorkSchedule($id: uuid!) {
  deleteWorkScheduleById(id: $id) {
    id
    userId
    workDay
    workHours
    adminTimeHours
    payrollCapacityHours
  }
}

# Schedule updates with capacity calculation
mutation UpdateWorkScheduleHours(
  $userId: uuid!
  $workDay: String!
  $workHours: numeric!
  $adminTimeHours: numeric
  $payrollCapacityHours: numeric
  $usesDefaultAdminTime: Boolean
) {
  bulkUpdateWorkSchedule(
    where: { userId: { _eq: $userId }, workDay: { _eq: $workDay } }
    _set: {
      workHours: $workHours
      adminTimeHours: $adminTimeHours
      payrollCapacityHours: $payrollCapacityHours
      usesDefaultAdminTime: $usesDefaultAdminTime
      updatedAt: "now()"
    }
  ) {
    returning {
      ...WorkScheduleComplete
    }
    affectedRows
  }
}

# Bulk operations with capacity
mutation BulkCreateWorkSchedule($schedules: [workScheduleInsertInput!]!) {
  bulkInsertWorkSchedule(objects: $schedules) {
    returning {
      ...WorkScheduleComplete
    }
    affectedRows
  }
}

mutation BulkUpdateWorkScheduleCapacity(
  $userIds: [uuid!]!
  $workDay: String!
  $workHours: numeric!
  $adminTimeHours: numeric!
  $payrollCapacityHours: numeric!
) {
  bulkUpdateWorkSchedule(
    where: { userId: { _in: $userIds }, workDay: { _eq: $workDay } }
    _set: {
      workHours: $workHours
      adminTimeHours: $adminTimeHours
      payrollCapacityHours: $payrollCapacityHours
      updatedAt: "now()"
    }
  ) {
    returning {
      ...WorkScheduleComplete
    }
    affectedRows
  }
}

# Admin time management mutations
mutation UpdateAdminTime(
  $userId: uuid!
  $workDay: String!
  $adminTimeHours: numeric!
  $usesDefaultAdminTime: Boolean!
) {
  bulkUpdateWorkSchedule(
    where: { userId: { _eq: $userId }, workDay: { _eq: $workDay } }
    _set: {
      adminTimeHours: $adminTimeHours
      usesDefaultAdminTime: $usesDefaultAdminTime
      updatedAt: "now()"
    }
  ) {
    returning {
      ...WorkScheduleCapacity
    }
    affectedRows
  }
}

# Upsert work schedule - creates if doesn't exist, updates if exists
mutation UpsertWorkSchedule(
  $userId: uuid!
  $workDay: String!
  $workHours: numeric!
  $adminTimeHours: numeric!
  $payrollCapacityHours: numeric!
  $usesDefaultAdminTime: Boolean!
) {
  insertWorkSchedule(
    object: {
      userId: $userId
      workDay: $workDay
      workHours: $workHours
      adminTimeHours: $adminTimeHours
      payrollCapacityHours: $payrollCapacityHours
      usesDefaultAdminTime: $usesDefaultAdminTime
    }
    onConflict: {
      constraint: unique_user_work_day
      updateColumns: [
        workHours
        adminTimeHours
        payrollCapacityHours
        usesDefaultAdminTime
      ]
    }
  ) {
    ...WorkScheduleComplete
  }
}

# User admin time percentage updates
mutation UpdateUserDefaultAdminTime(
  $userId: uuid!
  $defaultAdminTimePercentage: numeric!
) {
  updateUserById(
    pkColumns: { id: $userId }
    _set: {
      defaultAdminTimePercentage: $defaultAdminTimePercentage
      updatedAt: "now()"
    }
  ) {
    id
    firstName
    lastName
    computedName
    defaultAdminTimePercentage
    updatedAt
  }
}

# Payroll assignment mutations
mutation AssignPayrollToConsultant(
  $payrollId: uuid!
  $primaryConsultantUserId: uuid
  $backupConsultantUserId: uuid
  $managerUserId: uuid
) {
  updatePayrollById(
    pkColumns: { id: $payrollId }
    _set: {
      primaryConsultantUserId: $primaryConsultantUserId
      backupConsultantUserId: $backupConsultantUserId
      managerUserId: $managerUserId
      updatedAt: "now()"
    }
  ) {
    id
    name
    primaryConsultantUserId
    backupConsultantUserId
    managerUserId
    primaryConsultant {
      id
      firstName
      lastName
      computedName
    }
    backupConsultant {
      id
      firstName
      lastName
      computedName
    }
    manager {
      id
      firstName
      lastName
      computedName
    }
    updatedAt
  }
}

mutation BulkAssignPayrolls(
  $payrollIds: [uuid!]!
  $primaryConsultantUserId: uuid
  $backupConsultantUserId: uuid
  $managerUserId: uuid
) {
  bulkUpdatePayrolls(
    where: { id: { _in: $payrollIds } }
    _set: {
      primaryConsultantUserId: $primaryConsultantUserId
      backupConsultantUserId: $backupConsultantUserId
      managerUserId: $managerUserId
      updatedAt: "now()"
    }
  ) {
    returning {
      id
      name
      primaryConsultantUserId
      backupConsultantUserId
      managerUserId
      primaryConsultant {
        id
        firstName
        lastName
        computedName
      }
      backupConsultant {
        id
        firstName
        lastName
        computedName
      }
      manager {
        id
        firstName
        lastName
        computedName
      }
      updatedAt
    }
    affectedRows
  }
}

mutation UnassignPayrollConsultant(
  $payrollId: uuid!
  $removeRole: String! # "primary", "backup", or "manager"
) {
  updatePayrollById(
    pkColumns: { id: $payrollId }
    _set: {
      primaryConsultantUserId: null
      backupConsultantUserId: null
      managerUserId: null
      updatedAt: "now()"
    }
  ) {
    id
    name
    primaryConsultantUserId
    backupConsultantUserId
    managerUserId
    updatedAt
  }
}
