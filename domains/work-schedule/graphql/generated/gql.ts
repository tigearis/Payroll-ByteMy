/* eslint-disable */
import * as types from './graphql';
import type { TypedDocumentNode as DocumentNode } from '@graphql-typed-document-node/core';

/**
 * Map of all GraphQL operations in the project.
 *
 * This map has several performance disadvantages:
 * 1. It is not tree-shakeable, so it will include all operations in the project.
 * 2. It is not minifiable, so the string of a GraphQL query will be multiple times inside the bundle.
 * 3. It does not support dead code elimination, so it will add unused operations.
 *
 * Therefore it is highly recommended to use the babel or swc plugin for production.
 * Learn more about it here: https://the-guild.dev/graphql/codegen/plugins/presets/preset-client#reducing-bundle-size
 */
type Documents = {
    "fragment WorkScheduleCore on work_schedule {\n  id\n  workDay\n  workHours\n}\n\nfragment WorkScheduleWithUser on work_schedule {\n  ...WorkScheduleCore\n  user {\n    id\n    name\n    email\n    isStaff\n  }\n}": typeof types.WorkScheduleCoreFragmentDoc,
    "mutation CreateWorkSchedule($object: work_schedule_insert_input!) {\n  insertWorkSchedule(object: $object) {\n    ...WorkScheduleWithUser\n  }\n}\n\nmutation CreateWorkSchedules($objects: [work_schedule_insert_input!]!) {\n  insertWorkSchedules(objects: $objects) {\n    returning {\n      ...WorkScheduleWithUser\n    }\n    affected_rows\n  }\n}\n\nmutation UpdateWorkSchedule($id: uuid!, $set: work_schedule_set_input!) {\n  updateWorkSchedule(pk_columns: {id: $id}, _set: $set) {\n    ...WorkScheduleWithUser\n  }\n}\n\nmutation UpdateWorkSchedules($where: work_schedule_bool_exp!, $set: work_schedule_set_input!) {\n  updateWorkSchedules(where: $where, _set: $set) {\n    returning {\n      ...WorkScheduleWithUser\n    }\n    affected_rows\n  }\n}\n\nmutation DeleteWorkSchedule($id: uuid!) {\n  deleteWorkSchedule(id: $id) {\n    id\n  }\n}\n\nmutation DeleteWorkSchedules($where: work_schedule_bool_exp!) {\n  deleteWorkSchedules(where: $where) {\n    affected_rows\n  }\n}\n\nmutation UpsertUserWorkSchedule($userId: uuid!, $schedules: [work_schedule_insert_input!]!) {\n  deleteWorkSchedules(where: {userId: {_eq: $userId}}) {\n    affected_rows\n  }\n  insertWorkSchedules(objects: $schedules) {\n    returning {\n      ...WorkScheduleWithUser\n    }\n    affected_rows\n  }\n}": typeof types.CreateWorkScheduleDocument,
    "query GetWorkSchedules($where: work_schedule_bool_exp, $order_by: [work_schedule_order_by!]) {\n  workSchedules(where: $where, order_by: $order_by) {\n    ...WorkScheduleWithUser\n  }\n}\n\nquery GetWorkScheduleByUser($user_id: uuid!) {\n  workSchedules(where: {userId: {_eq: $user_id}}, order_by: {workDay: asc}) {\n    ...WorkScheduleCore\n  }\n}\n\nquery GetWorkScheduleById($id: uuid!) {\n  workSchedule(id: $id) {\n    ...WorkScheduleWithUser\n  }\n}\n\nquery GetTeamWorkSchedules($user_ids: [uuid!]!) {\n  workSchedules(\n    where: {userId: {_in: $user_ids}}\n    order_by: [{userId: asc}, {workDay: asc}]\n  ) {\n    ...WorkScheduleWithUser\n  }\n}\n\nquery GetWorkScheduleAnalytics {\n  total_hours_by_day: workSchedulesAggregate {\n    nodes {\n      workDay\n    }\n    aggregate {\n      sum {\n        workHours\n      }\n      avg {\n        workHours\n      }\n      count\n    }\n  }\n  users_by_workDay: workSchedules {\n    workDay\n    user {\n      id\n      name\n    }\n    workHours\n  }\n  average_hours_per_user: workSchedulesAggregate(order_by: {userId: asc}) {\n    aggregate {\n      sum {\n        workHours\n      }\n      avg {\n        workHours\n      }\n    }\n    nodes {\n      user {\n        id\n        name\n      }\n    }\n  }\n}": typeof types.GetWorkSchedulesDocument,
    "subscription SubscribeToWorkSchedule($user_id: uuid!) {\n  workSchedules(where: {userId: {_eq: $user_id}}, order_by: {workDay: asc}) {\n    ...WorkScheduleWithUser\n  }\n}\n\nsubscription SubscribeToAllWorkSchedules {\n  workSchedules(order_by: {updatedAt: desc}, limit: 20) {\n    ...WorkScheduleWithUser\n  }\n}\n\nsubscription SubscribeToTeamWorkSchedules($user_ids: [uuid!]!) {\n  workSchedules(where: {userId: {_in: $user_ids}}, order_by: {updatedAt: desc}) {\n    ...WorkScheduleWithUser\n  }\n}": typeof types.SubscribeToWorkScheduleDocument,
    "fragment UserCore on users {\n  id\n  name\n  email\n  username\n  role\n  isActive\n  isStaff\n  clerkUserId\n  createdAt\n  updatedAt\n}\n\nfragment UserBasic on users {\n  id\n  name\n  email\n  role\n  isActive\n}\n\nfragment UserWithManager on users {\n  ...UserCore\n  managerId\n  manager {\n    ...UserBasic\n  }\n}\n\nfragment RoleCore on roles {\n  id\n  name\n  description\n  displayName\n  priority\n  isSystemRole\n  createdAt\n}\n\nfragment PermissionCore on permissions {\n  id\n  action\n  description\n  resourceId\n  createdAt\n  updatedAt\n}\n\nfragment PermissionWithResource on permissions {\n  ...PermissionCore\n  resource {\n    id\n    name\n    description\n  }\n}\n\nfragment ClientCore on clients {\n  id\n  name\n  contactEmail\n  contactPerson\n  contactPhone\n  active\n  createdAt\n  updatedAt\n}\n\nfragment ClientBasic on clients {\n  id\n  name\n  active\n}\n\nfragment PayrollCore on payrolls {\n  id\n  name\n  status\n  clientId\n  primaryConsultantUserId\n  managerUserId\n  createdAt\n  updatedAt\n}\n\nfragment PayrollBasic on payrolls {\n  id\n  name\n  status\n  clientId\n}\n\nfragment ResourceCore on resources {\n  id\n  name\n  displayName\n  description\n  createdAt\n  updatedAt\n}\n\nfragment UserRoleCore on user_roles {\n  id\n  userId\n  roleId\n  createdAt\n  updatedAt\n}\n\nfragment RolePermissionCore on role_permissions {\n  id\n  roleId\n  permissionId\n  conditions\n  createdAt\n  updatedAt\n}\n\nfragment AuditFields on audit_audit_log {\n  id\n  eventTime\n  action\n  resourceType\n  resourceId\n  userId\n  ipAddress\n  userAgent\n  success\n  user_email\n  user_role\n}": typeof types.UserCoreFragmentDoc,
};
const documents: Documents = {
    "fragment WorkScheduleCore on work_schedule {\n  id\n  workDay\n  workHours\n}\n\nfragment WorkScheduleWithUser on work_schedule {\n  ...WorkScheduleCore\n  user {\n    id\n    name\n    email\n    isStaff\n  }\n}": types.WorkScheduleCoreFragmentDoc,
    "mutation CreateWorkSchedule($object: work_schedule_insert_input!) {\n  insertWorkSchedule(object: $object) {\n    ...WorkScheduleWithUser\n  }\n}\n\nmutation CreateWorkSchedules($objects: [work_schedule_insert_input!]!) {\n  insertWorkSchedules(objects: $objects) {\n    returning {\n      ...WorkScheduleWithUser\n    }\n    affected_rows\n  }\n}\n\nmutation UpdateWorkSchedule($id: uuid!, $set: work_schedule_set_input!) {\n  updateWorkSchedule(pk_columns: {id: $id}, _set: $set) {\n    ...WorkScheduleWithUser\n  }\n}\n\nmutation UpdateWorkSchedules($where: work_schedule_bool_exp!, $set: work_schedule_set_input!) {\n  updateWorkSchedules(where: $where, _set: $set) {\n    returning {\n      ...WorkScheduleWithUser\n    }\n    affected_rows\n  }\n}\n\nmutation DeleteWorkSchedule($id: uuid!) {\n  deleteWorkSchedule(id: $id) {\n    id\n  }\n}\n\nmutation DeleteWorkSchedules($where: work_schedule_bool_exp!) {\n  deleteWorkSchedules(where: $where) {\n    affected_rows\n  }\n}\n\nmutation UpsertUserWorkSchedule($userId: uuid!, $schedules: [work_schedule_insert_input!]!) {\n  deleteWorkSchedules(where: {userId: {_eq: $userId}}) {\n    affected_rows\n  }\n  insertWorkSchedules(objects: $schedules) {\n    returning {\n      ...WorkScheduleWithUser\n    }\n    affected_rows\n  }\n}": types.CreateWorkScheduleDocument,
    "query GetWorkSchedules($where: work_schedule_bool_exp, $order_by: [work_schedule_order_by!]) {\n  workSchedules(where: $where, order_by: $order_by) {\n    ...WorkScheduleWithUser\n  }\n}\n\nquery GetWorkScheduleByUser($user_id: uuid!) {\n  workSchedules(where: {userId: {_eq: $user_id}}, order_by: {workDay: asc}) {\n    ...WorkScheduleCore\n  }\n}\n\nquery GetWorkScheduleById($id: uuid!) {\n  workSchedule(id: $id) {\n    ...WorkScheduleWithUser\n  }\n}\n\nquery GetTeamWorkSchedules($user_ids: [uuid!]!) {\n  workSchedules(\n    where: {userId: {_in: $user_ids}}\n    order_by: [{userId: asc}, {workDay: asc}]\n  ) {\n    ...WorkScheduleWithUser\n  }\n}\n\nquery GetWorkScheduleAnalytics {\n  total_hours_by_day: workSchedulesAggregate {\n    nodes {\n      workDay\n    }\n    aggregate {\n      sum {\n        workHours\n      }\n      avg {\n        workHours\n      }\n      count\n    }\n  }\n  users_by_workDay: workSchedules {\n    workDay\n    user {\n      id\n      name\n    }\n    workHours\n  }\n  average_hours_per_user: workSchedulesAggregate(order_by: {userId: asc}) {\n    aggregate {\n      sum {\n        workHours\n      }\n      avg {\n        workHours\n      }\n    }\n    nodes {\n      user {\n        id\n        name\n      }\n    }\n  }\n}": types.GetWorkSchedulesDocument,
    "subscription SubscribeToWorkSchedule($user_id: uuid!) {\n  workSchedules(where: {userId: {_eq: $user_id}}, order_by: {workDay: asc}) {\n    ...WorkScheduleWithUser\n  }\n}\n\nsubscription SubscribeToAllWorkSchedules {\n  workSchedules(order_by: {updatedAt: desc}, limit: 20) {\n    ...WorkScheduleWithUser\n  }\n}\n\nsubscription SubscribeToTeamWorkSchedules($user_ids: [uuid!]!) {\n  workSchedules(where: {userId: {_in: $user_ids}}, order_by: {updatedAt: desc}) {\n    ...WorkScheduleWithUser\n  }\n}": types.SubscribeToWorkScheduleDocument,
    "fragment UserCore on users {\n  id\n  name\n  email\n  username\n  role\n  isActive\n  isStaff\n  clerkUserId\n  createdAt\n  updatedAt\n}\n\nfragment UserBasic on users {\n  id\n  name\n  email\n  role\n  isActive\n}\n\nfragment UserWithManager on users {\n  ...UserCore\n  managerId\n  manager {\n    ...UserBasic\n  }\n}\n\nfragment RoleCore on roles {\n  id\n  name\n  description\n  displayName\n  priority\n  isSystemRole\n  createdAt\n}\n\nfragment PermissionCore on permissions {\n  id\n  action\n  description\n  resourceId\n  createdAt\n  updatedAt\n}\n\nfragment PermissionWithResource on permissions {\n  ...PermissionCore\n  resource {\n    id\n    name\n    description\n  }\n}\n\nfragment ClientCore on clients {\n  id\n  name\n  contactEmail\n  contactPerson\n  contactPhone\n  active\n  createdAt\n  updatedAt\n}\n\nfragment ClientBasic on clients {\n  id\n  name\n  active\n}\n\nfragment PayrollCore on payrolls {\n  id\n  name\n  status\n  clientId\n  primaryConsultantUserId\n  managerUserId\n  createdAt\n  updatedAt\n}\n\nfragment PayrollBasic on payrolls {\n  id\n  name\n  status\n  clientId\n}\n\nfragment ResourceCore on resources {\n  id\n  name\n  displayName\n  description\n  createdAt\n  updatedAt\n}\n\nfragment UserRoleCore on user_roles {\n  id\n  userId\n  roleId\n  createdAt\n  updatedAt\n}\n\nfragment RolePermissionCore on role_permissions {\n  id\n  roleId\n  permissionId\n  conditions\n  createdAt\n  updatedAt\n}\n\nfragment AuditFields on audit_audit_log {\n  id\n  eventTime\n  action\n  resourceType\n  resourceId\n  userId\n  ipAddress\n  userAgent\n  success\n  user_email\n  user_role\n}": types.UserCoreFragmentDoc,
};

/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 *
 *
 * @example
 * ```ts
 * const query = graphql(`query GetUser($id: ID!) { user(id: $id) { name } }`);
 * ```
 *
 * The query argument is unknown!
 * Please regenerate the types.
 */
export function graphql(source: string): unknown;

/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "fragment WorkScheduleCore on work_schedule {\n  id\n  workDay\n  workHours\n}\n\nfragment WorkScheduleWithUser on work_schedule {\n  ...WorkScheduleCore\n  user {\n    id\n    name\n    email\n    isStaff\n  }\n}"): (typeof documents)["fragment WorkScheduleCore on work_schedule {\n  id\n  workDay\n  workHours\n}\n\nfragment WorkScheduleWithUser on work_schedule {\n  ...WorkScheduleCore\n  user {\n    id\n    name\n    email\n    isStaff\n  }\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "mutation CreateWorkSchedule($object: work_schedule_insert_input!) {\n  insertWorkSchedule(object: $object) {\n    ...WorkScheduleWithUser\n  }\n}\n\nmutation CreateWorkSchedules($objects: [work_schedule_insert_input!]!) {\n  insertWorkSchedules(objects: $objects) {\n    returning {\n      ...WorkScheduleWithUser\n    }\n    affected_rows\n  }\n}\n\nmutation UpdateWorkSchedule($id: uuid!, $set: work_schedule_set_input!) {\n  updateWorkSchedule(pk_columns: {id: $id}, _set: $set) {\n    ...WorkScheduleWithUser\n  }\n}\n\nmutation UpdateWorkSchedules($where: work_schedule_bool_exp!, $set: work_schedule_set_input!) {\n  updateWorkSchedules(where: $where, _set: $set) {\n    returning {\n      ...WorkScheduleWithUser\n    }\n    affected_rows\n  }\n}\n\nmutation DeleteWorkSchedule($id: uuid!) {\n  deleteWorkSchedule(id: $id) {\n    id\n  }\n}\n\nmutation DeleteWorkSchedules($where: work_schedule_bool_exp!) {\n  deleteWorkSchedules(where: $where) {\n    affected_rows\n  }\n}\n\nmutation UpsertUserWorkSchedule($userId: uuid!, $schedules: [work_schedule_insert_input!]!) {\n  deleteWorkSchedules(where: {userId: {_eq: $userId}}) {\n    affected_rows\n  }\n  insertWorkSchedules(objects: $schedules) {\n    returning {\n      ...WorkScheduleWithUser\n    }\n    affected_rows\n  }\n}"): (typeof documents)["mutation CreateWorkSchedule($object: work_schedule_insert_input!) {\n  insertWorkSchedule(object: $object) {\n    ...WorkScheduleWithUser\n  }\n}\n\nmutation CreateWorkSchedules($objects: [work_schedule_insert_input!]!) {\n  insertWorkSchedules(objects: $objects) {\n    returning {\n      ...WorkScheduleWithUser\n    }\n    affected_rows\n  }\n}\n\nmutation UpdateWorkSchedule($id: uuid!, $set: work_schedule_set_input!) {\n  updateWorkSchedule(pk_columns: {id: $id}, _set: $set) {\n    ...WorkScheduleWithUser\n  }\n}\n\nmutation UpdateWorkSchedules($where: work_schedule_bool_exp!, $set: work_schedule_set_input!) {\n  updateWorkSchedules(where: $where, _set: $set) {\n    returning {\n      ...WorkScheduleWithUser\n    }\n    affected_rows\n  }\n}\n\nmutation DeleteWorkSchedule($id: uuid!) {\n  deleteWorkSchedule(id: $id) {\n    id\n  }\n}\n\nmutation DeleteWorkSchedules($where: work_schedule_bool_exp!) {\n  deleteWorkSchedules(where: $where) {\n    affected_rows\n  }\n}\n\nmutation UpsertUserWorkSchedule($userId: uuid!, $schedules: [work_schedule_insert_input!]!) {\n  deleteWorkSchedules(where: {userId: {_eq: $userId}}) {\n    affected_rows\n  }\n  insertWorkSchedules(objects: $schedules) {\n    returning {\n      ...WorkScheduleWithUser\n    }\n    affected_rows\n  }\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "query GetWorkSchedules($where: work_schedule_bool_exp, $order_by: [work_schedule_order_by!]) {\n  workSchedules(where: $where, order_by: $order_by) {\n    ...WorkScheduleWithUser\n  }\n}\n\nquery GetWorkScheduleByUser($user_id: uuid!) {\n  workSchedules(where: {userId: {_eq: $user_id}}, order_by: {workDay: asc}) {\n    ...WorkScheduleCore\n  }\n}\n\nquery GetWorkScheduleById($id: uuid!) {\n  workSchedule(id: $id) {\n    ...WorkScheduleWithUser\n  }\n}\n\nquery GetTeamWorkSchedules($user_ids: [uuid!]!) {\n  workSchedules(\n    where: {userId: {_in: $user_ids}}\n    order_by: [{userId: asc}, {workDay: asc}]\n  ) {\n    ...WorkScheduleWithUser\n  }\n}\n\nquery GetWorkScheduleAnalytics {\n  total_hours_by_day: workSchedulesAggregate {\n    nodes {\n      workDay\n    }\n    aggregate {\n      sum {\n        workHours\n      }\n      avg {\n        workHours\n      }\n      count\n    }\n  }\n  users_by_workDay: workSchedules {\n    workDay\n    user {\n      id\n      name\n    }\n    workHours\n  }\n  average_hours_per_user: workSchedulesAggregate(order_by: {userId: asc}) {\n    aggregate {\n      sum {\n        workHours\n      }\n      avg {\n        workHours\n      }\n    }\n    nodes {\n      user {\n        id\n        name\n      }\n    }\n  }\n}"): (typeof documents)["query GetWorkSchedules($where: work_schedule_bool_exp, $order_by: [work_schedule_order_by!]) {\n  workSchedules(where: $where, order_by: $order_by) {\n    ...WorkScheduleWithUser\n  }\n}\n\nquery GetWorkScheduleByUser($user_id: uuid!) {\n  workSchedules(where: {userId: {_eq: $user_id}}, order_by: {workDay: asc}) {\n    ...WorkScheduleCore\n  }\n}\n\nquery GetWorkScheduleById($id: uuid!) {\n  workSchedule(id: $id) {\n    ...WorkScheduleWithUser\n  }\n}\n\nquery GetTeamWorkSchedules($user_ids: [uuid!]!) {\n  workSchedules(\n    where: {userId: {_in: $user_ids}}\n    order_by: [{userId: asc}, {workDay: asc}]\n  ) {\n    ...WorkScheduleWithUser\n  }\n}\n\nquery GetWorkScheduleAnalytics {\n  total_hours_by_day: workSchedulesAggregate {\n    nodes {\n      workDay\n    }\n    aggregate {\n      sum {\n        workHours\n      }\n      avg {\n        workHours\n      }\n      count\n    }\n  }\n  users_by_workDay: workSchedules {\n    workDay\n    user {\n      id\n      name\n    }\n    workHours\n  }\n  average_hours_per_user: workSchedulesAggregate(order_by: {userId: asc}) {\n    aggregate {\n      sum {\n        workHours\n      }\n      avg {\n        workHours\n      }\n    }\n    nodes {\n      user {\n        id\n        name\n      }\n    }\n  }\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "subscription SubscribeToWorkSchedule($user_id: uuid!) {\n  workSchedules(where: {userId: {_eq: $user_id}}, order_by: {workDay: asc}) {\n    ...WorkScheduleWithUser\n  }\n}\n\nsubscription SubscribeToAllWorkSchedules {\n  workSchedules(order_by: {updatedAt: desc}, limit: 20) {\n    ...WorkScheduleWithUser\n  }\n}\n\nsubscription SubscribeToTeamWorkSchedules($user_ids: [uuid!]!) {\n  workSchedules(where: {userId: {_in: $user_ids}}, order_by: {updatedAt: desc}) {\n    ...WorkScheduleWithUser\n  }\n}"): (typeof documents)["subscription SubscribeToWorkSchedule($user_id: uuid!) {\n  workSchedules(where: {userId: {_eq: $user_id}}, order_by: {workDay: asc}) {\n    ...WorkScheduleWithUser\n  }\n}\n\nsubscription SubscribeToAllWorkSchedules {\n  workSchedules(order_by: {updatedAt: desc}, limit: 20) {\n    ...WorkScheduleWithUser\n  }\n}\n\nsubscription SubscribeToTeamWorkSchedules($user_ids: [uuid!]!) {\n  workSchedules(where: {userId: {_in: $user_ids}}, order_by: {updatedAt: desc}) {\n    ...WorkScheduleWithUser\n  }\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "fragment UserCore on users {\n  id\n  name\n  email\n  username\n  role\n  isActive\n  isStaff\n  clerkUserId\n  createdAt\n  updatedAt\n}\n\nfragment UserBasic on users {\n  id\n  name\n  email\n  role\n  isActive\n}\n\nfragment UserWithManager on users {\n  ...UserCore\n  managerId\n  manager {\n    ...UserBasic\n  }\n}\n\nfragment RoleCore on roles {\n  id\n  name\n  description\n  displayName\n  priority\n  isSystemRole\n  createdAt\n}\n\nfragment PermissionCore on permissions {\n  id\n  action\n  description\n  resourceId\n  createdAt\n  updatedAt\n}\n\nfragment PermissionWithResource on permissions {\n  ...PermissionCore\n  resource {\n    id\n    name\n    description\n  }\n}\n\nfragment ClientCore on clients {\n  id\n  name\n  contactEmail\n  contactPerson\n  contactPhone\n  active\n  createdAt\n  updatedAt\n}\n\nfragment ClientBasic on clients {\n  id\n  name\n  active\n}\n\nfragment PayrollCore on payrolls {\n  id\n  name\n  status\n  clientId\n  primaryConsultantUserId\n  managerUserId\n  createdAt\n  updatedAt\n}\n\nfragment PayrollBasic on payrolls {\n  id\n  name\n  status\n  clientId\n}\n\nfragment ResourceCore on resources {\n  id\n  name\n  displayName\n  description\n  createdAt\n  updatedAt\n}\n\nfragment UserRoleCore on user_roles {\n  id\n  userId\n  roleId\n  createdAt\n  updatedAt\n}\n\nfragment RolePermissionCore on role_permissions {\n  id\n  roleId\n  permissionId\n  conditions\n  createdAt\n  updatedAt\n}\n\nfragment AuditFields on audit_audit_log {\n  id\n  eventTime\n  action\n  resourceType\n  resourceId\n  userId\n  ipAddress\n  userAgent\n  success\n  user_email\n  user_role\n}"): (typeof documents)["fragment UserCore on users {\n  id\n  name\n  email\n  username\n  role\n  isActive\n  isStaff\n  clerkUserId\n  createdAt\n  updatedAt\n}\n\nfragment UserBasic on users {\n  id\n  name\n  email\n  role\n  isActive\n}\n\nfragment UserWithManager on users {\n  ...UserCore\n  managerId\n  manager {\n    ...UserBasic\n  }\n}\n\nfragment RoleCore on roles {\n  id\n  name\n  description\n  displayName\n  priority\n  isSystemRole\n  createdAt\n}\n\nfragment PermissionCore on permissions {\n  id\n  action\n  description\n  resourceId\n  createdAt\n  updatedAt\n}\n\nfragment PermissionWithResource on permissions {\n  ...PermissionCore\n  resource {\n    id\n    name\n    description\n  }\n}\n\nfragment ClientCore on clients {\n  id\n  name\n  contactEmail\n  contactPerson\n  contactPhone\n  active\n  createdAt\n  updatedAt\n}\n\nfragment ClientBasic on clients {\n  id\n  name\n  active\n}\n\nfragment PayrollCore on payrolls {\n  id\n  name\n  status\n  clientId\n  primaryConsultantUserId\n  managerUserId\n  createdAt\n  updatedAt\n}\n\nfragment PayrollBasic on payrolls {\n  id\n  name\n  status\n  clientId\n}\n\nfragment ResourceCore on resources {\n  id\n  name\n  displayName\n  description\n  createdAt\n  updatedAt\n}\n\nfragment UserRoleCore on user_roles {\n  id\n  userId\n  roleId\n  createdAt\n  updatedAt\n}\n\nfragment RolePermissionCore on role_permissions {\n  id\n  roleId\n  permissionId\n  conditions\n  createdAt\n  updatedAt\n}\n\nfragment AuditFields on audit_audit_log {\n  id\n  eventTime\n  action\n  resourceType\n  resourceId\n  userId\n  ipAddress\n  userAgent\n  success\n  user_email\n  user_role\n}"];

export function graphql(source: string) {
  return (documents as any)[source] ?? {};
}

export type DocumentType<TDocumentNode extends DocumentNode<any, any>> = TDocumentNode extends DocumentNode<  infer TType,  any>  ? TType  : never;