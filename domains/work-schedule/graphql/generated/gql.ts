/* eslint-disable */
import * as types from './graphql';
import { TypedDocumentNode as DocumentNode } from '@graphql-typed-document-node/core';

/**
 * Map of all GraphQL operations in the project.
 *
 * This map has several performance disadvantages:
 * 1. It is not tree-shakeable, so it will include all operations in the project.
 * 2. It is not minifiable, so the string of a GraphQL query will be multiple times inside the bundle.
 * 3. It does not support dead code elimination, so it will add unused operations.
 *
 * Therefore it is highly recommended to use the babel or swc plugin for production.
 * Learn more about it here: https://the-guild.dev/graphql/codegen/plugins/presets/preset-client#reducing-bundle-size
 */
type Documents = {
    "fragment WorkScheduleCore on workSchedule {\n  id\n  userId\n  workDay\n  workHours\n  adminTimeHours\n  payrollCapacityHours\n  usesDefaultAdminTime\n  createdAt\n  updatedAt\n}\n\nfragment WorkScheduleBasic on workSchedule {\n  ...WorkScheduleCore\n}\n\nfragment WorkScheduleMinimal on workSchedule {\n  id\n  userId\n  workDay\n  workHours\n  adminTimeHours\n  payrollCapacityHours\n}\n\nfragment WorkScheduleWithUser on workSchedule {\n  ...WorkScheduleBasic\n  user {\n    id\n    firstName\n    lastName\n    computedName\n    email\n    role\n    defaultAdminTimePercentage\n  }\n}\n\nfragment WorkScheduleComplete on workSchedule {\n  ...WorkScheduleBasic\n  user {\n    id\n    firstName\n    lastName\n    computedName\n    email\n    role\n    managerId\n    defaultAdminTimePercentage\n    isStaff\n  }\n}\n\nfragment TeamWorkSchedule on workSchedule {\n  ...WorkScheduleBasic\n  user {\n    id\n    firstName\n    lastName\n    computedName\n    email\n    role\n    managerId\n    defaultAdminTimePercentage\n    isStaff\n  }\n}\n\nfragment WorkScheduleCapacity on workSchedule {\n  id\n  userId\n  workDay\n  workHours\n  adminTimeHours\n  payrollCapacityHours\n  usesDefaultAdminTime\n  user {\n    id\n    firstName\n    lastName\n    computedName\n    defaultAdminTimePercentage\n  }\n}\n\nfragment WorkScheduleListItem on workSchedule {\n  ...WorkScheduleCapacity\n}\n\nfragment MyWorkSchedule on workSchedule {\n  ...WorkScheduleComplete\n}\n\nfragment WorkScheduleCalendarItem on workSchedule {\n  id\n  workDay\n  workHours\n  adminTimeHours\n  payrollCapacityHours\n  user {\n    id\n    firstName\n    lastName\n    computedName\n  }\n}\n\nfragment WorkScheduleMonthlyView on workSchedule {\n  ...WorkScheduleCalendarItem\n}\n\nfragment WorkScheduleConflictCheck on workSchedule {\n  id\n  userId\n  workDay\n  workHours\n  payrollCapacityHours\n}\n\nfragment WorkScheduleDashboardCard on workSchedule {\n  ...WorkScheduleCapacity\n  user {\n    id\n    firstName\n    lastName\n    computedName\n    email\n    role\n    defaultAdminTimePercentage\n    isStaff\n  }\n}\n\nfragment WorkScheduleWeeklyView on workSchedule {\n  ...WorkScheduleDashboardCard\n}\n\nfragment WorkScheduleChangeLog on workSchedule {\n  id\n  userId\n  workDay\n  workHours\n  adminTimeHours\n  payrollCapacityHours\n  usesDefaultAdminTime\n  createdAt\n  updatedAt\n}\n\nfragment WorkScheduleForAudit on workSchedule {\n  ...WorkScheduleChangeLog\n  user {\n    id\n    firstName\n    lastName\n    computedName\n    role\n  }\n}\n\nfragment WorkSchedulePattern on workSchedule {\n  workDay\n  workHours\n  adminTimeHours\n  payrollCapacityHours\n  usesDefaultAdminTime\n}": typeof types.WorkScheduleCoreFragmentDoc,
    "mutation CreateWorkSchedule($object: workScheduleInsertInput!) {\n  insertWorkSchedule(object: $object) {\n    ...WorkScheduleComplete\n  }\n}\n\nmutation UpdateWorkSchedule($id: uuid!, $set: workScheduleSetInput!) {\n  updateWorkScheduleById(pkColumns: {id: $id}, _set: $set) {\n    ...WorkScheduleComplete\n  }\n}\n\nmutation DeleteWorkSchedule($id: uuid!) {\n  deleteWorkScheduleById(id: $id) {\n    id\n    userId\n    workDay\n    workHours\n    adminTimeHours\n    payrollCapacityHours\n  }\n}\n\nmutation UpdateWorkScheduleHours($userId: uuid!, $workDay: String!, $workHours: numeric!, $adminTimeHours: numeric, $payrollCapacityHours: numeric, $usesDefaultAdminTime: Boolean) {\n  bulkUpdateWorkSchedule(\n    where: {userId: {_eq: $userId}, workDay: {_eq: $workDay}}\n    _set: {workHours: $workHours, adminTimeHours: $adminTimeHours, payrollCapacityHours: $payrollCapacityHours, usesDefaultAdminTime: $usesDefaultAdminTime, updatedAt: \"now()\"}\n  ) {\n    returning {\n      ...WorkScheduleComplete\n    }\n    affectedRows\n  }\n}\n\nmutation BulkCreateWorkSchedule($schedules: [workScheduleInsertInput!]!) {\n  bulkInsertWorkSchedule(objects: $schedules) {\n    returning {\n      ...WorkScheduleComplete\n    }\n    affectedRows\n  }\n}\n\nmutation BulkUpdateWorkScheduleCapacity($userIds: [uuid!]!, $workDay: String!, $workHours: numeric!, $adminTimeHours: numeric!, $payrollCapacityHours: numeric!) {\n  bulkUpdateWorkSchedule(\n    where: {userId: {_in: $userIds}, workDay: {_eq: $workDay}}\n    _set: {workHours: $workHours, adminTimeHours: $adminTimeHours, payrollCapacityHours: $payrollCapacityHours, updatedAt: \"now()\"}\n  ) {\n    returning {\n      ...WorkScheduleComplete\n    }\n    affectedRows\n  }\n}\n\nmutation UpdateAdminTime($userId: uuid!, $workDay: String!, $adminTimeHours: numeric!, $usesDefaultAdminTime: Boolean!) {\n  bulkUpdateWorkSchedule(\n    where: {userId: {_eq: $userId}, workDay: {_eq: $workDay}}\n    _set: {adminTimeHours: $adminTimeHours, usesDefaultAdminTime: $usesDefaultAdminTime, updatedAt: \"now()\"}\n  ) {\n    returning {\n      ...WorkScheduleCapacity\n    }\n    affectedRows\n  }\n}\n\nmutation UpsertWorkSchedule($userId: uuid!, $workDay: String!, $workHours: numeric!, $adminTimeHours: numeric!, $payrollCapacityHours: numeric!, $usesDefaultAdminTime: Boolean!) {\n  insertWorkSchedule(\n    object: {userId: $userId, workDay: $workDay, workHours: $workHours, adminTimeHours: $adminTimeHours, payrollCapacityHours: $payrollCapacityHours, usesDefaultAdminTime: $usesDefaultAdminTime}\n    onConflict: {constraint: unique_user_work_day, updateColumns: [workHours, adminTimeHours, payrollCapacityHours, usesDefaultAdminTime]}\n  ) {\n    ...WorkScheduleComplete\n  }\n}\n\nmutation UpdateUserDefaultAdminTime($userId: uuid!, $defaultAdminTimePercentage: numeric!) {\n  updateUserById(\n    pkColumns: {id: $userId}\n    _set: {defaultAdminTimePercentage: $defaultAdminTimePercentage, updatedAt: \"now()\"}\n  ) {\n    id\n    firstName\n    lastName\n    computedName\n    defaultAdminTimePercentage\n    updatedAt\n  }\n}\n\nmutation AssignPayrollToConsultant($payrollId: uuid!, $primaryConsultantUserId: uuid, $backupConsultantUserId: uuid, $managerUserId: uuid) {\n  updatePayrollById(\n    pkColumns: {id: $payrollId}\n    _set: {primaryConsultantUserId: $primaryConsultantUserId, backupConsultantUserId: $backupConsultantUserId, managerUserId: $managerUserId, updatedAt: \"now()\"}\n  ) {\n    id\n    name\n    primaryConsultantUserId\n    backupConsultantUserId\n    managerUserId\n    primaryConsultant {\n      id\n      firstName\n      lastName\n      computedName\n    }\n    backupConsultant {\n      id\n      firstName\n      lastName\n      computedName\n    }\n    manager {\n      id\n      firstName\n      lastName\n      computedName\n    }\n    updatedAt\n  }\n}\n\nmutation BulkAssignPayrolls($payrollIds: [uuid!]!, $primaryConsultantUserId: uuid, $backupConsultantUserId: uuid, $managerUserId: uuid) {\n  bulkUpdatePayrolls(\n    where: {id: {_in: $payrollIds}}\n    _set: {primaryConsultantUserId: $primaryConsultantUserId, backupConsultantUserId: $backupConsultantUserId, managerUserId: $managerUserId, updatedAt: \"now()\"}\n  ) {\n    returning {\n      id\n      name\n      primaryConsultantUserId\n      backupConsultantUserId\n      managerUserId\n      primaryConsultant {\n        id\n        firstName\n        lastName\n        computedName\n      }\n      backupConsultant {\n        id\n        firstName\n        lastName\n        computedName\n      }\n      manager {\n        id\n        firstName\n        lastName\n        computedName\n      }\n      updatedAt\n    }\n    affectedRows\n  }\n}\n\nmutation UnassignPayrollConsultant($payrollId: uuid!, $removeRole: String!) {\n  updatePayrollById(\n    pkColumns: {id: $payrollId}\n    _set: {primaryConsultantUserId: null, backupConsultantUserId: null, managerUserId: null, updatedAt: \"now()\"}\n  ) {\n    id\n    name\n    primaryConsultantUserId\n    backupConsultantUserId\n    managerUserId\n    updatedAt\n  }\n}": typeof types.CreateWorkScheduleDocument,
    "query GetUserWorkSchedules($userId: uuid!) {\n  workSchedule(where: {userId: {_eq: $userId}}) {\n    ...WorkScheduleBasic\n  }\n}\n\nquery GetWorkScheduleById($id: uuid!) {\n  workScheduleById(id: $id) {\n    ...WorkScheduleComplete\n  }\n}\n\nquery GetTeamWorkSchedules($managerUserId: uuid!) {\n  workSchedule(\n    where: {user: {managerId: {_eq: $managerUserId}}}\n    orderBy: {workDay: ASC}\n  ) {\n    ...WorkScheduleWithUser\n  }\n}\n\nquery GetWorkSchedulesByDateRange($startDate: String!, $endDate: String!) {\n  workSchedule(\n    where: {workDay: {_gte: $startDate, _lte: $endDate}}\n    orderBy: {workDay: ASC}\n  ) {\n    ...WorkScheduleWithUser\n  }\n}\n\nquery GetTeamCapacityDashboard($managerUserId: uuid!) {\n  workSchedule(\n    where: {user: {managerId: {_eq: $managerUserId}}}\n    orderBy: {user: {computedName: ASC}, workDay: ASC}\n  ) {\n    ...WorkScheduleDashboardCard\n  }\n}\n\nquery GetConsultantCapacity($userId: uuid!) {\n  workSchedule(where: {userId: {_eq: $userId}}) {\n    ...WorkScheduleCapacity\n  }\n}\n\nquery GetUsersBasic {\n  users(where: {isStaff: {_eq: true}}) {\n    id\n    firstName\n    lastName\n    computedName\n    email\n    role\n    managerId\n    isStaff\n    defaultAdminTimePercentage\n    createdAt\n    updatedAt\n  }\n}\n\nquery GetUserById($id: uuid!) {\n  userById(id: $id) {\n    id\n    firstName\n    lastName\n    computedName\n    email\n    role\n    managerId\n    isStaff\n    defaultAdminTimePercentage\n    createdAt\n    updatedAt\n    userWorkSchedules {\n      ...WorkScheduleBasic\n    }\n  }\n}\n\nquery GetTeamWorkloadOptimized($managerId: uuid!) {\n  users(\n    where: {managerId: {_eq: $managerId}, isStaff: {_eq: true}, isActive: {_eq: true}}\n    orderBy: {computedName: ASC}\n  ) {\n    id\n    firstName\n    lastName\n    computedName\n    email\n    role\n    defaultAdminTimePercentage\n    isActive\n    userWorkSchedules(orderBy: {workDay: ASC}) {\n      id\n      workDay\n      workHours\n      adminTimeHours\n      payrollCapacityHours\n      createdAt\n      updatedAt\n    }\n    primaryConsultantPayrolls(\n      where: {supersededDate: {_isNull: true}}\n      orderBy: {name: ASC}\n    ) {\n      id\n      name\n      processingTime\n      status\n      processingDaysBeforeEft\n      client {\n        id\n        name\n      }\n      payrollDates(orderBy: {originalEftDate: ASC}, limit: 5) {\n        id\n        originalEftDate\n        adjustedEftDate\n        processingDate\n      }\n    }\n    backupConsultantPayrolls(\n      where: {supersededDate: {_isNull: true}}\n      orderBy: {name: ASC}\n    ) {\n      id\n      name\n      processingTime\n      status\n      processingDaysBeforeEft\n      client {\n        id\n        name\n      }\n      payrollDates(orderBy: {originalEftDate: ASC}, limit: 5) {\n        id\n        originalEftDate\n        adjustedEftDate\n        processingDate\n      }\n    }\n  }\n  teamStats: usersAggregate(\n    where: {managerId: {_eq: $managerId}, isStaff: {_eq: true}, isActive: {_eq: true}}\n  ) {\n    aggregate {\n      count\n    }\n  }\n  managedPayrollsCount: payrollsAggregate(\n    where: {managerUserId: {_eq: $managerId}, supersededDate: {_isNull: true}}\n  ) {\n    aggregate {\n      count\n    }\n  }\n}\n\nquery GetTeamMembers($managerId: uuid!) {\n  users(where: {managerId: {_eq: $managerId}}) {\n    id\n    firstName\n    lastName\n    computedName\n    email\n    role\n    managerId\n    isStaff\n    defaultAdminTimePercentage\n    userWorkSchedules {\n      ...WorkScheduleCapacity\n    }\n  }\n}\n\nquery GetTeamMembersWithCapacity($managerId: uuid!) {\n  users(\n    where: {_and: [{managerId: {_eq: $managerId}}, {isStaff: {_eq: true}}]}\n    orderBy: {computedName: ASC}\n  ) {\n    id\n    firstName\n    lastName\n    computedName\n    email\n    role\n    managerId\n    isStaff\n    defaultAdminTimePercentage\n    userWorkSchedules {\n      ...WorkScheduleCapacity\n    }\n  }\n}\n\nquery GetAvailableConsultants {\n  users(where: {isStaff: {_eq: true}}, orderBy: {computedName: ASC}) {\n    id\n    firstName\n    lastName\n    computedName\n    email\n    role\n    defaultAdminTimePercentage\n    userWorkSchedules {\n      ...WorkScheduleCapacity\n    }\n    userSkills {\n      skillName\n      proficiencyLevel\n    }\n  }\n}\n\nquery GetConsultantWorkload($consultantId: uuid!) {\n  users(where: {id: {_eq: $consultantId}}) {\n    id\n    firstName\n    lastName\n    computedName\n    email\n    role\n    defaultAdminTimePercentage\n    userWorkSchedules {\n      ...WorkScheduleCapacity\n    }\n    primaryConsultantPayrolls(where: {supersededDate: {_isNull: true}}) {\n      id\n      name\n      processingTime\n      processingDaysBeforeEft\n      status\n      client {\n        id\n        name\n      }\n      payrollDates(orderBy: {adjustedEftDate: ASC}, limit: 1) {\n        id\n        adjustedEftDate\n        originalEftDate\n      }\n    }\n    backupConsultantPayrolls(where: {supersededDate: {_isNull: true}}) {\n      id\n      name\n      processingTime\n      processingDaysBeforeEft\n      status\n      client {\n        id\n        name\n      }\n      payrollDates(orderBy: {adjustedEftDate: ASC}, limit: 1) {\n        id\n        adjustedEftDate\n        originalEftDate\n      }\n    }\n  }\n}\n\nquery GetPayrollsForAssignment {\n  payrolls(\n    where: {supersededDate: {_isNull: true}, status: {_in: [\"draft\", \"Active\", \"pending_approval\"]}}\n    orderBy: {createdAt: DESC}\n  ) {\n    id\n    name\n    status\n    processingTime\n    processingDaysBeforeEft\n    employeeCount\n    client {\n      id\n      name\n    }\n    primaryConsultantUserId\n    backupConsultantUserId\n    managerUserId\n    primaryConsultant {\n      id\n      firstName\n      lastName\n      computedName\n    }\n    backupConsultant {\n      id\n      firstName\n      lastName\n      computedName\n    }\n    manager {\n      id\n      firstName\n      lastName\n      computedName\n    }\n    payrollDates(orderBy: {adjustedEftDate: ASC}, limit: 3) {\n      id\n      adjustedEftDate\n      originalEftDate\n    }\n  }\n}\n\nquery GetTeamWorkload($managerUserId: uuid!) {\n  users(\n    where: {_and: [{managerId: {_eq: $managerUserId}}, {isStaff: {_eq: true}}, {isActive: {_eq: true}}]}\n    orderBy: {computedName: ASC}\n  ) {\n    id\n    firstName\n    lastName\n    computedName\n    email\n    role\n    defaultAdminTimePercentage\n    userWorkSchedules {\n      ...WorkScheduleCapacity\n    }\n    primaryConsultantPayrolls(where: {supersededDate: {_isNull: true}}) {\n      id\n      name\n      processingTime\n      processingDaysBeforeEft\n      status\n      payrollDates(orderBy: {adjustedEftDate: ASC}, limit: 1) {\n        adjustedEftDate\n      }\n    }\n    backupConsultantPayrolls(where: {supersededDate: {_isNull: true}}) {\n      id\n      name\n      processingTime\n      processingDaysBeforeEft\n      status\n      payrollDates(orderBy: {adjustedEftDate: ASC}, limit: 1) {\n        adjustedEftDate\n      }\n    }\n  }\n}\n\nquery GetHolidaysByDateRange($startDate: date!, $endDate: date!, $countryCode: bpchar = \"AU\") {\n  holidays(\n    where: {date: {_gte: $startDate, _lte: $endDate}, countryCode: {_eq: $countryCode}}\n    orderBy: {date: ASC}\n  ) {\n    id\n    name\n    localName\n    date\n    countryCode\n    types\n    isGlobal\n    region\n  }\n}\n\nquery GetEftRelevantHolidays($startDate: date!, $endDate: date!, $countryCode: bpchar = \"AU\") {\n  holidays(\n    where: {date: {_gte: $startDate, _lte: $endDate}, countryCode: {_eq: $countryCode}, _or: [{region: {_contains: [\"NSW\"]}}, {region: {_contains: [\"National\"]}}, {region: {_contains: [\"Australia\"]}}]}\n    orderBy: {date: ASC}\n  ) {\n    id\n    name\n    localName\n    date\n    countryCode\n    types\n    isGlobal\n    region\n  }\n}\n\nquery GetHolidaysByRegions($startDate: date!, $endDate: date!, $regions: [String!]!, $countryCode: bpchar = \"AU\") {\n  holidays(\n    where: {date: {_gte: $startDate, _lte: $endDate}, countryCode: {_eq: $countryCode}, _or: [{region: {_contains: $regions}}]}\n    orderBy: {date: ASC}\n  ) {\n    id\n    name\n    localName\n    date\n    countryCode\n    types\n    isGlobal\n    region\n  }\n}\n\nquery GetAllStaffCapacityDashboard {\n  workSchedule(\n    where: {user: {isStaff: {_eq: true}, isActive: {_eq: true}}}\n    orderBy: {user: {computedName: ASC}, workDay: ASC}\n  ) {\n    id\n    userId\n    workDay\n    workHours\n    adminTimeHours\n    payrollCapacityHours\n    usesDefaultAdminTime\n    user {\n      id\n      firstName\n      lastName\n      computedName\n      email\n      role\n      defaultAdminTimePercentage\n      isStaff\n    }\n  }\n}\n\nquery GetAllStaffWorkload {\n  users(\n    where: {isStaff: {_eq: true}, isActive: {_eq: true}}\n    orderBy: {computedName: ASC}\n  ) {\n    id\n    firstName\n    lastName\n    computedName\n    email\n    role\n    defaultAdminTimePercentage\n    userWorkSchedules {\n      id\n      userId\n      workDay\n      workHours\n      adminTimeHours\n      payrollCapacityHours\n      usesDefaultAdminTime\n    }\n    userSkills {\n      skillName\n      proficiencyLevel\n    }\n    primaryConsultantPayrolls(where: {supersededDate: {_isNull: true}}) {\n      id\n      name\n      processingTime\n      processingDaysBeforeEft\n      status\n      payrollDates(orderBy: {adjustedEftDate: ASC}, limit: 1) {\n        adjustedEftDate\n      }\n      payrollRequiredSkills {\n        skillName\n        requiredLevel\n      }\n    }\n    backupConsultantPayrolls(where: {supersededDate: {_isNull: true}}) {\n      id\n      name\n      processingTime\n      processingDaysBeforeEft\n      status\n      payrollDates(orderBy: {adjustedEftDate: ASC}, limit: 1) {\n        adjustedEftDate\n      }\n      payrollRequiredSkills {\n        skillName\n        requiredLevel\n      }\n    }\n  }\n}\n\nquery GetTeamCapacityOverview($managerUserId: uuid) {\n  teamCapacity: workScheduleAggregate(\n    where: {user: {_and: [{isStaff: {_eq: true}}, {isActive: {_eq: true}}, {managerId: {_eq: $managerUserId}}]}}\n  ) {\n    aggregate {\n      sum {\n        workHours\n        adminTimeHours\n        payrollCapacityHours\n      }\n      count\n    }\n  }\n  teamMemberCount: usersAggregate(\n    where: {_and: [{isStaff: {_eq: true}}, {isActive: {_eq: true}}, {managerId: {_eq: $managerUserId}}]}\n  ) {\n    aggregate {\n      count\n    }\n  }\n  activePayrollCount: payrollsAggregate(\n    where: {_and: [{supersededDate: {_isNull: true}}, {status: {_in: [\"Active\", \"pending_approval\"]}}, {_or: [{primaryConsultant: {managerId: {_eq: $managerUserId}}}, {backupConsultant: {managerId: {_eq: $managerUserId}}}]}]}\n  ) {\n    aggregate {\n      count\n      sum {\n        processingTime\n      }\n    }\n  }\n}": typeof types.GetUserWorkSchedulesDocument,
    "fragment UserSkillBasic on userSkill {\n  skillName\n  proficiencyLevel\n  userId\n}\n\nfragment UserSkillComplete on userSkill {\n  skillName\n  proficiencyLevel\n  userId\n  skilledUser {\n    id\n    firstName\n    lastName\n    computedName\n    email\n    role\n  }\n}\n\nfragment PayrollRequiredSkillBasic on payrollRequiredSkill {\n  skillName\n  requiredLevel\n  payrollId\n}\n\nfragment PayrollRequiredSkillComplete on payrollRequiredSkill {\n  skillName\n  requiredLevel\n  payrollId\n  requiringPayroll {\n    id\n    name\n    status\n  }\n}\n\nquery GetUserSkills($userId: uuid!) {\n  userSkill(where: {userId: {_eq: $userId}}) {\n    ...UserSkillBasic\n  }\n}\n\nquery GetUserSkillByCompositeKey($userId: uuid!, $skillName: String!) {\n  userSkill(\n    where: {_and: [{userId: {_eq: $userId}}, {skillName: {_eq: $skillName}}]}\n  ) {\n    ...UserSkillBasic\n  }\n}\n\nquery GetAllUserSkills {\n  userSkill {\n    ...UserSkillComplete\n  }\n}\n\nquery GetUsersWithSkills {\n  users(where: {isStaff: {_eq: true}}) {\n    id\n    firstName\n    lastName\n    computedName\n    email\n    role\n    userSkills {\n      ...UserSkillBasic\n    }\n  }\n}\n\nquery GetPayrollRequiredSkills($payrollId: uuid!) {\n  payrollRequiredSkill(where: {payrollId: {_eq: $payrollId}}) {\n    ...PayrollRequiredSkillBasic\n  }\n}\n\nquery GetPayrollRequiredSkillByCompositeKey($payrollId: uuid!, $skillName: String!) {\n  payrollRequiredSkill(\n    where: {_and: [{payrollId: {_eq: $payrollId}}, {skillName: {_eq: $skillName}}]}\n  ) {\n    ...PayrollRequiredSkillBasic\n  }\n}\n\nquery GetPayrollsWithRequiredSkills {\n  payrolls(where: {supersededDate: {_isNull: true}}) {\n    id\n    name\n    status\n    processingTime\n    payrollRequiredSkills {\n      ...PayrollRequiredSkillBasic\n    }\n  }\n}\n\nquery GetConsultantsWithSkills($requiredSkills: [String!]!) {\n  users(\n    where: {_and: [{isStaff: {_eq: true}}, {isActive: {_eq: true}}, {role: {_in: [\"consultant\", \"manager\", \"org_admin\"]}}, {userSkills: {skillName: {_in: $requiredSkills}}}]}\n  ) {\n    id\n    firstName\n    lastName\n    computedName\n    email\n    role\n    defaultAdminTimePercentage\n    userSkills {\n      ...UserSkillBasic\n    }\n    userWorkSchedules {\n      id\n      workDay\n      workHours\n      adminTimeHours\n      payrollCapacityHours\n      usesDefaultAdminTime\n    }\n  }\n}\n\nmutation CreateUserSkill($skillName: String!, $proficiencyLevel: String!, $userId: uuid!) {\n  insertUserSkill(\n    object: {skillName: $skillName, proficiencyLevel: $proficiencyLevel, userId: $userId}\n  ) {\n    ...UserSkillBasic\n  }\n}\n\nmutation BulkCreateUserSkills($userSkills: [userSkillInsertInput!]!) {\n  bulkInsertUserSkill(objects: $userSkills) {\n    returning {\n      ...UserSkillBasic\n    }\n    affectedRows\n  }\n}\n\nmutation UpdateUserSkill($userId: uuid!, $skillName: String!, $proficiencyLevel: String!) {\n  bulkUpdateUserSkill(\n    where: {_and: [{userId: {_eq: $userId}}, {skillName: {_eq: $skillName}}]}\n    _set: {proficiencyLevel: $proficiencyLevel}\n  ) {\n    returning {\n      ...UserSkillBasic\n    }\n    affectedRows\n  }\n}\n\nmutation DeleteUserSkill($userId: uuid!, $skillName: String!) {\n  bulkDeleteUserSkill(\n    where: {_and: [{userId: {_eq: $userId}}, {skillName: {_eq: $skillName}}]}\n  ) {\n    affectedRows\n    returning {\n      ...UserSkillBasic\n    }\n  }\n}\n\nmutation CreatePayrollRequiredSkill($payrollId: uuid!, $skillName: String!, $requiredLevel: String!) {\n  insertPayrollRequiredSkill(\n    object: {payrollId: $payrollId, skillName: $skillName, requiredLevel: $requiredLevel}\n  ) {\n    ...PayrollRequiredSkillBasic\n  }\n}\n\nmutation BulkCreatePayrollRequiredSkills($skills: [payrollRequiredSkillInsertInput!]!) {\n  bulkInsertPayrollRequiredSkill(objects: $skills) {\n    returning {\n      ...PayrollRequiredSkillBasic\n    }\n    affectedRows\n  }\n}\n\nmutation DeletePayrollRequiredSkill($payrollId: uuid!, $skillName: String!) {\n  bulkDeletePayrollRequiredSkill(\n    where: {_and: [{payrollId: {_eq: $payrollId}}, {skillName: {_eq: $skillName}}]}\n  ) {\n    affectedRows\n    returning {\n      ...PayrollRequiredSkillBasic\n    }\n  }\n}\n\nmutation BulkDeleteUserSkills($where: userSkillBoolExp!) {\n  bulkDeleteUserSkill(where: $where) {\n    affectedRows\n  }\n}\n\nmutation BulkDeletePayrollRequiredSkills($where: payrollRequiredSkillBoolExp!) {\n  bulkDeletePayrollRequiredSkill(where: $where) {\n    affectedRows\n  }\n}": typeof types.UserSkillBasicFragmentDoc,
    "subscription WorkScheduleUpdates {\n  workSchedule(orderBy: {updatedAt: DESC}) {\n    ...WorkScheduleListItem\n  }\n}\n\nsubscription WorkScheduleUpdate($id: uuid!) {\n  workSchedule(where: {id: {_eq: $id}}) {\n    ...WorkScheduleComplete\n  }\n}\n\nsubscription UserWorkScheduleUpdates($userId: uuid!) {\n  workSchedule(where: {userId: {_eq: $userId}}) {\n    ...MyWorkSchedule\n  }\n}\n\nsubscription TeamWorkScheduleUpdates($managerUserId: uuid!) {\n  workSchedule(\n    where: {user: {managerId: {_eq: $managerUserId}}}\n    orderBy: {updatedAt: DESC}\n  ) {\n    ...WorkScheduleDashboardCard\n  }\n}\n\nsubscription WorkScheduleCapacityUpdates($userId: uuid!) {\n  workSchedule(where: {userId: {_eq: $userId}}) {\n    ...WorkScheduleCapacity\n  }\n}": typeof types.WorkScheduleUpdatesDocument,
    "query GetConsultantPayrollWorkload($userId: uuid!, $startDate: date!, $endDate: date!) {\n  userById(id: $userId) {\n    id\n    firstName\n    lastName\n    computedName\n    email\n    role\n    defaultAdminTimePercentage\n  }\n  workSchedule(where: {userId: {_eq: $userId}}, orderBy: {workDay: ASC}) {\n    id\n    workDay\n    workHours\n    adminTimeHours\n    payrollCapacityHours\n    usesDefaultAdminTime\n  }\n  primaryPayrolls: payrolls(\n    where: {primaryConsultantUserId: {_eq: $userId}, status: {_in: [\"Active\", \"Implementation\", \"pending_approval\", \"approved\"]}}\n  ) {\n    id\n    name\n    processingTime\n    processingDaysBeforeEft\n    status\n    client {\n      id\n      name\n    }\n    payrollDates(\n      where: {originalEftDate: {_gte: $startDate, _lte: $endDate}}\n      orderBy: {originalEftDate: ASC}\n    ) {\n      id\n      originalEftDate\n      processingDate\n    }\n  }\n  backupPayrolls: payrolls(\n    where: {backupConsultantUserId: {_eq: $userId}, status: {_in: [\"Active\", \"Implementation\", \"pending_approval\", \"approved\"]}}\n  ) {\n    id\n    name\n    processingTime\n    processingDaysBeforeEft\n    status\n    client {\n      id\n      name\n    }\n    payrollDates(\n      where: {originalEftDate: {_gte: $startDate, _lte: $endDate}}\n      orderBy: {originalEftDate: ASC}\n    ) {\n      id\n      originalEftDate\n      processingDate\n    }\n  }\n}\n\nquery GetTeamPayrollWorkload($managerId: uuid!, $startDate: date!, $endDate: date!) {\n  teamMembers: users(\n    where: {managerId: {_eq: $managerId}, isStaff: {_eq: true}, isActive: {_eq: true}}\n    orderBy: {computedName: ASC}\n  ) {\n    id\n    firstName\n    lastName\n    computedName\n    email\n    role\n    defaultAdminTimePercentage\n    userWorkSchedules(orderBy: {workDay: ASC}) {\n      id\n      workDay\n      workHours\n      adminTimeHours\n      payrollCapacityHours\n      usesDefaultAdminTime\n    }\n    primaryConsultantPayrolls(\n      where: {status: {_in: [\"Active\", \"pending_approval\", \"Implementation\"]}}\n    ) {\n      id\n      name\n      processingTime\n      processingDaysBeforeEft\n      status\n      client {\n        id\n        name\n      }\n      payrollDates(\n        where: {originalEftDate: {_gte: $startDate, _lte: $endDate}}\n        orderBy: {originalEftDate: ASC}\n      ) {\n        id\n        originalEftDate\n        processingDate\n      }\n    }\n    backupConsultantPayrolls(\n      where: {status: {_in: [\"Active\", \"pending_approval\", \"Implementation\"]}}\n    ) {\n      id\n      name\n      processingTime\n      processingDaysBeforeEft\n      status\n      client {\n        id\n        name\n      }\n      payrollDates(\n        where: {originalEftDate: {_gte: $startDate, _lte: $endDate}}\n        orderBy: {originalEftDate: ASC}\n      ) {\n        id\n        originalEftDate\n        processingDate\n      }\n    }\n  }\n}\n\nquery GetPayrollWorkloadStats($userId: uuid!, $startDate: date!, $endDate: date!) {\n  workScheduleStats: workScheduleAggregate(where: {userId: {_eq: $userId}}) {\n    aggregate {\n      sum {\n        workHours\n        adminTimeHours\n        payrollCapacityHours\n      }\n      avg {\n        workHours\n        payrollCapacityHours\n      }\n      count\n    }\n  }\n  primaryPayrollCount: payrollsAggregate(\n    where: {primaryConsultantUserId: {_eq: $userId}, status: {_in: [\"Active\", \"Implementation\", \"pending_approval\", \"approved\"]}}\n  ) {\n    aggregate {\n      count\n      sum {\n        processingTime\n      }\n    }\n  }\n  backupPayrollCount: payrollsAggregate(\n    where: {backupConsultantUserId: {_eq: $userId}, status: {_in: [\"Active\", \"Implementation\", \"pending_approval\", \"approved\"]}}\n  ) {\n    aggregate {\n      count\n      sum {\n        processingTime\n      }\n    }\n  }\n  upcomingPayrollDates: payrollDatesAggregate(\n    where: {relatedPayroll: {_or: [{primaryConsultantUserId: {_eq: $userId}}, {backupConsultantUserId: {_eq: $userId}}]}, originalEftDate: {_gte: $startDate, _lte: $endDate}}\n  ) {\n    aggregate {\n      count\n    }\n  }\n}\n\nquery GetPayrollAssignmentDetails($payrollId: uuid!, $startDate: date!, $endDate: date!) {\n  payrollById(id: $payrollId) {\n    id\n    name\n    processingTime\n    processingDaysBeforeEft\n    status\n    client {\n      id\n      name\n    }\n    primaryConsultant {\n      id\n      firstName\n      lastName\n      computedName\n      email\n    }\n    backupConsultant {\n      id\n      firstName\n      lastName\n      computedName\n      email\n    }\n    payrollDates(\n      where: {originalEftDate: {_gte: $startDate, _lte: $endDate}}\n      orderBy: {originalEftDate: ASC}\n    ) {\n      id\n      originalEftDate\n      processingDate\n    }\n  }\n}": typeof types.GetConsultantPayrollWorkloadDocument,
    "fragment UserMinimal on users {\n  id\n  firstName\n  lastName\n  computedName\n  email\n}\n\nfragment UserCoreShared on users {\n  ...UserMinimal\n  role\n  isActive\n}\n\nfragment UserBasic on users {\n  ...UserCoreShared\n  clerkUserId\n  createdAt\n  updatedAt\n}\n\nfragment UserBase on users {\n  ...UserBasic\n}\n\nfragment UserWithRole on users {\n  ...UserBasic\n  username\n  isStaff\n}\n\nfragment UserProfile on users {\n  ...UserWithRole\n  clerkUserId\n  image\n  managerId\n  deactivatedAt\n  deactivatedBy\n  managerUser {\n    ...UserMinimal\n  }\n}\n\nfragment UserSearchResult on users {\n  ...UserCoreShared\n  username\n  isStaff\n}\n\nfragment ClientMinimal on clients {\n  id\n  name\n}\n\nfragment ClientBase on clients {\n  id\n  name\n  active\n  contactEmail\n  contactPerson\n  contactPhone\n  createdAt\n}\n\nfragment ClientWithStats on clients {\n  ...ClientBase\n  currentEmployeeCount: payrollsAggregate(\n    where: {supersededDate: {_isNull: true}}\n  ) {\n    aggregate {\n      sum {\n        employeeCount\n      }\n    }\n  }\n  activePayrollCount: payrollsAggregate(\n    where: {supersededDate: {_isNull: true}, status: {_eq: \"Active\"}}\n  ) {\n    aggregate {\n      count\n    }\n  }\n}\n\nfragment ClientListBase on clients {\n  ...ClientBase\n  payrollCount: payrollsAggregate(where: {supersededDate: {_isNull: true}}) {\n    aggregate {\n      count\n    }\n  }\n}\n\nfragment PayrollMinimal on payrolls {\n  id\n  name\n  employeeCount\n  status\n}\n\nfragment PayrollBase on payrolls {\n  id\n  name\n  employeeCount\n  status\n  payrollSystem\n  processingTime\n  processingDaysBeforeEft\n  versionNumber\n  supersededDate\n  createdAt\n  updatedAt\n}\n\nfragment PayrollWithClient on payrolls {\n  ...PayrollBase\n  clientId\n  client {\n    id\n    name\n    active\n  }\n}\n\nfragment PayrollListItem on payrolls {\n  ...PayrollWithClient\n  primaryConsultantUserId\n  backupConsultantUserId\n  managerUserId\n  createdByUserId\n  cycleId\n  dateTypeId\n  dateValue\n  payrollCycle {\n    id\n    name\n    description\n  }\n  payrollDateType {\n    id\n    name\n    description\n  }\n  primaryConsultant {\n    ...UserMinimal\n  }\n  backupConsultant {\n    ...UserMinimal\n  }\n  manager {\n    ...UserMinimal\n  }\n}\n\nfragment PayrollWithDates on payrolls {\n  ...PayrollBase\n  goLiveDate\n  payrollDates(orderBy: {originalEftDate: ASC}) {\n    id\n    originalEftDate\n    adjustedEftDate\n    notes\n  }\n}\n\nfragment PayrollFullDetail on payrolls {\n  ...PayrollWithDates\n  ...PayrollWithClient\n  dateTypeId\n  cycleId\n  dateValue\n  versionReason\n  supersededDate\n  parentPayrollId\n  parentPayroll {\n    id\n    versionNumber\n  }\n  childPayrolls(orderBy: {versionNumber: DESC}) {\n    id\n    versionNumber\n    versionReason\n    createdAt\n  }\n  primaryConsultant {\n    ...UserMinimal\n  }\n  backupConsultant {\n    ...UserMinimal\n  }\n  manager {\n    ...UserMinimal\n  }\n}\n\nfragment NoteWithAuthor on notes {\n  id\n  content\n  isImportant\n  createdAt\n  entityId\n  entityType\n  authorUser {\n    ...UserMinimal\n  }\n}\n\nfragment PermissionBase on permissions {\n  id\n  resourceId\n  description\n  legacyPermissionName\n  action\n}\n\nfragment RoleWithPermissions on roles {\n  id\n  name\n  displayName\n  description\n  isSystemRole\n  priority\n  assignedPermissions {\n    grantedPermission {\n      ...PermissionBase\n    }\n  }\n}\n\nfragment AuditLogEntry on auditLogs {\n  id\n  userId\n  userEmail\n  userRole\n  action\n  resourceType\n  resourceId\n  eventTime\n  success\n  errorMessage\n  ipAddress\n  userAgent\n  requestId\n  sessionId\n  metadata\n  oldValues\n  newValues\n  createdAt\n}\n\nfragment AuthEvent on authEvents {\n  id\n  userId\n  userEmail\n  eventType\n  eventTime\n  success\n  failureReason\n  ipAddress\n  userAgent\n  metadata\n}\n\nfragment DataAccessLog on dataAccessLogs {\n  id\n  userId\n  resourceType\n  resourceId\n  accessType\n  accessedAt\n  dataClassification\n  fieldsAccessed\n  rowCount\n  ipAddress\n  metadata\n}\n\nfragment PermissionChange on permissionChanges {\n  id\n  changedAt\n  changedByUserId\n  targetUserId\n  targetRoleId\n  changeType\n  permissionType\n  oldPermissions\n  newPermissions\n  reason\n  approvedByUserId\n}\n\nfragment PayrollDateInfo on payrollDates {\n  id\n  originalEftDate\n  adjustedEftDate\n  notes\n  createdAt\n}\n\nfragment PermissionOverrideInfo on permissionOverrides {\n  id\n  userId\n  role\n  resource\n  operation\n  granted\n  reason\n  conditions\n  expiresAt\n  createdBy\n  createdAt\n}": typeof types.UserMinimalFragmentDoc,
    "mutation LogAuditEvent($input: auditLogsInsertInput!) {\n  insertAuditLogsOne: insertAuditLog(object: $input) {\n    id\n    eventTime\n  }\n}\n\nmutation InsertFile($input: filesInsertInput!) {\n  insertFile(object: $input) {\n    id\n    filename\n    bucket\n    objectKey\n    size\n    mimetype\n    url\n    clientId\n    payrollId\n    uploadedBy\n    category\n    isPublic\n    metadata\n    fileType\n    createdAt\n  }\n}\n\nmutation UpdateFileMetadata($id: uuid!, $updates: filesSetInput!) {\n  updateFileById(pkColumns: {id: $id}, _set: $updates) {\n    id\n    filename\n    bucket\n    objectKey\n    size\n    mimetype\n    url\n    clientId\n    payrollId\n    uploadedBy\n    category\n    isPublic\n    metadata\n    fileType\n    createdAt\n  }\n}\n\nmutation DeleteFile($id: uuid!) {\n  deleteFileById(id: $id) {\n    id\n    filename\n    objectKey\n  }\n}\n\nmutation RefreshData {\n  __typename\n}": typeof types.LogAuditEventDocument,
    "query GetDashboardMetrics($userId: uuid!) {\n  clientsAggregate(where: {active: {_eq: true}}) {\n    aggregate {\n      count\n    }\n  }\n  activePayrollsAggregate: payrollsAggregate(\n    where: {supersededDate: {_isNull: true}, status: {_nin: [\"Completed\", \"Failed\"]}}\n  ) {\n    aggregate {\n      count\n    }\n  }\n  totalEmployeesAggregate: payrollsAggregate(\n    where: {supersededDate: {_isNull: true}}\n  ) {\n    aggregate {\n      sum {\n        employeeCount\n      }\n    }\n  }\n  upcomingPayrolls: payrolls(\n    where: {supersededDate: {_isNull: true}, status: {_nin: [\"Completed\", \"Failed\", \"Cancelled\"]}}\n    orderBy: {updatedAt: DESC}\n    limit: 5\n  ) {\n    ...PayrollMinimal\n    client {\n      ...ClientMinimal\n    }\n  }\n}\n\nquery GetDashboardStatsOptimized($limit: Int = 10) {\n  clientsAggregate {\n    aggregate {\n      count\n    }\n  }\n  totalPayrolls: payrollsAggregate(where: {supersededDate: {_isNull: true}}) {\n    aggregate {\n      count\n    }\n  }\n  activePayrolls: payrollsAggregate(\n    where: {supersededDate: {_isNull: true}, status: {_eq: \"Active\"}}\n  ) {\n    aggregate {\n      count\n    }\n  }\n  upcomingPayrolls: payrolls(\n    where: {supersededDate: {_isNull: true}, status: {_eq: \"Active\"}, payrollDates: {adjustedEftDate: {_gte: \"now()\"}}}\n    orderBy: {updatedAt: DESC}\n    limit: $limit\n  ) {\n    id\n    name\n    status\n    client {\n      id\n      name\n    }\n    nextEftDate: payrollDates(\n      where: {adjustedEftDate: {_gte: \"now()\"}}\n      orderBy: {adjustedEftDate: ASC}\n      limit: 1\n    ) {\n      originalEftDate\n      adjustedEftDate\n      processingDate\n    }\n  }\n}\n\nquery GetClientsDashboardStats {\n  activeClientsCount: clientsAggregate(where: {active: {_eq: true}}) {\n    aggregate {\n      count\n    }\n  }\n  totalPayrollsCount: payrollsAggregate(where: {supersededDate: {_isNull: true}}) {\n    aggregate {\n      count\n    }\n  }\n  totalEmployeesSum: payrollsAggregate(where: {supersededDate: {_isNull: true}}) {\n    aggregate {\n      sum {\n        employeeCount\n      }\n    }\n  }\n  clientsNeedingAttention: clients(\n    where: {active: {_eq: true}, _not: {payrolls: {supersededDate: {_isNull: true}}}}\n  ) {\n    ...ClientMinimal\n  }\n}\n\nquery GetCurrentUser($userId: uuid!) {\n  user: userById(id: $userId) {\n    ...UserProfile\n  }\n}\n\nquery GetUsersForDropdown($role: user_role) {\n  users(\n    where: {isActive: {_eq: true}, role: {_eq: $role}}\n    orderBy: {computedName: ASC}\n  ) {\n    ...UserMinimal\n  }\n}\n\nquery GetSystemHealth {\n  databaseHealth: users(limit: 1) {\n    id\n  }\n  recentActivity: auditLogsAggregate(\n    where: {eventTime: {_gte: \"now() - interval '1 hour'\"}}\n  ) {\n    aggregate {\n      count\n    }\n  }\n}\n\nquery GlobalSearch($searchTerm: String!) {\n  clients(\n    where: {_or: [{name: {_ilike: $searchTerm}}, {contactEmail: {_ilike: $searchTerm}}]}\n    limit: 5\n  ) {\n    ...ClientMinimal\n  }\n  users(\n    where: {_or: [{computedName: {_ilike: $searchTerm}}, {firstName: {_ilike: $searchTerm}}, {lastName: {_ilike: $searchTerm}}, {email: {_ilike: $searchTerm}}]}\n    limit: 5\n  ) {\n    ...UserMinimal\n  }\n  payrolls(\n    where: {client: {name: {_ilike: $searchTerm}}, supersededDate: {_isNull: true}}\n    limit: 5\n  ) {\n    ...PayrollMinimal\n    client {\n      ...ClientMinimal\n    }\n  }\n}\n\nquery GetFileById($id: uuid!) {\n  fileById(id: $id) {\n    id\n    filename\n    bucket\n    objectKey\n    size\n    mimetype\n    url\n    clientId\n    payrollId\n    uploadedBy\n    category\n    isPublic\n    metadata\n    fileType\n    createdAt\n    client {\n      name\n    }\n    payroll {\n      name\n    }\n    uploader {\n      firstName\n      lastName\n      computedName\n    }\n  }\n}\n\nquery ListFiles($where: filesBoolExp, $limit: Int, $offset: Int, $orderBy: [filesOrderBy!]) {\n  files(where: $where, limit: $limit, offset: $offset, orderBy: $orderBy) {\n    id\n    filename\n    bucket\n    objectKey\n    size\n    mimetype\n    url\n    clientId\n    payrollId\n    uploadedBy\n    category\n    isPublic\n    metadata\n    fileType\n    createdAt\n    client {\n      name\n    }\n    payroll {\n      name\n    }\n    uploader {\n      firstName\n      lastName\n      computedName\n    }\n  }\n  filesAggregate(where: $where) {\n    aggregate {\n      count\n    }\n  }\n}": typeof types.GetDashboardMetricsDocument,
    "subscription RecentActivity($resourceTypes: [String!]) {\n  auditLogs(\n    where: {resourceType: {_in: $resourceTypes}, eventTime: {_gte: \"now() - interval '5 minutes'\"}}\n    orderBy: {eventTime: DESC}\n    limit: 20\n  ) {\n    ...AuditLogEntry\n  }\n}\n\nsubscription AuthenticationEvents($userId: uuid) {\n  authEvents(\n    where: {userId: {_eq: $userId}, eventTime: {_gte: \"now() - interval '10 minutes'\"}}\n    orderBy: {eventTime: DESC}\n  ) {\n    ...AuthEvent\n  }\n}\n\nsubscription SensitiveDataAccess($resourceTypes: [String!]!) {\n  dataAccessLogs(\n    where: {resourceType: {_in: $resourceTypes}, accessedAt: {_gte: \"now() - interval '10 minutes'\"}}\n    orderBy: {accessedAt: DESC}\n  ) {\n    ...DataAccessLog\n  }\n}\n\nsubscription PermissionChangeStream {\n  permissionChanges(orderBy: {changedAt: DESC}, limit: 10) {\n    ...PermissionChange\n  }\n}": typeof types.RecentActivityDocument,
};
const documents: Documents = {
    "fragment WorkScheduleCore on workSchedule {\n  id\n  userId\n  workDay\n  workHours\n  adminTimeHours\n  payrollCapacityHours\n  usesDefaultAdminTime\n  createdAt\n  updatedAt\n}\n\nfragment WorkScheduleBasic on workSchedule {\n  ...WorkScheduleCore\n}\n\nfragment WorkScheduleMinimal on workSchedule {\n  id\n  userId\n  workDay\n  workHours\n  adminTimeHours\n  payrollCapacityHours\n}\n\nfragment WorkScheduleWithUser on workSchedule {\n  ...WorkScheduleBasic\n  user {\n    id\n    firstName\n    lastName\n    computedName\n    email\n    role\n    defaultAdminTimePercentage\n  }\n}\n\nfragment WorkScheduleComplete on workSchedule {\n  ...WorkScheduleBasic\n  user {\n    id\n    firstName\n    lastName\n    computedName\n    email\n    role\n    managerId\n    defaultAdminTimePercentage\n    isStaff\n  }\n}\n\nfragment TeamWorkSchedule on workSchedule {\n  ...WorkScheduleBasic\n  user {\n    id\n    firstName\n    lastName\n    computedName\n    email\n    role\n    managerId\n    defaultAdminTimePercentage\n    isStaff\n  }\n}\n\nfragment WorkScheduleCapacity on workSchedule {\n  id\n  userId\n  workDay\n  workHours\n  adminTimeHours\n  payrollCapacityHours\n  usesDefaultAdminTime\n  user {\n    id\n    firstName\n    lastName\n    computedName\n    defaultAdminTimePercentage\n  }\n}\n\nfragment WorkScheduleListItem on workSchedule {\n  ...WorkScheduleCapacity\n}\n\nfragment MyWorkSchedule on workSchedule {\n  ...WorkScheduleComplete\n}\n\nfragment WorkScheduleCalendarItem on workSchedule {\n  id\n  workDay\n  workHours\n  adminTimeHours\n  payrollCapacityHours\n  user {\n    id\n    firstName\n    lastName\n    computedName\n  }\n}\n\nfragment WorkScheduleMonthlyView on workSchedule {\n  ...WorkScheduleCalendarItem\n}\n\nfragment WorkScheduleConflictCheck on workSchedule {\n  id\n  userId\n  workDay\n  workHours\n  payrollCapacityHours\n}\n\nfragment WorkScheduleDashboardCard on workSchedule {\n  ...WorkScheduleCapacity\n  user {\n    id\n    firstName\n    lastName\n    computedName\n    email\n    role\n    defaultAdminTimePercentage\n    isStaff\n  }\n}\n\nfragment WorkScheduleWeeklyView on workSchedule {\n  ...WorkScheduleDashboardCard\n}\n\nfragment WorkScheduleChangeLog on workSchedule {\n  id\n  userId\n  workDay\n  workHours\n  adminTimeHours\n  payrollCapacityHours\n  usesDefaultAdminTime\n  createdAt\n  updatedAt\n}\n\nfragment WorkScheduleForAudit on workSchedule {\n  ...WorkScheduleChangeLog\n  user {\n    id\n    firstName\n    lastName\n    computedName\n    role\n  }\n}\n\nfragment WorkSchedulePattern on workSchedule {\n  workDay\n  workHours\n  adminTimeHours\n  payrollCapacityHours\n  usesDefaultAdminTime\n}": types.WorkScheduleCoreFragmentDoc,
    "mutation CreateWorkSchedule($object: workScheduleInsertInput!) {\n  insertWorkSchedule(object: $object) {\n    ...WorkScheduleComplete\n  }\n}\n\nmutation UpdateWorkSchedule($id: uuid!, $set: workScheduleSetInput!) {\n  updateWorkScheduleById(pkColumns: {id: $id}, _set: $set) {\n    ...WorkScheduleComplete\n  }\n}\n\nmutation DeleteWorkSchedule($id: uuid!) {\n  deleteWorkScheduleById(id: $id) {\n    id\n    userId\n    workDay\n    workHours\n    adminTimeHours\n    payrollCapacityHours\n  }\n}\n\nmutation UpdateWorkScheduleHours($userId: uuid!, $workDay: String!, $workHours: numeric!, $adminTimeHours: numeric, $payrollCapacityHours: numeric, $usesDefaultAdminTime: Boolean) {\n  bulkUpdateWorkSchedule(\n    where: {userId: {_eq: $userId}, workDay: {_eq: $workDay}}\n    _set: {workHours: $workHours, adminTimeHours: $adminTimeHours, payrollCapacityHours: $payrollCapacityHours, usesDefaultAdminTime: $usesDefaultAdminTime, updatedAt: \"now()\"}\n  ) {\n    returning {\n      ...WorkScheduleComplete\n    }\n    affectedRows\n  }\n}\n\nmutation BulkCreateWorkSchedule($schedules: [workScheduleInsertInput!]!) {\n  bulkInsertWorkSchedule(objects: $schedules) {\n    returning {\n      ...WorkScheduleComplete\n    }\n    affectedRows\n  }\n}\n\nmutation BulkUpdateWorkScheduleCapacity($userIds: [uuid!]!, $workDay: String!, $workHours: numeric!, $adminTimeHours: numeric!, $payrollCapacityHours: numeric!) {\n  bulkUpdateWorkSchedule(\n    where: {userId: {_in: $userIds}, workDay: {_eq: $workDay}}\n    _set: {workHours: $workHours, adminTimeHours: $adminTimeHours, payrollCapacityHours: $payrollCapacityHours, updatedAt: \"now()\"}\n  ) {\n    returning {\n      ...WorkScheduleComplete\n    }\n    affectedRows\n  }\n}\n\nmutation UpdateAdminTime($userId: uuid!, $workDay: String!, $adminTimeHours: numeric!, $usesDefaultAdminTime: Boolean!) {\n  bulkUpdateWorkSchedule(\n    where: {userId: {_eq: $userId}, workDay: {_eq: $workDay}}\n    _set: {adminTimeHours: $adminTimeHours, usesDefaultAdminTime: $usesDefaultAdminTime, updatedAt: \"now()\"}\n  ) {\n    returning {\n      ...WorkScheduleCapacity\n    }\n    affectedRows\n  }\n}\n\nmutation UpsertWorkSchedule($userId: uuid!, $workDay: String!, $workHours: numeric!, $adminTimeHours: numeric!, $payrollCapacityHours: numeric!, $usesDefaultAdminTime: Boolean!) {\n  insertWorkSchedule(\n    object: {userId: $userId, workDay: $workDay, workHours: $workHours, adminTimeHours: $adminTimeHours, payrollCapacityHours: $payrollCapacityHours, usesDefaultAdminTime: $usesDefaultAdminTime}\n    onConflict: {constraint: unique_user_work_day, updateColumns: [workHours, adminTimeHours, payrollCapacityHours, usesDefaultAdminTime]}\n  ) {\n    ...WorkScheduleComplete\n  }\n}\n\nmutation UpdateUserDefaultAdminTime($userId: uuid!, $defaultAdminTimePercentage: numeric!) {\n  updateUserById(\n    pkColumns: {id: $userId}\n    _set: {defaultAdminTimePercentage: $defaultAdminTimePercentage, updatedAt: \"now()\"}\n  ) {\n    id\n    firstName\n    lastName\n    computedName\n    defaultAdminTimePercentage\n    updatedAt\n  }\n}\n\nmutation AssignPayrollToConsultant($payrollId: uuid!, $primaryConsultantUserId: uuid, $backupConsultantUserId: uuid, $managerUserId: uuid) {\n  updatePayrollById(\n    pkColumns: {id: $payrollId}\n    _set: {primaryConsultantUserId: $primaryConsultantUserId, backupConsultantUserId: $backupConsultantUserId, managerUserId: $managerUserId, updatedAt: \"now()\"}\n  ) {\n    id\n    name\n    primaryConsultantUserId\n    backupConsultantUserId\n    managerUserId\n    primaryConsultant {\n      id\n      firstName\n      lastName\n      computedName\n    }\n    backupConsultant {\n      id\n      firstName\n      lastName\n      computedName\n    }\n    manager {\n      id\n      firstName\n      lastName\n      computedName\n    }\n    updatedAt\n  }\n}\n\nmutation BulkAssignPayrolls($payrollIds: [uuid!]!, $primaryConsultantUserId: uuid, $backupConsultantUserId: uuid, $managerUserId: uuid) {\n  bulkUpdatePayrolls(\n    where: {id: {_in: $payrollIds}}\n    _set: {primaryConsultantUserId: $primaryConsultantUserId, backupConsultantUserId: $backupConsultantUserId, managerUserId: $managerUserId, updatedAt: \"now()\"}\n  ) {\n    returning {\n      id\n      name\n      primaryConsultantUserId\n      backupConsultantUserId\n      managerUserId\n      primaryConsultant {\n        id\n        firstName\n        lastName\n        computedName\n      }\n      backupConsultant {\n        id\n        firstName\n        lastName\n        computedName\n      }\n      manager {\n        id\n        firstName\n        lastName\n        computedName\n      }\n      updatedAt\n    }\n    affectedRows\n  }\n}\n\nmutation UnassignPayrollConsultant($payrollId: uuid!, $removeRole: String!) {\n  updatePayrollById(\n    pkColumns: {id: $payrollId}\n    _set: {primaryConsultantUserId: null, backupConsultantUserId: null, managerUserId: null, updatedAt: \"now()\"}\n  ) {\n    id\n    name\n    primaryConsultantUserId\n    backupConsultantUserId\n    managerUserId\n    updatedAt\n  }\n}": types.CreateWorkScheduleDocument,
    "query GetUserWorkSchedules($userId: uuid!) {\n  workSchedule(where: {userId: {_eq: $userId}}) {\n    ...WorkScheduleBasic\n  }\n}\n\nquery GetWorkScheduleById($id: uuid!) {\n  workScheduleById(id: $id) {\n    ...WorkScheduleComplete\n  }\n}\n\nquery GetTeamWorkSchedules($managerUserId: uuid!) {\n  workSchedule(\n    where: {user: {managerId: {_eq: $managerUserId}}}\n    orderBy: {workDay: ASC}\n  ) {\n    ...WorkScheduleWithUser\n  }\n}\n\nquery GetWorkSchedulesByDateRange($startDate: String!, $endDate: String!) {\n  workSchedule(\n    where: {workDay: {_gte: $startDate, _lte: $endDate}}\n    orderBy: {workDay: ASC}\n  ) {\n    ...WorkScheduleWithUser\n  }\n}\n\nquery GetTeamCapacityDashboard($managerUserId: uuid!) {\n  workSchedule(\n    where: {user: {managerId: {_eq: $managerUserId}}}\n    orderBy: {user: {computedName: ASC}, workDay: ASC}\n  ) {\n    ...WorkScheduleDashboardCard\n  }\n}\n\nquery GetConsultantCapacity($userId: uuid!) {\n  workSchedule(where: {userId: {_eq: $userId}}) {\n    ...WorkScheduleCapacity\n  }\n}\n\nquery GetUsersBasic {\n  users(where: {isStaff: {_eq: true}}) {\n    id\n    firstName\n    lastName\n    computedName\n    email\n    role\n    managerId\n    isStaff\n    defaultAdminTimePercentage\n    createdAt\n    updatedAt\n  }\n}\n\nquery GetUserById($id: uuid!) {\n  userById(id: $id) {\n    id\n    firstName\n    lastName\n    computedName\n    email\n    role\n    managerId\n    isStaff\n    defaultAdminTimePercentage\n    createdAt\n    updatedAt\n    userWorkSchedules {\n      ...WorkScheduleBasic\n    }\n  }\n}\n\nquery GetTeamWorkloadOptimized($managerId: uuid!) {\n  users(\n    where: {managerId: {_eq: $managerId}, isStaff: {_eq: true}, isActive: {_eq: true}}\n    orderBy: {computedName: ASC}\n  ) {\n    id\n    firstName\n    lastName\n    computedName\n    email\n    role\n    defaultAdminTimePercentage\n    isActive\n    userWorkSchedules(orderBy: {workDay: ASC}) {\n      id\n      workDay\n      workHours\n      adminTimeHours\n      payrollCapacityHours\n      createdAt\n      updatedAt\n    }\n    primaryConsultantPayrolls(\n      where: {supersededDate: {_isNull: true}}\n      orderBy: {name: ASC}\n    ) {\n      id\n      name\n      processingTime\n      status\n      processingDaysBeforeEft\n      client {\n        id\n        name\n      }\n      payrollDates(orderBy: {originalEftDate: ASC}, limit: 5) {\n        id\n        originalEftDate\n        adjustedEftDate\n        processingDate\n      }\n    }\n    backupConsultantPayrolls(\n      where: {supersededDate: {_isNull: true}}\n      orderBy: {name: ASC}\n    ) {\n      id\n      name\n      processingTime\n      status\n      processingDaysBeforeEft\n      client {\n        id\n        name\n      }\n      payrollDates(orderBy: {originalEftDate: ASC}, limit: 5) {\n        id\n        originalEftDate\n        adjustedEftDate\n        processingDate\n      }\n    }\n  }\n  teamStats: usersAggregate(\n    where: {managerId: {_eq: $managerId}, isStaff: {_eq: true}, isActive: {_eq: true}}\n  ) {\n    aggregate {\n      count\n    }\n  }\n  managedPayrollsCount: payrollsAggregate(\n    where: {managerUserId: {_eq: $managerId}, supersededDate: {_isNull: true}}\n  ) {\n    aggregate {\n      count\n    }\n  }\n}\n\nquery GetTeamMembers($managerId: uuid!) {\n  users(where: {managerId: {_eq: $managerId}}) {\n    id\n    firstName\n    lastName\n    computedName\n    email\n    role\n    managerId\n    isStaff\n    defaultAdminTimePercentage\n    userWorkSchedules {\n      ...WorkScheduleCapacity\n    }\n  }\n}\n\nquery GetTeamMembersWithCapacity($managerId: uuid!) {\n  users(\n    where: {_and: [{managerId: {_eq: $managerId}}, {isStaff: {_eq: true}}]}\n    orderBy: {computedName: ASC}\n  ) {\n    id\n    firstName\n    lastName\n    computedName\n    email\n    role\n    managerId\n    isStaff\n    defaultAdminTimePercentage\n    userWorkSchedules {\n      ...WorkScheduleCapacity\n    }\n  }\n}\n\nquery GetAvailableConsultants {\n  users(where: {isStaff: {_eq: true}}, orderBy: {computedName: ASC}) {\n    id\n    firstName\n    lastName\n    computedName\n    email\n    role\n    defaultAdminTimePercentage\n    userWorkSchedules {\n      ...WorkScheduleCapacity\n    }\n    userSkills {\n      skillName\n      proficiencyLevel\n    }\n  }\n}\n\nquery GetConsultantWorkload($consultantId: uuid!) {\n  users(where: {id: {_eq: $consultantId}}) {\n    id\n    firstName\n    lastName\n    computedName\n    email\n    role\n    defaultAdminTimePercentage\n    userWorkSchedules {\n      ...WorkScheduleCapacity\n    }\n    primaryConsultantPayrolls(where: {supersededDate: {_isNull: true}}) {\n      id\n      name\n      processingTime\n      processingDaysBeforeEft\n      status\n      client {\n        id\n        name\n      }\n      payrollDates(orderBy: {adjustedEftDate: ASC}, limit: 1) {\n        id\n        adjustedEftDate\n        originalEftDate\n      }\n    }\n    backupConsultantPayrolls(where: {supersededDate: {_isNull: true}}) {\n      id\n      name\n      processingTime\n      processingDaysBeforeEft\n      status\n      client {\n        id\n        name\n      }\n      payrollDates(orderBy: {adjustedEftDate: ASC}, limit: 1) {\n        id\n        adjustedEftDate\n        originalEftDate\n      }\n    }\n  }\n}\n\nquery GetPayrollsForAssignment {\n  payrolls(\n    where: {supersededDate: {_isNull: true}, status: {_in: [\"draft\", \"Active\", \"pending_approval\"]}}\n    orderBy: {createdAt: DESC}\n  ) {\n    id\n    name\n    status\n    processingTime\n    processingDaysBeforeEft\n    employeeCount\n    client {\n      id\n      name\n    }\n    primaryConsultantUserId\n    backupConsultantUserId\n    managerUserId\n    primaryConsultant {\n      id\n      firstName\n      lastName\n      computedName\n    }\n    backupConsultant {\n      id\n      firstName\n      lastName\n      computedName\n    }\n    manager {\n      id\n      firstName\n      lastName\n      computedName\n    }\n    payrollDates(orderBy: {adjustedEftDate: ASC}, limit: 3) {\n      id\n      adjustedEftDate\n      originalEftDate\n    }\n  }\n}\n\nquery GetTeamWorkload($managerUserId: uuid!) {\n  users(\n    where: {_and: [{managerId: {_eq: $managerUserId}}, {isStaff: {_eq: true}}, {isActive: {_eq: true}}]}\n    orderBy: {computedName: ASC}\n  ) {\n    id\n    firstName\n    lastName\n    computedName\n    email\n    role\n    defaultAdminTimePercentage\n    userWorkSchedules {\n      ...WorkScheduleCapacity\n    }\n    primaryConsultantPayrolls(where: {supersededDate: {_isNull: true}}) {\n      id\n      name\n      processingTime\n      processingDaysBeforeEft\n      status\n      payrollDates(orderBy: {adjustedEftDate: ASC}, limit: 1) {\n        adjustedEftDate\n      }\n    }\n    backupConsultantPayrolls(where: {supersededDate: {_isNull: true}}) {\n      id\n      name\n      processingTime\n      processingDaysBeforeEft\n      status\n      payrollDates(orderBy: {adjustedEftDate: ASC}, limit: 1) {\n        adjustedEftDate\n      }\n    }\n  }\n}\n\nquery GetHolidaysByDateRange($startDate: date!, $endDate: date!, $countryCode: bpchar = \"AU\") {\n  holidays(\n    where: {date: {_gte: $startDate, _lte: $endDate}, countryCode: {_eq: $countryCode}}\n    orderBy: {date: ASC}\n  ) {\n    id\n    name\n    localName\n    date\n    countryCode\n    types\n    isGlobal\n    region\n  }\n}\n\nquery GetEftRelevantHolidays($startDate: date!, $endDate: date!, $countryCode: bpchar = \"AU\") {\n  holidays(\n    where: {date: {_gte: $startDate, _lte: $endDate}, countryCode: {_eq: $countryCode}, _or: [{region: {_contains: [\"NSW\"]}}, {region: {_contains: [\"National\"]}}, {region: {_contains: [\"Australia\"]}}]}\n    orderBy: {date: ASC}\n  ) {\n    id\n    name\n    localName\n    date\n    countryCode\n    types\n    isGlobal\n    region\n  }\n}\n\nquery GetHolidaysByRegions($startDate: date!, $endDate: date!, $regions: [String!]!, $countryCode: bpchar = \"AU\") {\n  holidays(\n    where: {date: {_gte: $startDate, _lte: $endDate}, countryCode: {_eq: $countryCode}, _or: [{region: {_contains: $regions}}]}\n    orderBy: {date: ASC}\n  ) {\n    id\n    name\n    localName\n    date\n    countryCode\n    types\n    isGlobal\n    region\n  }\n}\n\nquery GetAllStaffCapacityDashboard {\n  workSchedule(\n    where: {user: {isStaff: {_eq: true}, isActive: {_eq: true}}}\n    orderBy: {user: {computedName: ASC}, workDay: ASC}\n  ) {\n    id\n    userId\n    workDay\n    workHours\n    adminTimeHours\n    payrollCapacityHours\n    usesDefaultAdminTime\n    user {\n      id\n      firstName\n      lastName\n      computedName\n      email\n      role\n      defaultAdminTimePercentage\n      isStaff\n    }\n  }\n}\n\nquery GetAllStaffWorkload {\n  users(\n    where: {isStaff: {_eq: true}, isActive: {_eq: true}}\n    orderBy: {computedName: ASC}\n  ) {\n    id\n    firstName\n    lastName\n    computedName\n    email\n    role\n    defaultAdminTimePercentage\n    userWorkSchedules {\n      id\n      userId\n      workDay\n      workHours\n      adminTimeHours\n      payrollCapacityHours\n      usesDefaultAdminTime\n    }\n    userSkills {\n      skillName\n      proficiencyLevel\n    }\n    primaryConsultantPayrolls(where: {supersededDate: {_isNull: true}}) {\n      id\n      name\n      processingTime\n      processingDaysBeforeEft\n      status\n      payrollDates(orderBy: {adjustedEftDate: ASC}, limit: 1) {\n        adjustedEftDate\n      }\n      payrollRequiredSkills {\n        skillName\n        requiredLevel\n      }\n    }\n    backupConsultantPayrolls(where: {supersededDate: {_isNull: true}}) {\n      id\n      name\n      processingTime\n      processingDaysBeforeEft\n      status\n      payrollDates(orderBy: {adjustedEftDate: ASC}, limit: 1) {\n        adjustedEftDate\n      }\n      payrollRequiredSkills {\n        skillName\n        requiredLevel\n      }\n    }\n  }\n}\n\nquery GetTeamCapacityOverview($managerUserId: uuid) {\n  teamCapacity: workScheduleAggregate(\n    where: {user: {_and: [{isStaff: {_eq: true}}, {isActive: {_eq: true}}, {managerId: {_eq: $managerUserId}}]}}\n  ) {\n    aggregate {\n      sum {\n        workHours\n        adminTimeHours\n        payrollCapacityHours\n      }\n      count\n    }\n  }\n  teamMemberCount: usersAggregate(\n    where: {_and: [{isStaff: {_eq: true}}, {isActive: {_eq: true}}, {managerId: {_eq: $managerUserId}}]}\n  ) {\n    aggregate {\n      count\n    }\n  }\n  activePayrollCount: payrollsAggregate(\n    where: {_and: [{supersededDate: {_isNull: true}}, {status: {_in: [\"Active\", \"pending_approval\"]}}, {_or: [{primaryConsultant: {managerId: {_eq: $managerUserId}}}, {backupConsultant: {managerId: {_eq: $managerUserId}}}]}]}\n  ) {\n    aggregate {\n      count\n      sum {\n        processingTime\n      }\n    }\n  }\n}": types.GetUserWorkSchedulesDocument,
    "fragment UserSkillBasic on userSkill {\n  skillName\n  proficiencyLevel\n  userId\n}\n\nfragment UserSkillComplete on userSkill {\n  skillName\n  proficiencyLevel\n  userId\n  skilledUser {\n    id\n    firstName\n    lastName\n    computedName\n    email\n    role\n  }\n}\n\nfragment PayrollRequiredSkillBasic on payrollRequiredSkill {\n  skillName\n  requiredLevel\n  payrollId\n}\n\nfragment PayrollRequiredSkillComplete on payrollRequiredSkill {\n  skillName\n  requiredLevel\n  payrollId\n  requiringPayroll {\n    id\n    name\n    status\n  }\n}\n\nquery GetUserSkills($userId: uuid!) {\n  userSkill(where: {userId: {_eq: $userId}}) {\n    ...UserSkillBasic\n  }\n}\n\nquery GetUserSkillByCompositeKey($userId: uuid!, $skillName: String!) {\n  userSkill(\n    where: {_and: [{userId: {_eq: $userId}}, {skillName: {_eq: $skillName}}]}\n  ) {\n    ...UserSkillBasic\n  }\n}\n\nquery GetAllUserSkills {\n  userSkill {\n    ...UserSkillComplete\n  }\n}\n\nquery GetUsersWithSkills {\n  users(where: {isStaff: {_eq: true}}) {\n    id\n    firstName\n    lastName\n    computedName\n    email\n    role\n    userSkills {\n      ...UserSkillBasic\n    }\n  }\n}\n\nquery GetPayrollRequiredSkills($payrollId: uuid!) {\n  payrollRequiredSkill(where: {payrollId: {_eq: $payrollId}}) {\n    ...PayrollRequiredSkillBasic\n  }\n}\n\nquery GetPayrollRequiredSkillByCompositeKey($payrollId: uuid!, $skillName: String!) {\n  payrollRequiredSkill(\n    where: {_and: [{payrollId: {_eq: $payrollId}}, {skillName: {_eq: $skillName}}]}\n  ) {\n    ...PayrollRequiredSkillBasic\n  }\n}\n\nquery GetPayrollsWithRequiredSkills {\n  payrolls(where: {supersededDate: {_isNull: true}}) {\n    id\n    name\n    status\n    processingTime\n    payrollRequiredSkills {\n      ...PayrollRequiredSkillBasic\n    }\n  }\n}\n\nquery GetConsultantsWithSkills($requiredSkills: [String!]!) {\n  users(\n    where: {_and: [{isStaff: {_eq: true}}, {isActive: {_eq: true}}, {role: {_in: [\"consultant\", \"manager\", \"org_admin\"]}}, {userSkills: {skillName: {_in: $requiredSkills}}}]}\n  ) {\n    id\n    firstName\n    lastName\n    computedName\n    email\n    role\n    defaultAdminTimePercentage\n    userSkills {\n      ...UserSkillBasic\n    }\n    userWorkSchedules {\n      id\n      workDay\n      workHours\n      adminTimeHours\n      payrollCapacityHours\n      usesDefaultAdminTime\n    }\n  }\n}\n\nmutation CreateUserSkill($skillName: String!, $proficiencyLevel: String!, $userId: uuid!) {\n  insertUserSkill(\n    object: {skillName: $skillName, proficiencyLevel: $proficiencyLevel, userId: $userId}\n  ) {\n    ...UserSkillBasic\n  }\n}\n\nmutation BulkCreateUserSkills($userSkills: [userSkillInsertInput!]!) {\n  bulkInsertUserSkill(objects: $userSkills) {\n    returning {\n      ...UserSkillBasic\n    }\n    affectedRows\n  }\n}\n\nmutation UpdateUserSkill($userId: uuid!, $skillName: String!, $proficiencyLevel: String!) {\n  bulkUpdateUserSkill(\n    where: {_and: [{userId: {_eq: $userId}}, {skillName: {_eq: $skillName}}]}\n    _set: {proficiencyLevel: $proficiencyLevel}\n  ) {\n    returning {\n      ...UserSkillBasic\n    }\n    affectedRows\n  }\n}\n\nmutation DeleteUserSkill($userId: uuid!, $skillName: String!) {\n  bulkDeleteUserSkill(\n    where: {_and: [{userId: {_eq: $userId}}, {skillName: {_eq: $skillName}}]}\n  ) {\n    affectedRows\n    returning {\n      ...UserSkillBasic\n    }\n  }\n}\n\nmutation CreatePayrollRequiredSkill($payrollId: uuid!, $skillName: String!, $requiredLevel: String!) {\n  insertPayrollRequiredSkill(\n    object: {payrollId: $payrollId, skillName: $skillName, requiredLevel: $requiredLevel}\n  ) {\n    ...PayrollRequiredSkillBasic\n  }\n}\n\nmutation BulkCreatePayrollRequiredSkills($skills: [payrollRequiredSkillInsertInput!]!) {\n  bulkInsertPayrollRequiredSkill(objects: $skills) {\n    returning {\n      ...PayrollRequiredSkillBasic\n    }\n    affectedRows\n  }\n}\n\nmutation DeletePayrollRequiredSkill($payrollId: uuid!, $skillName: String!) {\n  bulkDeletePayrollRequiredSkill(\n    where: {_and: [{payrollId: {_eq: $payrollId}}, {skillName: {_eq: $skillName}}]}\n  ) {\n    affectedRows\n    returning {\n      ...PayrollRequiredSkillBasic\n    }\n  }\n}\n\nmutation BulkDeleteUserSkills($where: userSkillBoolExp!) {\n  bulkDeleteUserSkill(where: $where) {\n    affectedRows\n  }\n}\n\nmutation BulkDeletePayrollRequiredSkills($where: payrollRequiredSkillBoolExp!) {\n  bulkDeletePayrollRequiredSkill(where: $where) {\n    affectedRows\n  }\n}": types.UserSkillBasicFragmentDoc,
    "subscription WorkScheduleUpdates {\n  workSchedule(orderBy: {updatedAt: DESC}) {\n    ...WorkScheduleListItem\n  }\n}\n\nsubscription WorkScheduleUpdate($id: uuid!) {\n  workSchedule(where: {id: {_eq: $id}}) {\n    ...WorkScheduleComplete\n  }\n}\n\nsubscription UserWorkScheduleUpdates($userId: uuid!) {\n  workSchedule(where: {userId: {_eq: $userId}}) {\n    ...MyWorkSchedule\n  }\n}\n\nsubscription TeamWorkScheduleUpdates($managerUserId: uuid!) {\n  workSchedule(\n    where: {user: {managerId: {_eq: $managerUserId}}}\n    orderBy: {updatedAt: DESC}\n  ) {\n    ...WorkScheduleDashboardCard\n  }\n}\n\nsubscription WorkScheduleCapacityUpdates($userId: uuid!) {\n  workSchedule(where: {userId: {_eq: $userId}}) {\n    ...WorkScheduleCapacity\n  }\n}": types.WorkScheduleUpdatesDocument,
    "query GetConsultantPayrollWorkload($userId: uuid!, $startDate: date!, $endDate: date!) {\n  userById(id: $userId) {\n    id\n    firstName\n    lastName\n    computedName\n    email\n    role\n    defaultAdminTimePercentage\n  }\n  workSchedule(where: {userId: {_eq: $userId}}, orderBy: {workDay: ASC}) {\n    id\n    workDay\n    workHours\n    adminTimeHours\n    payrollCapacityHours\n    usesDefaultAdminTime\n  }\n  primaryPayrolls: payrolls(\n    where: {primaryConsultantUserId: {_eq: $userId}, status: {_in: [\"Active\", \"Implementation\", \"pending_approval\", \"approved\"]}}\n  ) {\n    id\n    name\n    processingTime\n    processingDaysBeforeEft\n    status\n    client {\n      id\n      name\n    }\n    payrollDates(\n      where: {originalEftDate: {_gte: $startDate, _lte: $endDate}}\n      orderBy: {originalEftDate: ASC}\n    ) {\n      id\n      originalEftDate\n      processingDate\n    }\n  }\n  backupPayrolls: payrolls(\n    where: {backupConsultantUserId: {_eq: $userId}, status: {_in: [\"Active\", \"Implementation\", \"pending_approval\", \"approved\"]}}\n  ) {\n    id\n    name\n    processingTime\n    processingDaysBeforeEft\n    status\n    client {\n      id\n      name\n    }\n    payrollDates(\n      where: {originalEftDate: {_gte: $startDate, _lte: $endDate}}\n      orderBy: {originalEftDate: ASC}\n    ) {\n      id\n      originalEftDate\n      processingDate\n    }\n  }\n}\n\nquery GetTeamPayrollWorkload($managerId: uuid!, $startDate: date!, $endDate: date!) {\n  teamMembers: users(\n    where: {managerId: {_eq: $managerId}, isStaff: {_eq: true}, isActive: {_eq: true}}\n    orderBy: {computedName: ASC}\n  ) {\n    id\n    firstName\n    lastName\n    computedName\n    email\n    role\n    defaultAdminTimePercentage\n    userWorkSchedules(orderBy: {workDay: ASC}) {\n      id\n      workDay\n      workHours\n      adminTimeHours\n      payrollCapacityHours\n      usesDefaultAdminTime\n    }\n    primaryConsultantPayrolls(\n      where: {status: {_in: [\"Active\", \"pending_approval\", \"Implementation\"]}}\n    ) {\n      id\n      name\n      processingTime\n      processingDaysBeforeEft\n      status\n      client {\n        id\n        name\n      }\n      payrollDates(\n        where: {originalEftDate: {_gte: $startDate, _lte: $endDate}}\n        orderBy: {originalEftDate: ASC}\n      ) {\n        id\n        originalEftDate\n        processingDate\n      }\n    }\n    backupConsultantPayrolls(\n      where: {status: {_in: [\"Active\", \"pending_approval\", \"Implementation\"]}}\n    ) {\n      id\n      name\n      processingTime\n      processingDaysBeforeEft\n      status\n      client {\n        id\n        name\n      }\n      payrollDates(\n        where: {originalEftDate: {_gte: $startDate, _lte: $endDate}}\n        orderBy: {originalEftDate: ASC}\n      ) {\n        id\n        originalEftDate\n        processingDate\n      }\n    }\n  }\n}\n\nquery GetPayrollWorkloadStats($userId: uuid!, $startDate: date!, $endDate: date!) {\n  workScheduleStats: workScheduleAggregate(where: {userId: {_eq: $userId}}) {\n    aggregate {\n      sum {\n        workHours\n        adminTimeHours\n        payrollCapacityHours\n      }\n      avg {\n        workHours\n        payrollCapacityHours\n      }\n      count\n    }\n  }\n  primaryPayrollCount: payrollsAggregate(\n    where: {primaryConsultantUserId: {_eq: $userId}, status: {_in: [\"Active\", \"Implementation\", \"pending_approval\", \"approved\"]}}\n  ) {\n    aggregate {\n      count\n      sum {\n        processingTime\n      }\n    }\n  }\n  backupPayrollCount: payrollsAggregate(\n    where: {backupConsultantUserId: {_eq: $userId}, status: {_in: [\"Active\", \"Implementation\", \"pending_approval\", \"approved\"]}}\n  ) {\n    aggregate {\n      count\n      sum {\n        processingTime\n      }\n    }\n  }\n  upcomingPayrollDates: payrollDatesAggregate(\n    where: {relatedPayroll: {_or: [{primaryConsultantUserId: {_eq: $userId}}, {backupConsultantUserId: {_eq: $userId}}]}, originalEftDate: {_gte: $startDate, _lte: $endDate}}\n  ) {\n    aggregate {\n      count\n    }\n  }\n}\n\nquery GetPayrollAssignmentDetails($payrollId: uuid!, $startDate: date!, $endDate: date!) {\n  payrollById(id: $payrollId) {\n    id\n    name\n    processingTime\n    processingDaysBeforeEft\n    status\n    client {\n      id\n      name\n    }\n    primaryConsultant {\n      id\n      firstName\n      lastName\n      computedName\n      email\n    }\n    backupConsultant {\n      id\n      firstName\n      lastName\n      computedName\n      email\n    }\n    payrollDates(\n      where: {originalEftDate: {_gte: $startDate, _lte: $endDate}}\n      orderBy: {originalEftDate: ASC}\n    ) {\n      id\n      originalEftDate\n      processingDate\n    }\n  }\n}": types.GetConsultantPayrollWorkloadDocument,
    "fragment UserMinimal on users {\n  id\n  firstName\n  lastName\n  computedName\n  email\n}\n\nfragment UserCoreShared on users {\n  ...UserMinimal\n  role\n  isActive\n}\n\nfragment UserBasic on users {\n  ...UserCoreShared\n  clerkUserId\n  createdAt\n  updatedAt\n}\n\nfragment UserBase on users {\n  ...UserBasic\n}\n\nfragment UserWithRole on users {\n  ...UserBasic\n  username\n  isStaff\n}\n\nfragment UserProfile on users {\n  ...UserWithRole\n  clerkUserId\n  image\n  managerId\n  deactivatedAt\n  deactivatedBy\n  managerUser {\n    ...UserMinimal\n  }\n}\n\nfragment UserSearchResult on users {\n  ...UserCoreShared\n  username\n  isStaff\n}\n\nfragment ClientMinimal on clients {\n  id\n  name\n}\n\nfragment ClientBase on clients {\n  id\n  name\n  active\n  contactEmail\n  contactPerson\n  contactPhone\n  createdAt\n}\n\nfragment ClientWithStats on clients {\n  ...ClientBase\n  currentEmployeeCount: payrollsAggregate(\n    where: {supersededDate: {_isNull: true}}\n  ) {\n    aggregate {\n      sum {\n        employeeCount\n      }\n    }\n  }\n  activePayrollCount: payrollsAggregate(\n    where: {supersededDate: {_isNull: true}, status: {_eq: \"Active\"}}\n  ) {\n    aggregate {\n      count\n    }\n  }\n}\n\nfragment ClientListBase on clients {\n  ...ClientBase\n  payrollCount: payrollsAggregate(where: {supersededDate: {_isNull: true}}) {\n    aggregate {\n      count\n    }\n  }\n}\n\nfragment PayrollMinimal on payrolls {\n  id\n  name\n  employeeCount\n  status\n}\n\nfragment PayrollBase on payrolls {\n  id\n  name\n  employeeCount\n  status\n  payrollSystem\n  processingTime\n  processingDaysBeforeEft\n  versionNumber\n  supersededDate\n  createdAt\n  updatedAt\n}\n\nfragment PayrollWithClient on payrolls {\n  ...PayrollBase\n  clientId\n  client {\n    id\n    name\n    active\n  }\n}\n\nfragment PayrollListItem on payrolls {\n  ...PayrollWithClient\n  primaryConsultantUserId\n  backupConsultantUserId\n  managerUserId\n  createdByUserId\n  cycleId\n  dateTypeId\n  dateValue\n  payrollCycle {\n    id\n    name\n    description\n  }\n  payrollDateType {\n    id\n    name\n    description\n  }\n  primaryConsultant {\n    ...UserMinimal\n  }\n  backupConsultant {\n    ...UserMinimal\n  }\n  manager {\n    ...UserMinimal\n  }\n}\n\nfragment PayrollWithDates on payrolls {\n  ...PayrollBase\n  goLiveDate\n  payrollDates(orderBy: {originalEftDate: ASC}) {\n    id\n    originalEftDate\n    adjustedEftDate\n    notes\n  }\n}\n\nfragment PayrollFullDetail on payrolls {\n  ...PayrollWithDates\n  ...PayrollWithClient\n  dateTypeId\n  cycleId\n  dateValue\n  versionReason\n  supersededDate\n  parentPayrollId\n  parentPayroll {\n    id\n    versionNumber\n  }\n  childPayrolls(orderBy: {versionNumber: DESC}) {\n    id\n    versionNumber\n    versionReason\n    createdAt\n  }\n  primaryConsultant {\n    ...UserMinimal\n  }\n  backupConsultant {\n    ...UserMinimal\n  }\n  manager {\n    ...UserMinimal\n  }\n}\n\nfragment NoteWithAuthor on notes {\n  id\n  content\n  isImportant\n  createdAt\n  entityId\n  entityType\n  authorUser {\n    ...UserMinimal\n  }\n}\n\nfragment PermissionBase on permissions {\n  id\n  resourceId\n  description\n  legacyPermissionName\n  action\n}\n\nfragment RoleWithPermissions on roles {\n  id\n  name\n  displayName\n  description\n  isSystemRole\n  priority\n  assignedPermissions {\n    grantedPermission {\n      ...PermissionBase\n    }\n  }\n}\n\nfragment AuditLogEntry on auditLogs {\n  id\n  userId\n  userEmail\n  userRole\n  action\n  resourceType\n  resourceId\n  eventTime\n  success\n  errorMessage\n  ipAddress\n  userAgent\n  requestId\n  sessionId\n  metadata\n  oldValues\n  newValues\n  createdAt\n}\n\nfragment AuthEvent on authEvents {\n  id\n  userId\n  userEmail\n  eventType\n  eventTime\n  success\n  failureReason\n  ipAddress\n  userAgent\n  metadata\n}\n\nfragment DataAccessLog on dataAccessLogs {\n  id\n  userId\n  resourceType\n  resourceId\n  accessType\n  accessedAt\n  dataClassification\n  fieldsAccessed\n  rowCount\n  ipAddress\n  metadata\n}\n\nfragment PermissionChange on permissionChanges {\n  id\n  changedAt\n  changedByUserId\n  targetUserId\n  targetRoleId\n  changeType\n  permissionType\n  oldPermissions\n  newPermissions\n  reason\n  approvedByUserId\n}\n\nfragment PayrollDateInfo on payrollDates {\n  id\n  originalEftDate\n  adjustedEftDate\n  notes\n  createdAt\n}\n\nfragment PermissionOverrideInfo on permissionOverrides {\n  id\n  userId\n  role\n  resource\n  operation\n  granted\n  reason\n  conditions\n  expiresAt\n  createdBy\n  createdAt\n}": types.UserMinimalFragmentDoc,
    "mutation LogAuditEvent($input: auditLogsInsertInput!) {\n  insertAuditLogsOne: insertAuditLog(object: $input) {\n    id\n    eventTime\n  }\n}\n\nmutation InsertFile($input: filesInsertInput!) {\n  insertFile(object: $input) {\n    id\n    filename\n    bucket\n    objectKey\n    size\n    mimetype\n    url\n    clientId\n    payrollId\n    uploadedBy\n    category\n    isPublic\n    metadata\n    fileType\n    createdAt\n  }\n}\n\nmutation UpdateFileMetadata($id: uuid!, $updates: filesSetInput!) {\n  updateFileById(pkColumns: {id: $id}, _set: $updates) {\n    id\n    filename\n    bucket\n    objectKey\n    size\n    mimetype\n    url\n    clientId\n    payrollId\n    uploadedBy\n    category\n    isPublic\n    metadata\n    fileType\n    createdAt\n  }\n}\n\nmutation DeleteFile($id: uuid!) {\n  deleteFileById(id: $id) {\n    id\n    filename\n    objectKey\n  }\n}\n\nmutation RefreshData {\n  __typename\n}": types.LogAuditEventDocument,
    "query GetDashboardMetrics($userId: uuid!) {\n  clientsAggregate(where: {active: {_eq: true}}) {\n    aggregate {\n      count\n    }\n  }\n  activePayrollsAggregate: payrollsAggregate(\n    where: {supersededDate: {_isNull: true}, status: {_nin: [\"Completed\", \"Failed\"]}}\n  ) {\n    aggregate {\n      count\n    }\n  }\n  totalEmployeesAggregate: payrollsAggregate(\n    where: {supersededDate: {_isNull: true}}\n  ) {\n    aggregate {\n      sum {\n        employeeCount\n      }\n    }\n  }\n  upcomingPayrolls: payrolls(\n    where: {supersededDate: {_isNull: true}, status: {_nin: [\"Completed\", \"Failed\", \"Cancelled\"]}}\n    orderBy: {updatedAt: DESC}\n    limit: 5\n  ) {\n    ...PayrollMinimal\n    client {\n      ...ClientMinimal\n    }\n  }\n}\n\nquery GetDashboardStatsOptimized($limit: Int = 10) {\n  clientsAggregate {\n    aggregate {\n      count\n    }\n  }\n  totalPayrolls: payrollsAggregate(where: {supersededDate: {_isNull: true}}) {\n    aggregate {\n      count\n    }\n  }\n  activePayrolls: payrollsAggregate(\n    where: {supersededDate: {_isNull: true}, status: {_eq: \"Active\"}}\n  ) {\n    aggregate {\n      count\n    }\n  }\n  upcomingPayrolls: payrolls(\n    where: {supersededDate: {_isNull: true}, status: {_eq: \"Active\"}, payrollDates: {adjustedEftDate: {_gte: \"now()\"}}}\n    orderBy: {updatedAt: DESC}\n    limit: $limit\n  ) {\n    id\n    name\n    status\n    client {\n      id\n      name\n    }\n    nextEftDate: payrollDates(\n      where: {adjustedEftDate: {_gte: \"now()\"}}\n      orderBy: {adjustedEftDate: ASC}\n      limit: 1\n    ) {\n      originalEftDate\n      adjustedEftDate\n      processingDate\n    }\n  }\n}\n\nquery GetClientsDashboardStats {\n  activeClientsCount: clientsAggregate(where: {active: {_eq: true}}) {\n    aggregate {\n      count\n    }\n  }\n  totalPayrollsCount: payrollsAggregate(where: {supersededDate: {_isNull: true}}) {\n    aggregate {\n      count\n    }\n  }\n  totalEmployeesSum: payrollsAggregate(where: {supersededDate: {_isNull: true}}) {\n    aggregate {\n      sum {\n        employeeCount\n      }\n    }\n  }\n  clientsNeedingAttention: clients(\n    where: {active: {_eq: true}, _not: {payrolls: {supersededDate: {_isNull: true}}}}\n  ) {\n    ...ClientMinimal\n  }\n}\n\nquery GetCurrentUser($userId: uuid!) {\n  user: userById(id: $userId) {\n    ...UserProfile\n  }\n}\n\nquery GetUsersForDropdown($role: user_role) {\n  users(\n    where: {isActive: {_eq: true}, role: {_eq: $role}}\n    orderBy: {computedName: ASC}\n  ) {\n    ...UserMinimal\n  }\n}\n\nquery GetSystemHealth {\n  databaseHealth: users(limit: 1) {\n    id\n  }\n  recentActivity: auditLogsAggregate(\n    where: {eventTime: {_gte: \"now() - interval '1 hour'\"}}\n  ) {\n    aggregate {\n      count\n    }\n  }\n}\n\nquery GlobalSearch($searchTerm: String!) {\n  clients(\n    where: {_or: [{name: {_ilike: $searchTerm}}, {contactEmail: {_ilike: $searchTerm}}]}\n    limit: 5\n  ) {\n    ...ClientMinimal\n  }\n  users(\n    where: {_or: [{computedName: {_ilike: $searchTerm}}, {firstName: {_ilike: $searchTerm}}, {lastName: {_ilike: $searchTerm}}, {email: {_ilike: $searchTerm}}]}\n    limit: 5\n  ) {\n    ...UserMinimal\n  }\n  payrolls(\n    where: {client: {name: {_ilike: $searchTerm}}, supersededDate: {_isNull: true}}\n    limit: 5\n  ) {\n    ...PayrollMinimal\n    client {\n      ...ClientMinimal\n    }\n  }\n}\n\nquery GetFileById($id: uuid!) {\n  fileById(id: $id) {\n    id\n    filename\n    bucket\n    objectKey\n    size\n    mimetype\n    url\n    clientId\n    payrollId\n    uploadedBy\n    category\n    isPublic\n    metadata\n    fileType\n    createdAt\n    client {\n      name\n    }\n    payroll {\n      name\n    }\n    uploader {\n      firstName\n      lastName\n      computedName\n    }\n  }\n}\n\nquery ListFiles($where: filesBoolExp, $limit: Int, $offset: Int, $orderBy: [filesOrderBy!]) {\n  files(where: $where, limit: $limit, offset: $offset, orderBy: $orderBy) {\n    id\n    filename\n    bucket\n    objectKey\n    size\n    mimetype\n    url\n    clientId\n    payrollId\n    uploadedBy\n    category\n    isPublic\n    metadata\n    fileType\n    createdAt\n    client {\n      name\n    }\n    payroll {\n      name\n    }\n    uploader {\n      firstName\n      lastName\n      computedName\n    }\n  }\n  filesAggregate(where: $where) {\n    aggregate {\n      count\n    }\n  }\n}": types.GetDashboardMetricsDocument,
    "subscription RecentActivity($resourceTypes: [String!]) {\n  auditLogs(\n    where: {resourceType: {_in: $resourceTypes}, eventTime: {_gte: \"now() - interval '5 minutes'\"}}\n    orderBy: {eventTime: DESC}\n    limit: 20\n  ) {\n    ...AuditLogEntry\n  }\n}\n\nsubscription AuthenticationEvents($userId: uuid) {\n  authEvents(\n    where: {userId: {_eq: $userId}, eventTime: {_gte: \"now() - interval '10 minutes'\"}}\n    orderBy: {eventTime: DESC}\n  ) {\n    ...AuthEvent\n  }\n}\n\nsubscription SensitiveDataAccess($resourceTypes: [String!]!) {\n  dataAccessLogs(\n    where: {resourceType: {_in: $resourceTypes}, accessedAt: {_gte: \"now() - interval '10 minutes'\"}}\n    orderBy: {accessedAt: DESC}\n  ) {\n    ...DataAccessLog\n  }\n}\n\nsubscription PermissionChangeStream {\n  permissionChanges(orderBy: {changedAt: DESC}, limit: 10) {\n    ...PermissionChange\n  }\n}": types.RecentActivityDocument,
};

/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 *
 *
 * @example
 * ```ts
 * const query = gql(`query GetUser($id: ID!) { user(id: $id) { name } }`);
 * ```
 *
 * The query argument is unknown!
 * Please regenerate the types.
 */
export function gql(source: string): unknown;

/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "fragment WorkScheduleCore on workSchedule {\n  id\n  userId\n  workDay\n  workHours\n  adminTimeHours\n  payrollCapacityHours\n  usesDefaultAdminTime\n  createdAt\n  updatedAt\n}\n\nfragment WorkScheduleBasic on workSchedule {\n  ...WorkScheduleCore\n}\n\nfragment WorkScheduleMinimal on workSchedule {\n  id\n  userId\n  workDay\n  workHours\n  adminTimeHours\n  payrollCapacityHours\n}\n\nfragment WorkScheduleWithUser on workSchedule {\n  ...WorkScheduleBasic\n  user {\n    id\n    firstName\n    lastName\n    computedName\n    email\n    role\n    defaultAdminTimePercentage\n  }\n}\n\nfragment WorkScheduleComplete on workSchedule {\n  ...WorkScheduleBasic\n  user {\n    id\n    firstName\n    lastName\n    computedName\n    email\n    role\n    managerId\n    defaultAdminTimePercentage\n    isStaff\n  }\n}\n\nfragment TeamWorkSchedule on workSchedule {\n  ...WorkScheduleBasic\n  user {\n    id\n    firstName\n    lastName\n    computedName\n    email\n    role\n    managerId\n    defaultAdminTimePercentage\n    isStaff\n  }\n}\n\nfragment WorkScheduleCapacity on workSchedule {\n  id\n  userId\n  workDay\n  workHours\n  adminTimeHours\n  payrollCapacityHours\n  usesDefaultAdminTime\n  user {\n    id\n    firstName\n    lastName\n    computedName\n    defaultAdminTimePercentage\n  }\n}\n\nfragment WorkScheduleListItem on workSchedule {\n  ...WorkScheduleCapacity\n}\n\nfragment MyWorkSchedule on workSchedule {\n  ...WorkScheduleComplete\n}\n\nfragment WorkScheduleCalendarItem on workSchedule {\n  id\n  workDay\n  workHours\n  adminTimeHours\n  payrollCapacityHours\n  user {\n    id\n    firstName\n    lastName\n    computedName\n  }\n}\n\nfragment WorkScheduleMonthlyView on workSchedule {\n  ...WorkScheduleCalendarItem\n}\n\nfragment WorkScheduleConflictCheck on workSchedule {\n  id\n  userId\n  workDay\n  workHours\n  payrollCapacityHours\n}\n\nfragment WorkScheduleDashboardCard on workSchedule {\n  ...WorkScheduleCapacity\n  user {\n    id\n    firstName\n    lastName\n    computedName\n    email\n    role\n    defaultAdminTimePercentage\n    isStaff\n  }\n}\n\nfragment WorkScheduleWeeklyView on workSchedule {\n  ...WorkScheduleDashboardCard\n}\n\nfragment WorkScheduleChangeLog on workSchedule {\n  id\n  userId\n  workDay\n  workHours\n  adminTimeHours\n  payrollCapacityHours\n  usesDefaultAdminTime\n  createdAt\n  updatedAt\n}\n\nfragment WorkScheduleForAudit on workSchedule {\n  ...WorkScheduleChangeLog\n  user {\n    id\n    firstName\n    lastName\n    computedName\n    role\n  }\n}\n\nfragment WorkSchedulePattern on workSchedule {\n  workDay\n  workHours\n  adminTimeHours\n  payrollCapacityHours\n  usesDefaultAdminTime\n}"): (typeof documents)["fragment WorkScheduleCore on workSchedule {\n  id\n  userId\n  workDay\n  workHours\n  adminTimeHours\n  payrollCapacityHours\n  usesDefaultAdminTime\n  createdAt\n  updatedAt\n}\n\nfragment WorkScheduleBasic on workSchedule {\n  ...WorkScheduleCore\n}\n\nfragment WorkScheduleMinimal on workSchedule {\n  id\n  userId\n  workDay\n  workHours\n  adminTimeHours\n  payrollCapacityHours\n}\n\nfragment WorkScheduleWithUser on workSchedule {\n  ...WorkScheduleBasic\n  user {\n    id\n    firstName\n    lastName\n    computedName\n    email\n    role\n    defaultAdminTimePercentage\n  }\n}\n\nfragment WorkScheduleComplete on workSchedule {\n  ...WorkScheduleBasic\n  user {\n    id\n    firstName\n    lastName\n    computedName\n    email\n    role\n    managerId\n    defaultAdminTimePercentage\n    isStaff\n  }\n}\n\nfragment TeamWorkSchedule on workSchedule {\n  ...WorkScheduleBasic\n  user {\n    id\n    firstName\n    lastName\n    computedName\n    email\n    role\n    managerId\n    defaultAdminTimePercentage\n    isStaff\n  }\n}\n\nfragment WorkScheduleCapacity on workSchedule {\n  id\n  userId\n  workDay\n  workHours\n  adminTimeHours\n  payrollCapacityHours\n  usesDefaultAdminTime\n  user {\n    id\n    firstName\n    lastName\n    computedName\n    defaultAdminTimePercentage\n  }\n}\n\nfragment WorkScheduleListItem on workSchedule {\n  ...WorkScheduleCapacity\n}\n\nfragment MyWorkSchedule on workSchedule {\n  ...WorkScheduleComplete\n}\n\nfragment WorkScheduleCalendarItem on workSchedule {\n  id\n  workDay\n  workHours\n  adminTimeHours\n  payrollCapacityHours\n  user {\n    id\n    firstName\n    lastName\n    computedName\n  }\n}\n\nfragment WorkScheduleMonthlyView on workSchedule {\n  ...WorkScheduleCalendarItem\n}\n\nfragment WorkScheduleConflictCheck on workSchedule {\n  id\n  userId\n  workDay\n  workHours\n  payrollCapacityHours\n}\n\nfragment WorkScheduleDashboardCard on workSchedule {\n  ...WorkScheduleCapacity\n  user {\n    id\n    firstName\n    lastName\n    computedName\n    email\n    role\n    defaultAdminTimePercentage\n    isStaff\n  }\n}\n\nfragment WorkScheduleWeeklyView on workSchedule {\n  ...WorkScheduleDashboardCard\n}\n\nfragment WorkScheduleChangeLog on workSchedule {\n  id\n  userId\n  workDay\n  workHours\n  adminTimeHours\n  payrollCapacityHours\n  usesDefaultAdminTime\n  createdAt\n  updatedAt\n}\n\nfragment WorkScheduleForAudit on workSchedule {\n  ...WorkScheduleChangeLog\n  user {\n    id\n    firstName\n    lastName\n    computedName\n    role\n  }\n}\n\nfragment WorkSchedulePattern on workSchedule {\n  workDay\n  workHours\n  adminTimeHours\n  payrollCapacityHours\n  usesDefaultAdminTime\n}"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "mutation CreateWorkSchedule($object: workScheduleInsertInput!) {\n  insertWorkSchedule(object: $object) {\n    ...WorkScheduleComplete\n  }\n}\n\nmutation UpdateWorkSchedule($id: uuid!, $set: workScheduleSetInput!) {\n  updateWorkScheduleById(pkColumns: {id: $id}, _set: $set) {\n    ...WorkScheduleComplete\n  }\n}\n\nmutation DeleteWorkSchedule($id: uuid!) {\n  deleteWorkScheduleById(id: $id) {\n    id\n    userId\n    workDay\n    workHours\n    adminTimeHours\n    payrollCapacityHours\n  }\n}\n\nmutation UpdateWorkScheduleHours($userId: uuid!, $workDay: String!, $workHours: numeric!, $adminTimeHours: numeric, $payrollCapacityHours: numeric, $usesDefaultAdminTime: Boolean) {\n  bulkUpdateWorkSchedule(\n    where: {userId: {_eq: $userId}, workDay: {_eq: $workDay}}\n    _set: {workHours: $workHours, adminTimeHours: $adminTimeHours, payrollCapacityHours: $payrollCapacityHours, usesDefaultAdminTime: $usesDefaultAdminTime, updatedAt: \"now()\"}\n  ) {\n    returning {\n      ...WorkScheduleComplete\n    }\n    affectedRows\n  }\n}\n\nmutation BulkCreateWorkSchedule($schedules: [workScheduleInsertInput!]!) {\n  bulkInsertWorkSchedule(objects: $schedules) {\n    returning {\n      ...WorkScheduleComplete\n    }\n    affectedRows\n  }\n}\n\nmutation BulkUpdateWorkScheduleCapacity($userIds: [uuid!]!, $workDay: String!, $workHours: numeric!, $adminTimeHours: numeric!, $payrollCapacityHours: numeric!) {\n  bulkUpdateWorkSchedule(\n    where: {userId: {_in: $userIds}, workDay: {_eq: $workDay}}\n    _set: {workHours: $workHours, adminTimeHours: $adminTimeHours, payrollCapacityHours: $payrollCapacityHours, updatedAt: \"now()\"}\n  ) {\n    returning {\n      ...WorkScheduleComplete\n    }\n    affectedRows\n  }\n}\n\nmutation UpdateAdminTime($userId: uuid!, $workDay: String!, $adminTimeHours: numeric!, $usesDefaultAdminTime: Boolean!) {\n  bulkUpdateWorkSchedule(\n    where: {userId: {_eq: $userId}, workDay: {_eq: $workDay}}\n    _set: {adminTimeHours: $adminTimeHours, usesDefaultAdminTime: $usesDefaultAdminTime, updatedAt: \"now()\"}\n  ) {\n    returning {\n      ...WorkScheduleCapacity\n    }\n    affectedRows\n  }\n}\n\nmutation UpsertWorkSchedule($userId: uuid!, $workDay: String!, $workHours: numeric!, $adminTimeHours: numeric!, $payrollCapacityHours: numeric!, $usesDefaultAdminTime: Boolean!) {\n  insertWorkSchedule(\n    object: {userId: $userId, workDay: $workDay, workHours: $workHours, adminTimeHours: $adminTimeHours, payrollCapacityHours: $payrollCapacityHours, usesDefaultAdminTime: $usesDefaultAdminTime}\n    onConflict: {constraint: unique_user_work_day, updateColumns: [workHours, adminTimeHours, payrollCapacityHours, usesDefaultAdminTime]}\n  ) {\n    ...WorkScheduleComplete\n  }\n}\n\nmutation UpdateUserDefaultAdminTime($userId: uuid!, $defaultAdminTimePercentage: numeric!) {\n  updateUserById(\n    pkColumns: {id: $userId}\n    _set: {defaultAdminTimePercentage: $defaultAdminTimePercentage, updatedAt: \"now()\"}\n  ) {\n    id\n    firstName\n    lastName\n    computedName\n    defaultAdminTimePercentage\n    updatedAt\n  }\n}\n\nmutation AssignPayrollToConsultant($payrollId: uuid!, $primaryConsultantUserId: uuid, $backupConsultantUserId: uuid, $managerUserId: uuid) {\n  updatePayrollById(\n    pkColumns: {id: $payrollId}\n    _set: {primaryConsultantUserId: $primaryConsultantUserId, backupConsultantUserId: $backupConsultantUserId, managerUserId: $managerUserId, updatedAt: \"now()\"}\n  ) {\n    id\n    name\n    primaryConsultantUserId\n    backupConsultantUserId\n    managerUserId\n    primaryConsultant {\n      id\n      firstName\n      lastName\n      computedName\n    }\n    backupConsultant {\n      id\n      firstName\n      lastName\n      computedName\n    }\n    manager {\n      id\n      firstName\n      lastName\n      computedName\n    }\n    updatedAt\n  }\n}\n\nmutation BulkAssignPayrolls($payrollIds: [uuid!]!, $primaryConsultantUserId: uuid, $backupConsultantUserId: uuid, $managerUserId: uuid) {\n  bulkUpdatePayrolls(\n    where: {id: {_in: $payrollIds}}\n    _set: {primaryConsultantUserId: $primaryConsultantUserId, backupConsultantUserId: $backupConsultantUserId, managerUserId: $managerUserId, updatedAt: \"now()\"}\n  ) {\n    returning {\n      id\n      name\n      primaryConsultantUserId\n      backupConsultantUserId\n      managerUserId\n      primaryConsultant {\n        id\n        firstName\n        lastName\n        computedName\n      }\n      backupConsultant {\n        id\n        firstName\n        lastName\n        computedName\n      }\n      manager {\n        id\n        firstName\n        lastName\n        computedName\n      }\n      updatedAt\n    }\n    affectedRows\n  }\n}\n\nmutation UnassignPayrollConsultant($payrollId: uuid!, $removeRole: String!) {\n  updatePayrollById(\n    pkColumns: {id: $payrollId}\n    _set: {primaryConsultantUserId: null, backupConsultantUserId: null, managerUserId: null, updatedAt: \"now()\"}\n  ) {\n    id\n    name\n    primaryConsultantUserId\n    backupConsultantUserId\n    managerUserId\n    updatedAt\n  }\n}"): (typeof documents)["mutation CreateWorkSchedule($object: workScheduleInsertInput!) {\n  insertWorkSchedule(object: $object) {\n    ...WorkScheduleComplete\n  }\n}\n\nmutation UpdateWorkSchedule($id: uuid!, $set: workScheduleSetInput!) {\n  updateWorkScheduleById(pkColumns: {id: $id}, _set: $set) {\n    ...WorkScheduleComplete\n  }\n}\n\nmutation DeleteWorkSchedule($id: uuid!) {\n  deleteWorkScheduleById(id: $id) {\n    id\n    userId\n    workDay\n    workHours\n    adminTimeHours\n    payrollCapacityHours\n  }\n}\n\nmutation UpdateWorkScheduleHours($userId: uuid!, $workDay: String!, $workHours: numeric!, $adminTimeHours: numeric, $payrollCapacityHours: numeric, $usesDefaultAdminTime: Boolean) {\n  bulkUpdateWorkSchedule(\n    where: {userId: {_eq: $userId}, workDay: {_eq: $workDay}}\n    _set: {workHours: $workHours, adminTimeHours: $adminTimeHours, payrollCapacityHours: $payrollCapacityHours, usesDefaultAdminTime: $usesDefaultAdminTime, updatedAt: \"now()\"}\n  ) {\n    returning {\n      ...WorkScheduleComplete\n    }\n    affectedRows\n  }\n}\n\nmutation BulkCreateWorkSchedule($schedules: [workScheduleInsertInput!]!) {\n  bulkInsertWorkSchedule(objects: $schedules) {\n    returning {\n      ...WorkScheduleComplete\n    }\n    affectedRows\n  }\n}\n\nmutation BulkUpdateWorkScheduleCapacity($userIds: [uuid!]!, $workDay: String!, $workHours: numeric!, $adminTimeHours: numeric!, $payrollCapacityHours: numeric!) {\n  bulkUpdateWorkSchedule(\n    where: {userId: {_in: $userIds}, workDay: {_eq: $workDay}}\n    _set: {workHours: $workHours, adminTimeHours: $adminTimeHours, payrollCapacityHours: $payrollCapacityHours, updatedAt: \"now()\"}\n  ) {\n    returning {\n      ...WorkScheduleComplete\n    }\n    affectedRows\n  }\n}\n\nmutation UpdateAdminTime($userId: uuid!, $workDay: String!, $adminTimeHours: numeric!, $usesDefaultAdminTime: Boolean!) {\n  bulkUpdateWorkSchedule(\n    where: {userId: {_eq: $userId}, workDay: {_eq: $workDay}}\n    _set: {adminTimeHours: $adminTimeHours, usesDefaultAdminTime: $usesDefaultAdminTime, updatedAt: \"now()\"}\n  ) {\n    returning {\n      ...WorkScheduleCapacity\n    }\n    affectedRows\n  }\n}\n\nmutation UpsertWorkSchedule($userId: uuid!, $workDay: String!, $workHours: numeric!, $adminTimeHours: numeric!, $payrollCapacityHours: numeric!, $usesDefaultAdminTime: Boolean!) {\n  insertWorkSchedule(\n    object: {userId: $userId, workDay: $workDay, workHours: $workHours, adminTimeHours: $adminTimeHours, payrollCapacityHours: $payrollCapacityHours, usesDefaultAdminTime: $usesDefaultAdminTime}\n    onConflict: {constraint: unique_user_work_day, updateColumns: [workHours, adminTimeHours, payrollCapacityHours, usesDefaultAdminTime]}\n  ) {\n    ...WorkScheduleComplete\n  }\n}\n\nmutation UpdateUserDefaultAdminTime($userId: uuid!, $defaultAdminTimePercentage: numeric!) {\n  updateUserById(\n    pkColumns: {id: $userId}\n    _set: {defaultAdminTimePercentage: $defaultAdminTimePercentage, updatedAt: \"now()\"}\n  ) {\n    id\n    firstName\n    lastName\n    computedName\n    defaultAdminTimePercentage\n    updatedAt\n  }\n}\n\nmutation AssignPayrollToConsultant($payrollId: uuid!, $primaryConsultantUserId: uuid, $backupConsultantUserId: uuid, $managerUserId: uuid) {\n  updatePayrollById(\n    pkColumns: {id: $payrollId}\n    _set: {primaryConsultantUserId: $primaryConsultantUserId, backupConsultantUserId: $backupConsultantUserId, managerUserId: $managerUserId, updatedAt: \"now()\"}\n  ) {\n    id\n    name\n    primaryConsultantUserId\n    backupConsultantUserId\n    managerUserId\n    primaryConsultant {\n      id\n      firstName\n      lastName\n      computedName\n    }\n    backupConsultant {\n      id\n      firstName\n      lastName\n      computedName\n    }\n    manager {\n      id\n      firstName\n      lastName\n      computedName\n    }\n    updatedAt\n  }\n}\n\nmutation BulkAssignPayrolls($payrollIds: [uuid!]!, $primaryConsultantUserId: uuid, $backupConsultantUserId: uuid, $managerUserId: uuid) {\n  bulkUpdatePayrolls(\n    where: {id: {_in: $payrollIds}}\n    _set: {primaryConsultantUserId: $primaryConsultantUserId, backupConsultantUserId: $backupConsultantUserId, managerUserId: $managerUserId, updatedAt: \"now()\"}\n  ) {\n    returning {\n      id\n      name\n      primaryConsultantUserId\n      backupConsultantUserId\n      managerUserId\n      primaryConsultant {\n        id\n        firstName\n        lastName\n        computedName\n      }\n      backupConsultant {\n        id\n        firstName\n        lastName\n        computedName\n      }\n      manager {\n        id\n        firstName\n        lastName\n        computedName\n      }\n      updatedAt\n    }\n    affectedRows\n  }\n}\n\nmutation UnassignPayrollConsultant($payrollId: uuid!, $removeRole: String!) {\n  updatePayrollById(\n    pkColumns: {id: $payrollId}\n    _set: {primaryConsultantUserId: null, backupConsultantUserId: null, managerUserId: null, updatedAt: \"now()\"}\n  ) {\n    id\n    name\n    primaryConsultantUserId\n    backupConsultantUserId\n    managerUserId\n    updatedAt\n  }\n}"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "query GetUserWorkSchedules($userId: uuid!) {\n  workSchedule(where: {userId: {_eq: $userId}}) {\n    ...WorkScheduleBasic\n  }\n}\n\nquery GetWorkScheduleById($id: uuid!) {\n  workScheduleById(id: $id) {\n    ...WorkScheduleComplete\n  }\n}\n\nquery GetTeamWorkSchedules($managerUserId: uuid!) {\n  workSchedule(\n    where: {user: {managerId: {_eq: $managerUserId}}}\n    orderBy: {workDay: ASC}\n  ) {\n    ...WorkScheduleWithUser\n  }\n}\n\nquery GetWorkSchedulesByDateRange($startDate: String!, $endDate: String!) {\n  workSchedule(\n    where: {workDay: {_gte: $startDate, _lte: $endDate}}\n    orderBy: {workDay: ASC}\n  ) {\n    ...WorkScheduleWithUser\n  }\n}\n\nquery GetTeamCapacityDashboard($managerUserId: uuid!) {\n  workSchedule(\n    where: {user: {managerId: {_eq: $managerUserId}}}\n    orderBy: {user: {computedName: ASC}, workDay: ASC}\n  ) {\n    ...WorkScheduleDashboardCard\n  }\n}\n\nquery GetConsultantCapacity($userId: uuid!) {\n  workSchedule(where: {userId: {_eq: $userId}}) {\n    ...WorkScheduleCapacity\n  }\n}\n\nquery GetUsersBasic {\n  users(where: {isStaff: {_eq: true}}) {\n    id\n    firstName\n    lastName\n    computedName\n    email\n    role\n    managerId\n    isStaff\n    defaultAdminTimePercentage\n    createdAt\n    updatedAt\n  }\n}\n\nquery GetUserById($id: uuid!) {\n  userById(id: $id) {\n    id\n    firstName\n    lastName\n    computedName\n    email\n    role\n    managerId\n    isStaff\n    defaultAdminTimePercentage\n    createdAt\n    updatedAt\n    userWorkSchedules {\n      ...WorkScheduleBasic\n    }\n  }\n}\n\nquery GetTeamWorkloadOptimized($managerId: uuid!) {\n  users(\n    where: {managerId: {_eq: $managerId}, isStaff: {_eq: true}, isActive: {_eq: true}}\n    orderBy: {computedName: ASC}\n  ) {\n    id\n    firstName\n    lastName\n    computedName\n    email\n    role\n    defaultAdminTimePercentage\n    isActive\n    userWorkSchedules(orderBy: {workDay: ASC}) {\n      id\n      workDay\n      workHours\n      adminTimeHours\n      payrollCapacityHours\n      createdAt\n      updatedAt\n    }\n    primaryConsultantPayrolls(\n      where: {supersededDate: {_isNull: true}}\n      orderBy: {name: ASC}\n    ) {\n      id\n      name\n      processingTime\n      status\n      processingDaysBeforeEft\n      client {\n        id\n        name\n      }\n      payrollDates(orderBy: {originalEftDate: ASC}, limit: 5) {\n        id\n        originalEftDate\n        adjustedEftDate\n        processingDate\n      }\n    }\n    backupConsultantPayrolls(\n      where: {supersededDate: {_isNull: true}}\n      orderBy: {name: ASC}\n    ) {\n      id\n      name\n      processingTime\n      status\n      processingDaysBeforeEft\n      client {\n        id\n        name\n      }\n      payrollDates(orderBy: {originalEftDate: ASC}, limit: 5) {\n        id\n        originalEftDate\n        adjustedEftDate\n        processingDate\n      }\n    }\n  }\n  teamStats: usersAggregate(\n    where: {managerId: {_eq: $managerId}, isStaff: {_eq: true}, isActive: {_eq: true}}\n  ) {\n    aggregate {\n      count\n    }\n  }\n  managedPayrollsCount: payrollsAggregate(\n    where: {managerUserId: {_eq: $managerId}, supersededDate: {_isNull: true}}\n  ) {\n    aggregate {\n      count\n    }\n  }\n}\n\nquery GetTeamMembers($managerId: uuid!) {\n  users(where: {managerId: {_eq: $managerId}}) {\n    id\n    firstName\n    lastName\n    computedName\n    email\n    role\n    managerId\n    isStaff\n    defaultAdminTimePercentage\n    userWorkSchedules {\n      ...WorkScheduleCapacity\n    }\n  }\n}\n\nquery GetTeamMembersWithCapacity($managerId: uuid!) {\n  users(\n    where: {_and: [{managerId: {_eq: $managerId}}, {isStaff: {_eq: true}}]}\n    orderBy: {computedName: ASC}\n  ) {\n    id\n    firstName\n    lastName\n    computedName\n    email\n    role\n    managerId\n    isStaff\n    defaultAdminTimePercentage\n    userWorkSchedules {\n      ...WorkScheduleCapacity\n    }\n  }\n}\n\nquery GetAvailableConsultants {\n  users(where: {isStaff: {_eq: true}}, orderBy: {computedName: ASC}) {\n    id\n    firstName\n    lastName\n    computedName\n    email\n    role\n    defaultAdminTimePercentage\n    userWorkSchedules {\n      ...WorkScheduleCapacity\n    }\n    userSkills {\n      skillName\n      proficiencyLevel\n    }\n  }\n}\n\nquery GetConsultantWorkload($consultantId: uuid!) {\n  users(where: {id: {_eq: $consultantId}}) {\n    id\n    firstName\n    lastName\n    computedName\n    email\n    role\n    defaultAdminTimePercentage\n    userWorkSchedules {\n      ...WorkScheduleCapacity\n    }\n    primaryConsultantPayrolls(where: {supersededDate: {_isNull: true}}) {\n      id\n      name\n      processingTime\n      processingDaysBeforeEft\n      status\n      client {\n        id\n        name\n      }\n      payrollDates(orderBy: {adjustedEftDate: ASC}, limit: 1) {\n        id\n        adjustedEftDate\n        originalEftDate\n      }\n    }\n    backupConsultantPayrolls(where: {supersededDate: {_isNull: true}}) {\n      id\n      name\n      processingTime\n      processingDaysBeforeEft\n      status\n      client {\n        id\n        name\n      }\n      payrollDates(orderBy: {adjustedEftDate: ASC}, limit: 1) {\n        id\n        adjustedEftDate\n        originalEftDate\n      }\n    }\n  }\n}\n\nquery GetPayrollsForAssignment {\n  payrolls(\n    where: {supersededDate: {_isNull: true}, status: {_in: [\"draft\", \"Active\", \"pending_approval\"]}}\n    orderBy: {createdAt: DESC}\n  ) {\n    id\n    name\n    status\n    processingTime\n    processingDaysBeforeEft\n    employeeCount\n    client {\n      id\n      name\n    }\n    primaryConsultantUserId\n    backupConsultantUserId\n    managerUserId\n    primaryConsultant {\n      id\n      firstName\n      lastName\n      computedName\n    }\n    backupConsultant {\n      id\n      firstName\n      lastName\n      computedName\n    }\n    manager {\n      id\n      firstName\n      lastName\n      computedName\n    }\n    payrollDates(orderBy: {adjustedEftDate: ASC}, limit: 3) {\n      id\n      adjustedEftDate\n      originalEftDate\n    }\n  }\n}\n\nquery GetTeamWorkload($managerUserId: uuid!) {\n  users(\n    where: {_and: [{managerId: {_eq: $managerUserId}}, {isStaff: {_eq: true}}, {isActive: {_eq: true}}]}\n    orderBy: {computedName: ASC}\n  ) {\n    id\n    firstName\n    lastName\n    computedName\n    email\n    role\n    defaultAdminTimePercentage\n    userWorkSchedules {\n      ...WorkScheduleCapacity\n    }\n    primaryConsultantPayrolls(where: {supersededDate: {_isNull: true}}) {\n      id\n      name\n      processingTime\n      processingDaysBeforeEft\n      status\n      payrollDates(orderBy: {adjustedEftDate: ASC}, limit: 1) {\n        adjustedEftDate\n      }\n    }\n    backupConsultantPayrolls(where: {supersededDate: {_isNull: true}}) {\n      id\n      name\n      processingTime\n      processingDaysBeforeEft\n      status\n      payrollDates(orderBy: {adjustedEftDate: ASC}, limit: 1) {\n        adjustedEftDate\n      }\n    }\n  }\n}\n\nquery GetHolidaysByDateRange($startDate: date!, $endDate: date!, $countryCode: bpchar = \"AU\") {\n  holidays(\n    where: {date: {_gte: $startDate, _lte: $endDate}, countryCode: {_eq: $countryCode}}\n    orderBy: {date: ASC}\n  ) {\n    id\n    name\n    localName\n    date\n    countryCode\n    types\n    isGlobal\n    region\n  }\n}\n\nquery GetEftRelevantHolidays($startDate: date!, $endDate: date!, $countryCode: bpchar = \"AU\") {\n  holidays(\n    where: {date: {_gte: $startDate, _lte: $endDate}, countryCode: {_eq: $countryCode}, _or: [{region: {_contains: [\"NSW\"]}}, {region: {_contains: [\"National\"]}}, {region: {_contains: [\"Australia\"]}}]}\n    orderBy: {date: ASC}\n  ) {\n    id\n    name\n    localName\n    date\n    countryCode\n    types\n    isGlobal\n    region\n  }\n}\n\nquery GetHolidaysByRegions($startDate: date!, $endDate: date!, $regions: [String!]!, $countryCode: bpchar = \"AU\") {\n  holidays(\n    where: {date: {_gte: $startDate, _lte: $endDate}, countryCode: {_eq: $countryCode}, _or: [{region: {_contains: $regions}}]}\n    orderBy: {date: ASC}\n  ) {\n    id\n    name\n    localName\n    date\n    countryCode\n    types\n    isGlobal\n    region\n  }\n}\n\nquery GetAllStaffCapacityDashboard {\n  workSchedule(\n    where: {user: {isStaff: {_eq: true}, isActive: {_eq: true}}}\n    orderBy: {user: {computedName: ASC}, workDay: ASC}\n  ) {\n    id\n    userId\n    workDay\n    workHours\n    adminTimeHours\n    payrollCapacityHours\n    usesDefaultAdminTime\n    user {\n      id\n      firstName\n      lastName\n      computedName\n      email\n      role\n      defaultAdminTimePercentage\n      isStaff\n    }\n  }\n}\n\nquery GetAllStaffWorkload {\n  users(\n    where: {isStaff: {_eq: true}, isActive: {_eq: true}}\n    orderBy: {computedName: ASC}\n  ) {\n    id\n    firstName\n    lastName\n    computedName\n    email\n    role\n    defaultAdminTimePercentage\n    userWorkSchedules {\n      id\n      userId\n      workDay\n      workHours\n      adminTimeHours\n      payrollCapacityHours\n      usesDefaultAdminTime\n    }\n    userSkills {\n      skillName\n      proficiencyLevel\n    }\n    primaryConsultantPayrolls(where: {supersededDate: {_isNull: true}}) {\n      id\n      name\n      processingTime\n      processingDaysBeforeEft\n      status\n      payrollDates(orderBy: {adjustedEftDate: ASC}, limit: 1) {\n        adjustedEftDate\n      }\n      payrollRequiredSkills {\n        skillName\n        requiredLevel\n      }\n    }\n    backupConsultantPayrolls(where: {supersededDate: {_isNull: true}}) {\n      id\n      name\n      processingTime\n      processingDaysBeforeEft\n      status\n      payrollDates(orderBy: {adjustedEftDate: ASC}, limit: 1) {\n        adjustedEftDate\n      }\n      payrollRequiredSkills {\n        skillName\n        requiredLevel\n      }\n    }\n  }\n}\n\nquery GetTeamCapacityOverview($managerUserId: uuid) {\n  teamCapacity: workScheduleAggregate(\n    where: {user: {_and: [{isStaff: {_eq: true}}, {isActive: {_eq: true}}, {managerId: {_eq: $managerUserId}}]}}\n  ) {\n    aggregate {\n      sum {\n        workHours\n        adminTimeHours\n        payrollCapacityHours\n      }\n      count\n    }\n  }\n  teamMemberCount: usersAggregate(\n    where: {_and: [{isStaff: {_eq: true}}, {isActive: {_eq: true}}, {managerId: {_eq: $managerUserId}}]}\n  ) {\n    aggregate {\n      count\n    }\n  }\n  activePayrollCount: payrollsAggregate(\n    where: {_and: [{supersededDate: {_isNull: true}}, {status: {_in: [\"Active\", \"pending_approval\"]}}, {_or: [{primaryConsultant: {managerId: {_eq: $managerUserId}}}, {backupConsultant: {managerId: {_eq: $managerUserId}}}]}]}\n  ) {\n    aggregate {\n      count\n      sum {\n        processingTime\n      }\n    }\n  }\n}"): (typeof documents)["query GetUserWorkSchedules($userId: uuid!) {\n  workSchedule(where: {userId: {_eq: $userId}}) {\n    ...WorkScheduleBasic\n  }\n}\n\nquery GetWorkScheduleById($id: uuid!) {\n  workScheduleById(id: $id) {\n    ...WorkScheduleComplete\n  }\n}\n\nquery GetTeamWorkSchedules($managerUserId: uuid!) {\n  workSchedule(\n    where: {user: {managerId: {_eq: $managerUserId}}}\n    orderBy: {workDay: ASC}\n  ) {\n    ...WorkScheduleWithUser\n  }\n}\n\nquery GetWorkSchedulesByDateRange($startDate: String!, $endDate: String!) {\n  workSchedule(\n    where: {workDay: {_gte: $startDate, _lte: $endDate}}\n    orderBy: {workDay: ASC}\n  ) {\n    ...WorkScheduleWithUser\n  }\n}\n\nquery GetTeamCapacityDashboard($managerUserId: uuid!) {\n  workSchedule(\n    where: {user: {managerId: {_eq: $managerUserId}}}\n    orderBy: {user: {computedName: ASC}, workDay: ASC}\n  ) {\n    ...WorkScheduleDashboardCard\n  }\n}\n\nquery GetConsultantCapacity($userId: uuid!) {\n  workSchedule(where: {userId: {_eq: $userId}}) {\n    ...WorkScheduleCapacity\n  }\n}\n\nquery GetUsersBasic {\n  users(where: {isStaff: {_eq: true}}) {\n    id\n    firstName\n    lastName\n    computedName\n    email\n    role\n    managerId\n    isStaff\n    defaultAdminTimePercentage\n    createdAt\n    updatedAt\n  }\n}\n\nquery GetUserById($id: uuid!) {\n  userById(id: $id) {\n    id\n    firstName\n    lastName\n    computedName\n    email\n    role\n    managerId\n    isStaff\n    defaultAdminTimePercentage\n    createdAt\n    updatedAt\n    userWorkSchedules {\n      ...WorkScheduleBasic\n    }\n  }\n}\n\nquery GetTeamWorkloadOptimized($managerId: uuid!) {\n  users(\n    where: {managerId: {_eq: $managerId}, isStaff: {_eq: true}, isActive: {_eq: true}}\n    orderBy: {computedName: ASC}\n  ) {\n    id\n    firstName\n    lastName\n    computedName\n    email\n    role\n    defaultAdminTimePercentage\n    isActive\n    userWorkSchedules(orderBy: {workDay: ASC}) {\n      id\n      workDay\n      workHours\n      adminTimeHours\n      payrollCapacityHours\n      createdAt\n      updatedAt\n    }\n    primaryConsultantPayrolls(\n      where: {supersededDate: {_isNull: true}}\n      orderBy: {name: ASC}\n    ) {\n      id\n      name\n      processingTime\n      status\n      processingDaysBeforeEft\n      client {\n        id\n        name\n      }\n      payrollDates(orderBy: {originalEftDate: ASC}, limit: 5) {\n        id\n        originalEftDate\n        adjustedEftDate\n        processingDate\n      }\n    }\n    backupConsultantPayrolls(\n      where: {supersededDate: {_isNull: true}}\n      orderBy: {name: ASC}\n    ) {\n      id\n      name\n      processingTime\n      status\n      processingDaysBeforeEft\n      client {\n        id\n        name\n      }\n      payrollDates(orderBy: {originalEftDate: ASC}, limit: 5) {\n        id\n        originalEftDate\n        adjustedEftDate\n        processingDate\n      }\n    }\n  }\n  teamStats: usersAggregate(\n    where: {managerId: {_eq: $managerId}, isStaff: {_eq: true}, isActive: {_eq: true}}\n  ) {\n    aggregate {\n      count\n    }\n  }\n  managedPayrollsCount: payrollsAggregate(\n    where: {managerUserId: {_eq: $managerId}, supersededDate: {_isNull: true}}\n  ) {\n    aggregate {\n      count\n    }\n  }\n}\n\nquery GetTeamMembers($managerId: uuid!) {\n  users(where: {managerId: {_eq: $managerId}}) {\n    id\n    firstName\n    lastName\n    computedName\n    email\n    role\n    managerId\n    isStaff\n    defaultAdminTimePercentage\n    userWorkSchedules {\n      ...WorkScheduleCapacity\n    }\n  }\n}\n\nquery GetTeamMembersWithCapacity($managerId: uuid!) {\n  users(\n    where: {_and: [{managerId: {_eq: $managerId}}, {isStaff: {_eq: true}}]}\n    orderBy: {computedName: ASC}\n  ) {\n    id\n    firstName\n    lastName\n    computedName\n    email\n    role\n    managerId\n    isStaff\n    defaultAdminTimePercentage\n    userWorkSchedules {\n      ...WorkScheduleCapacity\n    }\n  }\n}\n\nquery GetAvailableConsultants {\n  users(where: {isStaff: {_eq: true}}, orderBy: {computedName: ASC}) {\n    id\n    firstName\n    lastName\n    computedName\n    email\n    role\n    defaultAdminTimePercentage\n    userWorkSchedules {\n      ...WorkScheduleCapacity\n    }\n    userSkills {\n      skillName\n      proficiencyLevel\n    }\n  }\n}\n\nquery GetConsultantWorkload($consultantId: uuid!) {\n  users(where: {id: {_eq: $consultantId}}) {\n    id\n    firstName\n    lastName\n    computedName\n    email\n    role\n    defaultAdminTimePercentage\n    userWorkSchedules {\n      ...WorkScheduleCapacity\n    }\n    primaryConsultantPayrolls(where: {supersededDate: {_isNull: true}}) {\n      id\n      name\n      processingTime\n      processingDaysBeforeEft\n      status\n      client {\n        id\n        name\n      }\n      payrollDates(orderBy: {adjustedEftDate: ASC}, limit: 1) {\n        id\n        adjustedEftDate\n        originalEftDate\n      }\n    }\n    backupConsultantPayrolls(where: {supersededDate: {_isNull: true}}) {\n      id\n      name\n      processingTime\n      processingDaysBeforeEft\n      status\n      client {\n        id\n        name\n      }\n      payrollDates(orderBy: {adjustedEftDate: ASC}, limit: 1) {\n        id\n        adjustedEftDate\n        originalEftDate\n      }\n    }\n  }\n}\n\nquery GetPayrollsForAssignment {\n  payrolls(\n    where: {supersededDate: {_isNull: true}, status: {_in: [\"draft\", \"Active\", \"pending_approval\"]}}\n    orderBy: {createdAt: DESC}\n  ) {\n    id\n    name\n    status\n    processingTime\n    processingDaysBeforeEft\n    employeeCount\n    client {\n      id\n      name\n    }\n    primaryConsultantUserId\n    backupConsultantUserId\n    managerUserId\n    primaryConsultant {\n      id\n      firstName\n      lastName\n      computedName\n    }\n    backupConsultant {\n      id\n      firstName\n      lastName\n      computedName\n    }\n    manager {\n      id\n      firstName\n      lastName\n      computedName\n    }\n    payrollDates(orderBy: {adjustedEftDate: ASC}, limit: 3) {\n      id\n      adjustedEftDate\n      originalEftDate\n    }\n  }\n}\n\nquery GetTeamWorkload($managerUserId: uuid!) {\n  users(\n    where: {_and: [{managerId: {_eq: $managerUserId}}, {isStaff: {_eq: true}}, {isActive: {_eq: true}}]}\n    orderBy: {computedName: ASC}\n  ) {\n    id\n    firstName\n    lastName\n    computedName\n    email\n    role\n    defaultAdminTimePercentage\n    userWorkSchedules {\n      ...WorkScheduleCapacity\n    }\n    primaryConsultantPayrolls(where: {supersededDate: {_isNull: true}}) {\n      id\n      name\n      processingTime\n      processingDaysBeforeEft\n      status\n      payrollDates(orderBy: {adjustedEftDate: ASC}, limit: 1) {\n        adjustedEftDate\n      }\n    }\n    backupConsultantPayrolls(where: {supersededDate: {_isNull: true}}) {\n      id\n      name\n      processingTime\n      processingDaysBeforeEft\n      status\n      payrollDates(orderBy: {adjustedEftDate: ASC}, limit: 1) {\n        adjustedEftDate\n      }\n    }\n  }\n}\n\nquery GetHolidaysByDateRange($startDate: date!, $endDate: date!, $countryCode: bpchar = \"AU\") {\n  holidays(\n    where: {date: {_gte: $startDate, _lte: $endDate}, countryCode: {_eq: $countryCode}}\n    orderBy: {date: ASC}\n  ) {\n    id\n    name\n    localName\n    date\n    countryCode\n    types\n    isGlobal\n    region\n  }\n}\n\nquery GetEftRelevantHolidays($startDate: date!, $endDate: date!, $countryCode: bpchar = \"AU\") {\n  holidays(\n    where: {date: {_gte: $startDate, _lte: $endDate}, countryCode: {_eq: $countryCode}, _or: [{region: {_contains: [\"NSW\"]}}, {region: {_contains: [\"National\"]}}, {region: {_contains: [\"Australia\"]}}]}\n    orderBy: {date: ASC}\n  ) {\n    id\n    name\n    localName\n    date\n    countryCode\n    types\n    isGlobal\n    region\n  }\n}\n\nquery GetHolidaysByRegions($startDate: date!, $endDate: date!, $regions: [String!]!, $countryCode: bpchar = \"AU\") {\n  holidays(\n    where: {date: {_gte: $startDate, _lte: $endDate}, countryCode: {_eq: $countryCode}, _or: [{region: {_contains: $regions}}]}\n    orderBy: {date: ASC}\n  ) {\n    id\n    name\n    localName\n    date\n    countryCode\n    types\n    isGlobal\n    region\n  }\n}\n\nquery GetAllStaffCapacityDashboard {\n  workSchedule(\n    where: {user: {isStaff: {_eq: true}, isActive: {_eq: true}}}\n    orderBy: {user: {computedName: ASC}, workDay: ASC}\n  ) {\n    id\n    userId\n    workDay\n    workHours\n    adminTimeHours\n    payrollCapacityHours\n    usesDefaultAdminTime\n    user {\n      id\n      firstName\n      lastName\n      computedName\n      email\n      role\n      defaultAdminTimePercentage\n      isStaff\n    }\n  }\n}\n\nquery GetAllStaffWorkload {\n  users(\n    where: {isStaff: {_eq: true}, isActive: {_eq: true}}\n    orderBy: {computedName: ASC}\n  ) {\n    id\n    firstName\n    lastName\n    computedName\n    email\n    role\n    defaultAdminTimePercentage\n    userWorkSchedules {\n      id\n      userId\n      workDay\n      workHours\n      adminTimeHours\n      payrollCapacityHours\n      usesDefaultAdminTime\n    }\n    userSkills {\n      skillName\n      proficiencyLevel\n    }\n    primaryConsultantPayrolls(where: {supersededDate: {_isNull: true}}) {\n      id\n      name\n      processingTime\n      processingDaysBeforeEft\n      status\n      payrollDates(orderBy: {adjustedEftDate: ASC}, limit: 1) {\n        adjustedEftDate\n      }\n      payrollRequiredSkills {\n        skillName\n        requiredLevel\n      }\n    }\n    backupConsultantPayrolls(where: {supersededDate: {_isNull: true}}) {\n      id\n      name\n      processingTime\n      processingDaysBeforeEft\n      status\n      payrollDates(orderBy: {adjustedEftDate: ASC}, limit: 1) {\n        adjustedEftDate\n      }\n      payrollRequiredSkills {\n        skillName\n        requiredLevel\n      }\n    }\n  }\n}\n\nquery GetTeamCapacityOverview($managerUserId: uuid) {\n  teamCapacity: workScheduleAggregate(\n    where: {user: {_and: [{isStaff: {_eq: true}}, {isActive: {_eq: true}}, {managerId: {_eq: $managerUserId}}]}}\n  ) {\n    aggregate {\n      sum {\n        workHours\n        adminTimeHours\n        payrollCapacityHours\n      }\n      count\n    }\n  }\n  teamMemberCount: usersAggregate(\n    where: {_and: [{isStaff: {_eq: true}}, {isActive: {_eq: true}}, {managerId: {_eq: $managerUserId}}]}\n  ) {\n    aggregate {\n      count\n    }\n  }\n  activePayrollCount: payrollsAggregate(\n    where: {_and: [{supersededDate: {_isNull: true}}, {status: {_in: [\"Active\", \"pending_approval\"]}}, {_or: [{primaryConsultant: {managerId: {_eq: $managerUserId}}}, {backupConsultant: {managerId: {_eq: $managerUserId}}}]}]}\n  ) {\n    aggregate {\n      count\n      sum {\n        processingTime\n      }\n    }\n  }\n}"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "fragment UserSkillBasic on userSkill {\n  skillName\n  proficiencyLevel\n  userId\n}\n\nfragment UserSkillComplete on userSkill {\n  skillName\n  proficiencyLevel\n  userId\n  skilledUser {\n    id\n    firstName\n    lastName\n    computedName\n    email\n    role\n  }\n}\n\nfragment PayrollRequiredSkillBasic on payrollRequiredSkill {\n  skillName\n  requiredLevel\n  payrollId\n}\n\nfragment PayrollRequiredSkillComplete on payrollRequiredSkill {\n  skillName\n  requiredLevel\n  payrollId\n  requiringPayroll {\n    id\n    name\n    status\n  }\n}\n\nquery GetUserSkills($userId: uuid!) {\n  userSkill(where: {userId: {_eq: $userId}}) {\n    ...UserSkillBasic\n  }\n}\n\nquery GetUserSkillByCompositeKey($userId: uuid!, $skillName: String!) {\n  userSkill(\n    where: {_and: [{userId: {_eq: $userId}}, {skillName: {_eq: $skillName}}]}\n  ) {\n    ...UserSkillBasic\n  }\n}\n\nquery GetAllUserSkills {\n  userSkill {\n    ...UserSkillComplete\n  }\n}\n\nquery GetUsersWithSkills {\n  users(where: {isStaff: {_eq: true}}) {\n    id\n    firstName\n    lastName\n    computedName\n    email\n    role\n    userSkills {\n      ...UserSkillBasic\n    }\n  }\n}\n\nquery GetPayrollRequiredSkills($payrollId: uuid!) {\n  payrollRequiredSkill(where: {payrollId: {_eq: $payrollId}}) {\n    ...PayrollRequiredSkillBasic\n  }\n}\n\nquery GetPayrollRequiredSkillByCompositeKey($payrollId: uuid!, $skillName: String!) {\n  payrollRequiredSkill(\n    where: {_and: [{payrollId: {_eq: $payrollId}}, {skillName: {_eq: $skillName}}]}\n  ) {\n    ...PayrollRequiredSkillBasic\n  }\n}\n\nquery GetPayrollsWithRequiredSkills {\n  payrolls(where: {supersededDate: {_isNull: true}}) {\n    id\n    name\n    status\n    processingTime\n    payrollRequiredSkills {\n      ...PayrollRequiredSkillBasic\n    }\n  }\n}\n\nquery GetConsultantsWithSkills($requiredSkills: [String!]!) {\n  users(\n    where: {_and: [{isStaff: {_eq: true}}, {isActive: {_eq: true}}, {role: {_in: [\"consultant\", \"manager\", \"org_admin\"]}}, {userSkills: {skillName: {_in: $requiredSkills}}}]}\n  ) {\n    id\n    firstName\n    lastName\n    computedName\n    email\n    role\n    defaultAdminTimePercentage\n    userSkills {\n      ...UserSkillBasic\n    }\n    userWorkSchedules {\n      id\n      workDay\n      workHours\n      adminTimeHours\n      payrollCapacityHours\n      usesDefaultAdminTime\n    }\n  }\n}\n\nmutation CreateUserSkill($skillName: String!, $proficiencyLevel: String!, $userId: uuid!) {\n  insertUserSkill(\n    object: {skillName: $skillName, proficiencyLevel: $proficiencyLevel, userId: $userId}\n  ) {\n    ...UserSkillBasic\n  }\n}\n\nmutation BulkCreateUserSkills($userSkills: [userSkillInsertInput!]!) {\n  bulkInsertUserSkill(objects: $userSkills) {\n    returning {\n      ...UserSkillBasic\n    }\n    affectedRows\n  }\n}\n\nmutation UpdateUserSkill($userId: uuid!, $skillName: String!, $proficiencyLevel: String!) {\n  bulkUpdateUserSkill(\n    where: {_and: [{userId: {_eq: $userId}}, {skillName: {_eq: $skillName}}]}\n    _set: {proficiencyLevel: $proficiencyLevel}\n  ) {\n    returning {\n      ...UserSkillBasic\n    }\n    affectedRows\n  }\n}\n\nmutation DeleteUserSkill($userId: uuid!, $skillName: String!) {\n  bulkDeleteUserSkill(\n    where: {_and: [{userId: {_eq: $userId}}, {skillName: {_eq: $skillName}}]}\n  ) {\n    affectedRows\n    returning {\n      ...UserSkillBasic\n    }\n  }\n}\n\nmutation CreatePayrollRequiredSkill($payrollId: uuid!, $skillName: String!, $requiredLevel: String!) {\n  insertPayrollRequiredSkill(\n    object: {payrollId: $payrollId, skillName: $skillName, requiredLevel: $requiredLevel}\n  ) {\n    ...PayrollRequiredSkillBasic\n  }\n}\n\nmutation BulkCreatePayrollRequiredSkills($skills: [payrollRequiredSkillInsertInput!]!) {\n  bulkInsertPayrollRequiredSkill(objects: $skills) {\n    returning {\n      ...PayrollRequiredSkillBasic\n    }\n    affectedRows\n  }\n}\n\nmutation DeletePayrollRequiredSkill($payrollId: uuid!, $skillName: String!) {\n  bulkDeletePayrollRequiredSkill(\n    where: {_and: [{payrollId: {_eq: $payrollId}}, {skillName: {_eq: $skillName}}]}\n  ) {\n    affectedRows\n    returning {\n      ...PayrollRequiredSkillBasic\n    }\n  }\n}\n\nmutation BulkDeleteUserSkills($where: userSkillBoolExp!) {\n  bulkDeleteUserSkill(where: $where) {\n    affectedRows\n  }\n}\n\nmutation BulkDeletePayrollRequiredSkills($where: payrollRequiredSkillBoolExp!) {\n  bulkDeletePayrollRequiredSkill(where: $where) {\n    affectedRows\n  }\n}"): (typeof documents)["fragment UserSkillBasic on userSkill {\n  skillName\n  proficiencyLevel\n  userId\n}\n\nfragment UserSkillComplete on userSkill {\n  skillName\n  proficiencyLevel\n  userId\n  skilledUser {\n    id\n    firstName\n    lastName\n    computedName\n    email\n    role\n  }\n}\n\nfragment PayrollRequiredSkillBasic on payrollRequiredSkill {\n  skillName\n  requiredLevel\n  payrollId\n}\n\nfragment PayrollRequiredSkillComplete on payrollRequiredSkill {\n  skillName\n  requiredLevel\n  payrollId\n  requiringPayroll {\n    id\n    name\n    status\n  }\n}\n\nquery GetUserSkills($userId: uuid!) {\n  userSkill(where: {userId: {_eq: $userId}}) {\n    ...UserSkillBasic\n  }\n}\n\nquery GetUserSkillByCompositeKey($userId: uuid!, $skillName: String!) {\n  userSkill(\n    where: {_and: [{userId: {_eq: $userId}}, {skillName: {_eq: $skillName}}]}\n  ) {\n    ...UserSkillBasic\n  }\n}\n\nquery GetAllUserSkills {\n  userSkill {\n    ...UserSkillComplete\n  }\n}\n\nquery GetUsersWithSkills {\n  users(where: {isStaff: {_eq: true}}) {\n    id\n    firstName\n    lastName\n    computedName\n    email\n    role\n    userSkills {\n      ...UserSkillBasic\n    }\n  }\n}\n\nquery GetPayrollRequiredSkills($payrollId: uuid!) {\n  payrollRequiredSkill(where: {payrollId: {_eq: $payrollId}}) {\n    ...PayrollRequiredSkillBasic\n  }\n}\n\nquery GetPayrollRequiredSkillByCompositeKey($payrollId: uuid!, $skillName: String!) {\n  payrollRequiredSkill(\n    where: {_and: [{payrollId: {_eq: $payrollId}}, {skillName: {_eq: $skillName}}]}\n  ) {\n    ...PayrollRequiredSkillBasic\n  }\n}\n\nquery GetPayrollsWithRequiredSkills {\n  payrolls(where: {supersededDate: {_isNull: true}}) {\n    id\n    name\n    status\n    processingTime\n    payrollRequiredSkills {\n      ...PayrollRequiredSkillBasic\n    }\n  }\n}\n\nquery GetConsultantsWithSkills($requiredSkills: [String!]!) {\n  users(\n    where: {_and: [{isStaff: {_eq: true}}, {isActive: {_eq: true}}, {role: {_in: [\"consultant\", \"manager\", \"org_admin\"]}}, {userSkills: {skillName: {_in: $requiredSkills}}}]}\n  ) {\n    id\n    firstName\n    lastName\n    computedName\n    email\n    role\n    defaultAdminTimePercentage\n    userSkills {\n      ...UserSkillBasic\n    }\n    userWorkSchedules {\n      id\n      workDay\n      workHours\n      adminTimeHours\n      payrollCapacityHours\n      usesDefaultAdminTime\n    }\n  }\n}\n\nmutation CreateUserSkill($skillName: String!, $proficiencyLevel: String!, $userId: uuid!) {\n  insertUserSkill(\n    object: {skillName: $skillName, proficiencyLevel: $proficiencyLevel, userId: $userId}\n  ) {\n    ...UserSkillBasic\n  }\n}\n\nmutation BulkCreateUserSkills($userSkills: [userSkillInsertInput!]!) {\n  bulkInsertUserSkill(objects: $userSkills) {\n    returning {\n      ...UserSkillBasic\n    }\n    affectedRows\n  }\n}\n\nmutation UpdateUserSkill($userId: uuid!, $skillName: String!, $proficiencyLevel: String!) {\n  bulkUpdateUserSkill(\n    where: {_and: [{userId: {_eq: $userId}}, {skillName: {_eq: $skillName}}]}\n    _set: {proficiencyLevel: $proficiencyLevel}\n  ) {\n    returning {\n      ...UserSkillBasic\n    }\n    affectedRows\n  }\n}\n\nmutation DeleteUserSkill($userId: uuid!, $skillName: String!) {\n  bulkDeleteUserSkill(\n    where: {_and: [{userId: {_eq: $userId}}, {skillName: {_eq: $skillName}}]}\n  ) {\n    affectedRows\n    returning {\n      ...UserSkillBasic\n    }\n  }\n}\n\nmutation CreatePayrollRequiredSkill($payrollId: uuid!, $skillName: String!, $requiredLevel: String!) {\n  insertPayrollRequiredSkill(\n    object: {payrollId: $payrollId, skillName: $skillName, requiredLevel: $requiredLevel}\n  ) {\n    ...PayrollRequiredSkillBasic\n  }\n}\n\nmutation BulkCreatePayrollRequiredSkills($skills: [payrollRequiredSkillInsertInput!]!) {\n  bulkInsertPayrollRequiredSkill(objects: $skills) {\n    returning {\n      ...PayrollRequiredSkillBasic\n    }\n    affectedRows\n  }\n}\n\nmutation DeletePayrollRequiredSkill($payrollId: uuid!, $skillName: String!) {\n  bulkDeletePayrollRequiredSkill(\n    where: {_and: [{payrollId: {_eq: $payrollId}}, {skillName: {_eq: $skillName}}]}\n  ) {\n    affectedRows\n    returning {\n      ...PayrollRequiredSkillBasic\n    }\n  }\n}\n\nmutation BulkDeleteUserSkills($where: userSkillBoolExp!) {\n  bulkDeleteUserSkill(where: $where) {\n    affectedRows\n  }\n}\n\nmutation BulkDeletePayrollRequiredSkills($where: payrollRequiredSkillBoolExp!) {\n  bulkDeletePayrollRequiredSkill(where: $where) {\n    affectedRows\n  }\n}"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "subscription WorkScheduleUpdates {\n  workSchedule(orderBy: {updatedAt: DESC}) {\n    ...WorkScheduleListItem\n  }\n}\n\nsubscription WorkScheduleUpdate($id: uuid!) {\n  workSchedule(where: {id: {_eq: $id}}) {\n    ...WorkScheduleComplete\n  }\n}\n\nsubscription UserWorkScheduleUpdates($userId: uuid!) {\n  workSchedule(where: {userId: {_eq: $userId}}) {\n    ...MyWorkSchedule\n  }\n}\n\nsubscription TeamWorkScheduleUpdates($managerUserId: uuid!) {\n  workSchedule(\n    where: {user: {managerId: {_eq: $managerUserId}}}\n    orderBy: {updatedAt: DESC}\n  ) {\n    ...WorkScheduleDashboardCard\n  }\n}\n\nsubscription WorkScheduleCapacityUpdates($userId: uuid!) {\n  workSchedule(where: {userId: {_eq: $userId}}) {\n    ...WorkScheduleCapacity\n  }\n}"): (typeof documents)["subscription WorkScheduleUpdates {\n  workSchedule(orderBy: {updatedAt: DESC}) {\n    ...WorkScheduleListItem\n  }\n}\n\nsubscription WorkScheduleUpdate($id: uuid!) {\n  workSchedule(where: {id: {_eq: $id}}) {\n    ...WorkScheduleComplete\n  }\n}\n\nsubscription UserWorkScheduleUpdates($userId: uuid!) {\n  workSchedule(where: {userId: {_eq: $userId}}) {\n    ...MyWorkSchedule\n  }\n}\n\nsubscription TeamWorkScheduleUpdates($managerUserId: uuid!) {\n  workSchedule(\n    where: {user: {managerId: {_eq: $managerUserId}}}\n    orderBy: {updatedAt: DESC}\n  ) {\n    ...WorkScheduleDashboardCard\n  }\n}\n\nsubscription WorkScheduleCapacityUpdates($userId: uuid!) {\n  workSchedule(where: {userId: {_eq: $userId}}) {\n    ...WorkScheduleCapacity\n  }\n}"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "query GetConsultantPayrollWorkload($userId: uuid!, $startDate: date!, $endDate: date!) {\n  userById(id: $userId) {\n    id\n    firstName\n    lastName\n    computedName\n    email\n    role\n    defaultAdminTimePercentage\n  }\n  workSchedule(where: {userId: {_eq: $userId}}, orderBy: {workDay: ASC}) {\n    id\n    workDay\n    workHours\n    adminTimeHours\n    payrollCapacityHours\n    usesDefaultAdminTime\n  }\n  primaryPayrolls: payrolls(\n    where: {primaryConsultantUserId: {_eq: $userId}, status: {_in: [\"Active\", \"Implementation\", \"pending_approval\", \"approved\"]}}\n  ) {\n    id\n    name\n    processingTime\n    processingDaysBeforeEft\n    status\n    client {\n      id\n      name\n    }\n    payrollDates(\n      where: {originalEftDate: {_gte: $startDate, _lte: $endDate}}\n      orderBy: {originalEftDate: ASC}\n    ) {\n      id\n      originalEftDate\n      processingDate\n    }\n  }\n  backupPayrolls: payrolls(\n    where: {backupConsultantUserId: {_eq: $userId}, status: {_in: [\"Active\", \"Implementation\", \"pending_approval\", \"approved\"]}}\n  ) {\n    id\n    name\n    processingTime\n    processingDaysBeforeEft\n    status\n    client {\n      id\n      name\n    }\n    payrollDates(\n      where: {originalEftDate: {_gte: $startDate, _lte: $endDate}}\n      orderBy: {originalEftDate: ASC}\n    ) {\n      id\n      originalEftDate\n      processingDate\n    }\n  }\n}\n\nquery GetTeamPayrollWorkload($managerId: uuid!, $startDate: date!, $endDate: date!) {\n  teamMembers: users(\n    where: {managerId: {_eq: $managerId}, isStaff: {_eq: true}, isActive: {_eq: true}}\n    orderBy: {computedName: ASC}\n  ) {\n    id\n    firstName\n    lastName\n    computedName\n    email\n    role\n    defaultAdminTimePercentage\n    userWorkSchedules(orderBy: {workDay: ASC}) {\n      id\n      workDay\n      workHours\n      adminTimeHours\n      payrollCapacityHours\n      usesDefaultAdminTime\n    }\n    primaryConsultantPayrolls(\n      where: {status: {_in: [\"Active\", \"pending_approval\", \"Implementation\"]}}\n    ) {\n      id\n      name\n      processingTime\n      processingDaysBeforeEft\n      status\n      client {\n        id\n        name\n      }\n      payrollDates(\n        where: {originalEftDate: {_gte: $startDate, _lte: $endDate}}\n        orderBy: {originalEftDate: ASC}\n      ) {\n        id\n        originalEftDate\n        processingDate\n      }\n    }\n    backupConsultantPayrolls(\n      where: {status: {_in: [\"Active\", \"pending_approval\", \"Implementation\"]}}\n    ) {\n      id\n      name\n      processingTime\n      processingDaysBeforeEft\n      status\n      client {\n        id\n        name\n      }\n      payrollDates(\n        where: {originalEftDate: {_gte: $startDate, _lte: $endDate}}\n        orderBy: {originalEftDate: ASC}\n      ) {\n        id\n        originalEftDate\n        processingDate\n      }\n    }\n  }\n}\n\nquery GetPayrollWorkloadStats($userId: uuid!, $startDate: date!, $endDate: date!) {\n  workScheduleStats: workScheduleAggregate(where: {userId: {_eq: $userId}}) {\n    aggregate {\n      sum {\n        workHours\n        adminTimeHours\n        payrollCapacityHours\n      }\n      avg {\n        workHours\n        payrollCapacityHours\n      }\n      count\n    }\n  }\n  primaryPayrollCount: payrollsAggregate(\n    where: {primaryConsultantUserId: {_eq: $userId}, status: {_in: [\"Active\", \"Implementation\", \"pending_approval\", \"approved\"]}}\n  ) {\n    aggregate {\n      count\n      sum {\n        processingTime\n      }\n    }\n  }\n  backupPayrollCount: payrollsAggregate(\n    where: {backupConsultantUserId: {_eq: $userId}, status: {_in: [\"Active\", \"Implementation\", \"pending_approval\", \"approved\"]}}\n  ) {\n    aggregate {\n      count\n      sum {\n        processingTime\n      }\n    }\n  }\n  upcomingPayrollDates: payrollDatesAggregate(\n    where: {relatedPayroll: {_or: [{primaryConsultantUserId: {_eq: $userId}}, {backupConsultantUserId: {_eq: $userId}}]}, originalEftDate: {_gte: $startDate, _lte: $endDate}}\n  ) {\n    aggregate {\n      count\n    }\n  }\n}\n\nquery GetPayrollAssignmentDetails($payrollId: uuid!, $startDate: date!, $endDate: date!) {\n  payrollById(id: $payrollId) {\n    id\n    name\n    processingTime\n    processingDaysBeforeEft\n    status\n    client {\n      id\n      name\n    }\n    primaryConsultant {\n      id\n      firstName\n      lastName\n      computedName\n      email\n    }\n    backupConsultant {\n      id\n      firstName\n      lastName\n      computedName\n      email\n    }\n    payrollDates(\n      where: {originalEftDate: {_gte: $startDate, _lte: $endDate}}\n      orderBy: {originalEftDate: ASC}\n    ) {\n      id\n      originalEftDate\n      processingDate\n    }\n  }\n}"): (typeof documents)["query GetConsultantPayrollWorkload($userId: uuid!, $startDate: date!, $endDate: date!) {\n  userById(id: $userId) {\n    id\n    firstName\n    lastName\n    computedName\n    email\n    role\n    defaultAdminTimePercentage\n  }\n  workSchedule(where: {userId: {_eq: $userId}}, orderBy: {workDay: ASC}) {\n    id\n    workDay\n    workHours\n    adminTimeHours\n    payrollCapacityHours\n    usesDefaultAdminTime\n  }\n  primaryPayrolls: payrolls(\n    where: {primaryConsultantUserId: {_eq: $userId}, status: {_in: [\"Active\", \"Implementation\", \"pending_approval\", \"approved\"]}}\n  ) {\n    id\n    name\n    processingTime\n    processingDaysBeforeEft\n    status\n    client {\n      id\n      name\n    }\n    payrollDates(\n      where: {originalEftDate: {_gte: $startDate, _lte: $endDate}}\n      orderBy: {originalEftDate: ASC}\n    ) {\n      id\n      originalEftDate\n      processingDate\n    }\n  }\n  backupPayrolls: payrolls(\n    where: {backupConsultantUserId: {_eq: $userId}, status: {_in: [\"Active\", \"Implementation\", \"pending_approval\", \"approved\"]}}\n  ) {\n    id\n    name\n    processingTime\n    processingDaysBeforeEft\n    status\n    client {\n      id\n      name\n    }\n    payrollDates(\n      where: {originalEftDate: {_gte: $startDate, _lte: $endDate}}\n      orderBy: {originalEftDate: ASC}\n    ) {\n      id\n      originalEftDate\n      processingDate\n    }\n  }\n}\n\nquery GetTeamPayrollWorkload($managerId: uuid!, $startDate: date!, $endDate: date!) {\n  teamMembers: users(\n    where: {managerId: {_eq: $managerId}, isStaff: {_eq: true}, isActive: {_eq: true}}\n    orderBy: {computedName: ASC}\n  ) {\n    id\n    firstName\n    lastName\n    computedName\n    email\n    role\n    defaultAdminTimePercentage\n    userWorkSchedules(orderBy: {workDay: ASC}) {\n      id\n      workDay\n      workHours\n      adminTimeHours\n      payrollCapacityHours\n      usesDefaultAdminTime\n    }\n    primaryConsultantPayrolls(\n      where: {status: {_in: [\"Active\", \"pending_approval\", \"Implementation\"]}}\n    ) {\n      id\n      name\n      processingTime\n      processingDaysBeforeEft\n      status\n      client {\n        id\n        name\n      }\n      payrollDates(\n        where: {originalEftDate: {_gte: $startDate, _lte: $endDate}}\n        orderBy: {originalEftDate: ASC}\n      ) {\n        id\n        originalEftDate\n        processingDate\n      }\n    }\n    backupConsultantPayrolls(\n      where: {status: {_in: [\"Active\", \"pending_approval\", \"Implementation\"]}}\n    ) {\n      id\n      name\n      processingTime\n      processingDaysBeforeEft\n      status\n      client {\n        id\n        name\n      }\n      payrollDates(\n        where: {originalEftDate: {_gte: $startDate, _lte: $endDate}}\n        orderBy: {originalEftDate: ASC}\n      ) {\n        id\n        originalEftDate\n        processingDate\n      }\n    }\n  }\n}\n\nquery GetPayrollWorkloadStats($userId: uuid!, $startDate: date!, $endDate: date!) {\n  workScheduleStats: workScheduleAggregate(where: {userId: {_eq: $userId}}) {\n    aggregate {\n      sum {\n        workHours\n        adminTimeHours\n        payrollCapacityHours\n      }\n      avg {\n        workHours\n        payrollCapacityHours\n      }\n      count\n    }\n  }\n  primaryPayrollCount: payrollsAggregate(\n    where: {primaryConsultantUserId: {_eq: $userId}, status: {_in: [\"Active\", \"Implementation\", \"pending_approval\", \"approved\"]}}\n  ) {\n    aggregate {\n      count\n      sum {\n        processingTime\n      }\n    }\n  }\n  backupPayrollCount: payrollsAggregate(\n    where: {backupConsultantUserId: {_eq: $userId}, status: {_in: [\"Active\", \"Implementation\", \"pending_approval\", \"approved\"]}}\n  ) {\n    aggregate {\n      count\n      sum {\n        processingTime\n      }\n    }\n  }\n  upcomingPayrollDates: payrollDatesAggregate(\n    where: {relatedPayroll: {_or: [{primaryConsultantUserId: {_eq: $userId}}, {backupConsultantUserId: {_eq: $userId}}]}, originalEftDate: {_gte: $startDate, _lte: $endDate}}\n  ) {\n    aggregate {\n      count\n    }\n  }\n}\n\nquery GetPayrollAssignmentDetails($payrollId: uuid!, $startDate: date!, $endDate: date!) {\n  payrollById(id: $payrollId) {\n    id\n    name\n    processingTime\n    processingDaysBeforeEft\n    status\n    client {\n      id\n      name\n    }\n    primaryConsultant {\n      id\n      firstName\n      lastName\n      computedName\n      email\n    }\n    backupConsultant {\n      id\n      firstName\n      lastName\n      computedName\n      email\n    }\n    payrollDates(\n      where: {originalEftDate: {_gte: $startDate, _lte: $endDate}}\n      orderBy: {originalEftDate: ASC}\n    ) {\n      id\n      originalEftDate\n      processingDate\n    }\n  }\n}"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "fragment UserMinimal on users {\n  id\n  firstName\n  lastName\n  computedName\n  email\n}\n\nfragment UserCoreShared on users {\n  ...UserMinimal\n  role\n  isActive\n}\n\nfragment UserBasic on users {\n  ...UserCoreShared\n  clerkUserId\n  createdAt\n  updatedAt\n}\n\nfragment UserBase on users {\n  ...UserBasic\n}\n\nfragment UserWithRole on users {\n  ...UserBasic\n  username\n  isStaff\n}\n\nfragment UserProfile on users {\n  ...UserWithRole\n  clerkUserId\n  image\n  managerId\n  deactivatedAt\n  deactivatedBy\n  managerUser {\n    ...UserMinimal\n  }\n}\n\nfragment UserSearchResult on users {\n  ...UserCoreShared\n  username\n  isStaff\n}\n\nfragment ClientMinimal on clients {\n  id\n  name\n}\n\nfragment ClientBase on clients {\n  id\n  name\n  active\n  contactEmail\n  contactPerson\n  contactPhone\n  createdAt\n}\n\nfragment ClientWithStats on clients {\n  ...ClientBase\n  currentEmployeeCount: payrollsAggregate(\n    where: {supersededDate: {_isNull: true}}\n  ) {\n    aggregate {\n      sum {\n        employeeCount\n      }\n    }\n  }\n  activePayrollCount: payrollsAggregate(\n    where: {supersededDate: {_isNull: true}, status: {_eq: \"Active\"}}\n  ) {\n    aggregate {\n      count\n    }\n  }\n}\n\nfragment ClientListBase on clients {\n  ...ClientBase\n  payrollCount: payrollsAggregate(where: {supersededDate: {_isNull: true}}) {\n    aggregate {\n      count\n    }\n  }\n}\n\nfragment PayrollMinimal on payrolls {\n  id\n  name\n  employeeCount\n  status\n}\n\nfragment PayrollBase on payrolls {\n  id\n  name\n  employeeCount\n  status\n  payrollSystem\n  processingTime\n  processingDaysBeforeEft\n  versionNumber\n  supersededDate\n  createdAt\n  updatedAt\n}\n\nfragment PayrollWithClient on payrolls {\n  ...PayrollBase\n  clientId\n  client {\n    id\n    name\n    active\n  }\n}\n\nfragment PayrollListItem on payrolls {\n  ...PayrollWithClient\n  primaryConsultantUserId\n  backupConsultantUserId\n  managerUserId\n  createdByUserId\n  cycleId\n  dateTypeId\n  dateValue\n  payrollCycle {\n    id\n    name\n    description\n  }\n  payrollDateType {\n    id\n    name\n    description\n  }\n  primaryConsultant {\n    ...UserMinimal\n  }\n  backupConsultant {\n    ...UserMinimal\n  }\n  manager {\n    ...UserMinimal\n  }\n}\n\nfragment PayrollWithDates on payrolls {\n  ...PayrollBase\n  goLiveDate\n  payrollDates(orderBy: {originalEftDate: ASC}) {\n    id\n    originalEftDate\n    adjustedEftDate\n    notes\n  }\n}\n\nfragment PayrollFullDetail on payrolls {\n  ...PayrollWithDates\n  ...PayrollWithClient\n  dateTypeId\n  cycleId\n  dateValue\n  versionReason\n  supersededDate\n  parentPayrollId\n  parentPayroll {\n    id\n    versionNumber\n  }\n  childPayrolls(orderBy: {versionNumber: DESC}) {\n    id\n    versionNumber\n    versionReason\n    createdAt\n  }\n  primaryConsultant {\n    ...UserMinimal\n  }\n  backupConsultant {\n    ...UserMinimal\n  }\n  manager {\n    ...UserMinimal\n  }\n}\n\nfragment NoteWithAuthor on notes {\n  id\n  content\n  isImportant\n  createdAt\n  entityId\n  entityType\n  authorUser {\n    ...UserMinimal\n  }\n}\n\nfragment PermissionBase on permissions {\n  id\n  resourceId\n  description\n  legacyPermissionName\n  action\n}\n\nfragment RoleWithPermissions on roles {\n  id\n  name\n  displayName\n  description\n  isSystemRole\n  priority\n  assignedPermissions {\n    grantedPermission {\n      ...PermissionBase\n    }\n  }\n}\n\nfragment AuditLogEntry on auditLogs {\n  id\n  userId\n  userEmail\n  userRole\n  action\n  resourceType\n  resourceId\n  eventTime\n  success\n  errorMessage\n  ipAddress\n  userAgent\n  requestId\n  sessionId\n  metadata\n  oldValues\n  newValues\n  createdAt\n}\n\nfragment AuthEvent on authEvents {\n  id\n  userId\n  userEmail\n  eventType\n  eventTime\n  success\n  failureReason\n  ipAddress\n  userAgent\n  metadata\n}\n\nfragment DataAccessLog on dataAccessLogs {\n  id\n  userId\n  resourceType\n  resourceId\n  accessType\n  accessedAt\n  dataClassification\n  fieldsAccessed\n  rowCount\n  ipAddress\n  metadata\n}\n\nfragment PermissionChange on permissionChanges {\n  id\n  changedAt\n  changedByUserId\n  targetUserId\n  targetRoleId\n  changeType\n  permissionType\n  oldPermissions\n  newPermissions\n  reason\n  approvedByUserId\n}\n\nfragment PayrollDateInfo on payrollDates {\n  id\n  originalEftDate\n  adjustedEftDate\n  notes\n  createdAt\n}\n\nfragment PermissionOverrideInfo on permissionOverrides {\n  id\n  userId\n  role\n  resource\n  operation\n  granted\n  reason\n  conditions\n  expiresAt\n  createdBy\n  createdAt\n}"): (typeof documents)["fragment UserMinimal on users {\n  id\n  firstName\n  lastName\n  computedName\n  email\n}\n\nfragment UserCoreShared on users {\n  ...UserMinimal\n  role\n  isActive\n}\n\nfragment UserBasic on users {\n  ...UserCoreShared\n  clerkUserId\n  createdAt\n  updatedAt\n}\n\nfragment UserBase on users {\n  ...UserBasic\n}\n\nfragment UserWithRole on users {\n  ...UserBasic\n  username\n  isStaff\n}\n\nfragment UserProfile on users {\n  ...UserWithRole\n  clerkUserId\n  image\n  managerId\n  deactivatedAt\n  deactivatedBy\n  managerUser {\n    ...UserMinimal\n  }\n}\n\nfragment UserSearchResult on users {\n  ...UserCoreShared\n  username\n  isStaff\n}\n\nfragment ClientMinimal on clients {\n  id\n  name\n}\n\nfragment ClientBase on clients {\n  id\n  name\n  active\n  contactEmail\n  contactPerson\n  contactPhone\n  createdAt\n}\n\nfragment ClientWithStats on clients {\n  ...ClientBase\n  currentEmployeeCount: payrollsAggregate(\n    where: {supersededDate: {_isNull: true}}\n  ) {\n    aggregate {\n      sum {\n        employeeCount\n      }\n    }\n  }\n  activePayrollCount: payrollsAggregate(\n    where: {supersededDate: {_isNull: true}, status: {_eq: \"Active\"}}\n  ) {\n    aggregate {\n      count\n    }\n  }\n}\n\nfragment ClientListBase on clients {\n  ...ClientBase\n  payrollCount: payrollsAggregate(where: {supersededDate: {_isNull: true}}) {\n    aggregate {\n      count\n    }\n  }\n}\n\nfragment PayrollMinimal on payrolls {\n  id\n  name\n  employeeCount\n  status\n}\n\nfragment PayrollBase on payrolls {\n  id\n  name\n  employeeCount\n  status\n  payrollSystem\n  processingTime\n  processingDaysBeforeEft\n  versionNumber\n  supersededDate\n  createdAt\n  updatedAt\n}\n\nfragment PayrollWithClient on payrolls {\n  ...PayrollBase\n  clientId\n  client {\n    id\n    name\n    active\n  }\n}\n\nfragment PayrollListItem on payrolls {\n  ...PayrollWithClient\n  primaryConsultantUserId\n  backupConsultantUserId\n  managerUserId\n  createdByUserId\n  cycleId\n  dateTypeId\n  dateValue\n  payrollCycle {\n    id\n    name\n    description\n  }\n  payrollDateType {\n    id\n    name\n    description\n  }\n  primaryConsultant {\n    ...UserMinimal\n  }\n  backupConsultant {\n    ...UserMinimal\n  }\n  manager {\n    ...UserMinimal\n  }\n}\n\nfragment PayrollWithDates on payrolls {\n  ...PayrollBase\n  goLiveDate\n  payrollDates(orderBy: {originalEftDate: ASC}) {\n    id\n    originalEftDate\n    adjustedEftDate\n    notes\n  }\n}\n\nfragment PayrollFullDetail on payrolls {\n  ...PayrollWithDates\n  ...PayrollWithClient\n  dateTypeId\n  cycleId\n  dateValue\n  versionReason\n  supersededDate\n  parentPayrollId\n  parentPayroll {\n    id\n    versionNumber\n  }\n  childPayrolls(orderBy: {versionNumber: DESC}) {\n    id\n    versionNumber\n    versionReason\n    createdAt\n  }\n  primaryConsultant {\n    ...UserMinimal\n  }\n  backupConsultant {\n    ...UserMinimal\n  }\n  manager {\n    ...UserMinimal\n  }\n}\n\nfragment NoteWithAuthor on notes {\n  id\n  content\n  isImportant\n  createdAt\n  entityId\n  entityType\n  authorUser {\n    ...UserMinimal\n  }\n}\n\nfragment PermissionBase on permissions {\n  id\n  resourceId\n  description\n  legacyPermissionName\n  action\n}\n\nfragment RoleWithPermissions on roles {\n  id\n  name\n  displayName\n  description\n  isSystemRole\n  priority\n  assignedPermissions {\n    grantedPermission {\n      ...PermissionBase\n    }\n  }\n}\n\nfragment AuditLogEntry on auditLogs {\n  id\n  userId\n  userEmail\n  userRole\n  action\n  resourceType\n  resourceId\n  eventTime\n  success\n  errorMessage\n  ipAddress\n  userAgent\n  requestId\n  sessionId\n  metadata\n  oldValues\n  newValues\n  createdAt\n}\n\nfragment AuthEvent on authEvents {\n  id\n  userId\n  userEmail\n  eventType\n  eventTime\n  success\n  failureReason\n  ipAddress\n  userAgent\n  metadata\n}\n\nfragment DataAccessLog on dataAccessLogs {\n  id\n  userId\n  resourceType\n  resourceId\n  accessType\n  accessedAt\n  dataClassification\n  fieldsAccessed\n  rowCount\n  ipAddress\n  metadata\n}\n\nfragment PermissionChange on permissionChanges {\n  id\n  changedAt\n  changedByUserId\n  targetUserId\n  targetRoleId\n  changeType\n  permissionType\n  oldPermissions\n  newPermissions\n  reason\n  approvedByUserId\n}\n\nfragment PayrollDateInfo on payrollDates {\n  id\n  originalEftDate\n  adjustedEftDate\n  notes\n  createdAt\n}\n\nfragment PermissionOverrideInfo on permissionOverrides {\n  id\n  userId\n  role\n  resource\n  operation\n  granted\n  reason\n  conditions\n  expiresAt\n  createdBy\n  createdAt\n}"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "mutation LogAuditEvent($input: auditLogsInsertInput!) {\n  insertAuditLogsOne: insertAuditLog(object: $input) {\n    id\n    eventTime\n  }\n}\n\nmutation InsertFile($input: filesInsertInput!) {\n  insertFile(object: $input) {\n    id\n    filename\n    bucket\n    objectKey\n    size\n    mimetype\n    url\n    clientId\n    payrollId\n    uploadedBy\n    category\n    isPublic\n    metadata\n    fileType\n    createdAt\n  }\n}\n\nmutation UpdateFileMetadata($id: uuid!, $updates: filesSetInput!) {\n  updateFileById(pkColumns: {id: $id}, _set: $updates) {\n    id\n    filename\n    bucket\n    objectKey\n    size\n    mimetype\n    url\n    clientId\n    payrollId\n    uploadedBy\n    category\n    isPublic\n    metadata\n    fileType\n    createdAt\n  }\n}\n\nmutation DeleteFile($id: uuid!) {\n  deleteFileById(id: $id) {\n    id\n    filename\n    objectKey\n  }\n}\n\nmutation RefreshData {\n  __typename\n}"): (typeof documents)["mutation LogAuditEvent($input: auditLogsInsertInput!) {\n  insertAuditLogsOne: insertAuditLog(object: $input) {\n    id\n    eventTime\n  }\n}\n\nmutation InsertFile($input: filesInsertInput!) {\n  insertFile(object: $input) {\n    id\n    filename\n    bucket\n    objectKey\n    size\n    mimetype\n    url\n    clientId\n    payrollId\n    uploadedBy\n    category\n    isPublic\n    metadata\n    fileType\n    createdAt\n  }\n}\n\nmutation UpdateFileMetadata($id: uuid!, $updates: filesSetInput!) {\n  updateFileById(pkColumns: {id: $id}, _set: $updates) {\n    id\n    filename\n    bucket\n    objectKey\n    size\n    mimetype\n    url\n    clientId\n    payrollId\n    uploadedBy\n    category\n    isPublic\n    metadata\n    fileType\n    createdAt\n  }\n}\n\nmutation DeleteFile($id: uuid!) {\n  deleteFileById(id: $id) {\n    id\n    filename\n    objectKey\n  }\n}\n\nmutation RefreshData {\n  __typename\n}"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "query GetDashboardMetrics($userId: uuid!) {\n  clientsAggregate(where: {active: {_eq: true}}) {\n    aggregate {\n      count\n    }\n  }\n  activePayrollsAggregate: payrollsAggregate(\n    where: {supersededDate: {_isNull: true}, status: {_nin: [\"Completed\", \"Failed\"]}}\n  ) {\n    aggregate {\n      count\n    }\n  }\n  totalEmployeesAggregate: payrollsAggregate(\n    where: {supersededDate: {_isNull: true}}\n  ) {\n    aggregate {\n      sum {\n        employeeCount\n      }\n    }\n  }\n  upcomingPayrolls: payrolls(\n    where: {supersededDate: {_isNull: true}, status: {_nin: [\"Completed\", \"Failed\", \"Cancelled\"]}}\n    orderBy: {updatedAt: DESC}\n    limit: 5\n  ) {\n    ...PayrollMinimal\n    client {\n      ...ClientMinimal\n    }\n  }\n}\n\nquery GetDashboardStatsOptimized($limit: Int = 10) {\n  clientsAggregate {\n    aggregate {\n      count\n    }\n  }\n  totalPayrolls: payrollsAggregate(where: {supersededDate: {_isNull: true}}) {\n    aggregate {\n      count\n    }\n  }\n  activePayrolls: payrollsAggregate(\n    where: {supersededDate: {_isNull: true}, status: {_eq: \"Active\"}}\n  ) {\n    aggregate {\n      count\n    }\n  }\n  upcomingPayrolls: payrolls(\n    where: {supersededDate: {_isNull: true}, status: {_eq: \"Active\"}, payrollDates: {adjustedEftDate: {_gte: \"now()\"}}}\n    orderBy: {updatedAt: DESC}\n    limit: $limit\n  ) {\n    id\n    name\n    status\n    client {\n      id\n      name\n    }\n    nextEftDate: payrollDates(\n      where: {adjustedEftDate: {_gte: \"now()\"}}\n      orderBy: {adjustedEftDate: ASC}\n      limit: 1\n    ) {\n      originalEftDate\n      adjustedEftDate\n      processingDate\n    }\n  }\n}\n\nquery GetClientsDashboardStats {\n  activeClientsCount: clientsAggregate(where: {active: {_eq: true}}) {\n    aggregate {\n      count\n    }\n  }\n  totalPayrollsCount: payrollsAggregate(where: {supersededDate: {_isNull: true}}) {\n    aggregate {\n      count\n    }\n  }\n  totalEmployeesSum: payrollsAggregate(where: {supersededDate: {_isNull: true}}) {\n    aggregate {\n      sum {\n        employeeCount\n      }\n    }\n  }\n  clientsNeedingAttention: clients(\n    where: {active: {_eq: true}, _not: {payrolls: {supersededDate: {_isNull: true}}}}\n  ) {\n    ...ClientMinimal\n  }\n}\n\nquery GetCurrentUser($userId: uuid!) {\n  user: userById(id: $userId) {\n    ...UserProfile\n  }\n}\n\nquery GetUsersForDropdown($role: user_role) {\n  users(\n    where: {isActive: {_eq: true}, role: {_eq: $role}}\n    orderBy: {computedName: ASC}\n  ) {\n    ...UserMinimal\n  }\n}\n\nquery GetSystemHealth {\n  databaseHealth: users(limit: 1) {\n    id\n  }\n  recentActivity: auditLogsAggregate(\n    where: {eventTime: {_gte: \"now() - interval '1 hour'\"}}\n  ) {\n    aggregate {\n      count\n    }\n  }\n}\n\nquery GlobalSearch($searchTerm: String!) {\n  clients(\n    where: {_or: [{name: {_ilike: $searchTerm}}, {contactEmail: {_ilike: $searchTerm}}]}\n    limit: 5\n  ) {\n    ...ClientMinimal\n  }\n  users(\n    where: {_or: [{computedName: {_ilike: $searchTerm}}, {firstName: {_ilike: $searchTerm}}, {lastName: {_ilike: $searchTerm}}, {email: {_ilike: $searchTerm}}]}\n    limit: 5\n  ) {\n    ...UserMinimal\n  }\n  payrolls(\n    where: {client: {name: {_ilike: $searchTerm}}, supersededDate: {_isNull: true}}\n    limit: 5\n  ) {\n    ...PayrollMinimal\n    client {\n      ...ClientMinimal\n    }\n  }\n}\n\nquery GetFileById($id: uuid!) {\n  fileById(id: $id) {\n    id\n    filename\n    bucket\n    objectKey\n    size\n    mimetype\n    url\n    clientId\n    payrollId\n    uploadedBy\n    category\n    isPublic\n    metadata\n    fileType\n    createdAt\n    client {\n      name\n    }\n    payroll {\n      name\n    }\n    uploader {\n      firstName\n      lastName\n      computedName\n    }\n  }\n}\n\nquery ListFiles($where: filesBoolExp, $limit: Int, $offset: Int, $orderBy: [filesOrderBy!]) {\n  files(where: $where, limit: $limit, offset: $offset, orderBy: $orderBy) {\n    id\n    filename\n    bucket\n    objectKey\n    size\n    mimetype\n    url\n    clientId\n    payrollId\n    uploadedBy\n    category\n    isPublic\n    metadata\n    fileType\n    createdAt\n    client {\n      name\n    }\n    payroll {\n      name\n    }\n    uploader {\n      firstName\n      lastName\n      computedName\n    }\n  }\n  filesAggregate(where: $where) {\n    aggregate {\n      count\n    }\n  }\n}"): (typeof documents)["query GetDashboardMetrics($userId: uuid!) {\n  clientsAggregate(where: {active: {_eq: true}}) {\n    aggregate {\n      count\n    }\n  }\n  activePayrollsAggregate: payrollsAggregate(\n    where: {supersededDate: {_isNull: true}, status: {_nin: [\"Completed\", \"Failed\"]}}\n  ) {\n    aggregate {\n      count\n    }\n  }\n  totalEmployeesAggregate: payrollsAggregate(\n    where: {supersededDate: {_isNull: true}}\n  ) {\n    aggregate {\n      sum {\n        employeeCount\n      }\n    }\n  }\n  upcomingPayrolls: payrolls(\n    where: {supersededDate: {_isNull: true}, status: {_nin: [\"Completed\", \"Failed\", \"Cancelled\"]}}\n    orderBy: {updatedAt: DESC}\n    limit: 5\n  ) {\n    ...PayrollMinimal\n    client {\n      ...ClientMinimal\n    }\n  }\n}\n\nquery GetDashboardStatsOptimized($limit: Int = 10) {\n  clientsAggregate {\n    aggregate {\n      count\n    }\n  }\n  totalPayrolls: payrollsAggregate(where: {supersededDate: {_isNull: true}}) {\n    aggregate {\n      count\n    }\n  }\n  activePayrolls: payrollsAggregate(\n    where: {supersededDate: {_isNull: true}, status: {_eq: \"Active\"}}\n  ) {\n    aggregate {\n      count\n    }\n  }\n  upcomingPayrolls: payrolls(\n    where: {supersededDate: {_isNull: true}, status: {_eq: \"Active\"}, payrollDates: {adjustedEftDate: {_gte: \"now()\"}}}\n    orderBy: {updatedAt: DESC}\n    limit: $limit\n  ) {\n    id\n    name\n    status\n    client {\n      id\n      name\n    }\n    nextEftDate: payrollDates(\n      where: {adjustedEftDate: {_gte: \"now()\"}}\n      orderBy: {adjustedEftDate: ASC}\n      limit: 1\n    ) {\n      originalEftDate\n      adjustedEftDate\n      processingDate\n    }\n  }\n}\n\nquery GetClientsDashboardStats {\n  activeClientsCount: clientsAggregate(where: {active: {_eq: true}}) {\n    aggregate {\n      count\n    }\n  }\n  totalPayrollsCount: payrollsAggregate(where: {supersededDate: {_isNull: true}}) {\n    aggregate {\n      count\n    }\n  }\n  totalEmployeesSum: payrollsAggregate(where: {supersededDate: {_isNull: true}}) {\n    aggregate {\n      sum {\n        employeeCount\n      }\n    }\n  }\n  clientsNeedingAttention: clients(\n    where: {active: {_eq: true}, _not: {payrolls: {supersededDate: {_isNull: true}}}}\n  ) {\n    ...ClientMinimal\n  }\n}\n\nquery GetCurrentUser($userId: uuid!) {\n  user: userById(id: $userId) {\n    ...UserProfile\n  }\n}\n\nquery GetUsersForDropdown($role: user_role) {\n  users(\n    where: {isActive: {_eq: true}, role: {_eq: $role}}\n    orderBy: {computedName: ASC}\n  ) {\n    ...UserMinimal\n  }\n}\n\nquery GetSystemHealth {\n  databaseHealth: users(limit: 1) {\n    id\n  }\n  recentActivity: auditLogsAggregate(\n    where: {eventTime: {_gte: \"now() - interval '1 hour'\"}}\n  ) {\n    aggregate {\n      count\n    }\n  }\n}\n\nquery GlobalSearch($searchTerm: String!) {\n  clients(\n    where: {_or: [{name: {_ilike: $searchTerm}}, {contactEmail: {_ilike: $searchTerm}}]}\n    limit: 5\n  ) {\n    ...ClientMinimal\n  }\n  users(\n    where: {_or: [{computedName: {_ilike: $searchTerm}}, {firstName: {_ilike: $searchTerm}}, {lastName: {_ilike: $searchTerm}}, {email: {_ilike: $searchTerm}}]}\n    limit: 5\n  ) {\n    ...UserMinimal\n  }\n  payrolls(\n    where: {client: {name: {_ilike: $searchTerm}}, supersededDate: {_isNull: true}}\n    limit: 5\n  ) {\n    ...PayrollMinimal\n    client {\n      ...ClientMinimal\n    }\n  }\n}\n\nquery GetFileById($id: uuid!) {\n  fileById(id: $id) {\n    id\n    filename\n    bucket\n    objectKey\n    size\n    mimetype\n    url\n    clientId\n    payrollId\n    uploadedBy\n    category\n    isPublic\n    metadata\n    fileType\n    createdAt\n    client {\n      name\n    }\n    payroll {\n      name\n    }\n    uploader {\n      firstName\n      lastName\n      computedName\n    }\n  }\n}\n\nquery ListFiles($where: filesBoolExp, $limit: Int, $offset: Int, $orderBy: [filesOrderBy!]) {\n  files(where: $where, limit: $limit, offset: $offset, orderBy: $orderBy) {\n    id\n    filename\n    bucket\n    objectKey\n    size\n    mimetype\n    url\n    clientId\n    payrollId\n    uploadedBy\n    category\n    isPublic\n    metadata\n    fileType\n    createdAt\n    client {\n      name\n    }\n    payroll {\n      name\n    }\n    uploader {\n      firstName\n      lastName\n      computedName\n    }\n  }\n  filesAggregate(where: $where) {\n    aggregate {\n      count\n    }\n  }\n}"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "subscription RecentActivity($resourceTypes: [String!]) {\n  auditLogs(\n    where: {resourceType: {_in: $resourceTypes}, eventTime: {_gte: \"now() - interval '5 minutes'\"}}\n    orderBy: {eventTime: DESC}\n    limit: 20\n  ) {\n    ...AuditLogEntry\n  }\n}\n\nsubscription AuthenticationEvents($userId: uuid) {\n  authEvents(\n    where: {userId: {_eq: $userId}, eventTime: {_gte: \"now() - interval '10 minutes'\"}}\n    orderBy: {eventTime: DESC}\n  ) {\n    ...AuthEvent\n  }\n}\n\nsubscription SensitiveDataAccess($resourceTypes: [String!]!) {\n  dataAccessLogs(\n    where: {resourceType: {_in: $resourceTypes}, accessedAt: {_gte: \"now() - interval '10 minutes'\"}}\n    orderBy: {accessedAt: DESC}\n  ) {\n    ...DataAccessLog\n  }\n}\n\nsubscription PermissionChangeStream {\n  permissionChanges(orderBy: {changedAt: DESC}, limit: 10) {\n    ...PermissionChange\n  }\n}"): (typeof documents)["subscription RecentActivity($resourceTypes: [String!]) {\n  auditLogs(\n    where: {resourceType: {_in: $resourceTypes}, eventTime: {_gte: \"now() - interval '5 minutes'\"}}\n    orderBy: {eventTime: DESC}\n    limit: 20\n  ) {\n    ...AuditLogEntry\n  }\n}\n\nsubscription AuthenticationEvents($userId: uuid) {\n  authEvents(\n    where: {userId: {_eq: $userId}, eventTime: {_gte: \"now() - interval '10 minutes'\"}}\n    orderBy: {eventTime: DESC}\n  ) {\n    ...AuthEvent\n  }\n}\n\nsubscription SensitiveDataAccess($resourceTypes: [String!]!) {\n  dataAccessLogs(\n    where: {resourceType: {_in: $resourceTypes}, accessedAt: {_gte: \"now() - interval '10 minutes'\"}}\n    orderBy: {accessedAt: DESC}\n  ) {\n    ...DataAccessLog\n  }\n}\n\nsubscription PermissionChangeStream {\n  permissionChanges(orderBy: {changedAt: DESC}, limit: 10) {\n    ...PermissionChange\n  }\n}"];

export function gql(source: string) {
  return (documents as any)[source] ?? {};
}

export type DocumentType<TDocumentNode extends DocumentNode<any, any>> = TDocumentNode extends DocumentNode<  infer TType,  any>  ? TType  : never;