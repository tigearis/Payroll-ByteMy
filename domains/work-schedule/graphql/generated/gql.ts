/* eslint-disable */
import * as types from './graphql';
import { TypedDocumentNode as DocumentNode } from '@graphql-typed-document-node/core';

/**
 * Map of all GraphQL operations in the project.
 *
 * This map has several performance disadvantages:
 * 1. It is not tree-shakeable, so it will include all operations in the project.
 * 2. It is not minifiable, so the string of a GraphQL query will be multiple times inside the bundle.
 * 3. It does not support dead code elimination, so it will add unused operations.
 *
 * Therefore it is highly recommended to use the babel or swc plugin for production.
 * Learn more about it here: https://the-guild.dev/graphql/codegen/plugins/presets/preset-client#reducing-bundle-size
 */
type Documents = {
    "fragment WorkScheduleCore on workSchedules {\n  id\n  userId\n  workDay\n  workHours\n  createdAt\n  updatedAt\n}\n\nfragment WorkScheduleBasic on workSchedules {\n  ...WorkScheduleCore\n}\n\nfragment WorkScheduleMinimal on workSchedules {\n  id\n  userId\n  workDay\n  workHours\n}\n\nfragment WorkScheduleWithUser on workSchedules {\n  ...WorkScheduleBasic\n  scheduleOwner {\n    id\n    name\n    email\n    role\n  }\n}\n\nfragment WorkScheduleWithUserComplete on workSchedules {\n  ...WorkScheduleBasic\n  workScheduleUser {\n    id\n    name\n    email\n    role\n    managerId\n    managerUser {\n      id\n      name\n      email\n    }\n  }\n}\n\nfragment WorkScheduleComplete on workSchedules {\n  ...WorkScheduleWithUserComplete\n}\n\nfragment TeamWorkSchedule on workSchedules {\n  ...WorkScheduleBasic\n  scheduleOwner {\n    id\n    name\n    email\n    role\n    managerId\n  }\n}\n\nfragment ManagerWorkScheduleView on workSchedules {\n  ...WorkScheduleBasic\n  workScheduleUser {\n    id\n    name\n    email\n    role\n  }\n}\n\nfragment WorkScheduleListItem on workSchedules {\n  ...WorkScheduleMinimal\n  createdAt\n  updatedAt\n  scheduleOwner {\n    id\n    name\n    role\n  }\n}\n\nfragment WorkScheduleTableRow on workSchedules {\n  ...WorkScheduleListItem\n}\n\nfragment WorkScheduleDashboardCard on workSchedules {\n  ...WorkScheduleMinimal\n  scheduleOwner {\n    id\n    name\n  }\n}\n\nfragment WorkScheduleCalendarItem on workSchedules {\n  ...WorkScheduleMinimal\n  scheduleOwner {\n    id\n    name\n  }\n}\n\nfragment WorkScheduleWeeklyView on workSchedules {\n  ...WorkScheduleMinimal\n  createdAt\n  updatedAt\n}\n\nfragment WorkScheduleMonthlyView on workSchedules {\n  id\n  workDay\n  workHours\n  scheduleOwner {\n    id\n    name\n  }\n}\n\nfragment WorkScheduleCapacity on workSchedules {\n  id\n  workDay\n  workHours\n  scheduleOwner {\n    id\n    name\n    role\n  }\n}\n\nfragment WorkScheduleConflictCheck on workSchedules {\n  id\n  userId\n  workDay\n  workHours\n  scheduleOwner {\n    id\n    name\n  }\n}\n\nfragment WorkScheduleForAudit on workSchedules {\n  id\n  userId\n  workDay\n  workHours\n  createdAt\n  updatedAt\n}\n\nfragment WorkScheduleChangeLog on workSchedules {\n  id\n  userId\n  workDay\n  workHours\n  updatedAt\n}\n\nfragment WorkSchedulePattern on workSchedules {\n  workDay\n  workHours\n}\n\nfragment MyWorkSchedule on workSchedules {\n  ...WorkScheduleBasic\n}": typeof types.WorkScheduleCoreFragmentDoc,
    "mutation CreateWorkSchedule($object: workSchedulesInsertInput!) {\n  insertWorkSchedule(object: $object) {\n    ...WorkScheduleComplete\n  }\n}\n\nmutation UpdateWorkSchedule($id: uuid!, $set: workSchedulesSetInput!) {\n  updateWorkScheduleById(pkColumns: {id: $id}, _set: $set) {\n    ...WorkScheduleComplete\n  }\n}\n\nmutation DeleteWorkSchedule($id: uuid!) {\n  deleteWorkScheduleById(id: $id) {\n    id\n    userId\n    workDay\n    workHours\n  }\n}\n\nmutation CreateDailySchedule($userId: uuid!, $workDay: String!, $workHours: numeric!) {\n  insertWorkSchedule(\n    object: {userId: $userId, workDay: $workDay, workHours: $workHours}\n  ) {\n    ...WorkScheduleWithUser\n  }\n}\n\nmutation CreateWeeklySchedule($userId: uuid!, $schedules: [workSchedulesInsertInput!]!) {\n  bulkInsertWorkSchedules(objects: $schedules) {\n    returning {\n      ...WorkScheduleBasic\n    }\n    affectedRows\n  }\n}\n\nmutation UpdateDailySchedule($userId: uuid!, $workDay: String!, $workHours: numeric!) {\n  bulkUpdateWorkSchedules(\n    where: {userId: {_eq: $userId}, workDay: {_eq: $workDay}}\n    _set: {workHours: $workHours, updatedAt: \"now()\"}\n  ) {\n    returning {\n      ...WorkScheduleBasic\n    }\n    affectedRows\n  }\n}\n\nmutation UpdateUserScheduleHours($userId: uuid!, $workDay: String!, $newHours: numeric!) {\n  bulkUpdateWorkSchedules(\n    where: {userId: {_eq: $userId}, workDay: {_eq: $workDay}}\n    _set: {workHours: $newHours, updatedAt: \"now()\"}\n  ) {\n    returning {\n      ...WorkScheduleBasic\n    }\n    affectedRows\n  }\n}\n\nmutation AdjustScheduleHours($id: uuid!, $adjustment: numeric!) {\n  updateWorkScheduleById(\n    pkColumns: {id: $id}\n    _inc: {workHours: $adjustment}\n    _set: {updatedAt: \"now()\"}\n  ) {\n    ...WorkScheduleBasic\n  }\n}\n\nmutation UpdateScheduleDateRange($userId: uuid!, $startDate: String!, $endDate: String!, $newHours: numeric!) {\n  bulkUpdateWorkSchedules(\n    where: {userId: {_eq: $userId}, workDay: {_gte: $startDate, _lte: $endDate}}\n    _set: {workHours: $newHours, updatedAt: \"now()\"}\n  ) {\n    returning {\n      ...WorkScheduleBasic\n    }\n    affectedRows\n  }\n}\n\nmutation CancelSchedule($id: uuid!) {\n  updateWorkScheduleById(\n    pkColumns: {id: $id}\n    _set: {workHours: 0, updatedAt: \"now()\"}\n  ) {\n    ...WorkScheduleBasic\n  }\n}\n\nmutation CancelDailySchedule($userId: uuid!, $workDay: String!) {\n  bulkUpdateWorkSchedules(\n    where: {userId: {_eq: $userId}, workDay: {_eq: $workDay}}\n    _set: {workHours: 0, updatedAt: \"now()\"}\n  ) {\n    returning {\n      ...WorkScheduleBasic\n    }\n    affectedRows\n  }\n}\n\nmutation RemoveSchedule($id: uuid!) {\n  deleteWorkScheduleById(id: $id) {\n    id\n    userId\n    workDay\n    workHours\n  }\n}\n\nmutation RemoveDailySchedule($userId: uuid!, $workDay: String!) {\n  bulkDeleteWorkSchedules(\n    where: {userId: {_eq: $userId}, workDay: {_eq: $workDay}}\n  ) {\n    affectedRows\n  }\n}\n\nmutation UpdateWeeklySchedule($userId: uuid!, $startDate: String!, $endDate: String!, $schedules: [workSchedulesInsertInput!]!) {\n  bulkDeleteWorkSchedules(\n    where: {userId: {_eq: $userId}, workDay: {_gte: $startDate, _lte: $endDate}}\n  ) {\n    affectedRows\n  }\n  bulkInsertWorkSchedules(objects: $schedules) {\n    returning {\n      ...WorkScheduleBasic\n    }\n    affectedRows\n  }\n}\n\nmutation BulkUpdateScheduleHours($userIds: [uuid!]!, $workDay: String!, $workHours: numeric!) {\n  bulkUpdateWorkSchedules(\n    where: {userId: {_in: $userIds}, workDay: {_eq: $workDay}}\n    _set: {workHours: $workHours, updatedAt: \"now()\"}\n  ) {\n    returning {\n      ...WorkScheduleBasic\n    }\n    affectedRows\n  }\n}\n\nmutation BulkCreateSchedules($schedules: [workSchedulesInsertInput!]!) {\n  bulkInsertWorkSchedules(objects: $schedules) {\n    returning {\n      ...WorkScheduleBasic\n    }\n    affectedRows\n  }\n}\n\nmutation BulkDeleteSchedules($scheduleIds: [uuid!]!) {\n  bulkDeleteWorkSchedules(where: {id: {_in: $scheduleIds}}) {\n    affectedRows\n  }\n}\n\nmutation BulkCancelSchedules($scheduleIds: [uuid!]!) {\n  bulkUpdateWorkSchedules(\n    where: {id: {_in: $scheduleIds}}\n    _set: {workHours: 0, updatedAt: \"now()\"}\n  ) {\n    returning {\n      ...WorkScheduleBasic\n    }\n    affectedRows\n  }\n}\n\nmutation UpdateTeamSchedule($managerUserId: uuid!, $workDay: String!, $defaultHours: numeric!) {\n  bulkUpdateWorkSchedules(\n    where: {scheduleOwner: {managerId: {_eq: $managerUserId}}, workDay: {_eq: $workDay}}\n    _set: {workHours: $defaultHours, updatedAt: \"now()\"}\n  ) {\n    returning {\n      ...TeamWorkSchedule\n    }\n    affectedRows\n  }\n}\n\nmutation AdjustScheduleForOvertime($id: uuid!, $overtimeHours: numeric!) {\n  updateWorkScheduleById(\n    pkColumns: {id: $id}\n    _inc: {workHours: $overtimeHours}\n    _set: {updatedAt: \"now()\"}\n  ) {\n    ...WorkScheduleBasic\n  }\n}\n\nmutation ReduceScheduleHours($id: uuid!, $reduction: numeric!) {\n  updateWorkScheduleById(\n    pkColumns: {id: $id}\n    _inc: {workHours: $reduction}\n    _set: {updatedAt: \"now()\"}\n  ) {\n    ...WorkScheduleBasic\n  }\n}\n\nmutation TransferSchedules($oldUserId: uuid!, $newUserId: uuid!) {\n  bulkUpdateWorkSchedules(\n    where: {userId: {_eq: $oldUserId}}\n    _set: {userId: $newUserId, updatedAt: \"now()\"}\n  ) {\n    returning {\n      ...WorkScheduleBasic\n    }\n    affectedRows\n  }\n}\n\nmutation PurgeOldSchedules($beforeDate: String!) {\n  bulkDeleteWorkSchedules(where: {workDay: {_lt: $beforeDate}}) {\n    affectedRows\n  }\n}\n\nmutation CleanupCancelledSchedules {\n  bulkDeleteWorkSchedules(\n    where: {workHours: {_eq: 0}, workDay: {_lt: \"now()::date\"}}\n  ) {\n    affectedRows\n  }\n}\n\nmutation CreateEmergencySchedule($userId: uuid!, $workDay: String!, $workHours: numeric!) {\n  insertWorkSchedule(\n    object: {userId: $userId, workDay: $workDay, workHours: $workHours}\n  ) {\n    ...WorkScheduleWithUser\n  }\n}": typeof types.CreateWorkScheduleDocument,
    "query GetWorkSchedules($limit: Int = 50, $offset: Int = 0, $where: workSchedulesBoolExp) {\n  workSchedules(\n    limit: $limit\n    offset: $offset\n    where: $where\n    orderBy: {workDay: ASC}\n  ) {\n    ...WorkScheduleListItem\n  }\n  workSchedulesAggregate(where: $where) {\n    aggregate {\n      count\n    }\n  }\n}\n\nquery GetWorkScheduleById($id: uuid!) {\n  workScheduleById(id: $id) {\n    ...WorkScheduleComplete\n  }\n}\n\nquery GetWorkScheduleBasic($id: uuid!) {\n  workScheduleById(id: $id) {\n    ...WorkScheduleBasic\n  }\n}\n\nquery GetUserWorkSchedule($userId: uuid!) {\n  workSchedules(where: {userId: {_eq: $userId}}, orderBy: {workDay: ASC}) {\n    ...WorkScheduleWithUser\n  }\n}\n\nquery GetMyWorkSchedule($userId: uuid!) {\n  workSchedules(where: {userId: {_eq: $userId}}, orderBy: {workDay: ASC}) {\n    ...MyWorkSchedule\n  }\n}\n\nquery GetUserScheduleByDay($userId: uuid!, $workDay: String!) {\n  workSchedules(where: {userId: {_eq: $userId}, workDay: {_eq: $workDay}}) {\n    ...WorkScheduleBasic\n  }\n}\n\nquery GetUserScheduleForWeek($userId: uuid!, $startDate: String!, $endDate: String!) {\n  workSchedules(\n    where: {userId: {_eq: $userId}, workDay: {_gte: $startDate, _lte: $endDate}}\n    orderBy: {workDay: ASC}\n  ) {\n    ...WorkScheduleWeeklyView\n  }\n}\n\nquery GetUserScheduleForMonth($userId: uuid!, $startDate: String!, $endDate: String!) {\n  workSchedules(\n    where: {userId: {_eq: $userId}, workDay: {_gte: $startDate, _lte: $endDate}}\n    orderBy: {workDay: ASC}\n  ) {\n    ...WorkScheduleMonthlyView\n  }\n}\n\nquery GetTeamWorkSchedules($managerUserId: uuid!) {\n  workSchedules(\n    where: {scheduleOwner: {managerId: {_eq: $managerUserId}}}\n    orderBy: {workDay: ASC}\n  ) {\n    ...TeamWorkSchedule\n  }\n}\n\nquery GetTeamScheduleByDay($managerUserId: uuid!, $workDay: String!) {\n  workSchedules(\n    where: {scheduleOwner: {managerId: {_eq: $managerUserId}}, workDay: {_eq: $workDay}}\n    orderBy: {scheduleOwner: {name: ASC}}\n  ) {\n    ...TeamWorkSchedule\n  }\n}\n\nquery GetTeamScheduleForWeek($managerUserId: uuid!, $startDate: String!, $endDate: String!) {\n  workSchedules(\n    where: {scheduleOwner: {managerId: {_eq: $managerUserId}}, workDay: {_gte: $startDate, _lte: $endDate}}\n    orderBy: [{workDay: ASC}, {scheduleOwner: {name: ASC}}]\n  ) {\n    ...TeamWorkSchedule\n  }\n}\n\nquery GetManagerScheduleOverview($managerUserId: uuid!) {\n  mySchedule: workSchedules(\n    where: {userId: {_eq: $managerUserId}}\n    orderBy: {workDay: ASC}\n  ) {\n    ...ManagerWorkScheduleView\n  }\n  teamSchedules: workSchedules(\n    where: {scheduleOwner: {managerId: {_eq: $managerUserId}}}\n    orderBy: [{workDay: ASC}, {scheduleOwner: {name: ASC}}]\n  ) {\n    ...TeamWorkSchedule\n  }\n}\n\nquery GetSchedulesByDateRange($startDate: String!, $endDate: String!) {\n  workSchedules(\n    where: {workDay: {_gte: $startDate, _lte: $endDate}}\n    orderBy: [{workDay: ASC}, {scheduleOwner: {name: ASC}}]\n  ) {\n    ...WorkScheduleCalendarItem\n  }\n}\n\nquery GetSchedulesByDay($workDay: String!) {\n  workSchedules(\n    where: {workDay: {_eq: $workDay}}\n    orderBy: {scheduleOwner: {name: ASC}}\n  ) {\n    ...WorkScheduleCalendarItem\n  }\n}\n\nquery GetWeeklySchedulePattern($userId: uuid!) {\n  workSchedules(\n    where: {userId: {_eq: $userId}}\n    orderBy: {workDay: ASC}\n    limit: 7\n  ) {\n    ...WorkScheduleMinimal\n  }\n}\n\nquery GetScheduleConflicts($workDay: String!, $excludeUserId: uuid) {\n  workSchedules(\n    where: {workDay: {_eq: $workDay}, userId: {_neq: $excludeUserId}}\n    orderBy: {workHours: DESC}\n  ) {\n    ...WorkScheduleConflictCheck\n  }\n}\n\nquery GetAvailableUsers($workDay: String!, $minHours: numeric = 4.0) {\n  workSchedules(\n    where: {workDay: {_eq: $workDay}, workHours: {_gte: $minHours}}\n    orderBy: {workHours: DESC}\n  ) {\n    ...WorkScheduleMinimal\n  }\n}\n\nquery GetTeamCapacity($managerUserId: uuid!, $workDay: String!) {\n  workSchedules(\n    where: {scheduleOwner: {managerId: {_eq: $managerUserId}}, workDay: {_eq: $workDay}}\n    orderBy: {workHours: DESC}\n  ) {\n    ...WorkScheduleCapacity\n  }\n}\n\nquery GetWeeklyTeamCapacity($managerUserId: uuid!, $startDate: String!, $endDate: String!) {\n  workSchedules(\n    where: {scheduleOwner: {managerId: {_eq: $managerUserId}}, workDay: {_gte: $startDate, _lte: $endDate}}\n    orderBy: [{workDay: ASC}, {workHours: DESC}]\n  ) {\n    ...WorkScheduleCapacity\n  }\n}\n\nquery GetWorkScheduleStats {\n  totalSchedules: workSchedulesAggregate {\n    aggregate {\n      count\n    }\n  }\n  avgWorkHours: workSchedulesAggregate {\n    aggregate {\n      avg {\n        workHours\n      }\n    }\n  }\n  maxWorkHours: workSchedulesAggregate {\n    aggregate {\n      max {\n        workHours\n      }\n    }\n  }\n  minWorkHours: workSchedulesAggregate {\n    aggregate {\n      min {\n        workHours\n      }\n    }\n  }\n}\n\nquery GetUserWorkHoursTotals($userId: uuid!, $startDate: String!, $endDate: String!) {\n  workSchedules(\n    where: {userId: {_eq: $userId}, workDay: {_gte: $startDate, _lte: $endDate}}\n  ) {\n    ...WorkScheduleMinimal\n  }\n  totalHours: workSchedulesAggregate(\n    where: {userId: {_eq: $userId}, workDay: {_gte: $startDate, _lte: $endDate}}\n  ) {\n    aggregate {\n      sum {\n        workHours\n      }\n    }\n  }\n}\n\nquery GetTeamWorkHoursSummary($managerUserId: uuid!, $startDate: String!, $endDate: String!) {\n  teamSchedules: workSchedules(\n    where: {scheduleOwner: {managerId: {_eq: $managerUserId}}, workDay: {_gte: $startDate, _lte: $endDate}}\n  ) {\n    ...WorkScheduleMinimal\n  }\n  teamHoursTotals: workSchedulesAggregate(\n    where: {scheduleOwner: {managerId: {_eq: $managerUserId}}, workDay: {_gte: $startDate, _lte: $endDate}}\n  ) {\n    aggregate {\n      sum {\n        workHours\n      }\n      avg {\n        workHours\n      }\n      count\n    }\n  }\n}\n\nquery GetWorkScheduleDashboardStats {\n  todaySchedules: workSchedulesAggregate(where: {workDay: {_eq: \"now()::date\"}}) {\n    aggregate {\n      count\n      sum {\n        workHours\n      }\n    }\n  }\n  thisWeekSchedules: workSchedulesAggregate(\n    where: {workDay: {_gte: \"date_trunc('week', now())::date\", _lte: \"(date_trunc('week', now()) + interval '6 days')::date\"}}\n  ) {\n    aggregate {\n      count\n      sum {\n        workHours\n      }\n    }\n  }\n  recentSchedules: workSchedules(orderBy: {createdAt: DESC}, limit: 5) {\n    ...WorkScheduleDashboardCard\n  }\n}\n\nquery SearchWorkSchedules($searchTerm: String!, $limit: Int = 50) {\n  workSchedules(\n    where: {scheduleOwner: {_or: [{name: {_ilike: $searchTerm}}, {email: {_ilike: $searchTerm}}]}}\n    orderBy: {workDay: DESC}\n    limit: $limit\n  ) {\n    ...WorkScheduleTableRow\n  }\n}\n\nquery FilterSchedulesByHours($minHours: numeric!, $maxHours: numeric!) {\n  workSchedules(\n    where: {workHours: {_gte: $minHours, _lte: $maxHours}}\n    orderBy: {workHours: DESC}\n  ) {\n    ...WorkScheduleListItem\n  }\n}\n\nquery GetSchedulesByRole($role: user_role!) {\n  workSchedules(\n    where: {scheduleOwner: {role: {_eq: $role}}}\n    orderBy: {workDay: DESC}\n  ) {\n    ...WorkScheduleListItem\n  }\n}\n\nquery GetUpcomingSchedules($userId: uuid!, $days: Int = 7) {\n  workSchedules(\n    where: {userId: {_eq: $userId}, workDay: {_gte: \"now()::date\", _lte: \"(now() + interval '${days} days')::date\"}}\n    orderBy: {workDay: ASC}\n  ) {\n    ...WorkScheduleBasic\n  }\n}\n\nquery GetRecentSchedules($userId: uuid!, $days: Int = 7) {\n  workSchedules(\n    where: {userId: {_eq: $userId}, workDay: {_gte: \"(now() - interval '${days} days')::date\", _lte: \"now()::date\"}}\n    orderBy: {workDay: DESC}\n  ) {\n    ...WorkScheduleBasic\n  }\n}\n\nquery GetTeamUpcomingSchedules($managerUserId: uuid!, $days: Int = 7) {\n  workSchedules(\n    where: {scheduleOwner: {managerId: {_eq: $managerUserId}}, workDay: {_gte: \"now()::date\", _lte: \"(now() + interval '${days} days')::date\"}}\n    orderBy: [{workDay: ASC}, {scheduleOwner: {name: ASC}}]\n  ) {\n    ...TeamWorkSchedule\n  }\n}\n\nquery GetUserSchedulePatterns($userId: uuid!, $weeks: Int = 4) {\n  workSchedules(\n    where: {userId: {_eq: $userId}, workDay: {_gte: \"(now() - interval '${weeks} weeks')::date\"}}\n    orderBy: {workDay: ASC}\n  ) {\n    ...WorkSchedulePattern\n  }\n}\n\nquery GetTeamSchedulePatterns($managerUserId: uuid!, $weeks: Int = 4) {\n  workSchedules(\n    where: {scheduleOwner: {managerId: {_eq: $managerUserId}}, workDay: {_gte: \"(now() - interval '${weeks} weeks')::date\"}}\n    orderBy: [{workDay: ASC}, {scheduleOwner: {name: ASC}}]\n  ) {\n    ...WorkSchedulePattern\n  }\n}\n\nquery GetWorkSchedulesForAudit($limit: Int = 100, $offset: Int = 0, $where: workSchedulesBoolExp = {}) {\n  workSchedules(\n    limit: $limit\n    offset: $offset\n    where: $where\n    orderBy: {createdAt: DESC}\n  ) {\n    ...WorkScheduleForAudit\n  }\n}\n\nquery GetScheduleChangeHistory($userId: uuid!, $limit: Int = 50) {\n  workSchedules(\n    where: {userId: {_eq: $userId}}\n    orderBy: {updatedAt: DESC}\n    limit: $limit\n  ) {\n    ...WorkScheduleChangeLog\n  }\n}\n\nquery GetWorkSchedulesPaginated($limit: Int = 20, $offset: Int = 0, $where: workSchedulesBoolExp = {}, $orderBy: [workSchedulesOrderBy!] = [{workDay: DESC}]) {\n  workSchedules(limit: $limit, offset: $offset, where: $where, orderBy: $orderBy) {\n    ...WorkScheduleTableRow\n  }\n  workSchedulesAggregate(where: $where) {\n    aggregate {\n      count\n    }\n  }\n}\n\nquery GetUserSchedulesPaginated($userId: uuid!, $limit: Int = 20, $offset: Int = 0, $where: workSchedulesBoolExp = {}) {\n  workSchedules(\n    where: {_and: [{userId: {_eq: $userId}}, $where]}\n    orderBy: {workDay: DESC}\n    limit: $limit\n    offset: $offset\n  ) {\n    ...WorkScheduleTableRow\n  }\n  userSchedulesAggregate: workSchedulesAggregate(\n    where: {_and: [{userId: {_eq: $userId}}, $where]}\n  ) {\n    aggregate {\n      count\n    }\n  }\n}\n\nquery GetWorkSchedulesQuickList($limit: Int = 100) {\n  workSchedules(orderBy: {workDay: DESC}, limit: $limit) {\n    ...WorkScheduleMinimal\n  }\n}\n\nquery GetUserSchedulesQuickList($userId: uuid!) {\n  workSchedules(where: {userId: {_eq: $userId}}, orderBy: {workDay: DESC}) {\n    ...WorkScheduleMinimal\n  }\n}\n\nquery GetTodaySchedulesQuickList {\n  workSchedules(\n    where: {workDay: {_eq: \"now()::date\"}}\n    orderBy: {scheduleOwner: {name: ASC}}\n  ) {\n    ...WorkScheduleMinimal\n  }\n}": typeof types.GetWorkSchedulesDocument,
    "subscription WorkSchedulesUpdates {\n  workSchedules(orderBy: {updatedAt: DESC}) {\n    ...WorkScheduleListItem\n  }\n}\n\nsubscription WorkScheduleUpdates($id: uuid!) {\n  workSchedules(where: {id: {_eq: $id}}) {\n    ...WorkScheduleComplete\n  }\n}\n\nsubscription UserWorkScheduleUpdates($userId: uuid!) {\n  workSchedules(where: {userId: {_eq: $userId}}, orderBy: {workDay: DESC}) {\n    ...WorkScheduleWithUser\n  }\n}\n\nsubscription MyWorkScheduleUpdates($userId: uuid!) {\n  workSchedules(where: {userId: {_eq: $userId}}, orderBy: {workDay: ASC}) {\n    ...MyWorkSchedule\n  }\n}\n\nsubscription MyScheduleChanges($userId: uuid!) {\n  workSchedules(\n    where: {userId: {_eq: $userId}, updatedAt: {_gte: \"now() - interval '1 hour'\"}}\n    orderBy: {updatedAt: DESC}\n  ) {\n    ...WorkScheduleBasic\n  }\n}\n\nsubscription MyUpcomingScheduleUpdates($userId: uuid!, $days: Int = 7) {\n  workSchedules(\n    where: {userId: {_eq: $userId}, workDay: {_gte: \"now()::date\", _lte: \"(now() + interval '${days} days')::date\"}}\n    orderBy: {workDay: ASC}\n  ) {\n    ...WorkScheduleBasic\n  }\n}\n\nsubscription TeamWorkScheduleUpdates($managerUserId: uuid!) {\n  workSchedules(\n    where: {scheduleOwner: {managerId: {_eq: $managerUserId}}}\n    orderBy: {workDay: DESC}\n  ) {\n    ...TeamWorkSchedule\n  }\n}\n\nsubscription TeamScheduleChanges($managerUserId: uuid!) {\n  workSchedules(\n    where: {scheduleOwner: {managerId: {_eq: $managerUserId}}, updatedAt: {_gte: \"now() - interval '1 hour'\"}}\n    orderBy: {updatedAt: DESC}\n  ) {\n    ...TeamWorkSchedule\n  }\n}\n\nsubscription TeamDailyScheduleUpdates($managerUserId: uuid!, $workDay: String!) {\n  workSchedules(\n    where: {scheduleOwner: {managerId: {_eq: $managerUserId}}, workDay: {_eq: $workDay}}\n    orderBy: {scheduleOwner: {name: ASC}}\n  ) {\n    ...TeamWorkSchedule\n  }\n}\n\nsubscription TeamWeeklyScheduleUpdates($managerUserId: uuid!, $startDate: String!, $endDate: String!) {\n  workSchedules(\n    where: {scheduleOwner: {managerId: {_eq: $managerUserId}}, workDay: {_gte: $startDate, _lte: $endDate}}\n    orderBy: [{workDay: ASC}, {scheduleOwner: {name: ASC}}]\n  ) {\n    ...TeamWorkSchedule\n  }\n}\n\nsubscription DailyScheduleUpdates($workDay: String!) {\n  workSchedules(\n    where: {workDay: {_eq: $workDay}}\n    orderBy: {scheduleOwner: {name: ASC}}\n  ) {\n    ...WorkScheduleBasic\n  }\n}\n\nsubscription TodayScheduleUpdates {\n  workSchedules(\n    where: {workDay: {_eq: \"now()::date\"}}\n    orderBy: {scheduleOwner: {name: ASC}}\n  ) {\n    ...WorkScheduleBasic\n  }\n}\n\nsubscription WeeklyScheduleUpdates($startDate: String!, $endDate: String!) {\n  workSchedules(\n    where: {workDay: {_gte: $startDate, _lte: $endDate}}\n    orderBy: [{workDay: ASC}, {scheduleOwner: {name: ASC}}]\n  ) {\n    ...WorkScheduleCalendarItem\n  }\n}\n\nsubscription MonthlyScheduleUpdates($startDate: String!, $endDate: String!) {\n  workSchedules(\n    where: {workDay: {_gte: $startDate, _lte: $endDate}}\n    orderBy: [{workDay: ASC}, {scheduleOwner: {name: ASC}}]\n  ) {\n    ...WorkScheduleMonthlyView\n  }\n}\n\nsubscription ScheduleAvailabilityUpdates($workDay: String!, $minHours: numeric = 4.0) {\n  workSchedules(\n    where: {workDay: {_eq: $workDay}, workHours: {_gte: $minHours}}\n    orderBy: {workHours: DESC}\n  ) {\n    ...WorkScheduleCapacity\n  }\n}\n\nsubscription TeamCapacityUpdates($managerUserId: uuid!, $workDay: String!) {\n  workSchedules(\n    where: {scheduleOwner: {managerId: {_eq: $managerUserId}}, workDay: {_eq: $workDay}}\n    orderBy: {workHours: DESC}\n  ) {\n    ...WorkScheduleCapacity\n  }\n}\n\nsubscription ScheduleConflictUpdates($workDay: String!) {\n  workSchedules(where: {workDay: {_eq: $workDay}}, orderBy: {workHours: DESC}) {\n    ...WorkScheduleConflictCheck\n  }\n}\n\nsubscription WeeklyCapacityUpdates($managerUserId: uuid!, $startDate: String!, $endDate: String!) {\n  workSchedules(\n    where: {scheduleOwner: {managerId: {_eq: $managerUserId}}, workDay: {_gte: $startDate, _lte: $endDate}}\n    orderBy: [{workDay: ASC}, {workHours: DESC}]\n  ) {\n    ...WorkScheduleCapacity\n  }\n}\n\nsubscription TodaySchedulesUpdates {\n  workSchedulesAggregate(where: {workDay: {_eq: \"now()::date\"}}) {\n    aggregate {\n      count\n      sum {\n        workHours\n      }\n    }\n  }\n}\n\nsubscription ThisWeekSchedulesUpdates {\n  workSchedulesAggregate(\n    where: {workDay: {_gte: \"date_trunc('week', now())::date\", _lte: \"(date_trunc('week', now()) + interval '6 days')::date\"}}\n  ) {\n    aggregate {\n      count\n      sum {\n        workHours\n      }\n    }\n  }\n}\n\nsubscription RecentSchedulesUpdates {\n  workSchedules(orderBy: {createdAt: DESC}, limit: 5) {\n    ...WorkScheduleDashboardCard\n  }\n}\n\nsubscription TotalSchedulesUpdates {\n  workSchedulesAggregate {\n    aggregate {\n      count\n    }\n  }\n}\n\nsubscription AvgWorkHoursUpdates {\n  workSchedulesAggregate {\n    aggregate {\n      avg {\n        workHours\n      }\n    }\n  }\n}\n\nsubscription TodayTotalHoursUpdates {\n  workSchedulesAggregate(where: {workDay: {_eq: \"now()::date\"}}) {\n    aggregate {\n      sum {\n        workHours\n      }\n    }\n  }\n}\n\nsubscription UserWorkSchedulesUpdates($userId: uuid!, $startDate: String!, $endDate: String!) {\n  workSchedules(\n    where: {userId: {_eq: $userId}, workDay: {_gte: $startDate, _lte: $endDate}}\n  ) {\n    ...WorkScheduleWeeklyView\n  }\n}\n\nsubscription UserTotalHoursUpdates($userId: uuid!, $startDate: String!, $endDate: String!) {\n  workSchedulesAggregate(\n    where: {userId: {_eq: $userId}, workDay: {_gte: $startDate, _lte: $endDate}}\n  ) {\n    aggregate {\n      sum {\n        workHours\n      }\n    }\n  }\n}\n\nsubscription TeamSchedulesUpdates($managerUserId: uuid!, $startDate: String!, $endDate: String!) {\n  workSchedules(\n    where: {scheduleOwner: {managerId: {_eq: $managerUserId}}, workDay: {_gte: $startDate, _lte: $endDate}}\n  ) {\n    ...WorkScheduleDashboardCard\n  }\n}\n\nsubscription TeamHoursTotalsUpdates($managerUserId: uuid!, $startDate: String!, $endDate: String!) {\n  workSchedulesAggregate(\n    where: {scheduleOwner: {managerId: {_eq: $managerUserId}}, workDay: {_gte: $startDate, _lte: $endDate}}\n  ) {\n    aggregate {\n      sum {\n        workHours\n      }\n      avg {\n        workHours\n      }\n      count\n    }\n  }\n}\n\nsubscription SchedulesByRoleUpdates($role: user_role!) {\n  workSchedules(\n    where: {scheduleOwner: {role: {_eq: $role}}}\n    orderBy: {workDay: DESC}\n  ) {\n    ...WorkScheduleListItem\n  }\n}\n\nsubscription ConsultantScheduleUpdates {\n  workSchedules(\n    where: {scheduleOwner: {role: {_eq: \"consultant\"}}}\n    orderBy: {workDay: DESC}\n  ) {\n    ...WorkScheduleListItem\n  }\n}\n\nsubscription ManagerScheduleUpdates {\n  workSchedules(\n    where: {scheduleOwner: {role: {_eq: \"manager\"}}}\n    orderBy: {workDay: DESC}\n  ) {\n    ...WorkScheduleListItem\n  }\n}\n\nsubscription RecentScheduleChangesUpdates($minutes: Int = 30) {\n  workSchedules(\n    where: {updatedAt: {_gte: \"now() - interval '${minutes} minutes'\"}}\n    orderBy: {updatedAt: DESC}\n  ) {\n    ...WorkScheduleChangeLog\n  }\n}\n\nsubscription NewScheduleCreationsUpdates {\n  workSchedules(\n    where: {createdAt: {_gte: \"now() - interval '5 minutes'\"}}\n    orderBy: {createdAt: DESC}\n  ) {\n    ...WorkScheduleWithUser\n    createdAt\n  }\n}\n\nsubscription TeamScheduleChangesUpdates($userId: uuid!) {\n  workSchedules(\n    where: {scheduleOwner: {managerId: {_eq: $userId}}, updatedAt: {_gte: \"now() - interval '24 hours'\"}}\n    orderBy: {updatedAt: DESC}\n  ) {\n    ...TeamWorkSchedule\n  }\n}\n\nsubscription MyScheduleChangesUpdates($userId: uuid!) {\n  workSchedules(\n    where: {userId: {_eq: $userId}, updatedAt: {_gte: \"now() - interval '24 hours'\"}}\n    orderBy: {updatedAt: DESC}\n  ) {\n    ...WorkScheduleBasic\n  }\n}\n\nsubscription OvertimeSchedulesUpdates {\n  workSchedules(\n    where: {workHours: {_gt: 8.0}, workDay: {_gte: \"now()::date\"}}\n    orderBy: {workHours: DESC}\n  ) {\n    ...WorkScheduleWithUser\n  }\n}\n\nsubscription UnderScheduledUpdates {\n  workSchedules(\n    where: {workHours: {_lt: 4.0, _gt: 0.0}, workDay: {_gte: \"now()::date\"}}\n    orderBy: {workHours: ASC}\n  ) {\n    ...WorkScheduleWithUser\n  }\n}\n\nsubscription HeavilyScheduledUsersUpdates {\n  workSchedules(\n    where: {workHours: {_gte: 10.0}, workDay: {_gte: \"now()::date\", _lte: \"(now() + interval '7 days')::date\"}}\n    orderBy: {workHours: DESC}\n  ) {\n    ...WorkScheduleWithUser\n  }\n}\n\nsubscription RecentScheduleVolumeUpdates {\n  workSchedulesAggregate(where: {createdAt: {_gte: \"now() - interval '1 hour'\"}}) {\n    aggregate {\n      count\n    }\n  }\n}\n\nsubscription ScheduleRecentActivityUpdates {\n  workSchedules(orderBy: {updatedAt: DESC}, limit: 5) {\n    id\n    workDay\n    workHours\n    updatedAt\n    scheduleOwner {\n      name\n    }\n  }\n}\n\nsubscription ScheduleSystemMetricsUpdates {\n  workSchedulesAggregate {\n    aggregate {\n      count\n    }\n  }\n}\n\nsubscription TodayScheduleCountUpdates {\n  workSchedulesAggregate(where: {workDay: {_eq: \"now()::date\"}}) {\n    aggregate {\n      count\n    }\n  }\n}\n\nsubscription WorkScheduleAuditUpdates {\n  workSchedules(\n    where: {updatedAt: {_gte: \"now() - interval '1 hour'\"}}\n    orderBy: {updatedAt: DESC}\n  ) {\n    ...WorkScheduleForAudit\n  }\n}\n\nsubscription ScheduleChangeAuditUpdates($userId: uuid!) {\n  workSchedules(\n    where: {userId: {_eq: $userId}, updatedAt: {_gte: \"now() - interval '1 hour'\"}}\n    orderBy: {updatedAt: DESC}\n  ) {\n    ...WorkScheduleChangeLog\n  }\n}\n\nsubscription TeamScheduleAuditUpdates($managerUserId: uuid!) {\n  workSchedules(\n    where: {scheduleOwner: {managerId: {_eq: $managerUserId}}, updatedAt: {_gte: \"now() - interval '1 hour'\"}}\n    orderBy: {updatedAt: DESC}\n  ) {\n    ...WorkScheduleForAudit\n  }\n}\n\nsubscription SchedulePatternUpdates($userId: uuid!) {\n  workSchedules(\n    where: {userId: {_eq: $userId}, workDay: {_gte: \"(now() - interval '4 weeks')::date\"}}\n    orderBy: {workDay: ASC}\n  ) {\n    ...WorkSchedulePattern\n  }\n}\n\nsubscription TeamSchedulePatternUpdates($managerUserId: uuid!) {\n  workSchedules(\n    where: {scheduleOwner: {managerId: {_eq: $managerUserId}}, workDay: {_gte: \"(now() - interval '4 weeks')::date\"}}\n    orderBy: [{workDay: ASC}, {scheduleOwner: {name: ASC}}]\n  ) {\n    ...WorkSchedulePattern\n  }\n}\n\nsubscription UpcomingScheduleUpdates($days: Int = 7) {\n  workSchedules(\n    where: {workDay: {_gte: \"now()::date\", _lte: \"(now() + interval '${days} days')::date\"}}\n    orderBy: [{workDay: ASC}, {scheduleOwner: {name: ASC}}]\n  ) {\n    ...WorkScheduleCalendarItem\n  }\n}\n\nsubscription TeamUpcomingScheduleUpdates($managerUserId: uuid!, $days: Int = 7) {\n  workSchedules(\n    where: {scheduleOwner: {managerId: {_eq: $managerUserId}}, workDay: {_gte: \"now()::date\", _lte: \"(now() + interval '${days} days')::date\"}}\n    orderBy: [{workDay: ASC}, {scheduleOwner: {name: ASC}}]\n  ) {\n    ...TeamWorkSchedule\n  }\n}\n\nsubscription NextWeekScheduleUpdates {\n  workSchedules(\n    where: {workDay: {_gte: \"(date_trunc('week', now()) + interval '1 week')::date\", _lte: \"(date_trunc('week', now()) + interval '1 week 6 days')::date\"}}\n    orderBy: [{workDay: ASC}, {scheduleOwner: {name: ASC}}]\n  ) {\n    ...WorkScheduleCalendarItem\n  }\n}\n\nsubscription ScheduleCountUpdates {\n  workSchedulesAggregate {\n    aggregate {\n      count\n    }\n  }\n}\n\nsubscription TotalHoursUpdates {\n  workSchedulesAggregate(where: {workDay: {_gte: \"now()::date\"}}) {\n    aggregate {\n      sum {\n        workHours\n      }\n    }\n  }\n}\n\nsubscription AvgHoursPerDayUpdates {\n  workSchedulesAggregate(where: {workDay: {_gte: \"now()::date\"}}) {\n    aggregate {\n      avg {\n        workHours\n      }\n    }\n  }\n}\n\nsubscription UserSchedulesUpdates($userId: uuid!) {\n  workSchedules(where: {userId: {_eq: $userId}}) {\n    ...MyWorkSchedule\n  }\n}\n\nsubscription UserFutureTotalHoursUpdates($userId: uuid!) {\n  workSchedulesAggregate(\n    where: {userId: {_eq: $userId}, workDay: {_gte: \"now()::date\"}}\n  ) {\n    aggregate {\n      sum {\n        workHours\n      }\n    }\n  }\n}": typeof types.WorkSchedulesUpdatesDocument,
    "fragment UserMinimal on users {\n  id\n  name\n  email\n}\n\nfragment UserCoreShared on users {\n  ...UserMinimal\n  role\n  isActive\n}\n\nfragment UserBasic on users {\n  ...UserCoreShared\n  createdAt\n  updatedAt\n}\n\nfragment UserBase on users {\n  ...UserBasic\n}\n\nfragment UserWithRole on users {\n  ...UserBasic\n  assignedRoles {\n    assignedRole {\n      id\n      name\n      displayName\n    }\n  }\n}\n\nfragment UserProfile on users {\n  ...UserWithRole\n  username\n  clerkUserId\n  image\n  isStaff\n  managerId\n  deactivatedAt\n  deactivatedBy\n  managerUser {\n    ...UserMinimal\n  }\n}\n\nfragment UserSearchResult on users {\n  ...UserCoreShared\n  username\n  isStaff\n}\n\nfragment ClientMinimal on clients {\n  id\n  name\n}\n\nfragment ClientBase on clients {\n  id\n  name\n  active\n  contactEmail\n  contactPerson\n  contactPhone\n  createdAt\n}\n\nfragment ClientWithStats on clients {\n  ...ClientBase\n  currentEmployeeCount: payrollsAggregate(\n    where: {supersededDate: {_isNull: true}}\n  ) {\n    aggregate {\n      sum {\n        employeeCount\n      }\n    }\n  }\n  activePayrollCount: payrollsAggregate(\n    where: {supersededDate: {_isNull: true}, status: {_eq: \"Active\"}}\n  ) {\n    aggregate {\n      count\n    }\n  }\n}\n\nfragment ClientListBase on clients {\n  ...ClientBase\n  payrollCount: payrollsAggregate(where: {supersededDate: {_isNull: true}}) {\n    aggregate {\n      count\n    }\n  }\n}\n\nfragment PayrollMinimal on payrolls {\n  id\n  name\n  employeeCount\n  status\n}\n\nfragment PayrollBase on payrolls {\n  id\n  name\n  employeeCount\n  status\n  payrollSystem\n  processingTime\n  processingDaysBeforeEft\n  versionNumber\n  createdAt\n  updatedAt\n}\n\nfragment PayrollWithClient on payrolls {\n  ...PayrollBase\n  clientId\n  client {\n    id\n    name\n    active\n  }\n}\n\nfragment PayrollListItem on payrolls {\n  ...PayrollWithClient\n  primaryConsultantUserId\n  backupConsultantUserId\n  managerUserId\n  createdByUserId\n  primaryConsultant {\n    ...UserMinimal\n  }\n  manager {\n    ...UserMinimal\n  }\n}\n\nfragment PayrollWithDates on payrolls {\n  ...PayrollBase\n  goLiveDate\n  payrollDates(orderBy: {originalEftDate: ASC}) {\n    id\n    originalEftDate\n    adjustedEftDate\n    notes\n  }\n}\n\nfragment PayrollFullDetail on payrolls {\n  ...PayrollWithDates\n  ...PayrollWithClient\n  dateTypeId\n  cycleId\n  dateValue\n  versionReason\n  supersededDate\n  parentPayrollId\n  parentPayroll {\n    id\n    versionNumber\n  }\n  childPayrolls(orderBy: {versionNumber: DESC}) {\n    id\n    versionNumber\n    versionReason\n    createdAt\n  }\n  primaryConsultant {\n    ...UserMinimal\n  }\n  backupConsultant {\n    ...UserMinimal\n  }\n  manager {\n    ...UserMinimal\n  }\n}\n\nfragment NoteWithAuthor on notes {\n  id\n  content\n  isImportant\n  createdAt\n  entityId\n  entityType\n  authorUser {\n    ...UserMinimal\n  }\n}\n\nfragment PermissionBase on permissions {\n  id\n  resourceId\n  description\n  legacyPermissionName\n  action\n}\n\nfragment RoleWithPermissions on roles {\n  id\n  name\n  displayName\n  description\n  isSystemRole\n  priority\n  assignedPermissions {\n    grantedPermission {\n      ...PermissionBase\n    }\n  }\n}\n\nfragment AuditLogEntry on auditLogs {\n  id\n  userId\n  userEmail\n  userRole\n  action\n  resourceType\n  resourceId\n  eventTime\n  success\n  errorMessage\n  ipAddress\n  userAgent\n  metadata\n}\n\nfragment AuthEvent on authEvents {\n  id\n  userId\n  userEmail\n  eventType\n  eventTime\n  success\n  failureReason\n  ipAddress\n  userAgent\n  metadata\n}\n\nfragment DataAccessLog on dataAccessLogs {\n  id\n  userId\n  resourceType\n  resourceId\n  accessType\n  accessedAt\n  dataClassification\n  fieldsAccessed\n  rowCount\n  ipAddress\n  metadata\n}\n\nfragment PermissionChange on permissionChanges {\n  id\n  changedAt\n  changedByUserId\n  targetUserId\n  targetRoleId\n  changeType\n  permissionType\n  oldPermissions\n  newPermissions\n  reason\n  approvedByUserId\n}\n\nfragment PayrollDateInfo on payrollDates {\n  id\n  originalEftDate\n  adjustedEftDate\n  notes\n  createdAt\n}\n\nfragment PermissionOverrideInfo on permissionOverrides {\n  id\n  userId\n  role\n  resource\n  operation\n  granted\n  reason\n  conditions\n  expiresAt\n  createdBy\n  createdAt\n}": typeof types.UserMinimalFragmentDoc,
    "mutation LogAuditEvent($input: auditLogsInsertInput!) {\n  insertAuditLogsOne: insertAuditLog(object: $input) {\n    id\n    eventTime\n  }\n}\n\nmutation RefreshData {\n  __typename\n}": typeof types.LogAuditEventDocument,
    "query GetDashboardMetrics($userId: uuid!) {\n  clientsAggregate(where: {active: {_eq: true}}) {\n    aggregate {\n      count\n    }\n  }\n  activePayrollsAggregate: payrollsAggregate(\n    where: {supersededDate: {_isNull: true}, status: {_nin: [\"Completed\", \"Failed\"]}}\n  ) {\n    aggregate {\n      count\n    }\n  }\n  totalEmployeesAggregate: payrollsAggregate(\n    where: {supersededDate: {_isNull: true}}\n  ) {\n    aggregate {\n      sum {\n        employeeCount\n      }\n    }\n  }\n  upcomingPayrolls: payrolls(\n    where: {supersededDate: {_isNull: true}, status: {_nin: [\"Completed\", \"Failed\", \"Cancelled\"]}}\n    orderBy: {updatedAt: DESC}\n    limit: 5\n  ) {\n    ...PayrollMinimal\n    client {\n      ...ClientMinimal\n    }\n  }\n}\n\nquery GetDashboardStatsOptimized($limit: Int = 10) {\n  clientsAggregate {\n    aggregate {\n      count\n    }\n  }\n  totalPayrolls: payrollsAggregate(where: {supersededDate: {_isNull: true}}) {\n    aggregate {\n      count\n    }\n  }\n  activePayrolls: payrollsAggregate(\n    where: {supersededDate: {_isNull: true}, status: {_eq: \"Active\"}}\n  ) {\n    aggregate {\n      count\n    }\n  }\n  processingPayrolls: payrollsAggregate(\n    where: {supersededDate: {_isNull: true}, status: {_eq: \"Processing\"}}\n  ) {\n    aggregate {\n      count\n    }\n  }\n  upcomingPayrolls: payrolls(\n    where: {supersededDate: {_isNull: true}, status: {_eq: \"Active\"}}\n    orderBy: {updatedAt: DESC}\n    limit: $limit\n  ) {\n    id\n    name\n    status\n    client {\n      id\n      name\n    }\n  }\n}\n\nquery GetClientsDashboardStats {\n  activeClientsCount: clientsAggregate(where: {active: {_eq: true}}) {\n    aggregate {\n      count\n    }\n  }\n  payrollsAggregate(where: {supersededDate: {_isNull: true}}) {\n    aggregate {\n      sum {\n        employeeCount\n      }\n    }\n  }\n  clientsNeedingAttention: clients(\n    where: {active: {_eq: true}, _not: {payrolls: {supersededDate: {_isNull: true}}}}\n  ) {\n    ...ClientMinimal\n  }\n}\n\nquery GetCurrentUser($userId: uuid!) {\n  user: userById(id: $userId) {\n    ...UserProfile\n  }\n}\n\nquery GetUsersForDropdown($role: user_role) {\n  users(where: {isActive: {_eq: true}, role: {_eq: $role}}, orderBy: {name: ASC}) {\n    ...UserMinimal\n  }\n}\n\nquery GetSystemHealth {\n  databaseHealth: users(limit: 1) {\n    id\n  }\n  recentActivity: auditLogsAggregate(\n    where: {eventTime: {_gte: \"now() - interval '1 hour'\"}}\n  ) {\n    aggregate {\n      count\n    }\n  }\n}\n\nquery GlobalSearch($searchTerm: String!) {\n  clients(\n    where: {_or: [{name: {_ilike: $searchTerm}}, {contactEmail: {_ilike: $searchTerm}}]}\n    limit: 5\n  ) {\n    ...ClientMinimal\n  }\n  users(\n    where: {_or: [{name: {_ilike: $searchTerm}}, {email: {_ilike: $searchTerm}}]}\n    limit: 5\n  ) {\n    ...UserMinimal\n  }\n  payrolls(\n    where: {client: {name: {_ilike: $searchTerm}}, supersededDate: {_isNull: true}}\n    limit: 5\n  ) {\n    ...PayrollMinimal\n    client {\n      ...ClientMinimal\n    }\n  }\n}": typeof types.GetDashboardMetricsDocument,
    "subscription RecentActivity($resourceTypes: [String!]) {\n  auditLogs(\n    where: {resourceType: {_in: $resourceTypes}, eventTime: {_gte: \"now() - interval '5 minutes'\"}}\n    orderBy: {eventTime: DESC}\n    limit: 20\n  ) {\n    ...AuditLogEntry\n  }\n}\n\nsubscription AuthenticationEvents($userId: uuid) {\n  authEvents(\n    where: {userId: {_eq: $userId}, eventTime: {_gte: \"now() - interval '10 minutes'\"}}\n    orderBy: {eventTime: DESC}\n  ) {\n    ...AuthEvent\n  }\n}\n\nsubscription SensitiveDataAccess($resourceTypes: [String!]!) {\n  dataAccessLogs(\n    where: {resourceType: {_in: $resourceTypes}, accessedAt: {_gte: \"now() - interval '10 minutes'\"}}\n    orderBy: {accessedAt: DESC}\n  ) {\n    ...DataAccessLog\n  }\n}\n\nsubscription PermissionChangeStream {\n  permissionChanges(orderBy: {changedAt: DESC}, limit: 10) {\n    ...PermissionChange\n  }\n}": typeof types.RecentActivityDocument,
};
const documents: Documents = {
    "fragment WorkScheduleCore on workSchedules {\n  id\n  userId\n  workDay\n  workHours\n  createdAt\n  updatedAt\n}\n\nfragment WorkScheduleBasic on workSchedules {\n  ...WorkScheduleCore\n}\n\nfragment WorkScheduleMinimal on workSchedules {\n  id\n  userId\n  workDay\n  workHours\n}\n\nfragment WorkScheduleWithUser on workSchedules {\n  ...WorkScheduleBasic\n  scheduleOwner {\n    id\n    name\n    email\n    role\n  }\n}\n\nfragment WorkScheduleWithUserComplete on workSchedules {\n  ...WorkScheduleBasic\n  workScheduleUser {\n    id\n    name\n    email\n    role\n    managerId\n    managerUser {\n      id\n      name\n      email\n    }\n  }\n}\n\nfragment WorkScheduleComplete on workSchedules {\n  ...WorkScheduleWithUserComplete\n}\n\nfragment TeamWorkSchedule on workSchedules {\n  ...WorkScheduleBasic\n  scheduleOwner {\n    id\n    name\n    email\n    role\n    managerId\n  }\n}\n\nfragment ManagerWorkScheduleView on workSchedules {\n  ...WorkScheduleBasic\n  workScheduleUser {\n    id\n    name\n    email\n    role\n  }\n}\n\nfragment WorkScheduleListItem on workSchedules {\n  ...WorkScheduleMinimal\n  createdAt\n  updatedAt\n  scheduleOwner {\n    id\n    name\n    role\n  }\n}\n\nfragment WorkScheduleTableRow on workSchedules {\n  ...WorkScheduleListItem\n}\n\nfragment WorkScheduleDashboardCard on workSchedules {\n  ...WorkScheduleMinimal\n  scheduleOwner {\n    id\n    name\n  }\n}\n\nfragment WorkScheduleCalendarItem on workSchedules {\n  ...WorkScheduleMinimal\n  scheduleOwner {\n    id\n    name\n  }\n}\n\nfragment WorkScheduleWeeklyView on workSchedules {\n  ...WorkScheduleMinimal\n  createdAt\n  updatedAt\n}\n\nfragment WorkScheduleMonthlyView on workSchedules {\n  id\n  workDay\n  workHours\n  scheduleOwner {\n    id\n    name\n  }\n}\n\nfragment WorkScheduleCapacity on workSchedules {\n  id\n  workDay\n  workHours\n  scheduleOwner {\n    id\n    name\n    role\n  }\n}\n\nfragment WorkScheduleConflictCheck on workSchedules {\n  id\n  userId\n  workDay\n  workHours\n  scheduleOwner {\n    id\n    name\n  }\n}\n\nfragment WorkScheduleForAudit on workSchedules {\n  id\n  userId\n  workDay\n  workHours\n  createdAt\n  updatedAt\n}\n\nfragment WorkScheduleChangeLog on workSchedules {\n  id\n  userId\n  workDay\n  workHours\n  updatedAt\n}\n\nfragment WorkSchedulePattern on workSchedules {\n  workDay\n  workHours\n}\n\nfragment MyWorkSchedule on workSchedules {\n  ...WorkScheduleBasic\n}": types.WorkScheduleCoreFragmentDoc,
    "mutation CreateWorkSchedule($object: workSchedulesInsertInput!) {\n  insertWorkSchedule(object: $object) {\n    ...WorkScheduleComplete\n  }\n}\n\nmutation UpdateWorkSchedule($id: uuid!, $set: workSchedulesSetInput!) {\n  updateWorkScheduleById(pkColumns: {id: $id}, _set: $set) {\n    ...WorkScheduleComplete\n  }\n}\n\nmutation DeleteWorkSchedule($id: uuid!) {\n  deleteWorkScheduleById(id: $id) {\n    id\n    userId\n    workDay\n    workHours\n  }\n}\n\nmutation CreateDailySchedule($userId: uuid!, $workDay: String!, $workHours: numeric!) {\n  insertWorkSchedule(\n    object: {userId: $userId, workDay: $workDay, workHours: $workHours}\n  ) {\n    ...WorkScheduleWithUser\n  }\n}\n\nmutation CreateWeeklySchedule($userId: uuid!, $schedules: [workSchedulesInsertInput!]!) {\n  bulkInsertWorkSchedules(objects: $schedules) {\n    returning {\n      ...WorkScheduleBasic\n    }\n    affectedRows\n  }\n}\n\nmutation UpdateDailySchedule($userId: uuid!, $workDay: String!, $workHours: numeric!) {\n  bulkUpdateWorkSchedules(\n    where: {userId: {_eq: $userId}, workDay: {_eq: $workDay}}\n    _set: {workHours: $workHours, updatedAt: \"now()\"}\n  ) {\n    returning {\n      ...WorkScheduleBasic\n    }\n    affectedRows\n  }\n}\n\nmutation UpdateUserScheduleHours($userId: uuid!, $workDay: String!, $newHours: numeric!) {\n  bulkUpdateWorkSchedules(\n    where: {userId: {_eq: $userId}, workDay: {_eq: $workDay}}\n    _set: {workHours: $newHours, updatedAt: \"now()\"}\n  ) {\n    returning {\n      ...WorkScheduleBasic\n    }\n    affectedRows\n  }\n}\n\nmutation AdjustScheduleHours($id: uuid!, $adjustment: numeric!) {\n  updateWorkScheduleById(\n    pkColumns: {id: $id}\n    _inc: {workHours: $adjustment}\n    _set: {updatedAt: \"now()\"}\n  ) {\n    ...WorkScheduleBasic\n  }\n}\n\nmutation UpdateScheduleDateRange($userId: uuid!, $startDate: String!, $endDate: String!, $newHours: numeric!) {\n  bulkUpdateWorkSchedules(\n    where: {userId: {_eq: $userId}, workDay: {_gte: $startDate, _lte: $endDate}}\n    _set: {workHours: $newHours, updatedAt: \"now()\"}\n  ) {\n    returning {\n      ...WorkScheduleBasic\n    }\n    affectedRows\n  }\n}\n\nmutation CancelSchedule($id: uuid!) {\n  updateWorkScheduleById(\n    pkColumns: {id: $id}\n    _set: {workHours: 0, updatedAt: \"now()\"}\n  ) {\n    ...WorkScheduleBasic\n  }\n}\n\nmutation CancelDailySchedule($userId: uuid!, $workDay: String!) {\n  bulkUpdateWorkSchedules(\n    where: {userId: {_eq: $userId}, workDay: {_eq: $workDay}}\n    _set: {workHours: 0, updatedAt: \"now()\"}\n  ) {\n    returning {\n      ...WorkScheduleBasic\n    }\n    affectedRows\n  }\n}\n\nmutation RemoveSchedule($id: uuid!) {\n  deleteWorkScheduleById(id: $id) {\n    id\n    userId\n    workDay\n    workHours\n  }\n}\n\nmutation RemoveDailySchedule($userId: uuid!, $workDay: String!) {\n  bulkDeleteWorkSchedules(\n    where: {userId: {_eq: $userId}, workDay: {_eq: $workDay}}\n  ) {\n    affectedRows\n  }\n}\n\nmutation UpdateWeeklySchedule($userId: uuid!, $startDate: String!, $endDate: String!, $schedules: [workSchedulesInsertInput!]!) {\n  bulkDeleteWorkSchedules(\n    where: {userId: {_eq: $userId}, workDay: {_gte: $startDate, _lte: $endDate}}\n  ) {\n    affectedRows\n  }\n  bulkInsertWorkSchedules(objects: $schedules) {\n    returning {\n      ...WorkScheduleBasic\n    }\n    affectedRows\n  }\n}\n\nmutation BulkUpdateScheduleHours($userIds: [uuid!]!, $workDay: String!, $workHours: numeric!) {\n  bulkUpdateWorkSchedules(\n    where: {userId: {_in: $userIds}, workDay: {_eq: $workDay}}\n    _set: {workHours: $workHours, updatedAt: \"now()\"}\n  ) {\n    returning {\n      ...WorkScheduleBasic\n    }\n    affectedRows\n  }\n}\n\nmutation BulkCreateSchedules($schedules: [workSchedulesInsertInput!]!) {\n  bulkInsertWorkSchedules(objects: $schedules) {\n    returning {\n      ...WorkScheduleBasic\n    }\n    affectedRows\n  }\n}\n\nmutation BulkDeleteSchedules($scheduleIds: [uuid!]!) {\n  bulkDeleteWorkSchedules(where: {id: {_in: $scheduleIds}}) {\n    affectedRows\n  }\n}\n\nmutation BulkCancelSchedules($scheduleIds: [uuid!]!) {\n  bulkUpdateWorkSchedules(\n    where: {id: {_in: $scheduleIds}}\n    _set: {workHours: 0, updatedAt: \"now()\"}\n  ) {\n    returning {\n      ...WorkScheduleBasic\n    }\n    affectedRows\n  }\n}\n\nmutation UpdateTeamSchedule($managerUserId: uuid!, $workDay: String!, $defaultHours: numeric!) {\n  bulkUpdateWorkSchedules(\n    where: {scheduleOwner: {managerId: {_eq: $managerUserId}}, workDay: {_eq: $workDay}}\n    _set: {workHours: $defaultHours, updatedAt: \"now()\"}\n  ) {\n    returning {\n      ...TeamWorkSchedule\n    }\n    affectedRows\n  }\n}\n\nmutation AdjustScheduleForOvertime($id: uuid!, $overtimeHours: numeric!) {\n  updateWorkScheduleById(\n    pkColumns: {id: $id}\n    _inc: {workHours: $overtimeHours}\n    _set: {updatedAt: \"now()\"}\n  ) {\n    ...WorkScheduleBasic\n  }\n}\n\nmutation ReduceScheduleHours($id: uuid!, $reduction: numeric!) {\n  updateWorkScheduleById(\n    pkColumns: {id: $id}\n    _inc: {workHours: $reduction}\n    _set: {updatedAt: \"now()\"}\n  ) {\n    ...WorkScheduleBasic\n  }\n}\n\nmutation TransferSchedules($oldUserId: uuid!, $newUserId: uuid!) {\n  bulkUpdateWorkSchedules(\n    where: {userId: {_eq: $oldUserId}}\n    _set: {userId: $newUserId, updatedAt: \"now()\"}\n  ) {\n    returning {\n      ...WorkScheduleBasic\n    }\n    affectedRows\n  }\n}\n\nmutation PurgeOldSchedules($beforeDate: String!) {\n  bulkDeleteWorkSchedules(where: {workDay: {_lt: $beforeDate}}) {\n    affectedRows\n  }\n}\n\nmutation CleanupCancelledSchedules {\n  bulkDeleteWorkSchedules(\n    where: {workHours: {_eq: 0}, workDay: {_lt: \"now()::date\"}}\n  ) {\n    affectedRows\n  }\n}\n\nmutation CreateEmergencySchedule($userId: uuid!, $workDay: String!, $workHours: numeric!) {\n  insertWorkSchedule(\n    object: {userId: $userId, workDay: $workDay, workHours: $workHours}\n  ) {\n    ...WorkScheduleWithUser\n  }\n}": types.CreateWorkScheduleDocument,
    "query GetWorkSchedules($limit: Int = 50, $offset: Int = 0, $where: workSchedulesBoolExp) {\n  workSchedules(\n    limit: $limit\n    offset: $offset\n    where: $where\n    orderBy: {workDay: ASC}\n  ) {\n    ...WorkScheduleListItem\n  }\n  workSchedulesAggregate(where: $where) {\n    aggregate {\n      count\n    }\n  }\n}\n\nquery GetWorkScheduleById($id: uuid!) {\n  workScheduleById(id: $id) {\n    ...WorkScheduleComplete\n  }\n}\n\nquery GetWorkScheduleBasic($id: uuid!) {\n  workScheduleById(id: $id) {\n    ...WorkScheduleBasic\n  }\n}\n\nquery GetUserWorkSchedule($userId: uuid!) {\n  workSchedules(where: {userId: {_eq: $userId}}, orderBy: {workDay: ASC}) {\n    ...WorkScheduleWithUser\n  }\n}\n\nquery GetMyWorkSchedule($userId: uuid!) {\n  workSchedules(where: {userId: {_eq: $userId}}, orderBy: {workDay: ASC}) {\n    ...MyWorkSchedule\n  }\n}\n\nquery GetUserScheduleByDay($userId: uuid!, $workDay: String!) {\n  workSchedules(where: {userId: {_eq: $userId}, workDay: {_eq: $workDay}}) {\n    ...WorkScheduleBasic\n  }\n}\n\nquery GetUserScheduleForWeek($userId: uuid!, $startDate: String!, $endDate: String!) {\n  workSchedules(\n    where: {userId: {_eq: $userId}, workDay: {_gte: $startDate, _lte: $endDate}}\n    orderBy: {workDay: ASC}\n  ) {\n    ...WorkScheduleWeeklyView\n  }\n}\n\nquery GetUserScheduleForMonth($userId: uuid!, $startDate: String!, $endDate: String!) {\n  workSchedules(\n    where: {userId: {_eq: $userId}, workDay: {_gte: $startDate, _lte: $endDate}}\n    orderBy: {workDay: ASC}\n  ) {\n    ...WorkScheduleMonthlyView\n  }\n}\n\nquery GetTeamWorkSchedules($managerUserId: uuid!) {\n  workSchedules(\n    where: {scheduleOwner: {managerId: {_eq: $managerUserId}}}\n    orderBy: {workDay: ASC}\n  ) {\n    ...TeamWorkSchedule\n  }\n}\n\nquery GetTeamScheduleByDay($managerUserId: uuid!, $workDay: String!) {\n  workSchedules(\n    where: {scheduleOwner: {managerId: {_eq: $managerUserId}}, workDay: {_eq: $workDay}}\n    orderBy: {scheduleOwner: {name: ASC}}\n  ) {\n    ...TeamWorkSchedule\n  }\n}\n\nquery GetTeamScheduleForWeek($managerUserId: uuid!, $startDate: String!, $endDate: String!) {\n  workSchedules(\n    where: {scheduleOwner: {managerId: {_eq: $managerUserId}}, workDay: {_gte: $startDate, _lte: $endDate}}\n    orderBy: [{workDay: ASC}, {scheduleOwner: {name: ASC}}]\n  ) {\n    ...TeamWorkSchedule\n  }\n}\n\nquery GetManagerScheduleOverview($managerUserId: uuid!) {\n  mySchedule: workSchedules(\n    where: {userId: {_eq: $managerUserId}}\n    orderBy: {workDay: ASC}\n  ) {\n    ...ManagerWorkScheduleView\n  }\n  teamSchedules: workSchedules(\n    where: {scheduleOwner: {managerId: {_eq: $managerUserId}}}\n    orderBy: [{workDay: ASC}, {scheduleOwner: {name: ASC}}]\n  ) {\n    ...TeamWorkSchedule\n  }\n}\n\nquery GetSchedulesByDateRange($startDate: String!, $endDate: String!) {\n  workSchedules(\n    where: {workDay: {_gte: $startDate, _lte: $endDate}}\n    orderBy: [{workDay: ASC}, {scheduleOwner: {name: ASC}}]\n  ) {\n    ...WorkScheduleCalendarItem\n  }\n}\n\nquery GetSchedulesByDay($workDay: String!) {\n  workSchedules(\n    where: {workDay: {_eq: $workDay}}\n    orderBy: {scheduleOwner: {name: ASC}}\n  ) {\n    ...WorkScheduleCalendarItem\n  }\n}\n\nquery GetWeeklySchedulePattern($userId: uuid!) {\n  workSchedules(\n    where: {userId: {_eq: $userId}}\n    orderBy: {workDay: ASC}\n    limit: 7\n  ) {\n    ...WorkScheduleMinimal\n  }\n}\n\nquery GetScheduleConflicts($workDay: String!, $excludeUserId: uuid) {\n  workSchedules(\n    where: {workDay: {_eq: $workDay}, userId: {_neq: $excludeUserId}}\n    orderBy: {workHours: DESC}\n  ) {\n    ...WorkScheduleConflictCheck\n  }\n}\n\nquery GetAvailableUsers($workDay: String!, $minHours: numeric = 4.0) {\n  workSchedules(\n    where: {workDay: {_eq: $workDay}, workHours: {_gte: $minHours}}\n    orderBy: {workHours: DESC}\n  ) {\n    ...WorkScheduleMinimal\n  }\n}\n\nquery GetTeamCapacity($managerUserId: uuid!, $workDay: String!) {\n  workSchedules(\n    where: {scheduleOwner: {managerId: {_eq: $managerUserId}}, workDay: {_eq: $workDay}}\n    orderBy: {workHours: DESC}\n  ) {\n    ...WorkScheduleCapacity\n  }\n}\n\nquery GetWeeklyTeamCapacity($managerUserId: uuid!, $startDate: String!, $endDate: String!) {\n  workSchedules(\n    where: {scheduleOwner: {managerId: {_eq: $managerUserId}}, workDay: {_gte: $startDate, _lte: $endDate}}\n    orderBy: [{workDay: ASC}, {workHours: DESC}]\n  ) {\n    ...WorkScheduleCapacity\n  }\n}\n\nquery GetWorkScheduleStats {\n  totalSchedules: workSchedulesAggregate {\n    aggregate {\n      count\n    }\n  }\n  avgWorkHours: workSchedulesAggregate {\n    aggregate {\n      avg {\n        workHours\n      }\n    }\n  }\n  maxWorkHours: workSchedulesAggregate {\n    aggregate {\n      max {\n        workHours\n      }\n    }\n  }\n  minWorkHours: workSchedulesAggregate {\n    aggregate {\n      min {\n        workHours\n      }\n    }\n  }\n}\n\nquery GetUserWorkHoursTotals($userId: uuid!, $startDate: String!, $endDate: String!) {\n  workSchedules(\n    where: {userId: {_eq: $userId}, workDay: {_gte: $startDate, _lte: $endDate}}\n  ) {\n    ...WorkScheduleMinimal\n  }\n  totalHours: workSchedulesAggregate(\n    where: {userId: {_eq: $userId}, workDay: {_gte: $startDate, _lte: $endDate}}\n  ) {\n    aggregate {\n      sum {\n        workHours\n      }\n    }\n  }\n}\n\nquery GetTeamWorkHoursSummary($managerUserId: uuid!, $startDate: String!, $endDate: String!) {\n  teamSchedules: workSchedules(\n    where: {scheduleOwner: {managerId: {_eq: $managerUserId}}, workDay: {_gte: $startDate, _lte: $endDate}}\n  ) {\n    ...WorkScheduleMinimal\n  }\n  teamHoursTotals: workSchedulesAggregate(\n    where: {scheduleOwner: {managerId: {_eq: $managerUserId}}, workDay: {_gte: $startDate, _lte: $endDate}}\n  ) {\n    aggregate {\n      sum {\n        workHours\n      }\n      avg {\n        workHours\n      }\n      count\n    }\n  }\n}\n\nquery GetWorkScheduleDashboardStats {\n  todaySchedules: workSchedulesAggregate(where: {workDay: {_eq: \"now()::date\"}}) {\n    aggregate {\n      count\n      sum {\n        workHours\n      }\n    }\n  }\n  thisWeekSchedules: workSchedulesAggregate(\n    where: {workDay: {_gte: \"date_trunc('week', now())::date\", _lte: \"(date_trunc('week', now()) + interval '6 days')::date\"}}\n  ) {\n    aggregate {\n      count\n      sum {\n        workHours\n      }\n    }\n  }\n  recentSchedules: workSchedules(orderBy: {createdAt: DESC}, limit: 5) {\n    ...WorkScheduleDashboardCard\n  }\n}\n\nquery SearchWorkSchedules($searchTerm: String!, $limit: Int = 50) {\n  workSchedules(\n    where: {scheduleOwner: {_or: [{name: {_ilike: $searchTerm}}, {email: {_ilike: $searchTerm}}]}}\n    orderBy: {workDay: DESC}\n    limit: $limit\n  ) {\n    ...WorkScheduleTableRow\n  }\n}\n\nquery FilterSchedulesByHours($minHours: numeric!, $maxHours: numeric!) {\n  workSchedules(\n    where: {workHours: {_gte: $minHours, _lte: $maxHours}}\n    orderBy: {workHours: DESC}\n  ) {\n    ...WorkScheduleListItem\n  }\n}\n\nquery GetSchedulesByRole($role: user_role!) {\n  workSchedules(\n    where: {scheduleOwner: {role: {_eq: $role}}}\n    orderBy: {workDay: DESC}\n  ) {\n    ...WorkScheduleListItem\n  }\n}\n\nquery GetUpcomingSchedules($userId: uuid!, $days: Int = 7) {\n  workSchedules(\n    where: {userId: {_eq: $userId}, workDay: {_gte: \"now()::date\", _lte: \"(now() + interval '${days} days')::date\"}}\n    orderBy: {workDay: ASC}\n  ) {\n    ...WorkScheduleBasic\n  }\n}\n\nquery GetRecentSchedules($userId: uuid!, $days: Int = 7) {\n  workSchedules(\n    where: {userId: {_eq: $userId}, workDay: {_gte: \"(now() - interval '${days} days')::date\", _lte: \"now()::date\"}}\n    orderBy: {workDay: DESC}\n  ) {\n    ...WorkScheduleBasic\n  }\n}\n\nquery GetTeamUpcomingSchedules($managerUserId: uuid!, $days: Int = 7) {\n  workSchedules(\n    where: {scheduleOwner: {managerId: {_eq: $managerUserId}}, workDay: {_gte: \"now()::date\", _lte: \"(now() + interval '${days} days')::date\"}}\n    orderBy: [{workDay: ASC}, {scheduleOwner: {name: ASC}}]\n  ) {\n    ...TeamWorkSchedule\n  }\n}\n\nquery GetUserSchedulePatterns($userId: uuid!, $weeks: Int = 4) {\n  workSchedules(\n    where: {userId: {_eq: $userId}, workDay: {_gte: \"(now() - interval '${weeks} weeks')::date\"}}\n    orderBy: {workDay: ASC}\n  ) {\n    ...WorkSchedulePattern\n  }\n}\n\nquery GetTeamSchedulePatterns($managerUserId: uuid!, $weeks: Int = 4) {\n  workSchedules(\n    where: {scheduleOwner: {managerId: {_eq: $managerUserId}}, workDay: {_gte: \"(now() - interval '${weeks} weeks')::date\"}}\n    orderBy: [{workDay: ASC}, {scheduleOwner: {name: ASC}}]\n  ) {\n    ...WorkSchedulePattern\n  }\n}\n\nquery GetWorkSchedulesForAudit($limit: Int = 100, $offset: Int = 0, $where: workSchedulesBoolExp = {}) {\n  workSchedules(\n    limit: $limit\n    offset: $offset\n    where: $where\n    orderBy: {createdAt: DESC}\n  ) {\n    ...WorkScheduleForAudit\n  }\n}\n\nquery GetScheduleChangeHistory($userId: uuid!, $limit: Int = 50) {\n  workSchedules(\n    where: {userId: {_eq: $userId}}\n    orderBy: {updatedAt: DESC}\n    limit: $limit\n  ) {\n    ...WorkScheduleChangeLog\n  }\n}\n\nquery GetWorkSchedulesPaginated($limit: Int = 20, $offset: Int = 0, $where: workSchedulesBoolExp = {}, $orderBy: [workSchedulesOrderBy!] = [{workDay: DESC}]) {\n  workSchedules(limit: $limit, offset: $offset, where: $where, orderBy: $orderBy) {\n    ...WorkScheduleTableRow\n  }\n  workSchedulesAggregate(where: $where) {\n    aggregate {\n      count\n    }\n  }\n}\n\nquery GetUserSchedulesPaginated($userId: uuid!, $limit: Int = 20, $offset: Int = 0, $where: workSchedulesBoolExp = {}) {\n  workSchedules(\n    where: {_and: [{userId: {_eq: $userId}}, $where]}\n    orderBy: {workDay: DESC}\n    limit: $limit\n    offset: $offset\n  ) {\n    ...WorkScheduleTableRow\n  }\n  userSchedulesAggregate: workSchedulesAggregate(\n    where: {_and: [{userId: {_eq: $userId}}, $where]}\n  ) {\n    aggregate {\n      count\n    }\n  }\n}\n\nquery GetWorkSchedulesQuickList($limit: Int = 100) {\n  workSchedules(orderBy: {workDay: DESC}, limit: $limit) {\n    ...WorkScheduleMinimal\n  }\n}\n\nquery GetUserSchedulesQuickList($userId: uuid!) {\n  workSchedules(where: {userId: {_eq: $userId}}, orderBy: {workDay: DESC}) {\n    ...WorkScheduleMinimal\n  }\n}\n\nquery GetTodaySchedulesQuickList {\n  workSchedules(\n    where: {workDay: {_eq: \"now()::date\"}}\n    orderBy: {scheduleOwner: {name: ASC}}\n  ) {\n    ...WorkScheduleMinimal\n  }\n}": types.GetWorkSchedulesDocument,
    "subscription WorkSchedulesUpdates {\n  workSchedules(orderBy: {updatedAt: DESC}) {\n    ...WorkScheduleListItem\n  }\n}\n\nsubscription WorkScheduleUpdates($id: uuid!) {\n  workSchedules(where: {id: {_eq: $id}}) {\n    ...WorkScheduleComplete\n  }\n}\n\nsubscription UserWorkScheduleUpdates($userId: uuid!) {\n  workSchedules(where: {userId: {_eq: $userId}}, orderBy: {workDay: DESC}) {\n    ...WorkScheduleWithUser\n  }\n}\n\nsubscription MyWorkScheduleUpdates($userId: uuid!) {\n  workSchedules(where: {userId: {_eq: $userId}}, orderBy: {workDay: ASC}) {\n    ...MyWorkSchedule\n  }\n}\n\nsubscription MyScheduleChanges($userId: uuid!) {\n  workSchedules(\n    where: {userId: {_eq: $userId}, updatedAt: {_gte: \"now() - interval '1 hour'\"}}\n    orderBy: {updatedAt: DESC}\n  ) {\n    ...WorkScheduleBasic\n  }\n}\n\nsubscription MyUpcomingScheduleUpdates($userId: uuid!, $days: Int = 7) {\n  workSchedules(\n    where: {userId: {_eq: $userId}, workDay: {_gte: \"now()::date\", _lte: \"(now() + interval '${days} days')::date\"}}\n    orderBy: {workDay: ASC}\n  ) {\n    ...WorkScheduleBasic\n  }\n}\n\nsubscription TeamWorkScheduleUpdates($managerUserId: uuid!) {\n  workSchedules(\n    where: {scheduleOwner: {managerId: {_eq: $managerUserId}}}\n    orderBy: {workDay: DESC}\n  ) {\n    ...TeamWorkSchedule\n  }\n}\n\nsubscription TeamScheduleChanges($managerUserId: uuid!) {\n  workSchedules(\n    where: {scheduleOwner: {managerId: {_eq: $managerUserId}}, updatedAt: {_gte: \"now() - interval '1 hour'\"}}\n    orderBy: {updatedAt: DESC}\n  ) {\n    ...TeamWorkSchedule\n  }\n}\n\nsubscription TeamDailyScheduleUpdates($managerUserId: uuid!, $workDay: String!) {\n  workSchedules(\n    where: {scheduleOwner: {managerId: {_eq: $managerUserId}}, workDay: {_eq: $workDay}}\n    orderBy: {scheduleOwner: {name: ASC}}\n  ) {\n    ...TeamWorkSchedule\n  }\n}\n\nsubscription TeamWeeklyScheduleUpdates($managerUserId: uuid!, $startDate: String!, $endDate: String!) {\n  workSchedules(\n    where: {scheduleOwner: {managerId: {_eq: $managerUserId}}, workDay: {_gte: $startDate, _lte: $endDate}}\n    orderBy: [{workDay: ASC}, {scheduleOwner: {name: ASC}}]\n  ) {\n    ...TeamWorkSchedule\n  }\n}\n\nsubscription DailyScheduleUpdates($workDay: String!) {\n  workSchedules(\n    where: {workDay: {_eq: $workDay}}\n    orderBy: {scheduleOwner: {name: ASC}}\n  ) {\n    ...WorkScheduleBasic\n  }\n}\n\nsubscription TodayScheduleUpdates {\n  workSchedules(\n    where: {workDay: {_eq: \"now()::date\"}}\n    orderBy: {scheduleOwner: {name: ASC}}\n  ) {\n    ...WorkScheduleBasic\n  }\n}\n\nsubscription WeeklyScheduleUpdates($startDate: String!, $endDate: String!) {\n  workSchedules(\n    where: {workDay: {_gte: $startDate, _lte: $endDate}}\n    orderBy: [{workDay: ASC}, {scheduleOwner: {name: ASC}}]\n  ) {\n    ...WorkScheduleCalendarItem\n  }\n}\n\nsubscription MonthlyScheduleUpdates($startDate: String!, $endDate: String!) {\n  workSchedules(\n    where: {workDay: {_gte: $startDate, _lte: $endDate}}\n    orderBy: [{workDay: ASC}, {scheduleOwner: {name: ASC}}]\n  ) {\n    ...WorkScheduleMonthlyView\n  }\n}\n\nsubscription ScheduleAvailabilityUpdates($workDay: String!, $minHours: numeric = 4.0) {\n  workSchedules(\n    where: {workDay: {_eq: $workDay}, workHours: {_gte: $minHours}}\n    orderBy: {workHours: DESC}\n  ) {\n    ...WorkScheduleCapacity\n  }\n}\n\nsubscription TeamCapacityUpdates($managerUserId: uuid!, $workDay: String!) {\n  workSchedules(\n    where: {scheduleOwner: {managerId: {_eq: $managerUserId}}, workDay: {_eq: $workDay}}\n    orderBy: {workHours: DESC}\n  ) {\n    ...WorkScheduleCapacity\n  }\n}\n\nsubscription ScheduleConflictUpdates($workDay: String!) {\n  workSchedules(where: {workDay: {_eq: $workDay}}, orderBy: {workHours: DESC}) {\n    ...WorkScheduleConflictCheck\n  }\n}\n\nsubscription WeeklyCapacityUpdates($managerUserId: uuid!, $startDate: String!, $endDate: String!) {\n  workSchedules(\n    where: {scheduleOwner: {managerId: {_eq: $managerUserId}}, workDay: {_gte: $startDate, _lte: $endDate}}\n    orderBy: [{workDay: ASC}, {workHours: DESC}]\n  ) {\n    ...WorkScheduleCapacity\n  }\n}\n\nsubscription TodaySchedulesUpdates {\n  workSchedulesAggregate(where: {workDay: {_eq: \"now()::date\"}}) {\n    aggregate {\n      count\n      sum {\n        workHours\n      }\n    }\n  }\n}\n\nsubscription ThisWeekSchedulesUpdates {\n  workSchedulesAggregate(\n    where: {workDay: {_gte: \"date_trunc('week', now())::date\", _lte: \"(date_trunc('week', now()) + interval '6 days')::date\"}}\n  ) {\n    aggregate {\n      count\n      sum {\n        workHours\n      }\n    }\n  }\n}\n\nsubscription RecentSchedulesUpdates {\n  workSchedules(orderBy: {createdAt: DESC}, limit: 5) {\n    ...WorkScheduleDashboardCard\n  }\n}\n\nsubscription TotalSchedulesUpdates {\n  workSchedulesAggregate {\n    aggregate {\n      count\n    }\n  }\n}\n\nsubscription AvgWorkHoursUpdates {\n  workSchedulesAggregate {\n    aggregate {\n      avg {\n        workHours\n      }\n    }\n  }\n}\n\nsubscription TodayTotalHoursUpdates {\n  workSchedulesAggregate(where: {workDay: {_eq: \"now()::date\"}}) {\n    aggregate {\n      sum {\n        workHours\n      }\n    }\n  }\n}\n\nsubscription UserWorkSchedulesUpdates($userId: uuid!, $startDate: String!, $endDate: String!) {\n  workSchedules(\n    where: {userId: {_eq: $userId}, workDay: {_gte: $startDate, _lte: $endDate}}\n  ) {\n    ...WorkScheduleWeeklyView\n  }\n}\n\nsubscription UserTotalHoursUpdates($userId: uuid!, $startDate: String!, $endDate: String!) {\n  workSchedulesAggregate(\n    where: {userId: {_eq: $userId}, workDay: {_gte: $startDate, _lte: $endDate}}\n  ) {\n    aggregate {\n      sum {\n        workHours\n      }\n    }\n  }\n}\n\nsubscription TeamSchedulesUpdates($managerUserId: uuid!, $startDate: String!, $endDate: String!) {\n  workSchedules(\n    where: {scheduleOwner: {managerId: {_eq: $managerUserId}}, workDay: {_gte: $startDate, _lte: $endDate}}\n  ) {\n    ...WorkScheduleDashboardCard\n  }\n}\n\nsubscription TeamHoursTotalsUpdates($managerUserId: uuid!, $startDate: String!, $endDate: String!) {\n  workSchedulesAggregate(\n    where: {scheduleOwner: {managerId: {_eq: $managerUserId}}, workDay: {_gte: $startDate, _lte: $endDate}}\n  ) {\n    aggregate {\n      sum {\n        workHours\n      }\n      avg {\n        workHours\n      }\n      count\n    }\n  }\n}\n\nsubscription SchedulesByRoleUpdates($role: user_role!) {\n  workSchedules(\n    where: {scheduleOwner: {role: {_eq: $role}}}\n    orderBy: {workDay: DESC}\n  ) {\n    ...WorkScheduleListItem\n  }\n}\n\nsubscription ConsultantScheduleUpdates {\n  workSchedules(\n    where: {scheduleOwner: {role: {_eq: \"consultant\"}}}\n    orderBy: {workDay: DESC}\n  ) {\n    ...WorkScheduleListItem\n  }\n}\n\nsubscription ManagerScheduleUpdates {\n  workSchedules(\n    where: {scheduleOwner: {role: {_eq: \"manager\"}}}\n    orderBy: {workDay: DESC}\n  ) {\n    ...WorkScheduleListItem\n  }\n}\n\nsubscription RecentScheduleChangesUpdates($minutes: Int = 30) {\n  workSchedules(\n    where: {updatedAt: {_gte: \"now() - interval '${minutes} minutes'\"}}\n    orderBy: {updatedAt: DESC}\n  ) {\n    ...WorkScheduleChangeLog\n  }\n}\n\nsubscription NewScheduleCreationsUpdates {\n  workSchedules(\n    where: {createdAt: {_gte: \"now() - interval '5 minutes'\"}}\n    orderBy: {createdAt: DESC}\n  ) {\n    ...WorkScheduleWithUser\n    createdAt\n  }\n}\n\nsubscription TeamScheduleChangesUpdates($userId: uuid!) {\n  workSchedules(\n    where: {scheduleOwner: {managerId: {_eq: $userId}}, updatedAt: {_gte: \"now() - interval '24 hours'\"}}\n    orderBy: {updatedAt: DESC}\n  ) {\n    ...TeamWorkSchedule\n  }\n}\n\nsubscription MyScheduleChangesUpdates($userId: uuid!) {\n  workSchedules(\n    where: {userId: {_eq: $userId}, updatedAt: {_gte: \"now() - interval '24 hours'\"}}\n    orderBy: {updatedAt: DESC}\n  ) {\n    ...WorkScheduleBasic\n  }\n}\n\nsubscription OvertimeSchedulesUpdates {\n  workSchedules(\n    where: {workHours: {_gt: 8.0}, workDay: {_gte: \"now()::date\"}}\n    orderBy: {workHours: DESC}\n  ) {\n    ...WorkScheduleWithUser\n  }\n}\n\nsubscription UnderScheduledUpdates {\n  workSchedules(\n    where: {workHours: {_lt: 4.0, _gt: 0.0}, workDay: {_gte: \"now()::date\"}}\n    orderBy: {workHours: ASC}\n  ) {\n    ...WorkScheduleWithUser\n  }\n}\n\nsubscription HeavilyScheduledUsersUpdates {\n  workSchedules(\n    where: {workHours: {_gte: 10.0}, workDay: {_gte: \"now()::date\", _lte: \"(now() + interval '7 days')::date\"}}\n    orderBy: {workHours: DESC}\n  ) {\n    ...WorkScheduleWithUser\n  }\n}\n\nsubscription RecentScheduleVolumeUpdates {\n  workSchedulesAggregate(where: {createdAt: {_gte: \"now() - interval '1 hour'\"}}) {\n    aggregate {\n      count\n    }\n  }\n}\n\nsubscription ScheduleRecentActivityUpdates {\n  workSchedules(orderBy: {updatedAt: DESC}, limit: 5) {\n    id\n    workDay\n    workHours\n    updatedAt\n    scheduleOwner {\n      name\n    }\n  }\n}\n\nsubscription ScheduleSystemMetricsUpdates {\n  workSchedulesAggregate {\n    aggregate {\n      count\n    }\n  }\n}\n\nsubscription TodayScheduleCountUpdates {\n  workSchedulesAggregate(where: {workDay: {_eq: \"now()::date\"}}) {\n    aggregate {\n      count\n    }\n  }\n}\n\nsubscription WorkScheduleAuditUpdates {\n  workSchedules(\n    where: {updatedAt: {_gte: \"now() - interval '1 hour'\"}}\n    orderBy: {updatedAt: DESC}\n  ) {\n    ...WorkScheduleForAudit\n  }\n}\n\nsubscription ScheduleChangeAuditUpdates($userId: uuid!) {\n  workSchedules(\n    where: {userId: {_eq: $userId}, updatedAt: {_gte: \"now() - interval '1 hour'\"}}\n    orderBy: {updatedAt: DESC}\n  ) {\n    ...WorkScheduleChangeLog\n  }\n}\n\nsubscription TeamScheduleAuditUpdates($managerUserId: uuid!) {\n  workSchedules(\n    where: {scheduleOwner: {managerId: {_eq: $managerUserId}}, updatedAt: {_gte: \"now() - interval '1 hour'\"}}\n    orderBy: {updatedAt: DESC}\n  ) {\n    ...WorkScheduleForAudit\n  }\n}\n\nsubscription SchedulePatternUpdates($userId: uuid!) {\n  workSchedules(\n    where: {userId: {_eq: $userId}, workDay: {_gte: \"(now() - interval '4 weeks')::date\"}}\n    orderBy: {workDay: ASC}\n  ) {\n    ...WorkSchedulePattern\n  }\n}\n\nsubscription TeamSchedulePatternUpdates($managerUserId: uuid!) {\n  workSchedules(\n    where: {scheduleOwner: {managerId: {_eq: $managerUserId}}, workDay: {_gte: \"(now() - interval '4 weeks')::date\"}}\n    orderBy: [{workDay: ASC}, {scheduleOwner: {name: ASC}}]\n  ) {\n    ...WorkSchedulePattern\n  }\n}\n\nsubscription UpcomingScheduleUpdates($days: Int = 7) {\n  workSchedules(\n    where: {workDay: {_gte: \"now()::date\", _lte: \"(now() + interval '${days} days')::date\"}}\n    orderBy: [{workDay: ASC}, {scheduleOwner: {name: ASC}}]\n  ) {\n    ...WorkScheduleCalendarItem\n  }\n}\n\nsubscription TeamUpcomingScheduleUpdates($managerUserId: uuid!, $days: Int = 7) {\n  workSchedules(\n    where: {scheduleOwner: {managerId: {_eq: $managerUserId}}, workDay: {_gte: \"now()::date\", _lte: \"(now() + interval '${days} days')::date\"}}\n    orderBy: [{workDay: ASC}, {scheduleOwner: {name: ASC}}]\n  ) {\n    ...TeamWorkSchedule\n  }\n}\n\nsubscription NextWeekScheduleUpdates {\n  workSchedules(\n    where: {workDay: {_gte: \"(date_trunc('week', now()) + interval '1 week')::date\", _lte: \"(date_trunc('week', now()) + interval '1 week 6 days')::date\"}}\n    orderBy: [{workDay: ASC}, {scheduleOwner: {name: ASC}}]\n  ) {\n    ...WorkScheduleCalendarItem\n  }\n}\n\nsubscription ScheduleCountUpdates {\n  workSchedulesAggregate {\n    aggregate {\n      count\n    }\n  }\n}\n\nsubscription TotalHoursUpdates {\n  workSchedulesAggregate(where: {workDay: {_gte: \"now()::date\"}}) {\n    aggregate {\n      sum {\n        workHours\n      }\n    }\n  }\n}\n\nsubscription AvgHoursPerDayUpdates {\n  workSchedulesAggregate(where: {workDay: {_gte: \"now()::date\"}}) {\n    aggregate {\n      avg {\n        workHours\n      }\n    }\n  }\n}\n\nsubscription UserSchedulesUpdates($userId: uuid!) {\n  workSchedules(where: {userId: {_eq: $userId}}) {\n    ...MyWorkSchedule\n  }\n}\n\nsubscription UserFutureTotalHoursUpdates($userId: uuid!) {\n  workSchedulesAggregate(\n    where: {userId: {_eq: $userId}, workDay: {_gte: \"now()::date\"}}\n  ) {\n    aggregate {\n      sum {\n        workHours\n      }\n    }\n  }\n}": types.WorkSchedulesUpdatesDocument,
    "fragment UserMinimal on users {\n  id\n  name\n  email\n}\n\nfragment UserCoreShared on users {\n  ...UserMinimal\n  role\n  isActive\n}\n\nfragment UserBasic on users {\n  ...UserCoreShared\n  createdAt\n  updatedAt\n}\n\nfragment UserBase on users {\n  ...UserBasic\n}\n\nfragment UserWithRole on users {\n  ...UserBasic\n  assignedRoles {\n    assignedRole {\n      id\n      name\n      displayName\n    }\n  }\n}\n\nfragment UserProfile on users {\n  ...UserWithRole\n  username\n  clerkUserId\n  image\n  isStaff\n  managerId\n  deactivatedAt\n  deactivatedBy\n  managerUser {\n    ...UserMinimal\n  }\n}\n\nfragment UserSearchResult on users {\n  ...UserCoreShared\n  username\n  isStaff\n}\n\nfragment ClientMinimal on clients {\n  id\n  name\n}\n\nfragment ClientBase on clients {\n  id\n  name\n  active\n  contactEmail\n  contactPerson\n  contactPhone\n  createdAt\n}\n\nfragment ClientWithStats on clients {\n  ...ClientBase\n  currentEmployeeCount: payrollsAggregate(\n    where: {supersededDate: {_isNull: true}}\n  ) {\n    aggregate {\n      sum {\n        employeeCount\n      }\n    }\n  }\n  activePayrollCount: payrollsAggregate(\n    where: {supersededDate: {_isNull: true}, status: {_eq: \"Active\"}}\n  ) {\n    aggregate {\n      count\n    }\n  }\n}\n\nfragment ClientListBase on clients {\n  ...ClientBase\n  payrollCount: payrollsAggregate(where: {supersededDate: {_isNull: true}}) {\n    aggregate {\n      count\n    }\n  }\n}\n\nfragment PayrollMinimal on payrolls {\n  id\n  name\n  employeeCount\n  status\n}\n\nfragment PayrollBase on payrolls {\n  id\n  name\n  employeeCount\n  status\n  payrollSystem\n  processingTime\n  processingDaysBeforeEft\n  versionNumber\n  createdAt\n  updatedAt\n}\n\nfragment PayrollWithClient on payrolls {\n  ...PayrollBase\n  clientId\n  client {\n    id\n    name\n    active\n  }\n}\n\nfragment PayrollListItem on payrolls {\n  ...PayrollWithClient\n  primaryConsultantUserId\n  backupConsultantUserId\n  managerUserId\n  createdByUserId\n  primaryConsultant {\n    ...UserMinimal\n  }\n  manager {\n    ...UserMinimal\n  }\n}\n\nfragment PayrollWithDates on payrolls {\n  ...PayrollBase\n  goLiveDate\n  payrollDates(orderBy: {originalEftDate: ASC}) {\n    id\n    originalEftDate\n    adjustedEftDate\n    notes\n  }\n}\n\nfragment PayrollFullDetail on payrolls {\n  ...PayrollWithDates\n  ...PayrollWithClient\n  dateTypeId\n  cycleId\n  dateValue\n  versionReason\n  supersededDate\n  parentPayrollId\n  parentPayroll {\n    id\n    versionNumber\n  }\n  childPayrolls(orderBy: {versionNumber: DESC}) {\n    id\n    versionNumber\n    versionReason\n    createdAt\n  }\n  primaryConsultant {\n    ...UserMinimal\n  }\n  backupConsultant {\n    ...UserMinimal\n  }\n  manager {\n    ...UserMinimal\n  }\n}\n\nfragment NoteWithAuthor on notes {\n  id\n  content\n  isImportant\n  createdAt\n  entityId\n  entityType\n  authorUser {\n    ...UserMinimal\n  }\n}\n\nfragment PermissionBase on permissions {\n  id\n  resourceId\n  description\n  legacyPermissionName\n  action\n}\n\nfragment RoleWithPermissions on roles {\n  id\n  name\n  displayName\n  description\n  isSystemRole\n  priority\n  assignedPermissions {\n    grantedPermission {\n      ...PermissionBase\n    }\n  }\n}\n\nfragment AuditLogEntry on auditLogs {\n  id\n  userId\n  userEmail\n  userRole\n  action\n  resourceType\n  resourceId\n  eventTime\n  success\n  errorMessage\n  ipAddress\n  userAgent\n  metadata\n}\n\nfragment AuthEvent on authEvents {\n  id\n  userId\n  userEmail\n  eventType\n  eventTime\n  success\n  failureReason\n  ipAddress\n  userAgent\n  metadata\n}\n\nfragment DataAccessLog on dataAccessLogs {\n  id\n  userId\n  resourceType\n  resourceId\n  accessType\n  accessedAt\n  dataClassification\n  fieldsAccessed\n  rowCount\n  ipAddress\n  metadata\n}\n\nfragment PermissionChange on permissionChanges {\n  id\n  changedAt\n  changedByUserId\n  targetUserId\n  targetRoleId\n  changeType\n  permissionType\n  oldPermissions\n  newPermissions\n  reason\n  approvedByUserId\n}\n\nfragment PayrollDateInfo on payrollDates {\n  id\n  originalEftDate\n  adjustedEftDate\n  notes\n  createdAt\n}\n\nfragment PermissionOverrideInfo on permissionOverrides {\n  id\n  userId\n  role\n  resource\n  operation\n  granted\n  reason\n  conditions\n  expiresAt\n  createdBy\n  createdAt\n}": types.UserMinimalFragmentDoc,
    "mutation LogAuditEvent($input: auditLogsInsertInput!) {\n  insertAuditLogsOne: insertAuditLog(object: $input) {\n    id\n    eventTime\n  }\n}\n\nmutation RefreshData {\n  __typename\n}": types.LogAuditEventDocument,
    "query GetDashboardMetrics($userId: uuid!) {\n  clientsAggregate(where: {active: {_eq: true}}) {\n    aggregate {\n      count\n    }\n  }\n  activePayrollsAggregate: payrollsAggregate(\n    where: {supersededDate: {_isNull: true}, status: {_nin: [\"Completed\", \"Failed\"]}}\n  ) {\n    aggregate {\n      count\n    }\n  }\n  totalEmployeesAggregate: payrollsAggregate(\n    where: {supersededDate: {_isNull: true}}\n  ) {\n    aggregate {\n      sum {\n        employeeCount\n      }\n    }\n  }\n  upcomingPayrolls: payrolls(\n    where: {supersededDate: {_isNull: true}, status: {_nin: [\"Completed\", \"Failed\", \"Cancelled\"]}}\n    orderBy: {updatedAt: DESC}\n    limit: 5\n  ) {\n    ...PayrollMinimal\n    client {\n      ...ClientMinimal\n    }\n  }\n}\n\nquery GetDashboardStatsOptimized($limit: Int = 10) {\n  clientsAggregate {\n    aggregate {\n      count\n    }\n  }\n  totalPayrolls: payrollsAggregate(where: {supersededDate: {_isNull: true}}) {\n    aggregate {\n      count\n    }\n  }\n  activePayrolls: payrollsAggregate(\n    where: {supersededDate: {_isNull: true}, status: {_eq: \"Active\"}}\n  ) {\n    aggregate {\n      count\n    }\n  }\n  processingPayrolls: payrollsAggregate(\n    where: {supersededDate: {_isNull: true}, status: {_eq: \"Processing\"}}\n  ) {\n    aggregate {\n      count\n    }\n  }\n  upcomingPayrolls: payrolls(\n    where: {supersededDate: {_isNull: true}, status: {_eq: \"Active\"}}\n    orderBy: {updatedAt: DESC}\n    limit: $limit\n  ) {\n    id\n    name\n    status\n    client {\n      id\n      name\n    }\n  }\n}\n\nquery GetClientsDashboardStats {\n  activeClientsCount: clientsAggregate(where: {active: {_eq: true}}) {\n    aggregate {\n      count\n    }\n  }\n  payrollsAggregate(where: {supersededDate: {_isNull: true}}) {\n    aggregate {\n      sum {\n        employeeCount\n      }\n    }\n  }\n  clientsNeedingAttention: clients(\n    where: {active: {_eq: true}, _not: {payrolls: {supersededDate: {_isNull: true}}}}\n  ) {\n    ...ClientMinimal\n  }\n}\n\nquery GetCurrentUser($userId: uuid!) {\n  user: userById(id: $userId) {\n    ...UserProfile\n  }\n}\n\nquery GetUsersForDropdown($role: user_role) {\n  users(where: {isActive: {_eq: true}, role: {_eq: $role}}, orderBy: {name: ASC}) {\n    ...UserMinimal\n  }\n}\n\nquery GetSystemHealth {\n  databaseHealth: users(limit: 1) {\n    id\n  }\n  recentActivity: auditLogsAggregate(\n    where: {eventTime: {_gte: \"now() - interval '1 hour'\"}}\n  ) {\n    aggregate {\n      count\n    }\n  }\n}\n\nquery GlobalSearch($searchTerm: String!) {\n  clients(\n    where: {_or: [{name: {_ilike: $searchTerm}}, {contactEmail: {_ilike: $searchTerm}}]}\n    limit: 5\n  ) {\n    ...ClientMinimal\n  }\n  users(\n    where: {_or: [{name: {_ilike: $searchTerm}}, {email: {_ilike: $searchTerm}}]}\n    limit: 5\n  ) {\n    ...UserMinimal\n  }\n  payrolls(\n    where: {client: {name: {_ilike: $searchTerm}}, supersededDate: {_isNull: true}}\n    limit: 5\n  ) {\n    ...PayrollMinimal\n    client {\n      ...ClientMinimal\n    }\n  }\n}": types.GetDashboardMetricsDocument,
    "subscription RecentActivity($resourceTypes: [String!]) {\n  auditLogs(\n    where: {resourceType: {_in: $resourceTypes}, eventTime: {_gte: \"now() - interval '5 minutes'\"}}\n    orderBy: {eventTime: DESC}\n    limit: 20\n  ) {\n    ...AuditLogEntry\n  }\n}\n\nsubscription AuthenticationEvents($userId: uuid) {\n  authEvents(\n    where: {userId: {_eq: $userId}, eventTime: {_gte: \"now() - interval '10 minutes'\"}}\n    orderBy: {eventTime: DESC}\n  ) {\n    ...AuthEvent\n  }\n}\n\nsubscription SensitiveDataAccess($resourceTypes: [String!]!) {\n  dataAccessLogs(\n    where: {resourceType: {_in: $resourceTypes}, accessedAt: {_gte: \"now() - interval '10 minutes'\"}}\n    orderBy: {accessedAt: DESC}\n  ) {\n    ...DataAccessLog\n  }\n}\n\nsubscription PermissionChangeStream {\n  permissionChanges(orderBy: {changedAt: DESC}, limit: 10) {\n    ...PermissionChange\n  }\n}": types.RecentActivityDocument,
};

/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 *
 *
 * @example
 * ```ts
 * const query = gql(`query GetUser($id: ID!) { user(id: $id) { name } }`);
 * ```
 *
 * The query argument is unknown!
 * Please regenerate the types.
 */
export function gql(source: string): unknown;

/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "fragment WorkScheduleCore on workSchedules {\n  id\n  userId\n  workDay\n  workHours\n  createdAt\n  updatedAt\n}\n\nfragment WorkScheduleBasic on workSchedules {\n  ...WorkScheduleCore\n}\n\nfragment WorkScheduleMinimal on workSchedules {\n  id\n  userId\n  workDay\n  workHours\n}\n\nfragment WorkScheduleWithUser on workSchedules {\n  ...WorkScheduleBasic\n  scheduleOwner {\n    id\n    name\n    email\n    role\n  }\n}\n\nfragment WorkScheduleWithUserComplete on workSchedules {\n  ...WorkScheduleBasic\n  workScheduleUser {\n    id\n    name\n    email\n    role\n    managerId\n    managerUser {\n      id\n      name\n      email\n    }\n  }\n}\n\nfragment WorkScheduleComplete on workSchedules {\n  ...WorkScheduleWithUserComplete\n}\n\nfragment TeamWorkSchedule on workSchedules {\n  ...WorkScheduleBasic\n  scheduleOwner {\n    id\n    name\n    email\n    role\n    managerId\n  }\n}\n\nfragment ManagerWorkScheduleView on workSchedules {\n  ...WorkScheduleBasic\n  workScheduleUser {\n    id\n    name\n    email\n    role\n  }\n}\n\nfragment WorkScheduleListItem on workSchedules {\n  ...WorkScheduleMinimal\n  createdAt\n  updatedAt\n  scheduleOwner {\n    id\n    name\n    role\n  }\n}\n\nfragment WorkScheduleTableRow on workSchedules {\n  ...WorkScheduleListItem\n}\n\nfragment WorkScheduleDashboardCard on workSchedules {\n  ...WorkScheduleMinimal\n  scheduleOwner {\n    id\n    name\n  }\n}\n\nfragment WorkScheduleCalendarItem on workSchedules {\n  ...WorkScheduleMinimal\n  scheduleOwner {\n    id\n    name\n  }\n}\n\nfragment WorkScheduleWeeklyView on workSchedules {\n  ...WorkScheduleMinimal\n  createdAt\n  updatedAt\n}\n\nfragment WorkScheduleMonthlyView on workSchedules {\n  id\n  workDay\n  workHours\n  scheduleOwner {\n    id\n    name\n  }\n}\n\nfragment WorkScheduleCapacity on workSchedules {\n  id\n  workDay\n  workHours\n  scheduleOwner {\n    id\n    name\n    role\n  }\n}\n\nfragment WorkScheduleConflictCheck on workSchedules {\n  id\n  userId\n  workDay\n  workHours\n  scheduleOwner {\n    id\n    name\n  }\n}\n\nfragment WorkScheduleForAudit on workSchedules {\n  id\n  userId\n  workDay\n  workHours\n  createdAt\n  updatedAt\n}\n\nfragment WorkScheduleChangeLog on workSchedules {\n  id\n  userId\n  workDay\n  workHours\n  updatedAt\n}\n\nfragment WorkSchedulePattern on workSchedules {\n  workDay\n  workHours\n}\n\nfragment MyWorkSchedule on workSchedules {\n  ...WorkScheduleBasic\n}"): (typeof documents)["fragment WorkScheduleCore on workSchedules {\n  id\n  userId\n  workDay\n  workHours\n  createdAt\n  updatedAt\n}\n\nfragment WorkScheduleBasic on workSchedules {\n  ...WorkScheduleCore\n}\n\nfragment WorkScheduleMinimal on workSchedules {\n  id\n  userId\n  workDay\n  workHours\n}\n\nfragment WorkScheduleWithUser on workSchedules {\n  ...WorkScheduleBasic\n  scheduleOwner {\n    id\n    name\n    email\n    role\n  }\n}\n\nfragment WorkScheduleWithUserComplete on workSchedules {\n  ...WorkScheduleBasic\n  workScheduleUser {\n    id\n    name\n    email\n    role\n    managerId\n    managerUser {\n      id\n      name\n      email\n    }\n  }\n}\n\nfragment WorkScheduleComplete on workSchedules {\n  ...WorkScheduleWithUserComplete\n}\n\nfragment TeamWorkSchedule on workSchedules {\n  ...WorkScheduleBasic\n  scheduleOwner {\n    id\n    name\n    email\n    role\n    managerId\n  }\n}\n\nfragment ManagerWorkScheduleView on workSchedules {\n  ...WorkScheduleBasic\n  workScheduleUser {\n    id\n    name\n    email\n    role\n  }\n}\n\nfragment WorkScheduleListItem on workSchedules {\n  ...WorkScheduleMinimal\n  createdAt\n  updatedAt\n  scheduleOwner {\n    id\n    name\n    role\n  }\n}\n\nfragment WorkScheduleTableRow on workSchedules {\n  ...WorkScheduleListItem\n}\n\nfragment WorkScheduleDashboardCard on workSchedules {\n  ...WorkScheduleMinimal\n  scheduleOwner {\n    id\n    name\n  }\n}\n\nfragment WorkScheduleCalendarItem on workSchedules {\n  ...WorkScheduleMinimal\n  scheduleOwner {\n    id\n    name\n  }\n}\n\nfragment WorkScheduleWeeklyView on workSchedules {\n  ...WorkScheduleMinimal\n  createdAt\n  updatedAt\n}\n\nfragment WorkScheduleMonthlyView on workSchedules {\n  id\n  workDay\n  workHours\n  scheduleOwner {\n    id\n    name\n  }\n}\n\nfragment WorkScheduleCapacity on workSchedules {\n  id\n  workDay\n  workHours\n  scheduleOwner {\n    id\n    name\n    role\n  }\n}\n\nfragment WorkScheduleConflictCheck on workSchedules {\n  id\n  userId\n  workDay\n  workHours\n  scheduleOwner {\n    id\n    name\n  }\n}\n\nfragment WorkScheduleForAudit on workSchedules {\n  id\n  userId\n  workDay\n  workHours\n  createdAt\n  updatedAt\n}\n\nfragment WorkScheduleChangeLog on workSchedules {\n  id\n  userId\n  workDay\n  workHours\n  updatedAt\n}\n\nfragment WorkSchedulePattern on workSchedules {\n  workDay\n  workHours\n}\n\nfragment MyWorkSchedule on workSchedules {\n  ...WorkScheduleBasic\n}"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "mutation CreateWorkSchedule($object: workSchedulesInsertInput!) {\n  insertWorkSchedule(object: $object) {\n    ...WorkScheduleComplete\n  }\n}\n\nmutation UpdateWorkSchedule($id: uuid!, $set: workSchedulesSetInput!) {\n  updateWorkScheduleById(pkColumns: {id: $id}, _set: $set) {\n    ...WorkScheduleComplete\n  }\n}\n\nmutation DeleteWorkSchedule($id: uuid!) {\n  deleteWorkScheduleById(id: $id) {\n    id\n    userId\n    workDay\n    workHours\n  }\n}\n\nmutation CreateDailySchedule($userId: uuid!, $workDay: String!, $workHours: numeric!) {\n  insertWorkSchedule(\n    object: {userId: $userId, workDay: $workDay, workHours: $workHours}\n  ) {\n    ...WorkScheduleWithUser\n  }\n}\n\nmutation CreateWeeklySchedule($userId: uuid!, $schedules: [workSchedulesInsertInput!]!) {\n  bulkInsertWorkSchedules(objects: $schedules) {\n    returning {\n      ...WorkScheduleBasic\n    }\n    affectedRows\n  }\n}\n\nmutation UpdateDailySchedule($userId: uuid!, $workDay: String!, $workHours: numeric!) {\n  bulkUpdateWorkSchedules(\n    where: {userId: {_eq: $userId}, workDay: {_eq: $workDay}}\n    _set: {workHours: $workHours, updatedAt: \"now()\"}\n  ) {\n    returning {\n      ...WorkScheduleBasic\n    }\n    affectedRows\n  }\n}\n\nmutation UpdateUserScheduleHours($userId: uuid!, $workDay: String!, $newHours: numeric!) {\n  bulkUpdateWorkSchedules(\n    where: {userId: {_eq: $userId}, workDay: {_eq: $workDay}}\n    _set: {workHours: $newHours, updatedAt: \"now()\"}\n  ) {\n    returning {\n      ...WorkScheduleBasic\n    }\n    affectedRows\n  }\n}\n\nmutation AdjustScheduleHours($id: uuid!, $adjustment: numeric!) {\n  updateWorkScheduleById(\n    pkColumns: {id: $id}\n    _inc: {workHours: $adjustment}\n    _set: {updatedAt: \"now()\"}\n  ) {\n    ...WorkScheduleBasic\n  }\n}\n\nmutation UpdateScheduleDateRange($userId: uuid!, $startDate: String!, $endDate: String!, $newHours: numeric!) {\n  bulkUpdateWorkSchedules(\n    where: {userId: {_eq: $userId}, workDay: {_gte: $startDate, _lte: $endDate}}\n    _set: {workHours: $newHours, updatedAt: \"now()\"}\n  ) {\n    returning {\n      ...WorkScheduleBasic\n    }\n    affectedRows\n  }\n}\n\nmutation CancelSchedule($id: uuid!) {\n  updateWorkScheduleById(\n    pkColumns: {id: $id}\n    _set: {workHours: 0, updatedAt: \"now()\"}\n  ) {\n    ...WorkScheduleBasic\n  }\n}\n\nmutation CancelDailySchedule($userId: uuid!, $workDay: String!) {\n  bulkUpdateWorkSchedules(\n    where: {userId: {_eq: $userId}, workDay: {_eq: $workDay}}\n    _set: {workHours: 0, updatedAt: \"now()\"}\n  ) {\n    returning {\n      ...WorkScheduleBasic\n    }\n    affectedRows\n  }\n}\n\nmutation RemoveSchedule($id: uuid!) {\n  deleteWorkScheduleById(id: $id) {\n    id\n    userId\n    workDay\n    workHours\n  }\n}\n\nmutation RemoveDailySchedule($userId: uuid!, $workDay: String!) {\n  bulkDeleteWorkSchedules(\n    where: {userId: {_eq: $userId}, workDay: {_eq: $workDay}}\n  ) {\n    affectedRows\n  }\n}\n\nmutation UpdateWeeklySchedule($userId: uuid!, $startDate: String!, $endDate: String!, $schedules: [workSchedulesInsertInput!]!) {\n  bulkDeleteWorkSchedules(\n    where: {userId: {_eq: $userId}, workDay: {_gte: $startDate, _lte: $endDate}}\n  ) {\n    affectedRows\n  }\n  bulkInsertWorkSchedules(objects: $schedules) {\n    returning {\n      ...WorkScheduleBasic\n    }\n    affectedRows\n  }\n}\n\nmutation BulkUpdateScheduleHours($userIds: [uuid!]!, $workDay: String!, $workHours: numeric!) {\n  bulkUpdateWorkSchedules(\n    where: {userId: {_in: $userIds}, workDay: {_eq: $workDay}}\n    _set: {workHours: $workHours, updatedAt: \"now()\"}\n  ) {\n    returning {\n      ...WorkScheduleBasic\n    }\n    affectedRows\n  }\n}\n\nmutation BulkCreateSchedules($schedules: [workSchedulesInsertInput!]!) {\n  bulkInsertWorkSchedules(objects: $schedules) {\n    returning {\n      ...WorkScheduleBasic\n    }\n    affectedRows\n  }\n}\n\nmutation BulkDeleteSchedules($scheduleIds: [uuid!]!) {\n  bulkDeleteWorkSchedules(where: {id: {_in: $scheduleIds}}) {\n    affectedRows\n  }\n}\n\nmutation BulkCancelSchedules($scheduleIds: [uuid!]!) {\n  bulkUpdateWorkSchedules(\n    where: {id: {_in: $scheduleIds}}\n    _set: {workHours: 0, updatedAt: \"now()\"}\n  ) {\n    returning {\n      ...WorkScheduleBasic\n    }\n    affectedRows\n  }\n}\n\nmutation UpdateTeamSchedule($managerUserId: uuid!, $workDay: String!, $defaultHours: numeric!) {\n  bulkUpdateWorkSchedules(\n    where: {scheduleOwner: {managerId: {_eq: $managerUserId}}, workDay: {_eq: $workDay}}\n    _set: {workHours: $defaultHours, updatedAt: \"now()\"}\n  ) {\n    returning {\n      ...TeamWorkSchedule\n    }\n    affectedRows\n  }\n}\n\nmutation AdjustScheduleForOvertime($id: uuid!, $overtimeHours: numeric!) {\n  updateWorkScheduleById(\n    pkColumns: {id: $id}\n    _inc: {workHours: $overtimeHours}\n    _set: {updatedAt: \"now()\"}\n  ) {\n    ...WorkScheduleBasic\n  }\n}\n\nmutation ReduceScheduleHours($id: uuid!, $reduction: numeric!) {\n  updateWorkScheduleById(\n    pkColumns: {id: $id}\n    _inc: {workHours: $reduction}\n    _set: {updatedAt: \"now()\"}\n  ) {\n    ...WorkScheduleBasic\n  }\n}\n\nmutation TransferSchedules($oldUserId: uuid!, $newUserId: uuid!) {\n  bulkUpdateWorkSchedules(\n    where: {userId: {_eq: $oldUserId}}\n    _set: {userId: $newUserId, updatedAt: \"now()\"}\n  ) {\n    returning {\n      ...WorkScheduleBasic\n    }\n    affectedRows\n  }\n}\n\nmutation PurgeOldSchedules($beforeDate: String!) {\n  bulkDeleteWorkSchedules(where: {workDay: {_lt: $beforeDate}}) {\n    affectedRows\n  }\n}\n\nmutation CleanupCancelledSchedules {\n  bulkDeleteWorkSchedules(\n    where: {workHours: {_eq: 0}, workDay: {_lt: \"now()::date\"}}\n  ) {\n    affectedRows\n  }\n}\n\nmutation CreateEmergencySchedule($userId: uuid!, $workDay: String!, $workHours: numeric!) {\n  insertWorkSchedule(\n    object: {userId: $userId, workDay: $workDay, workHours: $workHours}\n  ) {\n    ...WorkScheduleWithUser\n  }\n}"): (typeof documents)["mutation CreateWorkSchedule($object: workSchedulesInsertInput!) {\n  insertWorkSchedule(object: $object) {\n    ...WorkScheduleComplete\n  }\n}\n\nmutation UpdateWorkSchedule($id: uuid!, $set: workSchedulesSetInput!) {\n  updateWorkScheduleById(pkColumns: {id: $id}, _set: $set) {\n    ...WorkScheduleComplete\n  }\n}\n\nmutation DeleteWorkSchedule($id: uuid!) {\n  deleteWorkScheduleById(id: $id) {\n    id\n    userId\n    workDay\n    workHours\n  }\n}\n\nmutation CreateDailySchedule($userId: uuid!, $workDay: String!, $workHours: numeric!) {\n  insertWorkSchedule(\n    object: {userId: $userId, workDay: $workDay, workHours: $workHours}\n  ) {\n    ...WorkScheduleWithUser\n  }\n}\n\nmutation CreateWeeklySchedule($userId: uuid!, $schedules: [workSchedulesInsertInput!]!) {\n  bulkInsertWorkSchedules(objects: $schedules) {\n    returning {\n      ...WorkScheduleBasic\n    }\n    affectedRows\n  }\n}\n\nmutation UpdateDailySchedule($userId: uuid!, $workDay: String!, $workHours: numeric!) {\n  bulkUpdateWorkSchedules(\n    where: {userId: {_eq: $userId}, workDay: {_eq: $workDay}}\n    _set: {workHours: $workHours, updatedAt: \"now()\"}\n  ) {\n    returning {\n      ...WorkScheduleBasic\n    }\n    affectedRows\n  }\n}\n\nmutation UpdateUserScheduleHours($userId: uuid!, $workDay: String!, $newHours: numeric!) {\n  bulkUpdateWorkSchedules(\n    where: {userId: {_eq: $userId}, workDay: {_eq: $workDay}}\n    _set: {workHours: $newHours, updatedAt: \"now()\"}\n  ) {\n    returning {\n      ...WorkScheduleBasic\n    }\n    affectedRows\n  }\n}\n\nmutation AdjustScheduleHours($id: uuid!, $adjustment: numeric!) {\n  updateWorkScheduleById(\n    pkColumns: {id: $id}\n    _inc: {workHours: $adjustment}\n    _set: {updatedAt: \"now()\"}\n  ) {\n    ...WorkScheduleBasic\n  }\n}\n\nmutation UpdateScheduleDateRange($userId: uuid!, $startDate: String!, $endDate: String!, $newHours: numeric!) {\n  bulkUpdateWorkSchedules(\n    where: {userId: {_eq: $userId}, workDay: {_gte: $startDate, _lte: $endDate}}\n    _set: {workHours: $newHours, updatedAt: \"now()\"}\n  ) {\n    returning {\n      ...WorkScheduleBasic\n    }\n    affectedRows\n  }\n}\n\nmutation CancelSchedule($id: uuid!) {\n  updateWorkScheduleById(\n    pkColumns: {id: $id}\n    _set: {workHours: 0, updatedAt: \"now()\"}\n  ) {\n    ...WorkScheduleBasic\n  }\n}\n\nmutation CancelDailySchedule($userId: uuid!, $workDay: String!) {\n  bulkUpdateWorkSchedules(\n    where: {userId: {_eq: $userId}, workDay: {_eq: $workDay}}\n    _set: {workHours: 0, updatedAt: \"now()\"}\n  ) {\n    returning {\n      ...WorkScheduleBasic\n    }\n    affectedRows\n  }\n}\n\nmutation RemoveSchedule($id: uuid!) {\n  deleteWorkScheduleById(id: $id) {\n    id\n    userId\n    workDay\n    workHours\n  }\n}\n\nmutation RemoveDailySchedule($userId: uuid!, $workDay: String!) {\n  bulkDeleteWorkSchedules(\n    where: {userId: {_eq: $userId}, workDay: {_eq: $workDay}}\n  ) {\n    affectedRows\n  }\n}\n\nmutation UpdateWeeklySchedule($userId: uuid!, $startDate: String!, $endDate: String!, $schedules: [workSchedulesInsertInput!]!) {\n  bulkDeleteWorkSchedules(\n    where: {userId: {_eq: $userId}, workDay: {_gte: $startDate, _lte: $endDate}}\n  ) {\n    affectedRows\n  }\n  bulkInsertWorkSchedules(objects: $schedules) {\n    returning {\n      ...WorkScheduleBasic\n    }\n    affectedRows\n  }\n}\n\nmutation BulkUpdateScheduleHours($userIds: [uuid!]!, $workDay: String!, $workHours: numeric!) {\n  bulkUpdateWorkSchedules(\n    where: {userId: {_in: $userIds}, workDay: {_eq: $workDay}}\n    _set: {workHours: $workHours, updatedAt: \"now()\"}\n  ) {\n    returning {\n      ...WorkScheduleBasic\n    }\n    affectedRows\n  }\n}\n\nmutation BulkCreateSchedules($schedules: [workSchedulesInsertInput!]!) {\n  bulkInsertWorkSchedules(objects: $schedules) {\n    returning {\n      ...WorkScheduleBasic\n    }\n    affectedRows\n  }\n}\n\nmutation BulkDeleteSchedules($scheduleIds: [uuid!]!) {\n  bulkDeleteWorkSchedules(where: {id: {_in: $scheduleIds}}) {\n    affectedRows\n  }\n}\n\nmutation BulkCancelSchedules($scheduleIds: [uuid!]!) {\n  bulkUpdateWorkSchedules(\n    where: {id: {_in: $scheduleIds}}\n    _set: {workHours: 0, updatedAt: \"now()\"}\n  ) {\n    returning {\n      ...WorkScheduleBasic\n    }\n    affectedRows\n  }\n}\n\nmutation UpdateTeamSchedule($managerUserId: uuid!, $workDay: String!, $defaultHours: numeric!) {\n  bulkUpdateWorkSchedules(\n    where: {scheduleOwner: {managerId: {_eq: $managerUserId}}, workDay: {_eq: $workDay}}\n    _set: {workHours: $defaultHours, updatedAt: \"now()\"}\n  ) {\n    returning {\n      ...TeamWorkSchedule\n    }\n    affectedRows\n  }\n}\n\nmutation AdjustScheduleForOvertime($id: uuid!, $overtimeHours: numeric!) {\n  updateWorkScheduleById(\n    pkColumns: {id: $id}\n    _inc: {workHours: $overtimeHours}\n    _set: {updatedAt: \"now()\"}\n  ) {\n    ...WorkScheduleBasic\n  }\n}\n\nmutation ReduceScheduleHours($id: uuid!, $reduction: numeric!) {\n  updateWorkScheduleById(\n    pkColumns: {id: $id}\n    _inc: {workHours: $reduction}\n    _set: {updatedAt: \"now()\"}\n  ) {\n    ...WorkScheduleBasic\n  }\n}\n\nmutation TransferSchedules($oldUserId: uuid!, $newUserId: uuid!) {\n  bulkUpdateWorkSchedules(\n    where: {userId: {_eq: $oldUserId}}\n    _set: {userId: $newUserId, updatedAt: \"now()\"}\n  ) {\n    returning {\n      ...WorkScheduleBasic\n    }\n    affectedRows\n  }\n}\n\nmutation PurgeOldSchedules($beforeDate: String!) {\n  bulkDeleteWorkSchedules(where: {workDay: {_lt: $beforeDate}}) {\n    affectedRows\n  }\n}\n\nmutation CleanupCancelledSchedules {\n  bulkDeleteWorkSchedules(\n    where: {workHours: {_eq: 0}, workDay: {_lt: \"now()::date\"}}\n  ) {\n    affectedRows\n  }\n}\n\nmutation CreateEmergencySchedule($userId: uuid!, $workDay: String!, $workHours: numeric!) {\n  insertWorkSchedule(\n    object: {userId: $userId, workDay: $workDay, workHours: $workHours}\n  ) {\n    ...WorkScheduleWithUser\n  }\n}"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "query GetWorkSchedules($limit: Int = 50, $offset: Int = 0, $where: workSchedulesBoolExp) {\n  workSchedules(\n    limit: $limit\n    offset: $offset\n    where: $where\n    orderBy: {workDay: ASC}\n  ) {\n    ...WorkScheduleListItem\n  }\n  workSchedulesAggregate(where: $where) {\n    aggregate {\n      count\n    }\n  }\n}\n\nquery GetWorkScheduleById($id: uuid!) {\n  workScheduleById(id: $id) {\n    ...WorkScheduleComplete\n  }\n}\n\nquery GetWorkScheduleBasic($id: uuid!) {\n  workScheduleById(id: $id) {\n    ...WorkScheduleBasic\n  }\n}\n\nquery GetUserWorkSchedule($userId: uuid!) {\n  workSchedules(where: {userId: {_eq: $userId}}, orderBy: {workDay: ASC}) {\n    ...WorkScheduleWithUser\n  }\n}\n\nquery GetMyWorkSchedule($userId: uuid!) {\n  workSchedules(where: {userId: {_eq: $userId}}, orderBy: {workDay: ASC}) {\n    ...MyWorkSchedule\n  }\n}\n\nquery GetUserScheduleByDay($userId: uuid!, $workDay: String!) {\n  workSchedules(where: {userId: {_eq: $userId}, workDay: {_eq: $workDay}}) {\n    ...WorkScheduleBasic\n  }\n}\n\nquery GetUserScheduleForWeek($userId: uuid!, $startDate: String!, $endDate: String!) {\n  workSchedules(\n    where: {userId: {_eq: $userId}, workDay: {_gte: $startDate, _lte: $endDate}}\n    orderBy: {workDay: ASC}\n  ) {\n    ...WorkScheduleWeeklyView\n  }\n}\n\nquery GetUserScheduleForMonth($userId: uuid!, $startDate: String!, $endDate: String!) {\n  workSchedules(\n    where: {userId: {_eq: $userId}, workDay: {_gte: $startDate, _lte: $endDate}}\n    orderBy: {workDay: ASC}\n  ) {\n    ...WorkScheduleMonthlyView\n  }\n}\n\nquery GetTeamWorkSchedules($managerUserId: uuid!) {\n  workSchedules(\n    where: {scheduleOwner: {managerId: {_eq: $managerUserId}}}\n    orderBy: {workDay: ASC}\n  ) {\n    ...TeamWorkSchedule\n  }\n}\n\nquery GetTeamScheduleByDay($managerUserId: uuid!, $workDay: String!) {\n  workSchedules(\n    where: {scheduleOwner: {managerId: {_eq: $managerUserId}}, workDay: {_eq: $workDay}}\n    orderBy: {scheduleOwner: {name: ASC}}\n  ) {\n    ...TeamWorkSchedule\n  }\n}\n\nquery GetTeamScheduleForWeek($managerUserId: uuid!, $startDate: String!, $endDate: String!) {\n  workSchedules(\n    where: {scheduleOwner: {managerId: {_eq: $managerUserId}}, workDay: {_gte: $startDate, _lte: $endDate}}\n    orderBy: [{workDay: ASC}, {scheduleOwner: {name: ASC}}]\n  ) {\n    ...TeamWorkSchedule\n  }\n}\n\nquery GetManagerScheduleOverview($managerUserId: uuid!) {\n  mySchedule: workSchedules(\n    where: {userId: {_eq: $managerUserId}}\n    orderBy: {workDay: ASC}\n  ) {\n    ...ManagerWorkScheduleView\n  }\n  teamSchedules: workSchedules(\n    where: {scheduleOwner: {managerId: {_eq: $managerUserId}}}\n    orderBy: [{workDay: ASC}, {scheduleOwner: {name: ASC}}]\n  ) {\n    ...TeamWorkSchedule\n  }\n}\n\nquery GetSchedulesByDateRange($startDate: String!, $endDate: String!) {\n  workSchedules(\n    where: {workDay: {_gte: $startDate, _lte: $endDate}}\n    orderBy: [{workDay: ASC}, {scheduleOwner: {name: ASC}}]\n  ) {\n    ...WorkScheduleCalendarItem\n  }\n}\n\nquery GetSchedulesByDay($workDay: String!) {\n  workSchedules(\n    where: {workDay: {_eq: $workDay}}\n    orderBy: {scheduleOwner: {name: ASC}}\n  ) {\n    ...WorkScheduleCalendarItem\n  }\n}\n\nquery GetWeeklySchedulePattern($userId: uuid!) {\n  workSchedules(\n    where: {userId: {_eq: $userId}}\n    orderBy: {workDay: ASC}\n    limit: 7\n  ) {\n    ...WorkScheduleMinimal\n  }\n}\n\nquery GetScheduleConflicts($workDay: String!, $excludeUserId: uuid) {\n  workSchedules(\n    where: {workDay: {_eq: $workDay}, userId: {_neq: $excludeUserId}}\n    orderBy: {workHours: DESC}\n  ) {\n    ...WorkScheduleConflictCheck\n  }\n}\n\nquery GetAvailableUsers($workDay: String!, $minHours: numeric = 4.0) {\n  workSchedules(\n    where: {workDay: {_eq: $workDay}, workHours: {_gte: $minHours}}\n    orderBy: {workHours: DESC}\n  ) {\n    ...WorkScheduleMinimal\n  }\n}\n\nquery GetTeamCapacity($managerUserId: uuid!, $workDay: String!) {\n  workSchedules(\n    where: {scheduleOwner: {managerId: {_eq: $managerUserId}}, workDay: {_eq: $workDay}}\n    orderBy: {workHours: DESC}\n  ) {\n    ...WorkScheduleCapacity\n  }\n}\n\nquery GetWeeklyTeamCapacity($managerUserId: uuid!, $startDate: String!, $endDate: String!) {\n  workSchedules(\n    where: {scheduleOwner: {managerId: {_eq: $managerUserId}}, workDay: {_gte: $startDate, _lte: $endDate}}\n    orderBy: [{workDay: ASC}, {workHours: DESC}]\n  ) {\n    ...WorkScheduleCapacity\n  }\n}\n\nquery GetWorkScheduleStats {\n  totalSchedules: workSchedulesAggregate {\n    aggregate {\n      count\n    }\n  }\n  avgWorkHours: workSchedulesAggregate {\n    aggregate {\n      avg {\n        workHours\n      }\n    }\n  }\n  maxWorkHours: workSchedulesAggregate {\n    aggregate {\n      max {\n        workHours\n      }\n    }\n  }\n  minWorkHours: workSchedulesAggregate {\n    aggregate {\n      min {\n        workHours\n      }\n    }\n  }\n}\n\nquery GetUserWorkHoursTotals($userId: uuid!, $startDate: String!, $endDate: String!) {\n  workSchedules(\n    where: {userId: {_eq: $userId}, workDay: {_gte: $startDate, _lte: $endDate}}\n  ) {\n    ...WorkScheduleMinimal\n  }\n  totalHours: workSchedulesAggregate(\n    where: {userId: {_eq: $userId}, workDay: {_gte: $startDate, _lte: $endDate}}\n  ) {\n    aggregate {\n      sum {\n        workHours\n      }\n    }\n  }\n}\n\nquery GetTeamWorkHoursSummary($managerUserId: uuid!, $startDate: String!, $endDate: String!) {\n  teamSchedules: workSchedules(\n    where: {scheduleOwner: {managerId: {_eq: $managerUserId}}, workDay: {_gte: $startDate, _lte: $endDate}}\n  ) {\n    ...WorkScheduleMinimal\n  }\n  teamHoursTotals: workSchedulesAggregate(\n    where: {scheduleOwner: {managerId: {_eq: $managerUserId}}, workDay: {_gte: $startDate, _lte: $endDate}}\n  ) {\n    aggregate {\n      sum {\n        workHours\n      }\n      avg {\n        workHours\n      }\n      count\n    }\n  }\n}\n\nquery GetWorkScheduleDashboardStats {\n  todaySchedules: workSchedulesAggregate(where: {workDay: {_eq: \"now()::date\"}}) {\n    aggregate {\n      count\n      sum {\n        workHours\n      }\n    }\n  }\n  thisWeekSchedules: workSchedulesAggregate(\n    where: {workDay: {_gte: \"date_trunc('week', now())::date\", _lte: \"(date_trunc('week', now()) + interval '6 days')::date\"}}\n  ) {\n    aggregate {\n      count\n      sum {\n        workHours\n      }\n    }\n  }\n  recentSchedules: workSchedules(orderBy: {createdAt: DESC}, limit: 5) {\n    ...WorkScheduleDashboardCard\n  }\n}\n\nquery SearchWorkSchedules($searchTerm: String!, $limit: Int = 50) {\n  workSchedules(\n    where: {scheduleOwner: {_or: [{name: {_ilike: $searchTerm}}, {email: {_ilike: $searchTerm}}]}}\n    orderBy: {workDay: DESC}\n    limit: $limit\n  ) {\n    ...WorkScheduleTableRow\n  }\n}\n\nquery FilterSchedulesByHours($minHours: numeric!, $maxHours: numeric!) {\n  workSchedules(\n    where: {workHours: {_gte: $minHours, _lte: $maxHours}}\n    orderBy: {workHours: DESC}\n  ) {\n    ...WorkScheduleListItem\n  }\n}\n\nquery GetSchedulesByRole($role: user_role!) {\n  workSchedules(\n    where: {scheduleOwner: {role: {_eq: $role}}}\n    orderBy: {workDay: DESC}\n  ) {\n    ...WorkScheduleListItem\n  }\n}\n\nquery GetUpcomingSchedules($userId: uuid!, $days: Int = 7) {\n  workSchedules(\n    where: {userId: {_eq: $userId}, workDay: {_gte: \"now()::date\", _lte: \"(now() + interval '${days} days')::date\"}}\n    orderBy: {workDay: ASC}\n  ) {\n    ...WorkScheduleBasic\n  }\n}\n\nquery GetRecentSchedules($userId: uuid!, $days: Int = 7) {\n  workSchedules(\n    where: {userId: {_eq: $userId}, workDay: {_gte: \"(now() - interval '${days} days')::date\", _lte: \"now()::date\"}}\n    orderBy: {workDay: DESC}\n  ) {\n    ...WorkScheduleBasic\n  }\n}\n\nquery GetTeamUpcomingSchedules($managerUserId: uuid!, $days: Int = 7) {\n  workSchedules(\n    where: {scheduleOwner: {managerId: {_eq: $managerUserId}}, workDay: {_gte: \"now()::date\", _lte: \"(now() + interval '${days} days')::date\"}}\n    orderBy: [{workDay: ASC}, {scheduleOwner: {name: ASC}}]\n  ) {\n    ...TeamWorkSchedule\n  }\n}\n\nquery GetUserSchedulePatterns($userId: uuid!, $weeks: Int = 4) {\n  workSchedules(\n    where: {userId: {_eq: $userId}, workDay: {_gte: \"(now() - interval '${weeks} weeks')::date\"}}\n    orderBy: {workDay: ASC}\n  ) {\n    ...WorkSchedulePattern\n  }\n}\n\nquery GetTeamSchedulePatterns($managerUserId: uuid!, $weeks: Int = 4) {\n  workSchedules(\n    where: {scheduleOwner: {managerId: {_eq: $managerUserId}}, workDay: {_gte: \"(now() - interval '${weeks} weeks')::date\"}}\n    orderBy: [{workDay: ASC}, {scheduleOwner: {name: ASC}}]\n  ) {\n    ...WorkSchedulePattern\n  }\n}\n\nquery GetWorkSchedulesForAudit($limit: Int = 100, $offset: Int = 0, $where: workSchedulesBoolExp = {}) {\n  workSchedules(\n    limit: $limit\n    offset: $offset\n    where: $where\n    orderBy: {createdAt: DESC}\n  ) {\n    ...WorkScheduleForAudit\n  }\n}\n\nquery GetScheduleChangeHistory($userId: uuid!, $limit: Int = 50) {\n  workSchedules(\n    where: {userId: {_eq: $userId}}\n    orderBy: {updatedAt: DESC}\n    limit: $limit\n  ) {\n    ...WorkScheduleChangeLog\n  }\n}\n\nquery GetWorkSchedulesPaginated($limit: Int = 20, $offset: Int = 0, $where: workSchedulesBoolExp = {}, $orderBy: [workSchedulesOrderBy!] = [{workDay: DESC}]) {\n  workSchedules(limit: $limit, offset: $offset, where: $where, orderBy: $orderBy) {\n    ...WorkScheduleTableRow\n  }\n  workSchedulesAggregate(where: $where) {\n    aggregate {\n      count\n    }\n  }\n}\n\nquery GetUserSchedulesPaginated($userId: uuid!, $limit: Int = 20, $offset: Int = 0, $where: workSchedulesBoolExp = {}) {\n  workSchedules(\n    where: {_and: [{userId: {_eq: $userId}}, $where]}\n    orderBy: {workDay: DESC}\n    limit: $limit\n    offset: $offset\n  ) {\n    ...WorkScheduleTableRow\n  }\n  userSchedulesAggregate: workSchedulesAggregate(\n    where: {_and: [{userId: {_eq: $userId}}, $where]}\n  ) {\n    aggregate {\n      count\n    }\n  }\n}\n\nquery GetWorkSchedulesQuickList($limit: Int = 100) {\n  workSchedules(orderBy: {workDay: DESC}, limit: $limit) {\n    ...WorkScheduleMinimal\n  }\n}\n\nquery GetUserSchedulesQuickList($userId: uuid!) {\n  workSchedules(where: {userId: {_eq: $userId}}, orderBy: {workDay: DESC}) {\n    ...WorkScheduleMinimal\n  }\n}\n\nquery GetTodaySchedulesQuickList {\n  workSchedules(\n    where: {workDay: {_eq: \"now()::date\"}}\n    orderBy: {scheduleOwner: {name: ASC}}\n  ) {\n    ...WorkScheduleMinimal\n  }\n}"): (typeof documents)["query GetWorkSchedules($limit: Int = 50, $offset: Int = 0, $where: workSchedulesBoolExp) {\n  workSchedules(\n    limit: $limit\n    offset: $offset\n    where: $where\n    orderBy: {workDay: ASC}\n  ) {\n    ...WorkScheduleListItem\n  }\n  workSchedulesAggregate(where: $where) {\n    aggregate {\n      count\n    }\n  }\n}\n\nquery GetWorkScheduleById($id: uuid!) {\n  workScheduleById(id: $id) {\n    ...WorkScheduleComplete\n  }\n}\n\nquery GetWorkScheduleBasic($id: uuid!) {\n  workScheduleById(id: $id) {\n    ...WorkScheduleBasic\n  }\n}\n\nquery GetUserWorkSchedule($userId: uuid!) {\n  workSchedules(where: {userId: {_eq: $userId}}, orderBy: {workDay: ASC}) {\n    ...WorkScheduleWithUser\n  }\n}\n\nquery GetMyWorkSchedule($userId: uuid!) {\n  workSchedules(where: {userId: {_eq: $userId}}, orderBy: {workDay: ASC}) {\n    ...MyWorkSchedule\n  }\n}\n\nquery GetUserScheduleByDay($userId: uuid!, $workDay: String!) {\n  workSchedules(where: {userId: {_eq: $userId}, workDay: {_eq: $workDay}}) {\n    ...WorkScheduleBasic\n  }\n}\n\nquery GetUserScheduleForWeek($userId: uuid!, $startDate: String!, $endDate: String!) {\n  workSchedules(\n    where: {userId: {_eq: $userId}, workDay: {_gte: $startDate, _lte: $endDate}}\n    orderBy: {workDay: ASC}\n  ) {\n    ...WorkScheduleWeeklyView\n  }\n}\n\nquery GetUserScheduleForMonth($userId: uuid!, $startDate: String!, $endDate: String!) {\n  workSchedules(\n    where: {userId: {_eq: $userId}, workDay: {_gte: $startDate, _lte: $endDate}}\n    orderBy: {workDay: ASC}\n  ) {\n    ...WorkScheduleMonthlyView\n  }\n}\n\nquery GetTeamWorkSchedules($managerUserId: uuid!) {\n  workSchedules(\n    where: {scheduleOwner: {managerId: {_eq: $managerUserId}}}\n    orderBy: {workDay: ASC}\n  ) {\n    ...TeamWorkSchedule\n  }\n}\n\nquery GetTeamScheduleByDay($managerUserId: uuid!, $workDay: String!) {\n  workSchedules(\n    where: {scheduleOwner: {managerId: {_eq: $managerUserId}}, workDay: {_eq: $workDay}}\n    orderBy: {scheduleOwner: {name: ASC}}\n  ) {\n    ...TeamWorkSchedule\n  }\n}\n\nquery GetTeamScheduleForWeek($managerUserId: uuid!, $startDate: String!, $endDate: String!) {\n  workSchedules(\n    where: {scheduleOwner: {managerId: {_eq: $managerUserId}}, workDay: {_gte: $startDate, _lte: $endDate}}\n    orderBy: [{workDay: ASC}, {scheduleOwner: {name: ASC}}]\n  ) {\n    ...TeamWorkSchedule\n  }\n}\n\nquery GetManagerScheduleOverview($managerUserId: uuid!) {\n  mySchedule: workSchedules(\n    where: {userId: {_eq: $managerUserId}}\n    orderBy: {workDay: ASC}\n  ) {\n    ...ManagerWorkScheduleView\n  }\n  teamSchedules: workSchedules(\n    where: {scheduleOwner: {managerId: {_eq: $managerUserId}}}\n    orderBy: [{workDay: ASC}, {scheduleOwner: {name: ASC}}]\n  ) {\n    ...TeamWorkSchedule\n  }\n}\n\nquery GetSchedulesByDateRange($startDate: String!, $endDate: String!) {\n  workSchedules(\n    where: {workDay: {_gte: $startDate, _lte: $endDate}}\n    orderBy: [{workDay: ASC}, {scheduleOwner: {name: ASC}}]\n  ) {\n    ...WorkScheduleCalendarItem\n  }\n}\n\nquery GetSchedulesByDay($workDay: String!) {\n  workSchedules(\n    where: {workDay: {_eq: $workDay}}\n    orderBy: {scheduleOwner: {name: ASC}}\n  ) {\n    ...WorkScheduleCalendarItem\n  }\n}\n\nquery GetWeeklySchedulePattern($userId: uuid!) {\n  workSchedules(\n    where: {userId: {_eq: $userId}}\n    orderBy: {workDay: ASC}\n    limit: 7\n  ) {\n    ...WorkScheduleMinimal\n  }\n}\n\nquery GetScheduleConflicts($workDay: String!, $excludeUserId: uuid) {\n  workSchedules(\n    where: {workDay: {_eq: $workDay}, userId: {_neq: $excludeUserId}}\n    orderBy: {workHours: DESC}\n  ) {\n    ...WorkScheduleConflictCheck\n  }\n}\n\nquery GetAvailableUsers($workDay: String!, $minHours: numeric = 4.0) {\n  workSchedules(\n    where: {workDay: {_eq: $workDay}, workHours: {_gte: $minHours}}\n    orderBy: {workHours: DESC}\n  ) {\n    ...WorkScheduleMinimal\n  }\n}\n\nquery GetTeamCapacity($managerUserId: uuid!, $workDay: String!) {\n  workSchedules(\n    where: {scheduleOwner: {managerId: {_eq: $managerUserId}}, workDay: {_eq: $workDay}}\n    orderBy: {workHours: DESC}\n  ) {\n    ...WorkScheduleCapacity\n  }\n}\n\nquery GetWeeklyTeamCapacity($managerUserId: uuid!, $startDate: String!, $endDate: String!) {\n  workSchedules(\n    where: {scheduleOwner: {managerId: {_eq: $managerUserId}}, workDay: {_gte: $startDate, _lte: $endDate}}\n    orderBy: [{workDay: ASC}, {workHours: DESC}]\n  ) {\n    ...WorkScheduleCapacity\n  }\n}\n\nquery GetWorkScheduleStats {\n  totalSchedules: workSchedulesAggregate {\n    aggregate {\n      count\n    }\n  }\n  avgWorkHours: workSchedulesAggregate {\n    aggregate {\n      avg {\n        workHours\n      }\n    }\n  }\n  maxWorkHours: workSchedulesAggregate {\n    aggregate {\n      max {\n        workHours\n      }\n    }\n  }\n  minWorkHours: workSchedulesAggregate {\n    aggregate {\n      min {\n        workHours\n      }\n    }\n  }\n}\n\nquery GetUserWorkHoursTotals($userId: uuid!, $startDate: String!, $endDate: String!) {\n  workSchedules(\n    where: {userId: {_eq: $userId}, workDay: {_gte: $startDate, _lte: $endDate}}\n  ) {\n    ...WorkScheduleMinimal\n  }\n  totalHours: workSchedulesAggregate(\n    where: {userId: {_eq: $userId}, workDay: {_gte: $startDate, _lte: $endDate}}\n  ) {\n    aggregate {\n      sum {\n        workHours\n      }\n    }\n  }\n}\n\nquery GetTeamWorkHoursSummary($managerUserId: uuid!, $startDate: String!, $endDate: String!) {\n  teamSchedules: workSchedules(\n    where: {scheduleOwner: {managerId: {_eq: $managerUserId}}, workDay: {_gte: $startDate, _lte: $endDate}}\n  ) {\n    ...WorkScheduleMinimal\n  }\n  teamHoursTotals: workSchedulesAggregate(\n    where: {scheduleOwner: {managerId: {_eq: $managerUserId}}, workDay: {_gte: $startDate, _lte: $endDate}}\n  ) {\n    aggregate {\n      sum {\n        workHours\n      }\n      avg {\n        workHours\n      }\n      count\n    }\n  }\n}\n\nquery GetWorkScheduleDashboardStats {\n  todaySchedules: workSchedulesAggregate(where: {workDay: {_eq: \"now()::date\"}}) {\n    aggregate {\n      count\n      sum {\n        workHours\n      }\n    }\n  }\n  thisWeekSchedules: workSchedulesAggregate(\n    where: {workDay: {_gte: \"date_trunc('week', now())::date\", _lte: \"(date_trunc('week', now()) + interval '6 days')::date\"}}\n  ) {\n    aggregate {\n      count\n      sum {\n        workHours\n      }\n    }\n  }\n  recentSchedules: workSchedules(orderBy: {createdAt: DESC}, limit: 5) {\n    ...WorkScheduleDashboardCard\n  }\n}\n\nquery SearchWorkSchedules($searchTerm: String!, $limit: Int = 50) {\n  workSchedules(\n    where: {scheduleOwner: {_or: [{name: {_ilike: $searchTerm}}, {email: {_ilike: $searchTerm}}]}}\n    orderBy: {workDay: DESC}\n    limit: $limit\n  ) {\n    ...WorkScheduleTableRow\n  }\n}\n\nquery FilterSchedulesByHours($minHours: numeric!, $maxHours: numeric!) {\n  workSchedules(\n    where: {workHours: {_gte: $minHours, _lte: $maxHours}}\n    orderBy: {workHours: DESC}\n  ) {\n    ...WorkScheduleListItem\n  }\n}\n\nquery GetSchedulesByRole($role: user_role!) {\n  workSchedules(\n    where: {scheduleOwner: {role: {_eq: $role}}}\n    orderBy: {workDay: DESC}\n  ) {\n    ...WorkScheduleListItem\n  }\n}\n\nquery GetUpcomingSchedules($userId: uuid!, $days: Int = 7) {\n  workSchedules(\n    where: {userId: {_eq: $userId}, workDay: {_gte: \"now()::date\", _lte: \"(now() + interval '${days} days')::date\"}}\n    orderBy: {workDay: ASC}\n  ) {\n    ...WorkScheduleBasic\n  }\n}\n\nquery GetRecentSchedules($userId: uuid!, $days: Int = 7) {\n  workSchedules(\n    where: {userId: {_eq: $userId}, workDay: {_gte: \"(now() - interval '${days} days')::date\", _lte: \"now()::date\"}}\n    orderBy: {workDay: DESC}\n  ) {\n    ...WorkScheduleBasic\n  }\n}\n\nquery GetTeamUpcomingSchedules($managerUserId: uuid!, $days: Int = 7) {\n  workSchedules(\n    where: {scheduleOwner: {managerId: {_eq: $managerUserId}}, workDay: {_gte: \"now()::date\", _lte: \"(now() + interval '${days} days')::date\"}}\n    orderBy: [{workDay: ASC}, {scheduleOwner: {name: ASC}}]\n  ) {\n    ...TeamWorkSchedule\n  }\n}\n\nquery GetUserSchedulePatterns($userId: uuid!, $weeks: Int = 4) {\n  workSchedules(\n    where: {userId: {_eq: $userId}, workDay: {_gte: \"(now() - interval '${weeks} weeks')::date\"}}\n    orderBy: {workDay: ASC}\n  ) {\n    ...WorkSchedulePattern\n  }\n}\n\nquery GetTeamSchedulePatterns($managerUserId: uuid!, $weeks: Int = 4) {\n  workSchedules(\n    where: {scheduleOwner: {managerId: {_eq: $managerUserId}}, workDay: {_gte: \"(now() - interval '${weeks} weeks')::date\"}}\n    orderBy: [{workDay: ASC}, {scheduleOwner: {name: ASC}}]\n  ) {\n    ...WorkSchedulePattern\n  }\n}\n\nquery GetWorkSchedulesForAudit($limit: Int = 100, $offset: Int = 0, $where: workSchedulesBoolExp = {}) {\n  workSchedules(\n    limit: $limit\n    offset: $offset\n    where: $where\n    orderBy: {createdAt: DESC}\n  ) {\n    ...WorkScheduleForAudit\n  }\n}\n\nquery GetScheduleChangeHistory($userId: uuid!, $limit: Int = 50) {\n  workSchedules(\n    where: {userId: {_eq: $userId}}\n    orderBy: {updatedAt: DESC}\n    limit: $limit\n  ) {\n    ...WorkScheduleChangeLog\n  }\n}\n\nquery GetWorkSchedulesPaginated($limit: Int = 20, $offset: Int = 0, $where: workSchedulesBoolExp = {}, $orderBy: [workSchedulesOrderBy!] = [{workDay: DESC}]) {\n  workSchedules(limit: $limit, offset: $offset, where: $where, orderBy: $orderBy) {\n    ...WorkScheduleTableRow\n  }\n  workSchedulesAggregate(where: $where) {\n    aggregate {\n      count\n    }\n  }\n}\n\nquery GetUserSchedulesPaginated($userId: uuid!, $limit: Int = 20, $offset: Int = 0, $where: workSchedulesBoolExp = {}) {\n  workSchedules(\n    where: {_and: [{userId: {_eq: $userId}}, $where]}\n    orderBy: {workDay: DESC}\n    limit: $limit\n    offset: $offset\n  ) {\n    ...WorkScheduleTableRow\n  }\n  userSchedulesAggregate: workSchedulesAggregate(\n    where: {_and: [{userId: {_eq: $userId}}, $where]}\n  ) {\n    aggregate {\n      count\n    }\n  }\n}\n\nquery GetWorkSchedulesQuickList($limit: Int = 100) {\n  workSchedules(orderBy: {workDay: DESC}, limit: $limit) {\n    ...WorkScheduleMinimal\n  }\n}\n\nquery GetUserSchedulesQuickList($userId: uuid!) {\n  workSchedules(where: {userId: {_eq: $userId}}, orderBy: {workDay: DESC}) {\n    ...WorkScheduleMinimal\n  }\n}\n\nquery GetTodaySchedulesQuickList {\n  workSchedules(\n    where: {workDay: {_eq: \"now()::date\"}}\n    orderBy: {scheduleOwner: {name: ASC}}\n  ) {\n    ...WorkScheduleMinimal\n  }\n}"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "subscription WorkSchedulesUpdates {\n  workSchedules(orderBy: {updatedAt: DESC}) {\n    ...WorkScheduleListItem\n  }\n}\n\nsubscription WorkScheduleUpdates($id: uuid!) {\n  workSchedules(where: {id: {_eq: $id}}) {\n    ...WorkScheduleComplete\n  }\n}\n\nsubscription UserWorkScheduleUpdates($userId: uuid!) {\n  workSchedules(where: {userId: {_eq: $userId}}, orderBy: {workDay: DESC}) {\n    ...WorkScheduleWithUser\n  }\n}\n\nsubscription MyWorkScheduleUpdates($userId: uuid!) {\n  workSchedules(where: {userId: {_eq: $userId}}, orderBy: {workDay: ASC}) {\n    ...MyWorkSchedule\n  }\n}\n\nsubscription MyScheduleChanges($userId: uuid!) {\n  workSchedules(\n    where: {userId: {_eq: $userId}, updatedAt: {_gte: \"now() - interval '1 hour'\"}}\n    orderBy: {updatedAt: DESC}\n  ) {\n    ...WorkScheduleBasic\n  }\n}\n\nsubscription MyUpcomingScheduleUpdates($userId: uuid!, $days: Int = 7) {\n  workSchedules(\n    where: {userId: {_eq: $userId}, workDay: {_gte: \"now()::date\", _lte: \"(now() + interval '${days} days')::date\"}}\n    orderBy: {workDay: ASC}\n  ) {\n    ...WorkScheduleBasic\n  }\n}\n\nsubscription TeamWorkScheduleUpdates($managerUserId: uuid!) {\n  workSchedules(\n    where: {scheduleOwner: {managerId: {_eq: $managerUserId}}}\n    orderBy: {workDay: DESC}\n  ) {\n    ...TeamWorkSchedule\n  }\n}\n\nsubscription TeamScheduleChanges($managerUserId: uuid!) {\n  workSchedules(\n    where: {scheduleOwner: {managerId: {_eq: $managerUserId}}, updatedAt: {_gte: \"now() - interval '1 hour'\"}}\n    orderBy: {updatedAt: DESC}\n  ) {\n    ...TeamWorkSchedule\n  }\n}\n\nsubscription TeamDailyScheduleUpdates($managerUserId: uuid!, $workDay: String!) {\n  workSchedules(\n    where: {scheduleOwner: {managerId: {_eq: $managerUserId}}, workDay: {_eq: $workDay}}\n    orderBy: {scheduleOwner: {name: ASC}}\n  ) {\n    ...TeamWorkSchedule\n  }\n}\n\nsubscription TeamWeeklyScheduleUpdates($managerUserId: uuid!, $startDate: String!, $endDate: String!) {\n  workSchedules(\n    where: {scheduleOwner: {managerId: {_eq: $managerUserId}}, workDay: {_gte: $startDate, _lte: $endDate}}\n    orderBy: [{workDay: ASC}, {scheduleOwner: {name: ASC}}]\n  ) {\n    ...TeamWorkSchedule\n  }\n}\n\nsubscription DailyScheduleUpdates($workDay: String!) {\n  workSchedules(\n    where: {workDay: {_eq: $workDay}}\n    orderBy: {scheduleOwner: {name: ASC}}\n  ) {\n    ...WorkScheduleBasic\n  }\n}\n\nsubscription TodayScheduleUpdates {\n  workSchedules(\n    where: {workDay: {_eq: \"now()::date\"}}\n    orderBy: {scheduleOwner: {name: ASC}}\n  ) {\n    ...WorkScheduleBasic\n  }\n}\n\nsubscription WeeklyScheduleUpdates($startDate: String!, $endDate: String!) {\n  workSchedules(\n    where: {workDay: {_gte: $startDate, _lte: $endDate}}\n    orderBy: [{workDay: ASC}, {scheduleOwner: {name: ASC}}]\n  ) {\n    ...WorkScheduleCalendarItem\n  }\n}\n\nsubscription MonthlyScheduleUpdates($startDate: String!, $endDate: String!) {\n  workSchedules(\n    where: {workDay: {_gte: $startDate, _lte: $endDate}}\n    orderBy: [{workDay: ASC}, {scheduleOwner: {name: ASC}}]\n  ) {\n    ...WorkScheduleMonthlyView\n  }\n}\n\nsubscription ScheduleAvailabilityUpdates($workDay: String!, $minHours: numeric = 4.0) {\n  workSchedules(\n    where: {workDay: {_eq: $workDay}, workHours: {_gte: $minHours}}\n    orderBy: {workHours: DESC}\n  ) {\n    ...WorkScheduleCapacity\n  }\n}\n\nsubscription TeamCapacityUpdates($managerUserId: uuid!, $workDay: String!) {\n  workSchedules(\n    where: {scheduleOwner: {managerId: {_eq: $managerUserId}}, workDay: {_eq: $workDay}}\n    orderBy: {workHours: DESC}\n  ) {\n    ...WorkScheduleCapacity\n  }\n}\n\nsubscription ScheduleConflictUpdates($workDay: String!) {\n  workSchedules(where: {workDay: {_eq: $workDay}}, orderBy: {workHours: DESC}) {\n    ...WorkScheduleConflictCheck\n  }\n}\n\nsubscription WeeklyCapacityUpdates($managerUserId: uuid!, $startDate: String!, $endDate: String!) {\n  workSchedules(\n    where: {scheduleOwner: {managerId: {_eq: $managerUserId}}, workDay: {_gte: $startDate, _lte: $endDate}}\n    orderBy: [{workDay: ASC}, {workHours: DESC}]\n  ) {\n    ...WorkScheduleCapacity\n  }\n}\n\nsubscription TodaySchedulesUpdates {\n  workSchedulesAggregate(where: {workDay: {_eq: \"now()::date\"}}) {\n    aggregate {\n      count\n      sum {\n        workHours\n      }\n    }\n  }\n}\n\nsubscription ThisWeekSchedulesUpdates {\n  workSchedulesAggregate(\n    where: {workDay: {_gte: \"date_trunc('week', now())::date\", _lte: \"(date_trunc('week', now()) + interval '6 days')::date\"}}\n  ) {\n    aggregate {\n      count\n      sum {\n        workHours\n      }\n    }\n  }\n}\n\nsubscription RecentSchedulesUpdates {\n  workSchedules(orderBy: {createdAt: DESC}, limit: 5) {\n    ...WorkScheduleDashboardCard\n  }\n}\n\nsubscription TotalSchedulesUpdates {\n  workSchedulesAggregate {\n    aggregate {\n      count\n    }\n  }\n}\n\nsubscription AvgWorkHoursUpdates {\n  workSchedulesAggregate {\n    aggregate {\n      avg {\n        workHours\n      }\n    }\n  }\n}\n\nsubscription TodayTotalHoursUpdates {\n  workSchedulesAggregate(where: {workDay: {_eq: \"now()::date\"}}) {\n    aggregate {\n      sum {\n        workHours\n      }\n    }\n  }\n}\n\nsubscription UserWorkSchedulesUpdates($userId: uuid!, $startDate: String!, $endDate: String!) {\n  workSchedules(\n    where: {userId: {_eq: $userId}, workDay: {_gte: $startDate, _lte: $endDate}}\n  ) {\n    ...WorkScheduleWeeklyView\n  }\n}\n\nsubscription UserTotalHoursUpdates($userId: uuid!, $startDate: String!, $endDate: String!) {\n  workSchedulesAggregate(\n    where: {userId: {_eq: $userId}, workDay: {_gte: $startDate, _lte: $endDate}}\n  ) {\n    aggregate {\n      sum {\n        workHours\n      }\n    }\n  }\n}\n\nsubscription TeamSchedulesUpdates($managerUserId: uuid!, $startDate: String!, $endDate: String!) {\n  workSchedules(\n    where: {scheduleOwner: {managerId: {_eq: $managerUserId}}, workDay: {_gte: $startDate, _lte: $endDate}}\n  ) {\n    ...WorkScheduleDashboardCard\n  }\n}\n\nsubscription TeamHoursTotalsUpdates($managerUserId: uuid!, $startDate: String!, $endDate: String!) {\n  workSchedulesAggregate(\n    where: {scheduleOwner: {managerId: {_eq: $managerUserId}}, workDay: {_gte: $startDate, _lte: $endDate}}\n  ) {\n    aggregate {\n      sum {\n        workHours\n      }\n      avg {\n        workHours\n      }\n      count\n    }\n  }\n}\n\nsubscription SchedulesByRoleUpdates($role: user_role!) {\n  workSchedules(\n    where: {scheduleOwner: {role: {_eq: $role}}}\n    orderBy: {workDay: DESC}\n  ) {\n    ...WorkScheduleListItem\n  }\n}\n\nsubscription ConsultantScheduleUpdates {\n  workSchedules(\n    where: {scheduleOwner: {role: {_eq: \"consultant\"}}}\n    orderBy: {workDay: DESC}\n  ) {\n    ...WorkScheduleListItem\n  }\n}\n\nsubscription ManagerScheduleUpdates {\n  workSchedules(\n    where: {scheduleOwner: {role: {_eq: \"manager\"}}}\n    orderBy: {workDay: DESC}\n  ) {\n    ...WorkScheduleListItem\n  }\n}\n\nsubscription RecentScheduleChangesUpdates($minutes: Int = 30) {\n  workSchedules(\n    where: {updatedAt: {_gte: \"now() - interval '${minutes} minutes'\"}}\n    orderBy: {updatedAt: DESC}\n  ) {\n    ...WorkScheduleChangeLog\n  }\n}\n\nsubscription NewScheduleCreationsUpdates {\n  workSchedules(\n    where: {createdAt: {_gte: \"now() - interval '5 minutes'\"}}\n    orderBy: {createdAt: DESC}\n  ) {\n    ...WorkScheduleWithUser\n    createdAt\n  }\n}\n\nsubscription TeamScheduleChangesUpdates($userId: uuid!) {\n  workSchedules(\n    where: {scheduleOwner: {managerId: {_eq: $userId}}, updatedAt: {_gte: \"now() - interval '24 hours'\"}}\n    orderBy: {updatedAt: DESC}\n  ) {\n    ...TeamWorkSchedule\n  }\n}\n\nsubscription MyScheduleChangesUpdates($userId: uuid!) {\n  workSchedules(\n    where: {userId: {_eq: $userId}, updatedAt: {_gte: \"now() - interval '24 hours'\"}}\n    orderBy: {updatedAt: DESC}\n  ) {\n    ...WorkScheduleBasic\n  }\n}\n\nsubscription OvertimeSchedulesUpdates {\n  workSchedules(\n    where: {workHours: {_gt: 8.0}, workDay: {_gte: \"now()::date\"}}\n    orderBy: {workHours: DESC}\n  ) {\n    ...WorkScheduleWithUser\n  }\n}\n\nsubscription UnderScheduledUpdates {\n  workSchedules(\n    where: {workHours: {_lt: 4.0, _gt: 0.0}, workDay: {_gte: \"now()::date\"}}\n    orderBy: {workHours: ASC}\n  ) {\n    ...WorkScheduleWithUser\n  }\n}\n\nsubscription HeavilyScheduledUsersUpdates {\n  workSchedules(\n    where: {workHours: {_gte: 10.0}, workDay: {_gte: \"now()::date\", _lte: \"(now() + interval '7 days')::date\"}}\n    orderBy: {workHours: DESC}\n  ) {\n    ...WorkScheduleWithUser\n  }\n}\n\nsubscription RecentScheduleVolumeUpdates {\n  workSchedulesAggregate(where: {createdAt: {_gte: \"now() - interval '1 hour'\"}}) {\n    aggregate {\n      count\n    }\n  }\n}\n\nsubscription ScheduleRecentActivityUpdates {\n  workSchedules(orderBy: {updatedAt: DESC}, limit: 5) {\n    id\n    workDay\n    workHours\n    updatedAt\n    scheduleOwner {\n      name\n    }\n  }\n}\n\nsubscription ScheduleSystemMetricsUpdates {\n  workSchedulesAggregate {\n    aggregate {\n      count\n    }\n  }\n}\n\nsubscription TodayScheduleCountUpdates {\n  workSchedulesAggregate(where: {workDay: {_eq: \"now()::date\"}}) {\n    aggregate {\n      count\n    }\n  }\n}\n\nsubscription WorkScheduleAuditUpdates {\n  workSchedules(\n    where: {updatedAt: {_gte: \"now() - interval '1 hour'\"}}\n    orderBy: {updatedAt: DESC}\n  ) {\n    ...WorkScheduleForAudit\n  }\n}\n\nsubscription ScheduleChangeAuditUpdates($userId: uuid!) {\n  workSchedules(\n    where: {userId: {_eq: $userId}, updatedAt: {_gte: \"now() - interval '1 hour'\"}}\n    orderBy: {updatedAt: DESC}\n  ) {\n    ...WorkScheduleChangeLog\n  }\n}\n\nsubscription TeamScheduleAuditUpdates($managerUserId: uuid!) {\n  workSchedules(\n    where: {scheduleOwner: {managerId: {_eq: $managerUserId}}, updatedAt: {_gte: \"now() - interval '1 hour'\"}}\n    orderBy: {updatedAt: DESC}\n  ) {\n    ...WorkScheduleForAudit\n  }\n}\n\nsubscription SchedulePatternUpdates($userId: uuid!) {\n  workSchedules(\n    where: {userId: {_eq: $userId}, workDay: {_gte: \"(now() - interval '4 weeks')::date\"}}\n    orderBy: {workDay: ASC}\n  ) {\n    ...WorkSchedulePattern\n  }\n}\n\nsubscription TeamSchedulePatternUpdates($managerUserId: uuid!) {\n  workSchedules(\n    where: {scheduleOwner: {managerId: {_eq: $managerUserId}}, workDay: {_gte: \"(now() - interval '4 weeks')::date\"}}\n    orderBy: [{workDay: ASC}, {scheduleOwner: {name: ASC}}]\n  ) {\n    ...WorkSchedulePattern\n  }\n}\n\nsubscription UpcomingScheduleUpdates($days: Int = 7) {\n  workSchedules(\n    where: {workDay: {_gte: \"now()::date\", _lte: \"(now() + interval '${days} days')::date\"}}\n    orderBy: [{workDay: ASC}, {scheduleOwner: {name: ASC}}]\n  ) {\n    ...WorkScheduleCalendarItem\n  }\n}\n\nsubscription TeamUpcomingScheduleUpdates($managerUserId: uuid!, $days: Int = 7) {\n  workSchedules(\n    where: {scheduleOwner: {managerId: {_eq: $managerUserId}}, workDay: {_gte: \"now()::date\", _lte: \"(now() + interval '${days} days')::date\"}}\n    orderBy: [{workDay: ASC}, {scheduleOwner: {name: ASC}}]\n  ) {\n    ...TeamWorkSchedule\n  }\n}\n\nsubscription NextWeekScheduleUpdates {\n  workSchedules(\n    where: {workDay: {_gte: \"(date_trunc('week', now()) + interval '1 week')::date\", _lte: \"(date_trunc('week', now()) + interval '1 week 6 days')::date\"}}\n    orderBy: [{workDay: ASC}, {scheduleOwner: {name: ASC}}]\n  ) {\n    ...WorkScheduleCalendarItem\n  }\n}\n\nsubscription ScheduleCountUpdates {\n  workSchedulesAggregate {\n    aggregate {\n      count\n    }\n  }\n}\n\nsubscription TotalHoursUpdates {\n  workSchedulesAggregate(where: {workDay: {_gte: \"now()::date\"}}) {\n    aggregate {\n      sum {\n        workHours\n      }\n    }\n  }\n}\n\nsubscription AvgHoursPerDayUpdates {\n  workSchedulesAggregate(where: {workDay: {_gte: \"now()::date\"}}) {\n    aggregate {\n      avg {\n        workHours\n      }\n    }\n  }\n}\n\nsubscription UserSchedulesUpdates($userId: uuid!) {\n  workSchedules(where: {userId: {_eq: $userId}}) {\n    ...MyWorkSchedule\n  }\n}\n\nsubscription UserFutureTotalHoursUpdates($userId: uuid!) {\n  workSchedulesAggregate(\n    where: {userId: {_eq: $userId}, workDay: {_gte: \"now()::date\"}}\n  ) {\n    aggregate {\n      sum {\n        workHours\n      }\n    }\n  }\n}"): (typeof documents)["subscription WorkSchedulesUpdates {\n  workSchedules(orderBy: {updatedAt: DESC}) {\n    ...WorkScheduleListItem\n  }\n}\n\nsubscription WorkScheduleUpdates($id: uuid!) {\n  workSchedules(where: {id: {_eq: $id}}) {\n    ...WorkScheduleComplete\n  }\n}\n\nsubscription UserWorkScheduleUpdates($userId: uuid!) {\n  workSchedules(where: {userId: {_eq: $userId}}, orderBy: {workDay: DESC}) {\n    ...WorkScheduleWithUser\n  }\n}\n\nsubscription MyWorkScheduleUpdates($userId: uuid!) {\n  workSchedules(where: {userId: {_eq: $userId}}, orderBy: {workDay: ASC}) {\n    ...MyWorkSchedule\n  }\n}\n\nsubscription MyScheduleChanges($userId: uuid!) {\n  workSchedules(\n    where: {userId: {_eq: $userId}, updatedAt: {_gte: \"now() - interval '1 hour'\"}}\n    orderBy: {updatedAt: DESC}\n  ) {\n    ...WorkScheduleBasic\n  }\n}\n\nsubscription MyUpcomingScheduleUpdates($userId: uuid!, $days: Int = 7) {\n  workSchedules(\n    where: {userId: {_eq: $userId}, workDay: {_gte: \"now()::date\", _lte: \"(now() + interval '${days} days')::date\"}}\n    orderBy: {workDay: ASC}\n  ) {\n    ...WorkScheduleBasic\n  }\n}\n\nsubscription TeamWorkScheduleUpdates($managerUserId: uuid!) {\n  workSchedules(\n    where: {scheduleOwner: {managerId: {_eq: $managerUserId}}}\n    orderBy: {workDay: DESC}\n  ) {\n    ...TeamWorkSchedule\n  }\n}\n\nsubscription TeamScheduleChanges($managerUserId: uuid!) {\n  workSchedules(\n    where: {scheduleOwner: {managerId: {_eq: $managerUserId}}, updatedAt: {_gte: \"now() - interval '1 hour'\"}}\n    orderBy: {updatedAt: DESC}\n  ) {\n    ...TeamWorkSchedule\n  }\n}\n\nsubscription TeamDailyScheduleUpdates($managerUserId: uuid!, $workDay: String!) {\n  workSchedules(\n    where: {scheduleOwner: {managerId: {_eq: $managerUserId}}, workDay: {_eq: $workDay}}\n    orderBy: {scheduleOwner: {name: ASC}}\n  ) {\n    ...TeamWorkSchedule\n  }\n}\n\nsubscription TeamWeeklyScheduleUpdates($managerUserId: uuid!, $startDate: String!, $endDate: String!) {\n  workSchedules(\n    where: {scheduleOwner: {managerId: {_eq: $managerUserId}}, workDay: {_gte: $startDate, _lte: $endDate}}\n    orderBy: [{workDay: ASC}, {scheduleOwner: {name: ASC}}]\n  ) {\n    ...TeamWorkSchedule\n  }\n}\n\nsubscription DailyScheduleUpdates($workDay: String!) {\n  workSchedules(\n    where: {workDay: {_eq: $workDay}}\n    orderBy: {scheduleOwner: {name: ASC}}\n  ) {\n    ...WorkScheduleBasic\n  }\n}\n\nsubscription TodayScheduleUpdates {\n  workSchedules(\n    where: {workDay: {_eq: \"now()::date\"}}\n    orderBy: {scheduleOwner: {name: ASC}}\n  ) {\n    ...WorkScheduleBasic\n  }\n}\n\nsubscription WeeklyScheduleUpdates($startDate: String!, $endDate: String!) {\n  workSchedules(\n    where: {workDay: {_gte: $startDate, _lte: $endDate}}\n    orderBy: [{workDay: ASC}, {scheduleOwner: {name: ASC}}]\n  ) {\n    ...WorkScheduleCalendarItem\n  }\n}\n\nsubscription MonthlyScheduleUpdates($startDate: String!, $endDate: String!) {\n  workSchedules(\n    where: {workDay: {_gte: $startDate, _lte: $endDate}}\n    orderBy: [{workDay: ASC}, {scheduleOwner: {name: ASC}}]\n  ) {\n    ...WorkScheduleMonthlyView\n  }\n}\n\nsubscription ScheduleAvailabilityUpdates($workDay: String!, $minHours: numeric = 4.0) {\n  workSchedules(\n    where: {workDay: {_eq: $workDay}, workHours: {_gte: $minHours}}\n    orderBy: {workHours: DESC}\n  ) {\n    ...WorkScheduleCapacity\n  }\n}\n\nsubscription TeamCapacityUpdates($managerUserId: uuid!, $workDay: String!) {\n  workSchedules(\n    where: {scheduleOwner: {managerId: {_eq: $managerUserId}}, workDay: {_eq: $workDay}}\n    orderBy: {workHours: DESC}\n  ) {\n    ...WorkScheduleCapacity\n  }\n}\n\nsubscription ScheduleConflictUpdates($workDay: String!) {\n  workSchedules(where: {workDay: {_eq: $workDay}}, orderBy: {workHours: DESC}) {\n    ...WorkScheduleConflictCheck\n  }\n}\n\nsubscription WeeklyCapacityUpdates($managerUserId: uuid!, $startDate: String!, $endDate: String!) {\n  workSchedules(\n    where: {scheduleOwner: {managerId: {_eq: $managerUserId}}, workDay: {_gte: $startDate, _lte: $endDate}}\n    orderBy: [{workDay: ASC}, {workHours: DESC}]\n  ) {\n    ...WorkScheduleCapacity\n  }\n}\n\nsubscription TodaySchedulesUpdates {\n  workSchedulesAggregate(where: {workDay: {_eq: \"now()::date\"}}) {\n    aggregate {\n      count\n      sum {\n        workHours\n      }\n    }\n  }\n}\n\nsubscription ThisWeekSchedulesUpdates {\n  workSchedulesAggregate(\n    where: {workDay: {_gte: \"date_trunc('week', now())::date\", _lte: \"(date_trunc('week', now()) + interval '6 days')::date\"}}\n  ) {\n    aggregate {\n      count\n      sum {\n        workHours\n      }\n    }\n  }\n}\n\nsubscription RecentSchedulesUpdates {\n  workSchedules(orderBy: {createdAt: DESC}, limit: 5) {\n    ...WorkScheduleDashboardCard\n  }\n}\n\nsubscription TotalSchedulesUpdates {\n  workSchedulesAggregate {\n    aggregate {\n      count\n    }\n  }\n}\n\nsubscription AvgWorkHoursUpdates {\n  workSchedulesAggregate {\n    aggregate {\n      avg {\n        workHours\n      }\n    }\n  }\n}\n\nsubscription TodayTotalHoursUpdates {\n  workSchedulesAggregate(where: {workDay: {_eq: \"now()::date\"}}) {\n    aggregate {\n      sum {\n        workHours\n      }\n    }\n  }\n}\n\nsubscription UserWorkSchedulesUpdates($userId: uuid!, $startDate: String!, $endDate: String!) {\n  workSchedules(\n    where: {userId: {_eq: $userId}, workDay: {_gte: $startDate, _lte: $endDate}}\n  ) {\n    ...WorkScheduleWeeklyView\n  }\n}\n\nsubscription UserTotalHoursUpdates($userId: uuid!, $startDate: String!, $endDate: String!) {\n  workSchedulesAggregate(\n    where: {userId: {_eq: $userId}, workDay: {_gte: $startDate, _lte: $endDate}}\n  ) {\n    aggregate {\n      sum {\n        workHours\n      }\n    }\n  }\n}\n\nsubscription TeamSchedulesUpdates($managerUserId: uuid!, $startDate: String!, $endDate: String!) {\n  workSchedules(\n    where: {scheduleOwner: {managerId: {_eq: $managerUserId}}, workDay: {_gte: $startDate, _lte: $endDate}}\n  ) {\n    ...WorkScheduleDashboardCard\n  }\n}\n\nsubscription TeamHoursTotalsUpdates($managerUserId: uuid!, $startDate: String!, $endDate: String!) {\n  workSchedulesAggregate(\n    where: {scheduleOwner: {managerId: {_eq: $managerUserId}}, workDay: {_gte: $startDate, _lte: $endDate}}\n  ) {\n    aggregate {\n      sum {\n        workHours\n      }\n      avg {\n        workHours\n      }\n      count\n    }\n  }\n}\n\nsubscription SchedulesByRoleUpdates($role: user_role!) {\n  workSchedules(\n    where: {scheduleOwner: {role: {_eq: $role}}}\n    orderBy: {workDay: DESC}\n  ) {\n    ...WorkScheduleListItem\n  }\n}\n\nsubscription ConsultantScheduleUpdates {\n  workSchedules(\n    where: {scheduleOwner: {role: {_eq: \"consultant\"}}}\n    orderBy: {workDay: DESC}\n  ) {\n    ...WorkScheduleListItem\n  }\n}\n\nsubscription ManagerScheduleUpdates {\n  workSchedules(\n    where: {scheduleOwner: {role: {_eq: \"manager\"}}}\n    orderBy: {workDay: DESC}\n  ) {\n    ...WorkScheduleListItem\n  }\n}\n\nsubscription RecentScheduleChangesUpdates($minutes: Int = 30) {\n  workSchedules(\n    where: {updatedAt: {_gte: \"now() - interval '${minutes} minutes'\"}}\n    orderBy: {updatedAt: DESC}\n  ) {\n    ...WorkScheduleChangeLog\n  }\n}\n\nsubscription NewScheduleCreationsUpdates {\n  workSchedules(\n    where: {createdAt: {_gte: \"now() - interval '5 minutes'\"}}\n    orderBy: {createdAt: DESC}\n  ) {\n    ...WorkScheduleWithUser\n    createdAt\n  }\n}\n\nsubscription TeamScheduleChangesUpdates($userId: uuid!) {\n  workSchedules(\n    where: {scheduleOwner: {managerId: {_eq: $userId}}, updatedAt: {_gte: \"now() - interval '24 hours'\"}}\n    orderBy: {updatedAt: DESC}\n  ) {\n    ...TeamWorkSchedule\n  }\n}\n\nsubscription MyScheduleChangesUpdates($userId: uuid!) {\n  workSchedules(\n    where: {userId: {_eq: $userId}, updatedAt: {_gte: \"now() - interval '24 hours'\"}}\n    orderBy: {updatedAt: DESC}\n  ) {\n    ...WorkScheduleBasic\n  }\n}\n\nsubscription OvertimeSchedulesUpdates {\n  workSchedules(\n    where: {workHours: {_gt: 8.0}, workDay: {_gte: \"now()::date\"}}\n    orderBy: {workHours: DESC}\n  ) {\n    ...WorkScheduleWithUser\n  }\n}\n\nsubscription UnderScheduledUpdates {\n  workSchedules(\n    where: {workHours: {_lt: 4.0, _gt: 0.0}, workDay: {_gte: \"now()::date\"}}\n    orderBy: {workHours: ASC}\n  ) {\n    ...WorkScheduleWithUser\n  }\n}\n\nsubscription HeavilyScheduledUsersUpdates {\n  workSchedules(\n    where: {workHours: {_gte: 10.0}, workDay: {_gte: \"now()::date\", _lte: \"(now() + interval '7 days')::date\"}}\n    orderBy: {workHours: DESC}\n  ) {\n    ...WorkScheduleWithUser\n  }\n}\n\nsubscription RecentScheduleVolumeUpdates {\n  workSchedulesAggregate(where: {createdAt: {_gte: \"now() - interval '1 hour'\"}}) {\n    aggregate {\n      count\n    }\n  }\n}\n\nsubscription ScheduleRecentActivityUpdates {\n  workSchedules(orderBy: {updatedAt: DESC}, limit: 5) {\n    id\n    workDay\n    workHours\n    updatedAt\n    scheduleOwner {\n      name\n    }\n  }\n}\n\nsubscription ScheduleSystemMetricsUpdates {\n  workSchedulesAggregate {\n    aggregate {\n      count\n    }\n  }\n}\n\nsubscription TodayScheduleCountUpdates {\n  workSchedulesAggregate(where: {workDay: {_eq: \"now()::date\"}}) {\n    aggregate {\n      count\n    }\n  }\n}\n\nsubscription WorkScheduleAuditUpdates {\n  workSchedules(\n    where: {updatedAt: {_gte: \"now() - interval '1 hour'\"}}\n    orderBy: {updatedAt: DESC}\n  ) {\n    ...WorkScheduleForAudit\n  }\n}\n\nsubscription ScheduleChangeAuditUpdates($userId: uuid!) {\n  workSchedules(\n    where: {userId: {_eq: $userId}, updatedAt: {_gte: \"now() - interval '1 hour'\"}}\n    orderBy: {updatedAt: DESC}\n  ) {\n    ...WorkScheduleChangeLog\n  }\n}\n\nsubscription TeamScheduleAuditUpdates($managerUserId: uuid!) {\n  workSchedules(\n    where: {scheduleOwner: {managerId: {_eq: $managerUserId}}, updatedAt: {_gte: \"now() - interval '1 hour'\"}}\n    orderBy: {updatedAt: DESC}\n  ) {\n    ...WorkScheduleForAudit\n  }\n}\n\nsubscription SchedulePatternUpdates($userId: uuid!) {\n  workSchedules(\n    where: {userId: {_eq: $userId}, workDay: {_gte: \"(now() - interval '4 weeks')::date\"}}\n    orderBy: {workDay: ASC}\n  ) {\n    ...WorkSchedulePattern\n  }\n}\n\nsubscription TeamSchedulePatternUpdates($managerUserId: uuid!) {\n  workSchedules(\n    where: {scheduleOwner: {managerId: {_eq: $managerUserId}}, workDay: {_gte: \"(now() - interval '4 weeks')::date\"}}\n    orderBy: [{workDay: ASC}, {scheduleOwner: {name: ASC}}]\n  ) {\n    ...WorkSchedulePattern\n  }\n}\n\nsubscription UpcomingScheduleUpdates($days: Int = 7) {\n  workSchedules(\n    where: {workDay: {_gte: \"now()::date\", _lte: \"(now() + interval '${days} days')::date\"}}\n    orderBy: [{workDay: ASC}, {scheduleOwner: {name: ASC}}]\n  ) {\n    ...WorkScheduleCalendarItem\n  }\n}\n\nsubscription TeamUpcomingScheduleUpdates($managerUserId: uuid!, $days: Int = 7) {\n  workSchedules(\n    where: {scheduleOwner: {managerId: {_eq: $managerUserId}}, workDay: {_gte: \"now()::date\", _lte: \"(now() + interval '${days} days')::date\"}}\n    orderBy: [{workDay: ASC}, {scheduleOwner: {name: ASC}}]\n  ) {\n    ...TeamWorkSchedule\n  }\n}\n\nsubscription NextWeekScheduleUpdates {\n  workSchedules(\n    where: {workDay: {_gte: \"(date_trunc('week', now()) + interval '1 week')::date\", _lte: \"(date_trunc('week', now()) + interval '1 week 6 days')::date\"}}\n    orderBy: [{workDay: ASC}, {scheduleOwner: {name: ASC}}]\n  ) {\n    ...WorkScheduleCalendarItem\n  }\n}\n\nsubscription ScheduleCountUpdates {\n  workSchedulesAggregate {\n    aggregate {\n      count\n    }\n  }\n}\n\nsubscription TotalHoursUpdates {\n  workSchedulesAggregate(where: {workDay: {_gte: \"now()::date\"}}) {\n    aggregate {\n      sum {\n        workHours\n      }\n    }\n  }\n}\n\nsubscription AvgHoursPerDayUpdates {\n  workSchedulesAggregate(where: {workDay: {_gte: \"now()::date\"}}) {\n    aggregate {\n      avg {\n        workHours\n      }\n    }\n  }\n}\n\nsubscription UserSchedulesUpdates($userId: uuid!) {\n  workSchedules(where: {userId: {_eq: $userId}}) {\n    ...MyWorkSchedule\n  }\n}\n\nsubscription UserFutureTotalHoursUpdates($userId: uuid!) {\n  workSchedulesAggregate(\n    where: {userId: {_eq: $userId}, workDay: {_gte: \"now()::date\"}}\n  ) {\n    aggregate {\n      sum {\n        workHours\n      }\n    }\n  }\n}"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "fragment UserMinimal on users {\n  id\n  name\n  email\n}\n\nfragment UserCoreShared on users {\n  ...UserMinimal\n  role\n  isActive\n}\n\nfragment UserBasic on users {\n  ...UserCoreShared\n  createdAt\n  updatedAt\n}\n\nfragment UserBase on users {\n  ...UserBasic\n}\n\nfragment UserWithRole on users {\n  ...UserBasic\n  assignedRoles {\n    assignedRole {\n      id\n      name\n      displayName\n    }\n  }\n}\n\nfragment UserProfile on users {\n  ...UserWithRole\n  username\n  clerkUserId\n  image\n  isStaff\n  managerId\n  deactivatedAt\n  deactivatedBy\n  managerUser {\n    ...UserMinimal\n  }\n}\n\nfragment UserSearchResult on users {\n  ...UserCoreShared\n  username\n  isStaff\n}\n\nfragment ClientMinimal on clients {\n  id\n  name\n}\n\nfragment ClientBase on clients {\n  id\n  name\n  active\n  contactEmail\n  contactPerson\n  contactPhone\n  createdAt\n}\n\nfragment ClientWithStats on clients {\n  ...ClientBase\n  currentEmployeeCount: payrollsAggregate(\n    where: {supersededDate: {_isNull: true}}\n  ) {\n    aggregate {\n      sum {\n        employeeCount\n      }\n    }\n  }\n  activePayrollCount: payrollsAggregate(\n    where: {supersededDate: {_isNull: true}, status: {_eq: \"Active\"}}\n  ) {\n    aggregate {\n      count\n    }\n  }\n}\n\nfragment ClientListBase on clients {\n  ...ClientBase\n  payrollCount: payrollsAggregate(where: {supersededDate: {_isNull: true}}) {\n    aggregate {\n      count\n    }\n  }\n}\n\nfragment PayrollMinimal on payrolls {\n  id\n  name\n  employeeCount\n  status\n}\n\nfragment PayrollBase on payrolls {\n  id\n  name\n  employeeCount\n  status\n  payrollSystem\n  processingTime\n  processingDaysBeforeEft\n  versionNumber\n  createdAt\n  updatedAt\n}\n\nfragment PayrollWithClient on payrolls {\n  ...PayrollBase\n  clientId\n  client {\n    id\n    name\n    active\n  }\n}\n\nfragment PayrollListItem on payrolls {\n  ...PayrollWithClient\n  primaryConsultantUserId\n  backupConsultantUserId\n  managerUserId\n  createdByUserId\n  primaryConsultant {\n    ...UserMinimal\n  }\n  manager {\n    ...UserMinimal\n  }\n}\n\nfragment PayrollWithDates on payrolls {\n  ...PayrollBase\n  goLiveDate\n  payrollDates(orderBy: {originalEftDate: ASC}) {\n    id\n    originalEftDate\n    adjustedEftDate\n    notes\n  }\n}\n\nfragment PayrollFullDetail on payrolls {\n  ...PayrollWithDates\n  ...PayrollWithClient\n  dateTypeId\n  cycleId\n  dateValue\n  versionReason\n  supersededDate\n  parentPayrollId\n  parentPayroll {\n    id\n    versionNumber\n  }\n  childPayrolls(orderBy: {versionNumber: DESC}) {\n    id\n    versionNumber\n    versionReason\n    createdAt\n  }\n  primaryConsultant {\n    ...UserMinimal\n  }\n  backupConsultant {\n    ...UserMinimal\n  }\n  manager {\n    ...UserMinimal\n  }\n}\n\nfragment NoteWithAuthor on notes {\n  id\n  content\n  isImportant\n  createdAt\n  entityId\n  entityType\n  authorUser {\n    ...UserMinimal\n  }\n}\n\nfragment PermissionBase on permissions {\n  id\n  resourceId\n  description\n  legacyPermissionName\n  action\n}\n\nfragment RoleWithPermissions on roles {\n  id\n  name\n  displayName\n  description\n  isSystemRole\n  priority\n  assignedPermissions {\n    grantedPermission {\n      ...PermissionBase\n    }\n  }\n}\n\nfragment AuditLogEntry on auditLogs {\n  id\n  userId\n  userEmail\n  userRole\n  action\n  resourceType\n  resourceId\n  eventTime\n  success\n  errorMessage\n  ipAddress\n  userAgent\n  metadata\n}\n\nfragment AuthEvent on authEvents {\n  id\n  userId\n  userEmail\n  eventType\n  eventTime\n  success\n  failureReason\n  ipAddress\n  userAgent\n  metadata\n}\n\nfragment DataAccessLog on dataAccessLogs {\n  id\n  userId\n  resourceType\n  resourceId\n  accessType\n  accessedAt\n  dataClassification\n  fieldsAccessed\n  rowCount\n  ipAddress\n  metadata\n}\n\nfragment PermissionChange on permissionChanges {\n  id\n  changedAt\n  changedByUserId\n  targetUserId\n  targetRoleId\n  changeType\n  permissionType\n  oldPermissions\n  newPermissions\n  reason\n  approvedByUserId\n}\n\nfragment PayrollDateInfo on payrollDates {\n  id\n  originalEftDate\n  adjustedEftDate\n  notes\n  createdAt\n}\n\nfragment PermissionOverrideInfo on permissionOverrides {\n  id\n  userId\n  role\n  resource\n  operation\n  granted\n  reason\n  conditions\n  expiresAt\n  createdBy\n  createdAt\n}"): (typeof documents)["fragment UserMinimal on users {\n  id\n  name\n  email\n}\n\nfragment UserCoreShared on users {\n  ...UserMinimal\n  role\n  isActive\n}\n\nfragment UserBasic on users {\n  ...UserCoreShared\n  createdAt\n  updatedAt\n}\n\nfragment UserBase on users {\n  ...UserBasic\n}\n\nfragment UserWithRole on users {\n  ...UserBasic\n  assignedRoles {\n    assignedRole {\n      id\n      name\n      displayName\n    }\n  }\n}\n\nfragment UserProfile on users {\n  ...UserWithRole\n  username\n  clerkUserId\n  image\n  isStaff\n  managerId\n  deactivatedAt\n  deactivatedBy\n  managerUser {\n    ...UserMinimal\n  }\n}\n\nfragment UserSearchResult on users {\n  ...UserCoreShared\n  username\n  isStaff\n}\n\nfragment ClientMinimal on clients {\n  id\n  name\n}\n\nfragment ClientBase on clients {\n  id\n  name\n  active\n  contactEmail\n  contactPerson\n  contactPhone\n  createdAt\n}\n\nfragment ClientWithStats on clients {\n  ...ClientBase\n  currentEmployeeCount: payrollsAggregate(\n    where: {supersededDate: {_isNull: true}}\n  ) {\n    aggregate {\n      sum {\n        employeeCount\n      }\n    }\n  }\n  activePayrollCount: payrollsAggregate(\n    where: {supersededDate: {_isNull: true}, status: {_eq: \"Active\"}}\n  ) {\n    aggregate {\n      count\n    }\n  }\n}\n\nfragment ClientListBase on clients {\n  ...ClientBase\n  payrollCount: payrollsAggregate(where: {supersededDate: {_isNull: true}}) {\n    aggregate {\n      count\n    }\n  }\n}\n\nfragment PayrollMinimal on payrolls {\n  id\n  name\n  employeeCount\n  status\n}\n\nfragment PayrollBase on payrolls {\n  id\n  name\n  employeeCount\n  status\n  payrollSystem\n  processingTime\n  processingDaysBeforeEft\n  versionNumber\n  createdAt\n  updatedAt\n}\n\nfragment PayrollWithClient on payrolls {\n  ...PayrollBase\n  clientId\n  client {\n    id\n    name\n    active\n  }\n}\n\nfragment PayrollListItem on payrolls {\n  ...PayrollWithClient\n  primaryConsultantUserId\n  backupConsultantUserId\n  managerUserId\n  createdByUserId\n  primaryConsultant {\n    ...UserMinimal\n  }\n  manager {\n    ...UserMinimal\n  }\n}\n\nfragment PayrollWithDates on payrolls {\n  ...PayrollBase\n  goLiveDate\n  payrollDates(orderBy: {originalEftDate: ASC}) {\n    id\n    originalEftDate\n    adjustedEftDate\n    notes\n  }\n}\n\nfragment PayrollFullDetail on payrolls {\n  ...PayrollWithDates\n  ...PayrollWithClient\n  dateTypeId\n  cycleId\n  dateValue\n  versionReason\n  supersededDate\n  parentPayrollId\n  parentPayroll {\n    id\n    versionNumber\n  }\n  childPayrolls(orderBy: {versionNumber: DESC}) {\n    id\n    versionNumber\n    versionReason\n    createdAt\n  }\n  primaryConsultant {\n    ...UserMinimal\n  }\n  backupConsultant {\n    ...UserMinimal\n  }\n  manager {\n    ...UserMinimal\n  }\n}\n\nfragment NoteWithAuthor on notes {\n  id\n  content\n  isImportant\n  createdAt\n  entityId\n  entityType\n  authorUser {\n    ...UserMinimal\n  }\n}\n\nfragment PermissionBase on permissions {\n  id\n  resourceId\n  description\n  legacyPermissionName\n  action\n}\n\nfragment RoleWithPermissions on roles {\n  id\n  name\n  displayName\n  description\n  isSystemRole\n  priority\n  assignedPermissions {\n    grantedPermission {\n      ...PermissionBase\n    }\n  }\n}\n\nfragment AuditLogEntry on auditLogs {\n  id\n  userId\n  userEmail\n  userRole\n  action\n  resourceType\n  resourceId\n  eventTime\n  success\n  errorMessage\n  ipAddress\n  userAgent\n  metadata\n}\n\nfragment AuthEvent on authEvents {\n  id\n  userId\n  userEmail\n  eventType\n  eventTime\n  success\n  failureReason\n  ipAddress\n  userAgent\n  metadata\n}\n\nfragment DataAccessLog on dataAccessLogs {\n  id\n  userId\n  resourceType\n  resourceId\n  accessType\n  accessedAt\n  dataClassification\n  fieldsAccessed\n  rowCount\n  ipAddress\n  metadata\n}\n\nfragment PermissionChange on permissionChanges {\n  id\n  changedAt\n  changedByUserId\n  targetUserId\n  targetRoleId\n  changeType\n  permissionType\n  oldPermissions\n  newPermissions\n  reason\n  approvedByUserId\n}\n\nfragment PayrollDateInfo on payrollDates {\n  id\n  originalEftDate\n  adjustedEftDate\n  notes\n  createdAt\n}\n\nfragment PermissionOverrideInfo on permissionOverrides {\n  id\n  userId\n  role\n  resource\n  operation\n  granted\n  reason\n  conditions\n  expiresAt\n  createdBy\n  createdAt\n}"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "mutation LogAuditEvent($input: auditLogsInsertInput!) {\n  insertAuditLogsOne: insertAuditLog(object: $input) {\n    id\n    eventTime\n  }\n}\n\nmutation RefreshData {\n  __typename\n}"): (typeof documents)["mutation LogAuditEvent($input: auditLogsInsertInput!) {\n  insertAuditLogsOne: insertAuditLog(object: $input) {\n    id\n    eventTime\n  }\n}\n\nmutation RefreshData {\n  __typename\n}"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "query GetDashboardMetrics($userId: uuid!) {\n  clientsAggregate(where: {active: {_eq: true}}) {\n    aggregate {\n      count\n    }\n  }\n  activePayrollsAggregate: payrollsAggregate(\n    where: {supersededDate: {_isNull: true}, status: {_nin: [\"Completed\", \"Failed\"]}}\n  ) {\n    aggregate {\n      count\n    }\n  }\n  totalEmployeesAggregate: payrollsAggregate(\n    where: {supersededDate: {_isNull: true}}\n  ) {\n    aggregate {\n      sum {\n        employeeCount\n      }\n    }\n  }\n  upcomingPayrolls: payrolls(\n    where: {supersededDate: {_isNull: true}, status: {_nin: [\"Completed\", \"Failed\", \"Cancelled\"]}}\n    orderBy: {updatedAt: DESC}\n    limit: 5\n  ) {\n    ...PayrollMinimal\n    client {\n      ...ClientMinimal\n    }\n  }\n}\n\nquery GetDashboardStatsOptimized($limit: Int = 10) {\n  clientsAggregate {\n    aggregate {\n      count\n    }\n  }\n  totalPayrolls: payrollsAggregate(where: {supersededDate: {_isNull: true}}) {\n    aggregate {\n      count\n    }\n  }\n  activePayrolls: payrollsAggregate(\n    where: {supersededDate: {_isNull: true}, status: {_eq: \"Active\"}}\n  ) {\n    aggregate {\n      count\n    }\n  }\n  processingPayrolls: payrollsAggregate(\n    where: {supersededDate: {_isNull: true}, status: {_eq: \"Processing\"}}\n  ) {\n    aggregate {\n      count\n    }\n  }\n  upcomingPayrolls: payrolls(\n    where: {supersededDate: {_isNull: true}, status: {_eq: \"Active\"}}\n    orderBy: {updatedAt: DESC}\n    limit: $limit\n  ) {\n    id\n    name\n    status\n    client {\n      id\n      name\n    }\n  }\n}\n\nquery GetClientsDashboardStats {\n  activeClientsCount: clientsAggregate(where: {active: {_eq: true}}) {\n    aggregate {\n      count\n    }\n  }\n  payrollsAggregate(where: {supersededDate: {_isNull: true}}) {\n    aggregate {\n      sum {\n        employeeCount\n      }\n    }\n  }\n  clientsNeedingAttention: clients(\n    where: {active: {_eq: true}, _not: {payrolls: {supersededDate: {_isNull: true}}}}\n  ) {\n    ...ClientMinimal\n  }\n}\n\nquery GetCurrentUser($userId: uuid!) {\n  user: userById(id: $userId) {\n    ...UserProfile\n  }\n}\n\nquery GetUsersForDropdown($role: user_role) {\n  users(where: {isActive: {_eq: true}, role: {_eq: $role}}, orderBy: {name: ASC}) {\n    ...UserMinimal\n  }\n}\n\nquery GetSystemHealth {\n  databaseHealth: users(limit: 1) {\n    id\n  }\n  recentActivity: auditLogsAggregate(\n    where: {eventTime: {_gte: \"now() - interval '1 hour'\"}}\n  ) {\n    aggregate {\n      count\n    }\n  }\n}\n\nquery GlobalSearch($searchTerm: String!) {\n  clients(\n    where: {_or: [{name: {_ilike: $searchTerm}}, {contactEmail: {_ilike: $searchTerm}}]}\n    limit: 5\n  ) {\n    ...ClientMinimal\n  }\n  users(\n    where: {_or: [{name: {_ilike: $searchTerm}}, {email: {_ilike: $searchTerm}}]}\n    limit: 5\n  ) {\n    ...UserMinimal\n  }\n  payrolls(\n    where: {client: {name: {_ilike: $searchTerm}}, supersededDate: {_isNull: true}}\n    limit: 5\n  ) {\n    ...PayrollMinimal\n    client {\n      ...ClientMinimal\n    }\n  }\n}"): (typeof documents)["query GetDashboardMetrics($userId: uuid!) {\n  clientsAggregate(where: {active: {_eq: true}}) {\n    aggregate {\n      count\n    }\n  }\n  activePayrollsAggregate: payrollsAggregate(\n    where: {supersededDate: {_isNull: true}, status: {_nin: [\"Completed\", \"Failed\"]}}\n  ) {\n    aggregate {\n      count\n    }\n  }\n  totalEmployeesAggregate: payrollsAggregate(\n    where: {supersededDate: {_isNull: true}}\n  ) {\n    aggregate {\n      sum {\n        employeeCount\n      }\n    }\n  }\n  upcomingPayrolls: payrolls(\n    where: {supersededDate: {_isNull: true}, status: {_nin: [\"Completed\", \"Failed\", \"Cancelled\"]}}\n    orderBy: {updatedAt: DESC}\n    limit: 5\n  ) {\n    ...PayrollMinimal\n    client {\n      ...ClientMinimal\n    }\n  }\n}\n\nquery GetDashboardStatsOptimized($limit: Int = 10) {\n  clientsAggregate {\n    aggregate {\n      count\n    }\n  }\n  totalPayrolls: payrollsAggregate(where: {supersededDate: {_isNull: true}}) {\n    aggregate {\n      count\n    }\n  }\n  activePayrolls: payrollsAggregate(\n    where: {supersededDate: {_isNull: true}, status: {_eq: \"Active\"}}\n  ) {\n    aggregate {\n      count\n    }\n  }\n  processingPayrolls: payrollsAggregate(\n    where: {supersededDate: {_isNull: true}, status: {_eq: \"Processing\"}}\n  ) {\n    aggregate {\n      count\n    }\n  }\n  upcomingPayrolls: payrolls(\n    where: {supersededDate: {_isNull: true}, status: {_eq: \"Active\"}}\n    orderBy: {updatedAt: DESC}\n    limit: $limit\n  ) {\n    id\n    name\n    status\n    client {\n      id\n      name\n    }\n  }\n}\n\nquery GetClientsDashboardStats {\n  activeClientsCount: clientsAggregate(where: {active: {_eq: true}}) {\n    aggregate {\n      count\n    }\n  }\n  payrollsAggregate(where: {supersededDate: {_isNull: true}}) {\n    aggregate {\n      sum {\n        employeeCount\n      }\n    }\n  }\n  clientsNeedingAttention: clients(\n    where: {active: {_eq: true}, _not: {payrolls: {supersededDate: {_isNull: true}}}}\n  ) {\n    ...ClientMinimal\n  }\n}\n\nquery GetCurrentUser($userId: uuid!) {\n  user: userById(id: $userId) {\n    ...UserProfile\n  }\n}\n\nquery GetUsersForDropdown($role: user_role) {\n  users(where: {isActive: {_eq: true}, role: {_eq: $role}}, orderBy: {name: ASC}) {\n    ...UserMinimal\n  }\n}\n\nquery GetSystemHealth {\n  databaseHealth: users(limit: 1) {\n    id\n  }\n  recentActivity: auditLogsAggregate(\n    where: {eventTime: {_gte: \"now() - interval '1 hour'\"}}\n  ) {\n    aggregate {\n      count\n    }\n  }\n}\n\nquery GlobalSearch($searchTerm: String!) {\n  clients(\n    where: {_or: [{name: {_ilike: $searchTerm}}, {contactEmail: {_ilike: $searchTerm}}]}\n    limit: 5\n  ) {\n    ...ClientMinimal\n  }\n  users(\n    where: {_or: [{name: {_ilike: $searchTerm}}, {email: {_ilike: $searchTerm}}]}\n    limit: 5\n  ) {\n    ...UserMinimal\n  }\n  payrolls(\n    where: {client: {name: {_ilike: $searchTerm}}, supersededDate: {_isNull: true}}\n    limit: 5\n  ) {\n    ...PayrollMinimal\n    client {\n      ...ClientMinimal\n    }\n  }\n}"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "subscription RecentActivity($resourceTypes: [String!]) {\n  auditLogs(\n    where: {resourceType: {_in: $resourceTypes}, eventTime: {_gte: \"now() - interval '5 minutes'\"}}\n    orderBy: {eventTime: DESC}\n    limit: 20\n  ) {\n    ...AuditLogEntry\n  }\n}\n\nsubscription AuthenticationEvents($userId: uuid) {\n  authEvents(\n    where: {userId: {_eq: $userId}, eventTime: {_gte: \"now() - interval '10 minutes'\"}}\n    orderBy: {eventTime: DESC}\n  ) {\n    ...AuthEvent\n  }\n}\n\nsubscription SensitiveDataAccess($resourceTypes: [String!]!) {\n  dataAccessLogs(\n    where: {resourceType: {_in: $resourceTypes}, accessedAt: {_gte: \"now() - interval '10 minutes'\"}}\n    orderBy: {accessedAt: DESC}\n  ) {\n    ...DataAccessLog\n  }\n}\n\nsubscription PermissionChangeStream {\n  permissionChanges(orderBy: {changedAt: DESC}, limit: 10) {\n    ...PermissionChange\n  }\n}"): (typeof documents)["subscription RecentActivity($resourceTypes: [String!]) {\n  auditLogs(\n    where: {resourceType: {_in: $resourceTypes}, eventTime: {_gte: \"now() - interval '5 minutes'\"}}\n    orderBy: {eventTime: DESC}\n    limit: 20\n  ) {\n    ...AuditLogEntry\n  }\n}\n\nsubscription AuthenticationEvents($userId: uuid) {\n  authEvents(\n    where: {userId: {_eq: $userId}, eventTime: {_gte: \"now() - interval '10 minutes'\"}}\n    orderBy: {eventTime: DESC}\n  ) {\n    ...AuthEvent\n  }\n}\n\nsubscription SensitiveDataAccess($resourceTypes: [String!]!) {\n  dataAccessLogs(\n    where: {resourceType: {_in: $resourceTypes}, accessedAt: {_gte: \"now() - interval '10 minutes'\"}}\n    orderBy: {accessedAt: DESC}\n  ) {\n    ...DataAccessLog\n  }\n}\n\nsubscription PermissionChangeStream {\n  permissionChanges(orderBy: {changedAt: DESC}, limit: 10) {\n    ...PermissionChange\n  }\n}"];

export function gql(source: string) {
  return (documents as any)[source] ?? {};
}

export type DocumentType<TDocumentNode extends DocumentNode<any, any>> = TDocumentNode extends DocumentNode<  infer TType,  any>  ? TType  : never;