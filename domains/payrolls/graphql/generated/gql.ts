/* eslint-disable */
import * as types from './graphql';
import type { TypedDocumentNode as DocumentNode } from '@graphql-typed-document-node/core';

/**
 * Map of all GraphQL operations in the project.
 *
 * This map has several performance disadvantages:
 * 1. It is not tree-shakeable, so it will include all operations in the project.
 * 2. It is not minifiable, so the string of a GraphQL query will be multiple times inside the bundle.
 * 3. It does not support dead code elimination, so it will add unused operations.
 *
 * Therefore it is highly recommended to use the babel or swc plugin for production.
 * Learn more about it here: https://the-guild.dev/graphql/codegen/plugins/presets/preset-client#reducing-bundle-size
 */
type Documents = {
    "fragment PayrollBasicInfo on payrolls {\n  id\n  name\n  clientId\n  cycleId\n  dateTypeId\n  primaryConsultantUserId\n  backupConsultantUserId\n  managerUserId\n  employeeCount\n  goLiveDate\n}\n\nfragment PayrollFullDetails on payrolls {\n  id\n  name\n  employeeCount\n  processingTime\n  processingDaysBeforeEft\n  payrollSystem\n  dateValue\n  versionNumber\n  parentPayrollId\n  goLiveDate\n  supersededDate\n  versionReason\n  createdByUserId\n}\n\nfragment PayrollWithRelations on payrolls {\n  ...PayrollFullDetails\n  client {\n    id\n    name\n  }\n  payrollCycle {\n    id\n    name\n  }\n  payrollDateType {\n    id\n    name\n  }\n  primaryConsultant {\n    id\n    name\n    email\n  }\n  backupConsultant {\n    id\n    name\n    email\n  }\n  manager {\n    id\n    name\n    email\n  }\n}\n\nfragment PayrollWithClient on payrolls {\n  ...PayrollBasicInfo\n  client {\n    id\n    name\n  }\n}\n\nfragment PayrollDate on payroll_dates {\n  id\n  payrollId\n  originalEftDate\n  adjustedEftDate\n  processingDate\n}\n\nfragment PayrollWithDates on payrolls {\n  ...PayrollWithRelations\n  payrollDates(order_by: {adjustedEftDate: asc}) {\n    ...PayrollDate\n  }\n}\n\nfragment PayrollSummary on payrolls {\n  id\n  name\n  status\n  employeeCount\n  updatedAt\n}\n\nfragment PayrollListItem on payrolls {\n  ...PayrollSummary\n  client {\n    id\n    name\n  }\n  primaryConsultant {\n    id\n    name\n  }\n  nextPayrollDate: payrollDates(\n    where: {adjustedEftDate: {_gte: \"now()\"}}\n    order_by: {adjustedEftDate: asc}\n    limit: 1\n  ) {\n    adjustedEftDate\n  }\n}\n\nfragment PayrollDashboardCard on payrolls {\n  ...PayrollSummary\n  client {\n    id\n    name\n  }\n  primaryConsultant {\n    id\n    name\n  }\n}\n\nfragment PayrollTableRow on payrolls {\n  ...PayrollListItem\n  cycleId\n  backupConsultant {\n    id\n    name\n  }\n  manager {\n    id\n    name\n  }\n}\n\nfragment PayrollMinimal on payrolls {\n  id\n  name\n  status\n}\n\nfragment PayrollWithNextDate on payrolls {\n  ...PayrollSummary\n  client {\n    name\n  }\n  nextDate: payrollDates(\n    where: {adjustedEftDate: {_gte: \"now()\"}}\n    order_by: {adjustedEftDate: asc}\n    limit: 1\n  ) {\n    adjustedEftDate\n    processingDate\n  }\n}": typeof types.PayrollBasicInfoFragmentDoc,
    "mutation CreatePayroll($object: payrolls_insert_input!) {\n  insertPayroll(object: $object) {\n    id\n    name\n    clientId\n    cycleId\n    dateTypeId\n    primaryConsultantUserId\n    employeeCount\n  }\n}\n\nmutation UpdatePayroll($id: uuid!, $set: payrolls_set_input!) {\n  updatePayroll(pk_columns: {id: $id}, _set: $set) {\n    id\n    name\n    clientId\n    cycleId\n    dateTypeId\n    primaryConsultantUserId\n    employeeCount\n  }\n}\n\nmutation DeletePayroll($id: uuid!) {\n  deletePayroll(id: $id) {\n    id\n    name\n  }\n}\n\nmutation UpdatePayrollStatus($id: uuid!, $status: payroll_status!) {\n  updatePayroll(pk_columns: {id: $id}, _set: {status: $status}) {\n    id\n    name\n  }\n}\n\nmutation UpdatePayrollDateNotes($id: uuid!, $notes: String) {\n  updatePayrollDate(pk_columns: {id: $id}, _set: {notes: $notes}) {\n    id\n    notes\n    payrollId\n    originalEftDate\n    adjustedEftDate\n    processingDate\n  }\n}\n\nmutation DeletePayrollDates($payrollId: uuid!) {\n  deletePayrollDates(where: {payrollId: {_eq: $payrollId}}) {\n    affected_rows\n  }\n}\n\nmutation ProcessPayrollBatch($payrollIds: [uuid!]!, $processedBy: String!) {\n  updatePayrolls(\n    where: {id: {_in: $payrollIds}}\n    _set: {status: \"Implementation\", updatedAt: \"now()\"}\n  ) {\n    affected_rows\n    returning {\n      id\n      name\n      status\n      updatedAt\n    }\n  }\n}\n\nmutation ApprovePayrollBatch($payrollIds: [uuid!]!, $approvedBy: String!) {\n  updatePayrolls(\n    where: {id: {_in: $payrollIds}}\n    _set: {status: \"Approved\", updatedAt: \"now()\"}\n  ) {\n    affected_rows\n    returning {\n      id\n      name\n      status\n      updatedAt\n    }\n  }\n}\n\nmutation ArchivePayroll($id: uuid!, $archivedBy: String!) {\n  updatePayroll(\n    pk_columns: {id: $id}\n    _set: {status: \"Archived\", supersededDate: \"now()\", updatedAt: \"now()\"}\n  ) {\n    id\n    name\n    status\n    supersededDate\n  }\n}\n\nmutation DeletePayrollSoft($id: uuid!, $deletedBy: String!) {\n  updatePayroll(\n    pk_columns: {id: $id}\n    _set: {status: \"Deleted\", supersededDate: \"now()\", updatedAt: \"now()\"}\n  ) {\n    id\n    name\n    status\n    supersededDate\n  }\n}\n\nmutation RegeneratePayrollDates($payrollId: uuid!, $startDate: date!, $endDate: date!) {\n  deletePayrollDates(where: {payrollId: {_eq: $payrollId}}) {\n    affected_rows\n  }\n}": typeof types.CreatePayrollDocument,
    "query GetPayrolls {\n  payrolls(where: {supersededDate: {_is_null: true}}, order_by: {updatedAt: desc}) {\n    id\n    name\n    clientId\n    cycleId\n    dateTypeId\n    primaryConsultantUserId\n    backupConsultantUserId\n    managerUserId\n    employeeCount\n    goLiveDate\n    status\n    client {\n      id\n      name\n    }\n    payrollCycle {\n      id\n      name\n    }\n    payrollDateType {\n      id\n      name\n    }\n    primaryConsultant {\n      id\n      name\n    }\n    backupConsultant {\n      id\n      name\n    }\n    manager {\n      id\n      name\n    }\n    payrollDates(order_by: {adjustedEftDate: asc}) {\n      id\n      originalEftDate\n      adjustedEftDate\n      processingDate\n    }\n  }\n}\n\nquery GetPayrollsFallback {\n  payrolls {\n    id\n  }\n}\n\nquery GetPayrollById($id: uuid!) {\n  payroll(id: $id) {\n    id\n    clientId\n    cycleId\n    dateTypeId\n    primaryConsultantUserId\n    backupConsultantUserId\n    managerUserId\n    employeeCount\n    goLiveDate\n    client {\n      id\n    }\n    payrollCycle {\n      id\n    }\n    payrollDateType {\n      id\n    }\n    payrollDates(order_by: {adjustedEftDate: asc}) {\n      id\n      originalEftDate\n      adjustedEftDate\n      processingDate\n    }\n  }\n}\n\nquery GetPayrollsByClient($clientId: uuid!) {\n  payrolls(\n    where: {clientId: {_eq: $clientId}, supersededDate: {_is_null: true}}\n    order_by: {updatedAt: desc}\n  ) {\n    id\n    clientId\n    employeeCount\n    goLiveDate\n  }\n}\n\nquery GetPayrollsByMonth($startDate: date!, $endDate: date!) {\n  payrolls(\n    where: {supersededDate: {_is_null: true}, payrollDates: {adjustedEftDate: {_gte: $startDate, _lte: $endDate}}}\n    order_by: {updatedAt: desc}\n  ) {\n    ...PayrollWithDates\n  }\n}\n\nquery GetPayrollDates($payrollId: uuid!) {\n  payrollDates(\n    where: {payrollId: {_eq: $payrollId}}\n    order_by: {adjustedEftDate: asc}\n  ) {\n    id\n    payrollId\n    originalEftDate\n    adjustedEftDate\n    processingDate\n  }\n}\n\nquery GetPayrollFamilyDates($payrollId: uuid!) {\n  payrolls(\n    where: {_or: [{id: {_eq: $payrollId}}, {parentPayrollId: {_eq: $payrollId}}]}\n    order_by: {versionNumber: asc}\n  ) {\n    id\n    versionNumber\n    payrollDates(order_by: {adjustedEftDate: asc}) {\n      ...PayrollDate\n    }\n  }\n}\n\nquery GetPayrollsMissingDates {\n  payrolls(where: {supersededDate: {_is_null: true}}) {\n    id\n    name\n    status\n    client {\n      id\n      name\n    }\n    payrollDates_aggregate {\n      aggregate {\n        count\n      }\n    }\n  }\n}\n\nquery GetPayrollsSimple {\n  payrolls {\n    id\n    client {\n      id\n    }\n  }\n}\n\nquery CheckPayrollVersion($id: uuid!) {\n  payroll(id: $id) {\n    id\n    supersededDate\n    versionNumber\n  }\n  latest: payrolls(\n    where: {parentPayrollId: {_eq: $id}, supersededDate: {_is_null: true}}\n    limit: 1\n  ) {\n    id\n  }\n}\n\nquery GetPayrollDatesById($id: uuid!) {\n  payrollDates(where: {payrollId: {_eq: $id}}, order_by: {adjustedEftDate: asc}) {\n    id\n    originalEftDate\n    adjustedEftDate\n    processingDate\n  }\n}\n\nquery GetPayrollVersionHistory($payrollId: uuid!) {\n  payrolls(\n    where: {_or: [{id: {_eq: $payrollId}}, {parentPayrollId: {_eq: $payrollId}}]}\n    order_by: {versionNumber: desc}\n  ) {\n    id\n    versionNumber\n    supersededDate\n    goLiveDate\n  }\n}\n\nquery GetLatestPayrollVersion($payrollId: uuid!) {\n  payrolls(\n    where: {_or: [{id: {_eq: $payrollId}}, {parentPayrollId: {_eq: $payrollId}}], supersededDate: {_is_null: true}}\n    limit: 1\n  ) {\n    id\n    versionNumber\n    parentPayrollId\n  }\n}\n\nquery GeneratePayrollDatesQuery($payrollId: uuid!, $startDate: date, $endDate: date, $maxDates: Int) {\n  generatePayrollDates(\n    args: {p_payroll_id: $payrollId, p_start_date: $startDate, p_end_date: $endDate, p_max_dates: $maxDates}\n  ) {\n    id\n    payrollId\n    originalEftDate\n    adjustedEftDate\n    processingDate\n    notes\n  }\n}\n\nquery GetUserUpcomingPayrolls($userId: uuid!, $from_date: date!, $limit: Int = 10) {\n  payrolls(\n    where: {_and: [{supersededDate: {_is_null: true}}, {_or: [{primaryConsultantUserId: {_eq: $userId}}, {backupConsultantUserId: {_eq: $userId}}, {managerUserId: {_eq: $userId}}]}, {payrollDates: {adjustedEftDate: {_gte: $from_date}}}]}\n    order_by: {payrollDates_aggregate: {min: {adjustedEftDate: asc}}}\n    limit: $limit\n  ) {\n    id\n    name\n    status\n    client {\n      id\n      name\n    }\n    payrollDates(\n      where: {adjustedEftDate: {_gte: $from_date}}\n      order_by: {adjustedEftDate: asc}\n      limit: 3\n    ) {\n      id\n      adjustedEftDate\n      processingDate\n      originalEftDate\n    }\n    primaryConsultant {\n      id\n      name\n    }\n    backupConsultant {\n      id\n      name\n    }\n    manager {\n      id\n      name\n    }\n  }\n}\n\nquery GetPayrollCycles {\n  payroll_cycles {\n    id\n    name\n    description\n  }\n}\n\nquery GetPayrollDateTypes {\n  payroll_date_types {\n    id\n    name\n    description\n  }\n}\n\nquery GeneratePayrollReport($startDate: timestamptz!, $endDate: timestamptz!) {\n  payrolls(\n    where: {_and: [{createdAt: {_gte: $startDate}}, {createdAt: {_lte: $endDate}}, {status: {_in: [\"Approved\", \"Completed\"]}}]}\n    order_by: {createdAt: desc}\n  ) {\n    id\n    name\n    status\n    createdAt\n    updatedAt\n    client {\n      id\n      name\n    }\n    primaryConsultant {\n      id\n      name\n      email\n    }\n  }\n}\n\nquery GetPayrollsPaginated($limit: Int = 20, $offset: Int = 0, $where: payrolls_bool_exp = {}, $orderBy: [payrolls_order_by!] = [{updatedAt: desc}]) {\n  payrolls(\n    limit: $limit\n    offset: $offset\n    where: {_and: [{supersededDate: {_is_null: true}}, $where]}\n    order_by: $orderBy\n  ) {\n    ...PayrollListItem\n  }\n  payrollsAggregate(where: {_and: [{supersededDate: {_is_null: true}}, $where]}) {\n    aggregate {\n      count\n    }\n  }\n}\n\nquery GetPayrollsByClientPaginated($clientId: uuid!, $limit: Int = 20, $offset: Int = 0) {\n  payrolls(\n    where: {clientId: {_eq: $clientId}, supersededDate: {_is_null: true}}\n    order_by: {updatedAt: desc}\n    limit: $limit\n    offset: $offset\n  ) {\n    ...PayrollTableRow\n  }\n  clientPayrollsAggregate: payrollsAggregate(\n    where: {clientId: {_eq: $clientId}, supersededDate: {_is_null: true}}\n  ) {\n    aggregate {\n      count\n    }\n  }\n}\n\nquery SearchPayrollsPaginated($searchTerm: String!, $limit: Int = 20, $offset: Int = 0) {\n  payrolls(\n    where: {_and: [{supersededDate: {_is_null: true}}, {_or: [{name: {_ilike: $searchTerm}}, {client: {name: {_ilike: $searchTerm}}}]}]}\n    order_by: {updatedAt: desc}\n    limit: $limit\n    offset: $offset\n  ) {\n    ...PayrollListItem\n  }\n  searchAggregate: payrollsAggregate(\n    where: {_and: [{supersededDate: {_is_null: true}}, {_or: [{name: {_ilike: $searchTerm}}, {client: {name: {_ilike: $searchTerm}}}]}]}\n  ) {\n    aggregate {\n      count\n    }\n  }\n}\n\nquery GetPayrollsByStatusPaginated($status: payroll_status!, $limit: Int = 20, $offset: Int = 0) {\n  payrolls(\n    where: {status: {_eq: $status}, supersededDate: {_is_null: true}}\n    order_by: {updatedAt: desc}\n    limit: $limit\n    offset: $offset\n  ) {\n    ...PayrollListItem\n  }\n  statusAggregate: payrollsAggregate(\n    where: {status: {_eq: $status}, supersededDate: {_is_null: true}}\n  ) {\n    aggregate {\n      count\n    }\n  }\n}\n\nquery GetPayrollsQuickList {\n  payrolls(where: {supersededDate: {_is_null: true}}, order_by: {name: asc}) {\n    ...PayrollMinimal\n  }\n}\n\nquery GetPayrollCard($id: uuid!) {\n  payroll(id: $id) {\n    ...PayrollSummary\n    client {\n      name\n    }\n    primaryConsultant {\n      name\n    }\n    nextDate: payrollDates(\n      where: {adjustedEftDate: {_gte: \"now()\"}}\n      order_by: {adjustedEftDate: asc}\n      limit: 1\n    ) {\n      adjustedEftDate\n    }\n  }\n}\n\nquery GetPayrollOptions {\n  payrolls(where: {supersededDate: {_is_null: true}}, order_by: {name: asc}) {\n    id\n    name\n  }\n}\n\nquery GetPayrollDashboardCards($limit: Int = 10) {\n  payrolls(\n    where: {supersededDate: {_is_null: true}}\n    order_by: {updatedAt: desc}\n    limit: $limit\n  ) {\n    ...PayrollDashboardCard\n  }\n}\n\nquery GetPayrollCalendarEvents($startDate: date!, $endDate: date!) {\n  payrolls(\n    where: {supersededDate: {_is_null: true}, payrollDates: {adjustedEftDate: {_gte: $startDate, _lte: $endDate}}}\n  ) {\n    id\n    name\n    status\n    client {\n      name\n    }\n    calendarDates: payrollDates(\n      where: {adjustedEftDate: {_gte: $startDate, _lte: $endDate}}\n      order_by: {adjustedEftDate: asc}\n    ) {\n      adjustedEftDate\n      processingDate\n    }\n  }\n}\n\nquery GetPayrollStatusCounts {\n  total: payrollsAggregate(where: {supersededDate: {_is_null: true}}) {\n    aggregate {\n      count\n    }\n  }\n  active: payrollsAggregate(\n    where: {supersededDate: {_is_null: true}, status: {_eq: \"Active\"}}\n  ) {\n    aggregate {\n      count\n    }\n  }\n  implementation: payrollsAggregate(\n    where: {supersededDate: {_is_null: true}, status: {_eq: \"Implementation\"}}\n  ) {\n    aggregate {\n      count\n    }\n  }\n  archived: payrollsAggregate(\n    where: {supersededDate: {_is_null: true}, status: {_eq: \"Archived\"}}\n  ) {\n    aggregate {\n      count\n    }\n  }\n}": typeof types.GetPayrollsDocument,
    "subscription PayrollUpdates($id: uuid!) {\n  payroll(id: $id) {\n    ...PayrollWithDates\n  }\n}\n\nsubscription PayrollListUpdates {\n  payrolls(where: {supersededDate: {_is_null: true}}, order_by: {updatedAt: desc}) {\n    ...PayrollBasicInfo\n  }\n}\n\nsubscription PayrollDateUpdates($payrollId: uuid!) {\n  payrollDates(\n    where: {payrollId: {_eq: $payrollId}}\n    order_by: {adjustedEftDate: asc}\n  ) {\n    ...PayrollDate\n  }\n}\n\nsubscription PayrollSubscription {\n  payrolls {\n    id\n    name\n    status\n    updatedAt\n  }\n}\n\nsubscription TestSubscription {\n  payrolls(limit: 1) {\n    id\n    name\n  }\n}\n\nsubscription PayrollStatusUpdates($status: payroll_status!) {\n  payrolls(\n    where: {status: {_eq: $status}, supersededDate: {_is_null: true}}\n    order_by: {updatedAt: desc}\n  ) {\n    ...PayrollListItem\n  }\n}\n\nsubscription UserPayrollUpdates($userId: uuid!) {\n  payrolls(\n    where: {_and: [{supersededDate: {_is_null: true}}, {_or: [{primaryConsultantUserId: {_eq: $userId}}, {backupConsultantUserId: {_eq: $userId}}, {managerUserId: {_eq: $userId}}]}]}\n    order_by: {updatedAt: desc}\n  ) {\n    ...PayrollDashboardCard\n  }\n}\n\nsubscription PayrollTotalCount {\n  payrollsAggregate(where: {supersededDate: {_is_null: true}}) {\n    aggregate {\n      count\n    }\n  }\n}\n\nsubscription ActivePayrollCount {\n  payrollsAggregate(\n    where: {supersededDate: {_is_null: true}, status: {_eq: \"Active\"}}\n  ) {\n    aggregate {\n      count\n    }\n  }\n}\n\nsubscription ImplementationPayrollCount {\n  payrollsAggregate(\n    where: {supersededDate: {_is_null: true}, status: {_eq: \"Implementation\"}}\n  ) {\n    aggregate {\n      count\n    }\n  }\n}\n\nsubscription UpcomingPayrollDates($fromDate: date!) {\n  payrollDates(\n    where: {adjustedEftDate: {_gte: $fromDate}}\n    order_by: {adjustedEftDate: asc}\n    limit: 10\n  ) {\n    id\n    adjustedEftDate\n    processingDate\n    payroll {\n      id\n      name\n      status\n      client {\n        name\n      }\n      primaryConsultant {\n        name\n      }\n    }\n  }\n}\n\nsubscription PayrollCalendarUpdates($startDate: date!, $endDate: date!) {\n  payrolls(\n    where: {supersededDate: {_is_null: true}, payrollDates: {adjustedEftDate: {_gte: $startDate, _lte: $endDate}}}\n  ) {\n    id\n    name\n    status\n    client {\n      name\n    }\n    payrollDates(\n      where: {adjustedEftDate: {_gte: $startDate, _lte: $endDate}}\n      order_by: {adjustedEftDate: asc}\n    ) {\n      adjustedEftDate\n      processingDate\n    }\n  }\n}": typeof types.PayrollUpdatesDocument,
    "fragment UserCore on users {\n  id\n  name\n  email\n  username\n  role\n  isActive\n  isStaff\n  clerkUserId\n  createdAt\n  updatedAt\n}\n\nfragment UserBasic on users {\n  id\n  name\n  email\n  role\n  isActive\n}\n\nfragment UserWithManager on users {\n  ...UserCore\n  managerId\n  manager {\n    ...UserBasic\n  }\n}\n\nfragment RoleCore on roles {\n  id\n  name\n  description\n  displayName\n  priority\n  isSystemRole\n  createdAt\n}\n\nfragment PermissionCore on permissions {\n  id\n  action\n  description\n  resourceId\n  createdAt\n  updatedAt\n}\n\nfragment PermissionWithResource on permissions {\n  ...PermissionCore\n  resource {\n    id\n    name\n    description\n  }\n}\n\nfragment ClientCore on clients {\n  id\n  name\n  contactEmail\n  contactPerson\n  contactPhone\n  active\n  createdAt\n  updatedAt\n}\n\nfragment ClientBasic on clients {\n  id\n  name\n  active\n}\n\nfragment PayrollCore on payrolls {\n  id\n  name\n  status\n  clientId\n  primaryConsultantUserId\n  managerUserId\n  createdAt\n  updatedAt\n}\n\nfragment PayrollBasic on payrolls {\n  id\n  name\n  status\n  clientId\n}\n\nfragment ResourceCore on resources {\n  id\n  name\n  displayName\n  description\n  createdAt\n  updatedAt\n}\n\nfragment UserRoleCore on user_roles {\n  id\n  userId\n  roleId\n  createdAt\n  updatedAt\n}\n\nfragment RolePermissionCore on role_permissions {\n  id\n  roleId\n  permissionId\n  conditions\n  createdAt\n  updatedAt\n}\n\nfragment AuditFields on audit_audit_log {\n  id\n  eventTime\n  action\n  resourceType\n  resourceId\n  userId\n  ipAddress\n  userAgent\n  success\n  user_email\n  user_role\n}": typeof types.UserCoreFragmentDoc,
};
const documents: Documents = {
    "fragment PayrollBasicInfo on payrolls {\n  id\n  name\n  clientId\n  cycleId\n  dateTypeId\n  primaryConsultantUserId\n  backupConsultantUserId\n  managerUserId\n  employeeCount\n  goLiveDate\n}\n\nfragment PayrollFullDetails on payrolls {\n  id\n  name\n  employeeCount\n  processingTime\n  processingDaysBeforeEft\n  payrollSystem\n  dateValue\n  versionNumber\n  parentPayrollId\n  goLiveDate\n  supersededDate\n  versionReason\n  createdByUserId\n}\n\nfragment PayrollWithRelations on payrolls {\n  ...PayrollFullDetails\n  client {\n    id\n    name\n  }\n  payrollCycle {\n    id\n    name\n  }\n  payrollDateType {\n    id\n    name\n  }\n  primaryConsultant {\n    id\n    name\n    email\n  }\n  backupConsultant {\n    id\n    name\n    email\n  }\n  manager {\n    id\n    name\n    email\n  }\n}\n\nfragment PayrollWithClient on payrolls {\n  ...PayrollBasicInfo\n  client {\n    id\n    name\n  }\n}\n\nfragment PayrollDate on payroll_dates {\n  id\n  payrollId\n  originalEftDate\n  adjustedEftDate\n  processingDate\n}\n\nfragment PayrollWithDates on payrolls {\n  ...PayrollWithRelations\n  payrollDates(order_by: {adjustedEftDate: asc}) {\n    ...PayrollDate\n  }\n}\n\nfragment PayrollSummary on payrolls {\n  id\n  name\n  status\n  employeeCount\n  updatedAt\n}\n\nfragment PayrollListItem on payrolls {\n  ...PayrollSummary\n  client {\n    id\n    name\n  }\n  primaryConsultant {\n    id\n    name\n  }\n  nextPayrollDate: payrollDates(\n    where: {adjustedEftDate: {_gte: \"now()\"}}\n    order_by: {adjustedEftDate: asc}\n    limit: 1\n  ) {\n    adjustedEftDate\n  }\n}\n\nfragment PayrollDashboardCard on payrolls {\n  ...PayrollSummary\n  client {\n    id\n    name\n  }\n  primaryConsultant {\n    id\n    name\n  }\n}\n\nfragment PayrollTableRow on payrolls {\n  ...PayrollListItem\n  cycleId\n  backupConsultant {\n    id\n    name\n  }\n  manager {\n    id\n    name\n  }\n}\n\nfragment PayrollMinimal on payrolls {\n  id\n  name\n  status\n}\n\nfragment PayrollWithNextDate on payrolls {\n  ...PayrollSummary\n  client {\n    name\n  }\n  nextDate: payrollDates(\n    where: {adjustedEftDate: {_gte: \"now()\"}}\n    order_by: {adjustedEftDate: asc}\n    limit: 1\n  ) {\n    adjustedEftDate\n    processingDate\n  }\n}": types.PayrollBasicInfoFragmentDoc,
    "mutation CreatePayroll($object: payrolls_insert_input!) {\n  insertPayroll(object: $object) {\n    id\n    name\n    clientId\n    cycleId\n    dateTypeId\n    primaryConsultantUserId\n    employeeCount\n  }\n}\n\nmutation UpdatePayroll($id: uuid!, $set: payrolls_set_input!) {\n  updatePayroll(pk_columns: {id: $id}, _set: $set) {\n    id\n    name\n    clientId\n    cycleId\n    dateTypeId\n    primaryConsultantUserId\n    employeeCount\n  }\n}\n\nmutation DeletePayroll($id: uuid!) {\n  deletePayroll(id: $id) {\n    id\n    name\n  }\n}\n\nmutation UpdatePayrollStatus($id: uuid!, $status: payroll_status!) {\n  updatePayroll(pk_columns: {id: $id}, _set: {status: $status}) {\n    id\n    name\n  }\n}\n\nmutation UpdatePayrollDateNotes($id: uuid!, $notes: String) {\n  updatePayrollDate(pk_columns: {id: $id}, _set: {notes: $notes}) {\n    id\n    notes\n    payrollId\n    originalEftDate\n    adjustedEftDate\n    processingDate\n  }\n}\n\nmutation DeletePayrollDates($payrollId: uuid!) {\n  deletePayrollDates(where: {payrollId: {_eq: $payrollId}}) {\n    affected_rows\n  }\n}\n\nmutation ProcessPayrollBatch($payrollIds: [uuid!]!, $processedBy: String!) {\n  updatePayrolls(\n    where: {id: {_in: $payrollIds}}\n    _set: {status: \"Implementation\", updatedAt: \"now()\"}\n  ) {\n    affected_rows\n    returning {\n      id\n      name\n      status\n      updatedAt\n    }\n  }\n}\n\nmutation ApprovePayrollBatch($payrollIds: [uuid!]!, $approvedBy: String!) {\n  updatePayrolls(\n    where: {id: {_in: $payrollIds}}\n    _set: {status: \"Approved\", updatedAt: \"now()\"}\n  ) {\n    affected_rows\n    returning {\n      id\n      name\n      status\n      updatedAt\n    }\n  }\n}\n\nmutation ArchivePayroll($id: uuid!, $archivedBy: String!) {\n  updatePayroll(\n    pk_columns: {id: $id}\n    _set: {status: \"Archived\", supersededDate: \"now()\", updatedAt: \"now()\"}\n  ) {\n    id\n    name\n    status\n    supersededDate\n  }\n}\n\nmutation DeletePayrollSoft($id: uuid!, $deletedBy: String!) {\n  updatePayroll(\n    pk_columns: {id: $id}\n    _set: {status: \"Deleted\", supersededDate: \"now()\", updatedAt: \"now()\"}\n  ) {\n    id\n    name\n    status\n    supersededDate\n  }\n}\n\nmutation RegeneratePayrollDates($payrollId: uuid!, $startDate: date!, $endDate: date!) {\n  deletePayrollDates(where: {payrollId: {_eq: $payrollId}}) {\n    affected_rows\n  }\n}": types.CreatePayrollDocument,
    "query GetPayrolls {\n  payrolls(where: {supersededDate: {_is_null: true}}, order_by: {updatedAt: desc}) {\n    id\n    name\n    clientId\n    cycleId\n    dateTypeId\n    primaryConsultantUserId\n    backupConsultantUserId\n    managerUserId\n    employeeCount\n    goLiveDate\n    status\n    client {\n      id\n      name\n    }\n    payrollCycle {\n      id\n      name\n    }\n    payrollDateType {\n      id\n      name\n    }\n    primaryConsultant {\n      id\n      name\n    }\n    backupConsultant {\n      id\n      name\n    }\n    manager {\n      id\n      name\n    }\n    payrollDates(order_by: {adjustedEftDate: asc}) {\n      id\n      originalEftDate\n      adjustedEftDate\n      processingDate\n    }\n  }\n}\n\nquery GetPayrollsFallback {\n  payrolls {\n    id\n  }\n}\n\nquery GetPayrollById($id: uuid!) {\n  payroll(id: $id) {\n    id\n    clientId\n    cycleId\n    dateTypeId\n    primaryConsultantUserId\n    backupConsultantUserId\n    managerUserId\n    employeeCount\n    goLiveDate\n    client {\n      id\n    }\n    payrollCycle {\n      id\n    }\n    payrollDateType {\n      id\n    }\n    payrollDates(order_by: {adjustedEftDate: asc}) {\n      id\n      originalEftDate\n      adjustedEftDate\n      processingDate\n    }\n  }\n}\n\nquery GetPayrollsByClient($clientId: uuid!) {\n  payrolls(\n    where: {clientId: {_eq: $clientId}, supersededDate: {_is_null: true}}\n    order_by: {updatedAt: desc}\n  ) {\n    id\n    clientId\n    employeeCount\n    goLiveDate\n  }\n}\n\nquery GetPayrollsByMonth($startDate: date!, $endDate: date!) {\n  payrolls(\n    where: {supersededDate: {_is_null: true}, payrollDates: {adjustedEftDate: {_gte: $startDate, _lte: $endDate}}}\n    order_by: {updatedAt: desc}\n  ) {\n    ...PayrollWithDates\n  }\n}\n\nquery GetPayrollDates($payrollId: uuid!) {\n  payrollDates(\n    where: {payrollId: {_eq: $payrollId}}\n    order_by: {adjustedEftDate: asc}\n  ) {\n    id\n    payrollId\n    originalEftDate\n    adjustedEftDate\n    processingDate\n  }\n}\n\nquery GetPayrollFamilyDates($payrollId: uuid!) {\n  payrolls(\n    where: {_or: [{id: {_eq: $payrollId}}, {parentPayrollId: {_eq: $payrollId}}]}\n    order_by: {versionNumber: asc}\n  ) {\n    id\n    versionNumber\n    payrollDates(order_by: {adjustedEftDate: asc}) {\n      ...PayrollDate\n    }\n  }\n}\n\nquery GetPayrollsMissingDates {\n  payrolls(where: {supersededDate: {_is_null: true}}) {\n    id\n    name\n    status\n    client {\n      id\n      name\n    }\n    payrollDates_aggregate {\n      aggregate {\n        count\n      }\n    }\n  }\n}\n\nquery GetPayrollsSimple {\n  payrolls {\n    id\n    client {\n      id\n    }\n  }\n}\n\nquery CheckPayrollVersion($id: uuid!) {\n  payroll(id: $id) {\n    id\n    supersededDate\n    versionNumber\n  }\n  latest: payrolls(\n    where: {parentPayrollId: {_eq: $id}, supersededDate: {_is_null: true}}\n    limit: 1\n  ) {\n    id\n  }\n}\n\nquery GetPayrollDatesById($id: uuid!) {\n  payrollDates(where: {payrollId: {_eq: $id}}, order_by: {adjustedEftDate: asc}) {\n    id\n    originalEftDate\n    adjustedEftDate\n    processingDate\n  }\n}\n\nquery GetPayrollVersionHistory($payrollId: uuid!) {\n  payrolls(\n    where: {_or: [{id: {_eq: $payrollId}}, {parentPayrollId: {_eq: $payrollId}}]}\n    order_by: {versionNumber: desc}\n  ) {\n    id\n    versionNumber\n    supersededDate\n    goLiveDate\n  }\n}\n\nquery GetLatestPayrollVersion($payrollId: uuid!) {\n  payrolls(\n    where: {_or: [{id: {_eq: $payrollId}}, {parentPayrollId: {_eq: $payrollId}}], supersededDate: {_is_null: true}}\n    limit: 1\n  ) {\n    id\n    versionNumber\n    parentPayrollId\n  }\n}\n\nquery GeneratePayrollDatesQuery($payrollId: uuid!, $startDate: date, $endDate: date, $maxDates: Int) {\n  generatePayrollDates(\n    args: {p_payroll_id: $payrollId, p_start_date: $startDate, p_end_date: $endDate, p_max_dates: $maxDates}\n  ) {\n    id\n    payrollId\n    originalEftDate\n    adjustedEftDate\n    processingDate\n    notes\n  }\n}\n\nquery GetUserUpcomingPayrolls($userId: uuid!, $from_date: date!, $limit: Int = 10) {\n  payrolls(\n    where: {_and: [{supersededDate: {_is_null: true}}, {_or: [{primaryConsultantUserId: {_eq: $userId}}, {backupConsultantUserId: {_eq: $userId}}, {managerUserId: {_eq: $userId}}]}, {payrollDates: {adjustedEftDate: {_gte: $from_date}}}]}\n    order_by: {payrollDates_aggregate: {min: {adjustedEftDate: asc}}}\n    limit: $limit\n  ) {\n    id\n    name\n    status\n    client {\n      id\n      name\n    }\n    payrollDates(\n      where: {adjustedEftDate: {_gte: $from_date}}\n      order_by: {adjustedEftDate: asc}\n      limit: 3\n    ) {\n      id\n      adjustedEftDate\n      processingDate\n      originalEftDate\n    }\n    primaryConsultant {\n      id\n      name\n    }\n    backupConsultant {\n      id\n      name\n    }\n    manager {\n      id\n      name\n    }\n  }\n}\n\nquery GetPayrollCycles {\n  payroll_cycles {\n    id\n    name\n    description\n  }\n}\n\nquery GetPayrollDateTypes {\n  payroll_date_types {\n    id\n    name\n    description\n  }\n}\n\nquery GeneratePayrollReport($startDate: timestamptz!, $endDate: timestamptz!) {\n  payrolls(\n    where: {_and: [{createdAt: {_gte: $startDate}}, {createdAt: {_lte: $endDate}}, {status: {_in: [\"Approved\", \"Completed\"]}}]}\n    order_by: {createdAt: desc}\n  ) {\n    id\n    name\n    status\n    createdAt\n    updatedAt\n    client {\n      id\n      name\n    }\n    primaryConsultant {\n      id\n      name\n      email\n    }\n  }\n}\n\nquery GetPayrollsPaginated($limit: Int = 20, $offset: Int = 0, $where: payrolls_bool_exp = {}, $orderBy: [payrolls_order_by!] = [{updatedAt: desc}]) {\n  payrolls(\n    limit: $limit\n    offset: $offset\n    where: {_and: [{supersededDate: {_is_null: true}}, $where]}\n    order_by: $orderBy\n  ) {\n    ...PayrollListItem\n  }\n  payrollsAggregate(where: {_and: [{supersededDate: {_is_null: true}}, $where]}) {\n    aggregate {\n      count\n    }\n  }\n}\n\nquery GetPayrollsByClientPaginated($clientId: uuid!, $limit: Int = 20, $offset: Int = 0) {\n  payrolls(\n    where: {clientId: {_eq: $clientId}, supersededDate: {_is_null: true}}\n    order_by: {updatedAt: desc}\n    limit: $limit\n    offset: $offset\n  ) {\n    ...PayrollTableRow\n  }\n  clientPayrollsAggregate: payrollsAggregate(\n    where: {clientId: {_eq: $clientId}, supersededDate: {_is_null: true}}\n  ) {\n    aggregate {\n      count\n    }\n  }\n}\n\nquery SearchPayrollsPaginated($searchTerm: String!, $limit: Int = 20, $offset: Int = 0) {\n  payrolls(\n    where: {_and: [{supersededDate: {_is_null: true}}, {_or: [{name: {_ilike: $searchTerm}}, {client: {name: {_ilike: $searchTerm}}}]}]}\n    order_by: {updatedAt: desc}\n    limit: $limit\n    offset: $offset\n  ) {\n    ...PayrollListItem\n  }\n  searchAggregate: payrollsAggregate(\n    where: {_and: [{supersededDate: {_is_null: true}}, {_or: [{name: {_ilike: $searchTerm}}, {client: {name: {_ilike: $searchTerm}}}]}]}\n  ) {\n    aggregate {\n      count\n    }\n  }\n}\n\nquery GetPayrollsByStatusPaginated($status: payroll_status!, $limit: Int = 20, $offset: Int = 0) {\n  payrolls(\n    where: {status: {_eq: $status}, supersededDate: {_is_null: true}}\n    order_by: {updatedAt: desc}\n    limit: $limit\n    offset: $offset\n  ) {\n    ...PayrollListItem\n  }\n  statusAggregate: payrollsAggregate(\n    where: {status: {_eq: $status}, supersededDate: {_is_null: true}}\n  ) {\n    aggregate {\n      count\n    }\n  }\n}\n\nquery GetPayrollsQuickList {\n  payrolls(where: {supersededDate: {_is_null: true}}, order_by: {name: asc}) {\n    ...PayrollMinimal\n  }\n}\n\nquery GetPayrollCard($id: uuid!) {\n  payroll(id: $id) {\n    ...PayrollSummary\n    client {\n      name\n    }\n    primaryConsultant {\n      name\n    }\n    nextDate: payrollDates(\n      where: {adjustedEftDate: {_gte: \"now()\"}}\n      order_by: {adjustedEftDate: asc}\n      limit: 1\n    ) {\n      adjustedEftDate\n    }\n  }\n}\n\nquery GetPayrollOptions {\n  payrolls(where: {supersededDate: {_is_null: true}}, order_by: {name: asc}) {\n    id\n    name\n  }\n}\n\nquery GetPayrollDashboardCards($limit: Int = 10) {\n  payrolls(\n    where: {supersededDate: {_is_null: true}}\n    order_by: {updatedAt: desc}\n    limit: $limit\n  ) {\n    ...PayrollDashboardCard\n  }\n}\n\nquery GetPayrollCalendarEvents($startDate: date!, $endDate: date!) {\n  payrolls(\n    where: {supersededDate: {_is_null: true}, payrollDates: {adjustedEftDate: {_gte: $startDate, _lte: $endDate}}}\n  ) {\n    id\n    name\n    status\n    client {\n      name\n    }\n    calendarDates: payrollDates(\n      where: {adjustedEftDate: {_gte: $startDate, _lte: $endDate}}\n      order_by: {adjustedEftDate: asc}\n    ) {\n      adjustedEftDate\n      processingDate\n    }\n  }\n}\n\nquery GetPayrollStatusCounts {\n  total: payrollsAggregate(where: {supersededDate: {_is_null: true}}) {\n    aggregate {\n      count\n    }\n  }\n  active: payrollsAggregate(\n    where: {supersededDate: {_is_null: true}, status: {_eq: \"Active\"}}\n  ) {\n    aggregate {\n      count\n    }\n  }\n  implementation: payrollsAggregate(\n    where: {supersededDate: {_is_null: true}, status: {_eq: \"Implementation\"}}\n  ) {\n    aggregate {\n      count\n    }\n  }\n  archived: payrollsAggregate(\n    where: {supersededDate: {_is_null: true}, status: {_eq: \"Archived\"}}\n  ) {\n    aggregate {\n      count\n    }\n  }\n}": types.GetPayrollsDocument,
    "subscription PayrollUpdates($id: uuid!) {\n  payroll(id: $id) {\n    ...PayrollWithDates\n  }\n}\n\nsubscription PayrollListUpdates {\n  payrolls(where: {supersededDate: {_is_null: true}}, order_by: {updatedAt: desc}) {\n    ...PayrollBasicInfo\n  }\n}\n\nsubscription PayrollDateUpdates($payrollId: uuid!) {\n  payrollDates(\n    where: {payrollId: {_eq: $payrollId}}\n    order_by: {adjustedEftDate: asc}\n  ) {\n    ...PayrollDate\n  }\n}\n\nsubscription PayrollSubscription {\n  payrolls {\n    id\n    name\n    status\n    updatedAt\n  }\n}\n\nsubscription TestSubscription {\n  payrolls(limit: 1) {\n    id\n    name\n  }\n}\n\nsubscription PayrollStatusUpdates($status: payroll_status!) {\n  payrolls(\n    where: {status: {_eq: $status}, supersededDate: {_is_null: true}}\n    order_by: {updatedAt: desc}\n  ) {\n    ...PayrollListItem\n  }\n}\n\nsubscription UserPayrollUpdates($userId: uuid!) {\n  payrolls(\n    where: {_and: [{supersededDate: {_is_null: true}}, {_or: [{primaryConsultantUserId: {_eq: $userId}}, {backupConsultantUserId: {_eq: $userId}}, {managerUserId: {_eq: $userId}}]}]}\n    order_by: {updatedAt: desc}\n  ) {\n    ...PayrollDashboardCard\n  }\n}\n\nsubscription PayrollTotalCount {\n  payrollsAggregate(where: {supersededDate: {_is_null: true}}) {\n    aggregate {\n      count\n    }\n  }\n}\n\nsubscription ActivePayrollCount {\n  payrollsAggregate(\n    where: {supersededDate: {_is_null: true}, status: {_eq: \"Active\"}}\n  ) {\n    aggregate {\n      count\n    }\n  }\n}\n\nsubscription ImplementationPayrollCount {\n  payrollsAggregate(\n    where: {supersededDate: {_is_null: true}, status: {_eq: \"Implementation\"}}\n  ) {\n    aggregate {\n      count\n    }\n  }\n}\n\nsubscription UpcomingPayrollDates($fromDate: date!) {\n  payrollDates(\n    where: {adjustedEftDate: {_gte: $fromDate}}\n    order_by: {adjustedEftDate: asc}\n    limit: 10\n  ) {\n    id\n    adjustedEftDate\n    processingDate\n    payroll {\n      id\n      name\n      status\n      client {\n        name\n      }\n      primaryConsultant {\n        name\n      }\n    }\n  }\n}\n\nsubscription PayrollCalendarUpdates($startDate: date!, $endDate: date!) {\n  payrolls(\n    where: {supersededDate: {_is_null: true}, payrollDates: {adjustedEftDate: {_gte: $startDate, _lte: $endDate}}}\n  ) {\n    id\n    name\n    status\n    client {\n      name\n    }\n    payrollDates(\n      where: {adjustedEftDate: {_gte: $startDate, _lte: $endDate}}\n      order_by: {adjustedEftDate: asc}\n    ) {\n      adjustedEftDate\n      processingDate\n    }\n  }\n}": types.PayrollUpdatesDocument,
    "fragment UserCore on users {\n  id\n  name\n  email\n  username\n  role\n  isActive\n  isStaff\n  clerkUserId\n  createdAt\n  updatedAt\n}\n\nfragment UserBasic on users {\n  id\n  name\n  email\n  role\n  isActive\n}\n\nfragment UserWithManager on users {\n  ...UserCore\n  managerId\n  manager {\n    ...UserBasic\n  }\n}\n\nfragment RoleCore on roles {\n  id\n  name\n  description\n  displayName\n  priority\n  isSystemRole\n  createdAt\n}\n\nfragment PermissionCore on permissions {\n  id\n  action\n  description\n  resourceId\n  createdAt\n  updatedAt\n}\n\nfragment PermissionWithResource on permissions {\n  ...PermissionCore\n  resource {\n    id\n    name\n    description\n  }\n}\n\nfragment ClientCore on clients {\n  id\n  name\n  contactEmail\n  contactPerson\n  contactPhone\n  active\n  createdAt\n  updatedAt\n}\n\nfragment ClientBasic on clients {\n  id\n  name\n  active\n}\n\nfragment PayrollCore on payrolls {\n  id\n  name\n  status\n  clientId\n  primaryConsultantUserId\n  managerUserId\n  createdAt\n  updatedAt\n}\n\nfragment PayrollBasic on payrolls {\n  id\n  name\n  status\n  clientId\n}\n\nfragment ResourceCore on resources {\n  id\n  name\n  displayName\n  description\n  createdAt\n  updatedAt\n}\n\nfragment UserRoleCore on user_roles {\n  id\n  userId\n  roleId\n  createdAt\n  updatedAt\n}\n\nfragment RolePermissionCore on role_permissions {\n  id\n  roleId\n  permissionId\n  conditions\n  createdAt\n  updatedAt\n}\n\nfragment AuditFields on audit_audit_log {\n  id\n  eventTime\n  action\n  resourceType\n  resourceId\n  userId\n  ipAddress\n  userAgent\n  success\n  user_email\n  user_role\n}": types.UserCoreFragmentDoc,
};

/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 *
 *
 * @example
 * ```ts
 * const query = graphql(`query GetUser($id: ID!) { user(id: $id) { name } }`);
 * ```
 *
 * The query argument is unknown!
 * Please regenerate the types.
 */
export function graphql(source: string): unknown;

/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "fragment PayrollBasicInfo on payrolls {\n  id\n  name\n  clientId\n  cycleId\n  dateTypeId\n  primaryConsultantUserId\n  backupConsultantUserId\n  managerUserId\n  employeeCount\n  goLiveDate\n}\n\nfragment PayrollFullDetails on payrolls {\n  id\n  name\n  employeeCount\n  processingTime\n  processingDaysBeforeEft\n  payrollSystem\n  dateValue\n  versionNumber\n  parentPayrollId\n  goLiveDate\n  supersededDate\n  versionReason\n  createdByUserId\n}\n\nfragment PayrollWithRelations on payrolls {\n  ...PayrollFullDetails\n  client {\n    id\n    name\n  }\n  payrollCycle {\n    id\n    name\n  }\n  payrollDateType {\n    id\n    name\n  }\n  primaryConsultant {\n    id\n    name\n    email\n  }\n  backupConsultant {\n    id\n    name\n    email\n  }\n  manager {\n    id\n    name\n    email\n  }\n}\n\nfragment PayrollWithClient on payrolls {\n  ...PayrollBasicInfo\n  client {\n    id\n    name\n  }\n}\n\nfragment PayrollDate on payroll_dates {\n  id\n  payrollId\n  originalEftDate\n  adjustedEftDate\n  processingDate\n}\n\nfragment PayrollWithDates on payrolls {\n  ...PayrollWithRelations\n  payrollDates(order_by: {adjustedEftDate: asc}) {\n    ...PayrollDate\n  }\n}\n\nfragment PayrollSummary on payrolls {\n  id\n  name\n  status\n  employeeCount\n  updatedAt\n}\n\nfragment PayrollListItem on payrolls {\n  ...PayrollSummary\n  client {\n    id\n    name\n  }\n  primaryConsultant {\n    id\n    name\n  }\n  nextPayrollDate: payrollDates(\n    where: {adjustedEftDate: {_gte: \"now()\"}}\n    order_by: {adjustedEftDate: asc}\n    limit: 1\n  ) {\n    adjustedEftDate\n  }\n}\n\nfragment PayrollDashboardCard on payrolls {\n  ...PayrollSummary\n  client {\n    id\n    name\n  }\n  primaryConsultant {\n    id\n    name\n  }\n}\n\nfragment PayrollTableRow on payrolls {\n  ...PayrollListItem\n  cycleId\n  backupConsultant {\n    id\n    name\n  }\n  manager {\n    id\n    name\n  }\n}\n\nfragment PayrollMinimal on payrolls {\n  id\n  name\n  status\n}\n\nfragment PayrollWithNextDate on payrolls {\n  ...PayrollSummary\n  client {\n    name\n  }\n  nextDate: payrollDates(\n    where: {adjustedEftDate: {_gte: \"now()\"}}\n    order_by: {adjustedEftDate: asc}\n    limit: 1\n  ) {\n    adjustedEftDate\n    processingDate\n  }\n}"): (typeof documents)["fragment PayrollBasicInfo on payrolls {\n  id\n  name\n  clientId\n  cycleId\n  dateTypeId\n  primaryConsultantUserId\n  backupConsultantUserId\n  managerUserId\n  employeeCount\n  goLiveDate\n}\n\nfragment PayrollFullDetails on payrolls {\n  id\n  name\n  employeeCount\n  processingTime\n  processingDaysBeforeEft\n  payrollSystem\n  dateValue\n  versionNumber\n  parentPayrollId\n  goLiveDate\n  supersededDate\n  versionReason\n  createdByUserId\n}\n\nfragment PayrollWithRelations on payrolls {\n  ...PayrollFullDetails\n  client {\n    id\n    name\n  }\n  payrollCycle {\n    id\n    name\n  }\n  payrollDateType {\n    id\n    name\n  }\n  primaryConsultant {\n    id\n    name\n    email\n  }\n  backupConsultant {\n    id\n    name\n    email\n  }\n  manager {\n    id\n    name\n    email\n  }\n}\n\nfragment PayrollWithClient on payrolls {\n  ...PayrollBasicInfo\n  client {\n    id\n    name\n  }\n}\n\nfragment PayrollDate on payroll_dates {\n  id\n  payrollId\n  originalEftDate\n  adjustedEftDate\n  processingDate\n}\n\nfragment PayrollWithDates on payrolls {\n  ...PayrollWithRelations\n  payrollDates(order_by: {adjustedEftDate: asc}) {\n    ...PayrollDate\n  }\n}\n\nfragment PayrollSummary on payrolls {\n  id\n  name\n  status\n  employeeCount\n  updatedAt\n}\n\nfragment PayrollListItem on payrolls {\n  ...PayrollSummary\n  client {\n    id\n    name\n  }\n  primaryConsultant {\n    id\n    name\n  }\n  nextPayrollDate: payrollDates(\n    where: {adjustedEftDate: {_gte: \"now()\"}}\n    order_by: {adjustedEftDate: asc}\n    limit: 1\n  ) {\n    adjustedEftDate\n  }\n}\n\nfragment PayrollDashboardCard on payrolls {\n  ...PayrollSummary\n  client {\n    id\n    name\n  }\n  primaryConsultant {\n    id\n    name\n  }\n}\n\nfragment PayrollTableRow on payrolls {\n  ...PayrollListItem\n  cycleId\n  backupConsultant {\n    id\n    name\n  }\n  manager {\n    id\n    name\n  }\n}\n\nfragment PayrollMinimal on payrolls {\n  id\n  name\n  status\n}\n\nfragment PayrollWithNextDate on payrolls {\n  ...PayrollSummary\n  client {\n    name\n  }\n  nextDate: payrollDates(\n    where: {adjustedEftDate: {_gte: \"now()\"}}\n    order_by: {adjustedEftDate: asc}\n    limit: 1\n  ) {\n    adjustedEftDate\n    processingDate\n  }\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "mutation CreatePayroll($object: payrolls_insert_input!) {\n  insertPayroll(object: $object) {\n    id\n    name\n    clientId\n    cycleId\n    dateTypeId\n    primaryConsultantUserId\n    employeeCount\n  }\n}\n\nmutation UpdatePayroll($id: uuid!, $set: payrolls_set_input!) {\n  updatePayroll(pk_columns: {id: $id}, _set: $set) {\n    id\n    name\n    clientId\n    cycleId\n    dateTypeId\n    primaryConsultantUserId\n    employeeCount\n  }\n}\n\nmutation DeletePayroll($id: uuid!) {\n  deletePayroll(id: $id) {\n    id\n    name\n  }\n}\n\nmutation UpdatePayrollStatus($id: uuid!, $status: payroll_status!) {\n  updatePayroll(pk_columns: {id: $id}, _set: {status: $status}) {\n    id\n    name\n  }\n}\n\nmutation UpdatePayrollDateNotes($id: uuid!, $notes: String) {\n  updatePayrollDate(pk_columns: {id: $id}, _set: {notes: $notes}) {\n    id\n    notes\n    payrollId\n    originalEftDate\n    adjustedEftDate\n    processingDate\n  }\n}\n\nmutation DeletePayrollDates($payrollId: uuid!) {\n  deletePayrollDates(where: {payrollId: {_eq: $payrollId}}) {\n    affected_rows\n  }\n}\n\nmutation ProcessPayrollBatch($payrollIds: [uuid!]!, $processedBy: String!) {\n  updatePayrolls(\n    where: {id: {_in: $payrollIds}}\n    _set: {status: \"Implementation\", updatedAt: \"now()\"}\n  ) {\n    affected_rows\n    returning {\n      id\n      name\n      status\n      updatedAt\n    }\n  }\n}\n\nmutation ApprovePayrollBatch($payrollIds: [uuid!]!, $approvedBy: String!) {\n  updatePayrolls(\n    where: {id: {_in: $payrollIds}}\n    _set: {status: \"Approved\", updatedAt: \"now()\"}\n  ) {\n    affected_rows\n    returning {\n      id\n      name\n      status\n      updatedAt\n    }\n  }\n}\n\nmutation ArchivePayroll($id: uuid!, $archivedBy: String!) {\n  updatePayroll(\n    pk_columns: {id: $id}\n    _set: {status: \"Archived\", supersededDate: \"now()\", updatedAt: \"now()\"}\n  ) {\n    id\n    name\n    status\n    supersededDate\n  }\n}\n\nmutation DeletePayrollSoft($id: uuid!, $deletedBy: String!) {\n  updatePayroll(\n    pk_columns: {id: $id}\n    _set: {status: \"Deleted\", supersededDate: \"now()\", updatedAt: \"now()\"}\n  ) {\n    id\n    name\n    status\n    supersededDate\n  }\n}\n\nmutation RegeneratePayrollDates($payrollId: uuid!, $startDate: date!, $endDate: date!) {\n  deletePayrollDates(where: {payrollId: {_eq: $payrollId}}) {\n    affected_rows\n  }\n}"): (typeof documents)["mutation CreatePayroll($object: payrolls_insert_input!) {\n  insertPayroll(object: $object) {\n    id\n    name\n    clientId\n    cycleId\n    dateTypeId\n    primaryConsultantUserId\n    employeeCount\n  }\n}\n\nmutation UpdatePayroll($id: uuid!, $set: payrolls_set_input!) {\n  updatePayroll(pk_columns: {id: $id}, _set: $set) {\n    id\n    name\n    clientId\n    cycleId\n    dateTypeId\n    primaryConsultantUserId\n    employeeCount\n  }\n}\n\nmutation DeletePayroll($id: uuid!) {\n  deletePayroll(id: $id) {\n    id\n    name\n  }\n}\n\nmutation UpdatePayrollStatus($id: uuid!, $status: payroll_status!) {\n  updatePayroll(pk_columns: {id: $id}, _set: {status: $status}) {\n    id\n    name\n  }\n}\n\nmutation UpdatePayrollDateNotes($id: uuid!, $notes: String) {\n  updatePayrollDate(pk_columns: {id: $id}, _set: {notes: $notes}) {\n    id\n    notes\n    payrollId\n    originalEftDate\n    adjustedEftDate\n    processingDate\n  }\n}\n\nmutation DeletePayrollDates($payrollId: uuid!) {\n  deletePayrollDates(where: {payrollId: {_eq: $payrollId}}) {\n    affected_rows\n  }\n}\n\nmutation ProcessPayrollBatch($payrollIds: [uuid!]!, $processedBy: String!) {\n  updatePayrolls(\n    where: {id: {_in: $payrollIds}}\n    _set: {status: \"Implementation\", updatedAt: \"now()\"}\n  ) {\n    affected_rows\n    returning {\n      id\n      name\n      status\n      updatedAt\n    }\n  }\n}\n\nmutation ApprovePayrollBatch($payrollIds: [uuid!]!, $approvedBy: String!) {\n  updatePayrolls(\n    where: {id: {_in: $payrollIds}}\n    _set: {status: \"Approved\", updatedAt: \"now()\"}\n  ) {\n    affected_rows\n    returning {\n      id\n      name\n      status\n      updatedAt\n    }\n  }\n}\n\nmutation ArchivePayroll($id: uuid!, $archivedBy: String!) {\n  updatePayroll(\n    pk_columns: {id: $id}\n    _set: {status: \"Archived\", supersededDate: \"now()\", updatedAt: \"now()\"}\n  ) {\n    id\n    name\n    status\n    supersededDate\n  }\n}\n\nmutation DeletePayrollSoft($id: uuid!, $deletedBy: String!) {\n  updatePayroll(\n    pk_columns: {id: $id}\n    _set: {status: \"Deleted\", supersededDate: \"now()\", updatedAt: \"now()\"}\n  ) {\n    id\n    name\n    status\n    supersededDate\n  }\n}\n\nmutation RegeneratePayrollDates($payrollId: uuid!, $startDate: date!, $endDate: date!) {\n  deletePayrollDates(where: {payrollId: {_eq: $payrollId}}) {\n    affected_rows\n  }\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "query GetPayrolls {\n  payrolls(where: {supersededDate: {_is_null: true}}, order_by: {updatedAt: desc}) {\n    id\n    name\n    clientId\n    cycleId\n    dateTypeId\n    primaryConsultantUserId\n    backupConsultantUserId\n    managerUserId\n    employeeCount\n    goLiveDate\n    status\n    client {\n      id\n      name\n    }\n    payrollCycle {\n      id\n      name\n    }\n    payrollDateType {\n      id\n      name\n    }\n    primaryConsultant {\n      id\n      name\n    }\n    backupConsultant {\n      id\n      name\n    }\n    manager {\n      id\n      name\n    }\n    payrollDates(order_by: {adjustedEftDate: asc}) {\n      id\n      originalEftDate\n      adjustedEftDate\n      processingDate\n    }\n  }\n}\n\nquery GetPayrollsFallback {\n  payrolls {\n    id\n  }\n}\n\nquery GetPayrollById($id: uuid!) {\n  payroll(id: $id) {\n    id\n    clientId\n    cycleId\n    dateTypeId\n    primaryConsultantUserId\n    backupConsultantUserId\n    managerUserId\n    employeeCount\n    goLiveDate\n    client {\n      id\n    }\n    payrollCycle {\n      id\n    }\n    payrollDateType {\n      id\n    }\n    payrollDates(order_by: {adjustedEftDate: asc}) {\n      id\n      originalEftDate\n      adjustedEftDate\n      processingDate\n    }\n  }\n}\n\nquery GetPayrollsByClient($clientId: uuid!) {\n  payrolls(\n    where: {clientId: {_eq: $clientId}, supersededDate: {_is_null: true}}\n    order_by: {updatedAt: desc}\n  ) {\n    id\n    clientId\n    employeeCount\n    goLiveDate\n  }\n}\n\nquery GetPayrollsByMonth($startDate: date!, $endDate: date!) {\n  payrolls(\n    where: {supersededDate: {_is_null: true}, payrollDates: {adjustedEftDate: {_gte: $startDate, _lte: $endDate}}}\n    order_by: {updatedAt: desc}\n  ) {\n    ...PayrollWithDates\n  }\n}\n\nquery GetPayrollDates($payrollId: uuid!) {\n  payrollDates(\n    where: {payrollId: {_eq: $payrollId}}\n    order_by: {adjustedEftDate: asc}\n  ) {\n    id\n    payrollId\n    originalEftDate\n    adjustedEftDate\n    processingDate\n  }\n}\n\nquery GetPayrollFamilyDates($payrollId: uuid!) {\n  payrolls(\n    where: {_or: [{id: {_eq: $payrollId}}, {parentPayrollId: {_eq: $payrollId}}]}\n    order_by: {versionNumber: asc}\n  ) {\n    id\n    versionNumber\n    payrollDates(order_by: {adjustedEftDate: asc}) {\n      ...PayrollDate\n    }\n  }\n}\n\nquery GetPayrollsMissingDates {\n  payrolls(where: {supersededDate: {_is_null: true}}) {\n    id\n    name\n    status\n    client {\n      id\n      name\n    }\n    payrollDates_aggregate {\n      aggregate {\n        count\n      }\n    }\n  }\n}\n\nquery GetPayrollsSimple {\n  payrolls {\n    id\n    client {\n      id\n    }\n  }\n}\n\nquery CheckPayrollVersion($id: uuid!) {\n  payroll(id: $id) {\n    id\n    supersededDate\n    versionNumber\n  }\n  latest: payrolls(\n    where: {parentPayrollId: {_eq: $id}, supersededDate: {_is_null: true}}\n    limit: 1\n  ) {\n    id\n  }\n}\n\nquery GetPayrollDatesById($id: uuid!) {\n  payrollDates(where: {payrollId: {_eq: $id}}, order_by: {adjustedEftDate: asc}) {\n    id\n    originalEftDate\n    adjustedEftDate\n    processingDate\n  }\n}\n\nquery GetPayrollVersionHistory($payrollId: uuid!) {\n  payrolls(\n    where: {_or: [{id: {_eq: $payrollId}}, {parentPayrollId: {_eq: $payrollId}}]}\n    order_by: {versionNumber: desc}\n  ) {\n    id\n    versionNumber\n    supersededDate\n    goLiveDate\n  }\n}\n\nquery GetLatestPayrollVersion($payrollId: uuid!) {\n  payrolls(\n    where: {_or: [{id: {_eq: $payrollId}}, {parentPayrollId: {_eq: $payrollId}}], supersededDate: {_is_null: true}}\n    limit: 1\n  ) {\n    id\n    versionNumber\n    parentPayrollId\n  }\n}\n\nquery GeneratePayrollDatesQuery($payrollId: uuid!, $startDate: date, $endDate: date, $maxDates: Int) {\n  generatePayrollDates(\n    args: {p_payroll_id: $payrollId, p_start_date: $startDate, p_end_date: $endDate, p_max_dates: $maxDates}\n  ) {\n    id\n    payrollId\n    originalEftDate\n    adjustedEftDate\n    processingDate\n    notes\n  }\n}\n\nquery GetUserUpcomingPayrolls($userId: uuid!, $from_date: date!, $limit: Int = 10) {\n  payrolls(\n    where: {_and: [{supersededDate: {_is_null: true}}, {_or: [{primaryConsultantUserId: {_eq: $userId}}, {backupConsultantUserId: {_eq: $userId}}, {managerUserId: {_eq: $userId}}]}, {payrollDates: {adjustedEftDate: {_gte: $from_date}}}]}\n    order_by: {payrollDates_aggregate: {min: {adjustedEftDate: asc}}}\n    limit: $limit\n  ) {\n    id\n    name\n    status\n    client {\n      id\n      name\n    }\n    payrollDates(\n      where: {adjustedEftDate: {_gte: $from_date}}\n      order_by: {adjustedEftDate: asc}\n      limit: 3\n    ) {\n      id\n      adjustedEftDate\n      processingDate\n      originalEftDate\n    }\n    primaryConsultant {\n      id\n      name\n    }\n    backupConsultant {\n      id\n      name\n    }\n    manager {\n      id\n      name\n    }\n  }\n}\n\nquery GetPayrollCycles {\n  payroll_cycles {\n    id\n    name\n    description\n  }\n}\n\nquery GetPayrollDateTypes {\n  payroll_date_types {\n    id\n    name\n    description\n  }\n}\n\nquery GeneratePayrollReport($startDate: timestamptz!, $endDate: timestamptz!) {\n  payrolls(\n    where: {_and: [{createdAt: {_gte: $startDate}}, {createdAt: {_lte: $endDate}}, {status: {_in: [\"Approved\", \"Completed\"]}}]}\n    order_by: {createdAt: desc}\n  ) {\n    id\n    name\n    status\n    createdAt\n    updatedAt\n    client {\n      id\n      name\n    }\n    primaryConsultant {\n      id\n      name\n      email\n    }\n  }\n}\n\nquery GetPayrollsPaginated($limit: Int = 20, $offset: Int = 0, $where: payrolls_bool_exp = {}, $orderBy: [payrolls_order_by!] = [{updatedAt: desc}]) {\n  payrolls(\n    limit: $limit\n    offset: $offset\n    where: {_and: [{supersededDate: {_is_null: true}}, $where]}\n    order_by: $orderBy\n  ) {\n    ...PayrollListItem\n  }\n  payrollsAggregate(where: {_and: [{supersededDate: {_is_null: true}}, $where]}) {\n    aggregate {\n      count\n    }\n  }\n}\n\nquery GetPayrollsByClientPaginated($clientId: uuid!, $limit: Int = 20, $offset: Int = 0) {\n  payrolls(\n    where: {clientId: {_eq: $clientId}, supersededDate: {_is_null: true}}\n    order_by: {updatedAt: desc}\n    limit: $limit\n    offset: $offset\n  ) {\n    ...PayrollTableRow\n  }\n  clientPayrollsAggregate: payrollsAggregate(\n    where: {clientId: {_eq: $clientId}, supersededDate: {_is_null: true}}\n  ) {\n    aggregate {\n      count\n    }\n  }\n}\n\nquery SearchPayrollsPaginated($searchTerm: String!, $limit: Int = 20, $offset: Int = 0) {\n  payrolls(\n    where: {_and: [{supersededDate: {_is_null: true}}, {_or: [{name: {_ilike: $searchTerm}}, {client: {name: {_ilike: $searchTerm}}}]}]}\n    order_by: {updatedAt: desc}\n    limit: $limit\n    offset: $offset\n  ) {\n    ...PayrollListItem\n  }\n  searchAggregate: payrollsAggregate(\n    where: {_and: [{supersededDate: {_is_null: true}}, {_or: [{name: {_ilike: $searchTerm}}, {client: {name: {_ilike: $searchTerm}}}]}]}\n  ) {\n    aggregate {\n      count\n    }\n  }\n}\n\nquery GetPayrollsByStatusPaginated($status: payroll_status!, $limit: Int = 20, $offset: Int = 0) {\n  payrolls(\n    where: {status: {_eq: $status}, supersededDate: {_is_null: true}}\n    order_by: {updatedAt: desc}\n    limit: $limit\n    offset: $offset\n  ) {\n    ...PayrollListItem\n  }\n  statusAggregate: payrollsAggregate(\n    where: {status: {_eq: $status}, supersededDate: {_is_null: true}}\n  ) {\n    aggregate {\n      count\n    }\n  }\n}\n\nquery GetPayrollsQuickList {\n  payrolls(where: {supersededDate: {_is_null: true}}, order_by: {name: asc}) {\n    ...PayrollMinimal\n  }\n}\n\nquery GetPayrollCard($id: uuid!) {\n  payroll(id: $id) {\n    ...PayrollSummary\n    client {\n      name\n    }\n    primaryConsultant {\n      name\n    }\n    nextDate: payrollDates(\n      where: {adjustedEftDate: {_gte: \"now()\"}}\n      order_by: {adjustedEftDate: asc}\n      limit: 1\n    ) {\n      adjustedEftDate\n    }\n  }\n}\n\nquery GetPayrollOptions {\n  payrolls(where: {supersededDate: {_is_null: true}}, order_by: {name: asc}) {\n    id\n    name\n  }\n}\n\nquery GetPayrollDashboardCards($limit: Int = 10) {\n  payrolls(\n    where: {supersededDate: {_is_null: true}}\n    order_by: {updatedAt: desc}\n    limit: $limit\n  ) {\n    ...PayrollDashboardCard\n  }\n}\n\nquery GetPayrollCalendarEvents($startDate: date!, $endDate: date!) {\n  payrolls(\n    where: {supersededDate: {_is_null: true}, payrollDates: {adjustedEftDate: {_gte: $startDate, _lte: $endDate}}}\n  ) {\n    id\n    name\n    status\n    client {\n      name\n    }\n    calendarDates: payrollDates(\n      where: {adjustedEftDate: {_gte: $startDate, _lte: $endDate}}\n      order_by: {adjustedEftDate: asc}\n    ) {\n      adjustedEftDate\n      processingDate\n    }\n  }\n}\n\nquery GetPayrollStatusCounts {\n  total: payrollsAggregate(where: {supersededDate: {_is_null: true}}) {\n    aggregate {\n      count\n    }\n  }\n  active: payrollsAggregate(\n    where: {supersededDate: {_is_null: true}, status: {_eq: \"Active\"}}\n  ) {\n    aggregate {\n      count\n    }\n  }\n  implementation: payrollsAggregate(\n    where: {supersededDate: {_is_null: true}, status: {_eq: \"Implementation\"}}\n  ) {\n    aggregate {\n      count\n    }\n  }\n  archived: payrollsAggregate(\n    where: {supersededDate: {_is_null: true}, status: {_eq: \"Archived\"}}\n  ) {\n    aggregate {\n      count\n    }\n  }\n}"): (typeof documents)["query GetPayrolls {\n  payrolls(where: {supersededDate: {_is_null: true}}, order_by: {updatedAt: desc}) {\n    id\n    name\n    clientId\n    cycleId\n    dateTypeId\n    primaryConsultantUserId\n    backupConsultantUserId\n    managerUserId\n    employeeCount\n    goLiveDate\n    status\n    client {\n      id\n      name\n    }\n    payrollCycle {\n      id\n      name\n    }\n    payrollDateType {\n      id\n      name\n    }\n    primaryConsultant {\n      id\n      name\n    }\n    backupConsultant {\n      id\n      name\n    }\n    manager {\n      id\n      name\n    }\n    payrollDates(order_by: {adjustedEftDate: asc}) {\n      id\n      originalEftDate\n      adjustedEftDate\n      processingDate\n    }\n  }\n}\n\nquery GetPayrollsFallback {\n  payrolls {\n    id\n  }\n}\n\nquery GetPayrollById($id: uuid!) {\n  payroll(id: $id) {\n    id\n    clientId\n    cycleId\n    dateTypeId\n    primaryConsultantUserId\n    backupConsultantUserId\n    managerUserId\n    employeeCount\n    goLiveDate\n    client {\n      id\n    }\n    payrollCycle {\n      id\n    }\n    payrollDateType {\n      id\n    }\n    payrollDates(order_by: {adjustedEftDate: asc}) {\n      id\n      originalEftDate\n      adjustedEftDate\n      processingDate\n    }\n  }\n}\n\nquery GetPayrollsByClient($clientId: uuid!) {\n  payrolls(\n    where: {clientId: {_eq: $clientId}, supersededDate: {_is_null: true}}\n    order_by: {updatedAt: desc}\n  ) {\n    id\n    clientId\n    employeeCount\n    goLiveDate\n  }\n}\n\nquery GetPayrollsByMonth($startDate: date!, $endDate: date!) {\n  payrolls(\n    where: {supersededDate: {_is_null: true}, payrollDates: {adjustedEftDate: {_gte: $startDate, _lte: $endDate}}}\n    order_by: {updatedAt: desc}\n  ) {\n    ...PayrollWithDates\n  }\n}\n\nquery GetPayrollDates($payrollId: uuid!) {\n  payrollDates(\n    where: {payrollId: {_eq: $payrollId}}\n    order_by: {adjustedEftDate: asc}\n  ) {\n    id\n    payrollId\n    originalEftDate\n    adjustedEftDate\n    processingDate\n  }\n}\n\nquery GetPayrollFamilyDates($payrollId: uuid!) {\n  payrolls(\n    where: {_or: [{id: {_eq: $payrollId}}, {parentPayrollId: {_eq: $payrollId}}]}\n    order_by: {versionNumber: asc}\n  ) {\n    id\n    versionNumber\n    payrollDates(order_by: {adjustedEftDate: asc}) {\n      ...PayrollDate\n    }\n  }\n}\n\nquery GetPayrollsMissingDates {\n  payrolls(where: {supersededDate: {_is_null: true}}) {\n    id\n    name\n    status\n    client {\n      id\n      name\n    }\n    payrollDates_aggregate {\n      aggregate {\n        count\n      }\n    }\n  }\n}\n\nquery GetPayrollsSimple {\n  payrolls {\n    id\n    client {\n      id\n    }\n  }\n}\n\nquery CheckPayrollVersion($id: uuid!) {\n  payroll(id: $id) {\n    id\n    supersededDate\n    versionNumber\n  }\n  latest: payrolls(\n    where: {parentPayrollId: {_eq: $id}, supersededDate: {_is_null: true}}\n    limit: 1\n  ) {\n    id\n  }\n}\n\nquery GetPayrollDatesById($id: uuid!) {\n  payrollDates(where: {payrollId: {_eq: $id}}, order_by: {adjustedEftDate: asc}) {\n    id\n    originalEftDate\n    adjustedEftDate\n    processingDate\n  }\n}\n\nquery GetPayrollVersionHistory($payrollId: uuid!) {\n  payrolls(\n    where: {_or: [{id: {_eq: $payrollId}}, {parentPayrollId: {_eq: $payrollId}}]}\n    order_by: {versionNumber: desc}\n  ) {\n    id\n    versionNumber\n    supersededDate\n    goLiveDate\n  }\n}\n\nquery GetLatestPayrollVersion($payrollId: uuid!) {\n  payrolls(\n    where: {_or: [{id: {_eq: $payrollId}}, {parentPayrollId: {_eq: $payrollId}}], supersededDate: {_is_null: true}}\n    limit: 1\n  ) {\n    id\n    versionNumber\n    parentPayrollId\n  }\n}\n\nquery GeneratePayrollDatesQuery($payrollId: uuid!, $startDate: date, $endDate: date, $maxDates: Int) {\n  generatePayrollDates(\n    args: {p_payroll_id: $payrollId, p_start_date: $startDate, p_end_date: $endDate, p_max_dates: $maxDates}\n  ) {\n    id\n    payrollId\n    originalEftDate\n    adjustedEftDate\n    processingDate\n    notes\n  }\n}\n\nquery GetUserUpcomingPayrolls($userId: uuid!, $from_date: date!, $limit: Int = 10) {\n  payrolls(\n    where: {_and: [{supersededDate: {_is_null: true}}, {_or: [{primaryConsultantUserId: {_eq: $userId}}, {backupConsultantUserId: {_eq: $userId}}, {managerUserId: {_eq: $userId}}]}, {payrollDates: {adjustedEftDate: {_gte: $from_date}}}]}\n    order_by: {payrollDates_aggregate: {min: {adjustedEftDate: asc}}}\n    limit: $limit\n  ) {\n    id\n    name\n    status\n    client {\n      id\n      name\n    }\n    payrollDates(\n      where: {adjustedEftDate: {_gte: $from_date}}\n      order_by: {adjustedEftDate: asc}\n      limit: 3\n    ) {\n      id\n      adjustedEftDate\n      processingDate\n      originalEftDate\n    }\n    primaryConsultant {\n      id\n      name\n    }\n    backupConsultant {\n      id\n      name\n    }\n    manager {\n      id\n      name\n    }\n  }\n}\n\nquery GetPayrollCycles {\n  payroll_cycles {\n    id\n    name\n    description\n  }\n}\n\nquery GetPayrollDateTypes {\n  payroll_date_types {\n    id\n    name\n    description\n  }\n}\n\nquery GeneratePayrollReport($startDate: timestamptz!, $endDate: timestamptz!) {\n  payrolls(\n    where: {_and: [{createdAt: {_gte: $startDate}}, {createdAt: {_lte: $endDate}}, {status: {_in: [\"Approved\", \"Completed\"]}}]}\n    order_by: {createdAt: desc}\n  ) {\n    id\n    name\n    status\n    createdAt\n    updatedAt\n    client {\n      id\n      name\n    }\n    primaryConsultant {\n      id\n      name\n      email\n    }\n  }\n}\n\nquery GetPayrollsPaginated($limit: Int = 20, $offset: Int = 0, $where: payrolls_bool_exp = {}, $orderBy: [payrolls_order_by!] = [{updatedAt: desc}]) {\n  payrolls(\n    limit: $limit\n    offset: $offset\n    where: {_and: [{supersededDate: {_is_null: true}}, $where]}\n    order_by: $orderBy\n  ) {\n    ...PayrollListItem\n  }\n  payrollsAggregate(where: {_and: [{supersededDate: {_is_null: true}}, $where]}) {\n    aggregate {\n      count\n    }\n  }\n}\n\nquery GetPayrollsByClientPaginated($clientId: uuid!, $limit: Int = 20, $offset: Int = 0) {\n  payrolls(\n    where: {clientId: {_eq: $clientId}, supersededDate: {_is_null: true}}\n    order_by: {updatedAt: desc}\n    limit: $limit\n    offset: $offset\n  ) {\n    ...PayrollTableRow\n  }\n  clientPayrollsAggregate: payrollsAggregate(\n    where: {clientId: {_eq: $clientId}, supersededDate: {_is_null: true}}\n  ) {\n    aggregate {\n      count\n    }\n  }\n}\n\nquery SearchPayrollsPaginated($searchTerm: String!, $limit: Int = 20, $offset: Int = 0) {\n  payrolls(\n    where: {_and: [{supersededDate: {_is_null: true}}, {_or: [{name: {_ilike: $searchTerm}}, {client: {name: {_ilike: $searchTerm}}}]}]}\n    order_by: {updatedAt: desc}\n    limit: $limit\n    offset: $offset\n  ) {\n    ...PayrollListItem\n  }\n  searchAggregate: payrollsAggregate(\n    where: {_and: [{supersededDate: {_is_null: true}}, {_or: [{name: {_ilike: $searchTerm}}, {client: {name: {_ilike: $searchTerm}}}]}]}\n  ) {\n    aggregate {\n      count\n    }\n  }\n}\n\nquery GetPayrollsByStatusPaginated($status: payroll_status!, $limit: Int = 20, $offset: Int = 0) {\n  payrolls(\n    where: {status: {_eq: $status}, supersededDate: {_is_null: true}}\n    order_by: {updatedAt: desc}\n    limit: $limit\n    offset: $offset\n  ) {\n    ...PayrollListItem\n  }\n  statusAggregate: payrollsAggregate(\n    where: {status: {_eq: $status}, supersededDate: {_is_null: true}}\n  ) {\n    aggregate {\n      count\n    }\n  }\n}\n\nquery GetPayrollsQuickList {\n  payrolls(where: {supersededDate: {_is_null: true}}, order_by: {name: asc}) {\n    ...PayrollMinimal\n  }\n}\n\nquery GetPayrollCard($id: uuid!) {\n  payroll(id: $id) {\n    ...PayrollSummary\n    client {\n      name\n    }\n    primaryConsultant {\n      name\n    }\n    nextDate: payrollDates(\n      where: {adjustedEftDate: {_gte: \"now()\"}}\n      order_by: {adjustedEftDate: asc}\n      limit: 1\n    ) {\n      adjustedEftDate\n    }\n  }\n}\n\nquery GetPayrollOptions {\n  payrolls(where: {supersededDate: {_is_null: true}}, order_by: {name: asc}) {\n    id\n    name\n  }\n}\n\nquery GetPayrollDashboardCards($limit: Int = 10) {\n  payrolls(\n    where: {supersededDate: {_is_null: true}}\n    order_by: {updatedAt: desc}\n    limit: $limit\n  ) {\n    ...PayrollDashboardCard\n  }\n}\n\nquery GetPayrollCalendarEvents($startDate: date!, $endDate: date!) {\n  payrolls(\n    where: {supersededDate: {_is_null: true}, payrollDates: {adjustedEftDate: {_gte: $startDate, _lte: $endDate}}}\n  ) {\n    id\n    name\n    status\n    client {\n      name\n    }\n    calendarDates: payrollDates(\n      where: {adjustedEftDate: {_gte: $startDate, _lte: $endDate}}\n      order_by: {adjustedEftDate: asc}\n    ) {\n      adjustedEftDate\n      processingDate\n    }\n  }\n}\n\nquery GetPayrollStatusCounts {\n  total: payrollsAggregate(where: {supersededDate: {_is_null: true}}) {\n    aggregate {\n      count\n    }\n  }\n  active: payrollsAggregate(\n    where: {supersededDate: {_is_null: true}, status: {_eq: \"Active\"}}\n  ) {\n    aggregate {\n      count\n    }\n  }\n  implementation: payrollsAggregate(\n    where: {supersededDate: {_is_null: true}, status: {_eq: \"Implementation\"}}\n  ) {\n    aggregate {\n      count\n    }\n  }\n  archived: payrollsAggregate(\n    where: {supersededDate: {_is_null: true}, status: {_eq: \"Archived\"}}\n  ) {\n    aggregate {\n      count\n    }\n  }\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "subscription PayrollUpdates($id: uuid!) {\n  payroll(id: $id) {\n    ...PayrollWithDates\n  }\n}\n\nsubscription PayrollListUpdates {\n  payrolls(where: {supersededDate: {_is_null: true}}, order_by: {updatedAt: desc}) {\n    ...PayrollBasicInfo\n  }\n}\n\nsubscription PayrollDateUpdates($payrollId: uuid!) {\n  payrollDates(\n    where: {payrollId: {_eq: $payrollId}}\n    order_by: {adjustedEftDate: asc}\n  ) {\n    ...PayrollDate\n  }\n}\n\nsubscription PayrollSubscription {\n  payrolls {\n    id\n    name\n    status\n    updatedAt\n  }\n}\n\nsubscription TestSubscription {\n  payrolls(limit: 1) {\n    id\n    name\n  }\n}\n\nsubscription PayrollStatusUpdates($status: payroll_status!) {\n  payrolls(\n    where: {status: {_eq: $status}, supersededDate: {_is_null: true}}\n    order_by: {updatedAt: desc}\n  ) {\n    ...PayrollListItem\n  }\n}\n\nsubscription UserPayrollUpdates($userId: uuid!) {\n  payrolls(\n    where: {_and: [{supersededDate: {_is_null: true}}, {_or: [{primaryConsultantUserId: {_eq: $userId}}, {backupConsultantUserId: {_eq: $userId}}, {managerUserId: {_eq: $userId}}]}]}\n    order_by: {updatedAt: desc}\n  ) {\n    ...PayrollDashboardCard\n  }\n}\n\nsubscription PayrollTotalCount {\n  payrollsAggregate(where: {supersededDate: {_is_null: true}}) {\n    aggregate {\n      count\n    }\n  }\n}\n\nsubscription ActivePayrollCount {\n  payrollsAggregate(\n    where: {supersededDate: {_is_null: true}, status: {_eq: \"Active\"}}\n  ) {\n    aggregate {\n      count\n    }\n  }\n}\n\nsubscription ImplementationPayrollCount {\n  payrollsAggregate(\n    where: {supersededDate: {_is_null: true}, status: {_eq: \"Implementation\"}}\n  ) {\n    aggregate {\n      count\n    }\n  }\n}\n\nsubscription UpcomingPayrollDates($fromDate: date!) {\n  payrollDates(\n    where: {adjustedEftDate: {_gte: $fromDate}}\n    order_by: {adjustedEftDate: asc}\n    limit: 10\n  ) {\n    id\n    adjustedEftDate\n    processingDate\n    payroll {\n      id\n      name\n      status\n      client {\n        name\n      }\n      primaryConsultant {\n        name\n      }\n    }\n  }\n}\n\nsubscription PayrollCalendarUpdates($startDate: date!, $endDate: date!) {\n  payrolls(\n    where: {supersededDate: {_is_null: true}, payrollDates: {adjustedEftDate: {_gte: $startDate, _lte: $endDate}}}\n  ) {\n    id\n    name\n    status\n    client {\n      name\n    }\n    payrollDates(\n      where: {adjustedEftDate: {_gte: $startDate, _lte: $endDate}}\n      order_by: {adjustedEftDate: asc}\n    ) {\n      adjustedEftDate\n      processingDate\n    }\n  }\n}"): (typeof documents)["subscription PayrollUpdates($id: uuid!) {\n  payroll(id: $id) {\n    ...PayrollWithDates\n  }\n}\n\nsubscription PayrollListUpdates {\n  payrolls(where: {supersededDate: {_is_null: true}}, order_by: {updatedAt: desc}) {\n    ...PayrollBasicInfo\n  }\n}\n\nsubscription PayrollDateUpdates($payrollId: uuid!) {\n  payrollDates(\n    where: {payrollId: {_eq: $payrollId}}\n    order_by: {adjustedEftDate: asc}\n  ) {\n    ...PayrollDate\n  }\n}\n\nsubscription PayrollSubscription {\n  payrolls {\n    id\n    name\n    status\n    updatedAt\n  }\n}\n\nsubscription TestSubscription {\n  payrolls(limit: 1) {\n    id\n    name\n  }\n}\n\nsubscription PayrollStatusUpdates($status: payroll_status!) {\n  payrolls(\n    where: {status: {_eq: $status}, supersededDate: {_is_null: true}}\n    order_by: {updatedAt: desc}\n  ) {\n    ...PayrollListItem\n  }\n}\n\nsubscription UserPayrollUpdates($userId: uuid!) {\n  payrolls(\n    where: {_and: [{supersededDate: {_is_null: true}}, {_or: [{primaryConsultantUserId: {_eq: $userId}}, {backupConsultantUserId: {_eq: $userId}}, {managerUserId: {_eq: $userId}}]}]}\n    order_by: {updatedAt: desc}\n  ) {\n    ...PayrollDashboardCard\n  }\n}\n\nsubscription PayrollTotalCount {\n  payrollsAggregate(where: {supersededDate: {_is_null: true}}) {\n    aggregate {\n      count\n    }\n  }\n}\n\nsubscription ActivePayrollCount {\n  payrollsAggregate(\n    where: {supersededDate: {_is_null: true}, status: {_eq: \"Active\"}}\n  ) {\n    aggregate {\n      count\n    }\n  }\n}\n\nsubscription ImplementationPayrollCount {\n  payrollsAggregate(\n    where: {supersededDate: {_is_null: true}, status: {_eq: \"Implementation\"}}\n  ) {\n    aggregate {\n      count\n    }\n  }\n}\n\nsubscription UpcomingPayrollDates($fromDate: date!) {\n  payrollDates(\n    where: {adjustedEftDate: {_gte: $fromDate}}\n    order_by: {adjustedEftDate: asc}\n    limit: 10\n  ) {\n    id\n    adjustedEftDate\n    processingDate\n    payroll {\n      id\n      name\n      status\n      client {\n        name\n      }\n      primaryConsultant {\n        name\n      }\n    }\n  }\n}\n\nsubscription PayrollCalendarUpdates($startDate: date!, $endDate: date!) {\n  payrolls(\n    where: {supersededDate: {_is_null: true}, payrollDates: {adjustedEftDate: {_gte: $startDate, _lte: $endDate}}}\n  ) {\n    id\n    name\n    status\n    client {\n      name\n    }\n    payrollDates(\n      where: {adjustedEftDate: {_gte: $startDate, _lte: $endDate}}\n      order_by: {adjustedEftDate: asc}\n    ) {\n      adjustedEftDate\n      processingDate\n    }\n  }\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "fragment UserCore on users {\n  id\n  name\n  email\n  username\n  role\n  isActive\n  isStaff\n  clerkUserId\n  createdAt\n  updatedAt\n}\n\nfragment UserBasic on users {\n  id\n  name\n  email\n  role\n  isActive\n}\n\nfragment UserWithManager on users {\n  ...UserCore\n  managerId\n  manager {\n    ...UserBasic\n  }\n}\n\nfragment RoleCore on roles {\n  id\n  name\n  description\n  displayName\n  priority\n  isSystemRole\n  createdAt\n}\n\nfragment PermissionCore on permissions {\n  id\n  action\n  description\n  resourceId\n  createdAt\n  updatedAt\n}\n\nfragment PermissionWithResource on permissions {\n  ...PermissionCore\n  resource {\n    id\n    name\n    description\n  }\n}\n\nfragment ClientCore on clients {\n  id\n  name\n  contactEmail\n  contactPerson\n  contactPhone\n  active\n  createdAt\n  updatedAt\n}\n\nfragment ClientBasic on clients {\n  id\n  name\n  active\n}\n\nfragment PayrollCore on payrolls {\n  id\n  name\n  status\n  clientId\n  primaryConsultantUserId\n  managerUserId\n  createdAt\n  updatedAt\n}\n\nfragment PayrollBasic on payrolls {\n  id\n  name\n  status\n  clientId\n}\n\nfragment ResourceCore on resources {\n  id\n  name\n  displayName\n  description\n  createdAt\n  updatedAt\n}\n\nfragment UserRoleCore on user_roles {\n  id\n  userId\n  roleId\n  createdAt\n  updatedAt\n}\n\nfragment RolePermissionCore on role_permissions {\n  id\n  roleId\n  permissionId\n  conditions\n  createdAt\n  updatedAt\n}\n\nfragment AuditFields on audit_audit_log {\n  id\n  eventTime\n  action\n  resourceType\n  resourceId\n  userId\n  ipAddress\n  userAgent\n  success\n  user_email\n  user_role\n}"): (typeof documents)["fragment UserCore on users {\n  id\n  name\n  email\n  username\n  role\n  isActive\n  isStaff\n  clerkUserId\n  createdAt\n  updatedAt\n}\n\nfragment UserBasic on users {\n  id\n  name\n  email\n  role\n  isActive\n}\n\nfragment UserWithManager on users {\n  ...UserCore\n  managerId\n  manager {\n    ...UserBasic\n  }\n}\n\nfragment RoleCore on roles {\n  id\n  name\n  description\n  displayName\n  priority\n  isSystemRole\n  createdAt\n}\n\nfragment PermissionCore on permissions {\n  id\n  action\n  description\n  resourceId\n  createdAt\n  updatedAt\n}\n\nfragment PermissionWithResource on permissions {\n  ...PermissionCore\n  resource {\n    id\n    name\n    description\n  }\n}\n\nfragment ClientCore on clients {\n  id\n  name\n  contactEmail\n  contactPerson\n  contactPhone\n  active\n  createdAt\n  updatedAt\n}\n\nfragment ClientBasic on clients {\n  id\n  name\n  active\n}\n\nfragment PayrollCore on payrolls {\n  id\n  name\n  status\n  clientId\n  primaryConsultantUserId\n  managerUserId\n  createdAt\n  updatedAt\n}\n\nfragment PayrollBasic on payrolls {\n  id\n  name\n  status\n  clientId\n}\n\nfragment ResourceCore on resources {\n  id\n  name\n  displayName\n  description\n  createdAt\n  updatedAt\n}\n\nfragment UserRoleCore on user_roles {\n  id\n  userId\n  roleId\n  createdAt\n  updatedAt\n}\n\nfragment RolePermissionCore on role_permissions {\n  id\n  roleId\n  permissionId\n  conditions\n  createdAt\n  updatedAt\n}\n\nfragment AuditFields on audit_audit_log {\n  id\n  eventTime\n  action\n  resourceType\n  resourceId\n  userId\n  ipAddress\n  userAgent\n  success\n  user_email\n  user_role\n}"];

export function graphql(source: string) {
  return (documents as any)[source] ?? {};
}

export type DocumentType<TDocumentNode extends DocumentNode<any, any>> = TDocumentNode extends DocumentNode<  infer TType,  any>  ? TType  : never;