/* eslint-disable */
import * as types from './graphql';
import { TypedDocumentNode as DocumentNode } from '@graphql-typed-document-node/core';

/**
 * Map of all GraphQL operations in the project.
 *
 * This map has several performance disadvantages:
 * 1. It is not tree-shakeable, so it will include all operations in the project.
 * 2. It is not minifiable, so the string of a GraphQL query will be multiple times inside the bundle.
 * 3. It does not support dead code elimination, so it will add unused operations.
 *
 * Therefore it is highly recommended to use the babel or swc plugin for production.
 * Learn more about it here: https://the-guild.dev/graphql/codegen/plugins/presets/preset-client#reducing-bundle-size
 */
type Documents = {
    "fragment PayrollProcessingInfo on Payrolls {\n  id\n  name\n  status\n  employeeCount\n  processingTime\n  processingDaysBeforeEft\n  goLiveDate\n}\n\nfragment PayrollVersionInfo on Payrolls {\n  id\n  versionNumber\n  versionReason\n  parentPayrollId\n  supersededDate\n  createdAt\n  createdByUserId\n}\n\nfragment PayrollWithAllRelations on Payrolls {\n  ...PayrollBase\n  client {\n    ...ClientMinimal\n  }\n  primaryConsultant {\n    ...UserMinimal\n  }\n  backupConsultant {\n    ...UserMinimal\n  }\n  assignedManager {\n    ...UserMinimal\n  }\n  cycleId\n  dateTypeId\n  dateValue\n  payrollCycle {\n    id\n    name\n    description\n  }\n  payrollDateType {\n    id\n    name\n    description\n  }\n  createdByUserId\n}\n\nfragment PayrollForAssignment on Payrolls {\n  id\n  name\n  status\n  clientId\n  employeeCount\n  processingTime\n  processingDaysBeforeEft\n  client {\n    ...ClientMinimal\n  }\n  primaryConsultantUserId\n  backupConsultantUserId\n  managerUserId\n  requiredSkills {\n    skillName\n    requiredLevel\n  }\n  payrollDates(\n    where: {adjustedEftDate: {_gte: \"today()\"}}\n    orderBy: {adjustedEftDate: ASC}\n    limit: 3\n  ) {\n    id\n    originalEftDate\n    adjustedEftDate\n    processingDate\n  }\n}\n\nfragment PayrollBasic on Payrolls {\n  id\n  name\n  status\n  employeeCount\n  client {\n    ...ClientMinimal\n  }\n}\n\nfragment PayrollForAudit on Payrolls {\n  id\n  name\n  status\n  versionNumber\n  createdAt\n  updatedAt\n  createdByUserId\n}\n\nfragment PayrollTableRow on Payrolls {\n  ...PayrollListItem\n  goLiveDate\n  processingTime\n  versionNumber\n  cycleId\n  payrollCycle {\n    id\n    name\n    description\n  }\n  nextPayrollDate: payrollDates(\n    where: {adjustedEftDate: {_gte: \"today()\"}}\n    orderBy: {adjustedEftDate: ASC}\n    limit: 1\n  ) {\n    originalEftDate\n    adjustedEftDate\n    processingDate\n  }\n}\n\nfragment PayrollDashboardCard on Payrolls {\n  ...PayrollMinimal\n  client {\n    ...ClientMinimal\n  }\n  primaryConsultant {\n    ...UserMinimal\n  }\n  goLiveDate\n}\n\nfragment PayrollDate on PayrollDates {\n  id\n  payrollId\n  originalEftDate\n  adjustedEftDate\n  processingDate\n  notes\n  status\n  completedAt\n  completedBy\n  createdAt\n  payroll {\n    id\n    name\n  }\n}\n\nfragment PayrollDetailed on Payrolls {\n  ...PayrollFullDetail\n  requiredSkills {\n    skillName\n    requiredLevel\n  }\n}\n\nfragment PayrollSummary on Payrolls {\n  ...PayrollBase\n  client {\n    ...ClientMinimal\n  }\n  primaryConsultant {\n    ...UserMinimal\n  }\n}\n\nfragment PayrollWithCycle on Payrolls {\n  ...PayrollBase\n  cycleId\n  payrollCycle {\n    id\n    name\n  }\n}\n\nfragment PayrollWorkload on Payrolls {\n  id\n  name\n  status\n  employeeCount\n  processingTime\n  processingDaysBeforeEft\n  primaryConsultantUserId\n  backupConsultantUserId\n  managerUserId\n  client {\n    ...ClientMinimal\n  }\n}": typeof types.PayrollProcessingInfoFragmentDoc,
    "mutation CreatePayroll($object: PayrollsInsertInput!) {\n  insertPayrollsOne(object: $object) {\n    ...PayrollDetailed\n    client {\n      id\n      name\n    }\n    primaryConsultant {\n      id\n      firstName\n      lastName\n      computedName\n    }\n  }\n}\n\nmutation UpdatePayroll($id: uuid!, $set: PayrollsSetInput!) {\n  updatePayrollsByPk(pkColumns: {id: $id}, _set: $set) {\n    ...PayrollDetailed\n    client {\n      id\n      name\n    }\n    primaryConsultant {\n      id\n      firstName\n      lastName\n      computedName\n    }\n    backupConsultant {\n      id\n      firstName\n      lastName\n      computedName\n    }\n  }\n}\n\nmutation DeletePayroll($id: uuid!) {\n  updatePayrollsByPk(pkColumns: {id: $id}, _set: {supersededDate: \"now()\"}) {\n    ...PayrollBasic\n  }\n}\n\nmutation ReactivatePayroll($id: uuid!) {\n  updatePayrollsByPk(pkColumns: {id: $id}, _set: {supersededDate: null}) {\n    ...PayrollBasic\n  }\n}\n\nmutation UpdatePayrollStatus($id: uuid!, $status: payroll_status!) {\n  updatePayrollsByPk(\n    pkColumns: {id: $id}\n    _set: {status: $status, updatedAt: \"now()\"}\n  ) {\n    ...PayrollBasic\n    client {\n      id\n      name\n    }\n  }\n}\n\nmutation ActivatePayroll($id: uuid!) {\n  updatePayrollsByPk(\n    pkColumns: {id: $id}\n    _set: {status: \"Active\", updatedAt: \"now()\"}\n  ) {\n    ...PayrollBasic\n  }\n}\n\nmutation DeactivatePayroll($id: uuid!) {\n  updatePayrollsByPk(\n    pkColumns: {id: $id}\n    _set: {status: \"Inactive\", updatedAt: \"now()\"}\n  ) {\n    ...PayrollBasic\n  }\n}\n\nmutation AssignPrimaryConsultant($id: uuid!, $userId: uuid!) {\n  updatePayrollsByPk(\n    pkColumns: {id: $id}\n    _set: {primaryConsultantUserId: $userId, updatedAt: \"now()\"}\n  ) {\n    ...PayrollBasic\n    primaryConsultant {\n      id\n      firstName\n      lastName\n      computedName\n      email\n    }\n  }\n}\n\nmutation AssignBackupConsultant($id: uuid!, $userId: uuid!) {\n  updatePayrollsByPk(\n    pkColumns: {id: $id}\n    _set: {backupConsultantUserId: $userId, updatedAt: \"now()\"}\n  ) {\n    ...PayrollBasic\n    backupConsultant {\n      id\n      firstName\n      lastName\n      computedName\n      email\n    }\n  }\n}\n\nmutation AssignManager($id: uuid!, $userId: uuid!) {\n  updatePayrollsByPk(\n    pkColumns: {id: $id}\n    _set: {managerUserId: $userId, updatedAt: \"now()\"}\n  ) {\n    ...PayrollBasic\n    assignedManager {\n      id\n      firstName\n      lastName\n      computedName\n      email\n    }\n  }\n}\n\nmutation UpdatePayrollAssignments($id: uuid!, $primaryConsultantUserId: uuid, $backupConsultantUserId: uuid, $managerUserId: uuid) {\n  updatePayrollsByPk(\n    pkColumns: {id: $id}\n    _set: {primaryConsultantUserId: $primaryConsultantUserId, backupConsultantUserId: $backupConsultantUserId, managerUserId: $managerUserId, updatedAt: \"now()\"}\n  ) {\n    ...PayrollBasic\n    primaryConsultant {\n      id\n      firstName\n      lastName\n      computedName\n      email\n    }\n    backupConsultant {\n      id\n      firstName\n      lastName\n      computedName\n      email\n    }\n    assignedManager {\n      id\n      firstName\n      lastName\n      computedName\n      email\n    }\n  }\n}\n\nmutation CreatePayrollVersion($parentPayrollId: uuid!, $versionReason: String!, $object: PayrollsInsertInput!) {\n  updatePayrollsByPk(\n    pkColumns: {id: $parentPayrollId}\n    _set: {supersededDate: \"now()\"}\n  ) {\n    id\n    supersededDate\n  }\n  insertPayrollsOne(object: $object) {\n    ...PayrollWithAllRelations\n  }\n}\n\nmutation SupersedePayroll($id: uuid!) {\n  updatePayrollsByPk(pkColumns: {id: $id}, _set: {supersededDate: \"now()\"}) {\n    ...PayrollBasic\n  }\n}\n\nmutation BulkUpdatePayrolls($where: PayrollsBoolExp!, $set: PayrollsSetInput!) {\n  updatePayrolls(where: $where, _set: $set) {\n    returning {\n      ...PayrollBasic\n    }\n    affectedRows\n  }\n}\n\nmutation BulkAssignConsultant($payrollIds: [uuid!]!, $primaryConsultantUserId: uuid!) {\n  updatePayrolls(\n    where: {id: {_in: $payrollIds}}\n    _set: {primaryConsultantUserId: $primaryConsultantUserId, updatedAt: \"now()\"}\n  ) {\n    returning {\n      ...PayrollBasic\n      primaryConsultant {\n        id\n        firstName\n        lastName\n        computedName\n      }\n    }\n    affectedRows\n  }\n}\n\nmutation BulkAssignManager($payrollIds: [uuid!]!, $managerUserId: uuid!) {\n  updatePayrolls(\n    where: {id: {_in: $payrollIds}}\n    _set: {managerUserId: $managerUserId, updatedAt: \"now()\"}\n  ) {\n    returning {\n      ...PayrollBasic\n      assignedManager {\n        id\n        firstName\n        lastName\n        computedName\n      }\n    }\n    affectedRows\n  }\n}\n\nmutation BulkUpdatePayrollStatus($payrollIds: [uuid!]!, $status: payroll_status!) {\n  updatePayrolls(\n    where: {id: {_in: $payrollIds}}\n    _set: {status: $status, updatedAt: \"now()\"}\n  ) {\n    returning {\n      ...PayrollBasic\n    }\n    affectedRows\n  }\n}\n\nmutation UpdatePayrollConfiguration($id: uuid!, $payrollSystem: String, $processingTime: Int, $processingDaysBeforeEft: Int, $cycleId: uuid, $dateTypeId: uuid) {\n  updatePayrollsByPk(\n    pkColumns: {id: $id}\n    _set: {payrollSystem: $payrollSystem, processingTime: $processingTime, processingDaysBeforeEft: $processingDaysBeforeEft, cycleId: $cycleId, dateTypeId: $dateTypeId, updatedAt: \"now()\"}\n  ) {\n    ...PayrollWithCycle\n  }\n}\n\nmutation UpdatePayrollDetails($id: uuid!, $name: String, $employeeCount: Int, $goLiveDate: date) {\n  updatePayrollsByPk(\n    pkColumns: {id: $id}\n    _set: {name: $name, employeeCount: $employeeCount, goLiveDate: $goLiveDate, updatedAt: \"now()\"}\n  ) {\n    ...PayrollBasic\n  }\n}\n\nmutation CreatePayrollDate($object: PayrollDatesInsertInput!) {\n  insertPayrollDatesOne(object: $object) {\n    id\n    originalEftDate\n    adjustedEftDate\n    processingDate\n    notes\n    payrollId\n    createdAt\n    updatedAt\n  }\n}\n\nmutation UpdatePayrollDate($id: uuid!, $set: PayrollDatesSetInput!) {\n  updatePayrollDatesByPk(pkColumns: {id: $id}, _set: $set) {\n    id\n    originalEftDate\n    adjustedEftDate\n    processingDate\n    notes\n    payrollId\n    updatedAt\n  }\n}\n\nmutation DeletePayrollDate($id: uuid!) {\n  deletePayrollDatesByPk(id: $id) {\n    id\n    originalEftDate\n    adjustedEftDate\n    payrollId\n  }\n}\n\nmutation UpdatePayrollDateNotes($id: uuid!, $notes: String) {\n  updatePayrollDatesByPk(\n    pkColumns: {id: $id}\n    _set: {notes: $notes, updatedAt: \"now()\"}\n  ) {\n    id\n    originalEftDate\n    adjustedEftDate\n    notes\n    payrollId\n  }\n}\n\nmutation CompletePayrollDate($id: uuid!, $completedBy: uuid!) {\n  updatePayrollDatesByPk(\n    pkColumns: {id: $id}\n    _set: {status: \"completed\", completedAt: \"now()\", completedBy: $completedBy}\n  ) {\n    id\n    status\n    completedAt\n    completedBy\n    payrollId\n    originalEftDate\n    adjustedEftDate\n    processingDate\n  }\n}\n\nmutation UpdatePayrollDateStatus($id: uuid!, $status: String!, $updatedBy: uuid) {\n  updatePayrollDatesByPk(\n    pkColumns: {id: $id}\n    _set: {status: $status, updatedAt: \"now()\", completedBy: $updatedBy}\n  ) {\n    id\n    status\n    completedAt\n    completedBy\n    payrollId\n  }\n}\n\nmutation BulkCreatePayrollDates($objects: [PayrollDatesInsertInput!]!) {\n  insertPayrollDates(objects: $objects) {\n    returning {\n      id\n      originalEftDate\n      adjustedEftDate\n      processingDate\n      payrollId\n    }\n    affectedRows\n  }\n}\n\nmutation BulkDeletePayrollDates($payrollId: uuid!) {\n  deletePayrollDates(where: {payrollId: {_eq: $payrollId}}) {\n    affectedRows\n  }\n}\n\nmutation CreatePayrollCycle($object: PayrollCyclesInsertInput!) {\n  insertPayrollCyclesOne(object: $object) {\n    id\n    name\n    description\n    createdAt\n  }\n}\n\nmutation UpdatePayrollCycle($id: uuid!, $set: PayrollCyclesSetInput!) {\n  updatePayrollCyclesByPk(pkColumns: {id: $id}, _set: $set) {\n    id\n    name\n    description\n    updatedAt\n  }\n}\n\nmutation DeletePayrollCycle($id: uuid!) {\n  deletePayrollCyclesByPk(id: $id) {\n    id\n    name\n  }\n}\n\nmutation CreatePayrollDateType($object: PayrollDateTypesInsertInput!) {\n  insertPayrollDateTypesOne(object: $object) {\n    id\n    name\n    description\n    createdAt\n  }\n}\n\nmutation UpdatePayrollDateType($id: uuid!, $set: PayrollDateTypesSetInput!) {\n  updatePayrollDateTypesByPk(pkColumns: {id: $id}, _set: $set) {\n    id\n    name\n    description\n    updatedAt\n  }\n}\n\nmutation DeletePayrollDateType($id: uuid!) {\n  deletePayrollDateTypesByPk(id: $id) {\n    id\n    name\n  }\n}\n\nmutation ProcessPayrollBatch($payrollIds: [uuid!]!, $processedBy: uuid!) {\n  updatePayrolls(\n    where: {id: {_in: $payrollIds}}\n    _set: {status: \"Processing\", updatedAt: \"now()\"}\n  ) {\n    returning {\n      ...PayrollBasic\n      client {\n        id\n        name\n      }\n    }\n    affectedRows\n  }\n}\n\nmutation ApprovePayrollBatch($payrollIds: [uuid!]!, $approvedBy: uuid!) {\n  updatePayrolls(\n    where: {id: {_in: $payrollIds}, status: {_eq: \"Processing\"}}\n    _set: {status: \"Approved\", updatedAt: \"now()\"}\n  ) {\n    returning {\n      ...PayrollBasic\n      client {\n        id\n        name\n      }\n    }\n    affectedRows\n  }\n}\n\nquery GeneratePayrollsByIds($payrollIds: [uuid!]!, $reportType: String!) {\n  payrolls(where: {id: {_in: $payrollIds}}, orderBy: {name: ASC}) {\n    ...PayrollWithAllRelations\n    payrollDates(orderBy: {originalEftDate: ASC}) {\n      id\n      originalEftDate\n      adjustedEftDate\n      processingDate\n      notes\n    }\n  }\n}": typeof types.CreatePayrollDocument,
    "query GetPayrolls($limit: Int = 50, $offset: Int = 0, $where: PayrollsBoolExp) {\n  payrolls(\n    limit: $limit\n    offset: $offset\n    where: $where\n    orderBy: {createdAt: DESC}\n  ) {\n    ...PayrollListItem\n  }\n  payrollsAggregate(where: $where) {\n    aggregate {\n      count\n    }\n  }\n}\n\nquery GetPayrollById($id: uuid!) {\n  payrollsByPk(id: $id) {\n    ...PayrollWithAllRelations\n  }\n}\n\nquery GetPayrollBasic($id: uuid!) {\n  payrollsByPk(id: $id) {\n    ...PayrollBasic\n  }\n}\n\nquery GetPayrollForEdit($id: uuid!) {\n  payrollsByPk(id: $id) {\n    ...PayrollDetailed\n    client {\n      id\n      name\n    }\n    payrollCycle {\n      id\n      name\n      description\n    }\n    payrollDateType {\n      id\n      name\n    }\n    primaryConsultantUserId\n    backupConsultantUserId\n    managerUserId\n    primaryConsultant {\n      id\n      firstName\n      lastName\n      computedName\n      email\n      role\n    }\n    backupConsultant {\n      id\n      firstName\n      lastName\n      computedName\n      email\n      role\n    }\n    assignedManager {\n      id\n      firstName\n      lastName\n      computedName\n      email\n      role\n    }\n  }\n}\n\nquery GetPayrollsSimple {\n  payrolls(where: {supersededDate: {_isNull: true}}, orderBy: {name: ASC}) {\n    ...PayrollMinimal\n  }\n}\n\nquery GetActivePayrolls {\n  payrolls(\n    where: {supersededDate: {_isNull: true}, status: {_neq: \"Inactive\"}}\n    orderBy: {name: ASC}\n  ) {\n    ...PayrollSummary\n    client {\n      id\n      name\n    }\n  }\n}\n\nquery GetPayrollsByClient($clientId: uuid!) {\n  payrolls(\n    where: {clientId: {_eq: $clientId}, supersededDate: {_isNull: true}}\n    orderBy: {createdAt: DESC}\n  ) {\n    ...PayrollListItem\n  }\n}\n\nquery GetPayrollsByUser($userId: uuid!) {\n  primaryPayrolls: payrolls(\n    where: {primaryConsultantUserId: {_eq: $userId}, supersededDate: {_isNull: true}}\n    orderBy: {name: ASC}\n  ) {\n    ...PayrollWorkload\n  }\n  backupPayrolls: payrolls(\n    where: {backupConsultantUserId: {_eq: $userId}, supersededDate: {_isNull: true}}\n    orderBy: {name: ASC}\n  ) {\n    ...PayrollWorkload\n  }\n  managedPayrolls: payrolls(\n    where: {managerUserId: {_eq: $userId}, supersededDate: {_isNull: true}}\n    orderBy: {name: ASC}\n  ) {\n    ...PayrollWorkload\n  }\n}\n\nquery GetPayrollDashboardStats {\n  totalPayrolls: payrollsAggregate(where: {supersededDate: {_isNull: true}}) {\n    aggregate {\n      count\n    }\n  }\n  activePayrolls: payrollsAggregate(\n    where: {supersededDate: {_isNull: true}, status: {_eq: \"Active\"}}\n  ) {\n    aggregate {\n      count\n    }\n  }\n  totalEmployees: payrollsAggregate(where: {supersededDate: {_isNull: true}}) {\n    aggregate {\n      sum {\n        employeeCount\n      }\n    }\n  }\n  pendingPayrolls: payrollsAggregate(\n    where: {supersededDate: {_isNull: true}, status: {_eq: \"Implementation\"}}\n  ) {\n    aggregate {\n      count\n    }\n  }\n  recentPayrolls: payrolls(\n    where: {supersededDate: {_isNull: true}}\n    orderBy: {updatedAt: DESC}\n    limit: 5\n  ) {\n    ...PayrollDashboardCard\n  }\n}\n\nquery GetPayrollDashboardComplete($limit: Int = 20, $offset: Int = 0, $where: PayrollsBoolExp = {}, $orderBy: [PayrollsOrderBy!] = [{updatedAt: DESC}]) {\n  payrolls(\n    limit: $limit\n    offset: $offset\n    where: {_and: [{supersededDate: {_isNull: true}}, $where]}\n    orderBy: $orderBy\n  ) {\n    id\n    name\n    status\n    employeeCount\n    processingTime\n    dateValue\n    processingDaysBeforeEft\n    createdAt\n    updatedAt\n    client {\n      id\n      name\n      active\n      contactPerson\n    }\n    primaryConsultant {\n      id\n      firstName\n      lastName\n      computedName\n      email\n      role\n      isActive\n    }\n    backupConsultant {\n      id\n      firstName\n      lastName\n      computedName\n      email\n      role\n      isActive\n    }\n    assignedManager {\n      id\n      firstName\n      lastName\n      computedName\n      email\n      role\n      isActive\n    }\n    payrollCycle {\n      id\n      name\n      description\n    }\n    payrollDateType {\n      id\n      name\n      description\n    }\n    nextPayrollDate: payrollDates(\n      where: {adjustedEftDate: {_gte: \"now()\"}}\n      orderBy: {adjustedEftDate: ASC}\n      limit: 1\n    ) {\n      id\n      originalEftDate\n      adjustedEftDate\n      processingDate\n      notes\n    }\n    recentDates: payrollDates(orderBy: {originalEftDate: DESC}, limit: 3) {\n      id\n      originalEftDate\n      adjustedEftDate\n      processingDate\n    }\n  }\n  payrollsAggregate(where: {_and: [{supersededDate: {_isNull: true}}, $where]}) {\n    aggregate {\n      count\n    }\n  }\n  activePayrolls: payrollsAggregate(\n    where: {supersededDate: {_isNull: true}, status: {_eq: \"Active\"}}\n  ) {\n    aggregate {\n      count\n    }\n  }\n  totalEmployees: payrollsAggregate(where: {supersededDate: {_isNull: true}}) {\n    aggregate {\n      sum {\n        employeeCount\n      }\n    }\n  }\n  pendingPayrolls: payrollsAggregate(\n    where: {supersededDate: {_isNull: true}, status: {_eq: \"Implementation\"}}\n  ) {\n    aggregate {\n      count\n    }\n  }\n  draftPayrolls: payrollsAggregate(\n    where: {supersededDate: {_isNull: true}, status: {_eq: \"Draft\"}}\n  ) {\n    aggregate {\n      count\n    }\n  }\n  inactivePayrolls: payrollsAggregate(\n    where: {supersededDate: {_isNull: true}, status: {_eq: \"Inactive\"}}\n  ) {\n    aggregate {\n      count\n    }\n  }\n}\n\nquery GetUpcomingPayrolls($limit: Int = 10) {\n  payrolls(\n    where: {supersededDate: {_isNull: true}, status: {_eq: \"Active\"}, payrollDates: {originalEftDate: {_gte: \"now()\"}}}\n    orderBy: {updatedAt: DESC}\n    limit: $limit\n  ) {\n    ...PayrollDashboardCard\n    nextPayDate: payrollDates(\n      where: {originalEftDate: {_gte: \"now()\"}}\n      orderBy: {originalEftDate: ASC}\n      limit: 1\n    ) {\n      originalEftDate\n      adjustedEftDate\n      processingDate\n    }\n  }\n}\n\nquery SearchPayrolls($searchTerm: String!, $limit: Int = 50) {\n  payrolls(\n    where: {_and: [{supersededDate: {_isNull: true}}, {_or: [{name: {_ilike: $searchTerm}}, {client: {name: {_ilike: $searchTerm}}}, {primaryConsultant: {computedName: {_ilike: $searchTerm}}}]}]}\n    orderBy: {name: ASC}\n    limit: $limit\n  ) {\n    ...PayrollTableRow\n  }\n}\n\nquery GetPayrollsByStatus($status: payroll_status!) {\n  payrolls(\n    where: {supersededDate: {_isNull: true}, status: {_eq: $status}}\n    orderBy: {updatedAt: DESC}\n  ) {\n    ...PayrollListItem\n  }\n}\n\nquery GetPayrollsByProcessingTime($processingTime: Int!) {\n  payrolls(\n    where: {supersededDate: {_isNull: true}, processingTime: {_eq: $processingTime}}\n    orderBy: {name: ASC}\n  ) {\n    ...PayrollProcessingInfo\n  }\n}\n\nquery GetPayrollVersions($payrollId: uuid!) {\n  payrolls(\n    where: {_or: [{id: {_eq: $payrollId}}, {parentPayrollId: {_eq: $payrollId}}]}\n    orderBy: {versionNumber: DESC}\n  ) {\n    ...PayrollVersionInfo\n  }\n}\n\nquery GetPayrollHistory($payrollId: uuid!) {\n  payrolls(\n    where: {_or: [{id: {_eq: $payrollId}}, {parentPayrollId: {_eq: $payrollId}}]}\n    orderBy: {createdAt: DESC}\n  ) {\n    ...PayrollVersionInfo\n    status\n    supersededDate\n  }\n}\n\nquery GetLatestPayrollVersion($payrollId: uuid!) {\n  payrolls(\n    where: {_or: [{id: {_eq: $payrollId}}, {parentPayrollId: {_eq: $payrollId}}], supersededDate: {_isNull: true}}\n    limit: 1\n  ) {\n    ...PayrollWithAllRelations\n  }\n}\n\nquery GetPayrollCycles {\n  payrollCycles(orderBy: {name: ASC}) {\n    id\n    name\n    description\n    createdAt\n    updatedAt\n  }\n}\n\nquery GetPayrollDateTypes {\n  payrollDateTypes(orderBy: {name: ASC}) {\n    id\n    name\n    description\n    createdAt\n    updatedAt\n  }\n}\n\nquery GetPayrollDetailComplete($id: uuid!) {\n  payrollsByPk(id: $id) {\n    ...PayrollDetailed\n    client {\n      id\n      name\n    }\n    payrollCycle {\n      id\n      name\n      description\n    }\n    payrollDateType {\n      id\n      name\n    }\n    primaryConsultant {\n      id\n      firstName\n      lastName\n      computedName\n      email\n      role\n    }\n    backupConsultant {\n      id\n      firstName\n      lastName\n      computedName\n      email\n      role\n    }\n    assignedManager {\n      id\n      firstName\n      lastName\n      computedName\n      email\n      role\n    }\n    detailDates: payrollDates(orderBy: {originalEftDate: ASC}, limit: 12) {\n      id\n      originalEftDate\n      adjustedEftDate\n      processingDate\n      createdAt\n    }\n  }\n  users(where: {isActive: {_eq: true}}, orderBy: {computedName: ASC}) {\n    id\n    firstName\n    lastName\n    computedName\n    email\n    role\n    isStaff\n    isActive\n  }\n  payrollCycles(orderBy: {name: ASC}) {\n    id\n    name\n    description\n  }\n  payrollDateTypes(orderBy: {name: ASC}) {\n    id\n    name\n    description\n  }\n}\n\nquery GetPayrollDates($payrollId: uuid!) {\n  payrollDates(\n    where: {payrollId: {_eq: $payrollId}}\n    orderBy: {originalEftDate: ASC}\n  ) {\n    id\n    originalEftDate\n    adjustedEftDate\n    processingDate\n    notes\n    createdAt\n    updatedAt\n    payrollId\n  }\n}\n\nquery GetUpcomingPayrollDates($limit: Int = 20) {\n  payrollDates(\n    where: {originalEftDate: {_gte: \"now()\"}}\n    orderBy: {originalEftDate: ASC}\n    limit: $limit\n  ) {\n    id\n    originalEftDate\n    adjustedEftDate\n    processingDate\n    notes\n    payrollAssignments {\n      payrollDate {\n        payroll {\n          id\n          name\n          status\n          client {\n            id\n            name\n          }\n        }\n      }\n    }\n  }\n}\n\nquery GetPayrollDatesInRange($startDate: date!, $endDate: date!, $payrollId: uuid) {\n  payrollDates(\n    where: {originalEftDate: {_gte: $startDate, _lte: $endDate}, payrollId: {_eq: $payrollId}}\n    orderBy: {originalEftDate: ASC}\n  ) {\n    id\n    originalEftDate\n    adjustedEftDate\n    processingDate\n    notes\n    payrollAssignments {\n      payrollDate {\n        payroll {\n          id\n          name\n          client {\n            name\n          }\n        }\n      }\n    }\n  }\n}\n\nquery GetUnassignedPayrolls {\n  payrolls(\n    where: {supersededDate: {_isNull: true}, _or: [{primaryConsultantUserId: {_isNull: true}}, {backupConsultantUserId: {_isNull: true}}, {managerUserId: {_isNull: true}}]}\n    orderBy: {createdAt: DESC}\n  ) {\n    ...PayrollForAssignment\n  }\n}\n\nquery GetPayrollsNeedingAttention {\n  payrolls(\n    where: {supersededDate: {_isNull: true}, status: {_in: [\"pending_approval\", \"processing\", \"draft\"]}}\n    orderBy: {updatedAt: ASC}\n  ) {\n    ...PayrollListItem\n    primaryConsultant {\n      id\n      firstName\n      lastName\n      computedName\n    }\n    assignedManager {\n      id\n      firstName\n      lastName\n      computedName\n    }\n  }\n}\n\nquery GetPayrollsForBulkUpdate($ids: [uuid!]!) {\n  payrolls(where: {id: {_in: $ids}}) {\n    ...PayrollBasic\n  }\n}\n\nquery GetPayrollsForBulkAssignment($where: PayrollsBoolExp!) {\n  payrolls(where: $where) {\n    ...PayrollForAssignment\n  }\n}\n\nquery GetPayrollsForAudit($limit: Int = 100, $offset: Int = 0, $where: PayrollsBoolExp = {}) {\n  payrolls(\n    limit: $limit\n    offset: $offset\n    where: $where\n    orderBy: {updatedAt: DESC}\n  ) {\n    ...PayrollForAudit\n  }\n}\n\nquery GetPayrollActivity($payrollId: uuid!, $limit: Int = 50) {\n  payrolls(\n    where: {_or: [{id: {_eq: $payrollId}}, {parentPayrollId: {_eq: $payrollId}}]}\n    orderBy: {updatedAt: DESC}\n    limit: $limit\n  ) {\n    ...PayrollVersionInfo\n    status\n    supersededDate\n  }\n}\n\nquery GetPayrollsPaginated($limit: Int = 20, $offset: Int = 0, $where: PayrollsBoolExp = {}, $orderBy: [PayrollsOrderBy!] = [{createdAt: DESC}]) {\n  payrolls(\n    limit: $limit\n    offset: $offset\n    where: {_and: [{supersededDate: {_isNull: true}}, $where]}\n    orderBy: $orderBy\n  ) {\n    ...PayrollTableRow\n  }\n  payrollsAggregate(where: {_and: [{supersededDate: {_isNull: true}}, $where]}) {\n    aggregate {\n      count\n    }\n  }\n}\n\nquery SearchPayrollsPaginated($searchTerm: String!, $limit: Int = 20, $offset: Int = 0) {\n  payrolls(\n    where: {_and: [{supersededDate: {_isNull: true}}, {_or: [{name: {_ilike: $searchTerm}}, {client: {name: {_ilike: $searchTerm}}}, {primaryConsultant: {computedName: {_ilike: $searchTerm}}}, {backupConsultant: {computedName: {_ilike: $searchTerm}}}]}]}\n    orderBy: {name: ASC}\n    limit: $limit\n    offset: $offset\n  ) {\n    ...PayrollTableRow\n  }\n  searchAggregate: payrollsAggregate(\n    where: {_and: [{supersededDate: {_isNull: true}}, {_or: [{name: {_ilike: $searchTerm}}, {client: {name: {_ilike: $searchTerm}}}, {primaryConsultant: {computedName: {_ilike: $searchTerm}}}, {backupConsultant: {computedName: {_ilike: $searchTerm}}}]}]}\n  ) {\n    aggregate {\n      count\n    }\n  }\n}\n\nquery GetPayrollsQuickList {\n  payrolls(where: {supersededDate: {_isNull: true}}, orderBy: {name: ASC}) {\n    ...PayrollMinimal\n  }\n}\n\nquery GetActivePayrollsQuickList {\n  payrolls(\n    where: {supersededDate: {_isNull: true}, status: {_eq: \"Active\"}}\n    orderBy: {name: ASC}\n  ) {\n    ...PayrollMinimal\n  }\n}\n\nquery GetClientPayrollsQuickList($clientId: uuid!) {\n  payrolls(\n    where: {clientId: {_eq: $clientId}, supersededDate: {_isNull: true}}\n    orderBy: {name: ASC}\n  ) {\n    ...PayrollMinimal\n  }\n}\n\nquery GeneratePayrollDates($payrollId: uuid!, $startDate: date!, $endDate: date!, $maxDates: Int = 100) {\n  payrollDates(\n    where: {payrollId: {_eq: $payrollId}, originalEftDate: {_gte: $startDate, _lte: $endDate}}\n    limit: $maxDates\n    orderBy: {originalEftDate: ASC}\n  ) {\n    id\n    originalEftDate\n    adjustedEftDate\n    processingDate\n    notes\n    payrollId\n    createdAt\n    updatedAt\n  }\n}\n\nquery GeneratePayrollDatesQuery($payrollId: uuid!, $startDate: date!, $endDate: date!, $maxDates: Int = 100) {\n  payrollDates(\n    where: {payrollId: {_eq: $payrollId}, originalEftDate: {_gte: $startDate, _lte: $endDate}}\n    limit: $maxDates\n    orderBy: {originalEftDate: ASC}\n  ) {\n    id\n    originalEftDate\n    adjustedEftDate\n    processingDate\n    notes\n    payrollId\n    createdAt\n    updatedAt\n  }\n}\n\nquery GetUserUpcomingPayrolls($userId: uuid!, $limit: Int = 10) {\n  payrolls(\n    where: {supersededDate: {_isNull: true}, status: {_eq: \"Active\"}, _or: [{primaryConsultantUserId: {_eq: $userId}}, {backupConsultantUserId: {_eq: $userId}}, {managerUserId: {_eq: $userId}}]}\n    orderBy: {updatedAt: DESC}\n    limit: $limit\n  ) {\n    ...PayrollDashboardCard\n    nextPayDate: payrollDates(\n      where: {_or: [{adjustedEftDate: {_gte: \"now()\"}}, {originalEftDate: {_gte: \"now()\"}}]}\n      orderBy: [{adjustedEftDate: ASC}, {originalEftDate: ASC}]\n      limit: 1\n    ) {\n      originalEftDate\n      adjustedEftDate\n      processingDate\n    }\n    backupConsultant {\n      id\n      firstName\n      lastName\n      computedName\n      email\n    }\n    assignedManager {\n      id\n      firstName\n      lastName\n      computedName\n      email\n    }\n  }\n}\n\nquery GetPayrollsByMonth($startDate: date!, $endDate: date!) {\n  payrolls(\n    where: {supersededDate: {_isNull: true}, payrollDates: {originalEftDate: {_gte: $startDate, _lt: $endDate}}}\n    orderBy: {createdAt: DESC}\n  ) {\n    ...PayrollWithDates\n    client {\n      id\n      name\n    }\n    primaryConsultant {\n      id\n      firstName\n      lastName\n      computedName\n      email\n      role\n      isActive\n    }\n    backupConsultant {\n      id\n      firstName\n      lastName\n      computedName\n      email\n      role\n      isActive\n    }\n    assignedManager {\n      id\n      firstName\n      lastName\n      computedName\n      email\n      role\n      isActive\n    }\n  }\n}\n\nquery GetPayrollFamilyDates($payrollId: uuid!) {\n  payrolls(\n    where: {_or: [{id: {_eq: $payrollId}}, {parentPayrollId: {_eq: $payrollId}}]}\n    orderBy: {versionNumber: DESC}\n  ) {\n    id\n    name\n    versionNumber\n    status\n    supersededDate\n    payrollDates(orderBy: {originalEftDate: ASC}) {\n      ...PayrollDate\n    }\n  }\n}\n\nquery GetPayrollsMissingDates {\n  payrolls(\n    where: {supersededDate: {_isNull: true}, status: {_eq: \"Active\"}, _not: {payrollDates: {}}}\n    orderBy: {name: ASC}\n  ) {\n    ...PayrollListItem\n    payrollCycle {\n      id\n      name\n      description\n    }\n    payrollDateType {\n      id\n      name\n      description\n    }\n  }\n}\n\nquery GetPayrollsTableEnhanced($limit: Int = 100, $offset: Int = 0, $where: PayrollsBoolExp = {}, $orderBy: [PayrollsOrderBy!] = [{name: ASC}]) {\n  payrolls(\n    limit: $limit\n    offset: $offset\n    where: {_and: [{supersededDate: {_isNull: true}}, $where]}\n    orderBy: $orderBy\n  ) {\n    id\n    name\n    status\n    employeeCount\n    dateValue\n    processingDaysBeforeEft\n    createdAt\n    updatedAt\n    client {\n      id\n      name\n      active\n    }\n    payrollCycle {\n      id\n      name\n      description\n    }\n    payrollDateType {\n      id\n      name\n      description\n    }\n    primaryConsultant {\n      id\n      firstName\n      lastName\n      computedName\n      email\n      role\n    }\n    backupConsultant {\n      id\n      firstName\n      lastName\n      computedName\n      email\n      role\n    }\n    assignedManager {\n      id\n      firstName\n      lastName\n      computedName\n      email\n      role\n    }\n    nextEftDate: payrollDates(\n      where: {adjustedEftDate: {_gte: \"now()\"}}\n      orderBy: {adjustedEftDate: ASC}\n      limit: 1\n    ) {\n      id\n      originalEftDate\n      adjustedEftDate\n      processingDate\n      notes\n    }\n  }\n  payrollsAggregate(where: {_and: [{supersededDate: {_isNull: true}}, $where]}) {\n    aggregate {\n      count\n    }\n  }\n}\n\nquery GeneratePayrollReport($startDate: date!, $endDate: date!) {\n  payrolls(\n    where: {supersededDate: {_isNull: true}, payrollDates: {originalEftDate: {_gte: $startDate, _lte: $endDate}}}\n    orderBy: {name: ASC}\n  ) {\n    ...PayrollForAudit\n    client {\n      id\n      name\n    }\n    primaryConsultant {\n      id\n      firstName\n      lastName\n      computedName\n    }\n    backupConsultant {\n      id\n      firstName\n      lastName\n      computedName\n    }\n    assignedManager {\n      id\n      firstName\n      lastName\n      computedName\n    }\n    payrollDates(\n      where: {originalEftDate: {_gte: $startDate, _lte: $endDate}}\n      orderBy: {originalEftDate: ASC}\n    ) {\n      id\n      originalEftDate\n      adjustedEftDate\n      processingDate\n      notes\n    }\n  }\n  reportMetadata: payrollsAggregate(\n    where: {supersededDate: {_isNull: true}, payrollDates: {originalEftDate: {_gte: $startDate, _lte: $endDate}}}\n  ) {\n    aggregate {\n      count\n    }\n  }\n}": typeof types.GetPayrollsDocument,
    "subscription PayrollsUpdates {\n  payrolls(where: {supersededDate: {_isNull: true}}, orderBy: {updatedAt: DESC}) {\n    ...PayrollListItem\n  }\n}\n\nsubscription PayrollUpdates($id: uuid!) {\n  payrolls(where: {id: {_eq: $id}}) {\n    ...PayrollDetailed\n  }\n}\n\nsubscription ActivePayrollsUpdates {\n  payrolls(\n    where: {supersededDate: {_isNull: true}, status: {_eq: \"Active\"}}\n    orderBy: {name: ASC}\n  ) {\n    ...PayrollSummary\n    client {\n      id\n      name\n    }\n  }\n}\n\nsubscription PayrollStatsUpdates {\n  payrollsAggregate(where: {supersededDate: {_isNull: true}}) {\n    aggregate {\n      count\n    }\n  }\n}\n\nsubscription UnassignedPayrollsUpdates {\n  payrolls(\n    where: {supersededDate: {_isNull: true}, _or: [{primaryConsultantUserId: {_isNull: true}}, {backupConsultantUserId: {_isNull: true}}, {managerUserId: {_isNull: true}}]}\n  ) {\n    ...PayrollForAssignment\n  }\n}\n\nsubscription PayrollDatesUpdates($payrollId: uuid!) {\n  payrollDates(\n    where: {payrollId: {_eq: $payrollId}}\n    orderBy: {originalEftDate: ASC}\n  ) {\n    id\n    originalEftDate\n    adjustedEftDate\n    processingDate\n    notes\n    updatedAt\n  }\n}\n\nsubscription UpcomingPayrollDatesUpdates {\n  payrollDates(\n    where: {originalEftDate: {_gte: \"now()\"}}\n    orderBy: {originalEftDate: ASC}\n    limit: 20\n  ) {\n    id\n    originalEftDate\n    adjustedEftDate\n    processingDate\n    notes\n    payrollId\n  }\n}\n\nsubscription PayrollSystemHealthUpdates {\n  payrolls(\n    where: {supersededDate: {_isNull: true}, status: {_in: [\"pending_approval\", \"processing\", \"draft\"]}}\n    orderBy: {updatedAt: ASC}\n  ) {\n    ...PayrollListItem\n    primaryConsultant {\n      id\n      firstName\n      lastName\n      computedName\n    }\n    assignedManager {\n      id\n      firstName\n      lastName\n      computedName\n    }\n  }\n}\n\nsubscription PayrollSubscription {\n  payrolls(where: {supersededDate: {_isNull: true}}, orderBy: {updatedAt: DESC}) {\n    ...PayrollListItem\n  }\n}": typeof types.PayrollsUpdatesDocument,
    "fragment UserMinimal on Users {\n  id\n  firstName\n  lastName\n  computedName\n  email\n}\n\nfragment UserCoreShared on Users {\n  ...UserMinimal\n  role\n  isActive\n}\n\nfragment UserBasic on Users {\n  ...UserCoreShared\n  clerkUserId\n  createdAt\n  updatedAt\n}\n\nfragment UserBase on Users {\n  ...UserBasic\n}\n\nfragment UserWithRole on Users {\n  ...UserBasic\n  username\n  isStaff\n}\n\nfragment UserProfile on Users {\n  ...UserWithRole\n  clerkUserId\n  image\n  managerId\n  deactivatedAt\n  deactivatedBy\n  manager {\n    ...UserMinimal\n  }\n}\n\nfragment UserSearchResult on Users {\n  ...UserCoreShared\n  username\n  isStaff\n}\n\nfragment ClientMinimal on Clients {\n  id\n  name\n}\n\nfragment ClientBase on Clients {\n  id\n  name\n  active\n  contactEmail\n  contactPerson\n  contactPhone\n  createdAt\n}\n\nfragment ClientWithStats on Clients {\n  ...ClientBase\n  currentEmployeeCount: payrollsAggregate(\n    where: {supersededDate: {_isNull: true}}\n  ) {\n    aggregate {\n      sum {\n        employeeCount\n      }\n    }\n  }\n  activePayrollCount: payrollsAggregate(\n    where: {supersededDate: {_isNull: true}, status: {_eq: \"Active\"}}\n  ) {\n    aggregate {\n      count\n    }\n  }\n}\n\nfragment ClientListBase on Clients {\n  ...ClientBase\n  payrollCount: payrollsAggregate(where: {supersededDate: {_isNull: true}}) {\n    aggregate {\n      count\n    }\n  }\n}\n\nfragment PayrollMinimal on Payrolls {\n  id\n  name\n  employeeCount\n  status\n}\n\nfragment PayrollBase on Payrolls {\n  id\n  name\n  employeeCount\n  status\n  payrollSystem\n  processingTime\n  processingDaysBeforeEft\n  versionNumber\n  supersededDate\n  createdAt\n  updatedAt\n}\n\nfragment PayrollWithClient on Payrolls {\n  ...PayrollBase\n  clientId\n  client {\n    id\n    name\n    active\n  }\n}\n\nfragment PayrollListItem on Payrolls {\n  ...PayrollWithClient\n  primaryConsultantUserId\n  backupConsultantUserId\n  managerUserId\n  createdByUserId\n  cycleId\n  dateTypeId\n  dateValue\n  payrollCycle {\n    id\n    name\n    description\n  }\n  payrollDateType {\n    id\n    name\n    description\n  }\n  primaryConsultant {\n    ...UserMinimal\n  }\n  backupConsultant {\n    ...UserMinimal\n  }\n  assignedManager {\n    ...UserMinimal\n  }\n}\n\nfragment PayrollWithDates on Payrolls {\n  ...PayrollBase\n  goLiveDate\n  payrollDates(orderBy: {originalEftDate: ASC}) {\n    id\n    originalEftDate\n    adjustedEftDate\n    notes\n  }\n}\n\nfragment PayrollFullDetail on Payrolls {\n  ...PayrollWithDates\n  ...PayrollWithClient\n  dateTypeId\n  cycleId\n  dateValue\n  versionReason\n  supersededDate\n  parentPayrollId\n  parentPayroll {\n    id\n    versionNumber\n  }\n  childPayrolls(orderBy: {versionNumber: DESC}) {\n    id\n    versionNumber\n    versionReason\n    createdAt\n  }\n  primaryConsultant {\n    ...UserMinimal\n  }\n  backupConsultant {\n    ...UserMinimal\n  }\n  assignedManager {\n    ...UserMinimal\n  }\n}\n\nfragment NoteWithAuthor on Notes {\n  id\n  content\n  isImportant\n  createdAt\n  entityId\n  entityType\n  author {\n    ...UserMinimal\n  }\n}\n\nfragment PermissionBase on Permissions {\n  id\n  resourceId\n  description\n  legacyPermissionName\n  action\n}\n\nfragment RoleWithPermissions on Roles {\n  id\n  name\n  displayName\n  description\n  isSystemRole\n  priority\n  rolePermissions {\n    permission {\n      ...PermissionBase\n    }\n  }\n}\n\nfragment AuditLogEntry on AuditAuditLog {\n  id\n  userId\n  userEmail\n  userRole\n  action\n  resourceType\n  resourceId\n  eventTime\n  success\n  errorMessage\n  ipAddress\n  userAgent\n  requestId\n  sessionId\n  metadata\n  oldValues\n  newValues\n  createdAt\n}\n\nfragment AuthEvent on AuditAuthEvents {\n  id\n  userId\n  userEmail\n  eventType\n  eventTime\n  success\n  failureReason\n  ipAddress\n  userAgent\n  metadata\n}\n\nfragment DataAccessLog on AuditDataAccessLog {\n  id\n  userId\n  resourceType\n  resourceId\n  accessType\n  accessedAt\n  dataClassification\n  fieldsAccessed\n  rowCount\n  ipAddress\n  metadata\n}\n\nfragment PermissionChange on AuditPermissionChanges {\n  id\n  changedAt\n  changedByUserId\n  targetUserId\n  targetRoleId\n  changeType\n  permissionType\n  oldPermissions\n  newPermissions\n  reason\n  approvedByUserId\n}\n\nfragment PayrollDateInfo on PayrollDates {\n  id\n  originalEftDate\n  adjustedEftDate\n  notes\n  createdAt\n}\n\nfragment PermissionOverrideInfo on PermissionOverrides {\n  id\n  userId\n  role\n  resource\n  operation\n  granted\n  reason\n  conditions\n  expiresAt\n  createdBy\n  createdAt\n}": typeof types.UserMinimalFragmentDoc,
    "mutation LogAuditEvent($input: AuditAuditLogInsertInput!) {\n  insertAuditAuditLog(objects: [$input]) {\n    returning {\n      id\n      eventTime\n    }\n  }\n}\n\nmutation InsertFile($input: FilesInsertInput!) {\n  insertFiles(objects: [$input]) {\n    returning {\n      id\n      filename\n      bucket\n      objectKey\n      size\n      mimetype\n      url\n      clientId\n      payrollId\n      uploadedBy\n      category\n      isPublic\n      metadata\n      fileType\n      createdAt\n    }\n  }\n}\n\nmutation UpdateFileMetadata($id: uuid!, $updates: FilesSetInput!) {\n  updateFilesByPk(pkColumns: {id: $id}, _set: $updates) {\n    id\n    filename\n    bucket\n    objectKey\n    size\n    mimetype\n    url\n    clientId\n    payrollId\n    uploadedBy\n    category\n    isPublic\n    metadata\n    fileType\n    createdAt\n  }\n}\n\nmutation DeleteFile($id: uuid!) {\n  deleteFilesByPk(id: $id) {\n    id\n    filename\n    objectKey\n  }\n}\n\nmutation RefreshData {\n  __typename\n}": typeof types.LogAuditEventDocument,
    "query GetDashboardMetrics($userId: uuid!) {\n  clientsAggregate(where: {active: {_eq: true}}) {\n    aggregate {\n      count\n    }\n  }\n  activePayrollsAggregate: payrollsAggregate(\n    where: {supersededDate: {_isNull: true}, status: {_nin: [\"Completed\", \"Failed\"]}}\n  ) {\n    aggregate {\n      count\n    }\n  }\n  totalEmployeesAggregate: payrollsAggregate(\n    where: {supersededDate: {_isNull: true}}\n  ) {\n    aggregate {\n      sum {\n        employeeCount\n      }\n    }\n  }\n  upcomingPayrolls: payrolls(\n    where: {supersededDate: {_isNull: true}, status: {_nin: [\"Completed\", \"Failed\", \"Cancelled\"]}}\n    orderBy: {updatedAt: DESC}\n    limit: 5\n  ) {\n    ...PayrollMinimal\n    client {\n      ...ClientMinimal\n    }\n  }\n}\n\nquery GetDashboardStatsOptimized($limit: Int = 10) {\n  clientsAggregate {\n    aggregate {\n      count\n    }\n  }\n  totalPayrolls: payrollsAggregate(where: {supersededDate: {_isNull: true}}) {\n    aggregate {\n      count\n    }\n  }\n  activePayrolls: payrollsAggregate(\n    where: {supersededDate: {_isNull: true}, status: {_eq: \"Active\"}}\n  ) {\n    aggregate {\n      count\n    }\n  }\n  upcomingPayrolls: payrolls(\n    where: {supersededDate: {_isNull: true}, status: {_eq: \"Active\"}, payrollDates: {adjustedEftDate: {_gte: \"now()\"}}}\n    orderBy: {updatedAt: DESC}\n    limit: $limit\n  ) {\n    id\n    name\n    status\n    client {\n      id\n      name\n    }\n    nextEftDate: payrollDates(\n      where: {adjustedEftDate: {_gte: \"now()\"}}\n      orderBy: {adjustedEftDate: ASC}\n      limit: 1\n    ) {\n      originalEftDate\n      adjustedEftDate\n      processingDate\n    }\n  }\n}\n\nquery GetClientsDashboardStats {\n  activeClientsCount: clientsAggregate(where: {active: {_eq: true}}) {\n    aggregate {\n      count\n    }\n  }\n  totalPayrollsCount: payrollsAggregate(where: {supersededDate: {_isNull: true}}) {\n    aggregate {\n      count\n    }\n  }\n  totalEmployeesSum: payrollsAggregate(where: {supersededDate: {_isNull: true}}) {\n    aggregate {\n      sum {\n        employeeCount\n      }\n    }\n  }\n  clientsNeedingAttention: clients(\n    where: {active: {_eq: true}, _not: {payrolls: {supersededDate: {_isNull: true}}}}\n  ) {\n    ...ClientMinimal\n  }\n}\n\nquery GetCurrentUser($userId: uuid!) {\n  user: usersByPk(id: $userId) {\n    ...UserProfile\n  }\n}\n\nquery GetUsersForDropdown($role: user_role) {\n  users(\n    where: {isActive: {_eq: true}, role: {_eq: $role}}\n    orderBy: {computedName: ASC}\n  ) {\n    ...UserMinimal\n  }\n}\n\nquery GetSystemHealth {\n  databaseHealth: users(limit: 1) {\n    id\n  }\n  recentActivity: auditAuditLogAggregate(\n    where: {eventTime: {_gte: \"now() - interval '1 hour'\"}}\n  ) {\n    aggregate {\n      count\n    }\n  }\n}\n\nquery GlobalSearch($searchTerm: String!) {\n  clients(\n    where: {_or: [{name: {_ilike: $searchTerm}}, {contactEmail: {_ilike: $searchTerm}}]}\n    limit: 5\n  ) {\n    ...ClientMinimal\n  }\n  users(\n    where: {_or: [{computedName: {_ilike: $searchTerm}}, {firstName: {_ilike: $searchTerm}}, {lastName: {_ilike: $searchTerm}}, {email: {_ilike: $searchTerm}}]}\n    limit: 5\n  ) {\n    ...UserMinimal\n  }\n  payrolls(\n    where: {client: {name: {_ilike: $searchTerm}}, supersededDate: {_isNull: true}}\n    limit: 5\n  ) {\n    ...PayrollMinimal\n    client {\n      ...ClientMinimal\n    }\n  }\n}\n\nquery GetFileById($id: uuid!) {\n  filesByPk(id: $id) {\n    id\n    filename\n    bucket\n    objectKey\n    size\n    mimetype\n    url\n    clientId\n    payrollId\n    uploadedBy\n    category\n    isPublic\n    metadata\n    fileType\n    createdAt\n    client {\n      name\n    }\n    payroll {\n      name\n    }\n    uploadedBy\n  }\n}\n\nquery ListFiles($where: FilesBoolExp, $limit: Int, $offset: Int, $orderBy: [FilesOrderBy!]) {\n  files(where: $where, limit: $limit, offset: $offset, orderBy: $orderBy) {\n    id\n    filename\n    bucket\n    objectKey\n    size\n    mimetype\n    url\n    clientId\n    payrollId\n    uploadedBy\n    category\n    isPublic\n    metadata\n    fileType\n    createdAt\n    client {\n      name\n    }\n    payroll {\n      name\n    }\n    uploadedBy\n  }\n  filesAggregate(where: $where) {\n    aggregate {\n      count\n    }\n  }\n}": typeof types.GetDashboardMetricsDocument,
    "subscription RecentActivity($resourceTypes: [String!]) {\n  auditAuditLog(\n    where: {resourceType: {_in: $resourceTypes}, eventTime: {_gte: \"now() - interval '5 minutes'\"}}\n    orderBy: {eventTime: DESC}\n    limit: 20\n  ) {\n    ...AuditLogEntry\n  }\n}\n\nsubscription AuthenticationEvents($userId: uuid) {\n  auditAuthEvents(\n    where: {userId: {_eq: $userId}, eventTime: {_gte: \"now() - interval '10 minutes'\"}}\n    orderBy: {eventTime: DESC}\n  ) {\n    ...AuthEvent\n  }\n}\n\nsubscription SensitiveDataAccess($resourceTypes: [String!]!) {\n  auditDataAccessLog(\n    where: {resourceType: {_in: $resourceTypes}, accessedAt: {_gte: \"now() - interval '10 minutes'\"}}\n    orderBy: {accessedAt: DESC}\n  ) {\n    ...DataAccessLog\n  }\n}\n\nsubscription PermissionChangeStream {\n  auditPermissionChanges(orderBy: {changedAt: DESC}, limit: 10) {\n    ...PermissionChange\n  }\n}": typeof types.RecentActivityDocument,
};
const documents: Documents = {
    "fragment PayrollProcessingInfo on Payrolls {\n  id\n  name\n  status\n  employeeCount\n  processingTime\n  processingDaysBeforeEft\n  goLiveDate\n}\n\nfragment PayrollVersionInfo on Payrolls {\n  id\n  versionNumber\n  versionReason\n  parentPayrollId\n  supersededDate\n  createdAt\n  createdByUserId\n}\n\nfragment PayrollWithAllRelations on Payrolls {\n  ...PayrollBase\n  client {\n    ...ClientMinimal\n  }\n  primaryConsultant {\n    ...UserMinimal\n  }\n  backupConsultant {\n    ...UserMinimal\n  }\n  assignedManager {\n    ...UserMinimal\n  }\n  cycleId\n  dateTypeId\n  dateValue\n  payrollCycle {\n    id\n    name\n    description\n  }\n  payrollDateType {\n    id\n    name\n    description\n  }\n  createdByUserId\n}\n\nfragment PayrollForAssignment on Payrolls {\n  id\n  name\n  status\n  clientId\n  employeeCount\n  processingTime\n  processingDaysBeforeEft\n  client {\n    ...ClientMinimal\n  }\n  primaryConsultantUserId\n  backupConsultantUserId\n  managerUserId\n  requiredSkills {\n    skillName\n    requiredLevel\n  }\n  payrollDates(\n    where: {adjustedEftDate: {_gte: \"today()\"}}\n    orderBy: {adjustedEftDate: ASC}\n    limit: 3\n  ) {\n    id\n    originalEftDate\n    adjustedEftDate\n    processingDate\n  }\n}\n\nfragment PayrollBasic on Payrolls {\n  id\n  name\n  status\n  employeeCount\n  client {\n    ...ClientMinimal\n  }\n}\n\nfragment PayrollForAudit on Payrolls {\n  id\n  name\n  status\n  versionNumber\n  createdAt\n  updatedAt\n  createdByUserId\n}\n\nfragment PayrollTableRow on Payrolls {\n  ...PayrollListItem\n  goLiveDate\n  processingTime\n  versionNumber\n  cycleId\n  payrollCycle {\n    id\n    name\n    description\n  }\n  nextPayrollDate: payrollDates(\n    where: {adjustedEftDate: {_gte: \"today()\"}}\n    orderBy: {adjustedEftDate: ASC}\n    limit: 1\n  ) {\n    originalEftDate\n    adjustedEftDate\n    processingDate\n  }\n}\n\nfragment PayrollDashboardCard on Payrolls {\n  ...PayrollMinimal\n  client {\n    ...ClientMinimal\n  }\n  primaryConsultant {\n    ...UserMinimal\n  }\n  goLiveDate\n}\n\nfragment PayrollDate on PayrollDates {\n  id\n  payrollId\n  originalEftDate\n  adjustedEftDate\n  processingDate\n  notes\n  status\n  completedAt\n  completedBy\n  createdAt\n  payroll {\n    id\n    name\n  }\n}\n\nfragment PayrollDetailed on Payrolls {\n  ...PayrollFullDetail\n  requiredSkills {\n    skillName\n    requiredLevel\n  }\n}\n\nfragment PayrollSummary on Payrolls {\n  ...PayrollBase\n  client {\n    ...ClientMinimal\n  }\n  primaryConsultant {\n    ...UserMinimal\n  }\n}\n\nfragment PayrollWithCycle on Payrolls {\n  ...PayrollBase\n  cycleId\n  payrollCycle {\n    id\n    name\n  }\n}\n\nfragment PayrollWorkload on Payrolls {\n  id\n  name\n  status\n  employeeCount\n  processingTime\n  processingDaysBeforeEft\n  primaryConsultantUserId\n  backupConsultantUserId\n  managerUserId\n  client {\n    ...ClientMinimal\n  }\n}": types.PayrollProcessingInfoFragmentDoc,
    "mutation CreatePayroll($object: PayrollsInsertInput!) {\n  insertPayrollsOne(object: $object) {\n    ...PayrollDetailed\n    client {\n      id\n      name\n    }\n    primaryConsultant {\n      id\n      firstName\n      lastName\n      computedName\n    }\n  }\n}\n\nmutation UpdatePayroll($id: uuid!, $set: PayrollsSetInput!) {\n  updatePayrollsByPk(pkColumns: {id: $id}, _set: $set) {\n    ...PayrollDetailed\n    client {\n      id\n      name\n    }\n    primaryConsultant {\n      id\n      firstName\n      lastName\n      computedName\n    }\n    backupConsultant {\n      id\n      firstName\n      lastName\n      computedName\n    }\n  }\n}\n\nmutation DeletePayroll($id: uuid!) {\n  updatePayrollsByPk(pkColumns: {id: $id}, _set: {supersededDate: \"now()\"}) {\n    ...PayrollBasic\n  }\n}\n\nmutation ReactivatePayroll($id: uuid!) {\n  updatePayrollsByPk(pkColumns: {id: $id}, _set: {supersededDate: null}) {\n    ...PayrollBasic\n  }\n}\n\nmutation UpdatePayrollStatus($id: uuid!, $status: payroll_status!) {\n  updatePayrollsByPk(\n    pkColumns: {id: $id}\n    _set: {status: $status, updatedAt: \"now()\"}\n  ) {\n    ...PayrollBasic\n    client {\n      id\n      name\n    }\n  }\n}\n\nmutation ActivatePayroll($id: uuid!) {\n  updatePayrollsByPk(\n    pkColumns: {id: $id}\n    _set: {status: \"Active\", updatedAt: \"now()\"}\n  ) {\n    ...PayrollBasic\n  }\n}\n\nmutation DeactivatePayroll($id: uuid!) {\n  updatePayrollsByPk(\n    pkColumns: {id: $id}\n    _set: {status: \"Inactive\", updatedAt: \"now()\"}\n  ) {\n    ...PayrollBasic\n  }\n}\n\nmutation AssignPrimaryConsultant($id: uuid!, $userId: uuid!) {\n  updatePayrollsByPk(\n    pkColumns: {id: $id}\n    _set: {primaryConsultantUserId: $userId, updatedAt: \"now()\"}\n  ) {\n    ...PayrollBasic\n    primaryConsultant {\n      id\n      firstName\n      lastName\n      computedName\n      email\n    }\n  }\n}\n\nmutation AssignBackupConsultant($id: uuid!, $userId: uuid!) {\n  updatePayrollsByPk(\n    pkColumns: {id: $id}\n    _set: {backupConsultantUserId: $userId, updatedAt: \"now()\"}\n  ) {\n    ...PayrollBasic\n    backupConsultant {\n      id\n      firstName\n      lastName\n      computedName\n      email\n    }\n  }\n}\n\nmutation AssignManager($id: uuid!, $userId: uuid!) {\n  updatePayrollsByPk(\n    pkColumns: {id: $id}\n    _set: {managerUserId: $userId, updatedAt: \"now()\"}\n  ) {\n    ...PayrollBasic\n    assignedManager {\n      id\n      firstName\n      lastName\n      computedName\n      email\n    }\n  }\n}\n\nmutation UpdatePayrollAssignments($id: uuid!, $primaryConsultantUserId: uuid, $backupConsultantUserId: uuid, $managerUserId: uuid) {\n  updatePayrollsByPk(\n    pkColumns: {id: $id}\n    _set: {primaryConsultantUserId: $primaryConsultantUserId, backupConsultantUserId: $backupConsultantUserId, managerUserId: $managerUserId, updatedAt: \"now()\"}\n  ) {\n    ...PayrollBasic\n    primaryConsultant {\n      id\n      firstName\n      lastName\n      computedName\n      email\n    }\n    backupConsultant {\n      id\n      firstName\n      lastName\n      computedName\n      email\n    }\n    assignedManager {\n      id\n      firstName\n      lastName\n      computedName\n      email\n    }\n  }\n}\n\nmutation CreatePayrollVersion($parentPayrollId: uuid!, $versionReason: String!, $object: PayrollsInsertInput!) {\n  updatePayrollsByPk(\n    pkColumns: {id: $parentPayrollId}\n    _set: {supersededDate: \"now()\"}\n  ) {\n    id\n    supersededDate\n  }\n  insertPayrollsOne(object: $object) {\n    ...PayrollWithAllRelations\n  }\n}\n\nmutation SupersedePayroll($id: uuid!) {\n  updatePayrollsByPk(pkColumns: {id: $id}, _set: {supersededDate: \"now()\"}) {\n    ...PayrollBasic\n  }\n}\n\nmutation BulkUpdatePayrolls($where: PayrollsBoolExp!, $set: PayrollsSetInput!) {\n  updatePayrolls(where: $where, _set: $set) {\n    returning {\n      ...PayrollBasic\n    }\n    affectedRows\n  }\n}\n\nmutation BulkAssignConsultant($payrollIds: [uuid!]!, $primaryConsultantUserId: uuid!) {\n  updatePayrolls(\n    where: {id: {_in: $payrollIds}}\n    _set: {primaryConsultantUserId: $primaryConsultantUserId, updatedAt: \"now()\"}\n  ) {\n    returning {\n      ...PayrollBasic\n      primaryConsultant {\n        id\n        firstName\n        lastName\n        computedName\n      }\n    }\n    affectedRows\n  }\n}\n\nmutation BulkAssignManager($payrollIds: [uuid!]!, $managerUserId: uuid!) {\n  updatePayrolls(\n    where: {id: {_in: $payrollIds}}\n    _set: {managerUserId: $managerUserId, updatedAt: \"now()\"}\n  ) {\n    returning {\n      ...PayrollBasic\n      assignedManager {\n        id\n        firstName\n        lastName\n        computedName\n      }\n    }\n    affectedRows\n  }\n}\n\nmutation BulkUpdatePayrollStatus($payrollIds: [uuid!]!, $status: payroll_status!) {\n  updatePayrolls(\n    where: {id: {_in: $payrollIds}}\n    _set: {status: $status, updatedAt: \"now()\"}\n  ) {\n    returning {\n      ...PayrollBasic\n    }\n    affectedRows\n  }\n}\n\nmutation UpdatePayrollConfiguration($id: uuid!, $payrollSystem: String, $processingTime: Int, $processingDaysBeforeEft: Int, $cycleId: uuid, $dateTypeId: uuid) {\n  updatePayrollsByPk(\n    pkColumns: {id: $id}\n    _set: {payrollSystem: $payrollSystem, processingTime: $processingTime, processingDaysBeforeEft: $processingDaysBeforeEft, cycleId: $cycleId, dateTypeId: $dateTypeId, updatedAt: \"now()\"}\n  ) {\n    ...PayrollWithCycle\n  }\n}\n\nmutation UpdatePayrollDetails($id: uuid!, $name: String, $employeeCount: Int, $goLiveDate: date) {\n  updatePayrollsByPk(\n    pkColumns: {id: $id}\n    _set: {name: $name, employeeCount: $employeeCount, goLiveDate: $goLiveDate, updatedAt: \"now()\"}\n  ) {\n    ...PayrollBasic\n  }\n}\n\nmutation CreatePayrollDate($object: PayrollDatesInsertInput!) {\n  insertPayrollDatesOne(object: $object) {\n    id\n    originalEftDate\n    adjustedEftDate\n    processingDate\n    notes\n    payrollId\n    createdAt\n    updatedAt\n  }\n}\n\nmutation UpdatePayrollDate($id: uuid!, $set: PayrollDatesSetInput!) {\n  updatePayrollDatesByPk(pkColumns: {id: $id}, _set: $set) {\n    id\n    originalEftDate\n    adjustedEftDate\n    processingDate\n    notes\n    payrollId\n    updatedAt\n  }\n}\n\nmutation DeletePayrollDate($id: uuid!) {\n  deletePayrollDatesByPk(id: $id) {\n    id\n    originalEftDate\n    adjustedEftDate\n    payrollId\n  }\n}\n\nmutation UpdatePayrollDateNotes($id: uuid!, $notes: String) {\n  updatePayrollDatesByPk(\n    pkColumns: {id: $id}\n    _set: {notes: $notes, updatedAt: \"now()\"}\n  ) {\n    id\n    originalEftDate\n    adjustedEftDate\n    notes\n    payrollId\n  }\n}\n\nmutation CompletePayrollDate($id: uuid!, $completedBy: uuid!) {\n  updatePayrollDatesByPk(\n    pkColumns: {id: $id}\n    _set: {status: \"completed\", completedAt: \"now()\", completedBy: $completedBy}\n  ) {\n    id\n    status\n    completedAt\n    completedBy\n    payrollId\n    originalEftDate\n    adjustedEftDate\n    processingDate\n  }\n}\n\nmutation UpdatePayrollDateStatus($id: uuid!, $status: String!, $updatedBy: uuid) {\n  updatePayrollDatesByPk(\n    pkColumns: {id: $id}\n    _set: {status: $status, updatedAt: \"now()\", completedBy: $updatedBy}\n  ) {\n    id\n    status\n    completedAt\n    completedBy\n    payrollId\n  }\n}\n\nmutation BulkCreatePayrollDates($objects: [PayrollDatesInsertInput!]!) {\n  insertPayrollDates(objects: $objects) {\n    returning {\n      id\n      originalEftDate\n      adjustedEftDate\n      processingDate\n      payrollId\n    }\n    affectedRows\n  }\n}\n\nmutation BulkDeletePayrollDates($payrollId: uuid!) {\n  deletePayrollDates(where: {payrollId: {_eq: $payrollId}}) {\n    affectedRows\n  }\n}\n\nmutation CreatePayrollCycle($object: PayrollCyclesInsertInput!) {\n  insertPayrollCyclesOne(object: $object) {\n    id\n    name\n    description\n    createdAt\n  }\n}\n\nmutation UpdatePayrollCycle($id: uuid!, $set: PayrollCyclesSetInput!) {\n  updatePayrollCyclesByPk(pkColumns: {id: $id}, _set: $set) {\n    id\n    name\n    description\n    updatedAt\n  }\n}\n\nmutation DeletePayrollCycle($id: uuid!) {\n  deletePayrollCyclesByPk(id: $id) {\n    id\n    name\n  }\n}\n\nmutation CreatePayrollDateType($object: PayrollDateTypesInsertInput!) {\n  insertPayrollDateTypesOne(object: $object) {\n    id\n    name\n    description\n    createdAt\n  }\n}\n\nmutation UpdatePayrollDateType($id: uuid!, $set: PayrollDateTypesSetInput!) {\n  updatePayrollDateTypesByPk(pkColumns: {id: $id}, _set: $set) {\n    id\n    name\n    description\n    updatedAt\n  }\n}\n\nmutation DeletePayrollDateType($id: uuid!) {\n  deletePayrollDateTypesByPk(id: $id) {\n    id\n    name\n  }\n}\n\nmutation ProcessPayrollBatch($payrollIds: [uuid!]!, $processedBy: uuid!) {\n  updatePayrolls(\n    where: {id: {_in: $payrollIds}}\n    _set: {status: \"Processing\", updatedAt: \"now()\"}\n  ) {\n    returning {\n      ...PayrollBasic\n      client {\n        id\n        name\n      }\n    }\n    affectedRows\n  }\n}\n\nmutation ApprovePayrollBatch($payrollIds: [uuid!]!, $approvedBy: uuid!) {\n  updatePayrolls(\n    where: {id: {_in: $payrollIds}, status: {_eq: \"Processing\"}}\n    _set: {status: \"Approved\", updatedAt: \"now()\"}\n  ) {\n    returning {\n      ...PayrollBasic\n      client {\n        id\n        name\n      }\n    }\n    affectedRows\n  }\n}\n\nquery GeneratePayrollsByIds($payrollIds: [uuid!]!, $reportType: String!) {\n  payrolls(where: {id: {_in: $payrollIds}}, orderBy: {name: ASC}) {\n    ...PayrollWithAllRelations\n    payrollDates(orderBy: {originalEftDate: ASC}) {\n      id\n      originalEftDate\n      adjustedEftDate\n      processingDate\n      notes\n    }\n  }\n}": types.CreatePayrollDocument,
    "query GetPayrolls($limit: Int = 50, $offset: Int = 0, $where: PayrollsBoolExp) {\n  payrolls(\n    limit: $limit\n    offset: $offset\n    where: $where\n    orderBy: {createdAt: DESC}\n  ) {\n    ...PayrollListItem\n  }\n  payrollsAggregate(where: $where) {\n    aggregate {\n      count\n    }\n  }\n}\n\nquery GetPayrollById($id: uuid!) {\n  payrollsByPk(id: $id) {\n    ...PayrollWithAllRelations\n  }\n}\n\nquery GetPayrollBasic($id: uuid!) {\n  payrollsByPk(id: $id) {\n    ...PayrollBasic\n  }\n}\n\nquery GetPayrollForEdit($id: uuid!) {\n  payrollsByPk(id: $id) {\n    ...PayrollDetailed\n    client {\n      id\n      name\n    }\n    payrollCycle {\n      id\n      name\n      description\n    }\n    payrollDateType {\n      id\n      name\n    }\n    primaryConsultantUserId\n    backupConsultantUserId\n    managerUserId\n    primaryConsultant {\n      id\n      firstName\n      lastName\n      computedName\n      email\n      role\n    }\n    backupConsultant {\n      id\n      firstName\n      lastName\n      computedName\n      email\n      role\n    }\n    assignedManager {\n      id\n      firstName\n      lastName\n      computedName\n      email\n      role\n    }\n  }\n}\n\nquery GetPayrollsSimple {\n  payrolls(where: {supersededDate: {_isNull: true}}, orderBy: {name: ASC}) {\n    ...PayrollMinimal\n  }\n}\n\nquery GetActivePayrolls {\n  payrolls(\n    where: {supersededDate: {_isNull: true}, status: {_neq: \"Inactive\"}}\n    orderBy: {name: ASC}\n  ) {\n    ...PayrollSummary\n    client {\n      id\n      name\n    }\n  }\n}\n\nquery GetPayrollsByClient($clientId: uuid!) {\n  payrolls(\n    where: {clientId: {_eq: $clientId}, supersededDate: {_isNull: true}}\n    orderBy: {createdAt: DESC}\n  ) {\n    ...PayrollListItem\n  }\n}\n\nquery GetPayrollsByUser($userId: uuid!) {\n  primaryPayrolls: payrolls(\n    where: {primaryConsultantUserId: {_eq: $userId}, supersededDate: {_isNull: true}}\n    orderBy: {name: ASC}\n  ) {\n    ...PayrollWorkload\n  }\n  backupPayrolls: payrolls(\n    where: {backupConsultantUserId: {_eq: $userId}, supersededDate: {_isNull: true}}\n    orderBy: {name: ASC}\n  ) {\n    ...PayrollWorkload\n  }\n  managedPayrolls: payrolls(\n    where: {managerUserId: {_eq: $userId}, supersededDate: {_isNull: true}}\n    orderBy: {name: ASC}\n  ) {\n    ...PayrollWorkload\n  }\n}\n\nquery GetPayrollDashboardStats {\n  totalPayrolls: payrollsAggregate(where: {supersededDate: {_isNull: true}}) {\n    aggregate {\n      count\n    }\n  }\n  activePayrolls: payrollsAggregate(\n    where: {supersededDate: {_isNull: true}, status: {_eq: \"Active\"}}\n  ) {\n    aggregate {\n      count\n    }\n  }\n  totalEmployees: payrollsAggregate(where: {supersededDate: {_isNull: true}}) {\n    aggregate {\n      sum {\n        employeeCount\n      }\n    }\n  }\n  pendingPayrolls: payrollsAggregate(\n    where: {supersededDate: {_isNull: true}, status: {_eq: \"Implementation\"}}\n  ) {\n    aggregate {\n      count\n    }\n  }\n  recentPayrolls: payrolls(\n    where: {supersededDate: {_isNull: true}}\n    orderBy: {updatedAt: DESC}\n    limit: 5\n  ) {\n    ...PayrollDashboardCard\n  }\n}\n\nquery GetPayrollDashboardComplete($limit: Int = 20, $offset: Int = 0, $where: PayrollsBoolExp = {}, $orderBy: [PayrollsOrderBy!] = [{updatedAt: DESC}]) {\n  payrolls(\n    limit: $limit\n    offset: $offset\n    where: {_and: [{supersededDate: {_isNull: true}}, $where]}\n    orderBy: $orderBy\n  ) {\n    id\n    name\n    status\n    employeeCount\n    processingTime\n    dateValue\n    processingDaysBeforeEft\n    createdAt\n    updatedAt\n    client {\n      id\n      name\n      active\n      contactPerson\n    }\n    primaryConsultant {\n      id\n      firstName\n      lastName\n      computedName\n      email\n      role\n      isActive\n    }\n    backupConsultant {\n      id\n      firstName\n      lastName\n      computedName\n      email\n      role\n      isActive\n    }\n    assignedManager {\n      id\n      firstName\n      lastName\n      computedName\n      email\n      role\n      isActive\n    }\n    payrollCycle {\n      id\n      name\n      description\n    }\n    payrollDateType {\n      id\n      name\n      description\n    }\n    nextPayrollDate: payrollDates(\n      where: {adjustedEftDate: {_gte: \"now()\"}}\n      orderBy: {adjustedEftDate: ASC}\n      limit: 1\n    ) {\n      id\n      originalEftDate\n      adjustedEftDate\n      processingDate\n      notes\n    }\n    recentDates: payrollDates(orderBy: {originalEftDate: DESC}, limit: 3) {\n      id\n      originalEftDate\n      adjustedEftDate\n      processingDate\n    }\n  }\n  payrollsAggregate(where: {_and: [{supersededDate: {_isNull: true}}, $where]}) {\n    aggregate {\n      count\n    }\n  }\n  activePayrolls: payrollsAggregate(\n    where: {supersededDate: {_isNull: true}, status: {_eq: \"Active\"}}\n  ) {\n    aggregate {\n      count\n    }\n  }\n  totalEmployees: payrollsAggregate(where: {supersededDate: {_isNull: true}}) {\n    aggregate {\n      sum {\n        employeeCount\n      }\n    }\n  }\n  pendingPayrolls: payrollsAggregate(\n    where: {supersededDate: {_isNull: true}, status: {_eq: \"Implementation\"}}\n  ) {\n    aggregate {\n      count\n    }\n  }\n  draftPayrolls: payrollsAggregate(\n    where: {supersededDate: {_isNull: true}, status: {_eq: \"Draft\"}}\n  ) {\n    aggregate {\n      count\n    }\n  }\n  inactivePayrolls: payrollsAggregate(\n    where: {supersededDate: {_isNull: true}, status: {_eq: \"Inactive\"}}\n  ) {\n    aggregate {\n      count\n    }\n  }\n}\n\nquery GetUpcomingPayrolls($limit: Int = 10) {\n  payrolls(\n    where: {supersededDate: {_isNull: true}, status: {_eq: \"Active\"}, payrollDates: {originalEftDate: {_gte: \"now()\"}}}\n    orderBy: {updatedAt: DESC}\n    limit: $limit\n  ) {\n    ...PayrollDashboardCard\n    nextPayDate: payrollDates(\n      where: {originalEftDate: {_gte: \"now()\"}}\n      orderBy: {originalEftDate: ASC}\n      limit: 1\n    ) {\n      originalEftDate\n      adjustedEftDate\n      processingDate\n    }\n  }\n}\n\nquery SearchPayrolls($searchTerm: String!, $limit: Int = 50) {\n  payrolls(\n    where: {_and: [{supersededDate: {_isNull: true}}, {_or: [{name: {_ilike: $searchTerm}}, {client: {name: {_ilike: $searchTerm}}}, {primaryConsultant: {computedName: {_ilike: $searchTerm}}}]}]}\n    orderBy: {name: ASC}\n    limit: $limit\n  ) {\n    ...PayrollTableRow\n  }\n}\n\nquery GetPayrollsByStatus($status: payroll_status!) {\n  payrolls(\n    where: {supersededDate: {_isNull: true}, status: {_eq: $status}}\n    orderBy: {updatedAt: DESC}\n  ) {\n    ...PayrollListItem\n  }\n}\n\nquery GetPayrollsByProcessingTime($processingTime: Int!) {\n  payrolls(\n    where: {supersededDate: {_isNull: true}, processingTime: {_eq: $processingTime}}\n    orderBy: {name: ASC}\n  ) {\n    ...PayrollProcessingInfo\n  }\n}\n\nquery GetPayrollVersions($payrollId: uuid!) {\n  payrolls(\n    where: {_or: [{id: {_eq: $payrollId}}, {parentPayrollId: {_eq: $payrollId}}]}\n    orderBy: {versionNumber: DESC}\n  ) {\n    ...PayrollVersionInfo\n  }\n}\n\nquery GetPayrollHistory($payrollId: uuid!) {\n  payrolls(\n    where: {_or: [{id: {_eq: $payrollId}}, {parentPayrollId: {_eq: $payrollId}}]}\n    orderBy: {createdAt: DESC}\n  ) {\n    ...PayrollVersionInfo\n    status\n    supersededDate\n  }\n}\n\nquery GetLatestPayrollVersion($payrollId: uuid!) {\n  payrolls(\n    where: {_or: [{id: {_eq: $payrollId}}, {parentPayrollId: {_eq: $payrollId}}], supersededDate: {_isNull: true}}\n    limit: 1\n  ) {\n    ...PayrollWithAllRelations\n  }\n}\n\nquery GetPayrollCycles {\n  payrollCycles(orderBy: {name: ASC}) {\n    id\n    name\n    description\n    createdAt\n    updatedAt\n  }\n}\n\nquery GetPayrollDateTypes {\n  payrollDateTypes(orderBy: {name: ASC}) {\n    id\n    name\n    description\n    createdAt\n    updatedAt\n  }\n}\n\nquery GetPayrollDetailComplete($id: uuid!) {\n  payrollsByPk(id: $id) {\n    ...PayrollDetailed\n    client {\n      id\n      name\n    }\n    payrollCycle {\n      id\n      name\n      description\n    }\n    payrollDateType {\n      id\n      name\n    }\n    primaryConsultant {\n      id\n      firstName\n      lastName\n      computedName\n      email\n      role\n    }\n    backupConsultant {\n      id\n      firstName\n      lastName\n      computedName\n      email\n      role\n    }\n    assignedManager {\n      id\n      firstName\n      lastName\n      computedName\n      email\n      role\n    }\n    detailDates: payrollDates(orderBy: {originalEftDate: ASC}, limit: 12) {\n      id\n      originalEftDate\n      adjustedEftDate\n      processingDate\n      createdAt\n    }\n  }\n  users(where: {isActive: {_eq: true}}, orderBy: {computedName: ASC}) {\n    id\n    firstName\n    lastName\n    computedName\n    email\n    role\n    isStaff\n    isActive\n  }\n  payrollCycles(orderBy: {name: ASC}) {\n    id\n    name\n    description\n  }\n  payrollDateTypes(orderBy: {name: ASC}) {\n    id\n    name\n    description\n  }\n}\n\nquery GetPayrollDates($payrollId: uuid!) {\n  payrollDates(\n    where: {payrollId: {_eq: $payrollId}}\n    orderBy: {originalEftDate: ASC}\n  ) {\n    id\n    originalEftDate\n    adjustedEftDate\n    processingDate\n    notes\n    createdAt\n    updatedAt\n    payrollId\n  }\n}\n\nquery GetUpcomingPayrollDates($limit: Int = 20) {\n  payrollDates(\n    where: {originalEftDate: {_gte: \"now()\"}}\n    orderBy: {originalEftDate: ASC}\n    limit: $limit\n  ) {\n    id\n    originalEftDate\n    adjustedEftDate\n    processingDate\n    notes\n    payrollAssignments {\n      payrollDate {\n        payroll {\n          id\n          name\n          status\n          client {\n            id\n            name\n          }\n        }\n      }\n    }\n  }\n}\n\nquery GetPayrollDatesInRange($startDate: date!, $endDate: date!, $payrollId: uuid) {\n  payrollDates(\n    where: {originalEftDate: {_gte: $startDate, _lte: $endDate}, payrollId: {_eq: $payrollId}}\n    orderBy: {originalEftDate: ASC}\n  ) {\n    id\n    originalEftDate\n    adjustedEftDate\n    processingDate\n    notes\n    payrollAssignments {\n      payrollDate {\n        payroll {\n          id\n          name\n          client {\n            name\n          }\n        }\n      }\n    }\n  }\n}\n\nquery GetUnassignedPayrolls {\n  payrolls(\n    where: {supersededDate: {_isNull: true}, _or: [{primaryConsultantUserId: {_isNull: true}}, {backupConsultantUserId: {_isNull: true}}, {managerUserId: {_isNull: true}}]}\n    orderBy: {createdAt: DESC}\n  ) {\n    ...PayrollForAssignment\n  }\n}\n\nquery GetPayrollsNeedingAttention {\n  payrolls(\n    where: {supersededDate: {_isNull: true}, status: {_in: [\"pending_approval\", \"processing\", \"draft\"]}}\n    orderBy: {updatedAt: ASC}\n  ) {\n    ...PayrollListItem\n    primaryConsultant {\n      id\n      firstName\n      lastName\n      computedName\n    }\n    assignedManager {\n      id\n      firstName\n      lastName\n      computedName\n    }\n  }\n}\n\nquery GetPayrollsForBulkUpdate($ids: [uuid!]!) {\n  payrolls(where: {id: {_in: $ids}}) {\n    ...PayrollBasic\n  }\n}\n\nquery GetPayrollsForBulkAssignment($where: PayrollsBoolExp!) {\n  payrolls(where: $where) {\n    ...PayrollForAssignment\n  }\n}\n\nquery GetPayrollsForAudit($limit: Int = 100, $offset: Int = 0, $where: PayrollsBoolExp = {}) {\n  payrolls(\n    limit: $limit\n    offset: $offset\n    where: $where\n    orderBy: {updatedAt: DESC}\n  ) {\n    ...PayrollForAudit\n  }\n}\n\nquery GetPayrollActivity($payrollId: uuid!, $limit: Int = 50) {\n  payrolls(\n    where: {_or: [{id: {_eq: $payrollId}}, {parentPayrollId: {_eq: $payrollId}}]}\n    orderBy: {updatedAt: DESC}\n    limit: $limit\n  ) {\n    ...PayrollVersionInfo\n    status\n    supersededDate\n  }\n}\n\nquery GetPayrollsPaginated($limit: Int = 20, $offset: Int = 0, $where: PayrollsBoolExp = {}, $orderBy: [PayrollsOrderBy!] = [{createdAt: DESC}]) {\n  payrolls(\n    limit: $limit\n    offset: $offset\n    where: {_and: [{supersededDate: {_isNull: true}}, $where]}\n    orderBy: $orderBy\n  ) {\n    ...PayrollTableRow\n  }\n  payrollsAggregate(where: {_and: [{supersededDate: {_isNull: true}}, $where]}) {\n    aggregate {\n      count\n    }\n  }\n}\n\nquery SearchPayrollsPaginated($searchTerm: String!, $limit: Int = 20, $offset: Int = 0) {\n  payrolls(\n    where: {_and: [{supersededDate: {_isNull: true}}, {_or: [{name: {_ilike: $searchTerm}}, {client: {name: {_ilike: $searchTerm}}}, {primaryConsultant: {computedName: {_ilike: $searchTerm}}}, {backupConsultant: {computedName: {_ilike: $searchTerm}}}]}]}\n    orderBy: {name: ASC}\n    limit: $limit\n    offset: $offset\n  ) {\n    ...PayrollTableRow\n  }\n  searchAggregate: payrollsAggregate(\n    where: {_and: [{supersededDate: {_isNull: true}}, {_or: [{name: {_ilike: $searchTerm}}, {client: {name: {_ilike: $searchTerm}}}, {primaryConsultant: {computedName: {_ilike: $searchTerm}}}, {backupConsultant: {computedName: {_ilike: $searchTerm}}}]}]}\n  ) {\n    aggregate {\n      count\n    }\n  }\n}\n\nquery GetPayrollsQuickList {\n  payrolls(where: {supersededDate: {_isNull: true}}, orderBy: {name: ASC}) {\n    ...PayrollMinimal\n  }\n}\n\nquery GetActivePayrollsQuickList {\n  payrolls(\n    where: {supersededDate: {_isNull: true}, status: {_eq: \"Active\"}}\n    orderBy: {name: ASC}\n  ) {\n    ...PayrollMinimal\n  }\n}\n\nquery GetClientPayrollsQuickList($clientId: uuid!) {\n  payrolls(\n    where: {clientId: {_eq: $clientId}, supersededDate: {_isNull: true}}\n    orderBy: {name: ASC}\n  ) {\n    ...PayrollMinimal\n  }\n}\n\nquery GeneratePayrollDates($payrollId: uuid!, $startDate: date!, $endDate: date!, $maxDates: Int = 100) {\n  payrollDates(\n    where: {payrollId: {_eq: $payrollId}, originalEftDate: {_gte: $startDate, _lte: $endDate}}\n    limit: $maxDates\n    orderBy: {originalEftDate: ASC}\n  ) {\n    id\n    originalEftDate\n    adjustedEftDate\n    processingDate\n    notes\n    payrollId\n    createdAt\n    updatedAt\n  }\n}\n\nquery GeneratePayrollDatesQuery($payrollId: uuid!, $startDate: date!, $endDate: date!, $maxDates: Int = 100) {\n  payrollDates(\n    where: {payrollId: {_eq: $payrollId}, originalEftDate: {_gte: $startDate, _lte: $endDate}}\n    limit: $maxDates\n    orderBy: {originalEftDate: ASC}\n  ) {\n    id\n    originalEftDate\n    adjustedEftDate\n    processingDate\n    notes\n    payrollId\n    createdAt\n    updatedAt\n  }\n}\n\nquery GetUserUpcomingPayrolls($userId: uuid!, $limit: Int = 10) {\n  payrolls(\n    where: {supersededDate: {_isNull: true}, status: {_eq: \"Active\"}, _or: [{primaryConsultantUserId: {_eq: $userId}}, {backupConsultantUserId: {_eq: $userId}}, {managerUserId: {_eq: $userId}}]}\n    orderBy: {updatedAt: DESC}\n    limit: $limit\n  ) {\n    ...PayrollDashboardCard\n    nextPayDate: payrollDates(\n      where: {_or: [{adjustedEftDate: {_gte: \"now()\"}}, {originalEftDate: {_gte: \"now()\"}}]}\n      orderBy: [{adjustedEftDate: ASC}, {originalEftDate: ASC}]\n      limit: 1\n    ) {\n      originalEftDate\n      adjustedEftDate\n      processingDate\n    }\n    backupConsultant {\n      id\n      firstName\n      lastName\n      computedName\n      email\n    }\n    assignedManager {\n      id\n      firstName\n      lastName\n      computedName\n      email\n    }\n  }\n}\n\nquery GetPayrollsByMonth($startDate: date!, $endDate: date!) {\n  payrolls(\n    where: {supersededDate: {_isNull: true}, payrollDates: {originalEftDate: {_gte: $startDate, _lt: $endDate}}}\n    orderBy: {createdAt: DESC}\n  ) {\n    ...PayrollWithDates\n    client {\n      id\n      name\n    }\n    primaryConsultant {\n      id\n      firstName\n      lastName\n      computedName\n      email\n      role\n      isActive\n    }\n    backupConsultant {\n      id\n      firstName\n      lastName\n      computedName\n      email\n      role\n      isActive\n    }\n    assignedManager {\n      id\n      firstName\n      lastName\n      computedName\n      email\n      role\n      isActive\n    }\n  }\n}\n\nquery GetPayrollFamilyDates($payrollId: uuid!) {\n  payrolls(\n    where: {_or: [{id: {_eq: $payrollId}}, {parentPayrollId: {_eq: $payrollId}}]}\n    orderBy: {versionNumber: DESC}\n  ) {\n    id\n    name\n    versionNumber\n    status\n    supersededDate\n    payrollDates(orderBy: {originalEftDate: ASC}) {\n      ...PayrollDate\n    }\n  }\n}\n\nquery GetPayrollsMissingDates {\n  payrolls(\n    where: {supersededDate: {_isNull: true}, status: {_eq: \"Active\"}, _not: {payrollDates: {}}}\n    orderBy: {name: ASC}\n  ) {\n    ...PayrollListItem\n    payrollCycle {\n      id\n      name\n      description\n    }\n    payrollDateType {\n      id\n      name\n      description\n    }\n  }\n}\n\nquery GetPayrollsTableEnhanced($limit: Int = 100, $offset: Int = 0, $where: PayrollsBoolExp = {}, $orderBy: [PayrollsOrderBy!] = [{name: ASC}]) {\n  payrolls(\n    limit: $limit\n    offset: $offset\n    where: {_and: [{supersededDate: {_isNull: true}}, $where]}\n    orderBy: $orderBy\n  ) {\n    id\n    name\n    status\n    employeeCount\n    dateValue\n    processingDaysBeforeEft\n    createdAt\n    updatedAt\n    client {\n      id\n      name\n      active\n    }\n    payrollCycle {\n      id\n      name\n      description\n    }\n    payrollDateType {\n      id\n      name\n      description\n    }\n    primaryConsultant {\n      id\n      firstName\n      lastName\n      computedName\n      email\n      role\n    }\n    backupConsultant {\n      id\n      firstName\n      lastName\n      computedName\n      email\n      role\n    }\n    assignedManager {\n      id\n      firstName\n      lastName\n      computedName\n      email\n      role\n    }\n    nextEftDate: payrollDates(\n      where: {adjustedEftDate: {_gte: \"now()\"}}\n      orderBy: {adjustedEftDate: ASC}\n      limit: 1\n    ) {\n      id\n      originalEftDate\n      adjustedEftDate\n      processingDate\n      notes\n    }\n  }\n  payrollsAggregate(where: {_and: [{supersededDate: {_isNull: true}}, $where]}) {\n    aggregate {\n      count\n    }\n  }\n}\n\nquery GeneratePayrollReport($startDate: date!, $endDate: date!) {\n  payrolls(\n    where: {supersededDate: {_isNull: true}, payrollDates: {originalEftDate: {_gte: $startDate, _lte: $endDate}}}\n    orderBy: {name: ASC}\n  ) {\n    ...PayrollForAudit\n    client {\n      id\n      name\n    }\n    primaryConsultant {\n      id\n      firstName\n      lastName\n      computedName\n    }\n    backupConsultant {\n      id\n      firstName\n      lastName\n      computedName\n    }\n    assignedManager {\n      id\n      firstName\n      lastName\n      computedName\n    }\n    payrollDates(\n      where: {originalEftDate: {_gte: $startDate, _lte: $endDate}}\n      orderBy: {originalEftDate: ASC}\n    ) {\n      id\n      originalEftDate\n      adjustedEftDate\n      processingDate\n      notes\n    }\n  }\n  reportMetadata: payrollsAggregate(\n    where: {supersededDate: {_isNull: true}, payrollDates: {originalEftDate: {_gte: $startDate, _lte: $endDate}}}\n  ) {\n    aggregate {\n      count\n    }\n  }\n}": types.GetPayrollsDocument,
    "subscription PayrollsUpdates {\n  payrolls(where: {supersededDate: {_isNull: true}}, orderBy: {updatedAt: DESC}) {\n    ...PayrollListItem\n  }\n}\n\nsubscription PayrollUpdates($id: uuid!) {\n  payrolls(where: {id: {_eq: $id}}) {\n    ...PayrollDetailed\n  }\n}\n\nsubscription ActivePayrollsUpdates {\n  payrolls(\n    where: {supersededDate: {_isNull: true}, status: {_eq: \"Active\"}}\n    orderBy: {name: ASC}\n  ) {\n    ...PayrollSummary\n    client {\n      id\n      name\n    }\n  }\n}\n\nsubscription PayrollStatsUpdates {\n  payrollsAggregate(where: {supersededDate: {_isNull: true}}) {\n    aggregate {\n      count\n    }\n  }\n}\n\nsubscription UnassignedPayrollsUpdates {\n  payrolls(\n    where: {supersededDate: {_isNull: true}, _or: [{primaryConsultantUserId: {_isNull: true}}, {backupConsultantUserId: {_isNull: true}}, {managerUserId: {_isNull: true}}]}\n  ) {\n    ...PayrollForAssignment\n  }\n}\n\nsubscription PayrollDatesUpdates($payrollId: uuid!) {\n  payrollDates(\n    where: {payrollId: {_eq: $payrollId}}\n    orderBy: {originalEftDate: ASC}\n  ) {\n    id\n    originalEftDate\n    adjustedEftDate\n    processingDate\n    notes\n    updatedAt\n  }\n}\n\nsubscription UpcomingPayrollDatesUpdates {\n  payrollDates(\n    where: {originalEftDate: {_gte: \"now()\"}}\n    orderBy: {originalEftDate: ASC}\n    limit: 20\n  ) {\n    id\n    originalEftDate\n    adjustedEftDate\n    processingDate\n    notes\n    payrollId\n  }\n}\n\nsubscription PayrollSystemHealthUpdates {\n  payrolls(\n    where: {supersededDate: {_isNull: true}, status: {_in: [\"pending_approval\", \"processing\", \"draft\"]}}\n    orderBy: {updatedAt: ASC}\n  ) {\n    ...PayrollListItem\n    primaryConsultant {\n      id\n      firstName\n      lastName\n      computedName\n    }\n    assignedManager {\n      id\n      firstName\n      lastName\n      computedName\n    }\n  }\n}\n\nsubscription PayrollSubscription {\n  payrolls(where: {supersededDate: {_isNull: true}}, orderBy: {updatedAt: DESC}) {\n    ...PayrollListItem\n  }\n}": types.PayrollsUpdatesDocument,
    "fragment UserMinimal on Users {\n  id\n  firstName\n  lastName\n  computedName\n  email\n}\n\nfragment UserCoreShared on Users {\n  ...UserMinimal\n  role\n  isActive\n}\n\nfragment UserBasic on Users {\n  ...UserCoreShared\n  clerkUserId\n  createdAt\n  updatedAt\n}\n\nfragment UserBase on Users {\n  ...UserBasic\n}\n\nfragment UserWithRole on Users {\n  ...UserBasic\n  username\n  isStaff\n}\n\nfragment UserProfile on Users {\n  ...UserWithRole\n  clerkUserId\n  image\n  managerId\n  deactivatedAt\n  deactivatedBy\n  manager {\n    ...UserMinimal\n  }\n}\n\nfragment UserSearchResult on Users {\n  ...UserCoreShared\n  username\n  isStaff\n}\n\nfragment ClientMinimal on Clients {\n  id\n  name\n}\n\nfragment ClientBase on Clients {\n  id\n  name\n  active\n  contactEmail\n  contactPerson\n  contactPhone\n  createdAt\n}\n\nfragment ClientWithStats on Clients {\n  ...ClientBase\n  currentEmployeeCount: payrollsAggregate(\n    where: {supersededDate: {_isNull: true}}\n  ) {\n    aggregate {\n      sum {\n        employeeCount\n      }\n    }\n  }\n  activePayrollCount: payrollsAggregate(\n    where: {supersededDate: {_isNull: true}, status: {_eq: \"Active\"}}\n  ) {\n    aggregate {\n      count\n    }\n  }\n}\n\nfragment ClientListBase on Clients {\n  ...ClientBase\n  payrollCount: payrollsAggregate(where: {supersededDate: {_isNull: true}}) {\n    aggregate {\n      count\n    }\n  }\n}\n\nfragment PayrollMinimal on Payrolls {\n  id\n  name\n  employeeCount\n  status\n}\n\nfragment PayrollBase on Payrolls {\n  id\n  name\n  employeeCount\n  status\n  payrollSystem\n  processingTime\n  processingDaysBeforeEft\n  versionNumber\n  supersededDate\n  createdAt\n  updatedAt\n}\n\nfragment PayrollWithClient on Payrolls {\n  ...PayrollBase\n  clientId\n  client {\n    id\n    name\n    active\n  }\n}\n\nfragment PayrollListItem on Payrolls {\n  ...PayrollWithClient\n  primaryConsultantUserId\n  backupConsultantUserId\n  managerUserId\n  createdByUserId\n  cycleId\n  dateTypeId\n  dateValue\n  payrollCycle {\n    id\n    name\n    description\n  }\n  payrollDateType {\n    id\n    name\n    description\n  }\n  primaryConsultant {\n    ...UserMinimal\n  }\n  backupConsultant {\n    ...UserMinimal\n  }\n  assignedManager {\n    ...UserMinimal\n  }\n}\n\nfragment PayrollWithDates on Payrolls {\n  ...PayrollBase\n  goLiveDate\n  payrollDates(orderBy: {originalEftDate: ASC}) {\n    id\n    originalEftDate\n    adjustedEftDate\n    notes\n  }\n}\n\nfragment PayrollFullDetail on Payrolls {\n  ...PayrollWithDates\n  ...PayrollWithClient\n  dateTypeId\n  cycleId\n  dateValue\n  versionReason\n  supersededDate\n  parentPayrollId\n  parentPayroll {\n    id\n    versionNumber\n  }\n  childPayrolls(orderBy: {versionNumber: DESC}) {\n    id\n    versionNumber\n    versionReason\n    createdAt\n  }\n  primaryConsultant {\n    ...UserMinimal\n  }\n  backupConsultant {\n    ...UserMinimal\n  }\n  assignedManager {\n    ...UserMinimal\n  }\n}\n\nfragment NoteWithAuthor on Notes {\n  id\n  content\n  isImportant\n  createdAt\n  entityId\n  entityType\n  author {\n    ...UserMinimal\n  }\n}\n\nfragment PermissionBase on Permissions {\n  id\n  resourceId\n  description\n  legacyPermissionName\n  action\n}\n\nfragment RoleWithPermissions on Roles {\n  id\n  name\n  displayName\n  description\n  isSystemRole\n  priority\n  rolePermissions {\n    permission {\n      ...PermissionBase\n    }\n  }\n}\n\nfragment AuditLogEntry on AuditAuditLog {\n  id\n  userId\n  userEmail\n  userRole\n  action\n  resourceType\n  resourceId\n  eventTime\n  success\n  errorMessage\n  ipAddress\n  userAgent\n  requestId\n  sessionId\n  metadata\n  oldValues\n  newValues\n  createdAt\n}\n\nfragment AuthEvent on AuditAuthEvents {\n  id\n  userId\n  userEmail\n  eventType\n  eventTime\n  success\n  failureReason\n  ipAddress\n  userAgent\n  metadata\n}\n\nfragment DataAccessLog on AuditDataAccessLog {\n  id\n  userId\n  resourceType\n  resourceId\n  accessType\n  accessedAt\n  dataClassification\n  fieldsAccessed\n  rowCount\n  ipAddress\n  metadata\n}\n\nfragment PermissionChange on AuditPermissionChanges {\n  id\n  changedAt\n  changedByUserId\n  targetUserId\n  targetRoleId\n  changeType\n  permissionType\n  oldPermissions\n  newPermissions\n  reason\n  approvedByUserId\n}\n\nfragment PayrollDateInfo on PayrollDates {\n  id\n  originalEftDate\n  adjustedEftDate\n  notes\n  createdAt\n}\n\nfragment PermissionOverrideInfo on PermissionOverrides {\n  id\n  userId\n  role\n  resource\n  operation\n  granted\n  reason\n  conditions\n  expiresAt\n  createdBy\n  createdAt\n}": types.UserMinimalFragmentDoc,
    "mutation LogAuditEvent($input: AuditAuditLogInsertInput!) {\n  insertAuditAuditLog(objects: [$input]) {\n    returning {\n      id\n      eventTime\n    }\n  }\n}\n\nmutation InsertFile($input: FilesInsertInput!) {\n  insertFiles(objects: [$input]) {\n    returning {\n      id\n      filename\n      bucket\n      objectKey\n      size\n      mimetype\n      url\n      clientId\n      payrollId\n      uploadedBy\n      category\n      isPublic\n      metadata\n      fileType\n      createdAt\n    }\n  }\n}\n\nmutation UpdateFileMetadata($id: uuid!, $updates: FilesSetInput!) {\n  updateFilesByPk(pkColumns: {id: $id}, _set: $updates) {\n    id\n    filename\n    bucket\n    objectKey\n    size\n    mimetype\n    url\n    clientId\n    payrollId\n    uploadedBy\n    category\n    isPublic\n    metadata\n    fileType\n    createdAt\n  }\n}\n\nmutation DeleteFile($id: uuid!) {\n  deleteFilesByPk(id: $id) {\n    id\n    filename\n    objectKey\n  }\n}\n\nmutation RefreshData {\n  __typename\n}": types.LogAuditEventDocument,
    "query GetDashboardMetrics($userId: uuid!) {\n  clientsAggregate(where: {active: {_eq: true}}) {\n    aggregate {\n      count\n    }\n  }\n  activePayrollsAggregate: payrollsAggregate(\n    where: {supersededDate: {_isNull: true}, status: {_nin: [\"Completed\", \"Failed\"]}}\n  ) {\n    aggregate {\n      count\n    }\n  }\n  totalEmployeesAggregate: payrollsAggregate(\n    where: {supersededDate: {_isNull: true}}\n  ) {\n    aggregate {\n      sum {\n        employeeCount\n      }\n    }\n  }\n  upcomingPayrolls: payrolls(\n    where: {supersededDate: {_isNull: true}, status: {_nin: [\"Completed\", \"Failed\", \"Cancelled\"]}}\n    orderBy: {updatedAt: DESC}\n    limit: 5\n  ) {\n    ...PayrollMinimal\n    client {\n      ...ClientMinimal\n    }\n  }\n}\n\nquery GetDashboardStatsOptimized($limit: Int = 10) {\n  clientsAggregate {\n    aggregate {\n      count\n    }\n  }\n  totalPayrolls: payrollsAggregate(where: {supersededDate: {_isNull: true}}) {\n    aggregate {\n      count\n    }\n  }\n  activePayrolls: payrollsAggregate(\n    where: {supersededDate: {_isNull: true}, status: {_eq: \"Active\"}}\n  ) {\n    aggregate {\n      count\n    }\n  }\n  upcomingPayrolls: payrolls(\n    where: {supersededDate: {_isNull: true}, status: {_eq: \"Active\"}, payrollDates: {adjustedEftDate: {_gte: \"now()\"}}}\n    orderBy: {updatedAt: DESC}\n    limit: $limit\n  ) {\n    id\n    name\n    status\n    client {\n      id\n      name\n    }\n    nextEftDate: payrollDates(\n      where: {adjustedEftDate: {_gte: \"now()\"}}\n      orderBy: {adjustedEftDate: ASC}\n      limit: 1\n    ) {\n      originalEftDate\n      adjustedEftDate\n      processingDate\n    }\n  }\n}\n\nquery GetClientsDashboardStats {\n  activeClientsCount: clientsAggregate(where: {active: {_eq: true}}) {\n    aggregate {\n      count\n    }\n  }\n  totalPayrollsCount: payrollsAggregate(where: {supersededDate: {_isNull: true}}) {\n    aggregate {\n      count\n    }\n  }\n  totalEmployeesSum: payrollsAggregate(where: {supersededDate: {_isNull: true}}) {\n    aggregate {\n      sum {\n        employeeCount\n      }\n    }\n  }\n  clientsNeedingAttention: clients(\n    where: {active: {_eq: true}, _not: {payrolls: {supersededDate: {_isNull: true}}}}\n  ) {\n    ...ClientMinimal\n  }\n}\n\nquery GetCurrentUser($userId: uuid!) {\n  user: usersByPk(id: $userId) {\n    ...UserProfile\n  }\n}\n\nquery GetUsersForDropdown($role: user_role) {\n  users(\n    where: {isActive: {_eq: true}, role: {_eq: $role}}\n    orderBy: {computedName: ASC}\n  ) {\n    ...UserMinimal\n  }\n}\n\nquery GetSystemHealth {\n  databaseHealth: users(limit: 1) {\n    id\n  }\n  recentActivity: auditAuditLogAggregate(\n    where: {eventTime: {_gte: \"now() - interval '1 hour'\"}}\n  ) {\n    aggregate {\n      count\n    }\n  }\n}\n\nquery GlobalSearch($searchTerm: String!) {\n  clients(\n    where: {_or: [{name: {_ilike: $searchTerm}}, {contactEmail: {_ilike: $searchTerm}}]}\n    limit: 5\n  ) {\n    ...ClientMinimal\n  }\n  users(\n    where: {_or: [{computedName: {_ilike: $searchTerm}}, {firstName: {_ilike: $searchTerm}}, {lastName: {_ilike: $searchTerm}}, {email: {_ilike: $searchTerm}}]}\n    limit: 5\n  ) {\n    ...UserMinimal\n  }\n  payrolls(\n    where: {client: {name: {_ilike: $searchTerm}}, supersededDate: {_isNull: true}}\n    limit: 5\n  ) {\n    ...PayrollMinimal\n    client {\n      ...ClientMinimal\n    }\n  }\n}\n\nquery GetFileById($id: uuid!) {\n  filesByPk(id: $id) {\n    id\n    filename\n    bucket\n    objectKey\n    size\n    mimetype\n    url\n    clientId\n    payrollId\n    uploadedBy\n    category\n    isPublic\n    metadata\n    fileType\n    createdAt\n    client {\n      name\n    }\n    payroll {\n      name\n    }\n    uploadedBy\n  }\n}\n\nquery ListFiles($where: FilesBoolExp, $limit: Int, $offset: Int, $orderBy: [FilesOrderBy!]) {\n  files(where: $where, limit: $limit, offset: $offset, orderBy: $orderBy) {\n    id\n    filename\n    bucket\n    objectKey\n    size\n    mimetype\n    url\n    clientId\n    payrollId\n    uploadedBy\n    category\n    isPublic\n    metadata\n    fileType\n    createdAt\n    client {\n      name\n    }\n    payroll {\n      name\n    }\n    uploadedBy\n  }\n  filesAggregate(where: $where) {\n    aggregate {\n      count\n    }\n  }\n}": types.GetDashboardMetricsDocument,
    "subscription RecentActivity($resourceTypes: [String!]) {\n  auditAuditLog(\n    where: {resourceType: {_in: $resourceTypes}, eventTime: {_gte: \"now() - interval '5 minutes'\"}}\n    orderBy: {eventTime: DESC}\n    limit: 20\n  ) {\n    ...AuditLogEntry\n  }\n}\n\nsubscription AuthenticationEvents($userId: uuid) {\n  auditAuthEvents(\n    where: {userId: {_eq: $userId}, eventTime: {_gte: \"now() - interval '10 minutes'\"}}\n    orderBy: {eventTime: DESC}\n  ) {\n    ...AuthEvent\n  }\n}\n\nsubscription SensitiveDataAccess($resourceTypes: [String!]!) {\n  auditDataAccessLog(\n    where: {resourceType: {_in: $resourceTypes}, accessedAt: {_gte: \"now() - interval '10 minutes'\"}}\n    orderBy: {accessedAt: DESC}\n  ) {\n    ...DataAccessLog\n  }\n}\n\nsubscription PermissionChangeStream {\n  auditPermissionChanges(orderBy: {changedAt: DESC}, limit: 10) {\n    ...PermissionChange\n  }\n}": types.RecentActivityDocument,
};

/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 *
 *
 * @example
 * ```ts
 * const query = gql(`query GetUser($id: ID!) { user(id: $id) { name } }`);
 * ```
 *
 * The query argument is unknown!
 * Please regenerate the types.
 */
export function gql(source: string): unknown;

/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "fragment PayrollProcessingInfo on Payrolls {\n  id\n  name\n  status\n  employeeCount\n  processingTime\n  processingDaysBeforeEft\n  goLiveDate\n}\n\nfragment PayrollVersionInfo on Payrolls {\n  id\n  versionNumber\n  versionReason\n  parentPayrollId\n  supersededDate\n  createdAt\n  createdByUserId\n}\n\nfragment PayrollWithAllRelations on Payrolls {\n  ...PayrollBase\n  client {\n    ...ClientMinimal\n  }\n  primaryConsultant {\n    ...UserMinimal\n  }\n  backupConsultant {\n    ...UserMinimal\n  }\n  assignedManager {\n    ...UserMinimal\n  }\n  cycleId\n  dateTypeId\n  dateValue\n  payrollCycle {\n    id\n    name\n    description\n  }\n  payrollDateType {\n    id\n    name\n    description\n  }\n  createdByUserId\n}\n\nfragment PayrollForAssignment on Payrolls {\n  id\n  name\n  status\n  clientId\n  employeeCount\n  processingTime\n  processingDaysBeforeEft\n  client {\n    ...ClientMinimal\n  }\n  primaryConsultantUserId\n  backupConsultantUserId\n  managerUserId\n  requiredSkills {\n    skillName\n    requiredLevel\n  }\n  payrollDates(\n    where: {adjustedEftDate: {_gte: \"today()\"}}\n    orderBy: {adjustedEftDate: ASC}\n    limit: 3\n  ) {\n    id\n    originalEftDate\n    adjustedEftDate\n    processingDate\n  }\n}\n\nfragment PayrollBasic on Payrolls {\n  id\n  name\n  status\n  employeeCount\n  client {\n    ...ClientMinimal\n  }\n}\n\nfragment PayrollForAudit on Payrolls {\n  id\n  name\n  status\n  versionNumber\n  createdAt\n  updatedAt\n  createdByUserId\n}\n\nfragment PayrollTableRow on Payrolls {\n  ...PayrollListItem\n  goLiveDate\n  processingTime\n  versionNumber\n  cycleId\n  payrollCycle {\n    id\n    name\n    description\n  }\n  nextPayrollDate: payrollDates(\n    where: {adjustedEftDate: {_gte: \"today()\"}}\n    orderBy: {adjustedEftDate: ASC}\n    limit: 1\n  ) {\n    originalEftDate\n    adjustedEftDate\n    processingDate\n  }\n}\n\nfragment PayrollDashboardCard on Payrolls {\n  ...PayrollMinimal\n  client {\n    ...ClientMinimal\n  }\n  primaryConsultant {\n    ...UserMinimal\n  }\n  goLiveDate\n}\n\nfragment PayrollDate on PayrollDates {\n  id\n  payrollId\n  originalEftDate\n  adjustedEftDate\n  processingDate\n  notes\n  status\n  completedAt\n  completedBy\n  createdAt\n  payroll {\n    id\n    name\n  }\n}\n\nfragment PayrollDetailed on Payrolls {\n  ...PayrollFullDetail\n  requiredSkills {\n    skillName\n    requiredLevel\n  }\n}\n\nfragment PayrollSummary on Payrolls {\n  ...PayrollBase\n  client {\n    ...ClientMinimal\n  }\n  primaryConsultant {\n    ...UserMinimal\n  }\n}\n\nfragment PayrollWithCycle on Payrolls {\n  ...PayrollBase\n  cycleId\n  payrollCycle {\n    id\n    name\n  }\n}\n\nfragment PayrollWorkload on Payrolls {\n  id\n  name\n  status\n  employeeCount\n  processingTime\n  processingDaysBeforeEft\n  primaryConsultantUserId\n  backupConsultantUserId\n  managerUserId\n  client {\n    ...ClientMinimal\n  }\n}"): (typeof documents)["fragment PayrollProcessingInfo on Payrolls {\n  id\n  name\n  status\n  employeeCount\n  processingTime\n  processingDaysBeforeEft\n  goLiveDate\n}\n\nfragment PayrollVersionInfo on Payrolls {\n  id\n  versionNumber\n  versionReason\n  parentPayrollId\n  supersededDate\n  createdAt\n  createdByUserId\n}\n\nfragment PayrollWithAllRelations on Payrolls {\n  ...PayrollBase\n  client {\n    ...ClientMinimal\n  }\n  primaryConsultant {\n    ...UserMinimal\n  }\n  backupConsultant {\n    ...UserMinimal\n  }\n  assignedManager {\n    ...UserMinimal\n  }\n  cycleId\n  dateTypeId\n  dateValue\n  payrollCycle {\n    id\n    name\n    description\n  }\n  payrollDateType {\n    id\n    name\n    description\n  }\n  createdByUserId\n}\n\nfragment PayrollForAssignment on Payrolls {\n  id\n  name\n  status\n  clientId\n  employeeCount\n  processingTime\n  processingDaysBeforeEft\n  client {\n    ...ClientMinimal\n  }\n  primaryConsultantUserId\n  backupConsultantUserId\n  managerUserId\n  requiredSkills {\n    skillName\n    requiredLevel\n  }\n  payrollDates(\n    where: {adjustedEftDate: {_gte: \"today()\"}}\n    orderBy: {adjustedEftDate: ASC}\n    limit: 3\n  ) {\n    id\n    originalEftDate\n    adjustedEftDate\n    processingDate\n  }\n}\n\nfragment PayrollBasic on Payrolls {\n  id\n  name\n  status\n  employeeCount\n  client {\n    ...ClientMinimal\n  }\n}\n\nfragment PayrollForAudit on Payrolls {\n  id\n  name\n  status\n  versionNumber\n  createdAt\n  updatedAt\n  createdByUserId\n}\n\nfragment PayrollTableRow on Payrolls {\n  ...PayrollListItem\n  goLiveDate\n  processingTime\n  versionNumber\n  cycleId\n  payrollCycle {\n    id\n    name\n    description\n  }\n  nextPayrollDate: payrollDates(\n    where: {adjustedEftDate: {_gte: \"today()\"}}\n    orderBy: {adjustedEftDate: ASC}\n    limit: 1\n  ) {\n    originalEftDate\n    adjustedEftDate\n    processingDate\n  }\n}\n\nfragment PayrollDashboardCard on Payrolls {\n  ...PayrollMinimal\n  client {\n    ...ClientMinimal\n  }\n  primaryConsultant {\n    ...UserMinimal\n  }\n  goLiveDate\n}\n\nfragment PayrollDate on PayrollDates {\n  id\n  payrollId\n  originalEftDate\n  adjustedEftDate\n  processingDate\n  notes\n  status\n  completedAt\n  completedBy\n  createdAt\n  payroll {\n    id\n    name\n  }\n}\n\nfragment PayrollDetailed on Payrolls {\n  ...PayrollFullDetail\n  requiredSkills {\n    skillName\n    requiredLevel\n  }\n}\n\nfragment PayrollSummary on Payrolls {\n  ...PayrollBase\n  client {\n    ...ClientMinimal\n  }\n  primaryConsultant {\n    ...UserMinimal\n  }\n}\n\nfragment PayrollWithCycle on Payrolls {\n  ...PayrollBase\n  cycleId\n  payrollCycle {\n    id\n    name\n  }\n}\n\nfragment PayrollWorkload on Payrolls {\n  id\n  name\n  status\n  employeeCount\n  processingTime\n  processingDaysBeforeEft\n  primaryConsultantUserId\n  backupConsultantUserId\n  managerUserId\n  client {\n    ...ClientMinimal\n  }\n}"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "mutation CreatePayroll($object: PayrollsInsertInput!) {\n  insertPayrollsOne(object: $object) {\n    ...PayrollDetailed\n    client {\n      id\n      name\n    }\n    primaryConsultant {\n      id\n      firstName\n      lastName\n      computedName\n    }\n  }\n}\n\nmutation UpdatePayroll($id: uuid!, $set: PayrollsSetInput!) {\n  updatePayrollsByPk(pkColumns: {id: $id}, _set: $set) {\n    ...PayrollDetailed\n    client {\n      id\n      name\n    }\n    primaryConsultant {\n      id\n      firstName\n      lastName\n      computedName\n    }\n    backupConsultant {\n      id\n      firstName\n      lastName\n      computedName\n    }\n  }\n}\n\nmutation DeletePayroll($id: uuid!) {\n  updatePayrollsByPk(pkColumns: {id: $id}, _set: {supersededDate: \"now()\"}) {\n    ...PayrollBasic\n  }\n}\n\nmutation ReactivatePayroll($id: uuid!) {\n  updatePayrollsByPk(pkColumns: {id: $id}, _set: {supersededDate: null}) {\n    ...PayrollBasic\n  }\n}\n\nmutation UpdatePayrollStatus($id: uuid!, $status: payroll_status!) {\n  updatePayrollsByPk(\n    pkColumns: {id: $id}\n    _set: {status: $status, updatedAt: \"now()\"}\n  ) {\n    ...PayrollBasic\n    client {\n      id\n      name\n    }\n  }\n}\n\nmutation ActivatePayroll($id: uuid!) {\n  updatePayrollsByPk(\n    pkColumns: {id: $id}\n    _set: {status: \"Active\", updatedAt: \"now()\"}\n  ) {\n    ...PayrollBasic\n  }\n}\n\nmutation DeactivatePayroll($id: uuid!) {\n  updatePayrollsByPk(\n    pkColumns: {id: $id}\n    _set: {status: \"Inactive\", updatedAt: \"now()\"}\n  ) {\n    ...PayrollBasic\n  }\n}\n\nmutation AssignPrimaryConsultant($id: uuid!, $userId: uuid!) {\n  updatePayrollsByPk(\n    pkColumns: {id: $id}\n    _set: {primaryConsultantUserId: $userId, updatedAt: \"now()\"}\n  ) {\n    ...PayrollBasic\n    primaryConsultant {\n      id\n      firstName\n      lastName\n      computedName\n      email\n    }\n  }\n}\n\nmutation AssignBackupConsultant($id: uuid!, $userId: uuid!) {\n  updatePayrollsByPk(\n    pkColumns: {id: $id}\n    _set: {backupConsultantUserId: $userId, updatedAt: \"now()\"}\n  ) {\n    ...PayrollBasic\n    backupConsultant {\n      id\n      firstName\n      lastName\n      computedName\n      email\n    }\n  }\n}\n\nmutation AssignManager($id: uuid!, $userId: uuid!) {\n  updatePayrollsByPk(\n    pkColumns: {id: $id}\n    _set: {managerUserId: $userId, updatedAt: \"now()\"}\n  ) {\n    ...PayrollBasic\n    assignedManager {\n      id\n      firstName\n      lastName\n      computedName\n      email\n    }\n  }\n}\n\nmutation UpdatePayrollAssignments($id: uuid!, $primaryConsultantUserId: uuid, $backupConsultantUserId: uuid, $managerUserId: uuid) {\n  updatePayrollsByPk(\n    pkColumns: {id: $id}\n    _set: {primaryConsultantUserId: $primaryConsultantUserId, backupConsultantUserId: $backupConsultantUserId, managerUserId: $managerUserId, updatedAt: \"now()\"}\n  ) {\n    ...PayrollBasic\n    primaryConsultant {\n      id\n      firstName\n      lastName\n      computedName\n      email\n    }\n    backupConsultant {\n      id\n      firstName\n      lastName\n      computedName\n      email\n    }\n    assignedManager {\n      id\n      firstName\n      lastName\n      computedName\n      email\n    }\n  }\n}\n\nmutation CreatePayrollVersion($parentPayrollId: uuid!, $versionReason: String!, $object: PayrollsInsertInput!) {\n  updatePayrollsByPk(\n    pkColumns: {id: $parentPayrollId}\n    _set: {supersededDate: \"now()\"}\n  ) {\n    id\n    supersededDate\n  }\n  insertPayrollsOne(object: $object) {\n    ...PayrollWithAllRelations\n  }\n}\n\nmutation SupersedePayroll($id: uuid!) {\n  updatePayrollsByPk(pkColumns: {id: $id}, _set: {supersededDate: \"now()\"}) {\n    ...PayrollBasic\n  }\n}\n\nmutation BulkUpdatePayrolls($where: PayrollsBoolExp!, $set: PayrollsSetInput!) {\n  updatePayrolls(where: $where, _set: $set) {\n    returning {\n      ...PayrollBasic\n    }\n    affectedRows\n  }\n}\n\nmutation BulkAssignConsultant($payrollIds: [uuid!]!, $primaryConsultantUserId: uuid!) {\n  updatePayrolls(\n    where: {id: {_in: $payrollIds}}\n    _set: {primaryConsultantUserId: $primaryConsultantUserId, updatedAt: \"now()\"}\n  ) {\n    returning {\n      ...PayrollBasic\n      primaryConsultant {\n        id\n        firstName\n        lastName\n        computedName\n      }\n    }\n    affectedRows\n  }\n}\n\nmutation BulkAssignManager($payrollIds: [uuid!]!, $managerUserId: uuid!) {\n  updatePayrolls(\n    where: {id: {_in: $payrollIds}}\n    _set: {managerUserId: $managerUserId, updatedAt: \"now()\"}\n  ) {\n    returning {\n      ...PayrollBasic\n      assignedManager {\n        id\n        firstName\n        lastName\n        computedName\n      }\n    }\n    affectedRows\n  }\n}\n\nmutation BulkUpdatePayrollStatus($payrollIds: [uuid!]!, $status: payroll_status!) {\n  updatePayrolls(\n    where: {id: {_in: $payrollIds}}\n    _set: {status: $status, updatedAt: \"now()\"}\n  ) {\n    returning {\n      ...PayrollBasic\n    }\n    affectedRows\n  }\n}\n\nmutation UpdatePayrollConfiguration($id: uuid!, $payrollSystem: String, $processingTime: Int, $processingDaysBeforeEft: Int, $cycleId: uuid, $dateTypeId: uuid) {\n  updatePayrollsByPk(\n    pkColumns: {id: $id}\n    _set: {payrollSystem: $payrollSystem, processingTime: $processingTime, processingDaysBeforeEft: $processingDaysBeforeEft, cycleId: $cycleId, dateTypeId: $dateTypeId, updatedAt: \"now()\"}\n  ) {\n    ...PayrollWithCycle\n  }\n}\n\nmutation UpdatePayrollDetails($id: uuid!, $name: String, $employeeCount: Int, $goLiveDate: date) {\n  updatePayrollsByPk(\n    pkColumns: {id: $id}\n    _set: {name: $name, employeeCount: $employeeCount, goLiveDate: $goLiveDate, updatedAt: \"now()\"}\n  ) {\n    ...PayrollBasic\n  }\n}\n\nmutation CreatePayrollDate($object: PayrollDatesInsertInput!) {\n  insertPayrollDatesOne(object: $object) {\n    id\n    originalEftDate\n    adjustedEftDate\n    processingDate\n    notes\n    payrollId\n    createdAt\n    updatedAt\n  }\n}\n\nmutation UpdatePayrollDate($id: uuid!, $set: PayrollDatesSetInput!) {\n  updatePayrollDatesByPk(pkColumns: {id: $id}, _set: $set) {\n    id\n    originalEftDate\n    adjustedEftDate\n    processingDate\n    notes\n    payrollId\n    updatedAt\n  }\n}\n\nmutation DeletePayrollDate($id: uuid!) {\n  deletePayrollDatesByPk(id: $id) {\n    id\n    originalEftDate\n    adjustedEftDate\n    payrollId\n  }\n}\n\nmutation UpdatePayrollDateNotes($id: uuid!, $notes: String) {\n  updatePayrollDatesByPk(\n    pkColumns: {id: $id}\n    _set: {notes: $notes, updatedAt: \"now()\"}\n  ) {\n    id\n    originalEftDate\n    adjustedEftDate\n    notes\n    payrollId\n  }\n}\n\nmutation CompletePayrollDate($id: uuid!, $completedBy: uuid!) {\n  updatePayrollDatesByPk(\n    pkColumns: {id: $id}\n    _set: {status: \"completed\", completedAt: \"now()\", completedBy: $completedBy}\n  ) {\n    id\n    status\n    completedAt\n    completedBy\n    payrollId\n    originalEftDate\n    adjustedEftDate\n    processingDate\n  }\n}\n\nmutation UpdatePayrollDateStatus($id: uuid!, $status: String!, $updatedBy: uuid) {\n  updatePayrollDatesByPk(\n    pkColumns: {id: $id}\n    _set: {status: $status, updatedAt: \"now()\", completedBy: $updatedBy}\n  ) {\n    id\n    status\n    completedAt\n    completedBy\n    payrollId\n  }\n}\n\nmutation BulkCreatePayrollDates($objects: [PayrollDatesInsertInput!]!) {\n  insertPayrollDates(objects: $objects) {\n    returning {\n      id\n      originalEftDate\n      adjustedEftDate\n      processingDate\n      payrollId\n    }\n    affectedRows\n  }\n}\n\nmutation BulkDeletePayrollDates($payrollId: uuid!) {\n  deletePayrollDates(where: {payrollId: {_eq: $payrollId}}) {\n    affectedRows\n  }\n}\n\nmutation CreatePayrollCycle($object: PayrollCyclesInsertInput!) {\n  insertPayrollCyclesOne(object: $object) {\n    id\n    name\n    description\n    createdAt\n  }\n}\n\nmutation UpdatePayrollCycle($id: uuid!, $set: PayrollCyclesSetInput!) {\n  updatePayrollCyclesByPk(pkColumns: {id: $id}, _set: $set) {\n    id\n    name\n    description\n    updatedAt\n  }\n}\n\nmutation DeletePayrollCycle($id: uuid!) {\n  deletePayrollCyclesByPk(id: $id) {\n    id\n    name\n  }\n}\n\nmutation CreatePayrollDateType($object: PayrollDateTypesInsertInput!) {\n  insertPayrollDateTypesOne(object: $object) {\n    id\n    name\n    description\n    createdAt\n  }\n}\n\nmutation UpdatePayrollDateType($id: uuid!, $set: PayrollDateTypesSetInput!) {\n  updatePayrollDateTypesByPk(pkColumns: {id: $id}, _set: $set) {\n    id\n    name\n    description\n    updatedAt\n  }\n}\n\nmutation DeletePayrollDateType($id: uuid!) {\n  deletePayrollDateTypesByPk(id: $id) {\n    id\n    name\n  }\n}\n\nmutation ProcessPayrollBatch($payrollIds: [uuid!]!, $processedBy: uuid!) {\n  updatePayrolls(\n    where: {id: {_in: $payrollIds}}\n    _set: {status: \"Processing\", updatedAt: \"now()\"}\n  ) {\n    returning {\n      ...PayrollBasic\n      client {\n        id\n        name\n      }\n    }\n    affectedRows\n  }\n}\n\nmutation ApprovePayrollBatch($payrollIds: [uuid!]!, $approvedBy: uuid!) {\n  updatePayrolls(\n    where: {id: {_in: $payrollIds}, status: {_eq: \"Processing\"}}\n    _set: {status: \"Approved\", updatedAt: \"now()\"}\n  ) {\n    returning {\n      ...PayrollBasic\n      client {\n        id\n        name\n      }\n    }\n    affectedRows\n  }\n}\n\nquery GeneratePayrollsByIds($payrollIds: [uuid!]!, $reportType: String!) {\n  payrolls(where: {id: {_in: $payrollIds}}, orderBy: {name: ASC}) {\n    ...PayrollWithAllRelations\n    payrollDates(orderBy: {originalEftDate: ASC}) {\n      id\n      originalEftDate\n      adjustedEftDate\n      processingDate\n      notes\n    }\n  }\n}"): (typeof documents)["mutation CreatePayroll($object: PayrollsInsertInput!) {\n  insertPayrollsOne(object: $object) {\n    ...PayrollDetailed\n    client {\n      id\n      name\n    }\n    primaryConsultant {\n      id\n      firstName\n      lastName\n      computedName\n    }\n  }\n}\n\nmutation UpdatePayroll($id: uuid!, $set: PayrollsSetInput!) {\n  updatePayrollsByPk(pkColumns: {id: $id}, _set: $set) {\n    ...PayrollDetailed\n    client {\n      id\n      name\n    }\n    primaryConsultant {\n      id\n      firstName\n      lastName\n      computedName\n    }\n    backupConsultant {\n      id\n      firstName\n      lastName\n      computedName\n    }\n  }\n}\n\nmutation DeletePayroll($id: uuid!) {\n  updatePayrollsByPk(pkColumns: {id: $id}, _set: {supersededDate: \"now()\"}) {\n    ...PayrollBasic\n  }\n}\n\nmutation ReactivatePayroll($id: uuid!) {\n  updatePayrollsByPk(pkColumns: {id: $id}, _set: {supersededDate: null}) {\n    ...PayrollBasic\n  }\n}\n\nmutation UpdatePayrollStatus($id: uuid!, $status: payroll_status!) {\n  updatePayrollsByPk(\n    pkColumns: {id: $id}\n    _set: {status: $status, updatedAt: \"now()\"}\n  ) {\n    ...PayrollBasic\n    client {\n      id\n      name\n    }\n  }\n}\n\nmutation ActivatePayroll($id: uuid!) {\n  updatePayrollsByPk(\n    pkColumns: {id: $id}\n    _set: {status: \"Active\", updatedAt: \"now()\"}\n  ) {\n    ...PayrollBasic\n  }\n}\n\nmutation DeactivatePayroll($id: uuid!) {\n  updatePayrollsByPk(\n    pkColumns: {id: $id}\n    _set: {status: \"Inactive\", updatedAt: \"now()\"}\n  ) {\n    ...PayrollBasic\n  }\n}\n\nmutation AssignPrimaryConsultant($id: uuid!, $userId: uuid!) {\n  updatePayrollsByPk(\n    pkColumns: {id: $id}\n    _set: {primaryConsultantUserId: $userId, updatedAt: \"now()\"}\n  ) {\n    ...PayrollBasic\n    primaryConsultant {\n      id\n      firstName\n      lastName\n      computedName\n      email\n    }\n  }\n}\n\nmutation AssignBackupConsultant($id: uuid!, $userId: uuid!) {\n  updatePayrollsByPk(\n    pkColumns: {id: $id}\n    _set: {backupConsultantUserId: $userId, updatedAt: \"now()\"}\n  ) {\n    ...PayrollBasic\n    backupConsultant {\n      id\n      firstName\n      lastName\n      computedName\n      email\n    }\n  }\n}\n\nmutation AssignManager($id: uuid!, $userId: uuid!) {\n  updatePayrollsByPk(\n    pkColumns: {id: $id}\n    _set: {managerUserId: $userId, updatedAt: \"now()\"}\n  ) {\n    ...PayrollBasic\n    assignedManager {\n      id\n      firstName\n      lastName\n      computedName\n      email\n    }\n  }\n}\n\nmutation UpdatePayrollAssignments($id: uuid!, $primaryConsultantUserId: uuid, $backupConsultantUserId: uuid, $managerUserId: uuid) {\n  updatePayrollsByPk(\n    pkColumns: {id: $id}\n    _set: {primaryConsultantUserId: $primaryConsultantUserId, backupConsultantUserId: $backupConsultantUserId, managerUserId: $managerUserId, updatedAt: \"now()\"}\n  ) {\n    ...PayrollBasic\n    primaryConsultant {\n      id\n      firstName\n      lastName\n      computedName\n      email\n    }\n    backupConsultant {\n      id\n      firstName\n      lastName\n      computedName\n      email\n    }\n    assignedManager {\n      id\n      firstName\n      lastName\n      computedName\n      email\n    }\n  }\n}\n\nmutation CreatePayrollVersion($parentPayrollId: uuid!, $versionReason: String!, $object: PayrollsInsertInput!) {\n  updatePayrollsByPk(\n    pkColumns: {id: $parentPayrollId}\n    _set: {supersededDate: \"now()\"}\n  ) {\n    id\n    supersededDate\n  }\n  insertPayrollsOne(object: $object) {\n    ...PayrollWithAllRelations\n  }\n}\n\nmutation SupersedePayroll($id: uuid!) {\n  updatePayrollsByPk(pkColumns: {id: $id}, _set: {supersededDate: \"now()\"}) {\n    ...PayrollBasic\n  }\n}\n\nmutation BulkUpdatePayrolls($where: PayrollsBoolExp!, $set: PayrollsSetInput!) {\n  updatePayrolls(where: $where, _set: $set) {\n    returning {\n      ...PayrollBasic\n    }\n    affectedRows\n  }\n}\n\nmutation BulkAssignConsultant($payrollIds: [uuid!]!, $primaryConsultantUserId: uuid!) {\n  updatePayrolls(\n    where: {id: {_in: $payrollIds}}\n    _set: {primaryConsultantUserId: $primaryConsultantUserId, updatedAt: \"now()\"}\n  ) {\n    returning {\n      ...PayrollBasic\n      primaryConsultant {\n        id\n        firstName\n        lastName\n        computedName\n      }\n    }\n    affectedRows\n  }\n}\n\nmutation BulkAssignManager($payrollIds: [uuid!]!, $managerUserId: uuid!) {\n  updatePayrolls(\n    where: {id: {_in: $payrollIds}}\n    _set: {managerUserId: $managerUserId, updatedAt: \"now()\"}\n  ) {\n    returning {\n      ...PayrollBasic\n      assignedManager {\n        id\n        firstName\n        lastName\n        computedName\n      }\n    }\n    affectedRows\n  }\n}\n\nmutation BulkUpdatePayrollStatus($payrollIds: [uuid!]!, $status: payroll_status!) {\n  updatePayrolls(\n    where: {id: {_in: $payrollIds}}\n    _set: {status: $status, updatedAt: \"now()\"}\n  ) {\n    returning {\n      ...PayrollBasic\n    }\n    affectedRows\n  }\n}\n\nmutation UpdatePayrollConfiguration($id: uuid!, $payrollSystem: String, $processingTime: Int, $processingDaysBeforeEft: Int, $cycleId: uuid, $dateTypeId: uuid) {\n  updatePayrollsByPk(\n    pkColumns: {id: $id}\n    _set: {payrollSystem: $payrollSystem, processingTime: $processingTime, processingDaysBeforeEft: $processingDaysBeforeEft, cycleId: $cycleId, dateTypeId: $dateTypeId, updatedAt: \"now()\"}\n  ) {\n    ...PayrollWithCycle\n  }\n}\n\nmutation UpdatePayrollDetails($id: uuid!, $name: String, $employeeCount: Int, $goLiveDate: date) {\n  updatePayrollsByPk(\n    pkColumns: {id: $id}\n    _set: {name: $name, employeeCount: $employeeCount, goLiveDate: $goLiveDate, updatedAt: \"now()\"}\n  ) {\n    ...PayrollBasic\n  }\n}\n\nmutation CreatePayrollDate($object: PayrollDatesInsertInput!) {\n  insertPayrollDatesOne(object: $object) {\n    id\n    originalEftDate\n    adjustedEftDate\n    processingDate\n    notes\n    payrollId\n    createdAt\n    updatedAt\n  }\n}\n\nmutation UpdatePayrollDate($id: uuid!, $set: PayrollDatesSetInput!) {\n  updatePayrollDatesByPk(pkColumns: {id: $id}, _set: $set) {\n    id\n    originalEftDate\n    adjustedEftDate\n    processingDate\n    notes\n    payrollId\n    updatedAt\n  }\n}\n\nmutation DeletePayrollDate($id: uuid!) {\n  deletePayrollDatesByPk(id: $id) {\n    id\n    originalEftDate\n    adjustedEftDate\n    payrollId\n  }\n}\n\nmutation UpdatePayrollDateNotes($id: uuid!, $notes: String) {\n  updatePayrollDatesByPk(\n    pkColumns: {id: $id}\n    _set: {notes: $notes, updatedAt: \"now()\"}\n  ) {\n    id\n    originalEftDate\n    adjustedEftDate\n    notes\n    payrollId\n  }\n}\n\nmutation CompletePayrollDate($id: uuid!, $completedBy: uuid!) {\n  updatePayrollDatesByPk(\n    pkColumns: {id: $id}\n    _set: {status: \"completed\", completedAt: \"now()\", completedBy: $completedBy}\n  ) {\n    id\n    status\n    completedAt\n    completedBy\n    payrollId\n    originalEftDate\n    adjustedEftDate\n    processingDate\n  }\n}\n\nmutation UpdatePayrollDateStatus($id: uuid!, $status: String!, $updatedBy: uuid) {\n  updatePayrollDatesByPk(\n    pkColumns: {id: $id}\n    _set: {status: $status, updatedAt: \"now()\", completedBy: $updatedBy}\n  ) {\n    id\n    status\n    completedAt\n    completedBy\n    payrollId\n  }\n}\n\nmutation BulkCreatePayrollDates($objects: [PayrollDatesInsertInput!]!) {\n  insertPayrollDates(objects: $objects) {\n    returning {\n      id\n      originalEftDate\n      adjustedEftDate\n      processingDate\n      payrollId\n    }\n    affectedRows\n  }\n}\n\nmutation BulkDeletePayrollDates($payrollId: uuid!) {\n  deletePayrollDates(where: {payrollId: {_eq: $payrollId}}) {\n    affectedRows\n  }\n}\n\nmutation CreatePayrollCycle($object: PayrollCyclesInsertInput!) {\n  insertPayrollCyclesOne(object: $object) {\n    id\n    name\n    description\n    createdAt\n  }\n}\n\nmutation UpdatePayrollCycle($id: uuid!, $set: PayrollCyclesSetInput!) {\n  updatePayrollCyclesByPk(pkColumns: {id: $id}, _set: $set) {\n    id\n    name\n    description\n    updatedAt\n  }\n}\n\nmutation DeletePayrollCycle($id: uuid!) {\n  deletePayrollCyclesByPk(id: $id) {\n    id\n    name\n  }\n}\n\nmutation CreatePayrollDateType($object: PayrollDateTypesInsertInput!) {\n  insertPayrollDateTypesOne(object: $object) {\n    id\n    name\n    description\n    createdAt\n  }\n}\n\nmutation UpdatePayrollDateType($id: uuid!, $set: PayrollDateTypesSetInput!) {\n  updatePayrollDateTypesByPk(pkColumns: {id: $id}, _set: $set) {\n    id\n    name\n    description\n    updatedAt\n  }\n}\n\nmutation DeletePayrollDateType($id: uuid!) {\n  deletePayrollDateTypesByPk(id: $id) {\n    id\n    name\n  }\n}\n\nmutation ProcessPayrollBatch($payrollIds: [uuid!]!, $processedBy: uuid!) {\n  updatePayrolls(\n    where: {id: {_in: $payrollIds}}\n    _set: {status: \"Processing\", updatedAt: \"now()\"}\n  ) {\n    returning {\n      ...PayrollBasic\n      client {\n        id\n        name\n      }\n    }\n    affectedRows\n  }\n}\n\nmutation ApprovePayrollBatch($payrollIds: [uuid!]!, $approvedBy: uuid!) {\n  updatePayrolls(\n    where: {id: {_in: $payrollIds}, status: {_eq: \"Processing\"}}\n    _set: {status: \"Approved\", updatedAt: \"now()\"}\n  ) {\n    returning {\n      ...PayrollBasic\n      client {\n        id\n        name\n      }\n    }\n    affectedRows\n  }\n}\n\nquery GeneratePayrollsByIds($payrollIds: [uuid!]!, $reportType: String!) {\n  payrolls(where: {id: {_in: $payrollIds}}, orderBy: {name: ASC}) {\n    ...PayrollWithAllRelations\n    payrollDates(orderBy: {originalEftDate: ASC}) {\n      id\n      originalEftDate\n      adjustedEftDate\n      processingDate\n      notes\n    }\n  }\n}"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "query GetPayrolls($limit: Int = 50, $offset: Int = 0, $where: PayrollsBoolExp) {\n  payrolls(\n    limit: $limit\n    offset: $offset\n    where: $where\n    orderBy: {createdAt: DESC}\n  ) {\n    ...PayrollListItem\n  }\n  payrollsAggregate(where: $where) {\n    aggregate {\n      count\n    }\n  }\n}\n\nquery GetPayrollById($id: uuid!) {\n  payrollsByPk(id: $id) {\n    ...PayrollWithAllRelations\n  }\n}\n\nquery GetPayrollBasic($id: uuid!) {\n  payrollsByPk(id: $id) {\n    ...PayrollBasic\n  }\n}\n\nquery GetPayrollForEdit($id: uuid!) {\n  payrollsByPk(id: $id) {\n    ...PayrollDetailed\n    client {\n      id\n      name\n    }\n    payrollCycle {\n      id\n      name\n      description\n    }\n    payrollDateType {\n      id\n      name\n    }\n    primaryConsultantUserId\n    backupConsultantUserId\n    managerUserId\n    primaryConsultant {\n      id\n      firstName\n      lastName\n      computedName\n      email\n      role\n    }\n    backupConsultant {\n      id\n      firstName\n      lastName\n      computedName\n      email\n      role\n    }\n    assignedManager {\n      id\n      firstName\n      lastName\n      computedName\n      email\n      role\n    }\n  }\n}\n\nquery GetPayrollsSimple {\n  payrolls(where: {supersededDate: {_isNull: true}}, orderBy: {name: ASC}) {\n    ...PayrollMinimal\n  }\n}\n\nquery GetActivePayrolls {\n  payrolls(\n    where: {supersededDate: {_isNull: true}, status: {_neq: \"Inactive\"}}\n    orderBy: {name: ASC}\n  ) {\n    ...PayrollSummary\n    client {\n      id\n      name\n    }\n  }\n}\n\nquery GetPayrollsByClient($clientId: uuid!) {\n  payrolls(\n    where: {clientId: {_eq: $clientId}, supersededDate: {_isNull: true}}\n    orderBy: {createdAt: DESC}\n  ) {\n    ...PayrollListItem\n  }\n}\n\nquery GetPayrollsByUser($userId: uuid!) {\n  primaryPayrolls: payrolls(\n    where: {primaryConsultantUserId: {_eq: $userId}, supersededDate: {_isNull: true}}\n    orderBy: {name: ASC}\n  ) {\n    ...PayrollWorkload\n  }\n  backupPayrolls: payrolls(\n    where: {backupConsultantUserId: {_eq: $userId}, supersededDate: {_isNull: true}}\n    orderBy: {name: ASC}\n  ) {\n    ...PayrollWorkload\n  }\n  managedPayrolls: payrolls(\n    where: {managerUserId: {_eq: $userId}, supersededDate: {_isNull: true}}\n    orderBy: {name: ASC}\n  ) {\n    ...PayrollWorkload\n  }\n}\n\nquery GetPayrollDashboardStats {\n  totalPayrolls: payrollsAggregate(where: {supersededDate: {_isNull: true}}) {\n    aggregate {\n      count\n    }\n  }\n  activePayrolls: payrollsAggregate(\n    where: {supersededDate: {_isNull: true}, status: {_eq: \"Active\"}}\n  ) {\n    aggregate {\n      count\n    }\n  }\n  totalEmployees: payrollsAggregate(where: {supersededDate: {_isNull: true}}) {\n    aggregate {\n      sum {\n        employeeCount\n      }\n    }\n  }\n  pendingPayrolls: payrollsAggregate(\n    where: {supersededDate: {_isNull: true}, status: {_eq: \"Implementation\"}}\n  ) {\n    aggregate {\n      count\n    }\n  }\n  recentPayrolls: payrolls(\n    where: {supersededDate: {_isNull: true}}\n    orderBy: {updatedAt: DESC}\n    limit: 5\n  ) {\n    ...PayrollDashboardCard\n  }\n}\n\nquery GetPayrollDashboardComplete($limit: Int = 20, $offset: Int = 0, $where: PayrollsBoolExp = {}, $orderBy: [PayrollsOrderBy!] = [{updatedAt: DESC}]) {\n  payrolls(\n    limit: $limit\n    offset: $offset\n    where: {_and: [{supersededDate: {_isNull: true}}, $where]}\n    orderBy: $orderBy\n  ) {\n    id\n    name\n    status\n    employeeCount\n    processingTime\n    dateValue\n    processingDaysBeforeEft\n    createdAt\n    updatedAt\n    client {\n      id\n      name\n      active\n      contactPerson\n    }\n    primaryConsultant {\n      id\n      firstName\n      lastName\n      computedName\n      email\n      role\n      isActive\n    }\n    backupConsultant {\n      id\n      firstName\n      lastName\n      computedName\n      email\n      role\n      isActive\n    }\n    assignedManager {\n      id\n      firstName\n      lastName\n      computedName\n      email\n      role\n      isActive\n    }\n    payrollCycle {\n      id\n      name\n      description\n    }\n    payrollDateType {\n      id\n      name\n      description\n    }\n    nextPayrollDate: payrollDates(\n      where: {adjustedEftDate: {_gte: \"now()\"}}\n      orderBy: {adjustedEftDate: ASC}\n      limit: 1\n    ) {\n      id\n      originalEftDate\n      adjustedEftDate\n      processingDate\n      notes\n    }\n    recentDates: payrollDates(orderBy: {originalEftDate: DESC}, limit: 3) {\n      id\n      originalEftDate\n      adjustedEftDate\n      processingDate\n    }\n  }\n  payrollsAggregate(where: {_and: [{supersededDate: {_isNull: true}}, $where]}) {\n    aggregate {\n      count\n    }\n  }\n  activePayrolls: payrollsAggregate(\n    where: {supersededDate: {_isNull: true}, status: {_eq: \"Active\"}}\n  ) {\n    aggregate {\n      count\n    }\n  }\n  totalEmployees: payrollsAggregate(where: {supersededDate: {_isNull: true}}) {\n    aggregate {\n      sum {\n        employeeCount\n      }\n    }\n  }\n  pendingPayrolls: payrollsAggregate(\n    where: {supersededDate: {_isNull: true}, status: {_eq: \"Implementation\"}}\n  ) {\n    aggregate {\n      count\n    }\n  }\n  draftPayrolls: payrollsAggregate(\n    where: {supersededDate: {_isNull: true}, status: {_eq: \"Draft\"}}\n  ) {\n    aggregate {\n      count\n    }\n  }\n  inactivePayrolls: payrollsAggregate(\n    where: {supersededDate: {_isNull: true}, status: {_eq: \"Inactive\"}}\n  ) {\n    aggregate {\n      count\n    }\n  }\n}\n\nquery GetUpcomingPayrolls($limit: Int = 10) {\n  payrolls(\n    where: {supersededDate: {_isNull: true}, status: {_eq: \"Active\"}, payrollDates: {originalEftDate: {_gte: \"now()\"}}}\n    orderBy: {updatedAt: DESC}\n    limit: $limit\n  ) {\n    ...PayrollDashboardCard\n    nextPayDate: payrollDates(\n      where: {originalEftDate: {_gte: \"now()\"}}\n      orderBy: {originalEftDate: ASC}\n      limit: 1\n    ) {\n      originalEftDate\n      adjustedEftDate\n      processingDate\n    }\n  }\n}\n\nquery SearchPayrolls($searchTerm: String!, $limit: Int = 50) {\n  payrolls(\n    where: {_and: [{supersededDate: {_isNull: true}}, {_or: [{name: {_ilike: $searchTerm}}, {client: {name: {_ilike: $searchTerm}}}, {primaryConsultant: {computedName: {_ilike: $searchTerm}}}]}]}\n    orderBy: {name: ASC}\n    limit: $limit\n  ) {\n    ...PayrollTableRow\n  }\n}\n\nquery GetPayrollsByStatus($status: payroll_status!) {\n  payrolls(\n    where: {supersededDate: {_isNull: true}, status: {_eq: $status}}\n    orderBy: {updatedAt: DESC}\n  ) {\n    ...PayrollListItem\n  }\n}\n\nquery GetPayrollsByProcessingTime($processingTime: Int!) {\n  payrolls(\n    where: {supersededDate: {_isNull: true}, processingTime: {_eq: $processingTime}}\n    orderBy: {name: ASC}\n  ) {\n    ...PayrollProcessingInfo\n  }\n}\n\nquery GetPayrollVersions($payrollId: uuid!) {\n  payrolls(\n    where: {_or: [{id: {_eq: $payrollId}}, {parentPayrollId: {_eq: $payrollId}}]}\n    orderBy: {versionNumber: DESC}\n  ) {\n    ...PayrollVersionInfo\n  }\n}\n\nquery GetPayrollHistory($payrollId: uuid!) {\n  payrolls(\n    where: {_or: [{id: {_eq: $payrollId}}, {parentPayrollId: {_eq: $payrollId}}]}\n    orderBy: {createdAt: DESC}\n  ) {\n    ...PayrollVersionInfo\n    status\n    supersededDate\n  }\n}\n\nquery GetLatestPayrollVersion($payrollId: uuid!) {\n  payrolls(\n    where: {_or: [{id: {_eq: $payrollId}}, {parentPayrollId: {_eq: $payrollId}}], supersededDate: {_isNull: true}}\n    limit: 1\n  ) {\n    ...PayrollWithAllRelations\n  }\n}\n\nquery GetPayrollCycles {\n  payrollCycles(orderBy: {name: ASC}) {\n    id\n    name\n    description\n    createdAt\n    updatedAt\n  }\n}\n\nquery GetPayrollDateTypes {\n  payrollDateTypes(orderBy: {name: ASC}) {\n    id\n    name\n    description\n    createdAt\n    updatedAt\n  }\n}\n\nquery GetPayrollDetailComplete($id: uuid!) {\n  payrollsByPk(id: $id) {\n    ...PayrollDetailed\n    client {\n      id\n      name\n    }\n    payrollCycle {\n      id\n      name\n      description\n    }\n    payrollDateType {\n      id\n      name\n    }\n    primaryConsultant {\n      id\n      firstName\n      lastName\n      computedName\n      email\n      role\n    }\n    backupConsultant {\n      id\n      firstName\n      lastName\n      computedName\n      email\n      role\n    }\n    assignedManager {\n      id\n      firstName\n      lastName\n      computedName\n      email\n      role\n    }\n    detailDates: payrollDates(orderBy: {originalEftDate: ASC}, limit: 12) {\n      id\n      originalEftDate\n      adjustedEftDate\n      processingDate\n      createdAt\n    }\n  }\n  users(where: {isActive: {_eq: true}}, orderBy: {computedName: ASC}) {\n    id\n    firstName\n    lastName\n    computedName\n    email\n    role\n    isStaff\n    isActive\n  }\n  payrollCycles(orderBy: {name: ASC}) {\n    id\n    name\n    description\n  }\n  payrollDateTypes(orderBy: {name: ASC}) {\n    id\n    name\n    description\n  }\n}\n\nquery GetPayrollDates($payrollId: uuid!) {\n  payrollDates(\n    where: {payrollId: {_eq: $payrollId}}\n    orderBy: {originalEftDate: ASC}\n  ) {\n    id\n    originalEftDate\n    adjustedEftDate\n    processingDate\n    notes\n    createdAt\n    updatedAt\n    payrollId\n  }\n}\n\nquery GetUpcomingPayrollDates($limit: Int = 20) {\n  payrollDates(\n    where: {originalEftDate: {_gte: \"now()\"}}\n    orderBy: {originalEftDate: ASC}\n    limit: $limit\n  ) {\n    id\n    originalEftDate\n    adjustedEftDate\n    processingDate\n    notes\n    payrollAssignments {\n      payrollDate {\n        payroll {\n          id\n          name\n          status\n          client {\n            id\n            name\n          }\n        }\n      }\n    }\n  }\n}\n\nquery GetPayrollDatesInRange($startDate: date!, $endDate: date!, $payrollId: uuid) {\n  payrollDates(\n    where: {originalEftDate: {_gte: $startDate, _lte: $endDate}, payrollId: {_eq: $payrollId}}\n    orderBy: {originalEftDate: ASC}\n  ) {\n    id\n    originalEftDate\n    adjustedEftDate\n    processingDate\n    notes\n    payrollAssignments {\n      payrollDate {\n        payroll {\n          id\n          name\n          client {\n            name\n          }\n        }\n      }\n    }\n  }\n}\n\nquery GetUnassignedPayrolls {\n  payrolls(\n    where: {supersededDate: {_isNull: true}, _or: [{primaryConsultantUserId: {_isNull: true}}, {backupConsultantUserId: {_isNull: true}}, {managerUserId: {_isNull: true}}]}\n    orderBy: {createdAt: DESC}\n  ) {\n    ...PayrollForAssignment\n  }\n}\n\nquery GetPayrollsNeedingAttention {\n  payrolls(\n    where: {supersededDate: {_isNull: true}, status: {_in: [\"pending_approval\", \"processing\", \"draft\"]}}\n    orderBy: {updatedAt: ASC}\n  ) {\n    ...PayrollListItem\n    primaryConsultant {\n      id\n      firstName\n      lastName\n      computedName\n    }\n    assignedManager {\n      id\n      firstName\n      lastName\n      computedName\n    }\n  }\n}\n\nquery GetPayrollsForBulkUpdate($ids: [uuid!]!) {\n  payrolls(where: {id: {_in: $ids}}) {\n    ...PayrollBasic\n  }\n}\n\nquery GetPayrollsForBulkAssignment($where: PayrollsBoolExp!) {\n  payrolls(where: $where) {\n    ...PayrollForAssignment\n  }\n}\n\nquery GetPayrollsForAudit($limit: Int = 100, $offset: Int = 0, $where: PayrollsBoolExp = {}) {\n  payrolls(\n    limit: $limit\n    offset: $offset\n    where: $where\n    orderBy: {updatedAt: DESC}\n  ) {\n    ...PayrollForAudit\n  }\n}\n\nquery GetPayrollActivity($payrollId: uuid!, $limit: Int = 50) {\n  payrolls(\n    where: {_or: [{id: {_eq: $payrollId}}, {parentPayrollId: {_eq: $payrollId}}]}\n    orderBy: {updatedAt: DESC}\n    limit: $limit\n  ) {\n    ...PayrollVersionInfo\n    status\n    supersededDate\n  }\n}\n\nquery GetPayrollsPaginated($limit: Int = 20, $offset: Int = 0, $where: PayrollsBoolExp = {}, $orderBy: [PayrollsOrderBy!] = [{createdAt: DESC}]) {\n  payrolls(\n    limit: $limit\n    offset: $offset\n    where: {_and: [{supersededDate: {_isNull: true}}, $where]}\n    orderBy: $orderBy\n  ) {\n    ...PayrollTableRow\n  }\n  payrollsAggregate(where: {_and: [{supersededDate: {_isNull: true}}, $where]}) {\n    aggregate {\n      count\n    }\n  }\n}\n\nquery SearchPayrollsPaginated($searchTerm: String!, $limit: Int = 20, $offset: Int = 0) {\n  payrolls(\n    where: {_and: [{supersededDate: {_isNull: true}}, {_or: [{name: {_ilike: $searchTerm}}, {client: {name: {_ilike: $searchTerm}}}, {primaryConsultant: {computedName: {_ilike: $searchTerm}}}, {backupConsultant: {computedName: {_ilike: $searchTerm}}}]}]}\n    orderBy: {name: ASC}\n    limit: $limit\n    offset: $offset\n  ) {\n    ...PayrollTableRow\n  }\n  searchAggregate: payrollsAggregate(\n    where: {_and: [{supersededDate: {_isNull: true}}, {_or: [{name: {_ilike: $searchTerm}}, {client: {name: {_ilike: $searchTerm}}}, {primaryConsultant: {computedName: {_ilike: $searchTerm}}}, {backupConsultant: {computedName: {_ilike: $searchTerm}}}]}]}\n  ) {\n    aggregate {\n      count\n    }\n  }\n}\n\nquery GetPayrollsQuickList {\n  payrolls(where: {supersededDate: {_isNull: true}}, orderBy: {name: ASC}) {\n    ...PayrollMinimal\n  }\n}\n\nquery GetActivePayrollsQuickList {\n  payrolls(\n    where: {supersededDate: {_isNull: true}, status: {_eq: \"Active\"}}\n    orderBy: {name: ASC}\n  ) {\n    ...PayrollMinimal\n  }\n}\n\nquery GetClientPayrollsQuickList($clientId: uuid!) {\n  payrolls(\n    where: {clientId: {_eq: $clientId}, supersededDate: {_isNull: true}}\n    orderBy: {name: ASC}\n  ) {\n    ...PayrollMinimal\n  }\n}\n\nquery GeneratePayrollDates($payrollId: uuid!, $startDate: date!, $endDate: date!, $maxDates: Int = 100) {\n  payrollDates(\n    where: {payrollId: {_eq: $payrollId}, originalEftDate: {_gte: $startDate, _lte: $endDate}}\n    limit: $maxDates\n    orderBy: {originalEftDate: ASC}\n  ) {\n    id\n    originalEftDate\n    adjustedEftDate\n    processingDate\n    notes\n    payrollId\n    createdAt\n    updatedAt\n  }\n}\n\nquery GeneratePayrollDatesQuery($payrollId: uuid!, $startDate: date!, $endDate: date!, $maxDates: Int = 100) {\n  payrollDates(\n    where: {payrollId: {_eq: $payrollId}, originalEftDate: {_gte: $startDate, _lte: $endDate}}\n    limit: $maxDates\n    orderBy: {originalEftDate: ASC}\n  ) {\n    id\n    originalEftDate\n    adjustedEftDate\n    processingDate\n    notes\n    payrollId\n    createdAt\n    updatedAt\n  }\n}\n\nquery GetUserUpcomingPayrolls($userId: uuid!, $limit: Int = 10) {\n  payrolls(\n    where: {supersededDate: {_isNull: true}, status: {_eq: \"Active\"}, _or: [{primaryConsultantUserId: {_eq: $userId}}, {backupConsultantUserId: {_eq: $userId}}, {managerUserId: {_eq: $userId}}]}\n    orderBy: {updatedAt: DESC}\n    limit: $limit\n  ) {\n    ...PayrollDashboardCard\n    nextPayDate: payrollDates(\n      where: {_or: [{adjustedEftDate: {_gte: \"now()\"}}, {originalEftDate: {_gte: \"now()\"}}]}\n      orderBy: [{adjustedEftDate: ASC}, {originalEftDate: ASC}]\n      limit: 1\n    ) {\n      originalEftDate\n      adjustedEftDate\n      processingDate\n    }\n    backupConsultant {\n      id\n      firstName\n      lastName\n      computedName\n      email\n    }\n    assignedManager {\n      id\n      firstName\n      lastName\n      computedName\n      email\n    }\n  }\n}\n\nquery GetPayrollsByMonth($startDate: date!, $endDate: date!) {\n  payrolls(\n    where: {supersededDate: {_isNull: true}, payrollDates: {originalEftDate: {_gte: $startDate, _lt: $endDate}}}\n    orderBy: {createdAt: DESC}\n  ) {\n    ...PayrollWithDates\n    client {\n      id\n      name\n    }\n    primaryConsultant {\n      id\n      firstName\n      lastName\n      computedName\n      email\n      role\n      isActive\n    }\n    backupConsultant {\n      id\n      firstName\n      lastName\n      computedName\n      email\n      role\n      isActive\n    }\n    assignedManager {\n      id\n      firstName\n      lastName\n      computedName\n      email\n      role\n      isActive\n    }\n  }\n}\n\nquery GetPayrollFamilyDates($payrollId: uuid!) {\n  payrolls(\n    where: {_or: [{id: {_eq: $payrollId}}, {parentPayrollId: {_eq: $payrollId}}]}\n    orderBy: {versionNumber: DESC}\n  ) {\n    id\n    name\n    versionNumber\n    status\n    supersededDate\n    payrollDates(orderBy: {originalEftDate: ASC}) {\n      ...PayrollDate\n    }\n  }\n}\n\nquery GetPayrollsMissingDates {\n  payrolls(\n    where: {supersededDate: {_isNull: true}, status: {_eq: \"Active\"}, _not: {payrollDates: {}}}\n    orderBy: {name: ASC}\n  ) {\n    ...PayrollListItem\n    payrollCycle {\n      id\n      name\n      description\n    }\n    payrollDateType {\n      id\n      name\n      description\n    }\n  }\n}\n\nquery GetPayrollsTableEnhanced($limit: Int = 100, $offset: Int = 0, $where: PayrollsBoolExp = {}, $orderBy: [PayrollsOrderBy!] = [{name: ASC}]) {\n  payrolls(\n    limit: $limit\n    offset: $offset\n    where: {_and: [{supersededDate: {_isNull: true}}, $where]}\n    orderBy: $orderBy\n  ) {\n    id\n    name\n    status\n    employeeCount\n    dateValue\n    processingDaysBeforeEft\n    createdAt\n    updatedAt\n    client {\n      id\n      name\n      active\n    }\n    payrollCycle {\n      id\n      name\n      description\n    }\n    payrollDateType {\n      id\n      name\n      description\n    }\n    primaryConsultant {\n      id\n      firstName\n      lastName\n      computedName\n      email\n      role\n    }\n    backupConsultant {\n      id\n      firstName\n      lastName\n      computedName\n      email\n      role\n    }\n    assignedManager {\n      id\n      firstName\n      lastName\n      computedName\n      email\n      role\n    }\n    nextEftDate: payrollDates(\n      where: {adjustedEftDate: {_gte: \"now()\"}}\n      orderBy: {adjustedEftDate: ASC}\n      limit: 1\n    ) {\n      id\n      originalEftDate\n      adjustedEftDate\n      processingDate\n      notes\n    }\n  }\n  payrollsAggregate(where: {_and: [{supersededDate: {_isNull: true}}, $where]}) {\n    aggregate {\n      count\n    }\n  }\n}\n\nquery GeneratePayrollReport($startDate: date!, $endDate: date!) {\n  payrolls(\n    where: {supersededDate: {_isNull: true}, payrollDates: {originalEftDate: {_gte: $startDate, _lte: $endDate}}}\n    orderBy: {name: ASC}\n  ) {\n    ...PayrollForAudit\n    client {\n      id\n      name\n    }\n    primaryConsultant {\n      id\n      firstName\n      lastName\n      computedName\n    }\n    backupConsultant {\n      id\n      firstName\n      lastName\n      computedName\n    }\n    assignedManager {\n      id\n      firstName\n      lastName\n      computedName\n    }\n    payrollDates(\n      where: {originalEftDate: {_gte: $startDate, _lte: $endDate}}\n      orderBy: {originalEftDate: ASC}\n    ) {\n      id\n      originalEftDate\n      adjustedEftDate\n      processingDate\n      notes\n    }\n  }\n  reportMetadata: payrollsAggregate(\n    where: {supersededDate: {_isNull: true}, payrollDates: {originalEftDate: {_gte: $startDate, _lte: $endDate}}}\n  ) {\n    aggregate {\n      count\n    }\n  }\n}"): (typeof documents)["query GetPayrolls($limit: Int = 50, $offset: Int = 0, $where: PayrollsBoolExp) {\n  payrolls(\n    limit: $limit\n    offset: $offset\n    where: $where\n    orderBy: {createdAt: DESC}\n  ) {\n    ...PayrollListItem\n  }\n  payrollsAggregate(where: $where) {\n    aggregate {\n      count\n    }\n  }\n}\n\nquery GetPayrollById($id: uuid!) {\n  payrollsByPk(id: $id) {\n    ...PayrollWithAllRelations\n  }\n}\n\nquery GetPayrollBasic($id: uuid!) {\n  payrollsByPk(id: $id) {\n    ...PayrollBasic\n  }\n}\n\nquery GetPayrollForEdit($id: uuid!) {\n  payrollsByPk(id: $id) {\n    ...PayrollDetailed\n    client {\n      id\n      name\n    }\n    payrollCycle {\n      id\n      name\n      description\n    }\n    payrollDateType {\n      id\n      name\n    }\n    primaryConsultantUserId\n    backupConsultantUserId\n    managerUserId\n    primaryConsultant {\n      id\n      firstName\n      lastName\n      computedName\n      email\n      role\n    }\n    backupConsultant {\n      id\n      firstName\n      lastName\n      computedName\n      email\n      role\n    }\n    assignedManager {\n      id\n      firstName\n      lastName\n      computedName\n      email\n      role\n    }\n  }\n}\n\nquery GetPayrollsSimple {\n  payrolls(where: {supersededDate: {_isNull: true}}, orderBy: {name: ASC}) {\n    ...PayrollMinimal\n  }\n}\n\nquery GetActivePayrolls {\n  payrolls(\n    where: {supersededDate: {_isNull: true}, status: {_neq: \"Inactive\"}}\n    orderBy: {name: ASC}\n  ) {\n    ...PayrollSummary\n    client {\n      id\n      name\n    }\n  }\n}\n\nquery GetPayrollsByClient($clientId: uuid!) {\n  payrolls(\n    where: {clientId: {_eq: $clientId}, supersededDate: {_isNull: true}}\n    orderBy: {createdAt: DESC}\n  ) {\n    ...PayrollListItem\n  }\n}\n\nquery GetPayrollsByUser($userId: uuid!) {\n  primaryPayrolls: payrolls(\n    where: {primaryConsultantUserId: {_eq: $userId}, supersededDate: {_isNull: true}}\n    orderBy: {name: ASC}\n  ) {\n    ...PayrollWorkload\n  }\n  backupPayrolls: payrolls(\n    where: {backupConsultantUserId: {_eq: $userId}, supersededDate: {_isNull: true}}\n    orderBy: {name: ASC}\n  ) {\n    ...PayrollWorkload\n  }\n  managedPayrolls: payrolls(\n    where: {managerUserId: {_eq: $userId}, supersededDate: {_isNull: true}}\n    orderBy: {name: ASC}\n  ) {\n    ...PayrollWorkload\n  }\n}\n\nquery GetPayrollDashboardStats {\n  totalPayrolls: payrollsAggregate(where: {supersededDate: {_isNull: true}}) {\n    aggregate {\n      count\n    }\n  }\n  activePayrolls: payrollsAggregate(\n    where: {supersededDate: {_isNull: true}, status: {_eq: \"Active\"}}\n  ) {\n    aggregate {\n      count\n    }\n  }\n  totalEmployees: payrollsAggregate(where: {supersededDate: {_isNull: true}}) {\n    aggregate {\n      sum {\n        employeeCount\n      }\n    }\n  }\n  pendingPayrolls: payrollsAggregate(\n    where: {supersededDate: {_isNull: true}, status: {_eq: \"Implementation\"}}\n  ) {\n    aggregate {\n      count\n    }\n  }\n  recentPayrolls: payrolls(\n    where: {supersededDate: {_isNull: true}}\n    orderBy: {updatedAt: DESC}\n    limit: 5\n  ) {\n    ...PayrollDashboardCard\n  }\n}\n\nquery GetPayrollDashboardComplete($limit: Int = 20, $offset: Int = 0, $where: PayrollsBoolExp = {}, $orderBy: [PayrollsOrderBy!] = [{updatedAt: DESC}]) {\n  payrolls(\n    limit: $limit\n    offset: $offset\n    where: {_and: [{supersededDate: {_isNull: true}}, $where]}\n    orderBy: $orderBy\n  ) {\n    id\n    name\n    status\n    employeeCount\n    processingTime\n    dateValue\n    processingDaysBeforeEft\n    createdAt\n    updatedAt\n    client {\n      id\n      name\n      active\n      contactPerson\n    }\n    primaryConsultant {\n      id\n      firstName\n      lastName\n      computedName\n      email\n      role\n      isActive\n    }\n    backupConsultant {\n      id\n      firstName\n      lastName\n      computedName\n      email\n      role\n      isActive\n    }\n    assignedManager {\n      id\n      firstName\n      lastName\n      computedName\n      email\n      role\n      isActive\n    }\n    payrollCycle {\n      id\n      name\n      description\n    }\n    payrollDateType {\n      id\n      name\n      description\n    }\n    nextPayrollDate: payrollDates(\n      where: {adjustedEftDate: {_gte: \"now()\"}}\n      orderBy: {adjustedEftDate: ASC}\n      limit: 1\n    ) {\n      id\n      originalEftDate\n      adjustedEftDate\n      processingDate\n      notes\n    }\n    recentDates: payrollDates(orderBy: {originalEftDate: DESC}, limit: 3) {\n      id\n      originalEftDate\n      adjustedEftDate\n      processingDate\n    }\n  }\n  payrollsAggregate(where: {_and: [{supersededDate: {_isNull: true}}, $where]}) {\n    aggregate {\n      count\n    }\n  }\n  activePayrolls: payrollsAggregate(\n    where: {supersededDate: {_isNull: true}, status: {_eq: \"Active\"}}\n  ) {\n    aggregate {\n      count\n    }\n  }\n  totalEmployees: payrollsAggregate(where: {supersededDate: {_isNull: true}}) {\n    aggregate {\n      sum {\n        employeeCount\n      }\n    }\n  }\n  pendingPayrolls: payrollsAggregate(\n    where: {supersededDate: {_isNull: true}, status: {_eq: \"Implementation\"}}\n  ) {\n    aggregate {\n      count\n    }\n  }\n  draftPayrolls: payrollsAggregate(\n    where: {supersededDate: {_isNull: true}, status: {_eq: \"Draft\"}}\n  ) {\n    aggregate {\n      count\n    }\n  }\n  inactivePayrolls: payrollsAggregate(\n    where: {supersededDate: {_isNull: true}, status: {_eq: \"Inactive\"}}\n  ) {\n    aggregate {\n      count\n    }\n  }\n}\n\nquery GetUpcomingPayrolls($limit: Int = 10) {\n  payrolls(\n    where: {supersededDate: {_isNull: true}, status: {_eq: \"Active\"}, payrollDates: {originalEftDate: {_gte: \"now()\"}}}\n    orderBy: {updatedAt: DESC}\n    limit: $limit\n  ) {\n    ...PayrollDashboardCard\n    nextPayDate: payrollDates(\n      where: {originalEftDate: {_gte: \"now()\"}}\n      orderBy: {originalEftDate: ASC}\n      limit: 1\n    ) {\n      originalEftDate\n      adjustedEftDate\n      processingDate\n    }\n  }\n}\n\nquery SearchPayrolls($searchTerm: String!, $limit: Int = 50) {\n  payrolls(\n    where: {_and: [{supersededDate: {_isNull: true}}, {_or: [{name: {_ilike: $searchTerm}}, {client: {name: {_ilike: $searchTerm}}}, {primaryConsultant: {computedName: {_ilike: $searchTerm}}}]}]}\n    orderBy: {name: ASC}\n    limit: $limit\n  ) {\n    ...PayrollTableRow\n  }\n}\n\nquery GetPayrollsByStatus($status: payroll_status!) {\n  payrolls(\n    where: {supersededDate: {_isNull: true}, status: {_eq: $status}}\n    orderBy: {updatedAt: DESC}\n  ) {\n    ...PayrollListItem\n  }\n}\n\nquery GetPayrollsByProcessingTime($processingTime: Int!) {\n  payrolls(\n    where: {supersededDate: {_isNull: true}, processingTime: {_eq: $processingTime}}\n    orderBy: {name: ASC}\n  ) {\n    ...PayrollProcessingInfo\n  }\n}\n\nquery GetPayrollVersions($payrollId: uuid!) {\n  payrolls(\n    where: {_or: [{id: {_eq: $payrollId}}, {parentPayrollId: {_eq: $payrollId}}]}\n    orderBy: {versionNumber: DESC}\n  ) {\n    ...PayrollVersionInfo\n  }\n}\n\nquery GetPayrollHistory($payrollId: uuid!) {\n  payrolls(\n    where: {_or: [{id: {_eq: $payrollId}}, {parentPayrollId: {_eq: $payrollId}}]}\n    orderBy: {createdAt: DESC}\n  ) {\n    ...PayrollVersionInfo\n    status\n    supersededDate\n  }\n}\n\nquery GetLatestPayrollVersion($payrollId: uuid!) {\n  payrolls(\n    where: {_or: [{id: {_eq: $payrollId}}, {parentPayrollId: {_eq: $payrollId}}], supersededDate: {_isNull: true}}\n    limit: 1\n  ) {\n    ...PayrollWithAllRelations\n  }\n}\n\nquery GetPayrollCycles {\n  payrollCycles(orderBy: {name: ASC}) {\n    id\n    name\n    description\n    createdAt\n    updatedAt\n  }\n}\n\nquery GetPayrollDateTypes {\n  payrollDateTypes(orderBy: {name: ASC}) {\n    id\n    name\n    description\n    createdAt\n    updatedAt\n  }\n}\n\nquery GetPayrollDetailComplete($id: uuid!) {\n  payrollsByPk(id: $id) {\n    ...PayrollDetailed\n    client {\n      id\n      name\n    }\n    payrollCycle {\n      id\n      name\n      description\n    }\n    payrollDateType {\n      id\n      name\n    }\n    primaryConsultant {\n      id\n      firstName\n      lastName\n      computedName\n      email\n      role\n    }\n    backupConsultant {\n      id\n      firstName\n      lastName\n      computedName\n      email\n      role\n    }\n    assignedManager {\n      id\n      firstName\n      lastName\n      computedName\n      email\n      role\n    }\n    detailDates: payrollDates(orderBy: {originalEftDate: ASC}, limit: 12) {\n      id\n      originalEftDate\n      adjustedEftDate\n      processingDate\n      createdAt\n    }\n  }\n  users(where: {isActive: {_eq: true}}, orderBy: {computedName: ASC}) {\n    id\n    firstName\n    lastName\n    computedName\n    email\n    role\n    isStaff\n    isActive\n  }\n  payrollCycles(orderBy: {name: ASC}) {\n    id\n    name\n    description\n  }\n  payrollDateTypes(orderBy: {name: ASC}) {\n    id\n    name\n    description\n  }\n}\n\nquery GetPayrollDates($payrollId: uuid!) {\n  payrollDates(\n    where: {payrollId: {_eq: $payrollId}}\n    orderBy: {originalEftDate: ASC}\n  ) {\n    id\n    originalEftDate\n    adjustedEftDate\n    processingDate\n    notes\n    createdAt\n    updatedAt\n    payrollId\n  }\n}\n\nquery GetUpcomingPayrollDates($limit: Int = 20) {\n  payrollDates(\n    where: {originalEftDate: {_gte: \"now()\"}}\n    orderBy: {originalEftDate: ASC}\n    limit: $limit\n  ) {\n    id\n    originalEftDate\n    adjustedEftDate\n    processingDate\n    notes\n    payrollAssignments {\n      payrollDate {\n        payroll {\n          id\n          name\n          status\n          client {\n            id\n            name\n          }\n        }\n      }\n    }\n  }\n}\n\nquery GetPayrollDatesInRange($startDate: date!, $endDate: date!, $payrollId: uuid) {\n  payrollDates(\n    where: {originalEftDate: {_gte: $startDate, _lte: $endDate}, payrollId: {_eq: $payrollId}}\n    orderBy: {originalEftDate: ASC}\n  ) {\n    id\n    originalEftDate\n    adjustedEftDate\n    processingDate\n    notes\n    payrollAssignments {\n      payrollDate {\n        payroll {\n          id\n          name\n          client {\n            name\n          }\n        }\n      }\n    }\n  }\n}\n\nquery GetUnassignedPayrolls {\n  payrolls(\n    where: {supersededDate: {_isNull: true}, _or: [{primaryConsultantUserId: {_isNull: true}}, {backupConsultantUserId: {_isNull: true}}, {managerUserId: {_isNull: true}}]}\n    orderBy: {createdAt: DESC}\n  ) {\n    ...PayrollForAssignment\n  }\n}\n\nquery GetPayrollsNeedingAttention {\n  payrolls(\n    where: {supersededDate: {_isNull: true}, status: {_in: [\"pending_approval\", \"processing\", \"draft\"]}}\n    orderBy: {updatedAt: ASC}\n  ) {\n    ...PayrollListItem\n    primaryConsultant {\n      id\n      firstName\n      lastName\n      computedName\n    }\n    assignedManager {\n      id\n      firstName\n      lastName\n      computedName\n    }\n  }\n}\n\nquery GetPayrollsForBulkUpdate($ids: [uuid!]!) {\n  payrolls(where: {id: {_in: $ids}}) {\n    ...PayrollBasic\n  }\n}\n\nquery GetPayrollsForBulkAssignment($where: PayrollsBoolExp!) {\n  payrolls(where: $where) {\n    ...PayrollForAssignment\n  }\n}\n\nquery GetPayrollsForAudit($limit: Int = 100, $offset: Int = 0, $where: PayrollsBoolExp = {}) {\n  payrolls(\n    limit: $limit\n    offset: $offset\n    where: $where\n    orderBy: {updatedAt: DESC}\n  ) {\n    ...PayrollForAudit\n  }\n}\n\nquery GetPayrollActivity($payrollId: uuid!, $limit: Int = 50) {\n  payrolls(\n    where: {_or: [{id: {_eq: $payrollId}}, {parentPayrollId: {_eq: $payrollId}}]}\n    orderBy: {updatedAt: DESC}\n    limit: $limit\n  ) {\n    ...PayrollVersionInfo\n    status\n    supersededDate\n  }\n}\n\nquery GetPayrollsPaginated($limit: Int = 20, $offset: Int = 0, $where: PayrollsBoolExp = {}, $orderBy: [PayrollsOrderBy!] = [{createdAt: DESC}]) {\n  payrolls(\n    limit: $limit\n    offset: $offset\n    where: {_and: [{supersededDate: {_isNull: true}}, $where]}\n    orderBy: $orderBy\n  ) {\n    ...PayrollTableRow\n  }\n  payrollsAggregate(where: {_and: [{supersededDate: {_isNull: true}}, $where]}) {\n    aggregate {\n      count\n    }\n  }\n}\n\nquery SearchPayrollsPaginated($searchTerm: String!, $limit: Int = 20, $offset: Int = 0) {\n  payrolls(\n    where: {_and: [{supersededDate: {_isNull: true}}, {_or: [{name: {_ilike: $searchTerm}}, {client: {name: {_ilike: $searchTerm}}}, {primaryConsultant: {computedName: {_ilike: $searchTerm}}}, {backupConsultant: {computedName: {_ilike: $searchTerm}}}]}]}\n    orderBy: {name: ASC}\n    limit: $limit\n    offset: $offset\n  ) {\n    ...PayrollTableRow\n  }\n  searchAggregate: payrollsAggregate(\n    where: {_and: [{supersededDate: {_isNull: true}}, {_or: [{name: {_ilike: $searchTerm}}, {client: {name: {_ilike: $searchTerm}}}, {primaryConsultant: {computedName: {_ilike: $searchTerm}}}, {backupConsultant: {computedName: {_ilike: $searchTerm}}}]}]}\n  ) {\n    aggregate {\n      count\n    }\n  }\n}\n\nquery GetPayrollsQuickList {\n  payrolls(where: {supersededDate: {_isNull: true}}, orderBy: {name: ASC}) {\n    ...PayrollMinimal\n  }\n}\n\nquery GetActivePayrollsQuickList {\n  payrolls(\n    where: {supersededDate: {_isNull: true}, status: {_eq: \"Active\"}}\n    orderBy: {name: ASC}\n  ) {\n    ...PayrollMinimal\n  }\n}\n\nquery GetClientPayrollsQuickList($clientId: uuid!) {\n  payrolls(\n    where: {clientId: {_eq: $clientId}, supersededDate: {_isNull: true}}\n    orderBy: {name: ASC}\n  ) {\n    ...PayrollMinimal\n  }\n}\n\nquery GeneratePayrollDates($payrollId: uuid!, $startDate: date!, $endDate: date!, $maxDates: Int = 100) {\n  payrollDates(\n    where: {payrollId: {_eq: $payrollId}, originalEftDate: {_gte: $startDate, _lte: $endDate}}\n    limit: $maxDates\n    orderBy: {originalEftDate: ASC}\n  ) {\n    id\n    originalEftDate\n    adjustedEftDate\n    processingDate\n    notes\n    payrollId\n    createdAt\n    updatedAt\n  }\n}\n\nquery GeneratePayrollDatesQuery($payrollId: uuid!, $startDate: date!, $endDate: date!, $maxDates: Int = 100) {\n  payrollDates(\n    where: {payrollId: {_eq: $payrollId}, originalEftDate: {_gte: $startDate, _lte: $endDate}}\n    limit: $maxDates\n    orderBy: {originalEftDate: ASC}\n  ) {\n    id\n    originalEftDate\n    adjustedEftDate\n    processingDate\n    notes\n    payrollId\n    createdAt\n    updatedAt\n  }\n}\n\nquery GetUserUpcomingPayrolls($userId: uuid!, $limit: Int = 10) {\n  payrolls(\n    where: {supersededDate: {_isNull: true}, status: {_eq: \"Active\"}, _or: [{primaryConsultantUserId: {_eq: $userId}}, {backupConsultantUserId: {_eq: $userId}}, {managerUserId: {_eq: $userId}}]}\n    orderBy: {updatedAt: DESC}\n    limit: $limit\n  ) {\n    ...PayrollDashboardCard\n    nextPayDate: payrollDates(\n      where: {_or: [{adjustedEftDate: {_gte: \"now()\"}}, {originalEftDate: {_gte: \"now()\"}}]}\n      orderBy: [{adjustedEftDate: ASC}, {originalEftDate: ASC}]\n      limit: 1\n    ) {\n      originalEftDate\n      adjustedEftDate\n      processingDate\n    }\n    backupConsultant {\n      id\n      firstName\n      lastName\n      computedName\n      email\n    }\n    assignedManager {\n      id\n      firstName\n      lastName\n      computedName\n      email\n    }\n  }\n}\n\nquery GetPayrollsByMonth($startDate: date!, $endDate: date!) {\n  payrolls(\n    where: {supersededDate: {_isNull: true}, payrollDates: {originalEftDate: {_gte: $startDate, _lt: $endDate}}}\n    orderBy: {createdAt: DESC}\n  ) {\n    ...PayrollWithDates\n    client {\n      id\n      name\n    }\n    primaryConsultant {\n      id\n      firstName\n      lastName\n      computedName\n      email\n      role\n      isActive\n    }\n    backupConsultant {\n      id\n      firstName\n      lastName\n      computedName\n      email\n      role\n      isActive\n    }\n    assignedManager {\n      id\n      firstName\n      lastName\n      computedName\n      email\n      role\n      isActive\n    }\n  }\n}\n\nquery GetPayrollFamilyDates($payrollId: uuid!) {\n  payrolls(\n    where: {_or: [{id: {_eq: $payrollId}}, {parentPayrollId: {_eq: $payrollId}}]}\n    orderBy: {versionNumber: DESC}\n  ) {\n    id\n    name\n    versionNumber\n    status\n    supersededDate\n    payrollDates(orderBy: {originalEftDate: ASC}) {\n      ...PayrollDate\n    }\n  }\n}\n\nquery GetPayrollsMissingDates {\n  payrolls(\n    where: {supersededDate: {_isNull: true}, status: {_eq: \"Active\"}, _not: {payrollDates: {}}}\n    orderBy: {name: ASC}\n  ) {\n    ...PayrollListItem\n    payrollCycle {\n      id\n      name\n      description\n    }\n    payrollDateType {\n      id\n      name\n      description\n    }\n  }\n}\n\nquery GetPayrollsTableEnhanced($limit: Int = 100, $offset: Int = 0, $where: PayrollsBoolExp = {}, $orderBy: [PayrollsOrderBy!] = [{name: ASC}]) {\n  payrolls(\n    limit: $limit\n    offset: $offset\n    where: {_and: [{supersededDate: {_isNull: true}}, $where]}\n    orderBy: $orderBy\n  ) {\n    id\n    name\n    status\n    employeeCount\n    dateValue\n    processingDaysBeforeEft\n    createdAt\n    updatedAt\n    client {\n      id\n      name\n      active\n    }\n    payrollCycle {\n      id\n      name\n      description\n    }\n    payrollDateType {\n      id\n      name\n      description\n    }\n    primaryConsultant {\n      id\n      firstName\n      lastName\n      computedName\n      email\n      role\n    }\n    backupConsultant {\n      id\n      firstName\n      lastName\n      computedName\n      email\n      role\n    }\n    assignedManager {\n      id\n      firstName\n      lastName\n      computedName\n      email\n      role\n    }\n    nextEftDate: payrollDates(\n      where: {adjustedEftDate: {_gte: \"now()\"}}\n      orderBy: {adjustedEftDate: ASC}\n      limit: 1\n    ) {\n      id\n      originalEftDate\n      adjustedEftDate\n      processingDate\n      notes\n    }\n  }\n  payrollsAggregate(where: {_and: [{supersededDate: {_isNull: true}}, $where]}) {\n    aggregate {\n      count\n    }\n  }\n}\n\nquery GeneratePayrollReport($startDate: date!, $endDate: date!) {\n  payrolls(\n    where: {supersededDate: {_isNull: true}, payrollDates: {originalEftDate: {_gte: $startDate, _lte: $endDate}}}\n    orderBy: {name: ASC}\n  ) {\n    ...PayrollForAudit\n    client {\n      id\n      name\n    }\n    primaryConsultant {\n      id\n      firstName\n      lastName\n      computedName\n    }\n    backupConsultant {\n      id\n      firstName\n      lastName\n      computedName\n    }\n    assignedManager {\n      id\n      firstName\n      lastName\n      computedName\n    }\n    payrollDates(\n      where: {originalEftDate: {_gte: $startDate, _lte: $endDate}}\n      orderBy: {originalEftDate: ASC}\n    ) {\n      id\n      originalEftDate\n      adjustedEftDate\n      processingDate\n      notes\n    }\n  }\n  reportMetadata: payrollsAggregate(\n    where: {supersededDate: {_isNull: true}, payrollDates: {originalEftDate: {_gte: $startDate, _lte: $endDate}}}\n  ) {\n    aggregate {\n      count\n    }\n  }\n}"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "subscription PayrollsUpdates {\n  payrolls(where: {supersededDate: {_isNull: true}}, orderBy: {updatedAt: DESC}) {\n    ...PayrollListItem\n  }\n}\n\nsubscription PayrollUpdates($id: uuid!) {\n  payrolls(where: {id: {_eq: $id}}) {\n    ...PayrollDetailed\n  }\n}\n\nsubscription ActivePayrollsUpdates {\n  payrolls(\n    where: {supersededDate: {_isNull: true}, status: {_eq: \"Active\"}}\n    orderBy: {name: ASC}\n  ) {\n    ...PayrollSummary\n    client {\n      id\n      name\n    }\n  }\n}\n\nsubscription PayrollStatsUpdates {\n  payrollsAggregate(where: {supersededDate: {_isNull: true}}) {\n    aggregate {\n      count\n    }\n  }\n}\n\nsubscription UnassignedPayrollsUpdates {\n  payrolls(\n    where: {supersededDate: {_isNull: true}, _or: [{primaryConsultantUserId: {_isNull: true}}, {backupConsultantUserId: {_isNull: true}}, {managerUserId: {_isNull: true}}]}\n  ) {\n    ...PayrollForAssignment\n  }\n}\n\nsubscription PayrollDatesUpdates($payrollId: uuid!) {\n  payrollDates(\n    where: {payrollId: {_eq: $payrollId}}\n    orderBy: {originalEftDate: ASC}\n  ) {\n    id\n    originalEftDate\n    adjustedEftDate\n    processingDate\n    notes\n    updatedAt\n  }\n}\n\nsubscription UpcomingPayrollDatesUpdates {\n  payrollDates(\n    where: {originalEftDate: {_gte: \"now()\"}}\n    orderBy: {originalEftDate: ASC}\n    limit: 20\n  ) {\n    id\n    originalEftDate\n    adjustedEftDate\n    processingDate\n    notes\n    payrollId\n  }\n}\n\nsubscription PayrollSystemHealthUpdates {\n  payrolls(\n    where: {supersededDate: {_isNull: true}, status: {_in: [\"pending_approval\", \"processing\", \"draft\"]}}\n    orderBy: {updatedAt: ASC}\n  ) {\n    ...PayrollListItem\n    primaryConsultant {\n      id\n      firstName\n      lastName\n      computedName\n    }\n    assignedManager {\n      id\n      firstName\n      lastName\n      computedName\n    }\n  }\n}\n\nsubscription PayrollSubscription {\n  payrolls(where: {supersededDate: {_isNull: true}}, orderBy: {updatedAt: DESC}) {\n    ...PayrollListItem\n  }\n}"): (typeof documents)["subscription PayrollsUpdates {\n  payrolls(where: {supersededDate: {_isNull: true}}, orderBy: {updatedAt: DESC}) {\n    ...PayrollListItem\n  }\n}\n\nsubscription PayrollUpdates($id: uuid!) {\n  payrolls(where: {id: {_eq: $id}}) {\n    ...PayrollDetailed\n  }\n}\n\nsubscription ActivePayrollsUpdates {\n  payrolls(\n    where: {supersededDate: {_isNull: true}, status: {_eq: \"Active\"}}\n    orderBy: {name: ASC}\n  ) {\n    ...PayrollSummary\n    client {\n      id\n      name\n    }\n  }\n}\n\nsubscription PayrollStatsUpdates {\n  payrollsAggregate(where: {supersededDate: {_isNull: true}}) {\n    aggregate {\n      count\n    }\n  }\n}\n\nsubscription UnassignedPayrollsUpdates {\n  payrolls(\n    where: {supersededDate: {_isNull: true}, _or: [{primaryConsultantUserId: {_isNull: true}}, {backupConsultantUserId: {_isNull: true}}, {managerUserId: {_isNull: true}}]}\n  ) {\n    ...PayrollForAssignment\n  }\n}\n\nsubscription PayrollDatesUpdates($payrollId: uuid!) {\n  payrollDates(\n    where: {payrollId: {_eq: $payrollId}}\n    orderBy: {originalEftDate: ASC}\n  ) {\n    id\n    originalEftDate\n    adjustedEftDate\n    processingDate\n    notes\n    updatedAt\n  }\n}\n\nsubscription UpcomingPayrollDatesUpdates {\n  payrollDates(\n    where: {originalEftDate: {_gte: \"now()\"}}\n    orderBy: {originalEftDate: ASC}\n    limit: 20\n  ) {\n    id\n    originalEftDate\n    adjustedEftDate\n    processingDate\n    notes\n    payrollId\n  }\n}\n\nsubscription PayrollSystemHealthUpdates {\n  payrolls(\n    where: {supersededDate: {_isNull: true}, status: {_in: [\"pending_approval\", \"processing\", \"draft\"]}}\n    orderBy: {updatedAt: ASC}\n  ) {\n    ...PayrollListItem\n    primaryConsultant {\n      id\n      firstName\n      lastName\n      computedName\n    }\n    assignedManager {\n      id\n      firstName\n      lastName\n      computedName\n    }\n  }\n}\n\nsubscription PayrollSubscription {\n  payrolls(where: {supersededDate: {_isNull: true}}, orderBy: {updatedAt: DESC}) {\n    ...PayrollListItem\n  }\n}"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "fragment UserMinimal on Users {\n  id\n  firstName\n  lastName\n  computedName\n  email\n}\n\nfragment UserCoreShared on Users {\n  ...UserMinimal\n  role\n  isActive\n}\n\nfragment UserBasic on Users {\n  ...UserCoreShared\n  clerkUserId\n  createdAt\n  updatedAt\n}\n\nfragment UserBase on Users {\n  ...UserBasic\n}\n\nfragment UserWithRole on Users {\n  ...UserBasic\n  username\n  isStaff\n}\n\nfragment UserProfile on Users {\n  ...UserWithRole\n  clerkUserId\n  image\n  managerId\n  deactivatedAt\n  deactivatedBy\n  manager {\n    ...UserMinimal\n  }\n}\n\nfragment UserSearchResult on Users {\n  ...UserCoreShared\n  username\n  isStaff\n}\n\nfragment ClientMinimal on Clients {\n  id\n  name\n}\n\nfragment ClientBase on Clients {\n  id\n  name\n  active\n  contactEmail\n  contactPerson\n  contactPhone\n  createdAt\n}\n\nfragment ClientWithStats on Clients {\n  ...ClientBase\n  currentEmployeeCount: payrollsAggregate(\n    where: {supersededDate: {_isNull: true}}\n  ) {\n    aggregate {\n      sum {\n        employeeCount\n      }\n    }\n  }\n  activePayrollCount: payrollsAggregate(\n    where: {supersededDate: {_isNull: true}, status: {_eq: \"Active\"}}\n  ) {\n    aggregate {\n      count\n    }\n  }\n}\n\nfragment ClientListBase on Clients {\n  ...ClientBase\n  payrollCount: payrollsAggregate(where: {supersededDate: {_isNull: true}}) {\n    aggregate {\n      count\n    }\n  }\n}\n\nfragment PayrollMinimal on Payrolls {\n  id\n  name\n  employeeCount\n  status\n}\n\nfragment PayrollBase on Payrolls {\n  id\n  name\n  employeeCount\n  status\n  payrollSystem\n  processingTime\n  processingDaysBeforeEft\n  versionNumber\n  supersededDate\n  createdAt\n  updatedAt\n}\n\nfragment PayrollWithClient on Payrolls {\n  ...PayrollBase\n  clientId\n  client {\n    id\n    name\n    active\n  }\n}\n\nfragment PayrollListItem on Payrolls {\n  ...PayrollWithClient\n  primaryConsultantUserId\n  backupConsultantUserId\n  managerUserId\n  createdByUserId\n  cycleId\n  dateTypeId\n  dateValue\n  payrollCycle {\n    id\n    name\n    description\n  }\n  payrollDateType {\n    id\n    name\n    description\n  }\n  primaryConsultant {\n    ...UserMinimal\n  }\n  backupConsultant {\n    ...UserMinimal\n  }\n  assignedManager {\n    ...UserMinimal\n  }\n}\n\nfragment PayrollWithDates on Payrolls {\n  ...PayrollBase\n  goLiveDate\n  payrollDates(orderBy: {originalEftDate: ASC}) {\n    id\n    originalEftDate\n    adjustedEftDate\n    notes\n  }\n}\n\nfragment PayrollFullDetail on Payrolls {\n  ...PayrollWithDates\n  ...PayrollWithClient\n  dateTypeId\n  cycleId\n  dateValue\n  versionReason\n  supersededDate\n  parentPayrollId\n  parentPayroll {\n    id\n    versionNumber\n  }\n  childPayrolls(orderBy: {versionNumber: DESC}) {\n    id\n    versionNumber\n    versionReason\n    createdAt\n  }\n  primaryConsultant {\n    ...UserMinimal\n  }\n  backupConsultant {\n    ...UserMinimal\n  }\n  assignedManager {\n    ...UserMinimal\n  }\n}\n\nfragment NoteWithAuthor on Notes {\n  id\n  content\n  isImportant\n  createdAt\n  entityId\n  entityType\n  author {\n    ...UserMinimal\n  }\n}\n\nfragment PermissionBase on Permissions {\n  id\n  resourceId\n  description\n  legacyPermissionName\n  action\n}\n\nfragment RoleWithPermissions on Roles {\n  id\n  name\n  displayName\n  description\n  isSystemRole\n  priority\n  rolePermissions {\n    permission {\n      ...PermissionBase\n    }\n  }\n}\n\nfragment AuditLogEntry on AuditAuditLog {\n  id\n  userId\n  userEmail\n  userRole\n  action\n  resourceType\n  resourceId\n  eventTime\n  success\n  errorMessage\n  ipAddress\n  userAgent\n  requestId\n  sessionId\n  metadata\n  oldValues\n  newValues\n  createdAt\n}\n\nfragment AuthEvent on AuditAuthEvents {\n  id\n  userId\n  userEmail\n  eventType\n  eventTime\n  success\n  failureReason\n  ipAddress\n  userAgent\n  metadata\n}\n\nfragment DataAccessLog on AuditDataAccessLog {\n  id\n  userId\n  resourceType\n  resourceId\n  accessType\n  accessedAt\n  dataClassification\n  fieldsAccessed\n  rowCount\n  ipAddress\n  metadata\n}\n\nfragment PermissionChange on AuditPermissionChanges {\n  id\n  changedAt\n  changedByUserId\n  targetUserId\n  targetRoleId\n  changeType\n  permissionType\n  oldPermissions\n  newPermissions\n  reason\n  approvedByUserId\n}\n\nfragment PayrollDateInfo on PayrollDates {\n  id\n  originalEftDate\n  adjustedEftDate\n  notes\n  createdAt\n}\n\nfragment PermissionOverrideInfo on PermissionOverrides {\n  id\n  userId\n  role\n  resource\n  operation\n  granted\n  reason\n  conditions\n  expiresAt\n  createdBy\n  createdAt\n}"): (typeof documents)["fragment UserMinimal on Users {\n  id\n  firstName\n  lastName\n  computedName\n  email\n}\n\nfragment UserCoreShared on Users {\n  ...UserMinimal\n  role\n  isActive\n}\n\nfragment UserBasic on Users {\n  ...UserCoreShared\n  clerkUserId\n  createdAt\n  updatedAt\n}\n\nfragment UserBase on Users {\n  ...UserBasic\n}\n\nfragment UserWithRole on Users {\n  ...UserBasic\n  username\n  isStaff\n}\n\nfragment UserProfile on Users {\n  ...UserWithRole\n  clerkUserId\n  image\n  managerId\n  deactivatedAt\n  deactivatedBy\n  manager {\n    ...UserMinimal\n  }\n}\n\nfragment UserSearchResult on Users {\n  ...UserCoreShared\n  username\n  isStaff\n}\n\nfragment ClientMinimal on Clients {\n  id\n  name\n}\n\nfragment ClientBase on Clients {\n  id\n  name\n  active\n  contactEmail\n  contactPerson\n  contactPhone\n  createdAt\n}\n\nfragment ClientWithStats on Clients {\n  ...ClientBase\n  currentEmployeeCount: payrollsAggregate(\n    where: {supersededDate: {_isNull: true}}\n  ) {\n    aggregate {\n      sum {\n        employeeCount\n      }\n    }\n  }\n  activePayrollCount: payrollsAggregate(\n    where: {supersededDate: {_isNull: true}, status: {_eq: \"Active\"}}\n  ) {\n    aggregate {\n      count\n    }\n  }\n}\n\nfragment ClientListBase on Clients {\n  ...ClientBase\n  payrollCount: payrollsAggregate(where: {supersededDate: {_isNull: true}}) {\n    aggregate {\n      count\n    }\n  }\n}\n\nfragment PayrollMinimal on Payrolls {\n  id\n  name\n  employeeCount\n  status\n}\n\nfragment PayrollBase on Payrolls {\n  id\n  name\n  employeeCount\n  status\n  payrollSystem\n  processingTime\n  processingDaysBeforeEft\n  versionNumber\n  supersededDate\n  createdAt\n  updatedAt\n}\n\nfragment PayrollWithClient on Payrolls {\n  ...PayrollBase\n  clientId\n  client {\n    id\n    name\n    active\n  }\n}\n\nfragment PayrollListItem on Payrolls {\n  ...PayrollWithClient\n  primaryConsultantUserId\n  backupConsultantUserId\n  managerUserId\n  createdByUserId\n  cycleId\n  dateTypeId\n  dateValue\n  payrollCycle {\n    id\n    name\n    description\n  }\n  payrollDateType {\n    id\n    name\n    description\n  }\n  primaryConsultant {\n    ...UserMinimal\n  }\n  backupConsultant {\n    ...UserMinimal\n  }\n  assignedManager {\n    ...UserMinimal\n  }\n}\n\nfragment PayrollWithDates on Payrolls {\n  ...PayrollBase\n  goLiveDate\n  payrollDates(orderBy: {originalEftDate: ASC}) {\n    id\n    originalEftDate\n    adjustedEftDate\n    notes\n  }\n}\n\nfragment PayrollFullDetail on Payrolls {\n  ...PayrollWithDates\n  ...PayrollWithClient\n  dateTypeId\n  cycleId\n  dateValue\n  versionReason\n  supersededDate\n  parentPayrollId\n  parentPayroll {\n    id\n    versionNumber\n  }\n  childPayrolls(orderBy: {versionNumber: DESC}) {\n    id\n    versionNumber\n    versionReason\n    createdAt\n  }\n  primaryConsultant {\n    ...UserMinimal\n  }\n  backupConsultant {\n    ...UserMinimal\n  }\n  assignedManager {\n    ...UserMinimal\n  }\n}\n\nfragment NoteWithAuthor on Notes {\n  id\n  content\n  isImportant\n  createdAt\n  entityId\n  entityType\n  author {\n    ...UserMinimal\n  }\n}\n\nfragment PermissionBase on Permissions {\n  id\n  resourceId\n  description\n  legacyPermissionName\n  action\n}\n\nfragment RoleWithPermissions on Roles {\n  id\n  name\n  displayName\n  description\n  isSystemRole\n  priority\n  rolePermissions {\n    permission {\n      ...PermissionBase\n    }\n  }\n}\n\nfragment AuditLogEntry on AuditAuditLog {\n  id\n  userId\n  userEmail\n  userRole\n  action\n  resourceType\n  resourceId\n  eventTime\n  success\n  errorMessage\n  ipAddress\n  userAgent\n  requestId\n  sessionId\n  metadata\n  oldValues\n  newValues\n  createdAt\n}\n\nfragment AuthEvent on AuditAuthEvents {\n  id\n  userId\n  userEmail\n  eventType\n  eventTime\n  success\n  failureReason\n  ipAddress\n  userAgent\n  metadata\n}\n\nfragment DataAccessLog on AuditDataAccessLog {\n  id\n  userId\n  resourceType\n  resourceId\n  accessType\n  accessedAt\n  dataClassification\n  fieldsAccessed\n  rowCount\n  ipAddress\n  metadata\n}\n\nfragment PermissionChange on AuditPermissionChanges {\n  id\n  changedAt\n  changedByUserId\n  targetUserId\n  targetRoleId\n  changeType\n  permissionType\n  oldPermissions\n  newPermissions\n  reason\n  approvedByUserId\n}\n\nfragment PayrollDateInfo on PayrollDates {\n  id\n  originalEftDate\n  adjustedEftDate\n  notes\n  createdAt\n}\n\nfragment PermissionOverrideInfo on PermissionOverrides {\n  id\n  userId\n  role\n  resource\n  operation\n  granted\n  reason\n  conditions\n  expiresAt\n  createdBy\n  createdAt\n}"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "mutation LogAuditEvent($input: AuditAuditLogInsertInput!) {\n  insertAuditAuditLog(objects: [$input]) {\n    returning {\n      id\n      eventTime\n    }\n  }\n}\n\nmutation InsertFile($input: FilesInsertInput!) {\n  insertFiles(objects: [$input]) {\n    returning {\n      id\n      filename\n      bucket\n      objectKey\n      size\n      mimetype\n      url\n      clientId\n      payrollId\n      uploadedBy\n      category\n      isPublic\n      metadata\n      fileType\n      createdAt\n    }\n  }\n}\n\nmutation UpdateFileMetadata($id: uuid!, $updates: FilesSetInput!) {\n  updateFilesByPk(pkColumns: {id: $id}, _set: $updates) {\n    id\n    filename\n    bucket\n    objectKey\n    size\n    mimetype\n    url\n    clientId\n    payrollId\n    uploadedBy\n    category\n    isPublic\n    metadata\n    fileType\n    createdAt\n  }\n}\n\nmutation DeleteFile($id: uuid!) {\n  deleteFilesByPk(id: $id) {\n    id\n    filename\n    objectKey\n  }\n}\n\nmutation RefreshData {\n  __typename\n}"): (typeof documents)["mutation LogAuditEvent($input: AuditAuditLogInsertInput!) {\n  insertAuditAuditLog(objects: [$input]) {\n    returning {\n      id\n      eventTime\n    }\n  }\n}\n\nmutation InsertFile($input: FilesInsertInput!) {\n  insertFiles(objects: [$input]) {\n    returning {\n      id\n      filename\n      bucket\n      objectKey\n      size\n      mimetype\n      url\n      clientId\n      payrollId\n      uploadedBy\n      category\n      isPublic\n      metadata\n      fileType\n      createdAt\n    }\n  }\n}\n\nmutation UpdateFileMetadata($id: uuid!, $updates: FilesSetInput!) {\n  updateFilesByPk(pkColumns: {id: $id}, _set: $updates) {\n    id\n    filename\n    bucket\n    objectKey\n    size\n    mimetype\n    url\n    clientId\n    payrollId\n    uploadedBy\n    category\n    isPublic\n    metadata\n    fileType\n    createdAt\n  }\n}\n\nmutation DeleteFile($id: uuid!) {\n  deleteFilesByPk(id: $id) {\n    id\n    filename\n    objectKey\n  }\n}\n\nmutation RefreshData {\n  __typename\n}"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "query GetDashboardMetrics($userId: uuid!) {\n  clientsAggregate(where: {active: {_eq: true}}) {\n    aggregate {\n      count\n    }\n  }\n  activePayrollsAggregate: payrollsAggregate(\n    where: {supersededDate: {_isNull: true}, status: {_nin: [\"Completed\", \"Failed\"]}}\n  ) {\n    aggregate {\n      count\n    }\n  }\n  totalEmployeesAggregate: payrollsAggregate(\n    where: {supersededDate: {_isNull: true}}\n  ) {\n    aggregate {\n      sum {\n        employeeCount\n      }\n    }\n  }\n  upcomingPayrolls: payrolls(\n    where: {supersededDate: {_isNull: true}, status: {_nin: [\"Completed\", \"Failed\", \"Cancelled\"]}}\n    orderBy: {updatedAt: DESC}\n    limit: 5\n  ) {\n    ...PayrollMinimal\n    client {\n      ...ClientMinimal\n    }\n  }\n}\n\nquery GetDashboardStatsOptimized($limit: Int = 10) {\n  clientsAggregate {\n    aggregate {\n      count\n    }\n  }\n  totalPayrolls: payrollsAggregate(where: {supersededDate: {_isNull: true}}) {\n    aggregate {\n      count\n    }\n  }\n  activePayrolls: payrollsAggregate(\n    where: {supersededDate: {_isNull: true}, status: {_eq: \"Active\"}}\n  ) {\n    aggregate {\n      count\n    }\n  }\n  upcomingPayrolls: payrolls(\n    where: {supersededDate: {_isNull: true}, status: {_eq: \"Active\"}, payrollDates: {adjustedEftDate: {_gte: \"now()\"}}}\n    orderBy: {updatedAt: DESC}\n    limit: $limit\n  ) {\n    id\n    name\n    status\n    client {\n      id\n      name\n    }\n    nextEftDate: payrollDates(\n      where: {adjustedEftDate: {_gte: \"now()\"}}\n      orderBy: {adjustedEftDate: ASC}\n      limit: 1\n    ) {\n      originalEftDate\n      adjustedEftDate\n      processingDate\n    }\n  }\n}\n\nquery GetClientsDashboardStats {\n  activeClientsCount: clientsAggregate(where: {active: {_eq: true}}) {\n    aggregate {\n      count\n    }\n  }\n  totalPayrollsCount: payrollsAggregate(where: {supersededDate: {_isNull: true}}) {\n    aggregate {\n      count\n    }\n  }\n  totalEmployeesSum: payrollsAggregate(where: {supersededDate: {_isNull: true}}) {\n    aggregate {\n      sum {\n        employeeCount\n      }\n    }\n  }\n  clientsNeedingAttention: clients(\n    where: {active: {_eq: true}, _not: {payrolls: {supersededDate: {_isNull: true}}}}\n  ) {\n    ...ClientMinimal\n  }\n}\n\nquery GetCurrentUser($userId: uuid!) {\n  user: usersByPk(id: $userId) {\n    ...UserProfile\n  }\n}\n\nquery GetUsersForDropdown($role: user_role) {\n  users(\n    where: {isActive: {_eq: true}, role: {_eq: $role}}\n    orderBy: {computedName: ASC}\n  ) {\n    ...UserMinimal\n  }\n}\n\nquery GetSystemHealth {\n  databaseHealth: users(limit: 1) {\n    id\n  }\n  recentActivity: auditAuditLogAggregate(\n    where: {eventTime: {_gte: \"now() - interval '1 hour'\"}}\n  ) {\n    aggregate {\n      count\n    }\n  }\n}\n\nquery GlobalSearch($searchTerm: String!) {\n  clients(\n    where: {_or: [{name: {_ilike: $searchTerm}}, {contactEmail: {_ilike: $searchTerm}}]}\n    limit: 5\n  ) {\n    ...ClientMinimal\n  }\n  users(\n    where: {_or: [{computedName: {_ilike: $searchTerm}}, {firstName: {_ilike: $searchTerm}}, {lastName: {_ilike: $searchTerm}}, {email: {_ilike: $searchTerm}}]}\n    limit: 5\n  ) {\n    ...UserMinimal\n  }\n  payrolls(\n    where: {client: {name: {_ilike: $searchTerm}}, supersededDate: {_isNull: true}}\n    limit: 5\n  ) {\n    ...PayrollMinimal\n    client {\n      ...ClientMinimal\n    }\n  }\n}\n\nquery GetFileById($id: uuid!) {\n  filesByPk(id: $id) {\n    id\n    filename\n    bucket\n    objectKey\n    size\n    mimetype\n    url\n    clientId\n    payrollId\n    uploadedBy\n    category\n    isPublic\n    metadata\n    fileType\n    createdAt\n    client {\n      name\n    }\n    payroll {\n      name\n    }\n    uploadedBy\n  }\n}\n\nquery ListFiles($where: FilesBoolExp, $limit: Int, $offset: Int, $orderBy: [FilesOrderBy!]) {\n  files(where: $where, limit: $limit, offset: $offset, orderBy: $orderBy) {\n    id\n    filename\n    bucket\n    objectKey\n    size\n    mimetype\n    url\n    clientId\n    payrollId\n    uploadedBy\n    category\n    isPublic\n    metadata\n    fileType\n    createdAt\n    client {\n      name\n    }\n    payroll {\n      name\n    }\n    uploadedBy\n  }\n  filesAggregate(where: $where) {\n    aggregate {\n      count\n    }\n  }\n}"): (typeof documents)["query GetDashboardMetrics($userId: uuid!) {\n  clientsAggregate(where: {active: {_eq: true}}) {\n    aggregate {\n      count\n    }\n  }\n  activePayrollsAggregate: payrollsAggregate(\n    where: {supersededDate: {_isNull: true}, status: {_nin: [\"Completed\", \"Failed\"]}}\n  ) {\n    aggregate {\n      count\n    }\n  }\n  totalEmployeesAggregate: payrollsAggregate(\n    where: {supersededDate: {_isNull: true}}\n  ) {\n    aggregate {\n      sum {\n        employeeCount\n      }\n    }\n  }\n  upcomingPayrolls: payrolls(\n    where: {supersededDate: {_isNull: true}, status: {_nin: [\"Completed\", \"Failed\", \"Cancelled\"]}}\n    orderBy: {updatedAt: DESC}\n    limit: 5\n  ) {\n    ...PayrollMinimal\n    client {\n      ...ClientMinimal\n    }\n  }\n}\n\nquery GetDashboardStatsOptimized($limit: Int = 10) {\n  clientsAggregate {\n    aggregate {\n      count\n    }\n  }\n  totalPayrolls: payrollsAggregate(where: {supersededDate: {_isNull: true}}) {\n    aggregate {\n      count\n    }\n  }\n  activePayrolls: payrollsAggregate(\n    where: {supersededDate: {_isNull: true}, status: {_eq: \"Active\"}}\n  ) {\n    aggregate {\n      count\n    }\n  }\n  upcomingPayrolls: payrolls(\n    where: {supersededDate: {_isNull: true}, status: {_eq: \"Active\"}, payrollDates: {adjustedEftDate: {_gte: \"now()\"}}}\n    orderBy: {updatedAt: DESC}\n    limit: $limit\n  ) {\n    id\n    name\n    status\n    client {\n      id\n      name\n    }\n    nextEftDate: payrollDates(\n      where: {adjustedEftDate: {_gte: \"now()\"}}\n      orderBy: {adjustedEftDate: ASC}\n      limit: 1\n    ) {\n      originalEftDate\n      adjustedEftDate\n      processingDate\n    }\n  }\n}\n\nquery GetClientsDashboardStats {\n  activeClientsCount: clientsAggregate(where: {active: {_eq: true}}) {\n    aggregate {\n      count\n    }\n  }\n  totalPayrollsCount: payrollsAggregate(where: {supersededDate: {_isNull: true}}) {\n    aggregate {\n      count\n    }\n  }\n  totalEmployeesSum: payrollsAggregate(where: {supersededDate: {_isNull: true}}) {\n    aggregate {\n      sum {\n        employeeCount\n      }\n    }\n  }\n  clientsNeedingAttention: clients(\n    where: {active: {_eq: true}, _not: {payrolls: {supersededDate: {_isNull: true}}}}\n  ) {\n    ...ClientMinimal\n  }\n}\n\nquery GetCurrentUser($userId: uuid!) {\n  user: usersByPk(id: $userId) {\n    ...UserProfile\n  }\n}\n\nquery GetUsersForDropdown($role: user_role) {\n  users(\n    where: {isActive: {_eq: true}, role: {_eq: $role}}\n    orderBy: {computedName: ASC}\n  ) {\n    ...UserMinimal\n  }\n}\n\nquery GetSystemHealth {\n  databaseHealth: users(limit: 1) {\n    id\n  }\n  recentActivity: auditAuditLogAggregate(\n    where: {eventTime: {_gte: \"now() - interval '1 hour'\"}}\n  ) {\n    aggregate {\n      count\n    }\n  }\n}\n\nquery GlobalSearch($searchTerm: String!) {\n  clients(\n    where: {_or: [{name: {_ilike: $searchTerm}}, {contactEmail: {_ilike: $searchTerm}}]}\n    limit: 5\n  ) {\n    ...ClientMinimal\n  }\n  users(\n    where: {_or: [{computedName: {_ilike: $searchTerm}}, {firstName: {_ilike: $searchTerm}}, {lastName: {_ilike: $searchTerm}}, {email: {_ilike: $searchTerm}}]}\n    limit: 5\n  ) {\n    ...UserMinimal\n  }\n  payrolls(\n    where: {client: {name: {_ilike: $searchTerm}}, supersededDate: {_isNull: true}}\n    limit: 5\n  ) {\n    ...PayrollMinimal\n    client {\n      ...ClientMinimal\n    }\n  }\n}\n\nquery GetFileById($id: uuid!) {\n  filesByPk(id: $id) {\n    id\n    filename\n    bucket\n    objectKey\n    size\n    mimetype\n    url\n    clientId\n    payrollId\n    uploadedBy\n    category\n    isPublic\n    metadata\n    fileType\n    createdAt\n    client {\n      name\n    }\n    payroll {\n      name\n    }\n    uploadedBy\n  }\n}\n\nquery ListFiles($where: FilesBoolExp, $limit: Int, $offset: Int, $orderBy: [FilesOrderBy!]) {\n  files(where: $where, limit: $limit, offset: $offset, orderBy: $orderBy) {\n    id\n    filename\n    bucket\n    objectKey\n    size\n    mimetype\n    url\n    clientId\n    payrollId\n    uploadedBy\n    category\n    isPublic\n    metadata\n    fileType\n    createdAt\n    client {\n      name\n    }\n    payroll {\n      name\n    }\n    uploadedBy\n  }\n  filesAggregate(where: $where) {\n    aggregate {\n      count\n    }\n  }\n}"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "subscription RecentActivity($resourceTypes: [String!]) {\n  auditAuditLog(\n    where: {resourceType: {_in: $resourceTypes}, eventTime: {_gte: \"now() - interval '5 minutes'\"}}\n    orderBy: {eventTime: DESC}\n    limit: 20\n  ) {\n    ...AuditLogEntry\n  }\n}\n\nsubscription AuthenticationEvents($userId: uuid) {\n  auditAuthEvents(\n    where: {userId: {_eq: $userId}, eventTime: {_gte: \"now() - interval '10 minutes'\"}}\n    orderBy: {eventTime: DESC}\n  ) {\n    ...AuthEvent\n  }\n}\n\nsubscription SensitiveDataAccess($resourceTypes: [String!]!) {\n  auditDataAccessLog(\n    where: {resourceType: {_in: $resourceTypes}, accessedAt: {_gte: \"now() - interval '10 minutes'\"}}\n    orderBy: {accessedAt: DESC}\n  ) {\n    ...DataAccessLog\n  }\n}\n\nsubscription PermissionChangeStream {\n  auditPermissionChanges(orderBy: {changedAt: DESC}, limit: 10) {\n    ...PermissionChange\n  }\n}"): (typeof documents)["subscription RecentActivity($resourceTypes: [String!]) {\n  auditAuditLog(\n    where: {resourceType: {_in: $resourceTypes}, eventTime: {_gte: \"now() - interval '5 minutes'\"}}\n    orderBy: {eventTime: DESC}\n    limit: 20\n  ) {\n    ...AuditLogEntry\n  }\n}\n\nsubscription AuthenticationEvents($userId: uuid) {\n  auditAuthEvents(\n    where: {userId: {_eq: $userId}, eventTime: {_gte: \"now() - interval '10 minutes'\"}}\n    orderBy: {eventTime: DESC}\n  ) {\n    ...AuthEvent\n  }\n}\n\nsubscription SensitiveDataAccess($resourceTypes: [String!]!) {\n  auditDataAccessLog(\n    where: {resourceType: {_in: $resourceTypes}, accessedAt: {_gte: \"now() - interval '10 minutes'\"}}\n    orderBy: {accessedAt: DESC}\n  ) {\n    ...DataAccessLog\n  }\n}\n\nsubscription PermissionChangeStream {\n  auditPermissionChanges(orderBy: {changedAt: DESC}, limit: 10) {\n    ...PermissionChange\n  }\n}"];

export function gql(source: string) {
  return (documents as any)[source] ?? {};
}

export type DocumentType<TDocumentNode extends DocumentNode<any, any>> = TDocumentNode extends DocumentNode<  infer TType,  any>  ? TType  : never;