/* eslint-disable */
import * as types from './graphql';
import type { TypedDocumentNode as DocumentNode } from '@graphql-typed-document-node/core';

/**
 * Map of all GraphQL operations in the project.
 *
 * This map has several performance disadvantages:
 * 1. It is not tree-shakeable, so it will include all operations in the project.
 * 2. It is not minifiable, so the string of a GraphQL query will be multiple times inside the bundle.
 * 3. It does not support dead code elimination, so it will add unused operations.
 *
 * Therefore it is highly recommended to use the babel or swc plugin for production.
 * Learn more about it here: https://the-guild.dev/graphql/codegen/plugins/presets/preset-client#reducing-bundle-size
 */
type Documents = {
    "fragment PayrollCore on payrolls {\n  id\n  name\n  status\n  clientId\n  employeeCount\n  goLiveDate\n  payrollSystem\n  processingTime\n  processingDaysBeforeEft\n  createdAt\n  updatedAt\n  versionNumber\n  supersededDate\n}\n\nfragment PayrollBasic on payrolls {\n  ...PayrollCore\n  primaryConsultantUserId\n  backupConsultantUserId\n  managerUserId\n  cycleId\n  dateTypeId\n  dateValue\n}\n\nfragment PayrollDetailed on payrolls {\n  ...PayrollBasic\n  parentPayrollId\n  versionReason\n  createdByUserId\n}\n\nfragment PayrollWithClient on payrolls {\n  ...PayrollBasic\n  client {\n    id\n    name\n    contactPerson\n    contactEmail\n    active\n  }\n}\n\nfragment PayrollWithUsers on payrolls {\n  ...PayrollBasic\n  primaryConsultant {\n    id\n    name\n    email\n    role\n    isActive\n  }\n  backupConsultant {\n    id\n    name\n    email\n    role\n    isActive\n  }\n  manager {\n    id\n    name\n    email\n    role\n    isActive\n  }\n}\n\nfragment PayrollWithCycle on payrolls {\n  ...PayrollBasic\n  payrollCycle {\n    id\n    name\n    description\n  }\n  payrollDateType {\n    id\n    name\n    description\n  }\n}\n\nfragment PayrollWithAllRelations on payrolls {\n  ...PayrollDetailed\n  client {\n    id\n    name\n    contactPerson\n    contactEmail\n    active\n  }\n  primaryConsultant {\n    id\n    name\n    email\n    role\n    isActive\n  }\n  backupConsultant {\n    id\n    name\n    email\n    role\n    isActive\n  }\n  manager {\n    id\n    name\n    email\n    role\n    isActive\n  }\n  payrollCycle {\n    id\n    name\n    description\n  }\n  payrollDateType {\n    id\n    name\n    description\n  }\n  createdByUserId\n  parentPayroll {\n    id\n    name\n    versionNumber\n    status\n  }\n}\n\nfragment PayrollSummary on payrolls {\n  id\n  name\n  status\n  clientId\n  employeeCount\n  supersededDate\n}\n\nfragment PayrollListItem on payrolls {\n  ...PayrollSummary\n  goLiveDate\n  primaryConsultantUserId\n  backupConsultantUserId\n  managerUserId\n  createdAt\n  updatedAt\n  client {\n    id\n    name\n  }\n}\n\nfragment PayrollTableRow on payrolls {\n  ...PayrollListItem\n  payrollSystem\n  processingTime\n  versionNumber\n  primaryConsultant {\n    id\n    name\n  }\n  backupConsultant {\n    id\n    name\n  }\n  manager {\n    id\n    name\n  }\n}\n\nfragment PayrollDashboardCard on payrolls {\n  ...PayrollSummary\n  goLiveDate\n  primaryConsultant {\n    id\n    name\n  }\n  client {\n    id\n    name\n  }\n  payrollCycle {\n    id\n    name\n    description\n  }\n}\n\nfragment PayrollMinimal on payrolls {\n  id\n  name\n  status\n  clientId\n}\n\nfragment PayrollForAssignment on payrolls {\n  id\n  name\n  status\n  employeeCount\n  goLiveDate\n  client {\n    id\n    name\n  }\n  primaryConsultantUserId\n  backupConsultantUserId\n  managerUserId\n}\n\nfragment PayrollForAudit on payrolls {\n  id\n  name\n  status\n  clientId\n  employeeCount\n  goLiveDate\n  versionNumber\n  createdAt\n  updatedAt\n}\n\nfragment PayrollVersionInfo on payrolls {\n  id\n  name\n  versionNumber\n  versionReason\n  parentPayrollId\n  supersededDate\n  createdAt\n  createdByUserId\n}\n\nfragment PayrollWithDates on payrolls {\n  ...PayrollCore\n  payrollDates(orderBy: {originalEftDate: ASC}) {\n    id\n    originalEftDate\n    adjustedEftDate\n    processingDate\n    notes\n    createdAt\n    updatedAt\n  }\n}\n\nfragment PayrollProcessingInfo on payrolls {\n  id\n  name\n  status\n  payrollSystem\n  processingTime\n  processingDaysBeforeEft\n  goLiveDate\n  employeeCount\n  client {\n    id\n    name\n  }\n  payrollCycle {\n    id\n    name\n    description\n  }\n}\n\nfragment PayrollWorkload on payrolls {\n  id\n  name\n  status\n  employeeCount\n  client {\n    id\n    name\n  }\n  payrollCycle {\n    id\n    name\n    description\n  }\n}\n\nfragment PayrollDate on payrollDates {\n  id\n  originalEftDate\n  adjustedEftDate\n  processingDate\n  notes\n  payrollId\n  createdAt\n  updatedAt\n}": typeof types.PayrollCoreFragmentDoc,
    "mutation CreatePayroll($object: payrollsInsertInput!) {\n  insertPayroll(object: $object) {\n    ...PayrollDetailed\n    client {\n      id\n      name\n    }\n    primaryConsultant {\n      id\n      name\n    }\n    manager {\n      id\n      name\n    }\n  }\n}\n\nmutation UpdatePayroll($id: uuid!, $set: payrollsSetInput!) {\n  updatePayrollById(pkColumns: {id: $id}, _set: $set) {\n    ...PayrollDetailed\n    client {\n      id\n      name\n    }\n    primaryConsultant {\n      id\n      name\n    }\n    backupConsultant {\n      id\n      name\n    }\n    manager {\n      id\n      name\n    }\n  }\n}\n\nmutation DeletePayroll($id: uuid!) {\n  updatePayrollById(pkColumns: {id: $id}, _set: {supersededDate: \"now()\"}) {\n    ...PayrollBasic\n  }\n}\n\nmutation ReactivatePayroll($id: uuid!) {\n  updatePayrollById(pkColumns: {id: $id}, _set: {supersededDate: null}) {\n    ...PayrollBasic\n  }\n}\n\nmutation UpdatePayrollStatus($id: uuid!, $status: payroll_status!) {\n  updatePayrollById(\n    pkColumns: {id: $id}\n    _set: {status: $status, updatedAt: \"now()\"}\n  ) {\n    ...PayrollBasic\n    client {\n      id\n      name\n    }\n  }\n}\n\nmutation ActivatePayroll($id: uuid!) {\n  updatePayrollById(\n    pkColumns: {id: $id}\n    _set: {status: \"Active\", updatedAt: \"now()\"}\n  ) {\n    ...PayrollBasic\n  }\n}\n\nmutation DeactivatePayroll($id: uuid!) {\n  updatePayrollById(\n    pkColumns: {id: $id}\n    _set: {status: \"Inactive\", updatedAt: \"now()\"}\n  ) {\n    ...PayrollBasic\n  }\n}\n\nmutation AssignPrimaryConsultant($id: uuid!, $userId: uuid!) {\n  updatePayrollById(\n    pkColumns: {id: $id}\n    _set: {primaryConsultantUserId: $userId, updatedAt: \"now()\"}\n  ) {\n    ...PayrollBasic\n    primaryConsultant {\n      id\n      name\n      email\n    }\n  }\n}\n\nmutation AssignBackupConsultant($id: uuid!, $userId: uuid!) {\n  updatePayrollById(\n    pkColumns: {id: $id}\n    _set: {backupConsultantUserId: $userId, updatedAt: \"now()\"}\n  ) {\n    ...PayrollBasic\n    backupConsultant {\n      id\n      name\n      email\n    }\n  }\n}\n\nmutation AssignManager($id: uuid!, $userId: uuid!) {\n  updatePayrollById(\n    pkColumns: {id: $id}\n    _set: {managerUserId: $userId, updatedAt: \"now()\"}\n  ) {\n    ...PayrollBasic\n    manager {\n      id\n      name\n      email\n    }\n  }\n}\n\nmutation UpdatePayrollAssignments($id: uuid!, $primaryConsultantUserId: uuid, $backupConsultantUserId: uuid, $managerUserId: uuid) {\n  updatePayrollById(\n    pkColumns: {id: $id}\n    _set: {primaryConsultantUserId: $primaryConsultantUserId, backupConsultantUserId: $backupConsultantUserId, managerUserId: $managerUserId, updatedAt: \"now()\"}\n  ) {\n    ...PayrollBasic\n    primaryConsultant {\n      id\n      name\n      email\n    }\n    backupConsultant {\n      id\n      name\n      email\n    }\n    manager {\n      id\n      name\n      email\n    }\n  }\n}\n\nmutation CreatePayrollVersion($parentPayrollId: uuid!, $versionReason: String!, $object: payrollsInsertInput!) {\n  updatePayrollById(\n    pkColumns: {id: $parentPayrollId}\n    _set: {supersededDate: \"now()\"}\n  ) {\n    id\n    supersededDate\n  }\n  insertPayroll(object: $object) {\n    ...PayrollWithAllRelations\n  }\n}\n\nmutation SupersedePayroll($id: uuid!) {\n  updatePayrollById(pkColumns: {id: $id}, _set: {supersededDate: \"now()\"}) {\n    ...PayrollBasic\n  }\n}\n\nmutation BulkUpdatePayrolls($where: payrollsBoolExp!, $set: payrollsSetInput!) {\n  bulkUpdatePayrolls(where: $where, _set: $set) {\n    returning {\n      ...PayrollBasic\n    }\n    affectedRows\n  }\n}\n\nmutation BulkAssignConsultant($payrollIds: [uuid!]!, $primaryConsultantUserId: uuid!) {\n  bulkUpdatePayrolls(\n    where: {id: {_in: $payrollIds}}\n    _set: {primaryConsultantUserId: $primaryConsultantUserId, updatedAt: \"now()\"}\n  ) {\n    returning {\n      ...PayrollBasic\n      primaryConsultant {\n        id\n        name\n      }\n    }\n    affectedRows\n  }\n}\n\nmutation BulkAssignManager($payrollIds: [uuid!]!, $managerUserId: uuid!) {\n  bulkUpdatePayrolls(\n    where: {id: {_in: $payrollIds}}\n    _set: {managerUserId: $managerUserId, updatedAt: \"now()\"}\n  ) {\n    returning {\n      ...PayrollBasic\n      manager {\n        id\n        name\n      }\n    }\n    affectedRows\n  }\n}\n\nmutation BulkUpdatePayrollStatus($payrollIds: [uuid!]!, $status: payroll_status!) {\n  bulkUpdatePayrolls(\n    where: {id: {_in: $payrollIds}}\n    _set: {status: $status, updatedAt: \"now()\"}\n  ) {\n    returning {\n      ...PayrollBasic\n    }\n    affectedRows\n  }\n}\n\nmutation UpdatePayrollConfiguration($id: uuid!, $payrollSystem: String, $processingTime: Int, $processingDaysBeforeEft: Int, $cycleId: uuid, $dateTypeId: uuid) {\n  updatePayrollById(\n    pkColumns: {id: $id}\n    _set: {payrollSystem: $payrollSystem, processingTime: $processingTime, processingDaysBeforeEft: $processingDaysBeforeEft, cycleId: $cycleId, dateTypeId: $dateTypeId, updatedAt: \"now()\"}\n  ) {\n    ...PayrollWithCycle\n  }\n}\n\nmutation UpdatePayrollDetails($id: uuid!, $name: String, $employeeCount: Int, $goLiveDate: date) {\n  updatePayrollById(\n    pkColumns: {id: $id}\n    _set: {name: $name, employeeCount: $employeeCount, goLiveDate: $goLiveDate, updatedAt: \"now()\"}\n  ) {\n    ...PayrollBasic\n  }\n}\n\nmutation CreatePayrollDate($object: payrollDatesInsertInput!) {\n  insertPayrollDate(object: $object) {\n    id\n    originalEftDate\n    adjustedEftDate\n    processingDate\n    notes\n    payrollId\n    createdAt\n    updatedAt\n  }\n}\n\nmutation UpdatePayrollDate($id: uuid!, $set: payrollDatesSetInput!) {\n  updatePayrollDateById(pkColumns: {id: $id}, _set: $set) {\n    id\n    originalEftDate\n    adjustedEftDate\n    processingDate\n    notes\n    payrollId\n    updatedAt\n  }\n}\n\nmutation DeletePayrollDate($id: uuid!) {\n  deletePayrollDateById(id: $id) {\n    id\n    originalEftDate\n    adjustedEftDate\n    payrollId\n  }\n}\n\nmutation UpdatePayrollDateNotes($id: uuid!, $notes: String) {\n  updatePayrollDateById(\n    pkColumns: {id: $id}\n    _set: {notes: $notes, updatedAt: \"now()\"}\n  ) {\n    id\n    originalEftDate\n    adjustedEftDate\n    notes\n    payrollId\n  }\n}\n\nmutation BulkCreatePayrollDates($objects: [payrollDatesInsertInput!]!) {\n  bulkInsertPayrollDates(objects: $objects) {\n    returning {\n      id\n      originalEftDate\n      adjustedEftDate\n      processingDate\n      payrollId\n    }\n    affectedRows\n  }\n}\n\nmutation BulkDeletePayrollDates($payrollId: uuid!) {\n  bulkDeletePayrollDates(where: {payrollId: {_eq: $payrollId}}) {\n    affectedRows\n  }\n}\n\nmutation CreatePayrollCycle($object: payrollCyclesInsertInput!) {\n  insertPayrollCycle(object: $object) {\n    id\n    name\n    description\n    createdAt\n  }\n}\n\nmutation UpdatePayrollCycle($id: uuid!, $set: payrollCyclesSetInput!) {\n  updatePayrollCycleById(pkColumns: {id: $id}, _set: $set) {\n    id\n    name\n    description\n    updatedAt\n  }\n}\n\nmutation DeletePayrollCycle($id: uuid!) {\n  deletePayrollCycleById(id: $id) {\n    id\n    name\n  }\n}\n\nmutation CreatePayrollDateType($object: payrollDateTypesInsertInput!) {\n  insertPayrollDateType(object: $object) {\n    id\n    name\n    description\n    createdAt\n  }\n}\n\nmutation UpdatePayrollDateType($id: uuid!, $set: payrollDateTypesSetInput!) {\n  updatePayrollDateTypeById(pkColumns: {id: $id}, _set: $set) {\n    id\n    name\n    description\n    updatedAt\n  }\n}\n\nmutation DeletePayrollDateType($id: uuid!) {\n  deletePayrollDateTypeById(id: $id) {\n    id\n    name\n  }\n}\n\nmutation CommitPayrollAssignments($changes: [PayrollAssignmentInput!]!) {\n  commitPayrollAssignments(changes: $changes) {\n    success\n    message\n    errors\n    affectedAssignments {\n      id\n      payrollDateId\n      originalConsultantId\n      newConsultantId\n      adjustedEftDate\n    }\n  }\n}": typeof types.CreatePayrollDocument,
    "query GetPayrolls($limit: Int = 50, $offset: Int = 0, $where: payrollsBoolExp) {\n  payrolls(\n    limit: $limit\n    offset: $offset\n    where: $where\n    orderBy: {createdAt: DESC}\n  ) {\n    ...PayrollListItem\n  }\n  payrollsAggregate(where: $where) {\n    aggregate {\n      count\n    }\n  }\n}\n\nquery GetPayrollById($id: uuid!) {\n  payrollById(id: $id) {\n    ...PayrollWithAllRelations\n  }\n}\n\nquery GetPayrollBasic($id: uuid!) {\n  payrollById(id: $id) {\n    ...PayrollBasic\n  }\n}\n\nquery GetPayrollForEdit($id: uuid!) {\n  payrollById(id: $id) {\n    ...PayrollDetailed\n    client {\n      id\n      name\n    }\n    payrollCycle {\n      id\n      name\n      description\n    }\n    payrollDateType {\n      id\n      name\n    }\n  }\n}\n\nquery GetPayrollsSimple {\n  payrolls(where: {supersededDate: {_isNull: true}}, orderBy: {name: ASC}) {\n    ...PayrollMinimal\n  }\n}\n\nquery GetActivePayrolls {\n  payrolls(\n    where: {supersededDate: {_isNull: true}, status: {_neq: \"Inactive\"}}\n    orderBy: {name: ASC}\n  ) {\n    ...PayrollSummary\n    client {\n      id\n      name\n    }\n  }\n}\n\nquery GetPayrollsByClient($clientId: uuid!) {\n  payrolls(\n    where: {clientId: {_eq: $clientId}, supersededDate: {_isNull: true}}\n    orderBy: {createdAt: DESC}\n  ) {\n    ...PayrollListItem\n  }\n}\n\nquery GetPayrollsByUser($userId: uuid!) {\n  primaryPayrolls: payrolls(\n    where: {primaryConsultantUserId: {_eq: $userId}, supersededDate: {_isNull: true}}\n    orderBy: {name: ASC}\n  ) {\n    ...PayrollWorkload\n  }\n  backupPayrolls: payrolls(\n    where: {backupConsultantUserId: {_eq: $userId}, supersededDate: {_isNull: true}}\n    orderBy: {name: ASC}\n  ) {\n    ...PayrollWorkload\n  }\n  managedPayrolls: payrolls(\n    where: {managerUserId: {_eq: $userId}, supersededDate: {_isNull: true}}\n    orderBy: {name: ASC}\n  ) {\n    ...PayrollWorkload\n  }\n}\n\nquery GetPayrollDashboardStats {\n  totalPayrolls: payrollsAggregate(where: {supersededDate: {_isNull: true}}) {\n    aggregate {\n      count\n    }\n  }\n  activePayrolls: payrollsAggregate(\n    where: {supersededDate: {_isNull: true}, status: {_eq: \"Active\"}}\n  ) {\n    aggregate {\n      count\n    }\n  }\n  processingPayrolls: payrollsAggregate(\n    where: {supersededDate: {_isNull: true}, status: {_eq: \"Processing\"}}\n  ) {\n    aggregate {\n      count\n    }\n  }\n  recentPayrolls: payrolls(\n    where: {supersededDate: {_isNull: true}}\n    orderBy: {updatedAt: DESC}\n    limit: 5\n  ) {\n    ...PayrollDashboardCard\n  }\n}\n\nquery GetUpcomingPayrolls($limit: Int = 10) {\n  payrolls(\n    where: {supersededDate: {_isNull: true}, status: {_eq: \"Active\"}, payrollDates: {originalEftDate: {_gte: \"now()\"}}}\n    orderBy: {updatedAt: DESC}\n    limit: $limit\n  ) {\n    ...PayrollDashboardCard\n    nextPayDate: payrollDates(\n      where: {originalEftDate: {_gte: \"now()\"}}\n      orderBy: {originalEftDate: ASC}\n      limit: 1\n    ) {\n      originalEftDate\n      adjustedEftDate\n      processingDate\n    }\n  }\n}\n\nquery SearchPayrolls($searchTerm: String!, $limit: Int = 50) {\n  payrolls(\n    where: {_and: [{supersededDate: {_isNull: true}}, {_or: [{name: {_ilike: $searchTerm}}, {client: {name: {_ilike: $searchTerm}}}, {primaryConsultant: {name: {_ilike: $searchTerm}}}]}]}\n    orderBy: {name: ASC}\n    limit: $limit\n  ) {\n    ...PayrollTableRow\n  }\n}\n\nquery GetPayrollsByStatus($status: payroll_status!) {\n  payrolls(\n    where: {supersededDate: {_isNull: true}, status: {_eq: $status}}\n    orderBy: {updatedAt: DESC}\n  ) {\n    ...PayrollListItem\n  }\n}\n\nquery GetPayrollsByProcessingTime($processingTime: Int!) {\n  payrolls(\n    where: {supersededDate: {_isNull: true}, processingTime: {_eq: $processingTime}}\n    orderBy: {name: ASC}\n  ) {\n    ...PayrollProcessingInfo\n  }\n}\n\nquery GetPayrollVersions($payrollId: uuid!) {\n  payrolls(\n    where: {_or: [{id: {_eq: $payrollId}}, {parentPayrollId: {_eq: $payrollId}}]}\n    orderBy: {versionNumber: DESC}\n  ) {\n    ...PayrollVersionInfo\n  }\n}\n\nquery GetPayrollHistory($payrollId: uuid!) {\n  payrolls(\n    where: {_or: [{id: {_eq: $payrollId}}, {parentPayrollId: {_eq: $payrollId}}]}\n    orderBy: {createdAt: DESC}\n  ) {\n    ...PayrollVersionInfo\n    status\n    supersededDate\n  }\n}\n\nquery GetLatestPayrollVersion($payrollId: uuid!) {\n  payrolls(\n    where: {_or: [{id: {_eq: $payrollId}}, {parentPayrollId: {_eq: $payrollId}}], supersededDate: {_isNull: true}}\n    limit: 1\n  ) {\n    ...PayrollWithAllRelations\n  }\n}\n\nquery GetPayrollCycles {\n  payrollCycles(orderBy: {name: ASC}) {\n    id\n    name\n    description\n    createdAt\n    updatedAt\n  }\n}\n\nquery GetPayrollDateTypes {\n  payrollDateTypes(orderBy: {name: ASC}) {\n    id\n    name\n    description\n    createdAt\n    updatedAt\n  }\n}\n\nquery GetPayrollDates($payrollId: uuid!) {\n  payrollDates(\n    where: {payrollId: {_eq: $payrollId}}\n    orderBy: {originalEftDate: ASC}\n  ) {\n    id\n    originalEftDate\n    adjustedEftDate\n    processingDate\n    notes\n    createdAt\n    updatedAt\n    payrollId\n  }\n}\n\nquery GetUpcomingPayrollDates($limit: Int = 20) {\n  payrollDates(\n    where: {originalEftDate: {_gte: \"now()\"}}\n    orderBy: {originalEftDate: ASC}\n    limit: $limit\n  ) {\n    id\n    originalEftDate\n    adjustedEftDate\n    processingDate\n    notes\n    payrollAssignment {\n      payrollDate {\n        relatedPayroll {\n          id\n          name\n          status\n          client {\n            id\n            name\n          }\n        }\n      }\n    }\n  }\n}\n\nquery GetPayrollDatesInRange($startDate: date!, $endDate: date!, $payrollId: uuid) {\n  payrollDates(\n    where: {originalEftDate: {_gte: $startDate, _lte: $endDate}, payrollId: {_eq: $payrollId}}\n    orderBy: {originalEftDate: ASC}\n  ) {\n    id\n    originalEftDate\n    adjustedEftDate\n    processingDate\n    notes\n    payrollAssignment {\n      payrollDate {\n        relatedPayroll {\n          id\n          name\n          client {\n            name\n          }\n        }\n      }\n    }\n  }\n}\n\nquery GetUnassignedPayrolls {\n  payrolls(\n    where: {supersededDate: {_isNull: true}, _or: [{primaryConsultantUserId: {_isNull: true}}, {backupConsultantUserId: {_isNull: true}}, {managerUserId: {_isNull: true}}]}\n    orderBy: {createdAt: DESC}\n  ) {\n    ...PayrollForAssignment\n  }\n}\n\nquery GetPayrollsNeedingAttention {\n  payrolls(\n    where: {supersededDate: {_isNull: true}, status: {_in: [\"Pending Review\", \"Issue\", \"Processing\"]}}\n    orderBy: {updatedAt: ASC}\n  ) {\n    ...PayrollListItem\n    primaryConsultant {\n      id\n      name\n    }\n    manager {\n      id\n      name\n    }\n  }\n}\n\nquery GetPayrollsForBulkUpdate($ids: [uuid!]!) {\n  payrolls(where: {id: {_in: $ids}}) {\n    ...PayrollBasic\n  }\n}\n\nquery GetPayrollsForBulkAssignment($where: payrollsBoolExp!) {\n  payrolls(where: $where) {\n    ...PayrollForAssignment\n  }\n}\n\nquery GetPayrollsForAudit($limit: Int = 100, $offset: Int = 0, $where: payrollsBoolExp = {}) {\n  payrolls(\n    limit: $limit\n    offset: $offset\n    where: $where\n    orderBy: {updatedAt: DESC}\n  ) {\n    ...PayrollForAudit\n  }\n}\n\nquery GetPayrollActivity($payrollId: uuid!, $limit: Int = 50) {\n  payrolls(\n    where: {_or: [{id: {_eq: $payrollId}}, {parentPayrollId: {_eq: $payrollId}}]}\n    orderBy: {updatedAt: DESC}\n    limit: $limit\n  ) {\n    ...PayrollVersionInfo\n    status\n    supersededDate\n  }\n}\n\nquery GetPayrollsPaginated($limit: Int = 20, $offset: Int = 0, $where: payrollsBoolExp = {}, $orderBy: [payrollsOrderBy!] = [{createdAt: DESC}]) {\n  payrolls(\n    limit: $limit\n    offset: $offset\n    where: {_and: [{supersededDate: {_isNull: true}}, $where]}\n    orderBy: $orderBy\n  ) {\n    ...PayrollTableRow\n  }\n  payrollsAggregate(where: {_and: [{supersededDate: {_isNull: true}}, $where]}) {\n    aggregate {\n      count\n    }\n  }\n}\n\nquery SearchPayrollsPaginated($searchTerm: String!, $limit: Int = 20, $offset: Int = 0) {\n  payrolls(\n    where: {_and: [{supersededDate: {_isNull: true}}, {_or: [{name: {_ilike: $searchTerm}}, {client: {name: {_ilike: $searchTerm}}}, {primaryConsultant: {name: {_ilike: $searchTerm}}}, {backupConsultant: {name: {_ilike: $searchTerm}}}]}]}\n    orderBy: {name: ASC}\n    limit: $limit\n    offset: $offset\n  ) {\n    ...PayrollTableRow\n  }\n  searchAggregate: payrollsAggregate(\n    where: {_and: [{supersededDate: {_isNull: true}}, {_or: [{name: {_ilike: $searchTerm}}, {client: {name: {_ilike: $searchTerm}}}, {primaryConsultant: {name: {_ilike: $searchTerm}}}, {backupConsultant: {name: {_ilike: $searchTerm}}}]}]}\n  ) {\n    aggregate {\n      count\n    }\n  }\n}\n\nquery GetPayrollsQuickList {\n  payrolls(where: {supersededDate: {_isNull: true}}, orderBy: {name: ASC}) {\n    ...PayrollMinimal\n  }\n}\n\nquery GetActivePayrollsQuickList {\n  payrolls(\n    where: {supersededDate: {_isNull: true}, status: {_eq: \"Active\"}}\n    orderBy: {name: ASC}\n  ) {\n    ...PayrollMinimal\n  }\n}\n\nquery GetClientPayrollsQuickList($clientId: uuid!) {\n  payrolls(\n    where: {clientId: {_eq: $clientId}, supersededDate: {_isNull: true}}\n    orderBy: {name: ASC}\n  ) {\n    ...PayrollMinimal\n  }\n}\n\nquery GeneratePayrollDates($payrollId: uuid!, $startDate: date!, $endDate: date!, $maxDates: Int = 100) {\n  generatePayrollDates(\n    args: {p_payroll_id: $payrollId, p_start_date: $startDate, p_end_date: $endDate, p_max_dates: $maxDates}\n  ) {\n    id\n    originalEftDate\n    adjustedEftDate\n    processingDate\n    notes\n    payrollId\n    createdAt\n    updatedAt\n  }\n}\n\nquery GeneratePayrollDatesQuery($payrollId: uuid!, $startDate: date!, $endDate: date!, $maxDates: Int = 100) {\n  generatePayrollDates(\n    args: {p_payroll_id: $payrollId, p_start_date: $startDate, p_end_date: $endDate, p_max_dates: $maxDates}\n  ) {\n    id\n    originalEftDate\n    adjustedEftDate\n    processingDate\n    notes\n    payrollId\n    createdAt\n    updatedAt\n  }\n}\n\nquery GetUserUpcomingPayrolls($userId: uuid!, $limit: Int = 10) {\n  payrolls(\n    where: {supersededDate: {_isNull: true}, status: {_eq: \"Active\"}, _or: [{primaryConsultantUserId: {_eq: $userId}}, {backupConsultantUserId: {_eq: $userId}}, {managerUserId: {_eq: $userId}}], payrollDates: {originalEftDate: {_gte: \"now()\"}}}\n    orderBy: {updatedAt: DESC}\n    limit: $limit\n  ) {\n    ...PayrollDashboardCard\n    nextPayDate: payrollDates(\n      where: {originalEftDate: {_gte: \"now()\"}}\n      orderBy: {originalEftDate: ASC}\n      limit: 1\n    ) {\n      originalEftDate\n      adjustedEftDate\n      processingDate\n    }\n  }\n}\n\nquery GetPayrollsByMonth($startDate: date!, $endDate: date!) {\n  payrolls(\n    where: {supersededDate: {_isNull: true}, payrollDates: {originalEftDate: {_gte: $startDate, _lt: $endDate}}}\n    orderBy: {createdAt: DESC}\n  ) {\n    ...PayrollWithDates\n    client {\n      id\n      name\n    }\n  }\n}\n\nquery GetPayrollFamilyDates($payrollId: uuid!) {\n  payrolls(\n    where: {_or: [{id: {_eq: $payrollId}}, {parentPayrollId: {_eq: $payrollId}}]}\n    orderBy: {versionNumber: DESC}\n  ) {\n    id\n    name\n    versionNumber\n    status\n    payrollDates(orderBy: {originalEftDate: ASC}) {\n      ...PayrollDate\n    }\n  }\n}\n\nquery GetPayrollsMissingDates {\n  payrolls(\n    where: {supersededDate: {_isNull: true}, status: {_eq: \"Active\"}, _not: {payrollDates: {}}}\n    orderBy: {name: ASC}\n  ) {\n    ...PayrollListItem\n    payrollCycle {\n      id\n      name\n      description\n    }\n    payrollDateType {\n      id\n      name\n      description\n    }\n  }\n}": typeof types.GetPayrollsDocument,
    "subscription PayrollsUpdates {\n  payrolls(where: {supersededDate: {_isNull: true}}, orderBy: {updatedAt: DESC}) {\n    ...PayrollListItem\n  }\n}\n\nsubscription PayrollUpdates($id: uuid!) {\n  payrolls(where: {id: {_eq: $id}}) {\n    ...PayrollDetailed\n  }\n}\n\nsubscription ActivePayrollsUpdates {\n  payrolls(\n    where: {supersededDate: {_isNull: true}, status: {_eq: \"Active\"}}\n    orderBy: {name: ASC}\n  ) {\n    ...PayrollSummary\n    client {\n      id\n      name\n    }\n  }\n}\n\nsubscription PayrollStatsUpdates {\n  payrollsAggregate(where: {supersededDate: {_isNull: true}}) {\n    aggregate {\n      count\n    }\n  }\n}\n\nsubscription UnassignedPayrollsUpdates {\n  payrolls(\n    where: {supersededDate: {_isNull: true}, _or: [{primaryConsultantUserId: {_isNull: true}}, {backupConsultantUserId: {_isNull: true}}, {managerUserId: {_isNull: true}}]}\n  ) {\n    ...PayrollForAssignment\n  }\n}\n\nsubscription PayrollDatesUpdates($payrollId: uuid!) {\n  payrollDates(\n    where: {payrollId: {_eq: $payrollId}}\n    orderBy: {originalEftDate: ASC}\n  ) {\n    id\n    originalEftDate\n    adjustedEftDate\n    processingDate\n    notes\n    updatedAt\n  }\n}\n\nsubscription UpcomingPayrollDatesUpdates {\n  payrollDates(\n    where: {originalEftDate: {_gte: \"now()\"}}\n    orderBy: {originalEftDate: ASC}\n    limit: 20\n  ) {\n    id\n    originalEftDate\n    adjustedEftDate\n    processingDate\n    notes\n    payrollId\n  }\n}\n\nsubscription PayrollSystemHealthUpdates {\n  payrolls(\n    where: {supersededDate: {_isNull: true}, status: {_in: [\"Pending Review\", \"Issue\", \"Processing\"]}}\n    orderBy: {updatedAt: ASC}\n  ) {\n    ...PayrollListItem\n    primaryConsultant {\n      id\n      name\n    }\n    manager {\n      id\n      name\n    }\n  }\n}\n\nsubscription PayrollSubscription {\n  payrolls(where: {supersededDate: {_isNull: true}}, orderBy: {updatedAt: DESC}) {\n    ...PayrollListItem\n  }\n}": typeof types.PayrollsUpdatesDocument,
    "fragment UserCore on users {\n  id\n  name\n  email\n  username\n  role\n  isActive\n  isStaff\n  clerkUserId\n  createdAt\n  updatedAt\n}\n\nfragment UserBasic on users {\n  id\n  name\n  email\n  role\n  isActive\n}\n\nfragment UserWithManager on users {\n  ...UserCore\n  managerId\n  managerUser {\n    ...UserBasic\n  }\n}\n\nfragment RoleCore on roles {\n  id\n  name\n  description\n  displayName\n  priority\n  isSystemRole\n  createdAt\n}\n\nfragment PermissionCore on permissions {\n  id\n  action\n  description\n  resourceId\n  createdAt\n  updatedAt\n}\n\nfragment PermissionWithResource on permissions {\n  ...PermissionCore\n  relatedResource {\n    id\n    name\n    description\n  }\n}\n\nfragment ClientCore on clients {\n  id\n  name\n  contactEmail\n  contactPerson\n  contactPhone\n  active\n  createdAt\n  updatedAt\n}\n\nfragment ClientBasic on clients {\n  id\n  name\n  active\n}\n\nfragment ResourceCore on resources {\n  id\n  name\n  displayName\n  description\n  createdAt\n  updatedAt\n}\n\nfragment UserRoleCore on userRoles {\n  id\n  userId\n  roleId\n  createdAt\n  updatedAt\n}\n\nfragment RolePermissionCore on rolePermissions {\n  id\n  roleId\n  permissionId\n  conditions\n  createdAt\n  updatedAt\n}\n\nfragment AuditFields on auditLogs {\n  id\n  eventTime\n  action\n  resourceType\n  resourceId\n  userId\n  ipAddress\n  userAgent\n  success\n  userEmail\n  userRole\n}": typeof types.UserCoreFragmentDoc,
};
const documents: Documents = {
    "fragment PayrollCore on payrolls {\n  id\n  name\n  status\n  clientId\n  employeeCount\n  goLiveDate\n  payrollSystem\n  processingTime\n  processingDaysBeforeEft\n  createdAt\n  updatedAt\n  versionNumber\n  supersededDate\n}\n\nfragment PayrollBasic on payrolls {\n  ...PayrollCore\n  primaryConsultantUserId\n  backupConsultantUserId\n  managerUserId\n  cycleId\n  dateTypeId\n  dateValue\n}\n\nfragment PayrollDetailed on payrolls {\n  ...PayrollBasic\n  parentPayrollId\n  versionReason\n  createdByUserId\n}\n\nfragment PayrollWithClient on payrolls {\n  ...PayrollBasic\n  client {\n    id\n    name\n    contactPerson\n    contactEmail\n    active\n  }\n}\n\nfragment PayrollWithUsers on payrolls {\n  ...PayrollBasic\n  primaryConsultant {\n    id\n    name\n    email\n    role\n    isActive\n  }\n  backupConsultant {\n    id\n    name\n    email\n    role\n    isActive\n  }\n  manager {\n    id\n    name\n    email\n    role\n    isActive\n  }\n}\n\nfragment PayrollWithCycle on payrolls {\n  ...PayrollBasic\n  payrollCycle {\n    id\n    name\n    description\n  }\n  payrollDateType {\n    id\n    name\n    description\n  }\n}\n\nfragment PayrollWithAllRelations on payrolls {\n  ...PayrollDetailed\n  client {\n    id\n    name\n    contactPerson\n    contactEmail\n    active\n  }\n  primaryConsultant {\n    id\n    name\n    email\n    role\n    isActive\n  }\n  backupConsultant {\n    id\n    name\n    email\n    role\n    isActive\n  }\n  manager {\n    id\n    name\n    email\n    role\n    isActive\n  }\n  payrollCycle {\n    id\n    name\n    description\n  }\n  payrollDateType {\n    id\n    name\n    description\n  }\n  createdByUserId\n  parentPayroll {\n    id\n    name\n    versionNumber\n    status\n  }\n}\n\nfragment PayrollSummary on payrolls {\n  id\n  name\n  status\n  clientId\n  employeeCount\n  supersededDate\n}\n\nfragment PayrollListItem on payrolls {\n  ...PayrollSummary\n  goLiveDate\n  primaryConsultantUserId\n  backupConsultantUserId\n  managerUserId\n  createdAt\n  updatedAt\n  client {\n    id\n    name\n  }\n}\n\nfragment PayrollTableRow on payrolls {\n  ...PayrollListItem\n  payrollSystem\n  processingTime\n  versionNumber\n  primaryConsultant {\n    id\n    name\n  }\n  backupConsultant {\n    id\n    name\n  }\n  manager {\n    id\n    name\n  }\n}\n\nfragment PayrollDashboardCard on payrolls {\n  ...PayrollSummary\n  goLiveDate\n  primaryConsultant {\n    id\n    name\n  }\n  client {\n    id\n    name\n  }\n  payrollCycle {\n    id\n    name\n    description\n  }\n}\n\nfragment PayrollMinimal on payrolls {\n  id\n  name\n  status\n  clientId\n}\n\nfragment PayrollForAssignment on payrolls {\n  id\n  name\n  status\n  employeeCount\n  goLiveDate\n  client {\n    id\n    name\n  }\n  primaryConsultantUserId\n  backupConsultantUserId\n  managerUserId\n}\n\nfragment PayrollForAudit on payrolls {\n  id\n  name\n  status\n  clientId\n  employeeCount\n  goLiveDate\n  versionNumber\n  createdAt\n  updatedAt\n}\n\nfragment PayrollVersionInfo on payrolls {\n  id\n  name\n  versionNumber\n  versionReason\n  parentPayrollId\n  supersededDate\n  createdAt\n  createdByUserId\n}\n\nfragment PayrollWithDates on payrolls {\n  ...PayrollCore\n  payrollDates(orderBy: {originalEftDate: ASC}) {\n    id\n    originalEftDate\n    adjustedEftDate\n    processingDate\n    notes\n    createdAt\n    updatedAt\n  }\n}\n\nfragment PayrollProcessingInfo on payrolls {\n  id\n  name\n  status\n  payrollSystem\n  processingTime\n  processingDaysBeforeEft\n  goLiveDate\n  employeeCount\n  client {\n    id\n    name\n  }\n  payrollCycle {\n    id\n    name\n    description\n  }\n}\n\nfragment PayrollWorkload on payrolls {\n  id\n  name\n  status\n  employeeCount\n  client {\n    id\n    name\n  }\n  payrollCycle {\n    id\n    name\n    description\n  }\n}\n\nfragment PayrollDate on payrollDates {\n  id\n  originalEftDate\n  adjustedEftDate\n  processingDate\n  notes\n  payrollId\n  createdAt\n  updatedAt\n}": types.PayrollCoreFragmentDoc,
    "mutation CreatePayroll($object: payrollsInsertInput!) {\n  insertPayroll(object: $object) {\n    ...PayrollDetailed\n    client {\n      id\n      name\n    }\n    primaryConsultant {\n      id\n      name\n    }\n    manager {\n      id\n      name\n    }\n  }\n}\n\nmutation UpdatePayroll($id: uuid!, $set: payrollsSetInput!) {\n  updatePayrollById(pkColumns: {id: $id}, _set: $set) {\n    ...PayrollDetailed\n    client {\n      id\n      name\n    }\n    primaryConsultant {\n      id\n      name\n    }\n    backupConsultant {\n      id\n      name\n    }\n    manager {\n      id\n      name\n    }\n  }\n}\n\nmutation DeletePayroll($id: uuid!) {\n  updatePayrollById(pkColumns: {id: $id}, _set: {supersededDate: \"now()\"}) {\n    ...PayrollBasic\n  }\n}\n\nmutation ReactivatePayroll($id: uuid!) {\n  updatePayrollById(pkColumns: {id: $id}, _set: {supersededDate: null}) {\n    ...PayrollBasic\n  }\n}\n\nmutation UpdatePayrollStatus($id: uuid!, $status: payroll_status!) {\n  updatePayrollById(\n    pkColumns: {id: $id}\n    _set: {status: $status, updatedAt: \"now()\"}\n  ) {\n    ...PayrollBasic\n    client {\n      id\n      name\n    }\n  }\n}\n\nmutation ActivatePayroll($id: uuid!) {\n  updatePayrollById(\n    pkColumns: {id: $id}\n    _set: {status: \"Active\", updatedAt: \"now()\"}\n  ) {\n    ...PayrollBasic\n  }\n}\n\nmutation DeactivatePayroll($id: uuid!) {\n  updatePayrollById(\n    pkColumns: {id: $id}\n    _set: {status: \"Inactive\", updatedAt: \"now()\"}\n  ) {\n    ...PayrollBasic\n  }\n}\n\nmutation AssignPrimaryConsultant($id: uuid!, $userId: uuid!) {\n  updatePayrollById(\n    pkColumns: {id: $id}\n    _set: {primaryConsultantUserId: $userId, updatedAt: \"now()\"}\n  ) {\n    ...PayrollBasic\n    primaryConsultant {\n      id\n      name\n      email\n    }\n  }\n}\n\nmutation AssignBackupConsultant($id: uuid!, $userId: uuid!) {\n  updatePayrollById(\n    pkColumns: {id: $id}\n    _set: {backupConsultantUserId: $userId, updatedAt: \"now()\"}\n  ) {\n    ...PayrollBasic\n    backupConsultant {\n      id\n      name\n      email\n    }\n  }\n}\n\nmutation AssignManager($id: uuid!, $userId: uuid!) {\n  updatePayrollById(\n    pkColumns: {id: $id}\n    _set: {managerUserId: $userId, updatedAt: \"now()\"}\n  ) {\n    ...PayrollBasic\n    manager {\n      id\n      name\n      email\n    }\n  }\n}\n\nmutation UpdatePayrollAssignments($id: uuid!, $primaryConsultantUserId: uuid, $backupConsultantUserId: uuid, $managerUserId: uuid) {\n  updatePayrollById(\n    pkColumns: {id: $id}\n    _set: {primaryConsultantUserId: $primaryConsultantUserId, backupConsultantUserId: $backupConsultantUserId, managerUserId: $managerUserId, updatedAt: \"now()\"}\n  ) {\n    ...PayrollBasic\n    primaryConsultant {\n      id\n      name\n      email\n    }\n    backupConsultant {\n      id\n      name\n      email\n    }\n    manager {\n      id\n      name\n      email\n    }\n  }\n}\n\nmutation CreatePayrollVersion($parentPayrollId: uuid!, $versionReason: String!, $object: payrollsInsertInput!) {\n  updatePayrollById(\n    pkColumns: {id: $parentPayrollId}\n    _set: {supersededDate: \"now()\"}\n  ) {\n    id\n    supersededDate\n  }\n  insertPayroll(object: $object) {\n    ...PayrollWithAllRelations\n  }\n}\n\nmutation SupersedePayroll($id: uuid!) {\n  updatePayrollById(pkColumns: {id: $id}, _set: {supersededDate: \"now()\"}) {\n    ...PayrollBasic\n  }\n}\n\nmutation BulkUpdatePayrolls($where: payrollsBoolExp!, $set: payrollsSetInput!) {\n  bulkUpdatePayrolls(where: $where, _set: $set) {\n    returning {\n      ...PayrollBasic\n    }\n    affectedRows\n  }\n}\n\nmutation BulkAssignConsultant($payrollIds: [uuid!]!, $primaryConsultantUserId: uuid!) {\n  bulkUpdatePayrolls(\n    where: {id: {_in: $payrollIds}}\n    _set: {primaryConsultantUserId: $primaryConsultantUserId, updatedAt: \"now()\"}\n  ) {\n    returning {\n      ...PayrollBasic\n      primaryConsultant {\n        id\n        name\n      }\n    }\n    affectedRows\n  }\n}\n\nmutation BulkAssignManager($payrollIds: [uuid!]!, $managerUserId: uuid!) {\n  bulkUpdatePayrolls(\n    where: {id: {_in: $payrollIds}}\n    _set: {managerUserId: $managerUserId, updatedAt: \"now()\"}\n  ) {\n    returning {\n      ...PayrollBasic\n      manager {\n        id\n        name\n      }\n    }\n    affectedRows\n  }\n}\n\nmutation BulkUpdatePayrollStatus($payrollIds: [uuid!]!, $status: payroll_status!) {\n  bulkUpdatePayrolls(\n    where: {id: {_in: $payrollIds}}\n    _set: {status: $status, updatedAt: \"now()\"}\n  ) {\n    returning {\n      ...PayrollBasic\n    }\n    affectedRows\n  }\n}\n\nmutation UpdatePayrollConfiguration($id: uuid!, $payrollSystem: String, $processingTime: Int, $processingDaysBeforeEft: Int, $cycleId: uuid, $dateTypeId: uuid) {\n  updatePayrollById(\n    pkColumns: {id: $id}\n    _set: {payrollSystem: $payrollSystem, processingTime: $processingTime, processingDaysBeforeEft: $processingDaysBeforeEft, cycleId: $cycleId, dateTypeId: $dateTypeId, updatedAt: \"now()\"}\n  ) {\n    ...PayrollWithCycle\n  }\n}\n\nmutation UpdatePayrollDetails($id: uuid!, $name: String, $employeeCount: Int, $goLiveDate: date) {\n  updatePayrollById(\n    pkColumns: {id: $id}\n    _set: {name: $name, employeeCount: $employeeCount, goLiveDate: $goLiveDate, updatedAt: \"now()\"}\n  ) {\n    ...PayrollBasic\n  }\n}\n\nmutation CreatePayrollDate($object: payrollDatesInsertInput!) {\n  insertPayrollDate(object: $object) {\n    id\n    originalEftDate\n    adjustedEftDate\n    processingDate\n    notes\n    payrollId\n    createdAt\n    updatedAt\n  }\n}\n\nmutation UpdatePayrollDate($id: uuid!, $set: payrollDatesSetInput!) {\n  updatePayrollDateById(pkColumns: {id: $id}, _set: $set) {\n    id\n    originalEftDate\n    adjustedEftDate\n    processingDate\n    notes\n    payrollId\n    updatedAt\n  }\n}\n\nmutation DeletePayrollDate($id: uuid!) {\n  deletePayrollDateById(id: $id) {\n    id\n    originalEftDate\n    adjustedEftDate\n    payrollId\n  }\n}\n\nmutation UpdatePayrollDateNotes($id: uuid!, $notes: String) {\n  updatePayrollDateById(\n    pkColumns: {id: $id}\n    _set: {notes: $notes, updatedAt: \"now()\"}\n  ) {\n    id\n    originalEftDate\n    adjustedEftDate\n    notes\n    payrollId\n  }\n}\n\nmutation BulkCreatePayrollDates($objects: [payrollDatesInsertInput!]!) {\n  bulkInsertPayrollDates(objects: $objects) {\n    returning {\n      id\n      originalEftDate\n      adjustedEftDate\n      processingDate\n      payrollId\n    }\n    affectedRows\n  }\n}\n\nmutation BulkDeletePayrollDates($payrollId: uuid!) {\n  bulkDeletePayrollDates(where: {payrollId: {_eq: $payrollId}}) {\n    affectedRows\n  }\n}\n\nmutation CreatePayrollCycle($object: payrollCyclesInsertInput!) {\n  insertPayrollCycle(object: $object) {\n    id\n    name\n    description\n    createdAt\n  }\n}\n\nmutation UpdatePayrollCycle($id: uuid!, $set: payrollCyclesSetInput!) {\n  updatePayrollCycleById(pkColumns: {id: $id}, _set: $set) {\n    id\n    name\n    description\n    updatedAt\n  }\n}\n\nmutation DeletePayrollCycle($id: uuid!) {\n  deletePayrollCycleById(id: $id) {\n    id\n    name\n  }\n}\n\nmutation CreatePayrollDateType($object: payrollDateTypesInsertInput!) {\n  insertPayrollDateType(object: $object) {\n    id\n    name\n    description\n    createdAt\n  }\n}\n\nmutation UpdatePayrollDateType($id: uuid!, $set: payrollDateTypesSetInput!) {\n  updatePayrollDateTypeById(pkColumns: {id: $id}, _set: $set) {\n    id\n    name\n    description\n    updatedAt\n  }\n}\n\nmutation DeletePayrollDateType($id: uuid!) {\n  deletePayrollDateTypeById(id: $id) {\n    id\n    name\n  }\n}\n\nmutation CommitPayrollAssignments($changes: [PayrollAssignmentInput!]!) {\n  commitPayrollAssignments(changes: $changes) {\n    success\n    message\n    errors\n    affectedAssignments {\n      id\n      payrollDateId\n      originalConsultantId\n      newConsultantId\n      adjustedEftDate\n    }\n  }\n}": types.CreatePayrollDocument,
    "query GetPayrolls($limit: Int = 50, $offset: Int = 0, $where: payrollsBoolExp) {\n  payrolls(\n    limit: $limit\n    offset: $offset\n    where: $where\n    orderBy: {createdAt: DESC}\n  ) {\n    ...PayrollListItem\n  }\n  payrollsAggregate(where: $where) {\n    aggregate {\n      count\n    }\n  }\n}\n\nquery GetPayrollById($id: uuid!) {\n  payrollById(id: $id) {\n    ...PayrollWithAllRelations\n  }\n}\n\nquery GetPayrollBasic($id: uuid!) {\n  payrollById(id: $id) {\n    ...PayrollBasic\n  }\n}\n\nquery GetPayrollForEdit($id: uuid!) {\n  payrollById(id: $id) {\n    ...PayrollDetailed\n    client {\n      id\n      name\n    }\n    payrollCycle {\n      id\n      name\n      description\n    }\n    payrollDateType {\n      id\n      name\n    }\n  }\n}\n\nquery GetPayrollsSimple {\n  payrolls(where: {supersededDate: {_isNull: true}}, orderBy: {name: ASC}) {\n    ...PayrollMinimal\n  }\n}\n\nquery GetActivePayrolls {\n  payrolls(\n    where: {supersededDate: {_isNull: true}, status: {_neq: \"Inactive\"}}\n    orderBy: {name: ASC}\n  ) {\n    ...PayrollSummary\n    client {\n      id\n      name\n    }\n  }\n}\n\nquery GetPayrollsByClient($clientId: uuid!) {\n  payrolls(\n    where: {clientId: {_eq: $clientId}, supersededDate: {_isNull: true}}\n    orderBy: {createdAt: DESC}\n  ) {\n    ...PayrollListItem\n  }\n}\n\nquery GetPayrollsByUser($userId: uuid!) {\n  primaryPayrolls: payrolls(\n    where: {primaryConsultantUserId: {_eq: $userId}, supersededDate: {_isNull: true}}\n    orderBy: {name: ASC}\n  ) {\n    ...PayrollWorkload\n  }\n  backupPayrolls: payrolls(\n    where: {backupConsultantUserId: {_eq: $userId}, supersededDate: {_isNull: true}}\n    orderBy: {name: ASC}\n  ) {\n    ...PayrollWorkload\n  }\n  managedPayrolls: payrolls(\n    where: {managerUserId: {_eq: $userId}, supersededDate: {_isNull: true}}\n    orderBy: {name: ASC}\n  ) {\n    ...PayrollWorkload\n  }\n}\n\nquery GetPayrollDashboardStats {\n  totalPayrolls: payrollsAggregate(where: {supersededDate: {_isNull: true}}) {\n    aggregate {\n      count\n    }\n  }\n  activePayrolls: payrollsAggregate(\n    where: {supersededDate: {_isNull: true}, status: {_eq: \"Active\"}}\n  ) {\n    aggregate {\n      count\n    }\n  }\n  processingPayrolls: payrollsAggregate(\n    where: {supersededDate: {_isNull: true}, status: {_eq: \"Processing\"}}\n  ) {\n    aggregate {\n      count\n    }\n  }\n  recentPayrolls: payrolls(\n    where: {supersededDate: {_isNull: true}}\n    orderBy: {updatedAt: DESC}\n    limit: 5\n  ) {\n    ...PayrollDashboardCard\n  }\n}\n\nquery GetUpcomingPayrolls($limit: Int = 10) {\n  payrolls(\n    where: {supersededDate: {_isNull: true}, status: {_eq: \"Active\"}, payrollDates: {originalEftDate: {_gte: \"now()\"}}}\n    orderBy: {updatedAt: DESC}\n    limit: $limit\n  ) {\n    ...PayrollDashboardCard\n    nextPayDate: payrollDates(\n      where: {originalEftDate: {_gte: \"now()\"}}\n      orderBy: {originalEftDate: ASC}\n      limit: 1\n    ) {\n      originalEftDate\n      adjustedEftDate\n      processingDate\n    }\n  }\n}\n\nquery SearchPayrolls($searchTerm: String!, $limit: Int = 50) {\n  payrolls(\n    where: {_and: [{supersededDate: {_isNull: true}}, {_or: [{name: {_ilike: $searchTerm}}, {client: {name: {_ilike: $searchTerm}}}, {primaryConsultant: {name: {_ilike: $searchTerm}}}]}]}\n    orderBy: {name: ASC}\n    limit: $limit\n  ) {\n    ...PayrollTableRow\n  }\n}\n\nquery GetPayrollsByStatus($status: payroll_status!) {\n  payrolls(\n    where: {supersededDate: {_isNull: true}, status: {_eq: $status}}\n    orderBy: {updatedAt: DESC}\n  ) {\n    ...PayrollListItem\n  }\n}\n\nquery GetPayrollsByProcessingTime($processingTime: Int!) {\n  payrolls(\n    where: {supersededDate: {_isNull: true}, processingTime: {_eq: $processingTime}}\n    orderBy: {name: ASC}\n  ) {\n    ...PayrollProcessingInfo\n  }\n}\n\nquery GetPayrollVersions($payrollId: uuid!) {\n  payrolls(\n    where: {_or: [{id: {_eq: $payrollId}}, {parentPayrollId: {_eq: $payrollId}}]}\n    orderBy: {versionNumber: DESC}\n  ) {\n    ...PayrollVersionInfo\n  }\n}\n\nquery GetPayrollHistory($payrollId: uuid!) {\n  payrolls(\n    where: {_or: [{id: {_eq: $payrollId}}, {parentPayrollId: {_eq: $payrollId}}]}\n    orderBy: {createdAt: DESC}\n  ) {\n    ...PayrollVersionInfo\n    status\n    supersededDate\n  }\n}\n\nquery GetLatestPayrollVersion($payrollId: uuid!) {\n  payrolls(\n    where: {_or: [{id: {_eq: $payrollId}}, {parentPayrollId: {_eq: $payrollId}}], supersededDate: {_isNull: true}}\n    limit: 1\n  ) {\n    ...PayrollWithAllRelations\n  }\n}\n\nquery GetPayrollCycles {\n  payrollCycles(orderBy: {name: ASC}) {\n    id\n    name\n    description\n    createdAt\n    updatedAt\n  }\n}\n\nquery GetPayrollDateTypes {\n  payrollDateTypes(orderBy: {name: ASC}) {\n    id\n    name\n    description\n    createdAt\n    updatedAt\n  }\n}\n\nquery GetPayrollDates($payrollId: uuid!) {\n  payrollDates(\n    where: {payrollId: {_eq: $payrollId}}\n    orderBy: {originalEftDate: ASC}\n  ) {\n    id\n    originalEftDate\n    adjustedEftDate\n    processingDate\n    notes\n    createdAt\n    updatedAt\n    payrollId\n  }\n}\n\nquery GetUpcomingPayrollDates($limit: Int = 20) {\n  payrollDates(\n    where: {originalEftDate: {_gte: \"now()\"}}\n    orderBy: {originalEftDate: ASC}\n    limit: $limit\n  ) {\n    id\n    originalEftDate\n    adjustedEftDate\n    processingDate\n    notes\n    payrollAssignment {\n      payrollDate {\n        relatedPayroll {\n          id\n          name\n          status\n          client {\n            id\n            name\n          }\n        }\n      }\n    }\n  }\n}\n\nquery GetPayrollDatesInRange($startDate: date!, $endDate: date!, $payrollId: uuid) {\n  payrollDates(\n    where: {originalEftDate: {_gte: $startDate, _lte: $endDate}, payrollId: {_eq: $payrollId}}\n    orderBy: {originalEftDate: ASC}\n  ) {\n    id\n    originalEftDate\n    adjustedEftDate\n    processingDate\n    notes\n    payrollAssignment {\n      payrollDate {\n        relatedPayroll {\n          id\n          name\n          client {\n            name\n          }\n        }\n      }\n    }\n  }\n}\n\nquery GetUnassignedPayrolls {\n  payrolls(\n    where: {supersededDate: {_isNull: true}, _or: [{primaryConsultantUserId: {_isNull: true}}, {backupConsultantUserId: {_isNull: true}}, {managerUserId: {_isNull: true}}]}\n    orderBy: {createdAt: DESC}\n  ) {\n    ...PayrollForAssignment\n  }\n}\n\nquery GetPayrollsNeedingAttention {\n  payrolls(\n    where: {supersededDate: {_isNull: true}, status: {_in: [\"Pending Review\", \"Issue\", \"Processing\"]}}\n    orderBy: {updatedAt: ASC}\n  ) {\n    ...PayrollListItem\n    primaryConsultant {\n      id\n      name\n    }\n    manager {\n      id\n      name\n    }\n  }\n}\n\nquery GetPayrollsForBulkUpdate($ids: [uuid!]!) {\n  payrolls(where: {id: {_in: $ids}}) {\n    ...PayrollBasic\n  }\n}\n\nquery GetPayrollsForBulkAssignment($where: payrollsBoolExp!) {\n  payrolls(where: $where) {\n    ...PayrollForAssignment\n  }\n}\n\nquery GetPayrollsForAudit($limit: Int = 100, $offset: Int = 0, $where: payrollsBoolExp = {}) {\n  payrolls(\n    limit: $limit\n    offset: $offset\n    where: $where\n    orderBy: {updatedAt: DESC}\n  ) {\n    ...PayrollForAudit\n  }\n}\n\nquery GetPayrollActivity($payrollId: uuid!, $limit: Int = 50) {\n  payrolls(\n    where: {_or: [{id: {_eq: $payrollId}}, {parentPayrollId: {_eq: $payrollId}}]}\n    orderBy: {updatedAt: DESC}\n    limit: $limit\n  ) {\n    ...PayrollVersionInfo\n    status\n    supersededDate\n  }\n}\n\nquery GetPayrollsPaginated($limit: Int = 20, $offset: Int = 0, $where: payrollsBoolExp = {}, $orderBy: [payrollsOrderBy!] = [{createdAt: DESC}]) {\n  payrolls(\n    limit: $limit\n    offset: $offset\n    where: {_and: [{supersededDate: {_isNull: true}}, $where]}\n    orderBy: $orderBy\n  ) {\n    ...PayrollTableRow\n  }\n  payrollsAggregate(where: {_and: [{supersededDate: {_isNull: true}}, $where]}) {\n    aggregate {\n      count\n    }\n  }\n}\n\nquery SearchPayrollsPaginated($searchTerm: String!, $limit: Int = 20, $offset: Int = 0) {\n  payrolls(\n    where: {_and: [{supersededDate: {_isNull: true}}, {_or: [{name: {_ilike: $searchTerm}}, {client: {name: {_ilike: $searchTerm}}}, {primaryConsultant: {name: {_ilike: $searchTerm}}}, {backupConsultant: {name: {_ilike: $searchTerm}}}]}]}\n    orderBy: {name: ASC}\n    limit: $limit\n    offset: $offset\n  ) {\n    ...PayrollTableRow\n  }\n  searchAggregate: payrollsAggregate(\n    where: {_and: [{supersededDate: {_isNull: true}}, {_or: [{name: {_ilike: $searchTerm}}, {client: {name: {_ilike: $searchTerm}}}, {primaryConsultant: {name: {_ilike: $searchTerm}}}, {backupConsultant: {name: {_ilike: $searchTerm}}}]}]}\n  ) {\n    aggregate {\n      count\n    }\n  }\n}\n\nquery GetPayrollsQuickList {\n  payrolls(where: {supersededDate: {_isNull: true}}, orderBy: {name: ASC}) {\n    ...PayrollMinimal\n  }\n}\n\nquery GetActivePayrollsQuickList {\n  payrolls(\n    where: {supersededDate: {_isNull: true}, status: {_eq: \"Active\"}}\n    orderBy: {name: ASC}\n  ) {\n    ...PayrollMinimal\n  }\n}\n\nquery GetClientPayrollsQuickList($clientId: uuid!) {\n  payrolls(\n    where: {clientId: {_eq: $clientId}, supersededDate: {_isNull: true}}\n    orderBy: {name: ASC}\n  ) {\n    ...PayrollMinimal\n  }\n}\n\nquery GeneratePayrollDates($payrollId: uuid!, $startDate: date!, $endDate: date!, $maxDates: Int = 100) {\n  generatePayrollDates(\n    args: {p_payroll_id: $payrollId, p_start_date: $startDate, p_end_date: $endDate, p_max_dates: $maxDates}\n  ) {\n    id\n    originalEftDate\n    adjustedEftDate\n    processingDate\n    notes\n    payrollId\n    createdAt\n    updatedAt\n  }\n}\n\nquery GeneratePayrollDatesQuery($payrollId: uuid!, $startDate: date!, $endDate: date!, $maxDates: Int = 100) {\n  generatePayrollDates(\n    args: {p_payroll_id: $payrollId, p_start_date: $startDate, p_end_date: $endDate, p_max_dates: $maxDates}\n  ) {\n    id\n    originalEftDate\n    adjustedEftDate\n    processingDate\n    notes\n    payrollId\n    createdAt\n    updatedAt\n  }\n}\n\nquery GetUserUpcomingPayrolls($userId: uuid!, $limit: Int = 10) {\n  payrolls(\n    where: {supersededDate: {_isNull: true}, status: {_eq: \"Active\"}, _or: [{primaryConsultantUserId: {_eq: $userId}}, {backupConsultantUserId: {_eq: $userId}}, {managerUserId: {_eq: $userId}}], payrollDates: {originalEftDate: {_gte: \"now()\"}}}\n    orderBy: {updatedAt: DESC}\n    limit: $limit\n  ) {\n    ...PayrollDashboardCard\n    nextPayDate: payrollDates(\n      where: {originalEftDate: {_gte: \"now()\"}}\n      orderBy: {originalEftDate: ASC}\n      limit: 1\n    ) {\n      originalEftDate\n      adjustedEftDate\n      processingDate\n    }\n  }\n}\n\nquery GetPayrollsByMonth($startDate: date!, $endDate: date!) {\n  payrolls(\n    where: {supersededDate: {_isNull: true}, payrollDates: {originalEftDate: {_gte: $startDate, _lt: $endDate}}}\n    orderBy: {createdAt: DESC}\n  ) {\n    ...PayrollWithDates\n    client {\n      id\n      name\n    }\n  }\n}\n\nquery GetPayrollFamilyDates($payrollId: uuid!) {\n  payrolls(\n    where: {_or: [{id: {_eq: $payrollId}}, {parentPayrollId: {_eq: $payrollId}}]}\n    orderBy: {versionNumber: DESC}\n  ) {\n    id\n    name\n    versionNumber\n    status\n    payrollDates(orderBy: {originalEftDate: ASC}) {\n      ...PayrollDate\n    }\n  }\n}\n\nquery GetPayrollsMissingDates {\n  payrolls(\n    where: {supersededDate: {_isNull: true}, status: {_eq: \"Active\"}, _not: {payrollDates: {}}}\n    orderBy: {name: ASC}\n  ) {\n    ...PayrollListItem\n    payrollCycle {\n      id\n      name\n      description\n    }\n    payrollDateType {\n      id\n      name\n      description\n    }\n  }\n}": types.GetPayrollsDocument,
    "subscription PayrollsUpdates {\n  payrolls(where: {supersededDate: {_isNull: true}}, orderBy: {updatedAt: DESC}) {\n    ...PayrollListItem\n  }\n}\n\nsubscription PayrollUpdates($id: uuid!) {\n  payrolls(where: {id: {_eq: $id}}) {\n    ...PayrollDetailed\n  }\n}\n\nsubscription ActivePayrollsUpdates {\n  payrolls(\n    where: {supersededDate: {_isNull: true}, status: {_eq: \"Active\"}}\n    orderBy: {name: ASC}\n  ) {\n    ...PayrollSummary\n    client {\n      id\n      name\n    }\n  }\n}\n\nsubscription PayrollStatsUpdates {\n  payrollsAggregate(where: {supersededDate: {_isNull: true}}) {\n    aggregate {\n      count\n    }\n  }\n}\n\nsubscription UnassignedPayrollsUpdates {\n  payrolls(\n    where: {supersededDate: {_isNull: true}, _or: [{primaryConsultantUserId: {_isNull: true}}, {backupConsultantUserId: {_isNull: true}}, {managerUserId: {_isNull: true}}]}\n  ) {\n    ...PayrollForAssignment\n  }\n}\n\nsubscription PayrollDatesUpdates($payrollId: uuid!) {\n  payrollDates(\n    where: {payrollId: {_eq: $payrollId}}\n    orderBy: {originalEftDate: ASC}\n  ) {\n    id\n    originalEftDate\n    adjustedEftDate\n    processingDate\n    notes\n    updatedAt\n  }\n}\n\nsubscription UpcomingPayrollDatesUpdates {\n  payrollDates(\n    where: {originalEftDate: {_gte: \"now()\"}}\n    orderBy: {originalEftDate: ASC}\n    limit: 20\n  ) {\n    id\n    originalEftDate\n    adjustedEftDate\n    processingDate\n    notes\n    payrollId\n  }\n}\n\nsubscription PayrollSystemHealthUpdates {\n  payrolls(\n    where: {supersededDate: {_isNull: true}, status: {_in: [\"Pending Review\", \"Issue\", \"Processing\"]}}\n    orderBy: {updatedAt: ASC}\n  ) {\n    ...PayrollListItem\n    primaryConsultant {\n      id\n      name\n    }\n    manager {\n      id\n      name\n    }\n  }\n}\n\nsubscription PayrollSubscription {\n  payrolls(where: {supersededDate: {_isNull: true}}, orderBy: {updatedAt: DESC}) {\n    ...PayrollListItem\n  }\n}": types.PayrollsUpdatesDocument,
    "fragment UserCore on users {\n  id\n  name\n  email\n  username\n  role\n  isActive\n  isStaff\n  clerkUserId\n  createdAt\n  updatedAt\n}\n\nfragment UserBasic on users {\n  id\n  name\n  email\n  role\n  isActive\n}\n\nfragment UserWithManager on users {\n  ...UserCore\n  managerId\n  managerUser {\n    ...UserBasic\n  }\n}\n\nfragment RoleCore on roles {\n  id\n  name\n  description\n  displayName\n  priority\n  isSystemRole\n  createdAt\n}\n\nfragment PermissionCore on permissions {\n  id\n  action\n  description\n  resourceId\n  createdAt\n  updatedAt\n}\n\nfragment PermissionWithResource on permissions {\n  ...PermissionCore\n  relatedResource {\n    id\n    name\n    description\n  }\n}\n\nfragment ClientCore on clients {\n  id\n  name\n  contactEmail\n  contactPerson\n  contactPhone\n  active\n  createdAt\n  updatedAt\n}\n\nfragment ClientBasic on clients {\n  id\n  name\n  active\n}\n\nfragment ResourceCore on resources {\n  id\n  name\n  displayName\n  description\n  createdAt\n  updatedAt\n}\n\nfragment UserRoleCore on userRoles {\n  id\n  userId\n  roleId\n  createdAt\n  updatedAt\n}\n\nfragment RolePermissionCore on rolePermissions {\n  id\n  roleId\n  permissionId\n  conditions\n  createdAt\n  updatedAt\n}\n\nfragment AuditFields on auditLogs {\n  id\n  eventTime\n  action\n  resourceType\n  resourceId\n  userId\n  ipAddress\n  userAgent\n  success\n  userEmail\n  userRole\n}": types.UserCoreFragmentDoc,
};

/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 *
 *
 * @example
 * ```ts
 * const query = graphql(`query GetUser($id: ID!) { user(id: $id) { name } }`);
 * ```
 *
 * The query argument is unknown!
 * Please regenerate the types.
 */
export function graphql(source: string): unknown;

/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "fragment PayrollCore on payrolls {\n  id\n  name\n  status\n  clientId\n  employeeCount\n  goLiveDate\n  payrollSystem\n  processingTime\n  processingDaysBeforeEft\n  createdAt\n  updatedAt\n  versionNumber\n  supersededDate\n}\n\nfragment PayrollBasic on payrolls {\n  ...PayrollCore\n  primaryConsultantUserId\n  backupConsultantUserId\n  managerUserId\n  cycleId\n  dateTypeId\n  dateValue\n}\n\nfragment PayrollDetailed on payrolls {\n  ...PayrollBasic\n  parentPayrollId\n  versionReason\n  createdByUserId\n}\n\nfragment PayrollWithClient on payrolls {\n  ...PayrollBasic\n  client {\n    id\n    name\n    contactPerson\n    contactEmail\n    active\n  }\n}\n\nfragment PayrollWithUsers on payrolls {\n  ...PayrollBasic\n  primaryConsultant {\n    id\n    name\n    email\n    role\n    isActive\n  }\n  backupConsultant {\n    id\n    name\n    email\n    role\n    isActive\n  }\n  manager {\n    id\n    name\n    email\n    role\n    isActive\n  }\n}\n\nfragment PayrollWithCycle on payrolls {\n  ...PayrollBasic\n  payrollCycle {\n    id\n    name\n    description\n  }\n  payrollDateType {\n    id\n    name\n    description\n  }\n}\n\nfragment PayrollWithAllRelations on payrolls {\n  ...PayrollDetailed\n  client {\n    id\n    name\n    contactPerson\n    contactEmail\n    active\n  }\n  primaryConsultant {\n    id\n    name\n    email\n    role\n    isActive\n  }\n  backupConsultant {\n    id\n    name\n    email\n    role\n    isActive\n  }\n  manager {\n    id\n    name\n    email\n    role\n    isActive\n  }\n  payrollCycle {\n    id\n    name\n    description\n  }\n  payrollDateType {\n    id\n    name\n    description\n  }\n  createdByUserId\n  parentPayroll {\n    id\n    name\n    versionNumber\n    status\n  }\n}\n\nfragment PayrollSummary on payrolls {\n  id\n  name\n  status\n  clientId\n  employeeCount\n  supersededDate\n}\n\nfragment PayrollListItem on payrolls {\n  ...PayrollSummary\n  goLiveDate\n  primaryConsultantUserId\n  backupConsultantUserId\n  managerUserId\n  createdAt\n  updatedAt\n  client {\n    id\n    name\n  }\n}\n\nfragment PayrollTableRow on payrolls {\n  ...PayrollListItem\n  payrollSystem\n  processingTime\n  versionNumber\n  primaryConsultant {\n    id\n    name\n  }\n  backupConsultant {\n    id\n    name\n  }\n  manager {\n    id\n    name\n  }\n}\n\nfragment PayrollDashboardCard on payrolls {\n  ...PayrollSummary\n  goLiveDate\n  primaryConsultant {\n    id\n    name\n  }\n  client {\n    id\n    name\n  }\n  payrollCycle {\n    id\n    name\n    description\n  }\n}\n\nfragment PayrollMinimal on payrolls {\n  id\n  name\n  status\n  clientId\n}\n\nfragment PayrollForAssignment on payrolls {\n  id\n  name\n  status\n  employeeCount\n  goLiveDate\n  client {\n    id\n    name\n  }\n  primaryConsultantUserId\n  backupConsultantUserId\n  managerUserId\n}\n\nfragment PayrollForAudit on payrolls {\n  id\n  name\n  status\n  clientId\n  employeeCount\n  goLiveDate\n  versionNumber\n  createdAt\n  updatedAt\n}\n\nfragment PayrollVersionInfo on payrolls {\n  id\n  name\n  versionNumber\n  versionReason\n  parentPayrollId\n  supersededDate\n  createdAt\n  createdByUserId\n}\n\nfragment PayrollWithDates on payrolls {\n  ...PayrollCore\n  payrollDates(orderBy: {originalEftDate: ASC}) {\n    id\n    originalEftDate\n    adjustedEftDate\n    processingDate\n    notes\n    createdAt\n    updatedAt\n  }\n}\n\nfragment PayrollProcessingInfo on payrolls {\n  id\n  name\n  status\n  payrollSystem\n  processingTime\n  processingDaysBeforeEft\n  goLiveDate\n  employeeCount\n  client {\n    id\n    name\n  }\n  payrollCycle {\n    id\n    name\n    description\n  }\n}\n\nfragment PayrollWorkload on payrolls {\n  id\n  name\n  status\n  employeeCount\n  client {\n    id\n    name\n  }\n  payrollCycle {\n    id\n    name\n    description\n  }\n}\n\nfragment PayrollDate on payrollDates {\n  id\n  originalEftDate\n  adjustedEftDate\n  processingDate\n  notes\n  payrollId\n  createdAt\n  updatedAt\n}"): (typeof documents)["fragment PayrollCore on payrolls {\n  id\n  name\n  status\n  clientId\n  employeeCount\n  goLiveDate\n  payrollSystem\n  processingTime\n  processingDaysBeforeEft\n  createdAt\n  updatedAt\n  versionNumber\n  supersededDate\n}\n\nfragment PayrollBasic on payrolls {\n  ...PayrollCore\n  primaryConsultantUserId\n  backupConsultantUserId\n  managerUserId\n  cycleId\n  dateTypeId\n  dateValue\n}\n\nfragment PayrollDetailed on payrolls {\n  ...PayrollBasic\n  parentPayrollId\n  versionReason\n  createdByUserId\n}\n\nfragment PayrollWithClient on payrolls {\n  ...PayrollBasic\n  client {\n    id\n    name\n    contactPerson\n    contactEmail\n    active\n  }\n}\n\nfragment PayrollWithUsers on payrolls {\n  ...PayrollBasic\n  primaryConsultant {\n    id\n    name\n    email\n    role\n    isActive\n  }\n  backupConsultant {\n    id\n    name\n    email\n    role\n    isActive\n  }\n  manager {\n    id\n    name\n    email\n    role\n    isActive\n  }\n}\n\nfragment PayrollWithCycle on payrolls {\n  ...PayrollBasic\n  payrollCycle {\n    id\n    name\n    description\n  }\n  payrollDateType {\n    id\n    name\n    description\n  }\n}\n\nfragment PayrollWithAllRelations on payrolls {\n  ...PayrollDetailed\n  client {\n    id\n    name\n    contactPerson\n    contactEmail\n    active\n  }\n  primaryConsultant {\n    id\n    name\n    email\n    role\n    isActive\n  }\n  backupConsultant {\n    id\n    name\n    email\n    role\n    isActive\n  }\n  manager {\n    id\n    name\n    email\n    role\n    isActive\n  }\n  payrollCycle {\n    id\n    name\n    description\n  }\n  payrollDateType {\n    id\n    name\n    description\n  }\n  createdByUserId\n  parentPayroll {\n    id\n    name\n    versionNumber\n    status\n  }\n}\n\nfragment PayrollSummary on payrolls {\n  id\n  name\n  status\n  clientId\n  employeeCount\n  supersededDate\n}\n\nfragment PayrollListItem on payrolls {\n  ...PayrollSummary\n  goLiveDate\n  primaryConsultantUserId\n  backupConsultantUserId\n  managerUserId\n  createdAt\n  updatedAt\n  client {\n    id\n    name\n  }\n}\n\nfragment PayrollTableRow on payrolls {\n  ...PayrollListItem\n  payrollSystem\n  processingTime\n  versionNumber\n  primaryConsultant {\n    id\n    name\n  }\n  backupConsultant {\n    id\n    name\n  }\n  manager {\n    id\n    name\n  }\n}\n\nfragment PayrollDashboardCard on payrolls {\n  ...PayrollSummary\n  goLiveDate\n  primaryConsultant {\n    id\n    name\n  }\n  client {\n    id\n    name\n  }\n  payrollCycle {\n    id\n    name\n    description\n  }\n}\n\nfragment PayrollMinimal on payrolls {\n  id\n  name\n  status\n  clientId\n}\n\nfragment PayrollForAssignment on payrolls {\n  id\n  name\n  status\n  employeeCount\n  goLiveDate\n  client {\n    id\n    name\n  }\n  primaryConsultantUserId\n  backupConsultantUserId\n  managerUserId\n}\n\nfragment PayrollForAudit on payrolls {\n  id\n  name\n  status\n  clientId\n  employeeCount\n  goLiveDate\n  versionNumber\n  createdAt\n  updatedAt\n}\n\nfragment PayrollVersionInfo on payrolls {\n  id\n  name\n  versionNumber\n  versionReason\n  parentPayrollId\n  supersededDate\n  createdAt\n  createdByUserId\n}\n\nfragment PayrollWithDates on payrolls {\n  ...PayrollCore\n  payrollDates(orderBy: {originalEftDate: ASC}) {\n    id\n    originalEftDate\n    adjustedEftDate\n    processingDate\n    notes\n    createdAt\n    updatedAt\n  }\n}\n\nfragment PayrollProcessingInfo on payrolls {\n  id\n  name\n  status\n  payrollSystem\n  processingTime\n  processingDaysBeforeEft\n  goLiveDate\n  employeeCount\n  client {\n    id\n    name\n  }\n  payrollCycle {\n    id\n    name\n    description\n  }\n}\n\nfragment PayrollWorkload on payrolls {\n  id\n  name\n  status\n  employeeCount\n  client {\n    id\n    name\n  }\n  payrollCycle {\n    id\n    name\n    description\n  }\n}\n\nfragment PayrollDate on payrollDates {\n  id\n  originalEftDate\n  adjustedEftDate\n  processingDate\n  notes\n  payrollId\n  createdAt\n  updatedAt\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "mutation CreatePayroll($object: payrollsInsertInput!) {\n  insertPayroll(object: $object) {\n    ...PayrollDetailed\n    client {\n      id\n      name\n    }\n    primaryConsultant {\n      id\n      name\n    }\n    manager {\n      id\n      name\n    }\n  }\n}\n\nmutation UpdatePayroll($id: uuid!, $set: payrollsSetInput!) {\n  updatePayrollById(pkColumns: {id: $id}, _set: $set) {\n    ...PayrollDetailed\n    client {\n      id\n      name\n    }\n    primaryConsultant {\n      id\n      name\n    }\n    backupConsultant {\n      id\n      name\n    }\n    manager {\n      id\n      name\n    }\n  }\n}\n\nmutation DeletePayroll($id: uuid!) {\n  updatePayrollById(pkColumns: {id: $id}, _set: {supersededDate: \"now()\"}) {\n    ...PayrollBasic\n  }\n}\n\nmutation ReactivatePayroll($id: uuid!) {\n  updatePayrollById(pkColumns: {id: $id}, _set: {supersededDate: null}) {\n    ...PayrollBasic\n  }\n}\n\nmutation UpdatePayrollStatus($id: uuid!, $status: payroll_status!) {\n  updatePayrollById(\n    pkColumns: {id: $id}\n    _set: {status: $status, updatedAt: \"now()\"}\n  ) {\n    ...PayrollBasic\n    client {\n      id\n      name\n    }\n  }\n}\n\nmutation ActivatePayroll($id: uuid!) {\n  updatePayrollById(\n    pkColumns: {id: $id}\n    _set: {status: \"Active\", updatedAt: \"now()\"}\n  ) {\n    ...PayrollBasic\n  }\n}\n\nmutation DeactivatePayroll($id: uuid!) {\n  updatePayrollById(\n    pkColumns: {id: $id}\n    _set: {status: \"Inactive\", updatedAt: \"now()\"}\n  ) {\n    ...PayrollBasic\n  }\n}\n\nmutation AssignPrimaryConsultant($id: uuid!, $userId: uuid!) {\n  updatePayrollById(\n    pkColumns: {id: $id}\n    _set: {primaryConsultantUserId: $userId, updatedAt: \"now()\"}\n  ) {\n    ...PayrollBasic\n    primaryConsultant {\n      id\n      name\n      email\n    }\n  }\n}\n\nmutation AssignBackupConsultant($id: uuid!, $userId: uuid!) {\n  updatePayrollById(\n    pkColumns: {id: $id}\n    _set: {backupConsultantUserId: $userId, updatedAt: \"now()\"}\n  ) {\n    ...PayrollBasic\n    backupConsultant {\n      id\n      name\n      email\n    }\n  }\n}\n\nmutation AssignManager($id: uuid!, $userId: uuid!) {\n  updatePayrollById(\n    pkColumns: {id: $id}\n    _set: {managerUserId: $userId, updatedAt: \"now()\"}\n  ) {\n    ...PayrollBasic\n    manager {\n      id\n      name\n      email\n    }\n  }\n}\n\nmutation UpdatePayrollAssignments($id: uuid!, $primaryConsultantUserId: uuid, $backupConsultantUserId: uuid, $managerUserId: uuid) {\n  updatePayrollById(\n    pkColumns: {id: $id}\n    _set: {primaryConsultantUserId: $primaryConsultantUserId, backupConsultantUserId: $backupConsultantUserId, managerUserId: $managerUserId, updatedAt: \"now()\"}\n  ) {\n    ...PayrollBasic\n    primaryConsultant {\n      id\n      name\n      email\n    }\n    backupConsultant {\n      id\n      name\n      email\n    }\n    manager {\n      id\n      name\n      email\n    }\n  }\n}\n\nmutation CreatePayrollVersion($parentPayrollId: uuid!, $versionReason: String!, $object: payrollsInsertInput!) {\n  updatePayrollById(\n    pkColumns: {id: $parentPayrollId}\n    _set: {supersededDate: \"now()\"}\n  ) {\n    id\n    supersededDate\n  }\n  insertPayroll(object: $object) {\n    ...PayrollWithAllRelations\n  }\n}\n\nmutation SupersedePayroll($id: uuid!) {\n  updatePayrollById(pkColumns: {id: $id}, _set: {supersededDate: \"now()\"}) {\n    ...PayrollBasic\n  }\n}\n\nmutation BulkUpdatePayrolls($where: payrollsBoolExp!, $set: payrollsSetInput!) {\n  bulkUpdatePayrolls(where: $where, _set: $set) {\n    returning {\n      ...PayrollBasic\n    }\n    affectedRows\n  }\n}\n\nmutation BulkAssignConsultant($payrollIds: [uuid!]!, $primaryConsultantUserId: uuid!) {\n  bulkUpdatePayrolls(\n    where: {id: {_in: $payrollIds}}\n    _set: {primaryConsultantUserId: $primaryConsultantUserId, updatedAt: \"now()\"}\n  ) {\n    returning {\n      ...PayrollBasic\n      primaryConsultant {\n        id\n        name\n      }\n    }\n    affectedRows\n  }\n}\n\nmutation BulkAssignManager($payrollIds: [uuid!]!, $managerUserId: uuid!) {\n  bulkUpdatePayrolls(\n    where: {id: {_in: $payrollIds}}\n    _set: {managerUserId: $managerUserId, updatedAt: \"now()\"}\n  ) {\n    returning {\n      ...PayrollBasic\n      manager {\n        id\n        name\n      }\n    }\n    affectedRows\n  }\n}\n\nmutation BulkUpdatePayrollStatus($payrollIds: [uuid!]!, $status: payroll_status!) {\n  bulkUpdatePayrolls(\n    where: {id: {_in: $payrollIds}}\n    _set: {status: $status, updatedAt: \"now()\"}\n  ) {\n    returning {\n      ...PayrollBasic\n    }\n    affectedRows\n  }\n}\n\nmutation UpdatePayrollConfiguration($id: uuid!, $payrollSystem: String, $processingTime: Int, $processingDaysBeforeEft: Int, $cycleId: uuid, $dateTypeId: uuid) {\n  updatePayrollById(\n    pkColumns: {id: $id}\n    _set: {payrollSystem: $payrollSystem, processingTime: $processingTime, processingDaysBeforeEft: $processingDaysBeforeEft, cycleId: $cycleId, dateTypeId: $dateTypeId, updatedAt: \"now()\"}\n  ) {\n    ...PayrollWithCycle\n  }\n}\n\nmutation UpdatePayrollDetails($id: uuid!, $name: String, $employeeCount: Int, $goLiveDate: date) {\n  updatePayrollById(\n    pkColumns: {id: $id}\n    _set: {name: $name, employeeCount: $employeeCount, goLiveDate: $goLiveDate, updatedAt: \"now()\"}\n  ) {\n    ...PayrollBasic\n  }\n}\n\nmutation CreatePayrollDate($object: payrollDatesInsertInput!) {\n  insertPayrollDate(object: $object) {\n    id\n    originalEftDate\n    adjustedEftDate\n    processingDate\n    notes\n    payrollId\n    createdAt\n    updatedAt\n  }\n}\n\nmutation UpdatePayrollDate($id: uuid!, $set: payrollDatesSetInput!) {\n  updatePayrollDateById(pkColumns: {id: $id}, _set: $set) {\n    id\n    originalEftDate\n    adjustedEftDate\n    processingDate\n    notes\n    payrollId\n    updatedAt\n  }\n}\n\nmutation DeletePayrollDate($id: uuid!) {\n  deletePayrollDateById(id: $id) {\n    id\n    originalEftDate\n    adjustedEftDate\n    payrollId\n  }\n}\n\nmutation UpdatePayrollDateNotes($id: uuid!, $notes: String) {\n  updatePayrollDateById(\n    pkColumns: {id: $id}\n    _set: {notes: $notes, updatedAt: \"now()\"}\n  ) {\n    id\n    originalEftDate\n    adjustedEftDate\n    notes\n    payrollId\n  }\n}\n\nmutation BulkCreatePayrollDates($objects: [payrollDatesInsertInput!]!) {\n  bulkInsertPayrollDates(objects: $objects) {\n    returning {\n      id\n      originalEftDate\n      adjustedEftDate\n      processingDate\n      payrollId\n    }\n    affectedRows\n  }\n}\n\nmutation BulkDeletePayrollDates($payrollId: uuid!) {\n  bulkDeletePayrollDates(where: {payrollId: {_eq: $payrollId}}) {\n    affectedRows\n  }\n}\n\nmutation CreatePayrollCycle($object: payrollCyclesInsertInput!) {\n  insertPayrollCycle(object: $object) {\n    id\n    name\n    description\n    createdAt\n  }\n}\n\nmutation UpdatePayrollCycle($id: uuid!, $set: payrollCyclesSetInput!) {\n  updatePayrollCycleById(pkColumns: {id: $id}, _set: $set) {\n    id\n    name\n    description\n    updatedAt\n  }\n}\n\nmutation DeletePayrollCycle($id: uuid!) {\n  deletePayrollCycleById(id: $id) {\n    id\n    name\n  }\n}\n\nmutation CreatePayrollDateType($object: payrollDateTypesInsertInput!) {\n  insertPayrollDateType(object: $object) {\n    id\n    name\n    description\n    createdAt\n  }\n}\n\nmutation UpdatePayrollDateType($id: uuid!, $set: payrollDateTypesSetInput!) {\n  updatePayrollDateTypeById(pkColumns: {id: $id}, _set: $set) {\n    id\n    name\n    description\n    updatedAt\n  }\n}\n\nmutation DeletePayrollDateType($id: uuid!) {\n  deletePayrollDateTypeById(id: $id) {\n    id\n    name\n  }\n}\n\nmutation CommitPayrollAssignments($changes: [PayrollAssignmentInput!]!) {\n  commitPayrollAssignments(changes: $changes) {\n    success\n    message\n    errors\n    affectedAssignments {\n      id\n      payrollDateId\n      originalConsultantId\n      newConsultantId\n      adjustedEftDate\n    }\n  }\n}"): (typeof documents)["mutation CreatePayroll($object: payrollsInsertInput!) {\n  insertPayroll(object: $object) {\n    ...PayrollDetailed\n    client {\n      id\n      name\n    }\n    primaryConsultant {\n      id\n      name\n    }\n    manager {\n      id\n      name\n    }\n  }\n}\n\nmutation UpdatePayroll($id: uuid!, $set: payrollsSetInput!) {\n  updatePayrollById(pkColumns: {id: $id}, _set: $set) {\n    ...PayrollDetailed\n    client {\n      id\n      name\n    }\n    primaryConsultant {\n      id\n      name\n    }\n    backupConsultant {\n      id\n      name\n    }\n    manager {\n      id\n      name\n    }\n  }\n}\n\nmutation DeletePayroll($id: uuid!) {\n  updatePayrollById(pkColumns: {id: $id}, _set: {supersededDate: \"now()\"}) {\n    ...PayrollBasic\n  }\n}\n\nmutation ReactivatePayroll($id: uuid!) {\n  updatePayrollById(pkColumns: {id: $id}, _set: {supersededDate: null}) {\n    ...PayrollBasic\n  }\n}\n\nmutation UpdatePayrollStatus($id: uuid!, $status: payroll_status!) {\n  updatePayrollById(\n    pkColumns: {id: $id}\n    _set: {status: $status, updatedAt: \"now()\"}\n  ) {\n    ...PayrollBasic\n    client {\n      id\n      name\n    }\n  }\n}\n\nmutation ActivatePayroll($id: uuid!) {\n  updatePayrollById(\n    pkColumns: {id: $id}\n    _set: {status: \"Active\", updatedAt: \"now()\"}\n  ) {\n    ...PayrollBasic\n  }\n}\n\nmutation DeactivatePayroll($id: uuid!) {\n  updatePayrollById(\n    pkColumns: {id: $id}\n    _set: {status: \"Inactive\", updatedAt: \"now()\"}\n  ) {\n    ...PayrollBasic\n  }\n}\n\nmutation AssignPrimaryConsultant($id: uuid!, $userId: uuid!) {\n  updatePayrollById(\n    pkColumns: {id: $id}\n    _set: {primaryConsultantUserId: $userId, updatedAt: \"now()\"}\n  ) {\n    ...PayrollBasic\n    primaryConsultant {\n      id\n      name\n      email\n    }\n  }\n}\n\nmutation AssignBackupConsultant($id: uuid!, $userId: uuid!) {\n  updatePayrollById(\n    pkColumns: {id: $id}\n    _set: {backupConsultantUserId: $userId, updatedAt: \"now()\"}\n  ) {\n    ...PayrollBasic\n    backupConsultant {\n      id\n      name\n      email\n    }\n  }\n}\n\nmutation AssignManager($id: uuid!, $userId: uuid!) {\n  updatePayrollById(\n    pkColumns: {id: $id}\n    _set: {managerUserId: $userId, updatedAt: \"now()\"}\n  ) {\n    ...PayrollBasic\n    manager {\n      id\n      name\n      email\n    }\n  }\n}\n\nmutation UpdatePayrollAssignments($id: uuid!, $primaryConsultantUserId: uuid, $backupConsultantUserId: uuid, $managerUserId: uuid) {\n  updatePayrollById(\n    pkColumns: {id: $id}\n    _set: {primaryConsultantUserId: $primaryConsultantUserId, backupConsultantUserId: $backupConsultantUserId, managerUserId: $managerUserId, updatedAt: \"now()\"}\n  ) {\n    ...PayrollBasic\n    primaryConsultant {\n      id\n      name\n      email\n    }\n    backupConsultant {\n      id\n      name\n      email\n    }\n    manager {\n      id\n      name\n      email\n    }\n  }\n}\n\nmutation CreatePayrollVersion($parentPayrollId: uuid!, $versionReason: String!, $object: payrollsInsertInput!) {\n  updatePayrollById(\n    pkColumns: {id: $parentPayrollId}\n    _set: {supersededDate: \"now()\"}\n  ) {\n    id\n    supersededDate\n  }\n  insertPayroll(object: $object) {\n    ...PayrollWithAllRelations\n  }\n}\n\nmutation SupersedePayroll($id: uuid!) {\n  updatePayrollById(pkColumns: {id: $id}, _set: {supersededDate: \"now()\"}) {\n    ...PayrollBasic\n  }\n}\n\nmutation BulkUpdatePayrolls($where: payrollsBoolExp!, $set: payrollsSetInput!) {\n  bulkUpdatePayrolls(where: $where, _set: $set) {\n    returning {\n      ...PayrollBasic\n    }\n    affectedRows\n  }\n}\n\nmutation BulkAssignConsultant($payrollIds: [uuid!]!, $primaryConsultantUserId: uuid!) {\n  bulkUpdatePayrolls(\n    where: {id: {_in: $payrollIds}}\n    _set: {primaryConsultantUserId: $primaryConsultantUserId, updatedAt: \"now()\"}\n  ) {\n    returning {\n      ...PayrollBasic\n      primaryConsultant {\n        id\n        name\n      }\n    }\n    affectedRows\n  }\n}\n\nmutation BulkAssignManager($payrollIds: [uuid!]!, $managerUserId: uuid!) {\n  bulkUpdatePayrolls(\n    where: {id: {_in: $payrollIds}}\n    _set: {managerUserId: $managerUserId, updatedAt: \"now()\"}\n  ) {\n    returning {\n      ...PayrollBasic\n      manager {\n        id\n        name\n      }\n    }\n    affectedRows\n  }\n}\n\nmutation BulkUpdatePayrollStatus($payrollIds: [uuid!]!, $status: payroll_status!) {\n  bulkUpdatePayrolls(\n    where: {id: {_in: $payrollIds}}\n    _set: {status: $status, updatedAt: \"now()\"}\n  ) {\n    returning {\n      ...PayrollBasic\n    }\n    affectedRows\n  }\n}\n\nmutation UpdatePayrollConfiguration($id: uuid!, $payrollSystem: String, $processingTime: Int, $processingDaysBeforeEft: Int, $cycleId: uuid, $dateTypeId: uuid) {\n  updatePayrollById(\n    pkColumns: {id: $id}\n    _set: {payrollSystem: $payrollSystem, processingTime: $processingTime, processingDaysBeforeEft: $processingDaysBeforeEft, cycleId: $cycleId, dateTypeId: $dateTypeId, updatedAt: \"now()\"}\n  ) {\n    ...PayrollWithCycle\n  }\n}\n\nmutation UpdatePayrollDetails($id: uuid!, $name: String, $employeeCount: Int, $goLiveDate: date) {\n  updatePayrollById(\n    pkColumns: {id: $id}\n    _set: {name: $name, employeeCount: $employeeCount, goLiveDate: $goLiveDate, updatedAt: \"now()\"}\n  ) {\n    ...PayrollBasic\n  }\n}\n\nmutation CreatePayrollDate($object: payrollDatesInsertInput!) {\n  insertPayrollDate(object: $object) {\n    id\n    originalEftDate\n    adjustedEftDate\n    processingDate\n    notes\n    payrollId\n    createdAt\n    updatedAt\n  }\n}\n\nmutation UpdatePayrollDate($id: uuid!, $set: payrollDatesSetInput!) {\n  updatePayrollDateById(pkColumns: {id: $id}, _set: $set) {\n    id\n    originalEftDate\n    adjustedEftDate\n    processingDate\n    notes\n    payrollId\n    updatedAt\n  }\n}\n\nmutation DeletePayrollDate($id: uuid!) {\n  deletePayrollDateById(id: $id) {\n    id\n    originalEftDate\n    adjustedEftDate\n    payrollId\n  }\n}\n\nmutation UpdatePayrollDateNotes($id: uuid!, $notes: String) {\n  updatePayrollDateById(\n    pkColumns: {id: $id}\n    _set: {notes: $notes, updatedAt: \"now()\"}\n  ) {\n    id\n    originalEftDate\n    adjustedEftDate\n    notes\n    payrollId\n  }\n}\n\nmutation BulkCreatePayrollDates($objects: [payrollDatesInsertInput!]!) {\n  bulkInsertPayrollDates(objects: $objects) {\n    returning {\n      id\n      originalEftDate\n      adjustedEftDate\n      processingDate\n      payrollId\n    }\n    affectedRows\n  }\n}\n\nmutation BulkDeletePayrollDates($payrollId: uuid!) {\n  bulkDeletePayrollDates(where: {payrollId: {_eq: $payrollId}}) {\n    affectedRows\n  }\n}\n\nmutation CreatePayrollCycle($object: payrollCyclesInsertInput!) {\n  insertPayrollCycle(object: $object) {\n    id\n    name\n    description\n    createdAt\n  }\n}\n\nmutation UpdatePayrollCycle($id: uuid!, $set: payrollCyclesSetInput!) {\n  updatePayrollCycleById(pkColumns: {id: $id}, _set: $set) {\n    id\n    name\n    description\n    updatedAt\n  }\n}\n\nmutation DeletePayrollCycle($id: uuid!) {\n  deletePayrollCycleById(id: $id) {\n    id\n    name\n  }\n}\n\nmutation CreatePayrollDateType($object: payrollDateTypesInsertInput!) {\n  insertPayrollDateType(object: $object) {\n    id\n    name\n    description\n    createdAt\n  }\n}\n\nmutation UpdatePayrollDateType($id: uuid!, $set: payrollDateTypesSetInput!) {\n  updatePayrollDateTypeById(pkColumns: {id: $id}, _set: $set) {\n    id\n    name\n    description\n    updatedAt\n  }\n}\n\nmutation DeletePayrollDateType($id: uuid!) {\n  deletePayrollDateTypeById(id: $id) {\n    id\n    name\n  }\n}\n\nmutation CommitPayrollAssignments($changes: [PayrollAssignmentInput!]!) {\n  commitPayrollAssignments(changes: $changes) {\n    success\n    message\n    errors\n    affectedAssignments {\n      id\n      payrollDateId\n      originalConsultantId\n      newConsultantId\n      adjustedEftDate\n    }\n  }\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "query GetPayrolls($limit: Int = 50, $offset: Int = 0, $where: payrollsBoolExp) {\n  payrolls(\n    limit: $limit\n    offset: $offset\n    where: $where\n    orderBy: {createdAt: DESC}\n  ) {\n    ...PayrollListItem\n  }\n  payrollsAggregate(where: $where) {\n    aggregate {\n      count\n    }\n  }\n}\n\nquery GetPayrollById($id: uuid!) {\n  payrollById(id: $id) {\n    ...PayrollWithAllRelations\n  }\n}\n\nquery GetPayrollBasic($id: uuid!) {\n  payrollById(id: $id) {\n    ...PayrollBasic\n  }\n}\n\nquery GetPayrollForEdit($id: uuid!) {\n  payrollById(id: $id) {\n    ...PayrollDetailed\n    client {\n      id\n      name\n    }\n    payrollCycle {\n      id\n      name\n      description\n    }\n    payrollDateType {\n      id\n      name\n    }\n  }\n}\n\nquery GetPayrollsSimple {\n  payrolls(where: {supersededDate: {_isNull: true}}, orderBy: {name: ASC}) {\n    ...PayrollMinimal\n  }\n}\n\nquery GetActivePayrolls {\n  payrolls(\n    where: {supersededDate: {_isNull: true}, status: {_neq: \"Inactive\"}}\n    orderBy: {name: ASC}\n  ) {\n    ...PayrollSummary\n    client {\n      id\n      name\n    }\n  }\n}\n\nquery GetPayrollsByClient($clientId: uuid!) {\n  payrolls(\n    where: {clientId: {_eq: $clientId}, supersededDate: {_isNull: true}}\n    orderBy: {createdAt: DESC}\n  ) {\n    ...PayrollListItem\n  }\n}\n\nquery GetPayrollsByUser($userId: uuid!) {\n  primaryPayrolls: payrolls(\n    where: {primaryConsultantUserId: {_eq: $userId}, supersededDate: {_isNull: true}}\n    orderBy: {name: ASC}\n  ) {\n    ...PayrollWorkload\n  }\n  backupPayrolls: payrolls(\n    where: {backupConsultantUserId: {_eq: $userId}, supersededDate: {_isNull: true}}\n    orderBy: {name: ASC}\n  ) {\n    ...PayrollWorkload\n  }\n  managedPayrolls: payrolls(\n    where: {managerUserId: {_eq: $userId}, supersededDate: {_isNull: true}}\n    orderBy: {name: ASC}\n  ) {\n    ...PayrollWorkload\n  }\n}\n\nquery GetPayrollDashboardStats {\n  totalPayrolls: payrollsAggregate(where: {supersededDate: {_isNull: true}}) {\n    aggregate {\n      count\n    }\n  }\n  activePayrolls: payrollsAggregate(\n    where: {supersededDate: {_isNull: true}, status: {_eq: \"Active\"}}\n  ) {\n    aggregate {\n      count\n    }\n  }\n  processingPayrolls: payrollsAggregate(\n    where: {supersededDate: {_isNull: true}, status: {_eq: \"Processing\"}}\n  ) {\n    aggregate {\n      count\n    }\n  }\n  recentPayrolls: payrolls(\n    where: {supersededDate: {_isNull: true}}\n    orderBy: {updatedAt: DESC}\n    limit: 5\n  ) {\n    ...PayrollDashboardCard\n  }\n}\n\nquery GetUpcomingPayrolls($limit: Int = 10) {\n  payrolls(\n    where: {supersededDate: {_isNull: true}, status: {_eq: \"Active\"}, payrollDates: {originalEftDate: {_gte: \"now()\"}}}\n    orderBy: {updatedAt: DESC}\n    limit: $limit\n  ) {\n    ...PayrollDashboardCard\n    nextPayDate: payrollDates(\n      where: {originalEftDate: {_gte: \"now()\"}}\n      orderBy: {originalEftDate: ASC}\n      limit: 1\n    ) {\n      originalEftDate\n      adjustedEftDate\n      processingDate\n    }\n  }\n}\n\nquery SearchPayrolls($searchTerm: String!, $limit: Int = 50) {\n  payrolls(\n    where: {_and: [{supersededDate: {_isNull: true}}, {_or: [{name: {_ilike: $searchTerm}}, {client: {name: {_ilike: $searchTerm}}}, {primaryConsultant: {name: {_ilike: $searchTerm}}}]}]}\n    orderBy: {name: ASC}\n    limit: $limit\n  ) {\n    ...PayrollTableRow\n  }\n}\n\nquery GetPayrollsByStatus($status: payroll_status!) {\n  payrolls(\n    where: {supersededDate: {_isNull: true}, status: {_eq: $status}}\n    orderBy: {updatedAt: DESC}\n  ) {\n    ...PayrollListItem\n  }\n}\n\nquery GetPayrollsByProcessingTime($processingTime: Int!) {\n  payrolls(\n    where: {supersededDate: {_isNull: true}, processingTime: {_eq: $processingTime}}\n    orderBy: {name: ASC}\n  ) {\n    ...PayrollProcessingInfo\n  }\n}\n\nquery GetPayrollVersions($payrollId: uuid!) {\n  payrolls(\n    where: {_or: [{id: {_eq: $payrollId}}, {parentPayrollId: {_eq: $payrollId}}]}\n    orderBy: {versionNumber: DESC}\n  ) {\n    ...PayrollVersionInfo\n  }\n}\n\nquery GetPayrollHistory($payrollId: uuid!) {\n  payrolls(\n    where: {_or: [{id: {_eq: $payrollId}}, {parentPayrollId: {_eq: $payrollId}}]}\n    orderBy: {createdAt: DESC}\n  ) {\n    ...PayrollVersionInfo\n    status\n    supersededDate\n  }\n}\n\nquery GetLatestPayrollVersion($payrollId: uuid!) {\n  payrolls(\n    where: {_or: [{id: {_eq: $payrollId}}, {parentPayrollId: {_eq: $payrollId}}], supersededDate: {_isNull: true}}\n    limit: 1\n  ) {\n    ...PayrollWithAllRelations\n  }\n}\n\nquery GetPayrollCycles {\n  payrollCycles(orderBy: {name: ASC}) {\n    id\n    name\n    description\n    createdAt\n    updatedAt\n  }\n}\n\nquery GetPayrollDateTypes {\n  payrollDateTypes(orderBy: {name: ASC}) {\n    id\n    name\n    description\n    createdAt\n    updatedAt\n  }\n}\n\nquery GetPayrollDates($payrollId: uuid!) {\n  payrollDates(\n    where: {payrollId: {_eq: $payrollId}}\n    orderBy: {originalEftDate: ASC}\n  ) {\n    id\n    originalEftDate\n    adjustedEftDate\n    processingDate\n    notes\n    createdAt\n    updatedAt\n    payrollId\n  }\n}\n\nquery GetUpcomingPayrollDates($limit: Int = 20) {\n  payrollDates(\n    where: {originalEftDate: {_gte: \"now()\"}}\n    orderBy: {originalEftDate: ASC}\n    limit: $limit\n  ) {\n    id\n    originalEftDate\n    adjustedEftDate\n    processingDate\n    notes\n    payrollAssignment {\n      payrollDate {\n        relatedPayroll {\n          id\n          name\n          status\n          client {\n            id\n            name\n          }\n        }\n      }\n    }\n  }\n}\n\nquery GetPayrollDatesInRange($startDate: date!, $endDate: date!, $payrollId: uuid) {\n  payrollDates(\n    where: {originalEftDate: {_gte: $startDate, _lte: $endDate}, payrollId: {_eq: $payrollId}}\n    orderBy: {originalEftDate: ASC}\n  ) {\n    id\n    originalEftDate\n    adjustedEftDate\n    processingDate\n    notes\n    payrollAssignment {\n      payrollDate {\n        relatedPayroll {\n          id\n          name\n          client {\n            name\n          }\n        }\n      }\n    }\n  }\n}\n\nquery GetUnassignedPayrolls {\n  payrolls(\n    where: {supersededDate: {_isNull: true}, _or: [{primaryConsultantUserId: {_isNull: true}}, {backupConsultantUserId: {_isNull: true}}, {managerUserId: {_isNull: true}}]}\n    orderBy: {createdAt: DESC}\n  ) {\n    ...PayrollForAssignment\n  }\n}\n\nquery GetPayrollsNeedingAttention {\n  payrolls(\n    where: {supersededDate: {_isNull: true}, status: {_in: [\"Pending Review\", \"Issue\", \"Processing\"]}}\n    orderBy: {updatedAt: ASC}\n  ) {\n    ...PayrollListItem\n    primaryConsultant {\n      id\n      name\n    }\n    manager {\n      id\n      name\n    }\n  }\n}\n\nquery GetPayrollsForBulkUpdate($ids: [uuid!]!) {\n  payrolls(where: {id: {_in: $ids}}) {\n    ...PayrollBasic\n  }\n}\n\nquery GetPayrollsForBulkAssignment($where: payrollsBoolExp!) {\n  payrolls(where: $where) {\n    ...PayrollForAssignment\n  }\n}\n\nquery GetPayrollsForAudit($limit: Int = 100, $offset: Int = 0, $where: payrollsBoolExp = {}) {\n  payrolls(\n    limit: $limit\n    offset: $offset\n    where: $where\n    orderBy: {updatedAt: DESC}\n  ) {\n    ...PayrollForAudit\n  }\n}\n\nquery GetPayrollActivity($payrollId: uuid!, $limit: Int = 50) {\n  payrolls(\n    where: {_or: [{id: {_eq: $payrollId}}, {parentPayrollId: {_eq: $payrollId}}]}\n    orderBy: {updatedAt: DESC}\n    limit: $limit\n  ) {\n    ...PayrollVersionInfo\n    status\n    supersededDate\n  }\n}\n\nquery GetPayrollsPaginated($limit: Int = 20, $offset: Int = 0, $where: payrollsBoolExp = {}, $orderBy: [payrollsOrderBy!] = [{createdAt: DESC}]) {\n  payrolls(\n    limit: $limit\n    offset: $offset\n    where: {_and: [{supersededDate: {_isNull: true}}, $where]}\n    orderBy: $orderBy\n  ) {\n    ...PayrollTableRow\n  }\n  payrollsAggregate(where: {_and: [{supersededDate: {_isNull: true}}, $where]}) {\n    aggregate {\n      count\n    }\n  }\n}\n\nquery SearchPayrollsPaginated($searchTerm: String!, $limit: Int = 20, $offset: Int = 0) {\n  payrolls(\n    where: {_and: [{supersededDate: {_isNull: true}}, {_or: [{name: {_ilike: $searchTerm}}, {client: {name: {_ilike: $searchTerm}}}, {primaryConsultant: {name: {_ilike: $searchTerm}}}, {backupConsultant: {name: {_ilike: $searchTerm}}}]}]}\n    orderBy: {name: ASC}\n    limit: $limit\n    offset: $offset\n  ) {\n    ...PayrollTableRow\n  }\n  searchAggregate: payrollsAggregate(\n    where: {_and: [{supersededDate: {_isNull: true}}, {_or: [{name: {_ilike: $searchTerm}}, {client: {name: {_ilike: $searchTerm}}}, {primaryConsultant: {name: {_ilike: $searchTerm}}}, {backupConsultant: {name: {_ilike: $searchTerm}}}]}]}\n  ) {\n    aggregate {\n      count\n    }\n  }\n}\n\nquery GetPayrollsQuickList {\n  payrolls(where: {supersededDate: {_isNull: true}}, orderBy: {name: ASC}) {\n    ...PayrollMinimal\n  }\n}\n\nquery GetActivePayrollsQuickList {\n  payrolls(\n    where: {supersededDate: {_isNull: true}, status: {_eq: \"Active\"}}\n    orderBy: {name: ASC}\n  ) {\n    ...PayrollMinimal\n  }\n}\n\nquery GetClientPayrollsQuickList($clientId: uuid!) {\n  payrolls(\n    where: {clientId: {_eq: $clientId}, supersededDate: {_isNull: true}}\n    orderBy: {name: ASC}\n  ) {\n    ...PayrollMinimal\n  }\n}\n\nquery GeneratePayrollDates($payrollId: uuid!, $startDate: date!, $endDate: date!, $maxDates: Int = 100) {\n  generatePayrollDates(\n    args: {p_payroll_id: $payrollId, p_start_date: $startDate, p_end_date: $endDate, p_max_dates: $maxDates}\n  ) {\n    id\n    originalEftDate\n    adjustedEftDate\n    processingDate\n    notes\n    payrollId\n    createdAt\n    updatedAt\n  }\n}\n\nquery GeneratePayrollDatesQuery($payrollId: uuid!, $startDate: date!, $endDate: date!, $maxDates: Int = 100) {\n  generatePayrollDates(\n    args: {p_payroll_id: $payrollId, p_start_date: $startDate, p_end_date: $endDate, p_max_dates: $maxDates}\n  ) {\n    id\n    originalEftDate\n    adjustedEftDate\n    processingDate\n    notes\n    payrollId\n    createdAt\n    updatedAt\n  }\n}\n\nquery GetUserUpcomingPayrolls($userId: uuid!, $limit: Int = 10) {\n  payrolls(\n    where: {supersededDate: {_isNull: true}, status: {_eq: \"Active\"}, _or: [{primaryConsultantUserId: {_eq: $userId}}, {backupConsultantUserId: {_eq: $userId}}, {managerUserId: {_eq: $userId}}], payrollDates: {originalEftDate: {_gte: \"now()\"}}}\n    orderBy: {updatedAt: DESC}\n    limit: $limit\n  ) {\n    ...PayrollDashboardCard\n    nextPayDate: payrollDates(\n      where: {originalEftDate: {_gte: \"now()\"}}\n      orderBy: {originalEftDate: ASC}\n      limit: 1\n    ) {\n      originalEftDate\n      adjustedEftDate\n      processingDate\n    }\n  }\n}\n\nquery GetPayrollsByMonth($startDate: date!, $endDate: date!) {\n  payrolls(\n    where: {supersededDate: {_isNull: true}, payrollDates: {originalEftDate: {_gte: $startDate, _lt: $endDate}}}\n    orderBy: {createdAt: DESC}\n  ) {\n    ...PayrollWithDates\n    client {\n      id\n      name\n    }\n  }\n}\n\nquery GetPayrollFamilyDates($payrollId: uuid!) {\n  payrolls(\n    where: {_or: [{id: {_eq: $payrollId}}, {parentPayrollId: {_eq: $payrollId}}]}\n    orderBy: {versionNumber: DESC}\n  ) {\n    id\n    name\n    versionNumber\n    status\n    payrollDates(orderBy: {originalEftDate: ASC}) {\n      ...PayrollDate\n    }\n  }\n}\n\nquery GetPayrollsMissingDates {\n  payrolls(\n    where: {supersededDate: {_isNull: true}, status: {_eq: \"Active\"}, _not: {payrollDates: {}}}\n    orderBy: {name: ASC}\n  ) {\n    ...PayrollListItem\n    payrollCycle {\n      id\n      name\n      description\n    }\n    payrollDateType {\n      id\n      name\n      description\n    }\n  }\n}"): (typeof documents)["query GetPayrolls($limit: Int = 50, $offset: Int = 0, $where: payrollsBoolExp) {\n  payrolls(\n    limit: $limit\n    offset: $offset\n    where: $where\n    orderBy: {createdAt: DESC}\n  ) {\n    ...PayrollListItem\n  }\n  payrollsAggregate(where: $where) {\n    aggregate {\n      count\n    }\n  }\n}\n\nquery GetPayrollById($id: uuid!) {\n  payrollById(id: $id) {\n    ...PayrollWithAllRelations\n  }\n}\n\nquery GetPayrollBasic($id: uuid!) {\n  payrollById(id: $id) {\n    ...PayrollBasic\n  }\n}\n\nquery GetPayrollForEdit($id: uuid!) {\n  payrollById(id: $id) {\n    ...PayrollDetailed\n    client {\n      id\n      name\n    }\n    payrollCycle {\n      id\n      name\n      description\n    }\n    payrollDateType {\n      id\n      name\n    }\n  }\n}\n\nquery GetPayrollsSimple {\n  payrolls(where: {supersededDate: {_isNull: true}}, orderBy: {name: ASC}) {\n    ...PayrollMinimal\n  }\n}\n\nquery GetActivePayrolls {\n  payrolls(\n    where: {supersededDate: {_isNull: true}, status: {_neq: \"Inactive\"}}\n    orderBy: {name: ASC}\n  ) {\n    ...PayrollSummary\n    client {\n      id\n      name\n    }\n  }\n}\n\nquery GetPayrollsByClient($clientId: uuid!) {\n  payrolls(\n    where: {clientId: {_eq: $clientId}, supersededDate: {_isNull: true}}\n    orderBy: {createdAt: DESC}\n  ) {\n    ...PayrollListItem\n  }\n}\n\nquery GetPayrollsByUser($userId: uuid!) {\n  primaryPayrolls: payrolls(\n    where: {primaryConsultantUserId: {_eq: $userId}, supersededDate: {_isNull: true}}\n    orderBy: {name: ASC}\n  ) {\n    ...PayrollWorkload\n  }\n  backupPayrolls: payrolls(\n    where: {backupConsultantUserId: {_eq: $userId}, supersededDate: {_isNull: true}}\n    orderBy: {name: ASC}\n  ) {\n    ...PayrollWorkload\n  }\n  managedPayrolls: payrolls(\n    where: {managerUserId: {_eq: $userId}, supersededDate: {_isNull: true}}\n    orderBy: {name: ASC}\n  ) {\n    ...PayrollWorkload\n  }\n}\n\nquery GetPayrollDashboardStats {\n  totalPayrolls: payrollsAggregate(where: {supersededDate: {_isNull: true}}) {\n    aggregate {\n      count\n    }\n  }\n  activePayrolls: payrollsAggregate(\n    where: {supersededDate: {_isNull: true}, status: {_eq: \"Active\"}}\n  ) {\n    aggregate {\n      count\n    }\n  }\n  processingPayrolls: payrollsAggregate(\n    where: {supersededDate: {_isNull: true}, status: {_eq: \"Processing\"}}\n  ) {\n    aggregate {\n      count\n    }\n  }\n  recentPayrolls: payrolls(\n    where: {supersededDate: {_isNull: true}}\n    orderBy: {updatedAt: DESC}\n    limit: 5\n  ) {\n    ...PayrollDashboardCard\n  }\n}\n\nquery GetUpcomingPayrolls($limit: Int = 10) {\n  payrolls(\n    where: {supersededDate: {_isNull: true}, status: {_eq: \"Active\"}, payrollDates: {originalEftDate: {_gte: \"now()\"}}}\n    orderBy: {updatedAt: DESC}\n    limit: $limit\n  ) {\n    ...PayrollDashboardCard\n    nextPayDate: payrollDates(\n      where: {originalEftDate: {_gte: \"now()\"}}\n      orderBy: {originalEftDate: ASC}\n      limit: 1\n    ) {\n      originalEftDate\n      adjustedEftDate\n      processingDate\n    }\n  }\n}\n\nquery SearchPayrolls($searchTerm: String!, $limit: Int = 50) {\n  payrolls(\n    where: {_and: [{supersededDate: {_isNull: true}}, {_or: [{name: {_ilike: $searchTerm}}, {client: {name: {_ilike: $searchTerm}}}, {primaryConsultant: {name: {_ilike: $searchTerm}}}]}]}\n    orderBy: {name: ASC}\n    limit: $limit\n  ) {\n    ...PayrollTableRow\n  }\n}\n\nquery GetPayrollsByStatus($status: payroll_status!) {\n  payrolls(\n    where: {supersededDate: {_isNull: true}, status: {_eq: $status}}\n    orderBy: {updatedAt: DESC}\n  ) {\n    ...PayrollListItem\n  }\n}\n\nquery GetPayrollsByProcessingTime($processingTime: Int!) {\n  payrolls(\n    where: {supersededDate: {_isNull: true}, processingTime: {_eq: $processingTime}}\n    orderBy: {name: ASC}\n  ) {\n    ...PayrollProcessingInfo\n  }\n}\n\nquery GetPayrollVersions($payrollId: uuid!) {\n  payrolls(\n    where: {_or: [{id: {_eq: $payrollId}}, {parentPayrollId: {_eq: $payrollId}}]}\n    orderBy: {versionNumber: DESC}\n  ) {\n    ...PayrollVersionInfo\n  }\n}\n\nquery GetPayrollHistory($payrollId: uuid!) {\n  payrolls(\n    where: {_or: [{id: {_eq: $payrollId}}, {parentPayrollId: {_eq: $payrollId}}]}\n    orderBy: {createdAt: DESC}\n  ) {\n    ...PayrollVersionInfo\n    status\n    supersededDate\n  }\n}\n\nquery GetLatestPayrollVersion($payrollId: uuid!) {\n  payrolls(\n    where: {_or: [{id: {_eq: $payrollId}}, {parentPayrollId: {_eq: $payrollId}}], supersededDate: {_isNull: true}}\n    limit: 1\n  ) {\n    ...PayrollWithAllRelations\n  }\n}\n\nquery GetPayrollCycles {\n  payrollCycles(orderBy: {name: ASC}) {\n    id\n    name\n    description\n    createdAt\n    updatedAt\n  }\n}\n\nquery GetPayrollDateTypes {\n  payrollDateTypes(orderBy: {name: ASC}) {\n    id\n    name\n    description\n    createdAt\n    updatedAt\n  }\n}\n\nquery GetPayrollDates($payrollId: uuid!) {\n  payrollDates(\n    where: {payrollId: {_eq: $payrollId}}\n    orderBy: {originalEftDate: ASC}\n  ) {\n    id\n    originalEftDate\n    adjustedEftDate\n    processingDate\n    notes\n    createdAt\n    updatedAt\n    payrollId\n  }\n}\n\nquery GetUpcomingPayrollDates($limit: Int = 20) {\n  payrollDates(\n    where: {originalEftDate: {_gte: \"now()\"}}\n    orderBy: {originalEftDate: ASC}\n    limit: $limit\n  ) {\n    id\n    originalEftDate\n    adjustedEftDate\n    processingDate\n    notes\n    payrollAssignment {\n      payrollDate {\n        relatedPayroll {\n          id\n          name\n          status\n          client {\n            id\n            name\n          }\n        }\n      }\n    }\n  }\n}\n\nquery GetPayrollDatesInRange($startDate: date!, $endDate: date!, $payrollId: uuid) {\n  payrollDates(\n    where: {originalEftDate: {_gte: $startDate, _lte: $endDate}, payrollId: {_eq: $payrollId}}\n    orderBy: {originalEftDate: ASC}\n  ) {\n    id\n    originalEftDate\n    adjustedEftDate\n    processingDate\n    notes\n    payrollAssignment {\n      payrollDate {\n        relatedPayroll {\n          id\n          name\n          client {\n            name\n          }\n        }\n      }\n    }\n  }\n}\n\nquery GetUnassignedPayrolls {\n  payrolls(\n    where: {supersededDate: {_isNull: true}, _or: [{primaryConsultantUserId: {_isNull: true}}, {backupConsultantUserId: {_isNull: true}}, {managerUserId: {_isNull: true}}]}\n    orderBy: {createdAt: DESC}\n  ) {\n    ...PayrollForAssignment\n  }\n}\n\nquery GetPayrollsNeedingAttention {\n  payrolls(\n    where: {supersededDate: {_isNull: true}, status: {_in: [\"Pending Review\", \"Issue\", \"Processing\"]}}\n    orderBy: {updatedAt: ASC}\n  ) {\n    ...PayrollListItem\n    primaryConsultant {\n      id\n      name\n    }\n    manager {\n      id\n      name\n    }\n  }\n}\n\nquery GetPayrollsForBulkUpdate($ids: [uuid!]!) {\n  payrolls(where: {id: {_in: $ids}}) {\n    ...PayrollBasic\n  }\n}\n\nquery GetPayrollsForBulkAssignment($where: payrollsBoolExp!) {\n  payrolls(where: $where) {\n    ...PayrollForAssignment\n  }\n}\n\nquery GetPayrollsForAudit($limit: Int = 100, $offset: Int = 0, $where: payrollsBoolExp = {}) {\n  payrolls(\n    limit: $limit\n    offset: $offset\n    where: $where\n    orderBy: {updatedAt: DESC}\n  ) {\n    ...PayrollForAudit\n  }\n}\n\nquery GetPayrollActivity($payrollId: uuid!, $limit: Int = 50) {\n  payrolls(\n    where: {_or: [{id: {_eq: $payrollId}}, {parentPayrollId: {_eq: $payrollId}}]}\n    orderBy: {updatedAt: DESC}\n    limit: $limit\n  ) {\n    ...PayrollVersionInfo\n    status\n    supersededDate\n  }\n}\n\nquery GetPayrollsPaginated($limit: Int = 20, $offset: Int = 0, $where: payrollsBoolExp = {}, $orderBy: [payrollsOrderBy!] = [{createdAt: DESC}]) {\n  payrolls(\n    limit: $limit\n    offset: $offset\n    where: {_and: [{supersededDate: {_isNull: true}}, $where]}\n    orderBy: $orderBy\n  ) {\n    ...PayrollTableRow\n  }\n  payrollsAggregate(where: {_and: [{supersededDate: {_isNull: true}}, $where]}) {\n    aggregate {\n      count\n    }\n  }\n}\n\nquery SearchPayrollsPaginated($searchTerm: String!, $limit: Int = 20, $offset: Int = 0) {\n  payrolls(\n    where: {_and: [{supersededDate: {_isNull: true}}, {_or: [{name: {_ilike: $searchTerm}}, {client: {name: {_ilike: $searchTerm}}}, {primaryConsultant: {name: {_ilike: $searchTerm}}}, {backupConsultant: {name: {_ilike: $searchTerm}}}]}]}\n    orderBy: {name: ASC}\n    limit: $limit\n    offset: $offset\n  ) {\n    ...PayrollTableRow\n  }\n  searchAggregate: payrollsAggregate(\n    where: {_and: [{supersededDate: {_isNull: true}}, {_or: [{name: {_ilike: $searchTerm}}, {client: {name: {_ilike: $searchTerm}}}, {primaryConsultant: {name: {_ilike: $searchTerm}}}, {backupConsultant: {name: {_ilike: $searchTerm}}}]}]}\n  ) {\n    aggregate {\n      count\n    }\n  }\n}\n\nquery GetPayrollsQuickList {\n  payrolls(where: {supersededDate: {_isNull: true}}, orderBy: {name: ASC}) {\n    ...PayrollMinimal\n  }\n}\n\nquery GetActivePayrollsQuickList {\n  payrolls(\n    where: {supersededDate: {_isNull: true}, status: {_eq: \"Active\"}}\n    orderBy: {name: ASC}\n  ) {\n    ...PayrollMinimal\n  }\n}\n\nquery GetClientPayrollsQuickList($clientId: uuid!) {\n  payrolls(\n    where: {clientId: {_eq: $clientId}, supersededDate: {_isNull: true}}\n    orderBy: {name: ASC}\n  ) {\n    ...PayrollMinimal\n  }\n}\n\nquery GeneratePayrollDates($payrollId: uuid!, $startDate: date!, $endDate: date!, $maxDates: Int = 100) {\n  generatePayrollDates(\n    args: {p_payroll_id: $payrollId, p_start_date: $startDate, p_end_date: $endDate, p_max_dates: $maxDates}\n  ) {\n    id\n    originalEftDate\n    adjustedEftDate\n    processingDate\n    notes\n    payrollId\n    createdAt\n    updatedAt\n  }\n}\n\nquery GeneratePayrollDatesQuery($payrollId: uuid!, $startDate: date!, $endDate: date!, $maxDates: Int = 100) {\n  generatePayrollDates(\n    args: {p_payroll_id: $payrollId, p_start_date: $startDate, p_end_date: $endDate, p_max_dates: $maxDates}\n  ) {\n    id\n    originalEftDate\n    adjustedEftDate\n    processingDate\n    notes\n    payrollId\n    createdAt\n    updatedAt\n  }\n}\n\nquery GetUserUpcomingPayrolls($userId: uuid!, $limit: Int = 10) {\n  payrolls(\n    where: {supersededDate: {_isNull: true}, status: {_eq: \"Active\"}, _or: [{primaryConsultantUserId: {_eq: $userId}}, {backupConsultantUserId: {_eq: $userId}}, {managerUserId: {_eq: $userId}}], payrollDates: {originalEftDate: {_gte: \"now()\"}}}\n    orderBy: {updatedAt: DESC}\n    limit: $limit\n  ) {\n    ...PayrollDashboardCard\n    nextPayDate: payrollDates(\n      where: {originalEftDate: {_gte: \"now()\"}}\n      orderBy: {originalEftDate: ASC}\n      limit: 1\n    ) {\n      originalEftDate\n      adjustedEftDate\n      processingDate\n    }\n  }\n}\n\nquery GetPayrollsByMonth($startDate: date!, $endDate: date!) {\n  payrolls(\n    where: {supersededDate: {_isNull: true}, payrollDates: {originalEftDate: {_gte: $startDate, _lt: $endDate}}}\n    orderBy: {createdAt: DESC}\n  ) {\n    ...PayrollWithDates\n    client {\n      id\n      name\n    }\n  }\n}\n\nquery GetPayrollFamilyDates($payrollId: uuid!) {\n  payrolls(\n    where: {_or: [{id: {_eq: $payrollId}}, {parentPayrollId: {_eq: $payrollId}}]}\n    orderBy: {versionNumber: DESC}\n  ) {\n    id\n    name\n    versionNumber\n    status\n    payrollDates(orderBy: {originalEftDate: ASC}) {\n      ...PayrollDate\n    }\n  }\n}\n\nquery GetPayrollsMissingDates {\n  payrolls(\n    where: {supersededDate: {_isNull: true}, status: {_eq: \"Active\"}, _not: {payrollDates: {}}}\n    orderBy: {name: ASC}\n  ) {\n    ...PayrollListItem\n    payrollCycle {\n      id\n      name\n      description\n    }\n    payrollDateType {\n      id\n      name\n      description\n    }\n  }\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "subscription PayrollsUpdates {\n  payrolls(where: {supersededDate: {_isNull: true}}, orderBy: {updatedAt: DESC}) {\n    ...PayrollListItem\n  }\n}\n\nsubscription PayrollUpdates($id: uuid!) {\n  payrolls(where: {id: {_eq: $id}}) {\n    ...PayrollDetailed\n  }\n}\n\nsubscription ActivePayrollsUpdates {\n  payrolls(\n    where: {supersededDate: {_isNull: true}, status: {_eq: \"Active\"}}\n    orderBy: {name: ASC}\n  ) {\n    ...PayrollSummary\n    client {\n      id\n      name\n    }\n  }\n}\n\nsubscription PayrollStatsUpdates {\n  payrollsAggregate(where: {supersededDate: {_isNull: true}}) {\n    aggregate {\n      count\n    }\n  }\n}\n\nsubscription UnassignedPayrollsUpdates {\n  payrolls(\n    where: {supersededDate: {_isNull: true}, _or: [{primaryConsultantUserId: {_isNull: true}}, {backupConsultantUserId: {_isNull: true}}, {managerUserId: {_isNull: true}}]}\n  ) {\n    ...PayrollForAssignment\n  }\n}\n\nsubscription PayrollDatesUpdates($payrollId: uuid!) {\n  payrollDates(\n    where: {payrollId: {_eq: $payrollId}}\n    orderBy: {originalEftDate: ASC}\n  ) {\n    id\n    originalEftDate\n    adjustedEftDate\n    processingDate\n    notes\n    updatedAt\n  }\n}\n\nsubscription UpcomingPayrollDatesUpdates {\n  payrollDates(\n    where: {originalEftDate: {_gte: \"now()\"}}\n    orderBy: {originalEftDate: ASC}\n    limit: 20\n  ) {\n    id\n    originalEftDate\n    adjustedEftDate\n    processingDate\n    notes\n    payrollId\n  }\n}\n\nsubscription PayrollSystemHealthUpdates {\n  payrolls(\n    where: {supersededDate: {_isNull: true}, status: {_in: [\"Pending Review\", \"Issue\", \"Processing\"]}}\n    orderBy: {updatedAt: ASC}\n  ) {\n    ...PayrollListItem\n    primaryConsultant {\n      id\n      name\n    }\n    manager {\n      id\n      name\n    }\n  }\n}\n\nsubscription PayrollSubscription {\n  payrolls(where: {supersededDate: {_isNull: true}}, orderBy: {updatedAt: DESC}) {\n    ...PayrollListItem\n  }\n}"): (typeof documents)["subscription PayrollsUpdates {\n  payrolls(where: {supersededDate: {_isNull: true}}, orderBy: {updatedAt: DESC}) {\n    ...PayrollListItem\n  }\n}\n\nsubscription PayrollUpdates($id: uuid!) {\n  payrolls(where: {id: {_eq: $id}}) {\n    ...PayrollDetailed\n  }\n}\n\nsubscription ActivePayrollsUpdates {\n  payrolls(\n    where: {supersededDate: {_isNull: true}, status: {_eq: \"Active\"}}\n    orderBy: {name: ASC}\n  ) {\n    ...PayrollSummary\n    client {\n      id\n      name\n    }\n  }\n}\n\nsubscription PayrollStatsUpdates {\n  payrollsAggregate(where: {supersededDate: {_isNull: true}}) {\n    aggregate {\n      count\n    }\n  }\n}\n\nsubscription UnassignedPayrollsUpdates {\n  payrolls(\n    where: {supersededDate: {_isNull: true}, _or: [{primaryConsultantUserId: {_isNull: true}}, {backupConsultantUserId: {_isNull: true}}, {managerUserId: {_isNull: true}}]}\n  ) {\n    ...PayrollForAssignment\n  }\n}\n\nsubscription PayrollDatesUpdates($payrollId: uuid!) {\n  payrollDates(\n    where: {payrollId: {_eq: $payrollId}}\n    orderBy: {originalEftDate: ASC}\n  ) {\n    id\n    originalEftDate\n    adjustedEftDate\n    processingDate\n    notes\n    updatedAt\n  }\n}\n\nsubscription UpcomingPayrollDatesUpdates {\n  payrollDates(\n    where: {originalEftDate: {_gte: \"now()\"}}\n    orderBy: {originalEftDate: ASC}\n    limit: 20\n  ) {\n    id\n    originalEftDate\n    adjustedEftDate\n    processingDate\n    notes\n    payrollId\n  }\n}\n\nsubscription PayrollSystemHealthUpdates {\n  payrolls(\n    where: {supersededDate: {_isNull: true}, status: {_in: [\"Pending Review\", \"Issue\", \"Processing\"]}}\n    orderBy: {updatedAt: ASC}\n  ) {\n    ...PayrollListItem\n    primaryConsultant {\n      id\n      name\n    }\n    manager {\n      id\n      name\n    }\n  }\n}\n\nsubscription PayrollSubscription {\n  payrolls(where: {supersededDate: {_isNull: true}}, orderBy: {updatedAt: DESC}) {\n    ...PayrollListItem\n  }\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "fragment UserCore on users {\n  id\n  name\n  email\n  username\n  role\n  isActive\n  isStaff\n  clerkUserId\n  createdAt\n  updatedAt\n}\n\nfragment UserBasic on users {\n  id\n  name\n  email\n  role\n  isActive\n}\n\nfragment UserWithManager on users {\n  ...UserCore\n  managerId\n  managerUser {\n    ...UserBasic\n  }\n}\n\nfragment RoleCore on roles {\n  id\n  name\n  description\n  displayName\n  priority\n  isSystemRole\n  createdAt\n}\n\nfragment PermissionCore on permissions {\n  id\n  action\n  description\n  resourceId\n  createdAt\n  updatedAt\n}\n\nfragment PermissionWithResource on permissions {\n  ...PermissionCore\n  relatedResource {\n    id\n    name\n    description\n  }\n}\n\nfragment ClientCore on clients {\n  id\n  name\n  contactEmail\n  contactPerson\n  contactPhone\n  active\n  createdAt\n  updatedAt\n}\n\nfragment ClientBasic on clients {\n  id\n  name\n  active\n}\n\nfragment ResourceCore on resources {\n  id\n  name\n  displayName\n  description\n  createdAt\n  updatedAt\n}\n\nfragment UserRoleCore on userRoles {\n  id\n  userId\n  roleId\n  createdAt\n  updatedAt\n}\n\nfragment RolePermissionCore on rolePermissions {\n  id\n  roleId\n  permissionId\n  conditions\n  createdAt\n  updatedAt\n}\n\nfragment AuditFields on auditLogs {\n  id\n  eventTime\n  action\n  resourceType\n  resourceId\n  userId\n  ipAddress\n  userAgent\n  success\n  userEmail\n  userRole\n}"): (typeof documents)["fragment UserCore on users {\n  id\n  name\n  email\n  username\n  role\n  isActive\n  isStaff\n  clerkUserId\n  createdAt\n  updatedAt\n}\n\nfragment UserBasic on users {\n  id\n  name\n  email\n  role\n  isActive\n}\n\nfragment UserWithManager on users {\n  ...UserCore\n  managerId\n  managerUser {\n    ...UserBasic\n  }\n}\n\nfragment RoleCore on roles {\n  id\n  name\n  description\n  displayName\n  priority\n  isSystemRole\n  createdAt\n}\n\nfragment PermissionCore on permissions {\n  id\n  action\n  description\n  resourceId\n  createdAt\n  updatedAt\n}\n\nfragment PermissionWithResource on permissions {\n  ...PermissionCore\n  relatedResource {\n    id\n    name\n    description\n  }\n}\n\nfragment ClientCore on clients {\n  id\n  name\n  contactEmail\n  contactPerson\n  contactPhone\n  active\n  createdAt\n  updatedAt\n}\n\nfragment ClientBasic on clients {\n  id\n  name\n  active\n}\n\nfragment ResourceCore on resources {\n  id\n  name\n  displayName\n  description\n  createdAt\n  updatedAt\n}\n\nfragment UserRoleCore on userRoles {\n  id\n  userId\n  roleId\n  createdAt\n  updatedAt\n}\n\nfragment RolePermissionCore on rolePermissions {\n  id\n  roleId\n  permissionId\n  conditions\n  createdAt\n  updatedAt\n}\n\nfragment AuditFields on auditLogs {\n  id\n  eventTime\n  action\n  resourceType\n  resourceId\n  userId\n  ipAddress\n  userAgent\n  success\n  userEmail\n  userRole\n}"];

export function graphql(source: string) {
  return (documents as any)[source] ?? {};
}

export type DocumentType<TDocumentNode extends DocumentNode<any, any>> = TDocumentNode extends DocumentNode<  infer TType,  any>  ? TType  : never;