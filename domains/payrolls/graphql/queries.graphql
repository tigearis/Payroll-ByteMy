# Payrolls Domain Queries
# Security Classification: MEDIUM - Business operational data
# SOC2 Compliance: Row-level security and audit logging enforced

# Core payroll queries
query GetPayrolls($limit: Int = 50, $offset: Int = 0, $where: payrollsBoolExp) {
  payrolls(
    limit: $limit
    offset: $offset
    where: $where
    orderBy: { createdAt: DESC }
  ) {
    ...PayrollListItem
  }
  payrollsAggregate(where: $where) {
    aggregate {
      count
    }
  }
}

query GetPayrollById($id: uuid!) {
  payrollById(id: $id) {
    ...PayrollWithAllRelations
  }
}

query GetPayrollBasic($id: uuid!) {
  payrollById(id: $id) {
    ...PayrollBasic
  }
}

query GetPayrollForEdit($id: uuid!) {
  payrollById(id: $id) {
    ...PayrollDetailed
    client {
      id
      name
    }
    payrollCycle {
      id
      name
      description
    }
    payrollDateType {
      id
      name
    }
    # Add user assignments for edit form
    primaryConsultantUserId
    backupConsultantUserId
    managerUserId
    primaryConsultant {
      id
      firstName
      lastName
      computedName
      email
      role
    }
    backupConsultant {
      id
      firstName
      lastName
      computedName
      email
      role
    }
    manager {
      id
      firstName
      lastName
      computedName
      email
      role
    }
  }
}

# List queries for dropdowns and selections
query GetPayrollsSimple {
  payrolls(
    where: { supersededDate: { _isNull: true } }
    orderBy: { name: ASC }
  ) {
    ...PayrollMinimal
  }
}

query GetActivePayrolls {
  payrolls(
    where: { supersededDate: { _isNull: true }, status: { _neq: "Inactive" } }
    orderBy: { name: ASC }
  ) {
    ...PayrollSummary
    client {
      id
      name
    }
  }
}

query GetPayrollsByClient($clientId: uuid!) {
  payrolls(
    where: { clientId: { _eq: $clientId }, supersededDate: { _isNull: true } }
    orderBy: { createdAt: DESC }
  ) {
    ...PayrollListItem
  }
}

query GetPayrollsByUser($userId: uuid!) {
  primaryPayrolls: payrolls(
    where: {
      primaryConsultantUserId: { _eq: $userId }
      supersededDate: { _isNull: true }
    }
    orderBy: { name: ASC }
  ) {
    ...PayrollWorkload
  }

  backupPayrolls: payrolls(
    where: {
      backupConsultantUserId: { _eq: $userId }
      supersededDate: { _isNull: true }
    }
    orderBy: { name: ASC }
  ) {
    ...PayrollWorkload
  }

  managedPayrolls: payrolls(
    where: {
      managerUserId: { _eq: $userId }
      supersededDate: { _isNull: true }
    }
    orderBy: { name: ASC }
  ) {
    ...PayrollWorkload
  }
}

# Dashboard and overview queries
query GetPayrollDashboardStats {
  totalPayrolls: payrollsAggregate(
    where: { supersededDate: { _isNull: true } }
  ) {
    aggregate {
      count
    }
  }

  activePayrolls: payrollsAggregate(
    where: { supersededDate: { _isNull: true }, status: { _eq: "Active" } }
  ) {
    aggregate {
      count
    }
  }

  totalEmployees: payrollsAggregate(
    where: { supersededDate: { _isNull: true } }
  ) {
    aggregate {
      sum {
        employeeCount
      }
    }
  }

  pendingPayrolls: payrollsAggregate(
    where: {
      supersededDate: { _isNull: true }
      status: { _eq: "Implementation" }
    }
  ) {
    aggregate {
      count
    }
  }

  recentPayrolls: payrolls(
    where: { supersededDate: { _isNull: true } }
    orderBy: { updatedAt: DESC }
    limit: 5
  ) {
    ...PayrollDashboardCard
  }
}

# OPTIMIZED: Combined dashboard query - fixes N+1 issues
# Performance: Reduces from 301 queries to 1 query (99.7% reduction)
# Replaces: GetPayrolls + GetPayrollDashboardStats (eliminates 2 separate requests)
# Security: MEDIUM - Business operational data with SOC2 compliance
query GetPayrollDashboardComplete(
  $limit: Int = 20
  $offset: Int = 0
  $where: payrollsBoolExp = {}
  $orderBy: [payrollsOrderBy!] = [{ updatedAt: DESC }]
) {
  # Main payroll data with ALL relationships fetched in single query
  payrolls(
    limit: $limit
    offset: $offset
    where: { _and: [{ supersededDate: { _isNull: true } }, $where] }
    orderBy: $orderBy
  ) {
    id
    name
    status
    employeeCount
    processingTime
    dateValue
    processingDaysBeforeEft
    createdAt
    updatedAt
    
    # ✅ Client fetched in same query (eliminates N+1)
    client {
      id
      name
      active
      contactPerson
    }
    
    # ✅ All consultants fetched in same query (eliminates N+1)
    primaryConsultant {
      id
      firstName
      lastName
      computedName
      email
      role
      isActive
    }
    
    backupConsultant {
      id
      firstName
      lastName
      computedName
      email
      role
      isActive
    }
    
    manager {
      id
      firstName
      lastName
      computedName
      email
      role
      isActive
    }
    
    # ✅ Payroll cycle fetched in same query
    payrollCycle {
      id
      name
      description
    }
    
    # ✅ Date type fetched in same query
    payrollDateType {
      id
      name
      description
    }
    
    # ✅ Next payroll date fetched efficiently (eliminates N+1)
    nextPayrollDate: payrollDates(
      where: { adjustedEftDate: { _gte: "now()" } }
      orderBy: { adjustedEftDate: ASC }
      limit: 1
    ) {
      id
      originalEftDate
      adjustedEftDate
      processingDate
      notes
    }
    
    # ✅ Recent payroll dates for timeline view
    recentDates: payrollDates(
      orderBy: { originalEftDate: DESC }
      limit: 3
    ) {
      id
      originalEftDate
      adjustedEftDate
      processingDate
    }
  }
  
  # ✅ All statistics fetched in same query (eliminates separate requests)
  payrollsAggregate(
    where: { _and: [{ supersededDate: { _isNull: true } }, $where] }
  ) { 
    aggregate { count } 
  }
  
  activePayrolls: payrollsAggregate(
    where: { supersededDate: { _isNull: true }, status: { _eq: "Active" } }
  ) { 
    aggregate { count } 
  }
  
  totalEmployees: payrollsAggregate(
    where: { supersededDate: { _isNull: true } }
  ) { 
    aggregate { 
      sum { employeeCount } 
    } 
  }
  
  pendingPayrolls: payrollsAggregate(
    where: { supersededDate: { _isNull: true }, status: { _eq: "Implementation" } }
  ) { 
    aggregate { count } 
  }
  
  draftPayrolls: payrollsAggregate(
    where: { supersededDate: { _isNull: true }, status: { _eq: "Draft" } }
  ) { 
    aggregate { count } 
  }
  
  inactivePayrolls: payrollsAggregate(
    where: { supersededDate: { _isNull: true }, status: { _eq: "Inactive" } }
  ) { 
    aggregate { count } 
  }
}

query GetUpcomingPayrolls($limit: Int = 10) {
  payrolls(
    where: {
      supersededDate: { _isNull: true }
      status: { _eq: "Active" }
      payrollDates: { originalEftDate: { _gte: "now()" } }
    }
    orderBy: { updatedAt: DESC }
    limit: $limit
  ) {
    ...PayrollDashboardCard
    nextPayDate: payrollDates(
      where: { originalEftDate: { _gte: "now()" } }
      orderBy: { originalEftDate: ASC }
      limit: 1
    ) {
      originalEftDate
      adjustedEftDate
      processingDate
    }
  }
}

# Search and filtering
query SearchPayrolls($searchTerm: String!, $limit: Int = 50) {
  payrolls(
    where: {
      _and: [
        { supersededDate: { _isNull: true } }
        {
          _or: [
            { name: { _ilike: $searchTerm } }
            { client: { name: { _ilike: $searchTerm } } }
            { primaryConsultant: { computedName: { _ilike: $searchTerm } } }
          ]
        }
      ]
    }
    orderBy: { name: ASC }
    limit: $limit
  ) {
    ...PayrollTableRow
  }
}

query GetPayrollsByStatus($status: payroll_status!) {
  payrolls(
    where: { supersededDate: { _isNull: true }, status: { _eq: $status } }
    orderBy: { updatedAt: DESC }
  ) {
    ...PayrollListItem
  }
}

query GetPayrollsByProcessingTime($processingTime: Int!) {
  payrolls(
    where: {
      supersededDate: { _isNull: true }
      processingTime: { _eq: $processingTime }
    }
    orderBy: { name: ASC }
  ) {
    ...PayrollProcessingInfo
  }
}

# Version management queries
query GetPayrollVersions($payrollId: uuid!) {
  payrolls(
    where: {
      _or: [
        { id: { _eq: $payrollId } }
        { parentPayrollId: { _eq: $payrollId } }
      ]
    }
    orderBy: { versionNumber: DESC }
  ) {
    ...PayrollVersionInfo
  }
}

query GetPayrollHistory($payrollId: uuid!) {
  payrolls(
    where: {
      _or: [
        { id: { _eq: $payrollId } }
        { parentPayrollId: { _eq: $payrollId } }
      ]
    }
    orderBy: { createdAt: DESC }
  ) {
    ...PayrollVersionInfo
    status
    supersededDate
  }
}

query GetLatestPayrollVersion($payrollId: uuid!) {
  payrolls(
    where: {
      _or: [
        { id: { _eq: $payrollId } }
        { parentPayrollId: { _eq: $payrollId } }
      ]
      supersededDate: { _isNull: true }
    }
    limit: 1
  ) {
    ...PayrollWithAllRelations
  }
}

# Payroll cycles and configuration
query GetPayrollCycles {
  payrollCycles(orderBy: { name: ASC }) {
    id
    name
    description
    createdAt
    updatedAt
  }
}

query GetPayrollDateTypes {
  payrollDateTypes(orderBy: { name: ASC }) {
    id
    name
    description
    createdAt
    updatedAt
  }
}

# GetPayrollDetailComplete
# Optimized combined query for payroll detail pages that consolidates multiple separate queries into a single request
# Performance: Reduces network requests from 4 separate queries to 1 combined query (75% reduction)
# Replaces: GetPayrollForEditDocument, GetAllUsersListDocument, GetPayrollCyclesDocument, GetPayrollDateTypesDocument
# Domain: payrolls | Security: MEDIUM | Complexity: HIGH
# Param id: The unique identifier for the payroll to fetch complete details for
# Returns: Combined data with payroll details, users, cycles, and date types
# Usage: Payroll detail pages (/payrolls/[id]) to load all necessary data in a single request
# Since: Priority 2 optimization (2025-06-27) | Classification: SOC2_COMPLIANT
query GetPayrollDetailComplete($id: uuid!) {
  # Main payroll data with all relations
  payrollById(id: $id) {
    ...PayrollDetailed
    client {
      id
      name
    }
    payrollCycle {
      id
      name
      description
    }
    payrollDateType {
      id
      name
    }
    # Additional relations for complete detail view
    primaryConsultant {
      id
      firstName
      lastName
      computedName
      email
      role
    }
    backupConsultant {
      id
      firstName
      lastName
      computedName
      email
      role
    }
    manager {
      id
      firstName
      lastName
      computedName
      email
      role
    }
    # Payroll dates for timeline view - use different alias to avoid conflict
    detailDates: payrollDates(orderBy: { originalEftDate: ASC }, limit: 12) {
      id
      originalEftDate
      adjustedEftDate
      processingDate
      createdAt
    }
  }

  # All users for consultant/manager assignments (combines GetAllUsersList)
  users(where: { isActive: { _eq: true } }, orderBy: { computedName: ASC }) {
    id
    firstName
    lastName
    computedName
    email
    role
    isStaff
    isActive
  }

  # Lookup tables (combines GetPayrollCycles)
  payrollCycles(orderBy: { name: ASC }) {
    id
    name
    description
  }

  # Lookup tables (combines GetPayrollDateTypes)
  payrollDateTypes(orderBy: { name: ASC }) {
    id
    name
    description
  }
}

# Payroll dates management
query GetPayrollDates($payrollId: uuid!) {
  payrollDates(
    where: { payrollId: { _eq: $payrollId } }
    orderBy: { originalEftDate: ASC }
  ) {
    id
    originalEftDate
    adjustedEftDate
    processingDate
    notes
    createdAt
    updatedAt
    payrollId
  }
}

query GetUpcomingPayrollDates($limit: Int = 20) {
  payrollDates(
    where: { originalEftDate: { _gte: "now()" } }
    orderBy: { originalEftDate: ASC }
    limit: $limit
  ) {
    id
    originalEftDate
    adjustedEftDate
    processingDate
    notes
    payrollAssignment {
      payrollDate {
        relatedPayroll {
          id
          name
          status
          client {
            id
            name
          }
        }
      }
    }
  }
}

query GetPayrollDatesInRange(
  $startDate: date!
  $endDate: date!
  $payrollId: uuid
) {
  payrollDates(
    where: {
      originalEftDate: { _gte: $startDate, _lte: $endDate }
      payrollId: { _eq: $payrollId }
    }
    orderBy: { originalEftDate: ASC }
  ) {
    id
    originalEftDate
    adjustedEftDate
    processingDate
    notes
    payrollAssignment {
      payrollDate {
        relatedPayroll {
          id
          name
          client {
            name
          }
        }
      }
    }
  }
}

# Assignment and workload queries
query GetUnassignedPayrolls {
  payrolls(
    where: {
      supersededDate: { _isNull: true }
      _or: [
        { primaryConsultantUserId: { _isNull: true } }
        { backupConsultantUserId: { _isNull: true } }
        { managerUserId: { _isNull: true } }
      ]
    }
    orderBy: { createdAt: DESC }
  ) {
    ...PayrollForAssignment
  }
}

query GetPayrollsNeedingAttention {
  payrolls(
    where: {
      supersededDate: { _isNull: true }
      status: { _in: ["pending_approval", "processing", "draft"] }
    }
    orderBy: { updatedAt: ASC }
  ) {
    ...PayrollListItem
    primaryConsultant {
      id
      firstName
      lastName
      computedName
    }
    manager {
      id
      firstName
      lastName
      computedName
    }
  }
}

# Bulk operations support
query GetPayrollsForBulkUpdate($ids: [uuid!]!) {
  payrolls(where: { id: { _in: $ids } }) {
    ...PayrollBasic
  }
}

query GetPayrollsForBulkAssignment($where: payrollsBoolExp!) {
  payrolls(where: $where) {
    ...PayrollForAssignment
  }
}

# Audit and compliance queries
query GetPayrollsForAudit(
  $limit: Int = 100
  $offset: Int = 0
  $where: payrollsBoolExp = {}
) {
  payrolls(
    limit: $limit
    offset: $offset
    where: $where
    orderBy: { updatedAt: DESC }
  ) {
    ...PayrollForAudit
  }
}

query GetPayrollActivity($payrollId: uuid!, $limit: Int = 50) {
  payrolls(
    where: {
      _or: [
        { id: { _eq: $payrollId } }
        { parentPayrollId: { _eq: $payrollId } }
      ]
    }
    orderBy: { updatedAt: DESC }
    limit: $limit
  ) {
    ...PayrollVersionInfo
    status
    supersededDate
  }
}

# Performance-optimized paginated queries
query GetPayrollsPaginated(
  $limit: Int = 20
  $offset: Int = 0
  $where: payrollsBoolExp = {}
  $orderBy: [payrollsOrderBy!] = [{ createdAt: DESC }]
) {
  payrolls(
    limit: $limit
    offset: $offset
    where: { _and: [{ supersededDate: { _isNull: true } }, $where] }
    orderBy: $orderBy
  ) {
    ...PayrollTableRow
  }

  payrollsAggregate(
    where: { _and: [{ supersededDate: { _isNull: true } }, $where] }
  ) {
    aggregate {
      count
    }
  }
}

query SearchPayrollsPaginated(
  $searchTerm: String!
  $limit: Int = 20
  $offset: Int = 0
) {
  payrolls(
    where: {
      _and: [
        { supersededDate: { _isNull: true } }
        {
          _or: [
            { name: { _ilike: $searchTerm } }
            { client: { name: { _ilike: $searchTerm } } }
            { primaryConsultant: { computedName: { _ilike: $searchTerm } } }
            { backupConsultant: { computedName: { _ilike: $searchTerm } } }
          ]
        }
      ]
    }
    orderBy: { name: ASC }
    limit: $limit
    offset: $offset
  ) {
    ...PayrollTableRow
  }

  searchAggregate: payrollsAggregate(
    where: {
      _and: [
        { supersededDate: { _isNull: true } }
        {
          _or: [
            { name: { _ilike: $searchTerm } }
            { client: { name: { _ilike: $searchTerm } } }
            { primaryConsultant: { computedName: { _ilike: $searchTerm } } }
            { backupConsultant: { computedName: { _ilike: $searchTerm } } }
          ]
        }
      ]
    }
  ) {
    aggregate {
      count
    }
  }
}

# Quick list queries for performance
query GetPayrollsQuickList {
  payrolls(
    where: { supersededDate: { _isNull: true } }
    orderBy: { name: ASC }
  ) {
    ...PayrollMinimal
  }
}

query GetActivePayrollsQuickList {
  payrolls(
    where: { supersededDate: { _isNull: true }, status: { _eq: "Active" } }
    orderBy: { name: ASC }
  ) {
    ...PayrollMinimal
  }
}

query GetClientPayrollsQuickList($clientId: uuid!) {
  payrolls(
    where: { clientId: { _eq: $clientId }, supersededDate: { _isNull: true } }
    orderBy: { name: ASC }
  ) {
    ...PayrollMinimal
  }
}

# Hasura function queries
query GeneratePayrollDates(
  $payrollId: uuid!
  $startDate: date!
  $endDate: date!
  $maxDates: Int = 100
) {
  generatePayrollDates(
    args: {
      p_payroll_id: $payrollId
      p_start_date: $startDate
      p_end_date: $endDate
      p_max_dates: $maxDates
    }
  ) {
    id
    originalEftDate
    adjustedEftDate
    processingDate
    notes
    payrollId
    createdAt
    updatedAt
  }
}

# Alias for GeneratePayrollDates to match import expectations
query GeneratePayrollDatesQuery(
  $payrollId: uuid!
  $startDate: date!
  $endDate: date!
  $maxDates: Int = 100
) {
  generatePayrollDates(
    args: {
      p_payroll_id: $payrollId
      p_start_date: $startDate
      p_end_date: $endDate
      p_max_dates: $maxDates
    }
  ) {
    id
    originalEftDate
    adjustedEftDate
    processingDate
    notes
    payrollId
    createdAt
    updatedAt
  }
}

# User-specific upcoming payrolls query
query GetUserUpcomingPayrolls($userId: uuid!, $limit: Int = 10) {
  payrolls(
    where: {
      supersededDate: { _isNull: true }
      status: { _eq: "Active" }
      _or: [
        { primaryConsultantUserId: { _eq: $userId } }
        { backupConsultantUserId: { _eq: $userId } }
        { managerUserId: { _eq: $userId } }
      ]
      payrollDates: { originalEftDate: { _gte: "now()" } }
    }
    orderBy: { updatedAt: DESC }
    limit: $limit
  ) {
    ...PayrollDashboardCard
    nextPayDate: payrollDates(
      where: { originalEftDate: { _gte: "now()" } }
      orderBy: { originalEftDate: ASC }
      limit: 1
    ) {
      originalEftDate
      adjustedEftDate
      processingDate
    }
  }
}

# Monthly payroll overview query with leave data
query GetPayrollsByMonth($startDate: date!, $endDate: date!) {
  payrolls(
    where: {
      supersededDate: { _isNull: true }
      payrollDates: { originalEftDate: { _gte: $startDate, _lt: $endDate } }
    }
    orderBy: { createdAt: DESC }
  ) {
    ...PayrollWithDates
    client {
      id
      name
    }
    primaryConsultant {
      id
      firstName
      lastName
      computedName
      email
      role
      isActive
    }
    backupConsultant {
      id
      firstName
      lastName
      computedName
      email
      role
      isActive
    }
    manager {
      id
      firstName
      lastName
      computedName
      email
      role
      isActive
    }
  }
}

# Payroll family dates query (related payrolls and their dates)
query GetPayrollFamilyDates($payrollId: uuid!) {
  payrolls(
    where: {
      _or: [
        { id: { _eq: $payrollId } }
        { parentPayrollId: { _eq: $payrollId } }
      ]
    }
    orderBy: { versionNumber: DESC }
  ) {
    id
    name
    versionNumber
    status
    supersededDate
    payrollDates(orderBy: { originalEftDate: ASC }) {
      ...PayrollDate
    }
  }
}

# Payrolls missing dates query
query GetPayrollsMissingDates {
  payrolls(
    where: {
      supersededDate: { _isNull: true }
      status: { _eq: "Active" }
      _not: { payrollDates: {} }
    }
    orderBy: { name: ASC }
  ) {
    ...PayrollListItem
    payrollCycle {
      id
      name
      description
    }
    payrollDateType {
      id
      name
      description
    }
  }
}

# Enhanced table query with proper next EFT date calculation
query GetPayrollsTableEnhanced(
  $limit: Int = 100
  $offset: Int = 0
  $where: payrollsBoolExp = {}
  $orderBy: [payrollsOrderBy!] = [{ name: ASC }]
) {
  payrolls(
    limit: $limit
    offset: $offset
    where: { 
      _and: [
        { supersededDate: { _isNull: true } }
        $where
      ]
    }
    orderBy: $orderBy
  ) {
    # Basic payroll info
    id
    name
    status
    employeeCount
    dateValue
    processingDaysBeforeEft
    createdAt
    updatedAt
    
    # Client information
    client {
      id
      name
      active
    }
    
    # Payroll cycle information
    payrollCycle {
      id
      name
      description
    }
    
    # Date type information
    payrollDateType {
      id
      name
      description
    }
    
    # Primary consultant information
    primaryConsultant {
      id
      firstName
      lastName
      computedName
      email
      role
    }
    
    # Backup consultant (optional)
    backupConsultant {
      id
      firstName
      lastName
      computedName
      email
      role
    }
    
    # Next EFT date - get the next upcoming EFT date from today
    nextEftDate: payrollDates(
      where: { adjustedEftDate: { _gte: "now()" } }
      orderBy: { adjustedEftDate: ASC }
      limit: 1
    ) {
      id
      originalEftDate
      adjustedEftDate
      processingDate
      notes
    }
  }
  
  # Total count for pagination
  payrollsAggregate(
    where: { 
      _and: [
        { supersededDate: { _isNull: true } }
        $where
      ]
    }
  ) {
    aggregate {
      count
    }
  }
}

# Payroll report generation query
query GeneratePayrollReport($startDate: date!, $endDate: date!) {
  payrolls(
    where: {
      supersededDate: { _isNull: true }
      payrollDates: { originalEftDate: { _gte: $startDate, _lte: $endDate } }
    }
    orderBy: { name: ASC }
  ) {
    ...PayrollForAudit
    client {
      id
      name
    }
    primaryConsultant {
      id
      firstName
      lastName
      computedName
    }
    backupConsultant {
      id
      firstName
      lastName
      computedName
    }
    manager {
      id
      firstName
      lastName
      computedName
    }
    payrollDates(
      where: { originalEftDate: { _gte: $startDate, _lte: $endDate } }
      orderBy: { originalEftDate: ASC }
    ) {
      id
      originalEftDate
      adjustedEftDate
      processingDate
      notes
    }
  }

  reportMetadata: payrollsAggregate(
    where: {
      supersededDate: { _isNull: true }
      payrollDates: { originalEftDate: { _gte: $startDate, _lte: $endDate } }
    }
  ) {
    aggregate {
      count
    }
  }
}
