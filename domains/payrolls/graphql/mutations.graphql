# Payrolls Domain Mutations
# Security Classification: MEDIUM - Business operational data
# SOC2 Compliance: All mutations logged with audit trail

# CreatePayroll
# Creates a new payroll record with full client and consultant relationships
# Domain: payrolls | Security: MEDIUM | Complexity: MEDIUM
# Param object: Complete payroll data (name, clientId, consultants, manager, status, cycle, etc.)
# Returns: Created payroll record with populated relationships (client, consultants, manager)
# Usage: Creating new payroll implementations from clients or payrolls pages
# Validation: Client must exist and be active, consultant/manager must have appropriate roles
# Audit: All payroll creations automatically logged for SOC2 compliance
# Side effects: Triggers audit log, may notify consultants, updates client dashboard stats
# Since: Initial payroll system implementation | Classification: SOC2_COMPLIANT
mutation CreatePayroll($object: PayrollsInsertInput!) {
  insertPayrollsOne(object: $object) {
    ...PayrollDetailed
    client {
      id
      name
    }
    primaryConsultant {
      id
      firstName
      lastName
      computedName
    }
  }
}

mutation UpdatePayroll($id: uuid!, $set: PayrollsSetInput!) {
  updatePayrollsByPk(pkColumns: { id: $id }, _set: $set) {
    ...PayrollDetailed
    client {
      id
      name
    }
    primaryConsultant {
      id
      firstName
      lastName
      computedName
    }
    backupConsultant {
      id
      firstName
      lastName
      computedName
    }
  }
}

mutation DeletePayroll($id: uuid!) {
  updatePayrollsByPk(
    pkColumns: { id: $id }
    _set: { supersededDate: "now()" }
  ) {
    ...PayrollBasic
  }
}

mutation ReactivatePayroll($id: uuid!) {
  updatePayrollsByPk(
    pkColumns: { id: $id }
    _set: { supersededDate: null }
  ) {
    ...PayrollBasic
  }
}

# Status management
mutation UpdatePayrollStatus($id: uuid!, $status: payroll_status!) {
  updatePayrollsByPk(
    pkColumns: { id: $id }
    _set: { status: $status, updatedAt: "now()" }
  ) {
    ...PayrollBasic
    client {
      id
      name
    }
  }
}

mutation ActivatePayroll($id: uuid!) {
  updatePayrollsByPk(
    pkColumns: { id: $id }
    _set: { status: "Active", updatedAt: "now()" }
  ) {
    ...PayrollBasic
  }
}

mutation DeactivatePayroll($id: uuid!) {
  updatePayrollsByPk(
    pkColumns: { id: $id }
    _set: { status: "Inactive", updatedAt: "now()" }
  ) {
    ...PayrollBasic
  }
}

# Assignment operations
mutation AssignPrimaryConsultant($id: uuid!, $userId: uuid!) {
  updatePayrollsByPk(
    pkColumns: { id: $id }
    _set: { primaryConsultantUserId: $userId, updatedAt: "now()" }
  ) {
    ...PayrollBasic
    primaryConsultant {
      id
      firstName
      lastName
      computedName
      email
    }
  }
}

mutation AssignBackupConsultant($id: uuid!, $userId: uuid!) {
  updatePayrollsByPk(
    pkColumns: { id: $id }
    _set: { backupConsultantUserId: $userId, updatedAt: "now()" }
  ) {
    ...PayrollBasic
    backupConsultant {
      id
      firstName
      lastName
      computedName
      email
    }
  }
}

mutation AssignManager($id: uuid!, $userId: uuid!) {
  updatePayrollsByPk(
    pkColumns: { id: $id }
    _set: { managerUserId: $userId, updatedAt: "now()" }
  ) {
    ...PayrollBasic
    assignedManager {
      id
      firstName
      lastName
      computedName
      email
    }
  }
}

mutation UpdatePayrollAssignments(
  $id: uuid!
  $primaryConsultantUserId: uuid
  $backupConsultantUserId: uuid
  $managerUserId: uuid
) {
  updatePayrollsByPk(
    pkColumns: { id: $id }
    _set: {
      primaryConsultantUserId: $primaryConsultantUserId
      backupConsultantUserId: $backupConsultantUserId
      managerUserId: $managerUserId
      updatedAt: "now()"
    }
  ) {
    ...PayrollBasic
    primaryConsultant {
      id
      firstName
      lastName
      computedName
      email
    }
    backupConsultant {
      id
      firstName
      lastName
      computedName
      email
    }
    assignedManager {
      id
      firstName
      lastName
      computedName
      email
    }
  }
}

# Version management
mutation CreatePayrollVersion(
  $parentPayrollId: uuid!
  $versionReason: String!
  $object: PayrollsInsertInput!
) {
  # First supersede the current version
  updatePayrollsByPk(
    pkColumns: { id: $parentPayrollId }
    _set: { supersededDate: "now()" }
  ) {
    id
    supersededDate
  }
  
  # Then create the new version
  insertPayrollsOne(
    object: $object
  ) {
    ...PayrollWithAllRelations
  }
}

mutation SupersedePayroll($id: uuid!) {
  updatePayrollsByPk(
    pkColumns: { id: $id }
    _set: { supersededDate: "now()" }
  ) {
    ...PayrollBasic
  }
}

# Bulk operations
mutation BulkUpdatePayrolls($where: PayrollsBoolExp!, $set: PayrollsSetInput!) {
  updatePayrolls(where: $where, _set: $set) {
    returning {
      ...PayrollBasic
    }
    affectedRows
  }
}

mutation BulkAssignConsultant(
  $payrollIds: [uuid!]!
  $primaryConsultantUserId: uuid!
) {
  updatePayrolls(
    where: { id: { _in: $payrollIds } }
    _set: {
      primaryConsultantUserId: $primaryConsultantUserId
      updatedAt: "now()"
    }
  ) {
    returning {
      ...PayrollBasic
      primaryConsultant {
        id
        firstName
        lastName
        computedName
      }
    }
    affectedRows
  }
}

mutation BulkAssignManager(
  $payrollIds: [uuid!]!
  $managerUserId: uuid!
) {
  updatePayrolls(
    where: { id: { _in: $payrollIds } }
    _set: {
      managerUserId: $managerUserId
      updatedAt: "now()"
    }
  ) {
    returning {
      ...PayrollBasic
      assignedManager {
        id
        firstName
        lastName
        computedName
      }
    }
    affectedRows
  }
}

mutation BulkUpdatePayrollStatus(
  $payrollIds: [uuid!]!
  $status: payroll_status!
) {
  updatePayrolls(
    where: { id: { _in: $payrollIds } }
    _set: {
      status: $status
      updatedAt: "now()"
    }
  ) {
    returning {
      ...PayrollBasic
    }
    affectedRows
  }
}

# Configuration updates
mutation UpdatePayrollConfiguration(
  $id: uuid!
  $payrollSystem: String
  $processingTime: Int
  $processingDaysBeforeEft: Int
  $cycleId: uuid
  $dateTypeId: uuid
) {
  updatePayrollsByPk(
    pkColumns: { id: $id }
    _set: {
      payrollSystem: $payrollSystem
      processingTime: $processingTime
      processingDaysBeforeEft: $processingDaysBeforeEft
      cycleId: $cycleId
      dateTypeId: $dateTypeId
      updatedAt: "now()"
    }
  ) {
    ...PayrollWithCycle
  }
}

mutation UpdatePayrollDetails(
  $id: uuid!
  $name: String
  $employeeCount: Int
  $goLiveDate: date
) {
  updatePayrollsByPk(
    pkColumns: { id: $id }
    _set: {
      name: $name
      employeeCount: $employeeCount
      goLiveDate: $goLiveDate
      updatedAt: "now()"
    }
  ) {
    ...PayrollBasic
  }
}

# Payroll dates management
mutation CreatePayrollDate($object: PayrollDatesInsertInput!) {
  insertPayrollDatesOne(object: $object) {
    id
    originalEftDate
    adjustedEftDate
    processingDate
    notes
    payrollId
    createdAt
    updatedAt
  }
}

mutation UpdatePayrollDate($id: uuid!, $set: PayrollDatesSetInput!) {
  updatePayrollDatesByPk(pkColumns: { id: $id }, _set: $set) {
    id
    originalEftDate
    adjustedEftDate
    processingDate
    notes
    payrollId
    updatedAt
  }
}

mutation DeletePayrollDate($id: uuid!) {
  deletePayrollDatesByPk(id: $id) {
    id
    originalEftDate
    adjustedEftDate
    payrollId
  }
}

mutation UpdatePayrollDateNotes($id: uuid!, $notes: String) {
  updatePayrollDatesByPk(
    pkColumns: { id: $id }
    _set: { notes: $notes, updatedAt: "now()" }
  ) {
    id
    originalEftDate
    adjustedEftDate
    notes
    payrollId
  }
}

# Payroll Date Completion Operations
mutation CompletePayrollDate($id: uuid!, $completedBy: uuid!) {
  updatePayrollDatesByPk(
    pkColumns: { id: $id }
    _set: { 
      status: "completed"
      completedAt: "now()"
      completedBy: $completedBy
    }
  ) {
    id
    status
    completedAt
    completedBy
    payrollId
    originalEftDate
    adjustedEftDate
    processingDate
  }
}

mutation UpdatePayrollDateStatus($id: uuid!, $status: String!, $updatedBy: uuid) {
  updatePayrollDatesByPk(
    pkColumns: { id: $id }
    _set: { 
      status: $status
      updatedAt: "now()"
      completedBy: $updatedBy
    }
  ) {
    id
    status
    completedAt
    completedBy
    payrollId
  }
}

# Complete payroll date with time tracking
mutation CompletePayrollDateWithTime(
  $id: uuid!
  $completedBy: uuid!
  $timeSpentMinutes: Int = 0
  $completionNotes: String
) {
  updatePayrollDatesByPk(
    pkColumns: { id: $id }
    _set: { 
      status: "completed"
      completedAt: "now()"
      completedBy: $completedBy
      completionNotes: $completionNotes
      totalTimeSpentMinutes: $timeSpentMinutes
    }
  ) {
    id
    status
    completedAt
    completedBy
    totalTimeSpentMinutes
    completionNotes
    payrollId
    originalEftDate
    adjustedEftDate
    processingDate
  }
}

# Add time entry for payroll date work
mutation AddPayrollDateTimeEntry(
  $payrollDateId: uuid!
  $userId: uuid!
  $timeSpentMinutes: Int!
  $description: String
  $workDate: date
) {
  insertPayrollDateTimeEntriesOne(
    object: {
      payrollDateId: $payrollDateId
      userId: $userId
      timeSpentMinutes: $timeSpentMinutes
      description: $description
      workDate: $workDate
    }
    onConflict: {
      constraint: payroll_date_time_entries_payroll_date_id_user_id_work_date_key
      updateColumns: [timeSpentMinutes, description, updatedAt]
    }
  ) {
    id
    payrollDateId
    userId
    timeSpentMinutes
    description
    workDate
    createdAt
    updatedAt
  }
}

mutation BulkCreatePayrollDates($objects: [PayrollDatesInsertInput!]!) {
  insertPayrollDates(objects: $objects) {
    returning {
      id
      originalEftDate
      adjustedEftDate
      processingDate
      payrollId
    }
    affectedRows
  }
}

mutation BulkDeletePayrollDates($payrollId: uuid!) {
  deletePayrollDates(where: { payrollId: { _eq: $payrollId } }) {
    affectedRows
  }
}

# Payroll cycle management
mutation CreatePayrollCycle($object: PayrollCyclesInsertInput!) {
  insertPayrollCyclesOne(object: $object) {
    id
    name
    description
    createdAt
  }
}

mutation UpdatePayrollCycle($id: uuid!, $set: PayrollCyclesSetInput!) {
  updatePayrollCyclesByPk(pkColumns: { id: $id }, _set: $set) {
    id
    name
    description
    updatedAt
  }
}

mutation DeletePayrollCycle($id: uuid!) {
  deletePayrollCyclesByPk(id: $id) {
    id
    name
  }
}

# Payroll date type management
mutation CreatePayrollDateType($object: PayrollDateTypesInsertInput!) {
  insertPayrollDateTypesOne(object: $object) {
    id
    name
    description
    createdAt
  }
}

mutation UpdatePayrollDateType($id: uuid!, $set: PayrollDateTypesSetInput!) {
  updatePayrollDateTypesByPk(pkColumns: { id: $id }, _set: $set) {
    id
    name
    description
    updatedAt
  }
}

mutation DeletePayrollDateType($id: uuid!) {
  deletePayrollDateTypesByPk(id: $id) {
    id
    name
  }
}

# Special operations
# NOTE: generatePayrollDates is available as a query function, not a mutation

# Action mutations for payroll assignments (commented out until Hasura actions are configured)
# mutation CommitPayrollAssignments($changes: [PayrollAssignmentInput!]!) {
#   commitPayrollAssignments(changes: $changes) {
#     success
#     message
#     errors
#     affectedAssignments {
#       id
#       payrollDateId
#       originalConsultantId
#       newConsultantId
#       adjustedEftDate
#     }
#   }
# }

# Batch processing operations
mutation ProcessPayrollBatch(
  $payrollIds: [uuid!]!
  $processedBy: uuid!
) {
  updatePayrolls(
    where: { id: { _in: $payrollIds } }
    _set: {
      status: "Processing"
      updatedAt: "now()"
    }
  ) {
    returning {
      ...PayrollBasic
      client {
        id
        name
      }
    }
    affectedRows
  }
}

mutation ApprovePayrollBatch(
  $payrollIds: [uuid!]!
  $approvedBy: uuid!
) {
  updatePayrolls(
    where: { 
      id: { _in: $payrollIds }
      status: { _eq: "Processing" }
    }
    _set: {
      status: "Approved"
      updatedAt: "now()"
    }
  ) {
    returning {
      ...PayrollBasic
      client {
        id
        name
      }
    }
    affectedRows
  }
}

# Report generation - returns payroll data for report building
query GeneratePayrollsByIds(
  $payrollIds: [uuid!]!
  $reportType: String!
) {
  payrolls(
    where: { id: { _in: $payrollIds } }
    orderBy: { name: ASC }
  ) {
    ...PayrollWithAllRelations
    payrollDates(orderBy: { originalEftDate: ASC }) {
      id
      originalEftDate
      adjustedEftDate
      processingDate
      notes
    }
  }
}