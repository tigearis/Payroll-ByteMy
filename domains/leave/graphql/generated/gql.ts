/* eslint-disable */
import * as types from './graphql';
import { TypedDocumentNode as DocumentNode } from '@graphql-typed-document-node/core';

/**
 * Map of all GraphQL operations in the project.
 *
 * This map has several performance disadvantages:
 * 1. It is not tree-shakeable, so it will include all operations in the project.
 * 2. It is not minifiable, so the string of a GraphQL query will be multiple times inside the bundle.
 * 3. It does not support dead code elimination, so it will add unused operations.
 *
 * Therefore it is highly recommended to use the babel or swc plugin for production.
 * Learn more about it here: https://the-guild.dev/graphql/codegen/plugins/presets/preset-client#reducing-bundle-size
 */
type Documents = {
    "fragment LeaveCore on leave {\n  id\n  leaveType\n  startDate\n  endDate\n  status\n  userId\n}\n\nfragment LeaveBasic on leave {\n  ...LeaveCore\n  reason\n}\n\nfragment LeaveDetailed on leave {\n  ...LeaveBasic\n}\n\nfragment LeaveWithUser on leave {\n  ...LeaveBasic\n  leaveUser {\n    id\n    name\n    email\n    role\n    managerUser {\n      id\n      name\n      email\n    }\n  }\n}\n\nfragment LeaveComplete on leave {\n  ...LeaveDetailed\n  leaveUser {\n    id\n    name\n    email\n    role\n    managerUser {\n      id\n      name\n      email\n    }\n  }\n}\n\nfragment LeaveSummary on leave {\n  id\n  leaveType\n  startDate\n  endDate\n  status\n  userId\n}\n\nfragment LeaveListItem on leave {\n  ...LeaveSummary\n  reason\n  leaveUser {\n    id\n    name\n  }\n}\n\nfragment LeaveTableRow on leave {\n  ...LeaveListItem\n}\n\nfragment LeaveDashboardCard on leave {\n  ...LeaveSummary\n  leaveUser {\n    id\n    name\n  }\n}\n\nfragment LeaveCalendarItem on leave {\n  id\n  leaveType\n  startDate\n  endDate\n  status\n  leaveUser {\n    id\n    name\n    role\n  }\n}\n\nfragment LeaveMinimal on leave {\n  id\n  leaveType\n  startDate\n  endDate\n  status\n  userId\n}\n\nfragment PendingLeave on leave {\n  ...LeaveWithUser\n}\n\nfragment ApprovedLeave on leave {\n  ...LeaveBasic\n}\n\nfragment RejectedLeave on leave {\n  ...LeaveBasic\n}\n\nfragment SickLeave on leave {\n  ...LeaveDetailed\n}\n\nfragment VacationLeave on leave {\n  ...LeaveBasic\n}\n\nfragment EmergencyLeave on leave {\n  ...LeaveDetailed\n}\n\nfragment LeaveForAudit on leave {\n  id\n  leaveType\n  startDate\n  endDate\n  status\n  userId\n}\n\nfragment LeaveApprovalAudit on leave {\n  id\n  leaveType\n  startDate\n  endDate\n  status\n  userId\n}": typeof types.LeaveCoreFragmentDoc,
    "mutation CreateLeave($object: leaveInsertInput!) {\n  insertLeave(object: $object) {\n    ...LeaveDetailed\n    leaveUser {\n      id\n      name\n      email\n      managerUser {\n        id\n        name\n        email\n      }\n    }\n  }\n}\n\nmutation UpdateLeave($id: uuid!, $set: leaveSetInput!) {\n  updateLeaveById(pkColumns: {id: $id}, _set: $set) {\n    ...LeaveDetailed\n    leaveUser {\n      id\n      name\n      email\n    }\n  }\n}\n\nmutation DeleteLeave($id: uuid!) {\n  deleteLeaveById(id: $id) {\n    id\n    leaveType\n    startDate\n    endDate\n  }\n}\n\nmutation CreateAnnualLeave($userId: uuid!, $startDate: date!, $endDate: date!, $reason: String) {\n  insertLeave(\n    object: {userId: $userId, startDate: $startDate, endDate: $endDate, leaveType: \"Annual\", reason: $reason, status: Pending}\n  ) {\n    ...LeaveBasic\n    leaveUser {\n      id\n      name\n      email\n    }\n  }\n}\n\nmutation CreateSickLeave($userId: uuid!, $startDate: date!, $endDate: date!, $reason: String) {\n  insertLeave(\n    object: {userId: $userId, startDate: $startDate, endDate: $endDate, leaveType: \"Sick\", reason: $reason, status: Pending}\n  ) {\n    ...LeaveBasic\n    leaveUser {\n      id\n      name\n      email\n    }\n  }\n}\n\nmutation CreateUnpaidLeave($userId: uuid!, $startDate: date!, $endDate: date!, $reason: String) {\n  insertLeave(\n    object: {userId: $userId, startDate: $startDate, endDate: $endDate, leaveType: \"Unpaid\", reason: $reason, status: Pending}\n  ) {\n    ...LeaveBasic\n    leaveUser {\n      id\n      name\n      email\n    }\n  }\n}\n\nmutation CreateOtherLeave($userId: uuid!, $startDate: date!, $endDate: date!, $reason: String!) {\n  insertLeave(\n    object: {userId: $userId, startDate: $startDate, endDate: $endDate, leaveType: \"Other\", reason: $reason, status: Pending}\n  ) {\n    ...LeaveBasic\n    leaveUser {\n      id\n      name\n      email\n    }\n  }\n}\n\nmutation ApproveLeave($id: uuid!) {\n  updateLeaveById(pkColumns: {id: $id}, _set: {status: Approved}) {\n    ...LeaveBasic\n    leaveUser {\n      id\n      name\n      email\n    }\n  }\n}\n\nmutation RejectLeave($id: uuid!) {\n  updateLeaveById(pkColumns: {id: $id}, _set: {status: Rejected}) {\n    ...LeaveBasic\n    leaveUser {\n      id\n      name\n      email\n    }\n  }\n}\n\nmutation SetLeavePending($id: uuid!) {\n  updateLeaveById(pkColumns: {id: $id}, _set: {status: Pending}) {\n    ...LeaveBasic\n  }\n}\n\nmutation BulkApproveLeave($leaveIds: [uuid!]!) {\n  bulkUpdateLeave(where: {id: {_in: $leaveIds}}, _set: {status: Approved}) {\n    returning {\n      ...LeaveBasic\n    }\n    affectedRows\n  }\n}\n\nmutation BulkRejectLeave($leaveIds: [uuid!]!) {\n  bulkUpdateLeave(where: {id: {_in: $leaveIds}}, _set: {status: Rejected}) {\n    returning {\n      ...LeaveBasic\n    }\n    affectedRows\n  }\n}\n\nmutation BulkDeleteLeave($leaveIds: [uuid!]!) {\n  bulkDeleteLeave(where: {id: {_in: $leaveIds}}) {\n    affectedRows\n    returning {\n      id\n      leaveType\n      startDate\n      endDate\n    }\n  }\n}\n\nmutation UpdateLeaveDetails($id: uuid!, $startDate: date, $endDate: date, $leaveType: String, $reason: String) {\n  updateLeaveById(\n    pkColumns: {id: $id}\n    _set: {startDate: $startDate, endDate: $endDate, leaveType: $leaveType, reason: $reason}\n  ) {\n    ...LeaveBasic\n    leaveUser {\n      id\n      name\n      email\n    }\n  }\n}\n\nmutation UpdateLeaveDates($id: uuid!, $startDate: date!, $endDate: date!) {\n  updateLeaveById(\n    pkColumns: {id: $id}\n    _set: {startDate: $startDate, endDate: $endDate}\n  ) {\n    ...LeaveBasic\n  }\n}\n\nmutation UpdateLeaveType($id: uuid!, $leaveType: String!) {\n  updateLeaveById(pkColumns: {id: $id}, _set: {leaveType: $leaveType}) {\n    ...LeaveBasic\n  }\n}\n\nmutation UpdateLeaveReason($id: uuid!, $reason: String) {\n  updateLeaveById(pkColumns: {id: $id}, _set: {reason: $reason}) {\n    ...LeaveBasic\n  }\n}\n\nmutation CancelLeave($id: uuid!) {\n  deleteLeaveById(id: $id) {\n    id\n    leaveType\n    startDate\n    endDate\n    leaveUser {\n      id\n      name\n      email\n    }\n  }\n}\n\nmutation TransferLeave($id: uuid!, $newUserId: uuid!) {\n  updateLeaveById(pkColumns: {id: $id}, _set: {userId: $newUserId}) {\n    ...LeaveBasic\n    leaveUser {\n      id\n      name\n      email\n    }\n  }\n}\n\nmutation CreateMyLeave($startDate: date!, $endDate: date!, $leaveType: String!, $reason: String) {\n  insertLeave(\n    object: {startDate: $startDate, endDate: $endDate, leaveType: $leaveType, reason: $reason, status: Pending}\n  ) {\n    ...LeaveBasic\n    leaveUser {\n      id\n      name\n      email\n    }\n  }\n}\n\nmutation UpdateMyLeave($id: uuid!, $startDate: date, $endDate: date, $leaveType: String, $reason: String) {\n  updateLeaveById(\n    pkColumns: {id: $id}\n    _set: {startDate: $startDate, endDate: $endDate, leaveType: $leaveType, reason: $reason}\n  ) {\n    ...LeaveBasic\n  }\n}\n\nmutation CancelMyLeave($id: uuid!) {\n  deleteLeaveById(id: $id) {\n    id\n    leaveType\n    startDate\n    endDate\n  }\n}": typeof types.CreateLeaveDocument,
    "query GetLeave($limit: Int = 50, $offset: Int = 0, $where: leaveBoolExp) {\n  leave(limit: $limit, offset: $offset, where: $where, orderBy: {startDate: DESC}) {\n    ...LeaveListItem\n  }\n  leaveAggregate(where: $where) {\n    aggregate {\n      count\n    }\n  }\n}\n\nquery GetLeaveById($id: uuid!) {\n  leaveById(id: $id) {\n    ...LeaveComplete\n  }\n}\n\nquery GetLeaveBasic($id: uuid!) {\n  leaveById(id: $id) {\n    ...LeaveBasic\n  }\n}\n\nquery GetUserLeave($userId: uuid!) {\n  leave(where: {userId: {_eq: $userId}}, orderBy: {startDate: DESC}) {\n    ...LeaveWithUser\n  }\n}\n\nquery GetMyLeave($userId: uuid!) {\n  leave(where: {userId: {_eq: $userId}}, orderBy: {startDate: DESC}) {\n    ...LeaveDetailed\n  }\n}\n\nquery GetUserLeaveById($id: uuid!, $userId: uuid!) {\n  leaveById(id: $id) {\n    ...LeaveWithUser\n  }\n}\n\nquery GetUserLeaveHistory($userId: uuid!, $limit: Int = 100) {\n  leave(\n    where: {userId: {_eq: $userId}}\n    orderBy: {startDate: DESC}\n    limit: $limit\n  ) {\n    ...LeaveListItem\n  }\n}\n\nquery GetPendingLeave {\n  leave(where: {status: {_eq: Pending}}, orderBy: {startDate: ASC}) {\n    ...PendingLeave\n  }\n}\n\nquery GetApprovedLeave {\n  leave(where: {status: {_eq: Approved}}, orderBy: {startDate: DESC}) {\n    ...ApprovedLeave\n  }\n}\n\nquery GetRejectedLeave {\n  leave(where: {status: {_eq: Rejected}}, orderBy: {startDate: DESC}) {\n    ...RejectedLeave\n  }\n}\n\nquery GetLeaveByStatus($status: leave_status_enum!) {\n  leave(where: {status: {_eq: $status}}, orderBy: {startDate: DESC}) {\n    ...LeaveBasic\n  }\n}\n\nquery GetUserPendingLeave($userId: uuid!) {\n  leave(\n    where: {userId: {_eq: $userId}, status: {_eq: Pending}}\n    orderBy: {startDate: ASC}\n  ) {\n    ...LeaveBasic\n  }\n}\n\nquery GetUserApprovedLeave($userId: uuid!) {\n  leave(\n    where: {userId: {_eq: $userId}, status: {_eq: Approved}}\n    orderBy: {startDate: DESC}\n  ) {\n    ...LeaveBasic\n  }\n}\n\nquery GetLeaveByType($leaveType: String!) {\n  leave(where: {leaveType: {_eq: $leaveType}}, orderBy: {startDate: DESC}) {\n    ...LeaveListItem\n  }\n}\n\nquery GetAnnualLeave {\n  leave(where: {leaveType: {_eq: \"Annual\"}}, orderBy: {startDate: DESC}) {\n    ...VacationLeave\n  }\n}\n\nquery GetSickLeave {\n  leave(where: {leaveType: {_eq: \"Sick\"}}, orderBy: {startDate: DESC}) {\n    ...SickLeave\n  }\n}\n\nquery GetUnpaidLeave {\n  leave(where: {leaveType: {_eq: \"Unpaid\"}}, orderBy: {startDate: DESC}) {\n    ...LeaveBasic\n  }\n}\n\nquery GetOtherLeave {\n  leave(where: {leaveType: {_eq: \"Other\"}}, orderBy: {startDate: DESC}) {\n    ...EmergencyLeave\n  }\n}\n\nquery GetLeaveByDateRange($startDate: date!, $endDate: date!) {\n  leave(\n    where: {_and: [{startDate: {_gte: $startDate}}, {endDate: {_lte: $endDate}}]}\n    orderBy: {startDate: ASC}\n  ) {\n    ...LeaveCalendarItem\n  }\n}\n\nquery GetLeaveInPeriod($startDate: date!, $endDate: date!) {\n  leave(\n    where: {_or: [{_and: [{startDate: {_gte: $startDate, _lte: $endDate}}]}, {_and: [{endDate: {_gte: $startDate, _lte: $endDate}}]}, {_and: [{startDate: {_lte: $startDate}}, {endDate: {_gte: $endDate}}]}]}\n    orderBy: {startDate: ASC}\n  ) {\n    ...LeaveCalendarItem\n  }\n}\n\nquery GetUpcomingLeave($limit: Int = 20) {\n  leave(\n    where: {startDate: {_gte: \"now()\"}, status: {_eq: Approved}}\n    orderBy: {startDate: ASC}\n    limit: $limit\n  ) {\n    ...LeaveListItem\n  }\n}\n\nquery GetCurrentLeave {\n  leave(\n    where: {startDate: {_lte: \"now()\"}, endDate: {_gte: \"now()\"}, status: {_eq: Approved}}\n    orderBy: {startDate: ASC}\n  ) {\n    ...LeaveWithUser\n  }\n}\n\nquery GetTeamLeave($managerUserId: uuid!) {\n  leave(\n    where: {leaveUser: {managerId: {_eq: $managerUserId}}}\n    orderBy: {startDate: DESC}\n  ) {\n    ...LeaveWithUser\n  }\n}\n\nquery GetTeamPendingLeave($managerUserId: uuid!) {\n  leave(\n    where: {leaveUser: {managerId: {_eq: $managerUserId}}, status: {_eq: Pending}}\n    orderBy: {startDate: ASC}\n  ) {\n    ...LeaveWithUser\n  }\n}\n\nquery GetLeaveDashboardStats {\n  totalLeave: leaveAggregate {\n    aggregate {\n      count\n    }\n  }\n  pendingLeave: leaveAggregate(where: {status: {_eq: Pending}}) {\n    aggregate {\n      count\n    }\n  }\n  approvedLeave: leaveAggregate(where: {status: {_eq: Approved}}) {\n    aggregate {\n      count\n    }\n  }\n  currentLeave: leaveAggregate(\n    where: {startDate: {_lte: \"now()\"}, endDate: {_gte: \"now()\"}, status: {_eq: Approved}}\n  ) {\n    aggregate {\n      count\n    }\n  }\n  upcomingLeave: leave(\n    where: {startDate: {_gte: \"now()\"}, status: {_eq: Approved}}\n    orderBy: {startDate: ASC}\n    limit: 5\n  ) {\n    ...LeaveDashboardCard\n  }\n}\n\nquery GetLeaveOverview {\n  leave(orderBy: {startDate: DESC}) {\n    ...LeaveListItem\n  }\n}\n\nquery SearchLeave($searchTerm: String!, $limit: Int = 50) {\n  leave(\n    where: {_or: [{reason: {_ilike: $searchTerm}}, {leaveType: {_ilike: $searchTerm}}, {leaveUser: {name: {_ilike: $searchTerm}}}]}\n    orderBy: {startDate: DESC}\n    limit: $limit\n  ) {\n    ...LeaveListItem\n  }\n}\n\nquery FilterLeaveByUser($userId: uuid!, $status: leave_status_enum) {\n  leave(\n    where: {userId: {_eq: $userId}, status: {_eq: $status}}\n    orderBy: {startDate: DESC}\n  ) {\n    ...LeaveBasic\n  }\n}\n\nquery FilterLeaveByDateAndType($startDate: date!, $endDate: date!, $leaveType: String) {\n  leave(\n    where: {_and: [{startDate: {_gte: $startDate, _lte: $endDate}}, {leaveType: {_eq: $leaveType}}]}\n    orderBy: {startDate: ASC}\n  ) {\n    ...LeaveListItem\n  }\n}\n\nquery GetLeaveForAudit($limit: Int = 100, $offset: Int = 0, $where: leaveBoolExp = {}) {\n  leave(limit: $limit, offset: $offset, where: $where, orderBy: {startDate: DESC}) {\n    ...LeaveForAudit\n  }\n}\n\nquery GetLeaveApprovalAudit($limit: Int = 50) {\n  leave(\n    where: {status: {_neq: Pending}}\n    orderBy: {startDate: DESC}\n    limit: $limit\n  ) {\n    ...LeaveApprovalAudit\n  }\n}\n\nquery GetUserLeaveAudit($userId: uuid!, $limit: Int = 50) {\n  leave(\n    where: {userId: {_eq: $userId}}\n    orderBy: {startDate: DESC}\n    limit: $limit\n  ) {\n    ...LeaveForAudit\n  }\n}\n\nquery GetLeavePaginated($limit: Int = 20, $offset: Int = 0, $where: leaveBoolExp = {}, $orderBy: [leaveOrderBy!] = [{startDate: DESC}]) {\n  leave(limit: $limit, offset: $offset, where: $where, orderBy: $orderBy) {\n    ...LeaveTableRow\n  }\n  leaveAggregate(where: $where) {\n    aggregate {\n      count\n    }\n  }\n}\n\nquery GetUserLeavePaginated($userId: uuid!, $limit: Int = 20, $offset: Int = 0, $where: leaveBoolExp = {}) {\n  leave(\n    where: {_and: [{userId: {_eq: $userId}}, $where]}\n    orderBy: {startDate: DESC}\n    limit: $limit\n    offset: $offset\n  ) {\n    ...LeaveTableRow\n  }\n  userLeaveAggregate: leaveAggregate(\n    where: {_and: [{userId: {_eq: $userId}}, $where]}\n  ) {\n    aggregate {\n      count\n    }\n  }\n}\n\nquery GetLeaveQuickList {\n  leave(orderBy: {startDate: DESC}) {\n    ...LeaveMinimal\n  }\n}\n\nquery GetMyLeaveQuickList($userId: uuid!) {\n  leave(where: {userId: {_eq: $userId}}, orderBy: {startDate: DESC}) {\n    ...LeaveMinimal\n  }\n}\n\nquery GetLeaveCalendar($startDate: date!, $endDate: date!) {\n  leave(\n    where: {_and: [{startDate: {_lte: $endDate}}, {endDate: {_gte: $startDate}}]}\n    orderBy: {startDate: ASC}\n  ) {\n    ...LeaveCalendarItem\n  }\n}\n\nquery GetTeamLeaveCalendar($managerUserId: uuid!, $startDate: date!, $endDate: date!) {\n  leave(\n    where: {_and: [{startDate: {_lte: $endDate}}, {endDate: {_gte: $startDate}}, {leaveUser: {managerId: {_eq: $managerUserId}}}]}\n    orderBy: {startDate: ASC}\n  ) {\n    ...LeaveCalendarItem\n  }\n}": typeof types.GetLeaveDocument,
    "subscription LeaveUpdates($userId: uuid!) {\n  leave(where: {userId: {_eq: $userId}}, orderBy: {startDate: DESC}) {\n    ...LeaveDetailed\n  }\n}\n\nsubscription UserLeaveUpdates($userId: uuid!) {\n  leave(where: {userId: {_eq: $userId}}, orderBy: {startDate: DESC}) {\n    ...LeaveWithUser\n  }\n}\n\nsubscription LeaveStatusUpdates($leaveId: uuid!) {\n  leave(where: {id: {_eq: $leaveId}}) {\n    id\n    status\n    leaveType\n    startDate\n    endDate\n    reason\n  }\n}\n\nsubscription PendingLeaveUpdates {\n  leave(where: {status: {_eq: Pending}}, orderBy: {startDate: ASC}) {\n    ...PendingLeave\n  }\n}\n\nsubscription ManagerPendingApprovalsUpdates($managerUserId: uuid!) {\n  leave(\n    where: {leaveUser: {managerId: {_eq: $managerUserId}}, status: {_eq: Pending}}\n    orderBy: {startDate: ASC}\n  ) {\n    ...PendingLeave\n  }\n}\n\nsubscription TeamLeaveUpdates($managerUserId: uuid!) {\n  leave(\n    where: {leaveUser: {managerId: {_eq: $managerUserId}}}\n    orderBy: {startDate: DESC}\n  ) {\n    ...LeaveWithUser\n  }\n}\n\nsubscription ActiveTeamLeaveUpdates($managerUserId: uuid!) {\n  leave(\n    where: {leaveUser: {managerId: {_eq: $managerUserId}}, status: {_eq: Approved}, startDate: {_lte: \"now()\"}, endDate: {_gte: \"now()\"}}\n    orderBy: {startDate: ASC}\n  ) {\n    ...LeaveWithUser\n  }\n}\n\nsubscription UpcomingTeamLeaveUpdates($managerUserId: uuid!) {\n  leave(\n    where: {leaveUser: {managerId: {_eq: $managerUserId}}, status: {_eq: Approved}, startDate: {_gte: \"now()\"}}\n    orderBy: {startDate: ASC}\n  ) {\n    ...LeaveWithUser\n  }\n}\n\nsubscription ActiveLeaveUpdates {\n  leave(\n    where: {status: {_eq: Approved}, startDate: {_lte: \"now()\"}, endDate: {_gte: \"now()\"}}\n    orderBy: {startDate: ASC}\n  ) {\n    ...LeaveWithUser\n  }\n}\n\nsubscription ApprovedLeaveUpdates {\n  leave(where: {status: {_eq: Approved}}, orderBy: {startDate: DESC}) {\n    ...ApprovedLeave\n  }\n}\n\nsubscription RejectedLeaveUpdates {\n  leave(where: {status: {_eq: Rejected}}, orderBy: {startDate: DESC}) {\n    ...RejectedLeave\n  }\n}\n\nsubscription UpcomingLeaveUpdates {\n  leave(\n    where: {status: {_eq: Approved}, startDate: {_gte: \"now()\"}}\n    orderBy: {startDate: ASC}\n  ) {\n    ...LeaveWithUser\n  }\n}\n\nsubscription SickLeaveUpdates {\n  leave(where: {leaveType: {_eq: \"Sick\"}}, orderBy: {startDate: DESC}) {\n    ...SickLeave\n  }\n}\n\nsubscription VacationLeaveUpdates {\n  leave(where: {leaveType: {_eq: \"Annual\"}}, orderBy: {startDate: DESC}) {\n    ...VacationLeave\n  }\n}\n\nsubscription EmergencyLeaveUpdates {\n  leave(where: {leaveType: {_eq: \"Other\"}}, orderBy: {startDate: DESC}) {\n    ...EmergencyLeave\n  }\n}\n\nsubscription LeaveCalendarUpdates($startDate: date!, $endDate: date!) {\n  leave(\n    where: {_or: [{startDate: {_gte: $startDate, _lte: $endDate}}, {endDate: {_gte: $startDate, _lte: $endDate}}, {_and: [{startDate: {_lte: $startDate}}, {endDate: {_gte: $endDate}}]}], status: {_eq: Approved}}\n    orderBy: {startDate: ASC}\n  ) {\n    ...LeaveCalendarItem\n  }\n}\n\nsubscription TeamLeaveCalendarUpdates($managerUserId: uuid!, $startDate: date!, $endDate: date!) {\n  leave(\n    where: {leaveUser: {managerId: {_eq: $managerUserId}}, _or: [{startDate: {_gte: $startDate, _lte: $endDate}}, {endDate: {_gte: $startDate, _lte: $endDate}}, {_and: [{startDate: {_lte: $startDate}}, {endDate: {_gte: $endDate}}]}], status: {_eq: Approved}}\n    orderBy: {startDate: ASC}\n  ) {\n    ...LeaveCalendarItem\n  }\n}\n\nsubscription LeaveTotalCountUpdates {\n  leaveAggregate {\n    aggregate {\n      count\n    }\n  }\n}\n\nsubscription PendingLeaveCountUpdates {\n  leaveAggregate(where: {status: {_eq: Pending}}) {\n    aggregate {\n      count\n    }\n  }\n}\n\nsubscription ApprovedLeaveCountUpdates {\n  leaveAggregate(where: {status: {_eq: Approved}}) {\n    aggregate {\n      count\n    }\n  }\n}\n\nsubscription ActiveLeaveCountUpdates {\n  leaveAggregate(\n    where: {status: {_eq: Approved}, startDate: {_lte: \"now()\"}, endDate: {_gte: \"now()\"}}\n  ) {\n    aggregate {\n      count\n    }\n  }\n}\n\nsubscription RecentLeaveActivityUpdates {\n  leave(orderBy: {startDate: DESC}, limit: 10) {\n    ...LeaveDashboardCard\n  }\n}\n\nsubscription SickLeaveCountUpdates {\n  leaveAggregate(where: {leaveType: {_eq: \"Sick\"}}) {\n    aggregate {\n      count\n    }\n  }\n}\n\nsubscription VacationLeaveCountUpdates {\n  leaveAggregate(where: {leaveType: {_eq: \"Annual\"}}) {\n    aggregate {\n      count\n    }\n  }\n}\n\nsubscription UnpaidLeaveCountUpdates {\n  leaveAggregate(where: {leaveType: {_eq: \"Unpaid\"}}) {\n    aggregate {\n      count\n    }\n  }\n}\n\nsubscription OtherLeaveCountUpdates {\n  leaveAggregate(where: {leaveType: {_eq: \"Other\"}}) {\n    aggregate {\n      count\n    }\n  }\n}\n\nsubscription TeamLeaveRequestsUpdates($userId: uuid!) {\n  leave(\n    where: {leaveUser: {managerId: {_eq: $userId}}, status: {_eq: Pending}}\n    orderBy: {startDate: DESC}\n  ) {\n    ...LeaveWithUser\n  }\n}\n\nsubscription MyLeaveRequestsUpdates($userId: uuid!) {\n  leave(where: {userId: {_eq: $userId}}, orderBy: {startDate: DESC}) {\n    ...LeaveBasic\n  }\n}\n\nsubscription EmergencyLeaveRequestsUpdates {\n  leave(\n    where: {leaveType: {_eq: \"Other\"}, status: {_eq: Pending}}\n    orderBy: {startDate: DESC}\n  ) {\n    ...EmergencyLeave\n  }\n}\n\nsubscription AllPendingRequestsUpdates {\n  leave(where: {status: {_eq: Pending}}, orderBy: {startDate: DESC}) {\n    ...LeaveWithUser\n  }\n}\n\nsubscription HRPendingLeaveUpdates {\n  leave(where: {status: {_eq: Pending}}, orderBy: {startDate: ASC}) {\n    ...LeaveWithUser\n  }\n}\n\nsubscription HRRecentApprovalsUpdates {\n  leave(where: {status: {_in: [Approved, Rejected]}}, orderBy: {startDate: DESC}) {\n    ...LeaveWithUser\n  }\n}\n\nsubscription LeaveAuditUpdates {\n  leave(orderBy: {startDate: DESC}) {\n    ...LeaveForAudit\n  }\n}\n\nsubscription LeaveRecentActivityUpdates {\n  leave(orderBy: {startDate: DESC}, limit: 5) {\n    id\n    status\n    leaveType\n    startDate\n    leaveUser {\n      name\n    }\n  }\n}\n\nsubscription LeaveSystemMetricsUpdates {\n  leaveAggregate {\n    aggregate {\n      count\n    }\n  }\n}\n\nsubscription NewLeaveRequestsUpdates {\n  leave(orderBy: {startDate: DESC}, limit: 10) {\n    ...LeaveWithUser\n  }\n}": typeof types.LeaveUpdatesDocument,
    "fragment UserCore on users {\n  id\n  name\n  email\n  username\n  role\n  isActive\n  isStaff\n  clerkUserId\n  createdAt\n  updatedAt\n}\n\nfragment UserBasic on users {\n  id\n  name\n  email\n  role\n  isActive\n}\n\nfragment UserWithManager on users {\n  ...UserCore\n  managerId\n  managerUser {\n    ...UserBasic\n  }\n}\n\nfragment RoleCore on roles {\n  id\n  name\n  description\n  displayName\n  priority\n  isSystemRole\n  createdAt\n}\n\nfragment PermissionCore on permissions {\n  id\n  action\n  description\n  resourceId\n  createdAt\n  updatedAt\n}\n\nfragment PermissionWithResource on permissions {\n  ...PermissionCore\n  relatedResource {\n    id\n    name\n    description\n  }\n}\n\nfragment ClientCore on clients {\n  id\n  name\n  contactEmail\n  contactPerson\n  contactPhone\n  active\n  createdAt\n  updatedAt\n}\n\nfragment ClientBasic on clients {\n  id\n  name\n  active\n}\n\nfragment ResourceCore on resources {\n  id\n  name\n  displayName\n  description\n  createdAt\n  updatedAt\n}\n\nfragment UserRoleCore on userRoles {\n  id\n  userId\n  roleId\n  createdAt\n  updatedAt\n}\n\nfragment RolePermissionCore on rolePermissions {\n  id\n  roleId\n  permissionId\n  conditions\n  createdAt\n  updatedAt\n}\n\nfragment AuditFields on auditLogs {\n  id\n  eventTime\n  action\n  resourceType\n  resourceId\n  userId\n  ipAddress\n  userAgent\n  success\n  userEmail\n  userRole\n}": typeof types.UserCoreFragmentDoc,
    "mutation PlaceholderMutation {\n  __typename\n}": typeof types.PlaceholderMutationDocument,
    "query GetDashboardStats {\n  clients_aggregate: clientsAggregate {\n    aggregate {\n      count\n    }\n  }\n  payrollsAggregate: payrollsAggregate {\n    aggregate {\n      count\n    }\n  }\n  active_payrolls: payrollsAggregate(where: {supersededDate: {_isNull: true}}) {\n    aggregate {\n      count\n    }\n  }\n  processing_queue: payrollsAggregate(\n    where: {supersededDate: {_isNull: true}, status: {_in: [\"Implementation\"]}}\n  ) {\n    aggregate {\n      count\n    }\n  }\n}\n\nquery GetSystemStats {\n  total_payrolls: payrollsAggregate {\n    aggregate {\n      count\n    }\n  }\n  total_clients: clientsAggregate {\n    aggregate {\n      count\n    }\n  }\n  total_users: usersAggregate {\n    aggregate {\n      count\n    }\n  }\n}\n\nquery GetUpcomingPayrollsShared($from_date: date!, $limit: Int = 10) {\n  payrolls(\n    where: {supersededDate: {_isNull: true}, payrollDates: {adjustedEftDate: {_gte: $from_date}}}\n    orderBy: {payrollDatesAggregate: {min: {adjustedEftDate: ASC}}}\n    limit: $limit\n  ) {\n    id\n    name\n    status\n    client {\n      id\n      name\n    }\n    payrollDates(\n      where: {adjustedEftDate: {_gte: $from_date}}\n      orderBy: {adjustedEftDate: ASC}\n      limit: 1\n    ) {\n      id\n      adjustedEftDate\n      processingDate\n    }\n  }\n}\n\nquery GetUnifiedDashboardData($from_date: date!, $limit: Int = 5) {\n  clients_aggregate: clientsAggregate {\n    aggregate {\n      count\n    }\n  }\n  payrollsAggregate: payrollsAggregate {\n    aggregate {\n      count\n    }\n  }\n  active_payrolls: payrollsAggregate(where: {supersededDate: {_isNull: true}}) {\n    aggregate {\n      count\n    }\n  }\n  processing_queue: payrollsAggregate(where: {supersededDate: {_isNull: true}}) {\n    aggregate {\n      count\n    }\n  }\n  active_users: usersAggregate(where: {isActive: {_eq: true}}) {\n    aggregate {\n      count\n    }\n  }\n  upcoming_payrolls: payrolls(\n    where: {supersededDate: {_isNull: true}, payrollDates: {adjustedEftDate: {_gte: $from_date}}}\n    orderBy: {payrollDatesAggregate: {min: {adjustedEftDate: ASC}}}\n    limit: $limit\n  ) {\n    id\n    name\n    status\n    employeeCount\n    client {\n      id\n      name\n    }\n    primaryConsultant {\n      id\n      name\n    }\n    payrollDates(\n      where: {adjustedEftDate: {_gte: $from_date}}\n      orderBy: {adjustedEftDate: ASC}\n      limit: 1\n    ) {\n      id\n      adjustedEftDate\n      processingDate\n    }\n  }\n  recent_payroll_updates: payrolls(\n    where: {supersededDate: {_isNull: true}}\n    orderBy: {updatedAt: DESC}\n    limit: 3\n  ) {\n    id\n    name\n    status\n    updatedAt\n    client {\n      name\n    }\n  }\n}\n\nquery GetDashboardStatsMinimal {\n  clientCount: clientsAggregate {\n    aggregate {\n      count\n    }\n  }\n  payrollCount: payrollsAggregate(where: {supersededDate: {_isNull: true}}) {\n    aggregate {\n      count\n    }\n  }\n  userCount: usersAggregate(where: {isActive: {_eq: true}}) {\n    aggregate {\n      count\n    }\n  }\n}\n\nquery GetUpcomingPayrollsMinimal($from_date: date!, $limit: Int = 5) {\n  payrolls(\n    where: {supersededDate: {_isNull: true}, payrollDates: {adjustedEftDate: {_gte: $from_date}}}\n    orderBy: {payrollDatesAggregate: {min: {adjustedEftDate: ASC}}}\n    limit: $limit\n  ) {\n    id\n    name\n    status\n    client {\n      name\n    }\n    nextDate: payrollDates(\n      where: {adjustedEftDate: {_gte: $from_date}}\n      orderBy: {adjustedEftDate: ASC}\n      limit: 1\n    ) {\n      adjustedEftDate\n    }\n  }\n}\n\nquery GetRecentActivityMinimal($limit: Int = 10) {\n  payrolls(\n    where: {supersededDate: {_isNull: true}}\n    orderBy: {updatedAt: DESC}\n    limit: $limit\n  ) {\n    id\n    name\n    status\n    updatedAt\n    client {\n      name\n    }\n  }\n}\n\nquery GetQuickStatsOnly {\n  totals: payrollsAggregate(where: {supersededDate: {_isNull: true}}) {\n    aggregate {\n      count\n    }\n  }\n  activeClients: clientsAggregate(where: {active: {_eq: true}}) {\n    aggregate {\n      count\n    }\n  }\n  activeUsers: usersAggregate(where: {isActive: {_eq: true}}) {\n    aggregate {\n      count\n    }\n  }\n}": typeof types.GetDashboardStatsDocument,
    "subscription ClientCountUpdates {\n  clientsAggregate(where: {active: {_eq: true}}) {\n    aggregate {\n      count\n    }\n  }\n}\n\nsubscription PayrollCountUpdates {\n  payrollsAggregate(where: {supersededDate: {_isNull: true}}) {\n    aggregate {\n      count\n    }\n  }\n}\n\nsubscription UserCountUpdates {\n  usersAggregate(where: {isActive: {_eq: true}}) {\n    aggregate {\n      count\n    }\n  }\n}\n\nsubscription RecentPayrollActivity {\n  payrolls(\n    where: {supersededDate: {_isNull: true}}\n    orderBy: {updatedAt: DESC}\n    limit: 5\n  ) {\n    id\n    name\n    status\n    updatedAt\n    client {\n      name\n    }\n  }\n}\n\nsubscription RecentUserActivity {\n  users(where: {isActive: {_eq: true}}, orderBy: {updatedAt: DESC}, limit: 3) {\n    id\n    name\n    role\n    updatedAt\n  }\n}\n\nsubscription CriticalPayrollNotifications {\n  payrolls(\n    where: {supersededDate: {_isNull: true}, status: {_in: [\"Issue\", \"Critical\"]}}\n    orderBy: {updatedAt: DESC}\n    limit: 10\n  ) {\n    id\n    name\n    status\n    client {\n      name\n    }\n    primaryConsultant {\n      name\n    }\n  }\n}\n\nsubscription UpcomingPayrollsUpdates($fromDate: date!) {\n  payrolls(\n    where: {supersededDate: {_isNull: true}, payrollDates: {adjustedEftDate: {_gte: $fromDate}}}\n    orderBy: {payrollDatesAggregate: {min: {adjustedEftDate: ASC}}}\n    limit: 5\n  ) {\n    id\n    name\n    status\n    client {\n      name\n    }\n    nextDate: payrollDates(\n      where: {adjustedEftDate: {_gte: $fromDate}}\n      orderBy: {adjustedEftDate: ASC}\n      limit: 1\n    ) {\n      adjustedEftDate\n    }\n  }\n}": typeof types.ClientCountUpdatesDocument,
};
const documents: Documents = {
    "fragment LeaveCore on leave {\n  id\n  leaveType\n  startDate\n  endDate\n  status\n  userId\n}\n\nfragment LeaveBasic on leave {\n  ...LeaveCore\n  reason\n}\n\nfragment LeaveDetailed on leave {\n  ...LeaveBasic\n}\n\nfragment LeaveWithUser on leave {\n  ...LeaveBasic\n  leaveUser {\n    id\n    name\n    email\n    role\n    managerUser {\n      id\n      name\n      email\n    }\n  }\n}\n\nfragment LeaveComplete on leave {\n  ...LeaveDetailed\n  leaveUser {\n    id\n    name\n    email\n    role\n    managerUser {\n      id\n      name\n      email\n    }\n  }\n}\n\nfragment LeaveSummary on leave {\n  id\n  leaveType\n  startDate\n  endDate\n  status\n  userId\n}\n\nfragment LeaveListItem on leave {\n  ...LeaveSummary\n  reason\n  leaveUser {\n    id\n    name\n  }\n}\n\nfragment LeaveTableRow on leave {\n  ...LeaveListItem\n}\n\nfragment LeaveDashboardCard on leave {\n  ...LeaveSummary\n  leaveUser {\n    id\n    name\n  }\n}\n\nfragment LeaveCalendarItem on leave {\n  id\n  leaveType\n  startDate\n  endDate\n  status\n  leaveUser {\n    id\n    name\n    role\n  }\n}\n\nfragment LeaveMinimal on leave {\n  id\n  leaveType\n  startDate\n  endDate\n  status\n  userId\n}\n\nfragment PendingLeave on leave {\n  ...LeaveWithUser\n}\n\nfragment ApprovedLeave on leave {\n  ...LeaveBasic\n}\n\nfragment RejectedLeave on leave {\n  ...LeaveBasic\n}\n\nfragment SickLeave on leave {\n  ...LeaveDetailed\n}\n\nfragment VacationLeave on leave {\n  ...LeaveBasic\n}\n\nfragment EmergencyLeave on leave {\n  ...LeaveDetailed\n}\n\nfragment LeaveForAudit on leave {\n  id\n  leaveType\n  startDate\n  endDate\n  status\n  userId\n}\n\nfragment LeaveApprovalAudit on leave {\n  id\n  leaveType\n  startDate\n  endDate\n  status\n  userId\n}": types.LeaveCoreFragmentDoc,
    "mutation CreateLeave($object: leaveInsertInput!) {\n  insertLeave(object: $object) {\n    ...LeaveDetailed\n    leaveUser {\n      id\n      name\n      email\n      managerUser {\n        id\n        name\n        email\n      }\n    }\n  }\n}\n\nmutation UpdateLeave($id: uuid!, $set: leaveSetInput!) {\n  updateLeaveById(pkColumns: {id: $id}, _set: $set) {\n    ...LeaveDetailed\n    leaveUser {\n      id\n      name\n      email\n    }\n  }\n}\n\nmutation DeleteLeave($id: uuid!) {\n  deleteLeaveById(id: $id) {\n    id\n    leaveType\n    startDate\n    endDate\n  }\n}\n\nmutation CreateAnnualLeave($userId: uuid!, $startDate: date!, $endDate: date!, $reason: String) {\n  insertLeave(\n    object: {userId: $userId, startDate: $startDate, endDate: $endDate, leaveType: \"Annual\", reason: $reason, status: Pending}\n  ) {\n    ...LeaveBasic\n    leaveUser {\n      id\n      name\n      email\n    }\n  }\n}\n\nmutation CreateSickLeave($userId: uuid!, $startDate: date!, $endDate: date!, $reason: String) {\n  insertLeave(\n    object: {userId: $userId, startDate: $startDate, endDate: $endDate, leaveType: \"Sick\", reason: $reason, status: Pending}\n  ) {\n    ...LeaveBasic\n    leaveUser {\n      id\n      name\n      email\n    }\n  }\n}\n\nmutation CreateUnpaidLeave($userId: uuid!, $startDate: date!, $endDate: date!, $reason: String) {\n  insertLeave(\n    object: {userId: $userId, startDate: $startDate, endDate: $endDate, leaveType: \"Unpaid\", reason: $reason, status: Pending}\n  ) {\n    ...LeaveBasic\n    leaveUser {\n      id\n      name\n      email\n    }\n  }\n}\n\nmutation CreateOtherLeave($userId: uuid!, $startDate: date!, $endDate: date!, $reason: String!) {\n  insertLeave(\n    object: {userId: $userId, startDate: $startDate, endDate: $endDate, leaveType: \"Other\", reason: $reason, status: Pending}\n  ) {\n    ...LeaveBasic\n    leaveUser {\n      id\n      name\n      email\n    }\n  }\n}\n\nmutation ApproveLeave($id: uuid!) {\n  updateLeaveById(pkColumns: {id: $id}, _set: {status: Approved}) {\n    ...LeaveBasic\n    leaveUser {\n      id\n      name\n      email\n    }\n  }\n}\n\nmutation RejectLeave($id: uuid!) {\n  updateLeaveById(pkColumns: {id: $id}, _set: {status: Rejected}) {\n    ...LeaveBasic\n    leaveUser {\n      id\n      name\n      email\n    }\n  }\n}\n\nmutation SetLeavePending($id: uuid!) {\n  updateLeaveById(pkColumns: {id: $id}, _set: {status: Pending}) {\n    ...LeaveBasic\n  }\n}\n\nmutation BulkApproveLeave($leaveIds: [uuid!]!) {\n  bulkUpdateLeave(where: {id: {_in: $leaveIds}}, _set: {status: Approved}) {\n    returning {\n      ...LeaveBasic\n    }\n    affectedRows\n  }\n}\n\nmutation BulkRejectLeave($leaveIds: [uuid!]!) {\n  bulkUpdateLeave(where: {id: {_in: $leaveIds}}, _set: {status: Rejected}) {\n    returning {\n      ...LeaveBasic\n    }\n    affectedRows\n  }\n}\n\nmutation BulkDeleteLeave($leaveIds: [uuid!]!) {\n  bulkDeleteLeave(where: {id: {_in: $leaveIds}}) {\n    affectedRows\n    returning {\n      id\n      leaveType\n      startDate\n      endDate\n    }\n  }\n}\n\nmutation UpdateLeaveDetails($id: uuid!, $startDate: date, $endDate: date, $leaveType: String, $reason: String) {\n  updateLeaveById(\n    pkColumns: {id: $id}\n    _set: {startDate: $startDate, endDate: $endDate, leaveType: $leaveType, reason: $reason}\n  ) {\n    ...LeaveBasic\n    leaveUser {\n      id\n      name\n      email\n    }\n  }\n}\n\nmutation UpdateLeaveDates($id: uuid!, $startDate: date!, $endDate: date!) {\n  updateLeaveById(\n    pkColumns: {id: $id}\n    _set: {startDate: $startDate, endDate: $endDate}\n  ) {\n    ...LeaveBasic\n  }\n}\n\nmutation UpdateLeaveType($id: uuid!, $leaveType: String!) {\n  updateLeaveById(pkColumns: {id: $id}, _set: {leaveType: $leaveType}) {\n    ...LeaveBasic\n  }\n}\n\nmutation UpdateLeaveReason($id: uuid!, $reason: String) {\n  updateLeaveById(pkColumns: {id: $id}, _set: {reason: $reason}) {\n    ...LeaveBasic\n  }\n}\n\nmutation CancelLeave($id: uuid!) {\n  deleteLeaveById(id: $id) {\n    id\n    leaveType\n    startDate\n    endDate\n    leaveUser {\n      id\n      name\n      email\n    }\n  }\n}\n\nmutation TransferLeave($id: uuid!, $newUserId: uuid!) {\n  updateLeaveById(pkColumns: {id: $id}, _set: {userId: $newUserId}) {\n    ...LeaveBasic\n    leaveUser {\n      id\n      name\n      email\n    }\n  }\n}\n\nmutation CreateMyLeave($startDate: date!, $endDate: date!, $leaveType: String!, $reason: String) {\n  insertLeave(\n    object: {startDate: $startDate, endDate: $endDate, leaveType: $leaveType, reason: $reason, status: Pending}\n  ) {\n    ...LeaveBasic\n    leaveUser {\n      id\n      name\n      email\n    }\n  }\n}\n\nmutation UpdateMyLeave($id: uuid!, $startDate: date, $endDate: date, $leaveType: String, $reason: String) {\n  updateLeaveById(\n    pkColumns: {id: $id}\n    _set: {startDate: $startDate, endDate: $endDate, leaveType: $leaveType, reason: $reason}\n  ) {\n    ...LeaveBasic\n  }\n}\n\nmutation CancelMyLeave($id: uuid!) {\n  deleteLeaveById(id: $id) {\n    id\n    leaveType\n    startDate\n    endDate\n  }\n}": types.CreateLeaveDocument,
    "query GetLeave($limit: Int = 50, $offset: Int = 0, $where: leaveBoolExp) {\n  leave(limit: $limit, offset: $offset, where: $where, orderBy: {startDate: DESC}) {\n    ...LeaveListItem\n  }\n  leaveAggregate(where: $where) {\n    aggregate {\n      count\n    }\n  }\n}\n\nquery GetLeaveById($id: uuid!) {\n  leaveById(id: $id) {\n    ...LeaveComplete\n  }\n}\n\nquery GetLeaveBasic($id: uuid!) {\n  leaveById(id: $id) {\n    ...LeaveBasic\n  }\n}\n\nquery GetUserLeave($userId: uuid!) {\n  leave(where: {userId: {_eq: $userId}}, orderBy: {startDate: DESC}) {\n    ...LeaveWithUser\n  }\n}\n\nquery GetMyLeave($userId: uuid!) {\n  leave(where: {userId: {_eq: $userId}}, orderBy: {startDate: DESC}) {\n    ...LeaveDetailed\n  }\n}\n\nquery GetUserLeaveById($id: uuid!, $userId: uuid!) {\n  leaveById(id: $id) {\n    ...LeaveWithUser\n  }\n}\n\nquery GetUserLeaveHistory($userId: uuid!, $limit: Int = 100) {\n  leave(\n    where: {userId: {_eq: $userId}}\n    orderBy: {startDate: DESC}\n    limit: $limit\n  ) {\n    ...LeaveListItem\n  }\n}\n\nquery GetPendingLeave {\n  leave(where: {status: {_eq: Pending}}, orderBy: {startDate: ASC}) {\n    ...PendingLeave\n  }\n}\n\nquery GetApprovedLeave {\n  leave(where: {status: {_eq: Approved}}, orderBy: {startDate: DESC}) {\n    ...ApprovedLeave\n  }\n}\n\nquery GetRejectedLeave {\n  leave(where: {status: {_eq: Rejected}}, orderBy: {startDate: DESC}) {\n    ...RejectedLeave\n  }\n}\n\nquery GetLeaveByStatus($status: leave_status_enum!) {\n  leave(where: {status: {_eq: $status}}, orderBy: {startDate: DESC}) {\n    ...LeaveBasic\n  }\n}\n\nquery GetUserPendingLeave($userId: uuid!) {\n  leave(\n    where: {userId: {_eq: $userId}, status: {_eq: Pending}}\n    orderBy: {startDate: ASC}\n  ) {\n    ...LeaveBasic\n  }\n}\n\nquery GetUserApprovedLeave($userId: uuid!) {\n  leave(\n    where: {userId: {_eq: $userId}, status: {_eq: Approved}}\n    orderBy: {startDate: DESC}\n  ) {\n    ...LeaveBasic\n  }\n}\n\nquery GetLeaveByType($leaveType: String!) {\n  leave(where: {leaveType: {_eq: $leaveType}}, orderBy: {startDate: DESC}) {\n    ...LeaveListItem\n  }\n}\n\nquery GetAnnualLeave {\n  leave(where: {leaveType: {_eq: \"Annual\"}}, orderBy: {startDate: DESC}) {\n    ...VacationLeave\n  }\n}\n\nquery GetSickLeave {\n  leave(where: {leaveType: {_eq: \"Sick\"}}, orderBy: {startDate: DESC}) {\n    ...SickLeave\n  }\n}\n\nquery GetUnpaidLeave {\n  leave(where: {leaveType: {_eq: \"Unpaid\"}}, orderBy: {startDate: DESC}) {\n    ...LeaveBasic\n  }\n}\n\nquery GetOtherLeave {\n  leave(where: {leaveType: {_eq: \"Other\"}}, orderBy: {startDate: DESC}) {\n    ...EmergencyLeave\n  }\n}\n\nquery GetLeaveByDateRange($startDate: date!, $endDate: date!) {\n  leave(\n    where: {_and: [{startDate: {_gte: $startDate}}, {endDate: {_lte: $endDate}}]}\n    orderBy: {startDate: ASC}\n  ) {\n    ...LeaveCalendarItem\n  }\n}\n\nquery GetLeaveInPeriod($startDate: date!, $endDate: date!) {\n  leave(\n    where: {_or: [{_and: [{startDate: {_gte: $startDate, _lte: $endDate}}]}, {_and: [{endDate: {_gte: $startDate, _lte: $endDate}}]}, {_and: [{startDate: {_lte: $startDate}}, {endDate: {_gte: $endDate}}]}]}\n    orderBy: {startDate: ASC}\n  ) {\n    ...LeaveCalendarItem\n  }\n}\n\nquery GetUpcomingLeave($limit: Int = 20) {\n  leave(\n    where: {startDate: {_gte: \"now()\"}, status: {_eq: Approved}}\n    orderBy: {startDate: ASC}\n    limit: $limit\n  ) {\n    ...LeaveListItem\n  }\n}\n\nquery GetCurrentLeave {\n  leave(\n    where: {startDate: {_lte: \"now()\"}, endDate: {_gte: \"now()\"}, status: {_eq: Approved}}\n    orderBy: {startDate: ASC}\n  ) {\n    ...LeaveWithUser\n  }\n}\n\nquery GetTeamLeave($managerUserId: uuid!) {\n  leave(\n    where: {leaveUser: {managerId: {_eq: $managerUserId}}}\n    orderBy: {startDate: DESC}\n  ) {\n    ...LeaveWithUser\n  }\n}\n\nquery GetTeamPendingLeave($managerUserId: uuid!) {\n  leave(\n    where: {leaveUser: {managerId: {_eq: $managerUserId}}, status: {_eq: Pending}}\n    orderBy: {startDate: ASC}\n  ) {\n    ...LeaveWithUser\n  }\n}\n\nquery GetLeaveDashboardStats {\n  totalLeave: leaveAggregate {\n    aggregate {\n      count\n    }\n  }\n  pendingLeave: leaveAggregate(where: {status: {_eq: Pending}}) {\n    aggregate {\n      count\n    }\n  }\n  approvedLeave: leaveAggregate(where: {status: {_eq: Approved}}) {\n    aggregate {\n      count\n    }\n  }\n  currentLeave: leaveAggregate(\n    where: {startDate: {_lte: \"now()\"}, endDate: {_gte: \"now()\"}, status: {_eq: Approved}}\n  ) {\n    aggregate {\n      count\n    }\n  }\n  upcomingLeave: leave(\n    where: {startDate: {_gte: \"now()\"}, status: {_eq: Approved}}\n    orderBy: {startDate: ASC}\n    limit: 5\n  ) {\n    ...LeaveDashboardCard\n  }\n}\n\nquery GetLeaveOverview {\n  leave(orderBy: {startDate: DESC}) {\n    ...LeaveListItem\n  }\n}\n\nquery SearchLeave($searchTerm: String!, $limit: Int = 50) {\n  leave(\n    where: {_or: [{reason: {_ilike: $searchTerm}}, {leaveType: {_ilike: $searchTerm}}, {leaveUser: {name: {_ilike: $searchTerm}}}]}\n    orderBy: {startDate: DESC}\n    limit: $limit\n  ) {\n    ...LeaveListItem\n  }\n}\n\nquery FilterLeaveByUser($userId: uuid!, $status: leave_status_enum) {\n  leave(\n    where: {userId: {_eq: $userId}, status: {_eq: $status}}\n    orderBy: {startDate: DESC}\n  ) {\n    ...LeaveBasic\n  }\n}\n\nquery FilterLeaveByDateAndType($startDate: date!, $endDate: date!, $leaveType: String) {\n  leave(\n    where: {_and: [{startDate: {_gte: $startDate, _lte: $endDate}}, {leaveType: {_eq: $leaveType}}]}\n    orderBy: {startDate: ASC}\n  ) {\n    ...LeaveListItem\n  }\n}\n\nquery GetLeaveForAudit($limit: Int = 100, $offset: Int = 0, $where: leaveBoolExp = {}) {\n  leave(limit: $limit, offset: $offset, where: $where, orderBy: {startDate: DESC}) {\n    ...LeaveForAudit\n  }\n}\n\nquery GetLeaveApprovalAudit($limit: Int = 50) {\n  leave(\n    where: {status: {_neq: Pending}}\n    orderBy: {startDate: DESC}\n    limit: $limit\n  ) {\n    ...LeaveApprovalAudit\n  }\n}\n\nquery GetUserLeaveAudit($userId: uuid!, $limit: Int = 50) {\n  leave(\n    where: {userId: {_eq: $userId}}\n    orderBy: {startDate: DESC}\n    limit: $limit\n  ) {\n    ...LeaveForAudit\n  }\n}\n\nquery GetLeavePaginated($limit: Int = 20, $offset: Int = 0, $where: leaveBoolExp = {}, $orderBy: [leaveOrderBy!] = [{startDate: DESC}]) {\n  leave(limit: $limit, offset: $offset, where: $where, orderBy: $orderBy) {\n    ...LeaveTableRow\n  }\n  leaveAggregate(where: $where) {\n    aggregate {\n      count\n    }\n  }\n}\n\nquery GetUserLeavePaginated($userId: uuid!, $limit: Int = 20, $offset: Int = 0, $where: leaveBoolExp = {}) {\n  leave(\n    where: {_and: [{userId: {_eq: $userId}}, $where]}\n    orderBy: {startDate: DESC}\n    limit: $limit\n    offset: $offset\n  ) {\n    ...LeaveTableRow\n  }\n  userLeaveAggregate: leaveAggregate(\n    where: {_and: [{userId: {_eq: $userId}}, $where]}\n  ) {\n    aggregate {\n      count\n    }\n  }\n}\n\nquery GetLeaveQuickList {\n  leave(orderBy: {startDate: DESC}) {\n    ...LeaveMinimal\n  }\n}\n\nquery GetMyLeaveQuickList($userId: uuid!) {\n  leave(where: {userId: {_eq: $userId}}, orderBy: {startDate: DESC}) {\n    ...LeaveMinimal\n  }\n}\n\nquery GetLeaveCalendar($startDate: date!, $endDate: date!) {\n  leave(\n    where: {_and: [{startDate: {_lte: $endDate}}, {endDate: {_gte: $startDate}}]}\n    orderBy: {startDate: ASC}\n  ) {\n    ...LeaveCalendarItem\n  }\n}\n\nquery GetTeamLeaveCalendar($managerUserId: uuid!, $startDate: date!, $endDate: date!) {\n  leave(\n    where: {_and: [{startDate: {_lte: $endDate}}, {endDate: {_gte: $startDate}}, {leaveUser: {managerId: {_eq: $managerUserId}}}]}\n    orderBy: {startDate: ASC}\n  ) {\n    ...LeaveCalendarItem\n  }\n}": types.GetLeaveDocument,
    "subscription LeaveUpdates($userId: uuid!) {\n  leave(where: {userId: {_eq: $userId}}, orderBy: {startDate: DESC}) {\n    ...LeaveDetailed\n  }\n}\n\nsubscription UserLeaveUpdates($userId: uuid!) {\n  leave(where: {userId: {_eq: $userId}}, orderBy: {startDate: DESC}) {\n    ...LeaveWithUser\n  }\n}\n\nsubscription LeaveStatusUpdates($leaveId: uuid!) {\n  leave(where: {id: {_eq: $leaveId}}) {\n    id\n    status\n    leaveType\n    startDate\n    endDate\n    reason\n  }\n}\n\nsubscription PendingLeaveUpdates {\n  leave(where: {status: {_eq: Pending}}, orderBy: {startDate: ASC}) {\n    ...PendingLeave\n  }\n}\n\nsubscription ManagerPendingApprovalsUpdates($managerUserId: uuid!) {\n  leave(\n    where: {leaveUser: {managerId: {_eq: $managerUserId}}, status: {_eq: Pending}}\n    orderBy: {startDate: ASC}\n  ) {\n    ...PendingLeave\n  }\n}\n\nsubscription TeamLeaveUpdates($managerUserId: uuid!) {\n  leave(\n    where: {leaveUser: {managerId: {_eq: $managerUserId}}}\n    orderBy: {startDate: DESC}\n  ) {\n    ...LeaveWithUser\n  }\n}\n\nsubscription ActiveTeamLeaveUpdates($managerUserId: uuid!) {\n  leave(\n    where: {leaveUser: {managerId: {_eq: $managerUserId}}, status: {_eq: Approved}, startDate: {_lte: \"now()\"}, endDate: {_gte: \"now()\"}}\n    orderBy: {startDate: ASC}\n  ) {\n    ...LeaveWithUser\n  }\n}\n\nsubscription UpcomingTeamLeaveUpdates($managerUserId: uuid!) {\n  leave(\n    where: {leaveUser: {managerId: {_eq: $managerUserId}}, status: {_eq: Approved}, startDate: {_gte: \"now()\"}}\n    orderBy: {startDate: ASC}\n  ) {\n    ...LeaveWithUser\n  }\n}\n\nsubscription ActiveLeaveUpdates {\n  leave(\n    where: {status: {_eq: Approved}, startDate: {_lte: \"now()\"}, endDate: {_gte: \"now()\"}}\n    orderBy: {startDate: ASC}\n  ) {\n    ...LeaveWithUser\n  }\n}\n\nsubscription ApprovedLeaveUpdates {\n  leave(where: {status: {_eq: Approved}}, orderBy: {startDate: DESC}) {\n    ...ApprovedLeave\n  }\n}\n\nsubscription RejectedLeaveUpdates {\n  leave(where: {status: {_eq: Rejected}}, orderBy: {startDate: DESC}) {\n    ...RejectedLeave\n  }\n}\n\nsubscription UpcomingLeaveUpdates {\n  leave(\n    where: {status: {_eq: Approved}, startDate: {_gte: \"now()\"}}\n    orderBy: {startDate: ASC}\n  ) {\n    ...LeaveWithUser\n  }\n}\n\nsubscription SickLeaveUpdates {\n  leave(where: {leaveType: {_eq: \"Sick\"}}, orderBy: {startDate: DESC}) {\n    ...SickLeave\n  }\n}\n\nsubscription VacationLeaveUpdates {\n  leave(where: {leaveType: {_eq: \"Annual\"}}, orderBy: {startDate: DESC}) {\n    ...VacationLeave\n  }\n}\n\nsubscription EmergencyLeaveUpdates {\n  leave(where: {leaveType: {_eq: \"Other\"}}, orderBy: {startDate: DESC}) {\n    ...EmergencyLeave\n  }\n}\n\nsubscription LeaveCalendarUpdates($startDate: date!, $endDate: date!) {\n  leave(\n    where: {_or: [{startDate: {_gte: $startDate, _lte: $endDate}}, {endDate: {_gte: $startDate, _lte: $endDate}}, {_and: [{startDate: {_lte: $startDate}}, {endDate: {_gte: $endDate}}]}], status: {_eq: Approved}}\n    orderBy: {startDate: ASC}\n  ) {\n    ...LeaveCalendarItem\n  }\n}\n\nsubscription TeamLeaveCalendarUpdates($managerUserId: uuid!, $startDate: date!, $endDate: date!) {\n  leave(\n    where: {leaveUser: {managerId: {_eq: $managerUserId}}, _or: [{startDate: {_gte: $startDate, _lte: $endDate}}, {endDate: {_gte: $startDate, _lte: $endDate}}, {_and: [{startDate: {_lte: $startDate}}, {endDate: {_gte: $endDate}}]}], status: {_eq: Approved}}\n    orderBy: {startDate: ASC}\n  ) {\n    ...LeaveCalendarItem\n  }\n}\n\nsubscription LeaveTotalCountUpdates {\n  leaveAggregate {\n    aggregate {\n      count\n    }\n  }\n}\n\nsubscription PendingLeaveCountUpdates {\n  leaveAggregate(where: {status: {_eq: Pending}}) {\n    aggregate {\n      count\n    }\n  }\n}\n\nsubscription ApprovedLeaveCountUpdates {\n  leaveAggregate(where: {status: {_eq: Approved}}) {\n    aggregate {\n      count\n    }\n  }\n}\n\nsubscription ActiveLeaveCountUpdates {\n  leaveAggregate(\n    where: {status: {_eq: Approved}, startDate: {_lte: \"now()\"}, endDate: {_gte: \"now()\"}}\n  ) {\n    aggregate {\n      count\n    }\n  }\n}\n\nsubscription RecentLeaveActivityUpdates {\n  leave(orderBy: {startDate: DESC}, limit: 10) {\n    ...LeaveDashboardCard\n  }\n}\n\nsubscription SickLeaveCountUpdates {\n  leaveAggregate(where: {leaveType: {_eq: \"Sick\"}}) {\n    aggregate {\n      count\n    }\n  }\n}\n\nsubscription VacationLeaveCountUpdates {\n  leaveAggregate(where: {leaveType: {_eq: \"Annual\"}}) {\n    aggregate {\n      count\n    }\n  }\n}\n\nsubscription UnpaidLeaveCountUpdates {\n  leaveAggregate(where: {leaveType: {_eq: \"Unpaid\"}}) {\n    aggregate {\n      count\n    }\n  }\n}\n\nsubscription OtherLeaveCountUpdates {\n  leaveAggregate(where: {leaveType: {_eq: \"Other\"}}) {\n    aggregate {\n      count\n    }\n  }\n}\n\nsubscription TeamLeaveRequestsUpdates($userId: uuid!) {\n  leave(\n    where: {leaveUser: {managerId: {_eq: $userId}}, status: {_eq: Pending}}\n    orderBy: {startDate: DESC}\n  ) {\n    ...LeaveWithUser\n  }\n}\n\nsubscription MyLeaveRequestsUpdates($userId: uuid!) {\n  leave(where: {userId: {_eq: $userId}}, orderBy: {startDate: DESC}) {\n    ...LeaveBasic\n  }\n}\n\nsubscription EmergencyLeaveRequestsUpdates {\n  leave(\n    where: {leaveType: {_eq: \"Other\"}, status: {_eq: Pending}}\n    orderBy: {startDate: DESC}\n  ) {\n    ...EmergencyLeave\n  }\n}\n\nsubscription AllPendingRequestsUpdates {\n  leave(where: {status: {_eq: Pending}}, orderBy: {startDate: DESC}) {\n    ...LeaveWithUser\n  }\n}\n\nsubscription HRPendingLeaveUpdates {\n  leave(where: {status: {_eq: Pending}}, orderBy: {startDate: ASC}) {\n    ...LeaveWithUser\n  }\n}\n\nsubscription HRRecentApprovalsUpdates {\n  leave(where: {status: {_in: [Approved, Rejected]}}, orderBy: {startDate: DESC}) {\n    ...LeaveWithUser\n  }\n}\n\nsubscription LeaveAuditUpdates {\n  leave(orderBy: {startDate: DESC}) {\n    ...LeaveForAudit\n  }\n}\n\nsubscription LeaveRecentActivityUpdates {\n  leave(orderBy: {startDate: DESC}, limit: 5) {\n    id\n    status\n    leaveType\n    startDate\n    leaveUser {\n      name\n    }\n  }\n}\n\nsubscription LeaveSystemMetricsUpdates {\n  leaveAggregate {\n    aggregate {\n      count\n    }\n  }\n}\n\nsubscription NewLeaveRequestsUpdates {\n  leave(orderBy: {startDate: DESC}, limit: 10) {\n    ...LeaveWithUser\n  }\n}": types.LeaveUpdatesDocument,
    "fragment UserCore on users {\n  id\n  name\n  email\n  username\n  role\n  isActive\n  isStaff\n  clerkUserId\n  createdAt\n  updatedAt\n}\n\nfragment UserBasic on users {\n  id\n  name\n  email\n  role\n  isActive\n}\n\nfragment UserWithManager on users {\n  ...UserCore\n  managerId\n  managerUser {\n    ...UserBasic\n  }\n}\n\nfragment RoleCore on roles {\n  id\n  name\n  description\n  displayName\n  priority\n  isSystemRole\n  createdAt\n}\n\nfragment PermissionCore on permissions {\n  id\n  action\n  description\n  resourceId\n  createdAt\n  updatedAt\n}\n\nfragment PermissionWithResource on permissions {\n  ...PermissionCore\n  relatedResource {\n    id\n    name\n    description\n  }\n}\n\nfragment ClientCore on clients {\n  id\n  name\n  contactEmail\n  contactPerson\n  contactPhone\n  active\n  createdAt\n  updatedAt\n}\n\nfragment ClientBasic on clients {\n  id\n  name\n  active\n}\n\nfragment ResourceCore on resources {\n  id\n  name\n  displayName\n  description\n  createdAt\n  updatedAt\n}\n\nfragment UserRoleCore on userRoles {\n  id\n  userId\n  roleId\n  createdAt\n  updatedAt\n}\n\nfragment RolePermissionCore on rolePermissions {\n  id\n  roleId\n  permissionId\n  conditions\n  createdAt\n  updatedAt\n}\n\nfragment AuditFields on auditLogs {\n  id\n  eventTime\n  action\n  resourceType\n  resourceId\n  userId\n  ipAddress\n  userAgent\n  success\n  userEmail\n  userRole\n}": types.UserCoreFragmentDoc,
    "mutation PlaceholderMutation {\n  __typename\n}": types.PlaceholderMutationDocument,
    "query GetDashboardStats {\n  clients_aggregate: clientsAggregate {\n    aggregate {\n      count\n    }\n  }\n  payrollsAggregate: payrollsAggregate {\n    aggregate {\n      count\n    }\n  }\n  active_payrolls: payrollsAggregate(where: {supersededDate: {_isNull: true}}) {\n    aggregate {\n      count\n    }\n  }\n  processing_queue: payrollsAggregate(\n    where: {supersededDate: {_isNull: true}, status: {_in: [\"Implementation\"]}}\n  ) {\n    aggregate {\n      count\n    }\n  }\n}\n\nquery GetSystemStats {\n  total_payrolls: payrollsAggregate {\n    aggregate {\n      count\n    }\n  }\n  total_clients: clientsAggregate {\n    aggregate {\n      count\n    }\n  }\n  total_users: usersAggregate {\n    aggregate {\n      count\n    }\n  }\n}\n\nquery GetUpcomingPayrollsShared($from_date: date!, $limit: Int = 10) {\n  payrolls(\n    where: {supersededDate: {_isNull: true}, payrollDates: {adjustedEftDate: {_gte: $from_date}}}\n    orderBy: {payrollDatesAggregate: {min: {adjustedEftDate: ASC}}}\n    limit: $limit\n  ) {\n    id\n    name\n    status\n    client {\n      id\n      name\n    }\n    payrollDates(\n      where: {adjustedEftDate: {_gte: $from_date}}\n      orderBy: {adjustedEftDate: ASC}\n      limit: 1\n    ) {\n      id\n      adjustedEftDate\n      processingDate\n    }\n  }\n}\n\nquery GetUnifiedDashboardData($from_date: date!, $limit: Int = 5) {\n  clients_aggregate: clientsAggregate {\n    aggregate {\n      count\n    }\n  }\n  payrollsAggregate: payrollsAggregate {\n    aggregate {\n      count\n    }\n  }\n  active_payrolls: payrollsAggregate(where: {supersededDate: {_isNull: true}}) {\n    aggregate {\n      count\n    }\n  }\n  processing_queue: payrollsAggregate(where: {supersededDate: {_isNull: true}}) {\n    aggregate {\n      count\n    }\n  }\n  active_users: usersAggregate(where: {isActive: {_eq: true}}) {\n    aggregate {\n      count\n    }\n  }\n  upcoming_payrolls: payrolls(\n    where: {supersededDate: {_isNull: true}, payrollDates: {adjustedEftDate: {_gte: $from_date}}}\n    orderBy: {payrollDatesAggregate: {min: {adjustedEftDate: ASC}}}\n    limit: $limit\n  ) {\n    id\n    name\n    status\n    employeeCount\n    client {\n      id\n      name\n    }\n    primaryConsultant {\n      id\n      name\n    }\n    payrollDates(\n      where: {adjustedEftDate: {_gte: $from_date}}\n      orderBy: {adjustedEftDate: ASC}\n      limit: 1\n    ) {\n      id\n      adjustedEftDate\n      processingDate\n    }\n  }\n  recent_payroll_updates: payrolls(\n    where: {supersededDate: {_isNull: true}}\n    orderBy: {updatedAt: DESC}\n    limit: 3\n  ) {\n    id\n    name\n    status\n    updatedAt\n    client {\n      name\n    }\n  }\n}\n\nquery GetDashboardStatsMinimal {\n  clientCount: clientsAggregate {\n    aggregate {\n      count\n    }\n  }\n  payrollCount: payrollsAggregate(where: {supersededDate: {_isNull: true}}) {\n    aggregate {\n      count\n    }\n  }\n  userCount: usersAggregate(where: {isActive: {_eq: true}}) {\n    aggregate {\n      count\n    }\n  }\n}\n\nquery GetUpcomingPayrollsMinimal($from_date: date!, $limit: Int = 5) {\n  payrolls(\n    where: {supersededDate: {_isNull: true}, payrollDates: {adjustedEftDate: {_gte: $from_date}}}\n    orderBy: {payrollDatesAggregate: {min: {adjustedEftDate: ASC}}}\n    limit: $limit\n  ) {\n    id\n    name\n    status\n    client {\n      name\n    }\n    nextDate: payrollDates(\n      where: {adjustedEftDate: {_gte: $from_date}}\n      orderBy: {adjustedEftDate: ASC}\n      limit: 1\n    ) {\n      adjustedEftDate\n    }\n  }\n}\n\nquery GetRecentActivityMinimal($limit: Int = 10) {\n  payrolls(\n    where: {supersededDate: {_isNull: true}}\n    orderBy: {updatedAt: DESC}\n    limit: $limit\n  ) {\n    id\n    name\n    status\n    updatedAt\n    client {\n      name\n    }\n  }\n}\n\nquery GetQuickStatsOnly {\n  totals: payrollsAggregate(where: {supersededDate: {_isNull: true}}) {\n    aggregate {\n      count\n    }\n  }\n  activeClients: clientsAggregate(where: {active: {_eq: true}}) {\n    aggregate {\n      count\n    }\n  }\n  activeUsers: usersAggregate(where: {isActive: {_eq: true}}) {\n    aggregate {\n      count\n    }\n  }\n}": types.GetDashboardStatsDocument,
    "subscription ClientCountUpdates {\n  clientsAggregate(where: {active: {_eq: true}}) {\n    aggregate {\n      count\n    }\n  }\n}\n\nsubscription PayrollCountUpdates {\n  payrollsAggregate(where: {supersededDate: {_isNull: true}}) {\n    aggregate {\n      count\n    }\n  }\n}\n\nsubscription UserCountUpdates {\n  usersAggregate(where: {isActive: {_eq: true}}) {\n    aggregate {\n      count\n    }\n  }\n}\n\nsubscription RecentPayrollActivity {\n  payrolls(\n    where: {supersededDate: {_isNull: true}}\n    orderBy: {updatedAt: DESC}\n    limit: 5\n  ) {\n    id\n    name\n    status\n    updatedAt\n    client {\n      name\n    }\n  }\n}\n\nsubscription RecentUserActivity {\n  users(where: {isActive: {_eq: true}}, orderBy: {updatedAt: DESC}, limit: 3) {\n    id\n    name\n    role\n    updatedAt\n  }\n}\n\nsubscription CriticalPayrollNotifications {\n  payrolls(\n    where: {supersededDate: {_isNull: true}, status: {_in: [\"Issue\", \"Critical\"]}}\n    orderBy: {updatedAt: DESC}\n    limit: 10\n  ) {\n    id\n    name\n    status\n    client {\n      name\n    }\n    primaryConsultant {\n      name\n    }\n  }\n}\n\nsubscription UpcomingPayrollsUpdates($fromDate: date!) {\n  payrolls(\n    where: {supersededDate: {_isNull: true}, payrollDates: {adjustedEftDate: {_gte: $fromDate}}}\n    orderBy: {payrollDatesAggregate: {min: {adjustedEftDate: ASC}}}\n    limit: 5\n  ) {\n    id\n    name\n    status\n    client {\n      name\n    }\n    nextDate: payrollDates(\n      where: {adjustedEftDate: {_gte: $fromDate}}\n      orderBy: {adjustedEftDate: ASC}\n      limit: 1\n    ) {\n      adjustedEftDate\n    }\n  }\n}": types.ClientCountUpdatesDocument,
};

/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 *
 *
 * @example
 * ```ts
 * const query = gql(`query GetUser($id: ID!) { user(id: $id) { name } }`);
 * ```
 *
 * The query argument is unknown!
 * Please regenerate the types.
 */
export function gql(source: string): unknown;

/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "fragment LeaveCore on leave {\n  id\n  leaveType\n  startDate\n  endDate\n  status\n  userId\n}\n\nfragment LeaveBasic on leave {\n  ...LeaveCore\n  reason\n}\n\nfragment LeaveDetailed on leave {\n  ...LeaveBasic\n}\n\nfragment LeaveWithUser on leave {\n  ...LeaveBasic\n  leaveUser {\n    id\n    name\n    email\n    role\n    managerUser {\n      id\n      name\n      email\n    }\n  }\n}\n\nfragment LeaveComplete on leave {\n  ...LeaveDetailed\n  leaveUser {\n    id\n    name\n    email\n    role\n    managerUser {\n      id\n      name\n      email\n    }\n  }\n}\n\nfragment LeaveSummary on leave {\n  id\n  leaveType\n  startDate\n  endDate\n  status\n  userId\n}\n\nfragment LeaveListItem on leave {\n  ...LeaveSummary\n  reason\n  leaveUser {\n    id\n    name\n  }\n}\n\nfragment LeaveTableRow on leave {\n  ...LeaveListItem\n}\n\nfragment LeaveDashboardCard on leave {\n  ...LeaveSummary\n  leaveUser {\n    id\n    name\n  }\n}\n\nfragment LeaveCalendarItem on leave {\n  id\n  leaveType\n  startDate\n  endDate\n  status\n  leaveUser {\n    id\n    name\n    role\n  }\n}\n\nfragment LeaveMinimal on leave {\n  id\n  leaveType\n  startDate\n  endDate\n  status\n  userId\n}\n\nfragment PendingLeave on leave {\n  ...LeaveWithUser\n}\n\nfragment ApprovedLeave on leave {\n  ...LeaveBasic\n}\n\nfragment RejectedLeave on leave {\n  ...LeaveBasic\n}\n\nfragment SickLeave on leave {\n  ...LeaveDetailed\n}\n\nfragment VacationLeave on leave {\n  ...LeaveBasic\n}\n\nfragment EmergencyLeave on leave {\n  ...LeaveDetailed\n}\n\nfragment LeaveForAudit on leave {\n  id\n  leaveType\n  startDate\n  endDate\n  status\n  userId\n}\n\nfragment LeaveApprovalAudit on leave {\n  id\n  leaveType\n  startDate\n  endDate\n  status\n  userId\n}"): (typeof documents)["fragment LeaveCore on leave {\n  id\n  leaveType\n  startDate\n  endDate\n  status\n  userId\n}\n\nfragment LeaveBasic on leave {\n  ...LeaveCore\n  reason\n}\n\nfragment LeaveDetailed on leave {\n  ...LeaveBasic\n}\n\nfragment LeaveWithUser on leave {\n  ...LeaveBasic\n  leaveUser {\n    id\n    name\n    email\n    role\n    managerUser {\n      id\n      name\n      email\n    }\n  }\n}\n\nfragment LeaveComplete on leave {\n  ...LeaveDetailed\n  leaveUser {\n    id\n    name\n    email\n    role\n    managerUser {\n      id\n      name\n      email\n    }\n  }\n}\n\nfragment LeaveSummary on leave {\n  id\n  leaveType\n  startDate\n  endDate\n  status\n  userId\n}\n\nfragment LeaveListItem on leave {\n  ...LeaveSummary\n  reason\n  leaveUser {\n    id\n    name\n  }\n}\n\nfragment LeaveTableRow on leave {\n  ...LeaveListItem\n}\n\nfragment LeaveDashboardCard on leave {\n  ...LeaveSummary\n  leaveUser {\n    id\n    name\n  }\n}\n\nfragment LeaveCalendarItem on leave {\n  id\n  leaveType\n  startDate\n  endDate\n  status\n  leaveUser {\n    id\n    name\n    role\n  }\n}\n\nfragment LeaveMinimal on leave {\n  id\n  leaveType\n  startDate\n  endDate\n  status\n  userId\n}\n\nfragment PendingLeave on leave {\n  ...LeaveWithUser\n}\n\nfragment ApprovedLeave on leave {\n  ...LeaveBasic\n}\n\nfragment RejectedLeave on leave {\n  ...LeaveBasic\n}\n\nfragment SickLeave on leave {\n  ...LeaveDetailed\n}\n\nfragment VacationLeave on leave {\n  ...LeaveBasic\n}\n\nfragment EmergencyLeave on leave {\n  ...LeaveDetailed\n}\n\nfragment LeaveForAudit on leave {\n  id\n  leaveType\n  startDate\n  endDate\n  status\n  userId\n}\n\nfragment LeaveApprovalAudit on leave {\n  id\n  leaveType\n  startDate\n  endDate\n  status\n  userId\n}"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "mutation CreateLeave($object: leaveInsertInput!) {\n  insertLeave(object: $object) {\n    ...LeaveDetailed\n    leaveUser {\n      id\n      name\n      email\n      managerUser {\n        id\n        name\n        email\n      }\n    }\n  }\n}\n\nmutation UpdateLeave($id: uuid!, $set: leaveSetInput!) {\n  updateLeaveById(pkColumns: {id: $id}, _set: $set) {\n    ...LeaveDetailed\n    leaveUser {\n      id\n      name\n      email\n    }\n  }\n}\n\nmutation DeleteLeave($id: uuid!) {\n  deleteLeaveById(id: $id) {\n    id\n    leaveType\n    startDate\n    endDate\n  }\n}\n\nmutation CreateAnnualLeave($userId: uuid!, $startDate: date!, $endDate: date!, $reason: String) {\n  insertLeave(\n    object: {userId: $userId, startDate: $startDate, endDate: $endDate, leaveType: \"Annual\", reason: $reason, status: Pending}\n  ) {\n    ...LeaveBasic\n    leaveUser {\n      id\n      name\n      email\n    }\n  }\n}\n\nmutation CreateSickLeave($userId: uuid!, $startDate: date!, $endDate: date!, $reason: String) {\n  insertLeave(\n    object: {userId: $userId, startDate: $startDate, endDate: $endDate, leaveType: \"Sick\", reason: $reason, status: Pending}\n  ) {\n    ...LeaveBasic\n    leaveUser {\n      id\n      name\n      email\n    }\n  }\n}\n\nmutation CreateUnpaidLeave($userId: uuid!, $startDate: date!, $endDate: date!, $reason: String) {\n  insertLeave(\n    object: {userId: $userId, startDate: $startDate, endDate: $endDate, leaveType: \"Unpaid\", reason: $reason, status: Pending}\n  ) {\n    ...LeaveBasic\n    leaveUser {\n      id\n      name\n      email\n    }\n  }\n}\n\nmutation CreateOtherLeave($userId: uuid!, $startDate: date!, $endDate: date!, $reason: String!) {\n  insertLeave(\n    object: {userId: $userId, startDate: $startDate, endDate: $endDate, leaveType: \"Other\", reason: $reason, status: Pending}\n  ) {\n    ...LeaveBasic\n    leaveUser {\n      id\n      name\n      email\n    }\n  }\n}\n\nmutation ApproveLeave($id: uuid!) {\n  updateLeaveById(pkColumns: {id: $id}, _set: {status: Approved}) {\n    ...LeaveBasic\n    leaveUser {\n      id\n      name\n      email\n    }\n  }\n}\n\nmutation RejectLeave($id: uuid!) {\n  updateLeaveById(pkColumns: {id: $id}, _set: {status: Rejected}) {\n    ...LeaveBasic\n    leaveUser {\n      id\n      name\n      email\n    }\n  }\n}\n\nmutation SetLeavePending($id: uuid!) {\n  updateLeaveById(pkColumns: {id: $id}, _set: {status: Pending}) {\n    ...LeaveBasic\n  }\n}\n\nmutation BulkApproveLeave($leaveIds: [uuid!]!) {\n  bulkUpdateLeave(where: {id: {_in: $leaveIds}}, _set: {status: Approved}) {\n    returning {\n      ...LeaveBasic\n    }\n    affectedRows\n  }\n}\n\nmutation BulkRejectLeave($leaveIds: [uuid!]!) {\n  bulkUpdateLeave(where: {id: {_in: $leaveIds}}, _set: {status: Rejected}) {\n    returning {\n      ...LeaveBasic\n    }\n    affectedRows\n  }\n}\n\nmutation BulkDeleteLeave($leaveIds: [uuid!]!) {\n  bulkDeleteLeave(where: {id: {_in: $leaveIds}}) {\n    affectedRows\n    returning {\n      id\n      leaveType\n      startDate\n      endDate\n    }\n  }\n}\n\nmutation UpdateLeaveDetails($id: uuid!, $startDate: date, $endDate: date, $leaveType: String, $reason: String) {\n  updateLeaveById(\n    pkColumns: {id: $id}\n    _set: {startDate: $startDate, endDate: $endDate, leaveType: $leaveType, reason: $reason}\n  ) {\n    ...LeaveBasic\n    leaveUser {\n      id\n      name\n      email\n    }\n  }\n}\n\nmutation UpdateLeaveDates($id: uuid!, $startDate: date!, $endDate: date!) {\n  updateLeaveById(\n    pkColumns: {id: $id}\n    _set: {startDate: $startDate, endDate: $endDate}\n  ) {\n    ...LeaveBasic\n  }\n}\n\nmutation UpdateLeaveType($id: uuid!, $leaveType: String!) {\n  updateLeaveById(pkColumns: {id: $id}, _set: {leaveType: $leaveType}) {\n    ...LeaveBasic\n  }\n}\n\nmutation UpdateLeaveReason($id: uuid!, $reason: String) {\n  updateLeaveById(pkColumns: {id: $id}, _set: {reason: $reason}) {\n    ...LeaveBasic\n  }\n}\n\nmutation CancelLeave($id: uuid!) {\n  deleteLeaveById(id: $id) {\n    id\n    leaveType\n    startDate\n    endDate\n    leaveUser {\n      id\n      name\n      email\n    }\n  }\n}\n\nmutation TransferLeave($id: uuid!, $newUserId: uuid!) {\n  updateLeaveById(pkColumns: {id: $id}, _set: {userId: $newUserId}) {\n    ...LeaveBasic\n    leaveUser {\n      id\n      name\n      email\n    }\n  }\n}\n\nmutation CreateMyLeave($startDate: date!, $endDate: date!, $leaveType: String!, $reason: String) {\n  insertLeave(\n    object: {startDate: $startDate, endDate: $endDate, leaveType: $leaveType, reason: $reason, status: Pending}\n  ) {\n    ...LeaveBasic\n    leaveUser {\n      id\n      name\n      email\n    }\n  }\n}\n\nmutation UpdateMyLeave($id: uuid!, $startDate: date, $endDate: date, $leaveType: String, $reason: String) {\n  updateLeaveById(\n    pkColumns: {id: $id}\n    _set: {startDate: $startDate, endDate: $endDate, leaveType: $leaveType, reason: $reason}\n  ) {\n    ...LeaveBasic\n  }\n}\n\nmutation CancelMyLeave($id: uuid!) {\n  deleteLeaveById(id: $id) {\n    id\n    leaveType\n    startDate\n    endDate\n  }\n}"): (typeof documents)["mutation CreateLeave($object: leaveInsertInput!) {\n  insertLeave(object: $object) {\n    ...LeaveDetailed\n    leaveUser {\n      id\n      name\n      email\n      managerUser {\n        id\n        name\n        email\n      }\n    }\n  }\n}\n\nmutation UpdateLeave($id: uuid!, $set: leaveSetInput!) {\n  updateLeaveById(pkColumns: {id: $id}, _set: $set) {\n    ...LeaveDetailed\n    leaveUser {\n      id\n      name\n      email\n    }\n  }\n}\n\nmutation DeleteLeave($id: uuid!) {\n  deleteLeaveById(id: $id) {\n    id\n    leaveType\n    startDate\n    endDate\n  }\n}\n\nmutation CreateAnnualLeave($userId: uuid!, $startDate: date!, $endDate: date!, $reason: String) {\n  insertLeave(\n    object: {userId: $userId, startDate: $startDate, endDate: $endDate, leaveType: \"Annual\", reason: $reason, status: Pending}\n  ) {\n    ...LeaveBasic\n    leaveUser {\n      id\n      name\n      email\n    }\n  }\n}\n\nmutation CreateSickLeave($userId: uuid!, $startDate: date!, $endDate: date!, $reason: String) {\n  insertLeave(\n    object: {userId: $userId, startDate: $startDate, endDate: $endDate, leaveType: \"Sick\", reason: $reason, status: Pending}\n  ) {\n    ...LeaveBasic\n    leaveUser {\n      id\n      name\n      email\n    }\n  }\n}\n\nmutation CreateUnpaidLeave($userId: uuid!, $startDate: date!, $endDate: date!, $reason: String) {\n  insertLeave(\n    object: {userId: $userId, startDate: $startDate, endDate: $endDate, leaveType: \"Unpaid\", reason: $reason, status: Pending}\n  ) {\n    ...LeaveBasic\n    leaveUser {\n      id\n      name\n      email\n    }\n  }\n}\n\nmutation CreateOtherLeave($userId: uuid!, $startDate: date!, $endDate: date!, $reason: String!) {\n  insertLeave(\n    object: {userId: $userId, startDate: $startDate, endDate: $endDate, leaveType: \"Other\", reason: $reason, status: Pending}\n  ) {\n    ...LeaveBasic\n    leaveUser {\n      id\n      name\n      email\n    }\n  }\n}\n\nmutation ApproveLeave($id: uuid!) {\n  updateLeaveById(pkColumns: {id: $id}, _set: {status: Approved}) {\n    ...LeaveBasic\n    leaveUser {\n      id\n      name\n      email\n    }\n  }\n}\n\nmutation RejectLeave($id: uuid!) {\n  updateLeaveById(pkColumns: {id: $id}, _set: {status: Rejected}) {\n    ...LeaveBasic\n    leaveUser {\n      id\n      name\n      email\n    }\n  }\n}\n\nmutation SetLeavePending($id: uuid!) {\n  updateLeaveById(pkColumns: {id: $id}, _set: {status: Pending}) {\n    ...LeaveBasic\n  }\n}\n\nmutation BulkApproveLeave($leaveIds: [uuid!]!) {\n  bulkUpdateLeave(where: {id: {_in: $leaveIds}}, _set: {status: Approved}) {\n    returning {\n      ...LeaveBasic\n    }\n    affectedRows\n  }\n}\n\nmutation BulkRejectLeave($leaveIds: [uuid!]!) {\n  bulkUpdateLeave(where: {id: {_in: $leaveIds}}, _set: {status: Rejected}) {\n    returning {\n      ...LeaveBasic\n    }\n    affectedRows\n  }\n}\n\nmutation BulkDeleteLeave($leaveIds: [uuid!]!) {\n  bulkDeleteLeave(where: {id: {_in: $leaveIds}}) {\n    affectedRows\n    returning {\n      id\n      leaveType\n      startDate\n      endDate\n    }\n  }\n}\n\nmutation UpdateLeaveDetails($id: uuid!, $startDate: date, $endDate: date, $leaveType: String, $reason: String) {\n  updateLeaveById(\n    pkColumns: {id: $id}\n    _set: {startDate: $startDate, endDate: $endDate, leaveType: $leaveType, reason: $reason}\n  ) {\n    ...LeaveBasic\n    leaveUser {\n      id\n      name\n      email\n    }\n  }\n}\n\nmutation UpdateLeaveDates($id: uuid!, $startDate: date!, $endDate: date!) {\n  updateLeaveById(\n    pkColumns: {id: $id}\n    _set: {startDate: $startDate, endDate: $endDate}\n  ) {\n    ...LeaveBasic\n  }\n}\n\nmutation UpdateLeaveType($id: uuid!, $leaveType: String!) {\n  updateLeaveById(pkColumns: {id: $id}, _set: {leaveType: $leaveType}) {\n    ...LeaveBasic\n  }\n}\n\nmutation UpdateLeaveReason($id: uuid!, $reason: String) {\n  updateLeaveById(pkColumns: {id: $id}, _set: {reason: $reason}) {\n    ...LeaveBasic\n  }\n}\n\nmutation CancelLeave($id: uuid!) {\n  deleteLeaveById(id: $id) {\n    id\n    leaveType\n    startDate\n    endDate\n    leaveUser {\n      id\n      name\n      email\n    }\n  }\n}\n\nmutation TransferLeave($id: uuid!, $newUserId: uuid!) {\n  updateLeaveById(pkColumns: {id: $id}, _set: {userId: $newUserId}) {\n    ...LeaveBasic\n    leaveUser {\n      id\n      name\n      email\n    }\n  }\n}\n\nmutation CreateMyLeave($startDate: date!, $endDate: date!, $leaveType: String!, $reason: String) {\n  insertLeave(\n    object: {startDate: $startDate, endDate: $endDate, leaveType: $leaveType, reason: $reason, status: Pending}\n  ) {\n    ...LeaveBasic\n    leaveUser {\n      id\n      name\n      email\n    }\n  }\n}\n\nmutation UpdateMyLeave($id: uuid!, $startDate: date, $endDate: date, $leaveType: String, $reason: String) {\n  updateLeaveById(\n    pkColumns: {id: $id}\n    _set: {startDate: $startDate, endDate: $endDate, leaveType: $leaveType, reason: $reason}\n  ) {\n    ...LeaveBasic\n  }\n}\n\nmutation CancelMyLeave($id: uuid!) {\n  deleteLeaveById(id: $id) {\n    id\n    leaveType\n    startDate\n    endDate\n  }\n}"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "query GetLeave($limit: Int = 50, $offset: Int = 0, $where: leaveBoolExp) {\n  leave(limit: $limit, offset: $offset, where: $where, orderBy: {startDate: DESC}) {\n    ...LeaveListItem\n  }\n  leaveAggregate(where: $where) {\n    aggregate {\n      count\n    }\n  }\n}\n\nquery GetLeaveById($id: uuid!) {\n  leaveById(id: $id) {\n    ...LeaveComplete\n  }\n}\n\nquery GetLeaveBasic($id: uuid!) {\n  leaveById(id: $id) {\n    ...LeaveBasic\n  }\n}\n\nquery GetUserLeave($userId: uuid!) {\n  leave(where: {userId: {_eq: $userId}}, orderBy: {startDate: DESC}) {\n    ...LeaveWithUser\n  }\n}\n\nquery GetMyLeave($userId: uuid!) {\n  leave(where: {userId: {_eq: $userId}}, orderBy: {startDate: DESC}) {\n    ...LeaveDetailed\n  }\n}\n\nquery GetUserLeaveById($id: uuid!, $userId: uuid!) {\n  leaveById(id: $id) {\n    ...LeaveWithUser\n  }\n}\n\nquery GetUserLeaveHistory($userId: uuid!, $limit: Int = 100) {\n  leave(\n    where: {userId: {_eq: $userId}}\n    orderBy: {startDate: DESC}\n    limit: $limit\n  ) {\n    ...LeaveListItem\n  }\n}\n\nquery GetPendingLeave {\n  leave(where: {status: {_eq: Pending}}, orderBy: {startDate: ASC}) {\n    ...PendingLeave\n  }\n}\n\nquery GetApprovedLeave {\n  leave(where: {status: {_eq: Approved}}, orderBy: {startDate: DESC}) {\n    ...ApprovedLeave\n  }\n}\n\nquery GetRejectedLeave {\n  leave(where: {status: {_eq: Rejected}}, orderBy: {startDate: DESC}) {\n    ...RejectedLeave\n  }\n}\n\nquery GetLeaveByStatus($status: leave_status_enum!) {\n  leave(where: {status: {_eq: $status}}, orderBy: {startDate: DESC}) {\n    ...LeaveBasic\n  }\n}\n\nquery GetUserPendingLeave($userId: uuid!) {\n  leave(\n    where: {userId: {_eq: $userId}, status: {_eq: Pending}}\n    orderBy: {startDate: ASC}\n  ) {\n    ...LeaveBasic\n  }\n}\n\nquery GetUserApprovedLeave($userId: uuid!) {\n  leave(\n    where: {userId: {_eq: $userId}, status: {_eq: Approved}}\n    orderBy: {startDate: DESC}\n  ) {\n    ...LeaveBasic\n  }\n}\n\nquery GetLeaveByType($leaveType: String!) {\n  leave(where: {leaveType: {_eq: $leaveType}}, orderBy: {startDate: DESC}) {\n    ...LeaveListItem\n  }\n}\n\nquery GetAnnualLeave {\n  leave(where: {leaveType: {_eq: \"Annual\"}}, orderBy: {startDate: DESC}) {\n    ...VacationLeave\n  }\n}\n\nquery GetSickLeave {\n  leave(where: {leaveType: {_eq: \"Sick\"}}, orderBy: {startDate: DESC}) {\n    ...SickLeave\n  }\n}\n\nquery GetUnpaidLeave {\n  leave(where: {leaveType: {_eq: \"Unpaid\"}}, orderBy: {startDate: DESC}) {\n    ...LeaveBasic\n  }\n}\n\nquery GetOtherLeave {\n  leave(where: {leaveType: {_eq: \"Other\"}}, orderBy: {startDate: DESC}) {\n    ...EmergencyLeave\n  }\n}\n\nquery GetLeaveByDateRange($startDate: date!, $endDate: date!) {\n  leave(\n    where: {_and: [{startDate: {_gte: $startDate}}, {endDate: {_lte: $endDate}}]}\n    orderBy: {startDate: ASC}\n  ) {\n    ...LeaveCalendarItem\n  }\n}\n\nquery GetLeaveInPeriod($startDate: date!, $endDate: date!) {\n  leave(\n    where: {_or: [{_and: [{startDate: {_gte: $startDate, _lte: $endDate}}]}, {_and: [{endDate: {_gte: $startDate, _lte: $endDate}}]}, {_and: [{startDate: {_lte: $startDate}}, {endDate: {_gte: $endDate}}]}]}\n    orderBy: {startDate: ASC}\n  ) {\n    ...LeaveCalendarItem\n  }\n}\n\nquery GetUpcomingLeave($limit: Int = 20) {\n  leave(\n    where: {startDate: {_gte: \"now()\"}, status: {_eq: Approved}}\n    orderBy: {startDate: ASC}\n    limit: $limit\n  ) {\n    ...LeaveListItem\n  }\n}\n\nquery GetCurrentLeave {\n  leave(\n    where: {startDate: {_lte: \"now()\"}, endDate: {_gte: \"now()\"}, status: {_eq: Approved}}\n    orderBy: {startDate: ASC}\n  ) {\n    ...LeaveWithUser\n  }\n}\n\nquery GetTeamLeave($managerUserId: uuid!) {\n  leave(\n    where: {leaveUser: {managerId: {_eq: $managerUserId}}}\n    orderBy: {startDate: DESC}\n  ) {\n    ...LeaveWithUser\n  }\n}\n\nquery GetTeamPendingLeave($managerUserId: uuid!) {\n  leave(\n    where: {leaveUser: {managerId: {_eq: $managerUserId}}, status: {_eq: Pending}}\n    orderBy: {startDate: ASC}\n  ) {\n    ...LeaveWithUser\n  }\n}\n\nquery GetLeaveDashboardStats {\n  totalLeave: leaveAggregate {\n    aggregate {\n      count\n    }\n  }\n  pendingLeave: leaveAggregate(where: {status: {_eq: Pending}}) {\n    aggregate {\n      count\n    }\n  }\n  approvedLeave: leaveAggregate(where: {status: {_eq: Approved}}) {\n    aggregate {\n      count\n    }\n  }\n  currentLeave: leaveAggregate(\n    where: {startDate: {_lte: \"now()\"}, endDate: {_gte: \"now()\"}, status: {_eq: Approved}}\n  ) {\n    aggregate {\n      count\n    }\n  }\n  upcomingLeave: leave(\n    where: {startDate: {_gte: \"now()\"}, status: {_eq: Approved}}\n    orderBy: {startDate: ASC}\n    limit: 5\n  ) {\n    ...LeaveDashboardCard\n  }\n}\n\nquery GetLeaveOverview {\n  leave(orderBy: {startDate: DESC}) {\n    ...LeaveListItem\n  }\n}\n\nquery SearchLeave($searchTerm: String!, $limit: Int = 50) {\n  leave(\n    where: {_or: [{reason: {_ilike: $searchTerm}}, {leaveType: {_ilike: $searchTerm}}, {leaveUser: {name: {_ilike: $searchTerm}}}]}\n    orderBy: {startDate: DESC}\n    limit: $limit\n  ) {\n    ...LeaveListItem\n  }\n}\n\nquery FilterLeaveByUser($userId: uuid!, $status: leave_status_enum) {\n  leave(\n    where: {userId: {_eq: $userId}, status: {_eq: $status}}\n    orderBy: {startDate: DESC}\n  ) {\n    ...LeaveBasic\n  }\n}\n\nquery FilterLeaveByDateAndType($startDate: date!, $endDate: date!, $leaveType: String) {\n  leave(\n    where: {_and: [{startDate: {_gte: $startDate, _lte: $endDate}}, {leaveType: {_eq: $leaveType}}]}\n    orderBy: {startDate: ASC}\n  ) {\n    ...LeaveListItem\n  }\n}\n\nquery GetLeaveForAudit($limit: Int = 100, $offset: Int = 0, $where: leaveBoolExp = {}) {\n  leave(limit: $limit, offset: $offset, where: $where, orderBy: {startDate: DESC}) {\n    ...LeaveForAudit\n  }\n}\n\nquery GetLeaveApprovalAudit($limit: Int = 50) {\n  leave(\n    where: {status: {_neq: Pending}}\n    orderBy: {startDate: DESC}\n    limit: $limit\n  ) {\n    ...LeaveApprovalAudit\n  }\n}\n\nquery GetUserLeaveAudit($userId: uuid!, $limit: Int = 50) {\n  leave(\n    where: {userId: {_eq: $userId}}\n    orderBy: {startDate: DESC}\n    limit: $limit\n  ) {\n    ...LeaveForAudit\n  }\n}\n\nquery GetLeavePaginated($limit: Int = 20, $offset: Int = 0, $where: leaveBoolExp = {}, $orderBy: [leaveOrderBy!] = [{startDate: DESC}]) {\n  leave(limit: $limit, offset: $offset, where: $where, orderBy: $orderBy) {\n    ...LeaveTableRow\n  }\n  leaveAggregate(where: $where) {\n    aggregate {\n      count\n    }\n  }\n}\n\nquery GetUserLeavePaginated($userId: uuid!, $limit: Int = 20, $offset: Int = 0, $where: leaveBoolExp = {}) {\n  leave(\n    where: {_and: [{userId: {_eq: $userId}}, $where]}\n    orderBy: {startDate: DESC}\n    limit: $limit\n    offset: $offset\n  ) {\n    ...LeaveTableRow\n  }\n  userLeaveAggregate: leaveAggregate(\n    where: {_and: [{userId: {_eq: $userId}}, $where]}\n  ) {\n    aggregate {\n      count\n    }\n  }\n}\n\nquery GetLeaveQuickList {\n  leave(orderBy: {startDate: DESC}) {\n    ...LeaveMinimal\n  }\n}\n\nquery GetMyLeaveQuickList($userId: uuid!) {\n  leave(where: {userId: {_eq: $userId}}, orderBy: {startDate: DESC}) {\n    ...LeaveMinimal\n  }\n}\n\nquery GetLeaveCalendar($startDate: date!, $endDate: date!) {\n  leave(\n    where: {_and: [{startDate: {_lte: $endDate}}, {endDate: {_gte: $startDate}}]}\n    orderBy: {startDate: ASC}\n  ) {\n    ...LeaveCalendarItem\n  }\n}\n\nquery GetTeamLeaveCalendar($managerUserId: uuid!, $startDate: date!, $endDate: date!) {\n  leave(\n    where: {_and: [{startDate: {_lte: $endDate}}, {endDate: {_gte: $startDate}}, {leaveUser: {managerId: {_eq: $managerUserId}}}]}\n    orderBy: {startDate: ASC}\n  ) {\n    ...LeaveCalendarItem\n  }\n}"): (typeof documents)["query GetLeave($limit: Int = 50, $offset: Int = 0, $where: leaveBoolExp) {\n  leave(limit: $limit, offset: $offset, where: $where, orderBy: {startDate: DESC}) {\n    ...LeaveListItem\n  }\n  leaveAggregate(where: $where) {\n    aggregate {\n      count\n    }\n  }\n}\n\nquery GetLeaveById($id: uuid!) {\n  leaveById(id: $id) {\n    ...LeaveComplete\n  }\n}\n\nquery GetLeaveBasic($id: uuid!) {\n  leaveById(id: $id) {\n    ...LeaveBasic\n  }\n}\n\nquery GetUserLeave($userId: uuid!) {\n  leave(where: {userId: {_eq: $userId}}, orderBy: {startDate: DESC}) {\n    ...LeaveWithUser\n  }\n}\n\nquery GetMyLeave($userId: uuid!) {\n  leave(where: {userId: {_eq: $userId}}, orderBy: {startDate: DESC}) {\n    ...LeaveDetailed\n  }\n}\n\nquery GetUserLeaveById($id: uuid!, $userId: uuid!) {\n  leaveById(id: $id) {\n    ...LeaveWithUser\n  }\n}\n\nquery GetUserLeaveHistory($userId: uuid!, $limit: Int = 100) {\n  leave(\n    where: {userId: {_eq: $userId}}\n    orderBy: {startDate: DESC}\n    limit: $limit\n  ) {\n    ...LeaveListItem\n  }\n}\n\nquery GetPendingLeave {\n  leave(where: {status: {_eq: Pending}}, orderBy: {startDate: ASC}) {\n    ...PendingLeave\n  }\n}\n\nquery GetApprovedLeave {\n  leave(where: {status: {_eq: Approved}}, orderBy: {startDate: DESC}) {\n    ...ApprovedLeave\n  }\n}\n\nquery GetRejectedLeave {\n  leave(where: {status: {_eq: Rejected}}, orderBy: {startDate: DESC}) {\n    ...RejectedLeave\n  }\n}\n\nquery GetLeaveByStatus($status: leave_status_enum!) {\n  leave(where: {status: {_eq: $status}}, orderBy: {startDate: DESC}) {\n    ...LeaveBasic\n  }\n}\n\nquery GetUserPendingLeave($userId: uuid!) {\n  leave(\n    where: {userId: {_eq: $userId}, status: {_eq: Pending}}\n    orderBy: {startDate: ASC}\n  ) {\n    ...LeaveBasic\n  }\n}\n\nquery GetUserApprovedLeave($userId: uuid!) {\n  leave(\n    where: {userId: {_eq: $userId}, status: {_eq: Approved}}\n    orderBy: {startDate: DESC}\n  ) {\n    ...LeaveBasic\n  }\n}\n\nquery GetLeaveByType($leaveType: String!) {\n  leave(where: {leaveType: {_eq: $leaveType}}, orderBy: {startDate: DESC}) {\n    ...LeaveListItem\n  }\n}\n\nquery GetAnnualLeave {\n  leave(where: {leaveType: {_eq: \"Annual\"}}, orderBy: {startDate: DESC}) {\n    ...VacationLeave\n  }\n}\n\nquery GetSickLeave {\n  leave(where: {leaveType: {_eq: \"Sick\"}}, orderBy: {startDate: DESC}) {\n    ...SickLeave\n  }\n}\n\nquery GetUnpaidLeave {\n  leave(where: {leaveType: {_eq: \"Unpaid\"}}, orderBy: {startDate: DESC}) {\n    ...LeaveBasic\n  }\n}\n\nquery GetOtherLeave {\n  leave(where: {leaveType: {_eq: \"Other\"}}, orderBy: {startDate: DESC}) {\n    ...EmergencyLeave\n  }\n}\n\nquery GetLeaveByDateRange($startDate: date!, $endDate: date!) {\n  leave(\n    where: {_and: [{startDate: {_gte: $startDate}}, {endDate: {_lte: $endDate}}]}\n    orderBy: {startDate: ASC}\n  ) {\n    ...LeaveCalendarItem\n  }\n}\n\nquery GetLeaveInPeriod($startDate: date!, $endDate: date!) {\n  leave(\n    where: {_or: [{_and: [{startDate: {_gte: $startDate, _lte: $endDate}}]}, {_and: [{endDate: {_gte: $startDate, _lte: $endDate}}]}, {_and: [{startDate: {_lte: $startDate}}, {endDate: {_gte: $endDate}}]}]}\n    orderBy: {startDate: ASC}\n  ) {\n    ...LeaveCalendarItem\n  }\n}\n\nquery GetUpcomingLeave($limit: Int = 20) {\n  leave(\n    where: {startDate: {_gte: \"now()\"}, status: {_eq: Approved}}\n    orderBy: {startDate: ASC}\n    limit: $limit\n  ) {\n    ...LeaveListItem\n  }\n}\n\nquery GetCurrentLeave {\n  leave(\n    where: {startDate: {_lte: \"now()\"}, endDate: {_gte: \"now()\"}, status: {_eq: Approved}}\n    orderBy: {startDate: ASC}\n  ) {\n    ...LeaveWithUser\n  }\n}\n\nquery GetTeamLeave($managerUserId: uuid!) {\n  leave(\n    where: {leaveUser: {managerId: {_eq: $managerUserId}}}\n    orderBy: {startDate: DESC}\n  ) {\n    ...LeaveWithUser\n  }\n}\n\nquery GetTeamPendingLeave($managerUserId: uuid!) {\n  leave(\n    where: {leaveUser: {managerId: {_eq: $managerUserId}}, status: {_eq: Pending}}\n    orderBy: {startDate: ASC}\n  ) {\n    ...LeaveWithUser\n  }\n}\n\nquery GetLeaveDashboardStats {\n  totalLeave: leaveAggregate {\n    aggregate {\n      count\n    }\n  }\n  pendingLeave: leaveAggregate(where: {status: {_eq: Pending}}) {\n    aggregate {\n      count\n    }\n  }\n  approvedLeave: leaveAggregate(where: {status: {_eq: Approved}}) {\n    aggregate {\n      count\n    }\n  }\n  currentLeave: leaveAggregate(\n    where: {startDate: {_lte: \"now()\"}, endDate: {_gte: \"now()\"}, status: {_eq: Approved}}\n  ) {\n    aggregate {\n      count\n    }\n  }\n  upcomingLeave: leave(\n    where: {startDate: {_gte: \"now()\"}, status: {_eq: Approved}}\n    orderBy: {startDate: ASC}\n    limit: 5\n  ) {\n    ...LeaveDashboardCard\n  }\n}\n\nquery GetLeaveOverview {\n  leave(orderBy: {startDate: DESC}) {\n    ...LeaveListItem\n  }\n}\n\nquery SearchLeave($searchTerm: String!, $limit: Int = 50) {\n  leave(\n    where: {_or: [{reason: {_ilike: $searchTerm}}, {leaveType: {_ilike: $searchTerm}}, {leaveUser: {name: {_ilike: $searchTerm}}}]}\n    orderBy: {startDate: DESC}\n    limit: $limit\n  ) {\n    ...LeaveListItem\n  }\n}\n\nquery FilterLeaveByUser($userId: uuid!, $status: leave_status_enum) {\n  leave(\n    where: {userId: {_eq: $userId}, status: {_eq: $status}}\n    orderBy: {startDate: DESC}\n  ) {\n    ...LeaveBasic\n  }\n}\n\nquery FilterLeaveByDateAndType($startDate: date!, $endDate: date!, $leaveType: String) {\n  leave(\n    where: {_and: [{startDate: {_gte: $startDate, _lte: $endDate}}, {leaveType: {_eq: $leaveType}}]}\n    orderBy: {startDate: ASC}\n  ) {\n    ...LeaveListItem\n  }\n}\n\nquery GetLeaveForAudit($limit: Int = 100, $offset: Int = 0, $where: leaveBoolExp = {}) {\n  leave(limit: $limit, offset: $offset, where: $where, orderBy: {startDate: DESC}) {\n    ...LeaveForAudit\n  }\n}\n\nquery GetLeaveApprovalAudit($limit: Int = 50) {\n  leave(\n    where: {status: {_neq: Pending}}\n    orderBy: {startDate: DESC}\n    limit: $limit\n  ) {\n    ...LeaveApprovalAudit\n  }\n}\n\nquery GetUserLeaveAudit($userId: uuid!, $limit: Int = 50) {\n  leave(\n    where: {userId: {_eq: $userId}}\n    orderBy: {startDate: DESC}\n    limit: $limit\n  ) {\n    ...LeaveForAudit\n  }\n}\n\nquery GetLeavePaginated($limit: Int = 20, $offset: Int = 0, $where: leaveBoolExp = {}, $orderBy: [leaveOrderBy!] = [{startDate: DESC}]) {\n  leave(limit: $limit, offset: $offset, where: $where, orderBy: $orderBy) {\n    ...LeaveTableRow\n  }\n  leaveAggregate(where: $where) {\n    aggregate {\n      count\n    }\n  }\n}\n\nquery GetUserLeavePaginated($userId: uuid!, $limit: Int = 20, $offset: Int = 0, $where: leaveBoolExp = {}) {\n  leave(\n    where: {_and: [{userId: {_eq: $userId}}, $where]}\n    orderBy: {startDate: DESC}\n    limit: $limit\n    offset: $offset\n  ) {\n    ...LeaveTableRow\n  }\n  userLeaveAggregate: leaveAggregate(\n    where: {_and: [{userId: {_eq: $userId}}, $where]}\n  ) {\n    aggregate {\n      count\n    }\n  }\n}\n\nquery GetLeaveQuickList {\n  leave(orderBy: {startDate: DESC}) {\n    ...LeaveMinimal\n  }\n}\n\nquery GetMyLeaveQuickList($userId: uuid!) {\n  leave(where: {userId: {_eq: $userId}}, orderBy: {startDate: DESC}) {\n    ...LeaveMinimal\n  }\n}\n\nquery GetLeaveCalendar($startDate: date!, $endDate: date!) {\n  leave(\n    where: {_and: [{startDate: {_lte: $endDate}}, {endDate: {_gte: $startDate}}]}\n    orderBy: {startDate: ASC}\n  ) {\n    ...LeaveCalendarItem\n  }\n}\n\nquery GetTeamLeaveCalendar($managerUserId: uuid!, $startDate: date!, $endDate: date!) {\n  leave(\n    where: {_and: [{startDate: {_lte: $endDate}}, {endDate: {_gte: $startDate}}, {leaveUser: {managerId: {_eq: $managerUserId}}}]}\n    orderBy: {startDate: ASC}\n  ) {\n    ...LeaveCalendarItem\n  }\n}"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "subscription LeaveUpdates($userId: uuid!) {\n  leave(where: {userId: {_eq: $userId}}, orderBy: {startDate: DESC}) {\n    ...LeaveDetailed\n  }\n}\n\nsubscription UserLeaveUpdates($userId: uuid!) {\n  leave(where: {userId: {_eq: $userId}}, orderBy: {startDate: DESC}) {\n    ...LeaveWithUser\n  }\n}\n\nsubscription LeaveStatusUpdates($leaveId: uuid!) {\n  leave(where: {id: {_eq: $leaveId}}) {\n    id\n    status\n    leaveType\n    startDate\n    endDate\n    reason\n  }\n}\n\nsubscription PendingLeaveUpdates {\n  leave(where: {status: {_eq: Pending}}, orderBy: {startDate: ASC}) {\n    ...PendingLeave\n  }\n}\n\nsubscription ManagerPendingApprovalsUpdates($managerUserId: uuid!) {\n  leave(\n    where: {leaveUser: {managerId: {_eq: $managerUserId}}, status: {_eq: Pending}}\n    orderBy: {startDate: ASC}\n  ) {\n    ...PendingLeave\n  }\n}\n\nsubscription TeamLeaveUpdates($managerUserId: uuid!) {\n  leave(\n    where: {leaveUser: {managerId: {_eq: $managerUserId}}}\n    orderBy: {startDate: DESC}\n  ) {\n    ...LeaveWithUser\n  }\n}\n\nsubscription ActiveTeamLeaveUpdates($managerUserId: uuid!) {\n  leave(\n    where: {leaveUser: {managerId: {_eq: $managerUserId}}, status: {_eq: Approved}, startDate: {_lte: \"now()\"}, endDate: {_gte: \"now()\"}}\n    orderBy: {startDate: ASC}\n  ) {\n    ...LeaveWithUser\n  }\n}\n\nsubscription UpcomingTeamLeaveUpdates($managerUserId: uuid!) {\n  leave(\n    where: {leaveUser: {managerId: {_eq: $managerUserId}}, status: {_eq: Approved}, startDate: {_gte: \"now()\"}}\n    orderBy: {startDate: ASC}\n  ) {\n    ...LeaveWithUser\n  }\n}\n\nsubscription ActiveLeaveUpdates {\n  leave(\n    where: {status: {_eq: Approved}, startDate: {_lte: \"now()\"}, endDate: {_gte: \"now()\"}}\n    orderBy: {startDate: ASC}\n  ) {\n    ...LeaveWithUser\n  }\n}\n\nsubscription ApprovedLeaveUpdates {\n  leave(where: {status: {_eq: Approved}}, orderBy: {startDate: DESC}) {\n    ...ApprovedLeave\n  }\n}\n\nsubscription RejectedLeaveUpdates {\n  leave(where: {status: {_eq: Rejected}}, orderBy: {startDate: DESC}) {\n    ...RejectedLeave\n  }\n}\n\nsubscription UpcomingLeaveUpdates {\n  leave(\n    where: {status: {_eq: Approved}, startDate: {_gte: \"now()\"}}\n    orderBy: {startDate: ASC}\n  ) {\n    ...LeaveWithUser\n  }\n}\n\nsubscription SickLeaveUpdates {\n  leave(where: {leaveType: {_eq: \"Sick\"}}, orderBy: {startDate: DESC}) {\n    ...SickLeave\n  }\n}\n\nsubscription VacationLeaveUpdates {\n  leave(where: {leaveType: {_eq: \"Annual\"}}, orderBy: {startDate: DESC}) {\n    ...VacationLeave\n  }\n}\n\nsubscription EmergencyLeaveUpdates {\n  leave(where: {leaveType: {_eq: \"Other\"}}, orderBy: {startDate: DESC}) {\n    ...EmergencyLeave\n  }\n}\n\nsubscription LeaveCalendarUpdates($startDate: date!, $endDate: date!) {\n  leave(\n    where: {_or: [{startDate: {_gte: $startDate, _lte: $endDate}}, {endDate: {_gte: $startDate, _lte: $endDate}}, {_and: [{startDate: {_lte: $startDate}}, {endDate: {_gte: $endDate}}]}], status: {_eq: Approved}}\n    orderBy: {startDate: ASC}\n  ) {\n    ...LeaveCalendarItem\n  }\n}\n\nsubscription TeamLeaveCalendarUpdates($managerUserId: uuid!, $startDate: date!, $endDate: date!) {\n  leave(\n    where: {leaveUser: {managerId: {_eq: $managerUserId}}, _or: [{startDate: {_gte: $startDate, _lte: $endDate}}, {endDate: {_gte: $startDate, _lte: $endDate}}, {_and: [{startDate: {_lte: $startDate}}, {endDate: {_gte: $endDate}}]}], status: {_eq: Approved}}\n    orderBy: {startDate: ASC}\n  ) {\n    ...LeaveCalendarItem\n  }\n}\n\nsubscription LeaveTotalCountUpdates {\n  leaveAggregate {\n    aggregate {\n      count\n    }\n  }\n}\n\nsubscription PendingLeaveCountUpdates {\n  leaveAggregate(where: {status: {_eq: Pending}}) {\n    aggregate {\n      count\n    }\n  }\n}\n\nsubscription ApprovedLeaveCountUpdates {\n  leaveAggregate(where: {status: {_eq: Approved}}) {\n    aggregate {\n      count\n    }\n  }\n}\n\nsubscription ActiveLeaveCountUpdates {\n  leaveAggregate(\n    where: {status: {_eq: Approved}, startDate: {_lte: \"now()\"}, endDate: {_gte: \"now()\"}}\n  ) {\n    aggregate {\n      count\n    }\n  }\n}\n\nsubscription RecentLeaveActivityUpdates {\n  leave(orderBy: {startDate: DESC}, limit: 10) {\n    ...LeaveDashboardCard\n  }\n}\n\nsubscription SickLeaveCountUpdates {\n  leaveAggregate(where: {leaveType: {_eq: \"Sick\"}}) {\n    aggregate {\n      count\n    }\n  }\n}\n\nsubscription VacationLeaveCountUpdates {\n  leaveAggregate(where: {leaveType: {_eq: \"Annual\"}}) {\n    aggregate {\n      count\n    }\n  }\n}\n\nsubscription UnpaidLeaveCountUpdates {\n  leaveAggregate(where: {leaveType: {_eq: \"Unpaid\"}}) {\n    aggregate {\n      count\n    }\n  }\n}\n\nsubscription OtherLeaveCountUpdates {\n  leaveAggregate(where: {leaveType: {_eq: \"Other\"}}) {\n    aggregate {\n      count\n    }\n  }\n}\n\nsubscription TeamLeaveRequestsUpdates($userId: uuid!) {\n  leave(\n    where: {leaveUser: {managerId: {_eq: $userId}}, status: {_eq: Pending}}\n    orderBy: {startDate: DESC}\n  ) {\n    ...LeaveWithUser\n  }\n}\n\nsubscription MyLeaveRequestsUpdates($userId: uuid!) {\n  leave(where: {userId: {_eq: $userId}}, orderBy: {startDate: DESC}) {\n    ...LeaveBasic\n  }\n}\n\nsubscription EmergencyLeaveRequestsUpdates {\n  leave(\n    where: {leaveType: {_eq: \"Other\"}, status: {_eq: Pending}}\n    orderBy: {startDate: DESC}\n  ) {\n    ...EmergencyLeave\n  }\n}\n\nsubscription AllPendingRequestsUpdates {\n  leave(where: {status: {_eq: Pending}}, orderBy: {startDate: DESC}) {\n    ...LeaveWithUser\n  }\n}\n\nsubscription HRPendingLeaveUpdates {\n  leave(where: {status: {_eq: Pending}}, orderBy: {startDate: ASC}) {\n    ...LeaveWithUser\n  }\n}\n\nsubscription HRRecentApprovalsUpdates {\n  leave(where: {status: {_in: [Approved, Rejected]}}, orderBy: {startDate: DESC}) {\n    ...LeaveWithUser\n  }\n}\n\nsubscription LeaveAuditUpdates {\n  leave(orderBy: {startDate: DESC}) {\n    ...LeaveForAudit\n  }\n}\n\nsubscription LeaveRecentActivityUpdates {\n  leave(orderBy: {startDate: DESC}, limit: 5) {\n    id\n    status\n    leaveType\n    startDate\n    leaveUser {\n      name\n    }\n  }\n}\n\nsubscription LeaveSystemMetricsUpdates {\n  leaveAggregate {\n    aggregate {\n      count\n    }\n  }\n}\n\nsubscription NewLeaveRequestsUpdates {\n  leave(orderBy: {startDate: DESC}, limit: 10) {\n    ...LeaveWithUser\n  }\n}"): (typeof documents)["subscription LeaveUpdates($userId: uuid!) {\n  leave(where: {userId: {_eq: $userId}}, orderBy: {startDate: DESC}) {\n    ...LeaveDetailed\n  }\n}\n\nsubscription UserLeaveUpdates($userId: uuid!) {\n  leave(where: {userId: {_eq: $userId}}, orderBy: {startDate: DESC}) {\n    ...LeaveWithUser\n  }\n}\n\nsubscription LeaveStatusUpdates($leaveId: uuid!) {\n  leave(where: {id: {_eq: $leaveId}}) {\n    id\n    status\n    leaveType\n    startDate\n    endDate\n    reason\n  }\n}\n\nsubscription PendingLeaveUpdates {\n  leave(where: {status: {_eq: Pending}}, orderBy: {startDate: ASC}) {\n    ...PendingLeave\n  }\n}\n\nsubscription ManagerPendingApprovalsUpdates($managerUserId: uuid!) {\n  leave(\n    where: {leaveUser: {managerId: {_eq: $managerUserId}}, status: {_eq: Pending}}\n    orderBy: {startDate: ASC}\n  ) {\n    ...PendingLeave\n  }\n}\n\nsubscription TeamLeaveUpdates($managerUserId: uuid!) {\n  leave(\n    where: {leaveUser: {managerId: {_eq: $managerUserId}}}\n    orderBy: {startDate: DESC}\n  ) {\n    ...LeaveWithUser\n  }\n}\n\nsubscription ActiveTeamLeaveUpdates($managerUserId: uuid!) {\n  leave(\n    where: {leaveUser: {managerId: {_eq: $managerUserId}}, status: {_eq: Approved}, startDate: {_lte: \"now()\"}, endDate: {_gte: \"now()\"}}\n    orderBy: {startDate: ASC}\n  ) {\n    ...LeaveWithUser\n  }\n}\n\nsubscription UpcomingTeamLeaveUpdates($managerUserId: uuid!) {\n  leave(\n    where: {leaveUser: {managerId: {_eq: $managerUserId}}, status: {_eq: Approved}, startDate: {_gte: \"now()\"}}\n    orderBy: {startDate: ASC}\n  ) {\n    ...LeaveWithUser\n  }\n}\n\nsubscription ActiveLeaveUpdates {\n  leave(\n    where: {status: {_eq: Approved}, startDate: {_lte: \"now()\"}, endDate: {_gte: \"now()\"}}\n    orderBy: {startDate: ASC}\n  ) {\n    ...LeaveWithUser\n  }\n}\n\nsubscription ApprovedLeaveUpdates {\n  leave(where: {status: {_eq: Approved}}, orderBy: {startDate: DESC}) {\n    ...ApprovedLeave\n  }\n}\n\nsubscription RejectedLeaveUpdates {\n  leave(where: {status: {_eq: Rejected}}, orderBy: {startDate: DESC}) {\n    ...RejectedLeave\n  }\n}\n\nsubscription UpcomingLeaveUpdates {\n  leave(\n    where: {status: {_eq: Approved}, startDate: {_gte: \"now()\"}}\n    orderBy: {startDate: ASC}\n  ) {\n    ...LeaveWithUser\n  }\n}\n\nsubscription SickLeaveUpdates {\n  leave(where: {leaveType: {_eq: \"Sick\"}}, orderBy: {startDate: DESC}) {\n    ...SickLeave\n  }\n}\n\nsubscription VacationLeaveUpdates {\n  leave(where: {leaveType: {_eq: \"Annual\"}}, orderBy: {startDate: DESC}) {\n    ...VacationLeave\n  }\n}\n\nsubscription EmergencyLeaveUpdates {\n  leave(where: {leaveType: {_eq: \"Other\"}}, orderBy: {startDate: DESC}) {\n    ...EmergencyLeave\n  }\n}\n\nsubscription LeaveCalendarUpdates($startDate: date!, $endDate: date!) {\n  leave(\n    where: {_or: [{startDate: {_gte: $startDate, _lte: $endDate}}, {endDate: {_gte: $startDate, _lte: $endDate}}, {_and: [{startDate: {_lte: $startDate}}, {endDate: {_gte: $endDate}}]}], status: {_eq: Approved}}\n    orderBy: {startDate: ASC}\n  ) {\n    ...LeaveCalendarItem\n  }\n}\n\nsubscription TeamLeaveCalendarUpdates($managerUserId: uuid!, $startDate: date!, $endDate: date!) {\n  leave(\n    where: {leaveUser: {managerId: {_eq: $managerUserId}}, _or: [{startDate: {_gte: $startDate, _lte: $endDate}}, {endDate: {_gte: $startDate, _lte: $endDate}}, {_and: [{startDate: {_lte: $startDate}}, {endDate: {_gte: $endDate}}]}], status: {_eq: Approved}}\n    orderBy: {startDate: ASC}\n  ) {\n    ...LeaveCalendarItem\n  }\n}\n\nsubscription LeaveTotalCountUpdates {\n  leaveAggregate {\n    aggregate {\n      count\n    }\n  }\n}\n\nsubscription PendingLeaveCountUpdates {\n  leaveAggregate(where: {status: {_eq: Pending}}) {\n    aggregate {\n      count\n    }\n  }\n}\n\nsubscription ApprovedLeaveCountUpdates {\n  leaveAggregate(where: {status: {_eq: Approved}}) {\n    aggregate {\n      count\n    }\n  }\n}\n\nsubscription ActiveLeaveCountUpdates {\n  leaveAggregate(\n    where: {status: {_eq: Approved}, startDate: {_lte: \"now()\"}, endDate: {_gte: \"now()\"}}\n  ) {\n    aggregate {\n      count\n    }\n  }\n}\n\nsubscription RecentLeaveActivityUpdates {\n  leave(orderBy: {startDate: DESC}, limit: 10) {\n    ...LeaveDashboardCard\n  }\n}\n\nsubscription SickLeaveCountUpdates {\n  leaveAggregate(where: {leaveType: {_eq: \"Sick\"}}) {\n    aggregate {\n      count\n    }\n  }\n}\n\nsubscription VacationLeaveCountUpdates {\n  leaveAggregate(where: {leaveType: {_eq: \"Annual\"}}) {\n    aggregate {\n      count\n    }\n  }\n}\n\nsubscription UnpaidLeaveCountUpdates {\n  leaveAggregate(where: {leaveType: {_eq: \"Unpaid\"}}) {\n    aggregate {\n      count\n    }\n  }\n}\n\nsubscription OtherLeaveCountUpdates {\n  leaveAggregate(where: {leaveType: {_eq: \"Other\"}}) {\n    aggregate {\n      count\n    }\n  }\n}\n\nsubscription TeamLeaveRequestsUpdates($userId: uuid!) {\n  leave(\n    where: {leaveUser: {managerId: {_eq: $userId}}, status: {_eq: Pending}}\n    orderBy: {startDate: DESC}\n  ) {\n    ...LeaveWithUser\n  }\n}\n\nsubscription MyLeaveRequestsUpdates($userId: uuid!) {\n  leave(where: {userId: {_eq: $userId}}, orderBy: {startDate: DESC}) {\n    ...LeaveBasic\n  }\n}\n\nsubscription EmergencyLeaveRequestsUpdates {\n  leave(\n    where: {leaveType: {_eq: \"Other\"}, status: {_eq: Pending}}\n    orderBy: {startDate: DESC}\n  ) {\n    ...EmergencyLeave\n  }\n}\n\nsubscription AllPendingRequestsUpdates {\n  leave(where: {status: {_eq: Pending}}, orderBy: {startDate: DESC}) {\n    ...LeaveWithUser\n  }\n}\n\nsubscription HRPendingLeaveUpdates {\n  leave(where: {status: {_eq: Pending}}, orderBy: {startDate: ASC}) {\n    ...LeaveWithUser\n  }\n}\n\nsubscription HRRecentApprovalsUpdates {\n  leave(where: {status: {_in: [Approved, Rejected]}}, orderBy: {startDate: DESC}) {\n    ...LeaveWithUser\n  }\n}\n\nsubscription LeaveAuditUpdates {\n  leave(orderBy: {startDate: DESC}) {\n    ...LeaveForAudit\n  }\n}\n\nsubscription LeaveRecentActivityUpdates {\n  leave(orderBy: {startDate: DESC}, limit: 5) {\n    id\n    status\n    leaveType\n    startDate\n    leaveUser {\n      name\n    }\n  }\n}\n\nsubscription LeaveSystemMetricsUpdates {\n  leaveAggregate {\n    aggregate {\n      count\n    }\n  }\n}\n\nsubscription NewLeaveRequestsUpdates {\n  leave(orderBy: {startDate: DESC}, limit: 10) {\n    ...LeaveWithUser\n  }\n}"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "fragment UserCore on users {\n  id\n  name\n  email\n  username\n  role\n  isActive\n  isStaff\n  clerkUserId\n  createdAt\n  updatedAt\n}\n\nfragment UserBasic on users {\n  id\n  name\n  email\n  role\n  isActive\n}\n\nfragment UserWithManager on users {\n  ...UserCore\n  managerId\n  managerUser {\n    ...UserBasic\n  }\n}\n\nfragment RoleCore on roles {\n  id\n  name\n  description\n  displayName\n  priority\n  isSystemRole\n  createdAt\n}\n\nfragment PermissionCore on permissions {\n  id\n  action\n  description\n  resourceId\n  createdAt\n  updatedAt\n}\n\nfragment PermissionWithResource on permissions {\n  ...PermissionCore\n  relatedResource {\n    id\n    name\n    description\n  }\n}\n\nfragment ClientCore on clients {\n  id\n  name\n  contactEmail\n  contactPerson\n  contactPhone\n  active\n  createdAt\n  updatedAt\n}\n\nfragment ClientBasic on clients {\n  id\n  name\n  active\n}\n\nfragment ResourceCore on resources {\n  id\n  name\n  displayName\n  description\n  createdAt\n  updatedAt\n}\n\nfragment UserRoleCore on userRoles {\n  id\n  userId\n  roleId\n  createdAt\n  updatedAt\n}\n\nfragment RolePermissionCore on rolePermissions {\n  id\n  roleId\n  permissionId\n  conditions\n  createdAt\n  updatedAt\n}\n\nfragment AuditFields on auditLogs {\n  id\n  eventTime\n  action\n  resourceType\n  resourceId\n  userId\n  ipAddress\n  userAgent\n  success\n  userEmail\n  userRole\n}"): (typeof documents)["fragment UserCore on users {\n  id\n  name\n  email\n  username\n  role\n  isActive\n  isStaff\n  clerkUserId\n  createdAt\n  updatedAt\n}\n\nfragment UserBasic on users {\n  id\n  name\n  email\n  role\n  isActive\n}\n\nfragment UserWithManager on users {\n  ...UserCore\n  managerId\n  managerUser {\n    ...UserBasic\n  }\n}\n\nfragment RoleCore on roles {\n  id\n  name\n  description\n  displayName\n  priority\n  isSystemRole\n  createdAt\n}\n\nfragment PermissionCore on permissions {\n  id\n  action\n  description\n  resourceId\n  createdAt\n  updatedAt\n}\n\nfragment PermissionWithResource on permissions {\n  ...PermissionCore\n  relatedResource {\n    id\n    name\n    description\n  }\n}\n\nfragment ClientCore on clients {\n  id\n  name\n  contactEmail\n  contactPerson\n  contactPhone\n  active\n  createdAt\n  updatedAt\n}\n\nfragment ClientBasic on clients {\n  id\n  name\n  active\n}\n\nfragment ResourceCore on resources {\n  id\n  name\n  displayName\n  description\n  createdAt\n  updatedAt\n}\n\nfragment UserRoleCore on userRoles {\n  id\n  userId\n  roleId\n  createdAt\n  updatedAt\n}\n\nfragment RolePermissionCore on rolePermissions {\n  id\n  roleId\n  permissionId\n  conditions\n  createdAt\n  updatedAt\n}\n\nfragment AuditFields on auditLogs {\n  id\n  eventTime\n  action\n  resourceType\n  resourceId\n  userId\n  ipAddress\n  userAgent\n  success\n  userEmail\n  userRole\n}"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "mutation PlaceholderMutation {\n  __typename\n}"): (typeof documents)["mutation PlaceholderMutation {\n  __typename\n}"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "query GetDashboardStats {\n  clients_aggregate: clientsAggregate {\n    aggregate {\n      count\n    }\n  }\n  payrollsAggregate: payrollsAggregate {\n    aggregate {\n      count\n    }\n  }\n  active_payrolls: payrollsAggregate(where: {supersededDate: {_isNull: true}}) {\n    aggregate {\n      count\n    }\n  }\n  processing_queue: payrollsAggregate(\n    where: {supersededDate: {_isNull: true}, status: {_in: [\"Implementation\"]}}\n  ) {\n    aggregate {\n      count\n    }\n  }\n}\n\nquery GetSystemStats {\n  total_payrolls: payrollsAggregate {\n    aggregate {\n      count\n    }\n  }\n  total_clients: clientsAggregate {\n    aggregate {\n      count\n    }\n  }\n  total_users: usersAggregate {\n    aggregate {\n      count\n    }\n  }\n}\n\nquery GetUpcomingPayrollsShared($from_date: date!, $limit: Int = 10) {\n  payrolls(\n    where: {supersededDate: {_isNull: true}, payrollDates: {adjustedEftDate: {_gte: $from_date}}}\n    orderBy: {payrollDatesAggregate: {min: {adjustedEftDate: ASC}}}\n    limit: $limit\n  ) {\n    id\n    name\n    status\n    client {\n      id\n      name\n    }\n    payrollDates(\n      where: {adjustedEftDate: {_gte: $from_date}}\n      orderBy: {adjustedEftDate: ASC}\n      limit: 1\n    ) {\n      id\n      adjustedEftDate\n      processingDate\n    }\n  }\n}\n\nquery GetUnifiedDashboardData($from_date: date!, $limit: Int = 5) {\n  clients_aggregate: clientsAggregate {\n    aggregate {\n      count\n    }\n  }\n  payrollsAggregate: payrollsAggregate {\n    aggregate {\n      count\n    }\n  }\n  active_payrolls: payrollsAggregate(where: {supersededDate: {_isNull: true}}) {\n    aggregate {\n      count\n    }\n  }\n  processing_queue: payrollsAggregate(where: {supersededDate: {_isNull: true}}) {\n    aggregate {\n      count\n    }\n  }\n  active_users: usersAggregate(where: {isActive: {_eq: true}}) {\n    aggregate {\n      count\n    }\n  }\n  upcoming_payrolls: payrolls(\n    where: {supersededDate: {_isNull: true}, payrollDates: {adjustedEftDate: {_gte: $from_date}}}\n    orderBy: {payrollDatesAggregate: {min: {adjustedEftDate: ASC}}}\n    limit: $limit\n  ) {\n    id\n    name\n    status\n    employeeCount\n    client {\n      id\n      name\n    }\n    primaryConsultant {\n      id\n      name\n    }\n    payrollDates(\n      where: {adjustedEftDate: {_gte: $from_date}}\n      orderBy: {adjustedEftDate: ASC}\n      limit: 1\n    ) {\n      id\n      adjustedEftDate\n      processingDate\n    }\n  }\n  recent_payroll_updates: payrolls(\n    where: {supersededDate: {_isNull: true}}\n    orderBy: {updatedAt: DESC}\n    limit: 3\n  ) {\n    id\n    name\n    status\n    updatedAt\n    client {\n      name\n    }\n  }\n}\n\nquery GetDashboardStatsMinimal {\n  clientCount: clientsAggregate {\n    aggregate {\n      count\n    }\n  }\n  payrollCount: payrollsAggregate(where: {supersededDate: {_isNull: true}}) {\n    aggregate {\n      count\n    }\n  }\n  userCount: usersAggregate(where: {isActive: {_eq: true}}) {\n    aggregate {\n      count\n    }\n  }\n}\n\nquery GetUpcomingPayrollsMinimal($from_date: date!, $limit: Int = 5) {\n  payrolls(\n    where: {supersededDate: {_isNull: true}, payrollDates: {adjustedEftDate: {_gte: $from_date}}}\n    orderBy: {payrollDatesAggregate: {min: {adjustedEftDate: ASC}}}\n    limit: $limit\n  ) {\n    id\n    name\n    status\n    client {\n      name\n    }\n    nextDate: payrollDates(\n      where: {adjustedEftDate: {_gte: $from_date}}\n      orderBy: {adjustedEftDate: ASC}\n      limit: 1\n    ) {\n      adjustedEftDate\n    }\n  }\n}\n\nquery GetRecentActivityMinimal($limit: Int = 10) {\n  payrolls(\n    where: {supersededDate: {_isNull: true}}\n    orderBy: {updatedAt: DESC}\n    limit: $limit\n  ) {\n    id\n    name\n    status\n    updatedAt\n    client {\n      name\n    }\n  }\n}\n\nquery GetQuickStatsOnly {\n  totals: payrollsAggregate(where: {supersededDate: {_isNull: true}}) {\n    aggregate {\n      count\n    }\n  }\n  activeClients: clientsAggregate(where: {active: {_eq: true}}) {\n    aggregate {\n      count\n    }\n  }\n  activeUsers: usersAggregate(where: {isActive: {_eq: true}}) {\n    aggregate {\n      count\n    }\n  }\n}"): (typeof documents)["query GetDashboardStats {\n  clients_aggregate: clientsAggregate {\n    aggregate {\n      count\n    }\n  }\n  payrollsAggregate: payrollsAggregate {\n    aggregate {\n      count\n    }\n  }\n  active_payrolls: payrollsAggregate(where: {supersededDate: {_isNull: true}}) {\n    aggregate {\n      count\n    }\n  }\n  processing_queue: payrollsAggregate(\n    where: {supersededDate: {_isNull: true}, status: {_in: [\"Implementation\"]}}\n  ) {\n    aggregate {\n      count\n    }\n  }\n}\n\nquery GetSystemStats {\n  total_payrolls: payrollsAggregate {\n    aggregate {\n      count\n    }\n  }\n  total_clients: clientsAggregate {\n    aggregate {\n      count\n    }\n  }\n  total_users: usersAggregate {\n    aggregate {\n      count\n    }\n  }\n}\n\nquery GetUpcomingPayrollsShared($from_date: date!, $limit: Int = 10) {\n  payrolls(\n    where: {supersededDate: {_isNull: true}, payrollDates: {adjustedEftDate: {_gte: $from_date}}}\n    orderBy: {payrollDatesAggregate: {min: {adjustedEftDate: ASC}}}\n    limit: $limit\n  ) {\n    id\n    name\n    status\n    client {\n      id\n      name\n    }\n    payrollDates(\n      where: {adjustedEftDate: {_gte: $from_date}}\n      orderBy: {adjustedEftDate: ASC}\n      limit: 1\n    ) {\n      id\n      adjustedEftDate\n      processingDate\n    }\n  }\n}\n\nquery GetUnifiedDashboardData($from_date: date!, $limit: Int = 5) {\n  clients_aggregate: clientsAggregate {\n    aggregate {\n      count\n    }\n  }\n  payrollsAggregate: payrollsAggregate {\n    aggregate {\n      count\n    }\n  }\n  active_payrolls: payrollsAggregate(where: {supersededDate: {_isNull: true}}) {\n    aggregate {\n      count\n    }\n  }\n  processing_queue: payrollsAggregate(where: {supersededDate: {_isNull: true}}) {\n    aggregate {\n      count\n    }\n  }\n  active_users: usersAggregate(where: {isActive: {_eq: true}}) {\n    aggregate {\n      count\n    }\n  }\n  upcoming_payrolls: payrolls(\n    where: {supersededDate: {_isNull: true}, payrollDates: {adjustedEftDate: {_gte: $from_date}}}\n    orderBy: {payrollDatesAggregate: {min: {adjustedEftDate: ASC}}}\n    limit: $limit\n  ) {\n    id\n    name\n    status\n    employeeCount\n    client {\n      id\n      name\n    }\n    primaryConsultant {\n      id\n      name\n    }\n    payrollDates(\n      where: {adjustedEftDate: {_gte: $from_date}}\n      orderBy: {adjustedEftDate: ASC}\n      limit: 1\n    ) {\n      id\n      adjustedEftDate\n      processingDate\n    }\n  }\n  recent_payroll_updates: payrolls(\n    where: {supersededDate: {_isNull: true}}\n    orderBy: {updatedAt: DESC}\n    limit: 3\n  ) {\n    id\n    name\n    status\n    updatedAt\n    client {\n      name\n    }\n  }\n}\n\nquery GetDashboardStatsMinimal {\n  clientCount: clientsAggregate {\n    aggregate {\n      count\n    }\n  }\n  payrollCount: payrollsAggregate(where: {supersededDate: {_isNull: true}}) {\n    aggregate {\n      count\n    }\n  }\n  userCount: usersAggregate(where: {isActive: {_eq: true}}) {\n    aggregate {\n      count\n    }\n  }\n}\n\nquery GetUpcomingPayrollsMinimal($from_date: date!, $limit: Int = 5) {\n  payrolls(\n    where: {supersededDate: {_isNull: true}, payrollDates: {adjustedEftDate: {_gte: $from_date}}}\n    orderBy: {payrollDatesAggregate: {min: {adjustedEftDate: ASC}}}\n    limit: $limit\n  ) {\n    id\n    name\n    status\n    client {\n      name\n    }\n    nextDate: payrollDates(\n      where: {adjustedEftDate: {_gte: $from_date}}\n      orderBy: {adjustedEftDate: ASC}\n      limit: 1\n    ) {\n      adjustedEftDate\n    }\n  }\n}\n\nquery GetRecentActivityMinimal($limit: Int = 10) {\n  payrolls(\n    where: {supersededDate: {_isNull: true}}\n    orderBy: {updatedAt: DESC}\n    limit: $limit\n  ) {\n    id\n    name\n    status\n    updatedAt\n    client {\n      name\n    }\n  }\n}\n\nquery GetQuickStatsOnly {\n  totals: payrollsAggregate(where: {supersededDate: {_isNull: true}}) {\n    aggregate {\n      count\n    }\n  }\n  activeClients: clientsAggregate(where: {active: {_eq: true}}) {\n    aggregate {\n      count\n    }\n  }\n  activeUsers: usersAggregate(where: {isActive: {_eq: true}}) {\n    aggregate {\n      count\n    }\n  }\n}"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "subscription ClientCountUpdates {\n  clientsAggregate(where: {active: {_eq: true}}) {\n    aggregate {\n      count\n    }\n  }\n}\n\nsubscription PayrollCountUpdates {\n  payrollsAggregate(where: {supersededDate: {_isNull: true}}) {\n    aggregate {\n      count\n    }\n  }\n}\n\nsubscription UserCountUpdates {\n  usersAggregate(where: {isActive: {_eq: true}}) {\n    aggregate {\n      count\n    }\n  }\n}\n\nsubscription RecentPayrollActivity {\n  payrolls(\n    where: {supersededDate: {_isNull: true}}\n    orderBy: {updatedAt: DESC}\n    limit: 5\n  ) {\n    id\n    name\n    status\n    updatedAt\n    client {\n      name\n    }\n  }\n}\n\nsubscription RecentUserActivity {\n  users(where: {isActive: {_eq: true}}, orderBy: {updatedAt: DESC}, limit: 3) {\n    id\n    name\n    role\n    updatedAt\n  }\n}\n\nsubscription CriticalPayrollNotifications {\n  payrolls(\n    where: {supersededDate: {_isNull: true}, status: {_in: [\"Issue\", \"Critical\"]}}\n    orderBy: {updatedAt: DESC}\n    limit: 10\n  ) {\n    id\n    name\n    status\n    client {\n      name\n    }\n    primaryConsultant {\n      name\n    }\n  }\n}\n\nsubscription UpcomingPayrollsUpdates($fromDate: date!) {\n  payrolls(\n    where: {supersededDate: {_isNull: true}, payrollDates: {adjustedEftDate: {_gte: $fromDate}}}\n    orderBy: {payrollDatesAggregate: {min: {adjustedEftDate: ASC}}}\n    limit: 5\n  ) {\n    id\n    name\n    status\n    client {\n      name\n    }\n    nextDate: payrollDates(\n      where: {adjustedEftDate: {_gte: $fromDate}}\n      orderBy: {adjustedEftDate: ASC}\n      limit: 1\n    ) {\n      adjustedEftDate\n    }\n  }\n}"): (typeof documents)["subscription ClientCountUpdates {\n  clientsAggregate(where: {active: {_eq: true}}) {\n    aggregate {\n      count\n    }\n  }\n}\n\nsubscription PayrollCountUpdates {\n  payrollsAggregate(where: {supersededDate: {_isNull: true}}) {\n    aggregate {\n      count\n    }\n  }\n}\n\nsubscription UserCountUpdates {\n  usersAggregate(where: {isActive: {_eq: true}}) {\n    aggregate {\n      count\n    }\n  }\n}\n\nsubscription RecentPayrollActivity {\n  payrolls(\n    where: {supersededDate: {_isNull: true}}\n    orderBy: {updatedAt: DESC}\n    limit: 5\n  ) {\n    id\n    name\n    status\n    updatedAt\n    client {\n      name\n    }\n  }\n}\n\nsubscription RecentUserActivity {\n  users(where: {isActive: {_eq: true}}, orderBy: {updatedAt: DESC}, limit: 3) {\n    id\n    name\n    role\n    updatedAt\n  }\n}\n\nsubscription CriticalPayrollNotifications {\n  payrolls(\n    where: {supersededDate: {_isNull: true}, status: {_in: [\"Issue\", \"Critical\"]}}\n    orderBy: {updatedAt: DESC}\n    limit: 10\n  ) {\n    id\n    name\n    status\n    client {\n      name\n    }\n    primaryConsultant {\n      name\n    }\n  }\n}\n\nsubscription UpcomingPayrollsUpdates($fromDate: date!) {\n  payrolls(\n    where: {supersededDate: {_isNull: true}, payrollDates: {adjustedEftDate: {_gte: $fromDate}}}\n    orderBy: {payrollDatesAggregate: {min: {adjustedEftDate: ASC}}}\n    limit: 5\n  ) {\n    id\n    name\n    status\n    client {\n      name\n    }\n    nextDate: payrollDates(\n      where: {adjustedEftDate: {_gte: $fromDate}}\n      orderBy: {adjustedEftDate: ASC}\n      limit: 1\n    ) {\n      adjustedEftDate\n    }\n  }\n}"];

export function gql(source: string) {
  return (documents as any)[source] ?? {};
}

export type DocumentType<TDocumentNode extends DocumentNode<any, any>> = TDocumentNode extends DocumentNode<  infer TType,  any>  ? TType  : never;