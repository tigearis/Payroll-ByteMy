/* eslint-disable */
import * as types from './graphql';
import type { TypedDocumentNode as DocumentNode } from '@graphql-typed-document-node/core';

/**
 * Map of all GraphQL operations in the project.
 *
 * This map has several performance disadvantages:
 * 1. It is not tree-shakeable, so it will include all operations in the project.
 * 2. It is not minifiable, so the string of a GraphQL query will be multiple times inside the bundle.
 * 3. It does not support dead code elimination, so it will add unused operations.
 *
 * Therefore it is highly recommended to use the babel or swc plugin for production.
 * Learn more about it here: https://the-guild.dev/graphql/codegen/plugins/presets/preset-client#reducing-bundle-size
 */
type Documents = {
    "fragment LeaveCore on leave {\n  id\n  userId\n  startDate\n  endDate\n  leaveType\n  reason\n  status\n}\n\nfragment LeaveWithUser on leave {\n  ...LeaveCore\n  user {\n    id\n    name\n    email\n    isStaff\n    managerId\n  }\n}\n\nfragment LeaveWithManager on leave {\n  ...LeaveWithUser\n  user {\n    manager {\n      id\n      name\n      email\n    }\n  }\n}": typeof types.LeaveCoreFragmentDoc,
    "mutation CreateLeaveRequest($object: leave_insert_input!) {\n  insertLeave(object: $object) {\n    ...LeaveWithManager\n  }\n}\n\nmutation UpdateLeaveRequest($id: uuid!, $set: leave_set_input!) {\n  updateLeave(pk_columns: {id: $id}, _set: $set) {\n    ...LeaveWithManager\n  }\n}\n\nmutation ApproveLeaveRequest($id: uuid!) {\n  updateLeave(pk_columns: {id: $id}, _set: {status: \"Approved\"}) {\n    ...LeaveCore\n  }\n}\n\nmutation RejectLeaveRequest($id: uuid!, $reason: String) {\n  updateLeave(pk_columns: {id: $id}, _set: {reason: $reason}) {\n    ...LeaveCore\n  }\n}\n\nmutation DeleteLeaveRequest($id: uuid!) {\n  deleteLeave(id: $id) {\n    id\n  }\n}\n\nmutation BulkApproveLeaveRequests($ids: [uuid!]!) {\n  updateLeaves(where: {id: {_in: $ids}}, _set: {status: \"Approved\"}) {\n    affected_rows\n    returning {\n      ...LeaveCore\n    }\n  }\n}\n\nmutation BulkRejectLeaveRequests($ids: [uuid!]!, $reason: String) {\n  updateLeaves(where: {id: {_in: $ids}}, _set: {reason: $reason}) {\n    affected_rows\n    returning {\n      ...LeaveCore\n    }\n  }\n}": typeof types.CreateLeaveRequestDocument,
    "query GetLeaveRequests($where: leave_bool_exp, $order_by: [leave_order_by!], $limit: Int, $offset: Int) {\n  leaves(where: $where, order_by: $order_by, limit: $limit, offset: $offset) {\n    ...LeaveWithManager\n  }\n  leavesAggregate(where: $where) {\n    aggregate {\n      count\n    }\n  }\n}\n\nquery GetLeaveRequestById($id: uuid!) {\n  leave(id: $id) {\n    ...LeaveWithManager\n  }\n}\n\nquery GetLeaveRequestsByUser($userId: uuid!, $startDate: date, $endDate: date) {\n  leaves(\n    where: {_and: [{userId: {_eq: $userId}}, {startDate: {_lte: $endDate}}, {endDate: {_gte: $startDate}}]}\n    order_by: {startDate: desc}\n  ) {\n    ...LeaveCore\n  }\n}\n\nquery GetPendingLeaveRequests($managerId: uuid) {\n  leaves(\n    where: {_and: [{status: {_eq: \"Pending\"}}, {user: {managerId: {_eq: $managerId}}}]}\n    order_by: {startDate: asc}\n  ) {\n    ...LeaveWithUser\n  }\n}\n\nquery GetLeaveOverlaps($startDate: date!, $endDate: date!, $excludeId: uuid) {\n  leaves(\n    where: {_and: [{startDate: {_lte: $endDate}}, {endDate: {_gte: $startDate}}, {status: {_neq: \"Rejected\"}}, {id: {_neq: $excludeId}}]}\n  ) {\n    ...LeaveWithUser\n  }\n}\n\nquery GetLeaveCalendar($startDate: date!, $endDate: date!, $userIds: [uuid!]) {\n  leaves(\n    where: {_and: [{startDate: {_lte: $endDate}}, {endDate: {_gte: $startDate}}, {status: {_eq: \"Approved\"}}, {userId: {_in: $userIds}}]}\n    order_by: {startDate: asc}\n  ) {\n    ...LeaveWithUser\n  }\n}\n\nquery GetLeaveAnalytics($startDate: date!, $endDate: date!) {\n  leave_by_type: leavesAggregate(\n    where: {startDate: {_gte: $startDate, _lte: $endDate}}\n  ) {\n    nodes {\n      leaveType\n    }\n    aggregate {\n      count\n    }\n  }\n  leave_by_status: leavesAggregate(\n    where: {startDate: {_gte: $startDate, _lte: $endDate}}\n  ) {\n    nodes {\n      status\n    }\n    aggregate {\n      count\n    }\n  }\n  leave_by_user: leaves(where: {}) {\n    user {\n      id\n      name\n    }\n  }\n}": typeof types.GetLeaveRequestsDocument,
    "subscription SubscribeToLeaveRequests($userId: uuid!) {\n  leaves(where: {userId: {_eq: $userId}}, order_by: {startDate: desc}) {\n    ...LeaveWithManager\n  }\n}\n\nsubscription SubscribeToPendingLeaveRequests($managerId: uuid!) {\n  leaves(\n    where: {user: {managerId: {_eq: $managerId}}}\n    order_by: {startDate: asc}\n  ) {\n    ...LeaveWithUser\n  }\n}\n\nsubscription SubscribeToTeamLeave($user_ids: [uuid!]!) {\n  leaves(where: {}, order_by: {startDate: asc}) {\n    ...LeaveWithUser\n  }\n}": typeof types.SubscribeToLeaveRequestsDocument,
    "fragment UserCore on users {\n  id\n  name\n  email\n  username\n  role\n  isActive\n  isStaff\n  clerkUserId\n  createdAt\n  updatedAt\n}\n\nfragment UserBasic on users {\n  id\n  name\n  email\n  role\n  isActive\n}\n\nfragment UserWithManager on users {\n  ...UserCore\n  managerId\n  manager {\n    ...UserBasic\n  }\n}\n\nfragment RoleCore on roles {\n  id\n  name\n  description\n  displayName\n  priority\n  isSystemRole\n  createdAt\n}\n\nfragment PermissionCore on permissions {\n  id\n  action\n  description\n  resourceId\n  createdAt\n  updatedAt\n}\n\nfragment PermissionWithResource on permissions {\n  ...PermissionCore\n  resource {\n    id\n    name\n    description\n  }\n}\n\nfragment ClientCore on clients {\n  id\n  name\n  contactEmail\n  contactPerson\n  contactPhone\n  active\n  createdAt\n  updatedAt\n}\n\nfragment ClientBasic on clients {\n  id\n  name\n  active\n}\n\nfragment PayrollCore on payrolls {\n  id\n  name\n  status\n  clientId\n  primaryConsultantUserId\n  managerUserId\n  createdAt\n  updatedAt\n}\n\nfragment PayrollBasic on payrolls {\n  id\n  name\n  status\n  clientId\n}\n\nfragment ResourceCore on resources {\n  id\n  name\n  displayName\n  description\n  createdAt\n  updatedAt\n}\n\nfragment UserRoleCore on user_roles {\n  id\n  userId\n  roleId\n  createdAt\n  updatedAt\n}\n\nfragment RolePermissionCore on role_permissions {\n  id\n  roleId\n  permissionId\n  conditions\n  createdAt\n  updatedAt\n}\n\nfragment AuditFields on audit_audit_log {\n  id\n  eventTime\n  action\n  resourceType\n  resourceId\n  userId\n  ipAddress\n  userAgent\n  success\n  user_email\n  user_role\n}": typeof types.UserCoreFragmentDoc,
};
const documents: Documents = {
    "fragment LeaveCore on leave {\n  id\n  userId\n  startDate\n  endDate\n  leaveType\n  reason\n  status\n}\n\nfragment LeaveWithUser on leave {\n  ...LeaveCore\n  user {\n    id\n    name\n    email\n    isStaff\n    managerId\n  }\n}\n\nfragment LeaveWithManager on leave {\n  ...LeaveWithUser\n  user {\n    manager {\n      id\n      name\n      email\n    }\n  }\n}": types.LeaveCoreFragmentDoc,
    "mutation CreateLeaveRequest($object: leave_insert_input!) {\n  insertLeave(object: $object) {\n    ...LeaveWithManager\n  }\n}\n\nmutation UpdateLeaveRequest($id: uuid!, $set: leave_set_input!) {\n  updateLeave(pk_columns: {id: $id}, _set: $set) {\n    ...LeaveWithManager\n  }\n}\n\nmutation ApproveLeaveRequest($id: uuid!) {\n  updateLeave(pk_columns: {id: $id}, _set: {status: \"Approved\"}) {\n    ...LeaveCore\n  }\n}\n\nmutation RejectLeaveRequest($id: uuid!, $reason: String) {\n  updateLeave(pk_columns: {id: $id}, _set: {reason: $reason}) {\n    ...LeaveCore\n  }\n}\n\nmutation DeleteLeaveRequest($id: uuid!) {\n  deleteLeave(id: $id) {\n    id\n  }\n}\n\nmutation BulkApproveLeaveRequests($ids: [uuid!]!) {\n  updateLeaves(where: {id: {_in: $ids}}, _set: {status: \"Approved\"}) {\n    affected_rows\n    returning {\n      ...LeaveCore\n    }\n  }\n}\n\nmutation BulkRejectLeaveRequests($ids: [uuid!]!, $reason: String) {\n  updateLeaves(where: {id: {_in: $ids}}, _set: {reason: $reason}) {\n    affected_rows\n    returning {\n      ...LeaveCore\n    }\n  }\n}": types.CreateLeaveRequestDocument,
    "query GetLeaveRequests($where: leave_bool_exp, $order_by: [leave_order_by!], $limit: Int, $offset: Int) {\n  leaves(where: $where, order_by: $order_by, limit: $limit, offset: $offset) {\n    ...LeaveWithManager\n  }\n  leavesAggregate(where: $where) {\n    aggregate {\n      count\n    }\n  }\n}\n\nquery GetLeaveRequestById($id: uuid!) {\n  leave(id: $id) {\n    ...LeaveWithManager\n  }\n}\n\nquery GetLeaveRequestsByUser($userId: uuid!, $startDate: date, $endDate: date) {\n  leaves(\n    where: {_and: [{userId: {_eq: $userId}}, {startDate: {_lte: $endDate}}, {endDate: {_gte: $startDate}}]}\n    order_by: {startDate: desc}\n  ) {\n    ...LeaveCore\n  }\n}\n\nquery GetPendingLeaveRequests($managerId: uuid) {\n  leaves(\n    where: {_and: [{status: {_eq: \"Pending\"}}, {user: {managerId: {_eq: $managerId}}}]}\n    order_by: {startDate: asc}\n  ) {\n    ...LeaveWithUser\n  }\n}\n\nquery GetLeaveOverlaps($startDate: date!, $endDate: date!, $excludeId: uuid) {\n  leaves(\n    where: {_and: [{startDate: {_lte: $endDate}}, {endDate: {_gte: $startDate}}, {status: {_neq: \"Rejected\"}}, {id: {_neq: $excludeId}}]}\n  ) {\n    ...LeaveWithUser\n  }\n}\n\nquery GetLeaveCalendar($startDate: date!, $endDate: date!, $userIds: [uuid!]) {\n  leaves(\n    where: {_and: [{startDate: {_lte: $endDate}}, {endDate: {_gte: $startDate}}, {status: {_eq: \"Approved\"}}, {userId: {_in: $userIds}}]}\n    order_by: {startDate: asc}\n  ) {\n    ...LeaveWithUser\n  }\n}\n\nquery GetLeaveAnalytics($startDate: date!, $endDate: date!) {\n  leave_by_type: leavesAggregate(\n    where: {startDate: {_gte: $startDate, _lte: $endDate}}\n  ) {\n    nodes {\n      leaveType\n    }\n    aggregate {\n      count\n    }\n  }\n  leave_by_status: leavesAggregate(\n    where: {startDate: {_gte: $startDate, _lte: $endDate}}\n  ) {\n    nodes {\n      status\n    }\n    aggregate {\n      count\n    }\n  }\n  leave_by_user: leaves(where: {}) {\n    user {\n      id\n      name\n    }\n  }\n}": types.GetLeaveRequestsDocument,
    "subscription SubscribeToLeaveRequests($userId: uuid!) {\n  leaves(where: {userId: {_eq: $userId}}, order_by: {startDate: desc}) {\n    ...LeaveWithManager\n  }\n}\n\nsubscription SubscribeToPendingLeaveRequests($managerId: uuid!) {\n  leaves(\n    where: {user: {managerId: {_eq: $managerId}}}\n    order_by: {startDate: asc}\n  ) {\n    ...LeaveWithUser\n  }\n}\n\nsubscription SubscribeToTeamLeave($user_ids: [uuid!]!) {\n  leaves(where: {}, order_by: {startDate: asc}) {\n    ...LeaveWithUser\n  }\n}": types.SubscribeToLeaveRequestsDocument,
    "fragment UserCore on users {\n  id\n  name\n  email\n  username\n  role\n  isActive\n  isStaff\n  clerkUserId\n  createdAt\n  updatedAt\n}\n\nfragment UserBasic on users {\n  id\n  name\n  email\n  role\n  isActive\n}\n\nfragment UserWithManager on users {\n  ...UserCore\n  managerId\n  manager {\n    ...UserBasic\n  }\n}\n\nfragment RoleCore on roles {\n  id\n  name\n  description\n  displayName\n  priority\n  isSystemRole\n  createdAt\n}\n\nfragment PermissionCore on permissions {\n  id\n  action\n  description\n  resourceId\n  createdAt\n  updatedAt\n}\n\nfragment PermissionWithResource on permissions {\n  ...PermissionCore\n  resource {\n    id\n    name\n    description\n  }\n}\n\nfragment ClientCore on clients {\n  id\n  name\n  contactEmail\n  contactPerson\n  contactPhone\n  active\n  createdAt\n  updatedAt\n}\n\nfragment ClientBasic on clients {\n  id\n  name\n  active\n}\n\nfragment PayrollCore on payrolls {\n  id\n  name\n  status\n  clientId\n  primaryConsultantUserId\n  managerUserId\n  createdAt\n  updatedAt\n}\n\nfragment PayrollBasic on payrolls {\n  id\n  name\n  status\n  clientId\n}\n\nfragment ResourceCore on resources {\n  id\n  name\n  displayName\n  description\n  createdAt\n  updatedAt\n}\n\nfragment UserRoleCore on user_roles {\n  id\n  userId\n  roleId\n  createdAt\n  updatedAt\n}\n\nfragment RolePermissionCore on role_permissions {\n  id\n  roleId\n  permissionId\n  conditions\n  createdAt\n  updatedAt\n}\n\nfragment AuditFields on audit_audit_log {\n  id\n  eventTime\n  action\n  resourceType\n  resourceId\n  userId\n  ipAddress\n  userAgent\n  success\n  user_email\n  user_role\n}": types.UserCoreFragmentDoc,
};

/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 *
 *
 * @example
 * ```ts
 * const query = graphql(`query GetUser($id: ID!) { user(id: $id) { name } }`);
 * ```
 *
 * The query argument is unknown!
 * Please regenerate the types.
 */
export function graphql(source: string): unknown;

/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "fragment LeaveCore on leave {\n  id\n  userId\n  startDate\n  endDate\n  leaveType\n  reason\n  status\n}\n\nfragment LeaveWithUser on leave {\n  ...LeaveCore\n  user {\n    id\n    name\n    email\n    isStaff\n    managerId\n  }\n}\n\nfragment LeaveWithManager on leave {\n  ...LeaveWithUser\n  user {\n    manager {\n      id\n      name\n      email\n    }\n  }\n}"): (typeof documents)["fragment LeaveCore on leave {\n  id\n  userId\n  startDate\n  endDate\n  leaveType\n  reason\n  status\n}\n\nfragment LeaveWithUser on leave {\n  ...LeaveCore\n  user {\n    id\n    name\n    email\n    isStaff\n    managerId\n  }\n}\n\nfragment LeaveWithManager on leave {\n  ...LeaveWithUser\n  user {\n    manager {\n      id\n      name\n      email\n    }\n  }\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "mutation CreateLeaveRequest($object: leave_insert_input!) {\n  insertLeave(object: $object) {\n    ...LeaveWithManager\n  }\n}\n\nmutation UpdateLeaveRequest($id: uuid!, $set: leave_set_input!) {\n  updateLeave(pk_columns: {id: $id}, _set: $set) {\n    ...LeaveWithManager\n  }\n}\n\nmutation ApproveLeaveRequest($id: uuid!) {\n  updateLeave(pk_columns: {id: $id}, _set: {status: \"Approved\"}) {\n    ...LeaveCore\n  }\n}\n\nmutation RejectLeaveRequest($id: uuid!, $reason: String) {\n  updateLeave(pk_columns: {id: $id}, _set: {reason: $reason}) {\n    ...LeaveCore\n  }\n}\n\nmutation DeleteLeaveRequest($id: uuid!) {\n  deleteLeave(id: $id) {\n    id\n  }\n}\n\nmutation BulkApproveLeaveRequests($ids: [uuid!]!) {\n  updateLeaves(where: {id: {_in: $ids}}, _set: {status: \"Approved\"}) {\n    affected_rows\n    returning {\n      ...LeaveCore\n    }\n  }\n}\n\nmutation BulkRejectLeaveRequests($ids: [uuid!]!, $reason: String) {\n  updateLeaves(where: {id: {_in: $ids}}, _set: {reason: $reason}) {\n    affected_rows\n    returning {\n      ...LeaveCore\n    }\n  }\n}"): (typeof documents)["mutation CreateLeaveRequest($object: leave_insert_input!) {\n  insertLeave(object: $object) {\n    ...LeaveWithManager\n  }\n}\n\nmutation UpdateLeaveRequest($id: uuid!, $set: leave_set_input!) {\n  updateLeave(pk_columns: {id: $id}, _set: $set) {\n    ...LeaveWithManager\n  }\n}\n\nmutation ApproveLeaveRequest($id: uuid!) {\n  updateLeave(pk_columns: {id: $id}, _set: {status: \"Approved\"}) {\n    ...LeaveCore\n  }\n}\n\nmutation RejectLeaveRequest($id: uuid!, $reason: String) {\n  updateLeave(pk_columns: {id: $id}, _set: {reason: $reason}) {\n    ...LeaveCore\n  }\n}\n\nmutation DeleteLeaveRequest($id: uuid!) {\n  deleteLeave(id: $id) {\n    id\n  }\n}\n\nmutation BulkApproveLeaveRequests($ids: [uuid!]!) {\n  updateLeaves(where: {id: {_in: $ids}}, _set: {status: \"Approved\"}) {\n    affected_rows\n    returning {\n      ...LeaveCore\n    }\n  }\n}\n\nmutation BulkRejectLeaveRequests($ids: [uuid!]!, $reason: String) {\n  updateLeaves(where: {id: {_in: $ids}}, _set: {reason: $reason}) {\n    affected_rows\n    returning {\n      ...LeaveCore\n    }\n  }\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "query GetLeaveRequests($where: leave_bool_exp, $order_by: [leave_order_by!], $limit: Int, $offset: Int) {\n  leaves(where: $where, order_by: $order_by, limit: $limit, offset: $offset) {\n    ...LeaveWithManager\n  }\n  leavesAggregate(where: $where) {\n    aggregate {\n      count\n    }\n  }\n}\n\nquery GetLeaveRequestById($id: uuid!) {\n  leave(id: $id) {\n    ...LeaveWithManager\n  }\n}\n\nquery GetLeaveRequestsByUser($userId: uuid!, $startDate: date, $endDate: date) {\n  leaves(\n    where: {_and: [{userId: {_eq: $userId}}, {startDate: {_lte: $endDate}}, {endDate: {_gte: $startDate}}]}\n    order_by: {startDate: desc}\n  ) {\n    ...LeaveCore\n  }\n}\n\nquery GetPendingLeaveRequests($managerId: uuid) {\n  leaves(\n    where: {_and: [{status: {_eq: \"Pending\"}}, {user: {managerId: {_eq: $managerId}}}]}\n    order_by: {startDate: asc}\n  ) {\n    ...LeaveWithUser\n  }\n}\n\nquery GetLeaveOverlaps($startDate: date!, $endDate: date!, $excludeId: uuid) {\n  leaves(\n    where: {_and: [{startDate: {_lte: $endDate}}, {endDate: {_gte: $startDate}}, {status: {_neq: \"Rejected\"}}, {id: {_neq: $excludeId}}]}\n  ) {\n    ...LeaveWithUser\n  }\n}\n\nquery GetLeaveCalendar($startDate: date!, $endDate: date!, $userIds: [uuid!]) {\n  leaves(\n    where: {_and: [{startDate: {_lte: $endDate}}, {endDate: {_gte: $startDate}}, {status: {_eq: \"Approved\"}}, {userId: {_in: $userIds}}]}\n    order_by: {startDate: asc}\n  ) {\n    ...LeaveWithUser\n  }\n}\n\nquery GetLeaveAnalytics($startDate: date!, $endDate: date!) {\n  leave_by_type: leavesAggregate(\n    where: {startDate: {_gte: $startDate, _lte: $endDate}}\n  ) {\n    nodes {\n      leaveType\n    }\n    aggregate {\n      count\n    }\n  }\n  leave_by_status: leavesAggregate(\n    where: {startDate: {_gte: $startDate, _lte: $endDate}}\n  ) {\n    nodes {\n      status\n    }\n    aggregate {\n      count\n    }\n  }\n  leave_by_user: leaves(where: {}) {\n    user {\n      id\n      name\n    }\n  }\n}"): (typeof documents)["query GetLeaveRequests($where: leave_bool_exp, $order_by: [leave_order_by!], $limit: Int, $offset: Int) {\n  leaves(where: $where, order_by: $order_by, limit: $limit, offset: $offset) {\n    ...LeaveWithManager\n  }\n  leavesAggregate(where: $where) {\n    aggregate {\n      count\n    }\n  }\n}\n\nquery GetLeaveRequestById($id: uuid!) {\n  leave(id: $id) {\n    ...LeaveWithManager\n  }\n}\n\nquery GetLeaveRequestsByUser($userId: uuid!, $startDate: date, $endDate: date) {\n  leaves(\n    where: {_and: [{userId: {_eq: $userId}}, {startDate: {_lte: $endDate}}, {endDate: {_gte: $startDate}}]}\n    order_by: {startDate: desc}\n  ) {\n    ...LeaveCore\n  }\n}\n\nquery GetPendingLeaveRequests($managerId: uuid) {\n  leaves(\n    where: {_and: [{status: {_eq: \"Pending\"}}, {user: {managerId: {_eq: $managerId}}}]}\n    order_by: {startDate: asc}\n  ) {\n    ...LeaveWithUser\n  }\n}\n\nquery GetLeaveOverlaps($startDate: date!, $endDate: date!, $excludeId: uuid) {\n  leaves(\n    where: {_and: [{startDate: {_lte: $endDate}}, {endDate: {_gte: $startDate}}, {status: {_neq: \"Rejected\"}}, {id: {_neq: $excludeId}}]}\n  ) {\n    ...LeaveWithUser\n  }\n}\n\nquery GetLeaveCalendar($startDate: date!, $endDate: date!, $userIds: [uuid!]) {\n  leaves(\n    where: {_and: [{startDate: {_lte: $endDate}}, {endDate: {_gte: $startDate}}, {status: {_eq: \"Approved\"}}, {userId: {_in: $userIds}}]}\n    order_by: {startDate: asc}\n  ) {\n    ...LeaveWithUser\n  }\n}\n\nquery GetLeaveAnalytics($startDate: date!, $endDate: date!) {\n  leave_by_type: leavesAggregate(\n    where: {startDate: {_gte: $startDate, _lte: $endDate}}\n  ) {\n    nodes {\n      leaveType\n    }\n    aggregate {\n      count\n    }\n  }\n  leave_by_status: leavesAggregate(\n    where: {startDate: {_gte: $startDate, _lte: $endDate}}\n  ) {\n    nodes {\n      status\n    }\n    aggregate {\n      count\n    }\n  }\n  leave_by_user: leaves(where: {}) {\n    user {\n      id\n      name\n    }\n  }\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "subscription SubscribeToLeaveRequests($userId: uuid!) {\n  leaves(where: {userId: {_eq: $userId}}, order_by: {startDate: desc}) {\n    ...LeaveWithManager\n  }\n}\n\nsubscription SubscribeToPendingLeaveRequests($managerId: uuid!) {\n  leaves(\n    where: {user: {managerId: {_eq: $managerId}}}\n    order_by: {startDate: asc}\n  ) {\n    ...LeaveWithUser\n  }\n}\n\nsubscription SubscribeToTeamLeave($user_ids: [uuid!]!) {\n  leaves(where: {}, order_by: {startDate: asc}) {\n    ...LeaveWithUser\n  }\n}"): (typeof documents)["subscription SubscribeToLeaveRequests($userId: uuid!) {\n  leaves(where: {userId: {_eq: $userId}}, order_by: {startDate: desc}) {\n    ...LeaveWithManager\n  }\n}\n\nsubscription SubscribeToPendingLeaveRequests($managerId: uuid!) {\n  leaves(\n    where: {user: {managerId: {_eq: $managerId}}}\n    order_by: {startDate: asc}\n  ) {\n    ...LeaveWithUser\n  }\n}\n\nsubscription SubscribeToTeamLeave($user_ids: [uuid!]!) {\n  leaves(where: {}, order_by: {startDate: asc}) {\n    ...LeaveWithUser\n  }\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "fragment UserCore on users {\n  id\n  name\n  email\n  username\n  role\n  isActive\n  isStaff\n  clerkUserId\n  createdAt\n  updatedAt\n}\n\nfragment UserBasic on users {\n  id\n  name\n  email\n  role\n  isActive\n}\n\nfragment UserWithManager on users {\n  ...UserCore\n  managerId\n  manager {\n    ...UserBasic\n  }\n}\n\nfragment RoleCore on roles {\n  id\n  name\n  description\n  displayName\n  priority\n  isSystemRole\n  createdAt\n}\n\nfragment PermissionCore on permissions {\n  id\n  action\n  description\n  resourceId\n  createdAt\n  updatedAt\n}\n\nfragment PermissionWithResource on permissions {\n  ...PermissionCore\n  resource {\n    id\n    name\n    description\n  }\n}\n\nfragment ClientCore on clients {\n  id\n  name\n  contactEmail\n  contactPerson\n  contactPhone\n  active\n  createdAt\n  updatedAt\n}\n\nfragment ClientBasic on clients {\n  id\n  name\n  active\n}\n\nfragment PayrollCore on payrolls {\n  id\n  name\n  status\n  clientId\n  primaryConsultantUserId\n  managerUserId\n  createdAt\n  updatedAt\n}\n\nfragment PayrollBasic on payrolls {\n  id\n  name\n  status\n  clientId\n}\n\nfragment ResourceCore on resources {\n  id\n  name\n  displayName\n  description\n  createdAt\n  updatedAt\n}\n\nfragment UserRoleCore on user_roles {\n  id\n  userId\n  roleId\n  createdAt\n  updatedAt\n}\n\nfragment RolePermissionCore on role_permissions {\n  id\n  roleId\n  permissionId\n  conditions\n  createdAt\n  updatedAt\n}\n\nfragment AuditFields on audit_audit_log {\n  id\n  eventTime\n  action\n  resourceType\n  resourceId\n  userId\n  ipAddress\n  userAgent\n  success\n  user_email\n  user_role\n}"): (typeof documents)["fragment UserCore on users {\n  id\n  name\n  email\n  username\n  role\n  isActive\n  isStaff\n  clerkUserId\n  createdAt\n  updatedAt\n}\n\nfragment UserBasic on users {\n  id\n  name\n  email\n  role\n  isActive\n}\n\nfragment UserWithManager on users {\n  ...UserCore\n  managerId\n  manager {\n    ...UserBasic\n  }\n}\n\nfragment RoleCore on roles {\n  id\n  name\n  description\n  displayName\n  priority\n  isSystemRole\n  createdAt\n}\n\nfragment PermissionCore on permissions {\n  id\n  action\n  description\n  resourceId\n  createdAt\n  updatedAt\n}\n\nfragment PermissionWithResource on permissions {\n  ...PermissionCore\n  resource {\n    id\n    name\n    description\n  }\n}\n\nfragment ClientCore on clients {\n  id\n  name\n  contactEmail\n  contactPerson\n  contactPhone\n  active\n  createdAt\n  updatedAt\n}\n\nfragment ClientBasic on clients {\n  id\n  name\n  active\n}\n\nfragment PayrollCore on payrolls {\n  id\n  name\n  status\n  clientId\n  primaryConsultantUserId\n  managerUserId\n  createdAt\n  updatedAt\n}\n\nfragment PayrollBasic on payrolls {\n  id\n  name\n  status\n  clientId\n}\n\nfragment ResourceCore on resources {\n  id\n  name\n  displayName\n  description\n  createdAt\n  updatedAt\n}\n\nfragment UserRoleCore on user_roles {\n  id\n  userId\n  roleId\n  createdAt\n  updatedAt\n}\n\nfragment RolePermissionCore on role_permissions {\n  id\n  roleId\n  permissionId\n  conditions\n  createdAt\n  updatedAt\n}\n\nfragment AuditFields on audit_audit_log {\n  id\n  eventTime\n  action\n  resourceType\n  resourceId\n  userId\n  ipAddress\n  userAgent\n  success\n  user_email\n  user_role\n}"];

export function graphql(source: string) {
  return (documents as any)[source] ?? {};
}

export type DocumentType<TDocumentNode extends DocumentNode<any, any>> = TDocumentNode extends DocumentNode<  infer TType,  any>  ? TType  : never;