# Audit Domain Subscriptions

# Monitor real-time audit events
subscription AuditLogStream(
  $resourceTypes: [String!]
  $actions: [String!]
  $sinceTimestamp: timestamptz!
) {
  auditAuditLog(
    where: {
      resourceType: {_in: $resourceTypes}
      action: {_in: $actions}
      eventTime: {_gte: $sinceTimestamp}
    }
    orderBy: {eventTime: DESC}
  ) {
    ...AuditLogEntry
  }
}

# Monitor auth events
subscription AuthEventStream($eventTypes: [String!], $sinceTimestamp: timestamptz!) {
  auditAuthEvents(
    where: {
      eventType: {_in: $eventTypes}
      eventTime: {_gte: $sinceTimestamp}
    }
    orderBy: {eventTime: DESC}
  ) {
    ...AuthEvent
  }
}

# Missing subscriptions needed by security pages
subscription SubscribeToAuditLogs($limit: Int = 50) {
  auditAuditLog(orderBy: { eventTime: DESC }, limit: $limit) {
    ...AuditLogEntry
  }
}

subscription SecurityEventsStream {
  auditAuditLog(
    where: { 
      resourceType: { _in: ["security", "auth", "permission"] }
    }
    orderBy: { eventTime: DESC }
    limit: 100
  ) {
    ...AuditLogEntry
  }
}

subscription FailedOperationsStream {
  auditAuditLog(
    where: { success: { _eq: false } }
    orderBy: { eventTime: DESC }
    limit: 50
  ) {
    ...AuditLogEntry
  }
}

subscription CriticalDataAccessStream {
  auditAuditLog(
    where: { 
      resourceType: { _in: ["users", "clients", "payrolls"] }
      action: { _in: ["delete", "create", "update"] }
    }
    orderBy: { eventTime: DESC }
    limit: 100
  ) {
    ...AuditLogEntry
  }
}

# Monitor data access events
subscription DataAccessStream($resourceTypes: [String!], $sinceTimestamp: timestamptz!) {
  auditDataAccessLog(
    where: {
      resourceType: {_in: $resourceTypes}
      accessedAt: {_gte: $sinceTimestamp}
    }
    orderBy: {accessedAt: DESC}
  ) {
    ...DataAccessLog
  }
}

# Monitor sensitive audit logs
subscription SensitiveAuditStream($resourceTypes: [String!]!, $sinceTimestamp: timestamptz!) {
  auditAuditLog(
    where: {
      resourceType: {_in: $resourceTypes}
      action: {_in: ["view", "export", "update", "delete"]}
      eventTime: {_gte: $sinceTimestamp}
    }
    orderBy: {eventTime: DESC}
  ) {
    ...AuditLogEntry
  }
}

# Monitor permission audit events
subscription PermissionAuditStream($sinceTimestamp: timestamptz!) {
  auditPermissionChanges(
    where: {
      changedAt: {_gte: $sinceTimestamp}
    }
    orderBy: {changedAt: DESC}
  ) {
    id
    targetUserId
    changedByUserId
    changeType
    reason
    changedAt
    oldPermissions
    newPermissions
  }
}