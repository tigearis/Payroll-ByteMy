# Audit Domain Queries

# Audit Logs
query GetAuditLogs(
  $where: audit_audit_log_bool_exp
  $order_by: [audit_audit_log_order_by!]
  $limit: Int
  $offset: Int
) {
  auditLogs(
    where: $where
    order_by: $order_by
    limit: $limit
    offset: $offset
  ) {
    ...AuditLogWithUser
  }
  auditLogsAggregate(where: $where) {
    aggregate {
      count
    }
  }
}

query GetAuditLogsByEntity(
  $entity_type: String!
  $entity_id: String!
  $limit: Int = 50
) {
  auditLogs(
    where: {
      resourceType: { _eq: $entity_type }
      resourceId: { _eq: $entity_id }
    }
    order_by: { eventTime: desc }
    limit: $limit
  ) {
    ...AuditLogWithUser
  }
}

query GetAuditLogsByUser(
  $user_id: uuid!
  $start_date: timestamptz
  $end_date: timestamptz
) {
  auditLogs(
    where: {
      userId: { _eq: $user_id }
      eventTime: { _gte: $start_date, _lte: $end_date }
    }
    order_by: { eventTime: desc }
  ) {
    ...AuditLogCore
  }
}

query GetFailedAuditLogs($start_date: timestamptz!, $end_date: timestamptz!) {
  auditLogs(
    where: {
      success: { _eq: false }
      eventTime: { _gte: $start_date, _lte: $end_date }
    }
    order_by: { eventTime: desc }
  ) {
    ...AuditLogWithUser
  }
}

# Data Access Logs
query GetDataAccessLogs(
  $where: audit_data_access_log_bool_exp
  $order_by: [audit_data_access_log_order_by!]
  $limit: Int
  $offset: Int
) {
  dataAccessLogs(
    where: $where
    order_by: $order_by
    limit: $limit
    offset: $offset
  ) {
    ...DataAccessLogCore
  }
  dataAccessLogsAggregate(where: $where) {
    aggregate {
      count
      sum {
        rowCount
      }
    }
  }
}

query GetDataExports($start_date: timestamptz!, $end_date: timestamptz!) {
  dataAccessLogs(
    where: {
      accessType: { _eq: "export" }
      accessedAt: { _gte: $start_date, _lte: $end_date }
    }
    order_by: { accessedAt: desc }
  ) {
    ...DataAccessLogCore
  }
}

# Auth Events
query GetAuthEvents(
  $where: audit_auth_events_bool_exp
  $order_by: [audit_auth_events_order_by!]
  $limit: Int
  $offset: Int
) {
  authEvents(
    where: $where
    order_by: $order_by
    limit: $limit
    offset: $offset
  ) {
    ...AuthEventCore
  }
}

query GetFailedAuthEvents($start_date: timestamptz!, $end_date: timestamptz!) {
  authEvents(
    where: {
      success: { _eq: false }
      eventTime: { _gte: $start_date, _lte: $end_date }
    }
    order_by: { eventTime: desc }
  ) {
    ...AuthEventCore
  }
}

# Permission Changes
query GetPermissionChanges(
  $where: audit_permission_changes_bool_exp
  $order_by: [audit_permission_changes_order_by!]
  $limit: Int
  $offset: Int
) {
  permissionChanges(
    where: $where
    order_by: $order_by
    limit: $limit
    offset: $offset
  ) {
    ...PermissionChangeCore
  }
}

# Comprehensive Security Overview for Dashboard
query SecurityOverview(
  $twentyFourHoursAgo: timestamptz!
  $sevenDaysAgo: timestamptz!
) {
  # Recent audit logs (last 24 hours)
  recent_audit_logs: auditLogs(
    where: { eventTime: { _gte: $twentyFourHoursAgo } }
    order_by: { eventTime: desc }
    limit: 100
  ) {
    id
    eventTime
    user_email
    user_role
    action
    resourceType
    resourceId
    success
    error_message
    ipAddress
    metadata
  }

  # Audit log count for metrics
  audit_log_count: auditLogsAggregate(
    where: { eventTime: { _gte: $twentyFourHoursAgo } }
  ) {
    aggregate {
      count
    }
  }

  # Failed operations in last 24 hours
  failed_operations: auditLogs(
    where: { success: { _eq: false }, eventTime: { _gte: $twentyFourHoursAgo } }
    order_by: { eventTime: desc }
    limit: 50
  ) {
    id
    eventTime
    user_email
    action
    resourceType
    error_message
    ipAddress
  }

  # Data access in last 7 days
  data_access_summary: dataAccessLogs(
    where: { accessedAt: { _gte: $sevenDaysAgo } }
    order_by: { accessedAt: desc }
    limit: 100
  ) {
    id
    accessedAt
    userId
    resourceType
    accessType
    dataClassification
    rowCount
    ipAddress
  }

  # Auth events summary
  auth_events_summary: authEvents(
    where: { eventTime: { _gte: $sevenDaysAgo } }
    order_by: { eventTime: desc }
    limit: 50
  ) {
    id
    eventTime
    eventType
    userId
    userEmail
    success
    failureReason
    ipAddress
  }
}

# Comprehensive Compliance Report for SOC2
query ComplianceReport($startDate: timestamptz!, $endDate: timestamptz!) {
  # Overall metrics
  audit_metrics: auditLogsAggregate(
    where: { created_at: { _gte: $startDate, _lte: $endDate } }
  ) {
    aggregate {
      count
    }
    nodes {
      success
      action
    }
  }

  # Failed operations by type
  failed_by_type: auditLogs(where: { success: { _eq: false } }) {
    action
    error_message
  }

  # Data access by classification
  data_access_stats: dataAccessLogsAggregate(
    where: { accessedAt: { _gte: $startDate, _lte: $endDate } }
  ) {
    aggregate {
      count
      sum {
        rowCount
      }
    }
    nodes {
      dataClassification
    }
  }

  # User activity
  user_activity: auditLogs(
    where: { eventTime: { _gte: $startDate, _lte: $endDate } }
    distinct_on: userId
  ) {
    userId
    user_email
    user_role
    eventTime
    action
  }
}

# Audit Analytics
query GetAuditAnalytics($startDate: timestamptz!, $endDate: timestamptz!) {
  # Audit log summary
  audit_summary: auditLogsAggregate(
    where: { eventTime: { _gte: $startDate, _lte: $endDate } }
  ) {
    aggregate {
      count
    }
  }

  # Failed operations by type
  failed_by_type: auditLogs(
    where: {
      success: { _eq: false }
      eventTime: { _gte: $startDate, _lte: $endDate }
    }
    order_by: { eventTime: desc }
    limit: 100
  ) {
    action
    resourceType
    error_message
  }

  # Data access by classification
  data_access_stats: dataAccessLogsAggregate(
    where: { accessedAt: { _gte: $startDate, _lte: $endDate } }
  ) {
    aggregate {
      count
      sum {
        rowCount
      }
    }
  }

  # User activity
  user_activity: auditLogs(
    where: { eventTime: { _gte: $startDate, _lte: $endDate } }
    distinct_on: userId
    order_by: { userId: asc, eventTime: desc }
    limit: 100
  ) {
    userId
    user_email
    user_role
    action
    eventTime
  }
}

# Note: Compliance report queries from app/api/audit/compliance-report/route.ts
# need to be migrated here, but the schema fields don't match current Hasura setup.
# Those API routes contain custom schema that may need to be implemented as Hasura views or functions.

# Migrated from inline operations - Priority 1 fixes

query AuditLog(
  $limit: Int!
  $offset: Int!
  $where: audit_audit_log_bool_exp
  $orderBy: [audit_audit_log_order_by!]
) {
  auditLogs(limit: $limit, offset: $offset, where: $where, order_by: $orderBy) {
    id
    userId
    user_role
    action
    resourceType
    resourceId
    success
    error_message
    ipAddress
    eventTime
  }
  auditLogsAggregate(where: $where) {
    aggregate {
      count
    }
  }
}
