# Audit Domain Queries

# Get audit logs with filters
query GetAuditLogs(
  $limit: Int = 50
  $offset: Int = 0
  $where: auditLogsBoolExp
  $orderBy: [auditLogsOrderBy!] = {eventTime: DESC}
) {
  auditLogs(
    limit: $limit
    offset: $offset
    where: $where
    orderBy: $orderBy
  ) {
    ...AuditLogEntry
  }
  auditLogsAggregate(where: $where) {
    aggregate {
      count
    }
  }
}

# Get auth events
query GetAuthEvents(
  $limit: Int = 20
  $offset: Int = 0
  $where: authEventsBoolExp
  $orderBy: [authEventsOrderBy!] = {eventTime: DESC}
) {
  authEvents(
    limit: $limit
    offset: $offset
    where: $where
    orderBy: $orderBy
  ) {
    ...AuthEvent
  }
  authEventsAggregate(where: $where) {
    aggregate {
      count
    }
  }
}

# Get audit summary for dashboard
query GetAuditSummary($timeRange: timestamptz!) {
  # Total actions
  totalActions: auditLogsAggregate(
    where: {eventTime: {_gte: $timeRange}}
  ) {
    aggregate {
      count
    }
  }
  
  # Actions by type - requires grouping query
  actionsByType: auditLogs(
    where: {eventTime: {_gte: $timeRange}}
    distinctOn: action
  ) {
    action
  }
  
  # Most active users - simplified without summary table
  mostActiveUsers: auditLogs(
    where: {eventTime: {_gte: $timeRange}}
    distinctOn: userId
    orderBy: {userId: ASC}
    limit: 5
  ) {
    userId
    # user relationship not available
  }
  
  # Auth events by type
  authEventsByType: authEvents(
    where: {eventTime: {_gte: $timeRange}}
    distinctOn: eventType
  ) {
    eventType
  }
}

# Get resource access history
query GetResourceAccessHistory(
  $resourceType: String!
  $resourceId: String!
  $limit: Int = 50
) {
  auditLogs(
    where: {
      resourceType: {_eq: $resourceType}
      resourceId: {_eq: $resourceId}
    }
    orderBy: {eventTime: DESC}
    limit: $limit
  ) {
    ...AuditLogEntry
  }
}

# GetUserActivityTimeline
# Comprehensive audit query that retrieves complete user activity timeline including both business actions and authentication events
# Domain: audit | Security: CRITICAL | Complexity: HIGH
# Params: userId (user to track), startDate, endDate (date range for timeline)
# Returns: Complete user activity data with auditLogs (business actions) and authEvents (authentication)
# Usage: Compliance reporting, security investigations, and user activity monitoring
# SOC2: Essential for audit trails and user activity tracking requirements
# Performance: Indexed on userId and eventTime for optimal query performance
# Security: Only accessible to users with audit_read permissions, follows SOC2 data retention
# Since: Initial audit system implementation | Classification: SOC2_CRITICAL
query GetUserActivityTimeline(
  $userId: uuid!
  $startDate: timestamptz!
  $endDate: timestamptz!
) {
  auditLogs(
    where: {
      userId: {_eq: $userId}
      eventTime: {_gte: $startDate, _lte: $endDate}
    }
    orderBy: {eventTime: DESC}
  ) {
    ...AuditLogEntry
  }
  
  # Login/logout events
  authEvents(
    where: {
      userId: {_eq: $userId}
      eventTime: {_gte: $startDate, _lte: $endDate}
    }
    orderBy: {eventTime: DESC}
  ) {
    id
    eventType
    success
    eventTime
    ipAddress
    userAgent
  }
}

# Get data access report
query GetDataAccessReport(
  $startDate: timestamptz!
  $endDate: timestamptz!
  $resourceType: String
) {
  dataAccessLogs(
    where: {
      accessedAt: {_gte: $startDate, _lte: $endDate}
      resourceType: {_eq: $resourceType}
    }
    orderBy: {accessedAt: DESC}
  ) {
    ...DataAccessLog
  }
}

# Get compliance audit trail
query GetComplianceAuditTrail(
  $startDate: timestamptz!
  $endDate: timestamptz!
) {
  # Permission changes
  permissionChanges: auditLogs(
    where: {
      resourceType: {_in: ["permission", "role", "permission_override"]}
      eventTime: {_gte: $startDate, _lte: $endDate}
    }
    orderBy: {eventTime: DESC}
  ) {
    ...AuditLogEntry
  }
  
  # User account changes
  userChanges: auditLogs(
    where: {
      resourceType: {_eq: "user"}
      action: {_in: ["create", "update", "delete"]}
      eventTime: {_gte: $startDate, _lte: $endDate}
    }
    orderBy: {eventTime: DESC}
  ) {
    ...AuditLogEntry
  }
  
  # Data exports
  dataExports: auditLogs(
    where: {
      action: {_eq: "export"}
      eventTime: {_gte: $startDate, _lte: $endDate}
    }
    orderBy: {eventTime: DESC}
  ) {
    ...AuditLogEntry
  }
}

# SOC2 Analytics & Reporting Queries
# Security Classification: CRITICAL - SOC2 compliance data

# Comprehensive SOC2 audit report generation
query GenerateSOC2AuditReport(
  $startDate: timestamptz!
  $endDate: timestamptz!
  $limit: Int = 1000
) {
  # Access controls and authentication
  authenticationEvents: authEvents(
    where: {eventTime: {_gte: $startDate, _lte: $endDate}}
    orderBy: {eventTime: DESC}
    limit: $limit
  ) {
    ...AuthEvent
  }
  
  # Data access patterns
  dataAccessEvents: dataAccessLogs(
    where: {accessedAt: {_gte: $startDate, _lte: $endDate}}
    orderBy: {accessedAt: DESC}
    limit: $limit
  ) {
    ...DataAccessLog
  }
  
  # System changes and configurations
  systemChanges: auditLogs(
    where: {
      eventTime: {_gte: $startDate, _lte: $endDate}
      resourceType: {_in: ["system", "configuration", "database"]}
    }
    orderBy: {eventTime: DESC}
    limit: $limit
  ) {
    ...AuditLogEntry
  }
  
  # Privileged access usage
  privilegedAccess: auditLogs(
    where: {
      eventTime: {_gte: $startDate, _lte: $endDate}
      userRole: {_in: ["admin", "super_admin"]}
    }
    orderBy: {eventTime: DESC}
    limit: $limit
  ) {
    ...AuditLogEntry
  }
}

# Missing operations needed by components
query AuditLog($id: uuid!) {
  auditLogById(id: $id) {
    ...AuditLogEntry
  }
}

query ComplianceReport($startDate: timestamptz!, $endDate: timestamptz!) {
  auditLogs(
    where: { eventTime: { _gte: $startDate, _lte: $endDate } }
    orderBy: { eventTime: DESC }
  ) {
    ...AuditLogEntry
  }
}

query ComplianceAuditLogs($startDate: timestamptz!, $endDate: timestamptz!) {
  auditLogs(
    where: { eventTime: { _gte: $startDate, _lte: $endDate } }
    orderBy: { eventTime: DESC }
  ) {
    ...AuditLogEntry
  }
}

query SecurityOverview($timeRange: timestamptz!) {
  totalAuditLogs: auditLogsAggregate(
    where: { eventTime: { _gte: $timeRange } }
  ) {
    aggregate { count }
  }
  
  failedLogins: authEventsAggregate(
    where: { 
      eventTime: { _gte: $timeRange }
      success: { _eq: false }
    }
  ) {
    aggregate { count }
  }
}

query CleanAllPayrollDates {
  payrollDates {
    id
    payrollId
    originalEftDate
  }
}

# Security incident analysis query
query GetSecurityIncidentAnalysis(
  $startDate: timestamptz!
  $endDate: timestamptz!
) {
  # Failed authentication attempts
  failedAuthentications: authEvents(
    where: {
      eventTime: {_gte: $startDate, _lte: $endDate}
      success: {_eq: false}
    }
    orderBy: {eventTime: DESC}
  ) {
    ...AuthEvent
  }
  
  # Suspicious activity patterns
  suspiciousActivity: auditLogs(
    where: {
      eventTime: {_gte: $startDate, _lte: $endDate}
      action: {_in: ["bulk_export", "mass_delete", "privilege_escalation"]}
    }
    orderBy: {eventTime: DESC}
  ) {
    ...AuditLogEntry
  }
  
  # Permission denials
  permissionDenials: auditLogs(
    where: {
      eventTime: {_gte: $startDate, _lte: $endDate}
      success: {_eq: false}
      action: {_like: "%denied%"}
    }
    orderBy: {eventTime: DESC}
  ) {
    ...AuditLogEntry
  }
}

# User activity analytics for compliance
query GetUserActivityAnalytics(
  $startDate: timestamptz!
  $endDate: timestamptz!
  $userId: uuid
) {
  # User session analytics
  userSessions: authEvents(
    where: {
      eventTime: {_gte: $startDate, _lte: $endDate}
      userId: {_eq: $userId}
      eventType: {_in: ["login", "logout", "session_timeout"]}
    }
    orderBy: {eventTime: DESC}
  ) {
    ...AuthEvent
  }
  
  # Resource access patterns
  resourceAccess: auditLogs(
    where: {
      eventTime: {_gte: $startDate, _lte: $endDate}
      userId: {_eq: $userId}
      action: {_in: ["view", "edit", "delete", "export"]}
    }
    orderBy: {eventTime: DESC}
  ) {
    ...AuditLogEntry
  }
  
  # Permission usage tracking
  permissionUsage: auditLogs(
    where: {
      eventTime: {_gte: $startDate, _lte: $endDate}
      userId: {_eq: $userId}
      resourceType: {_in: ["client", "payroll", "user", "billing"]}
    }
    orderBy: {eventTime: DESC}
  ) {
    ...AuditLogEntry
  }
}

# Data retention and cleanup analytics
query GetDataRetentionAnalytics($retentionDate: timestamptz!) {
  # Audit log retention analysis
  auditLogRetention: auditLogsAggregate {
    aggregate {
      count
      min {
        eventTime
      }
      max {
        eventTime
      }
    }
  }
  
  # Data access log retention
  dataAccessRetention: dataAccessLogsAggregate {
    aggregate {
      count
      min {
        accessedAt
      }
      max {
        accessedAt
      }
    }
  }
  
  # Old records requiring cleanup
  oldAuditLogs: auditLogsAggregate(
    where: {eventTime: {_lt: $retentionDate}}
  ) {
    aggregate {
      count
    }
  }
}

# System performance and health analytics
query GetSystemHealthAnalytics(
  $timeRange: timestamptz!
) {
  # API usage patterns
  apiUsage: auditLogsAggregate(
    where: {
      eventTime: {_gte: $timeRange}
      action: {_like: "api_%"}
    }
  ) {
    aggregate {
      count
    }
  }
  
  # Error rate analysis
  systemErrors: auditLogsAggregate(
    where: {
      eventTime: {_gte: $timeRange}
      success: {_eq: false}
    }
  ) {
    aggregate {
      count
    }
  }
  
  # Resource usage by type
  resourceUsageStats: auditLogsAggregate(
    where: {eventTime: {_gte: $timeRange}}
  ) {
    aggregate {
      count
    }
  }
}

# Advanced search across all audit data
query SearchAuditLogs(
  $searchTerm: String!
  $startDate: timestamptz
  $endDate: timestamptz
  $resourceTypes: [String!]
  $actions: [String!]
  $userIds: [uuid!]
  $limit: Int = 100
  $offset: Int = 0
) {
  auditLogs(
    where: {
      _and: [
        {eventTime: {_gte: $startDate, _lte: $endDate}}
        {
          _or: [
            {action: {_ilike: $searchTerm}}
            {resourceType: {_ilike: $searchTerm}}
            {resourceId: {_ilike: $searchTerm}}
            {userEmail: {_ilike: $searchTerm}}
          ]
        }
        {resourceType: {_in: $resourceTypes}}
        {action: {_in: $actions}}
        {userId: {_in: $userIds}}
      ]
    }
    orderBy: {eventTime: DESC}
    limit: $limit
    offset: $offset
  ) {
    ...AuditLogEntry
  }
  
  searchResults: auditLogsAggregate(
    where: {
      _and: [
        {eventTime: {_gte: $startDate, _lte: $endDate}}
        {
          _or: [
            {action: {_ilike: $searchTerm}}
            {resourceType: {_ilike: $searchTerm}}
            {resourceId: {_ilike: $searchTerm}}
            {userEmail: {_ilike: $searchTerm}}
          ]
        }
        {resourceType: {_in: $resourceTypes}}
        {action: {_in: $actions}}
        {userId: {_in: $userIds}}
      ]
    }
  ) {
    aggregate {
      count
    }
  }
}

# Compliance monitoring dashboard query
query GetComplianceMonitoringData($timeRange: timestamptz!) {
  # Recent critical events
  criticalEvents: auditLogs(
    where: {
      eventTime: {_gte: $timeRange}
      action: {_in: ["delete", "export", "privilege_change", "system_config"]}
    }
    orderBy: {eventTime: DESC}
    limit: 20
  ) {
    ...AuditLogEntry
  }
  
  # Authentication metrics
  authMetrics: authEventsAggregate(
    where: {eventTime: {_gte: $timeRange}}
  ) {
    aggregate {
      count
    }
  }
  
  # Failed access attempts
  failedAccess: authEventsAggregate(
    where: {
      eventTime: {_gte: $timeRange}
      success: {_eq: false}
    }
  ) {
    aggregate {
      count
    }
  }
  
  # Data classification access
  sensitiveDataAccess: dataAccessLogsAggregate(
    where: {
      accessedAt: {_gte: $timeRange}
      dataClassification: {_in: ["CRITICAL", "HIGH"]}
    }
  ) {
    aggregate {
      count
    }
  }
}

# Security Dashboard Overview Query
query GetSecurityDashboardOverview($timeRange: timestamptz!) {
  # Total users
  totalUsers: usersAggregate {
    aggregate {
      count
    }
  }
  
  # Active users
  activeUsers: usersAggregate(
    where: { isActive: { _eq: true } }
  ) {
    aggregate {
      count
    }
  }
  
  # Inactive users
  inactiveUsers: usersAggregate(
    where: { isActive: { _eq: false } }
  ) {
    aggregate {
      count
    }
  }
  
  # Total permissions count (estimate based on roles and permissions)
  totalRoles: rolesAggregate {
    aggregate {
      count
    }
  }
  
  # Recent security events count
  recentEvents: auditLogsAggregate(
    where: { eventTime: { _gte: $timeRange } }
  ) {
    aggregate {
      count
    }
  }
  
  # Failed login attempts for security score calculation
  failedLogins: authEventsAggregate(
    where: {
      eventTime: { _gte: $timeRange }
      success: { _eq: false }
      eventType: { _eq: "login" }
    }
  ) {
    aggregate {
      count
    }
  }
  
  # Total login attempts for security score calculation
  totalLogins: authEventsAggregate(
    where: {
      eventTime: { _gte: $timeRange }
      eventType: { _eq: "login" }
    }
  ) {
    aggregate {
      count
    }
  }
}

# Security Dashboard Recent Activity Query
query GetSecurityDashboardActivity($limit: Int = 10, $timeRange: timestamptz!) {
  # Recent security-related audit logs
  recentActivity: auditLogs(
    where: {
      eventTime: { _gte: $timeRange }
      action: { _in: [
        "permission_grant", 
        "permission_revoke", 
        "role_change", 
        "user_create", 
        "user_update", 
        "user_delete",
        "login_failure",
        "privilege_escalation"
      ] }
    }
    orderBy: { eventTime: DESC }
    limit: $limit
  ) {
    ...AuditLogEntry
  }
  
  # Recent auth events (failed logins, etc.)
  recentAuthEvents: authEvents(
    where: {
      eventTime: { _gte: $timeRange }
      _or: [
        { success: { _eq: false } }
        { eventType: { _in: ["login", "logout", "password_change"] } }
      ]
    }
    orderBy: { eventTime: DESC }
    limit: $limit
  ) {
    ...AuthEvent
  }
}

# Security Dashboard User Statistics
query GetSecurityUserStats {
  # Users by role distribution
  usersByRole: users {
    role
  }
  
  # Staff vs non-staff count
  staffCount: usersAggregate(
    where: { isStaff: { _eq: true } }
  ) {
    aggregate {
      count
    }
  }
  
  # Users with managers (for org structure analysis)
  usersWithManagers: usersAggregate(
    where: { managerId: { _isNull: false } }
  ) {
    aggregate {
      count
    }
  }
  
  # Recently created users (last 30 days)
  recentUsers: usersAggregate(
    where: { 
      createdAt: { _gte: "now() - interval '30 days'" }
    }
  ) {
    aggregate {
      count
    }
  }
}

# Security Audit Log Viewer with Pagination and Filtering
query GetSecurityAuditLogs(
  $limit: Int = 50
  $offset: Int = 0
  $timeRange: timestamptz!
  $searchTerm: String = ""
  $severityFilter: [String!] = []
  $actionFilter: [String!] = []
) {
  # Main audit logs with filtering
  auditLogs(
    where: {
      eventTime: { _gte: $timeRange }
      _and: [
        {
          _or: [
            { userEmail: { _ilike: $searchTerm } }
            { action: { _ilike: $searchTerm } }
            { resourceType: { _ilike: $searchTerm } }
            { resourceId: { _ilike: $searchTerm } }
          ]
        }
        { action: { _in: $actionFilter } }
      ]
    }
    orderBy: { eventTime: DESC }
    limit: $limit
    offset: $offset
  ) {
    ...AuditLogEntry
  }
  
  # Count for pagination
  auditLogsAggregate(
    where: {
      eventTime: { _gte: $timeRange }
      _and: [
        {
          _or: [
            { userEmail: { _ilike: $searchTerm } }
            { action: { _ilike: $searchTerm } }
            { resourceType: { _ilike: $searchTerm } }
            { resourceId: { _ilike: $searchTerm } }
          ]
        }
        { action: { _in: $actionFilter } }
      ]
    }
  ) {
    aggregate {
      count
    }
  }
  
  # Auth events with filtering
  authEvents(
    where: {
      eventTime: { _gte: $timeRange }
      _or: [
        { userEmail: { _ilike: $searchTerm } }
        { eventType: { _ilike: $searchTerm } }
      ]
    }
    orderBy: { eventTime: DESC }
    limit: $limit
    offset: $offset
  ) {
    ...AuthEvent
  }
}

# Permissions Dashboard Data
query GetPermissionsDashboardData {
  # All roles with their permissions
  roles(orderBy: { priority: DESC }) {
    id
    name
    displayName
    description
    priority
    isSystemRole
    assignedPermissionsAggregate {
      aggregate {
        count
      }
    }
    assignedToUsersAggregate {
      aggregate {
        count
      }
    }
  }
  
  # Users with their role assignments
  users(orderBy: { computedName: ASC }) {
    ...UserMinimal
    role
    isActive
    isStaff
    assignedRoles {
      assignedRole {
        id
        name
        displayName
        priority
      }
    }
  }
  
  # Permission overrides
  permissionOverrides(orderBy: { createdAt: DESC }, limit: 20) {
    ...PermissionOverrideInfo
  }
  
  # Recent permission changes from audit logs
  recentPermissionChanges: auditLogs(
    where: {
      resourceType: { _in: ["permission", "role", "user"] }
      action: { _in: ["permission_grant", "permission_revoke", "role_change"] }
      eventTime: { _gte: "now() - interval '7 days'" }
    }
    orderBy: { eventTime: DESC }
    limit: 10
  ) {
    ...AuditLogEntry
  }
}

# SOC2 Compliance Dashboard Data  
query GetSOC2ComplianceData($timeRange: timestamptz!) {
  # Total audit log coverage
  totalAuditLogs: auditLogsAggregate(
    where: { eventTime: { _gte: $timeRange } }
  ) {
    aggregate {
      count
    }
  }
  
  # Failed access attempts
  failedAccessAttempts: auditLogsAggregate(
    where: {
      eventTime: { _gte: $timeRange }
      success: { _eq: false }
    }
  ) {
    aggregate {
      count
    }
  }
  
  # Authentication events
  authenticationEvents: authEventsAggregate(
    where: { eventTime: { _gte: $timeRange } }
  ) {
    aggregate {
      count
    }
  }
  
  # Failed authentication events
  failedAuthentication: authEventsAggregate(
    where: {
      eventTime: { _gte: $timeRange }
      success: { _eq: false }
    }
  ) {
    aggregate {
      count
    }
  }
  
  # Data access logs
  dataAccessEvents: dataAccessLogsAggregate(
    where: { accessedAt: { _gte: $timeRange } }
  ) {
    aggregate {
      count
    }
  }
  
  # Critical/High data access
  sensitiveDataAccess: dataAccessLogsAggregate(
    where: {
      accessedAt: { _gte: $timeRange }
      dataClassification: { _in: ["CRITICAL", "HIGH"] }
    }
  ) {
    aggregate {
      count
    }
  }
  
  # Users with active sessions
  activeUsers: usersAggregate(
    where: { isActive: { _eq: true } }
  ) {
    aggregate {
      count
    }
  }
  
  # Total users
  totalUsers: usersAggregate {
    aggregate {
      count
    }
  }
  
  # Staff users
  staffUsers: usersAggregate(
    where: { isStaff: { _eq: true } }
  ) {
    aggregate {
      count
    }
  }
  
  # Recent critical security events
  criticalSecurityEvents: auditLogs(
    where: {
      eventTime: { _gte: $timeRange }
      action: { _in: ["delete", "export", "privilege_escalation", "unauthorized_access"] }
    }
    orderBy: { eventTime: DESC }
    limit: 10
  ) {
    ...AuditLogEntry
  }
}