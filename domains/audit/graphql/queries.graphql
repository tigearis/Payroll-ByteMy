# Audit Domain Queries

# Audit Logs
query GetAuditLogs(
  $where: auditLogsBoolExp
  $orderBy: [auditLogsOrderBy!]
  $limit: Int
  $offset: Int
) {
  auditLogs(
    where: $where
    orderBy: $orderBy
    limit: $limit
    offset: $offset
  ) {
    ...AuditLogWithUser
  }
  auditLogsAggregate(where: $where) {
    aggregate {
      count
    }
  }
}

query GetAuditLogsByEntity(
  $entityType: String!
  $entityId: String!
  $limit: Int = 50
) {
  auditLogs(
    where: {
      resourceType: { _eq: $entityType }
      resourceId: { _eq: $entityId }
    }
    orderBy: { eventTime: DESC }
    limit: $limit
  ) {
    ...AuditLogWithUser
  }
}

query GetAuditLogsByUser(
  $userId: uuid!
  $startDate: timestamptz
  $endDate: timestamptz
) {
  auditLogs(
    where: {
      userId: { _eq: $userId }
      eventTime: { _gte: $startDate, _lte: $endDate }
    }
    orderBy: { eventTime: DESC }
  ) {
    ...AuditLogCore
  }
}

query GetFailedAuditLogs($startDate: timestamptz!, $endDate: timestamptz!) {
  auditLogs(
    where: {
      success: { _eq: false }
      eventTime: { _gte: $startDate, _lte: $endDate }
    }
    orderBy: { eventTime: DESC }
  ) {
    ...AuditLogWithUser
  }
}

# Data Access Logs
query GetDataAccessLogs(
  $where: dataAccessLogsBoolExp
  $orderBy: [dataAccessLogsOrderBy!]
  $limit: Int
  $offset: Int
) {
  dataAccessLogs(
    where: $where
    orderBy: $orderBy
    limit: $limit
    offset: $offset
  ) {
    ...DataAccessLogCore
  }
  dataAccessLogsAggregate(where: $where) {
    aggregate {
      count
      sum {
        rowCount
      }
    }
  }
}

query GetDataExports($startDate: timestamptz!, $endDate: timestamptz!) {
  dataAccessLogs(
    where: {
      accessType: { _eq: "export" }
      accessedAt: { _gte: $startDate, _lte: $endDate }
    }
    orderBy: { accessedAt: DESC }
  ) {
    ...DataAccessLogCore
  }
}

# Auth Events
query GetAuthEvents(
  $where: authEventsBoolExp
  $orderBy: [authEventsOrderBy!]
  $limit: Int
  $offset: Int
) {
  authEvents(
    where: $where
    orderBy: $orderBy
    limit: $limit
    offset: $offset
  ) {
    ...AuthEventCore
  }
}

query GetFailedAuthEvents($startDate: timestamptz!, $endDate: timestamptz!) {
  authEvents(
    where: {
      success: { _eq: false }
      eventTime: { _gte: $startDate, _lte: $endDate }
    }
    orderBy: { eventTime: DESC }
  ) {
    ...AuthEventCore
  }
}

# Permission Changes
query GetPermissionChanges(
  $where: permissionChangesBoolExp
  $orderBy: [permissionChangesOrderBy!]
  $limit: Int
  $offset: Int
) {
  permissionChanges(
    where: $where
    orderBy: $orderBy
    limit: $limit
    offset: $offset
  ) {
    ...PermissionChangeCore
  }
}

# Comprehensive Security Overview for Dashboard
query SecurityOverview(
  $twentyFourHoursAgo: timestamptz!
  $sevenDaysAgo: timestamptz!
) {
  # Recent audit logs (last 24 hours)
  recentAuditLogs: auditLogs(
    where: { eventTime: { _gte: $twentyFourHoursAgo } }
    orderBy: { eventTime: DESC }
    limit: 100
  ) {
    id
    eventTime
    userId
    userEmail
    userRole
    action
    resourceType
    resourceId
    success
    errorMessage
    ipAddress
    metadata
  }

  # Audit log count for metrics
  auditLogCount: auditLogsAggregate(
    where: { eventTime: { _gte: $twentyFourHoursAgo } }
  ) {
    aggregate {
      count
    }
  }

  # Failed operations in last 24 hours
  failedOperations: auditLogs(
    where: { success: { _eq: false }, eventTime: { _gte: $twentyFourHoursAgo } }
    orderBy: { eventTime: DESC }
    limit: 50
  ) {
    id
    eventTime
    userId
    userEmail
    userRole
    action
    resourceType
    errorMessage
    ipAddress
  }

  # Data access in last 7 days
  dataAccessSummary: dataAccessLogs(
    where: { accessedAt: { _gte: $sevenDaysAgo } }
    orderBy: { accessedAt: DESC }
    limit: 100
  ) {
    id
    accessedAt
    userId
    resourceType
    accessType
    dataClassification
    rowCount
    ipAddress
  }

  # Auth events summary
  authEventsSummary: authEvents(
    where: { eventTime: { _gte: $sevenDaysAgo } }
    orderBy: { eventTime: DESC }
    limit: 50
  ) {
    id
    eventTime
    eventType
    userId
    userEmail
    success
    failureReason
    ipAddress
  }
}

# Comprehensive Compliance Report for SOC2
query ComplianceReport($startDate: timestamptz!, $endDate: timestamptz!) {
  # Overall metrics
  auditMetrics: auditLogsAggregate(
    where: { eventTime: { _gte: $startDate, _lte: $endDate } }
  ) {
    aggregate {
      count
    }
    nodes {
      success
      action
    }
  }

  # Failed operations by type
  failedByType: auditLogs(where: { success: { _eq: false } }) {
    action
    errorMessage
  }

  # Data access by classification
  dataAccessStats: dataAccessLogsAggregate(
    where: { accessedAt: { _gte: $startDate, _lte: $endDate } }
  ) {
    aggregate {
      count
      sum {
        rowCount
      }
    }
    nodes {
      dataClassification
    }
  }

  # User activity
  userActivity: auditLogs(
    where: { eventTime: { _gte: $startDate, _lte: $endDate } }
    distinctOn: [userId]
  ) {
    userId
    eventTime
    action
  }
}

# Audit Analytics
query GetAuditAnalytics($startDate: timestamptz!, $endDate: timestamptz!) {
  # Audit log summary
  auditSummary: auditLogsAggregate(
    where: { eventTime: { _gte: $startDate, _lte: $endDate } }
  ) {
    aggregate {
      count
    }
  }

  # Failed operations by type
  failedByType: auditLogs(
    where: {
      success: { _eq: false }
      eventTime: { _gte: $startDate, _lte: $endDate }
    }
    orderBy: { eventTime: DESC }
    limit: 100
  ) {
    action
    resourceType
    errorMessage
  }

  # Data access by classification
  dataAccessStats: dataAccessLogsAggregate(
    where: { accessedAt: { _gte: $startDate, _lte: $endDate } }
  ) {
    aggregate {
      count
      sum {
        rowCount
      }
    }
  }

  # User activity
  userActivity: auditLogs(
    where: { eventTime: { _gte: $startDate, _lte: $endDate } }
    distinctOn: [userId]
    orderBy: [{ userId: ASC }, { eventTime: DESC }]
    limit: 100
  ) {
    userId
    action
    eventTime
  }
}

# Compliance report queries migrated from app/api/audit/compliance-report/route.ts
# Note: These queries are commented out because the schema doesn't match the current Hasura setup
# They would need custom views or functions to be implemented properly

# query UserAccessReport($startDate: timestamptz!, $endDate: timestamptz!) {
#   userAccessSummary {
#     id
#     name
#     email
#     role
#     isActive
#     createdAt
#     updatedAt
#   }
#
#   auditLogsAggregate(
#     where: { eventTime: { _gte: $startDate, _lte: $endDate } }
#   ) {
#     aggregate {
#       count
#     }
#     nodes {
#       action
#       resourceType
#       success
#     }
#   }
# }

# Basic compliance report using existing schema
query ComplianceAuditLogs($startDate: timestamptz!, $endDate: timestamptz!) {
  auditLogs(
    where: { eventTime: { _gte: $startDate, _lte: $endDate } }
    orderBy: { eventTime: DESC }
  ) {
    id
    eventTime
    userId
    action
    resourceType
    resourceId
    success
    metadata
  }

  auditLogsAggregate(
    where: { eventTime: { _gte: $startDate, _lte: $endDate } }
  ) {
    aggregate {
      count
    }
  }
}

# Migrated from inline operations - Priority 1 fixes

query AuditLog(
  $limit: Int!
  $offset: Int!
  $where: auditLogsBoolExp
  $orderBy: [auditLogsOrderBy!]
) {
  auditLogs(limit: $limit, offset: $offset, where: $where, orderBy: $orderBy) {
    id
    userId
    userEmail
    userRole
    action
    resourceType
    resourceId
    success
    errorMessage
    ipAddress
    eventTime
  }
  auditLogsAggregate(where: $where) {
    aggregate {
      count
    }
  }
}
