# Audit Domain Mutations

# Note: Audit logs are typically created automatically by the system
# These mutations are for administrative purposes only

# Audit Log Management
mutation CreateAuditLog($object: audit_audit_log_insert_input!) {
  insertAuditLog(object: $object) {
    ...AuditLogCore
  }
}

# Data Access Log Management
mutation CreateDataAccessLog($object: audit_data_access_log_insert_input!) {
  insertDataAccessLog(object: $object) {
    ...DataAccessLogCore
  }
}

# Auth Event Management
mutation CreateAuthEvent($object: audit_auth_events_insert_input!) {
  insertAuthEvent(object: $object) {
    ...AuthEventCore
  }
}

# Permission Change Management
mutation CreatePermissionChange(
  $object: audit_permission_changes_insert_input!
) {
  insertPermissionChange(object: $object) {
    ...PermissionChangeCore
  }
}

# Bulk Operations
mutation BulkCreateAuditLogs($objects: [audit_audit_log_insert_input!]!) {
  insertAuditLogs(objects: $objects) {
    returning {
      ...AuditLogCore
    }
    affected_rows
  }
}

mutation UpdateAuditLog($id: uuid!, $set: audit_audit_log_set_input!) {
  updateAuditLog(pk_columns: { id: $id }, _set: $set) {
    ...AuditLogWithUser
  }
}

# Bulk operations for performance
mutation CreateMultipleAuditLogs($objects: [audit_audit_log_insert_input!]!) {
  insertAuditLogs(objects: $objects) {
    returning {
      ...AuditLogCore
    }
    affected_rows
  }
}

mutation CreateMultipleDataAccessLogs(
  $objects: [audit_data_access_log_insert_input!]!
) {
  insertDataAccessLogs(objects: $objects) {
    returning {
      ...DataAccessLogCore
    }
    affected_rows
  }
}

# Migrated from app/api/developer/clean-all-dates/route.ts

mutation CleanAllPayrollDates {
  deletePayrollDates(where: {}) {
    affected_rows
  }
  updatePayrolls(where: {}, _set: { versionNumber: 1 }) {
    affected_rows
  }
}

# ================================
# LOGGER SERVICE MUTATIONS
# Migrated from lib/security/audit/logger.ts
# ================================

# Log general audit events
mutation LogAuditEvent(
  $object: audit_audit_log_insert_input!
) {
  insertAuditLog(object: $object) {
    id
    eventTime
  }
}

# Log authentication events
mutation LogAuthEvent(
  $object: audit_auth_events_insert_input!
) {
  insertAuthEvent(object: $object) {
    id
    eventTime
  }
}

# SOC2 compliance logging using the custom function
mutation LogSOC2ComplianceEvent(
  $event: AuditEventInput!
) {
  logAuditEvent(event: $event) {
    success
    message
  }
}
