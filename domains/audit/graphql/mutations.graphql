# Audit Domain Mutations

# Note: Audit logs are typically created automatically by the system
# These mutations are for administrative purposes only

# Audit Log Management
mutation CreateAuditLog($object: auditLogsInsertInput!) {
  insertAuditLog(object: $object) {
    ...AuditLogCore
  }
}

# Data Access Log Management
mutation CreateDataAccessLog($object: dataAccessLogsInsertInput!) {
  insertDataAccessLog(object: $object) {
    ...DataAccessLogCore
  }
}

# Auth Event Management
mutation CreateAuthEvent($object: authEventsInsertInput!) {
  insertAuthEvent(object: $object) {
    ...AuthEventCore
  }
}

# Permission Change Management
mutation CreatePermissionChange(
  $object: permissionChangesInsertInput!
) {
  insertPermissionChange(object: $object) {
    ...PermissionChangeCore
  }
}

# Bulk Operations
mutation BulkCreateAuditLogs($objects: [auditLogsInsertInput!]!) {
  bulkInsertAuditLogs(objects: $objects) {
    returning {
      ...AuditLogCore
    }
    affectedRows
  }
}

mutation UpdateAuditLog($id: uuid!, $set: auditLogsSetInput!) {
  updateAuditLogById(pkColumns: { id: $id }, _set: $set) {
    ...AuditLogWithUser
  }
}

# Bulk operations for performance
mutation CreateMultipleAuditLogs($objects: [auditLogsInsertInput!]!) {
  bulkInsertAuditLogs(objects: $objects) {
    returning {
      ...AuditLogCore
    }
    affectedRows
  }
}

mutation CreateMultipleDataAccessLogs(
  $objects: [dataAccessLogsInsertInput!]!
) {
  bulkInsertDataAccessLogs(objects: $objects) {
    returning {
      ...DataAccessLogCore
    }
    affectedRows
  }
}

# Migrated from app/api/developer/clean-all-dates/route.ts

mutation CleanAllPayrollDates {
  bulkDeletePayrollDates(where: {}) {
    affectedRows
  }
  bulkUpdatePayrolls(where: {}, _set: { versionNumber: 1 }) {
    affectedRows
  }
}

# ================================
# LOGGER SERVICE MUTATIONS
# Migrated from lib/security/audit/logger.ts
# ================================

# Log general audit events
mutation LogAuditEvent($object: auditLogsInsertInput!) {
  insertAuditLog(object: $object) {
    id
    eventTime
  }
}

# Log authentication events
mutation LogAuthEvent($object: authEventsInsertInput!) {
  insertAuthEvent(object: $object) {
    id
    eventTime
  }
}

# SOC2 compliance logging using the custom function
mutation LogSOC2ComplianceEvent($event: AuditEventInput!) {
  logAuditEvent(event: $event) {
    success
    message
  }
}
