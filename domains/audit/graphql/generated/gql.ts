/* eslint-disable */
import * as types from "./graphql";
import type { TypedDocumentNode as DocumentNode } from "@graphql-typed-document-node/core";

/**
 * Map of all GraphQL operations in the project.
 *
 * This map has several performance disadvantages:
 * 1. It is not tree-shakeable, so it will include all operations in the project.
 * 2. It is not minifiable, so the string of a GraphQL query will be multiple times inside the bundle.
 * 3. It does not support dead code elimination, so it will add unused operations.
 *
 * Therefore it is highly recommended to use the babel or swc plugin for production.
 * Learn more about it here: https://the-guild.dev/graphql/codegen/plugins/presets/preset-client#reducing-bundle-size
 */
type Documents = {
  "fragment AuditLogCore on audit_audit_log {\n  id\n  userId\n  eventTime\n  user_email\n  user_role\n  action\n  resourceType\n  resourceId\n  success\n  ipAddress\n  userAgent\n  sessionId\n  metadata\n}\n\nfragment AuditLogWithUser on audit_audit_log {\n  ...AuditLogCore\n  oldValues\n  newValues\n  error_message\n  request_id\n  created_at\n}\n\nfragment DataAccessLogCore on audit_data_access_log {\n  id\n  userId\n  accessedAt\n  resourceType\n  resourceId\n  accessType\n  dataClassification\n  fieldsAccessed\n  queryExecuted\n  rowCount\n  ipAddress\n  sessionId\n  metadata\n}\n\nfragment AuthEventCore on audit_auth_events {\n  id\n  eventTime\n  eventType\n  userId\n  userEmail\n  ipAddress\n  userAgent\n  success\n  failureReason\n  metadata\n  createdAt\n}\n\nfragment PermissionChangeCore on audit_permission_changes {\n  id\n  changedAt\n  changedByUserId\n  targetUserId\n  targetRoleId\n  changeType\n  permissionType\n  oldPermissions\n  newPermissions\n  reason\n  approvedByUserId\n  metadata\n}": typeof types.AuditLogCoreFragmentDoc;
  "mutation CreateAuditLog($object: audit_audit_log_insert_input!) {\n  insertAuditLog(object: $object) {\n    ...AuditLogCore\n  }\n}\n\nmutation CreateDataAccessLog($object: audit_data_access_log_insert_input!) {\n  insertDataAccessLog(object: $object) {\n    ...DataAccessLogCore\n  }\n}\n\nmutation CreateAuthEvent($object: audit_auth_events_insert_input!) {\n  insertAuthEvent(object: $object) {\n    ...AuthEventCore\n  }\n}\n\nmutation CreatePermissionChange($object: audit_permission_changes_insert_input!) {\n  insertPermissionChange(object: $object) {\n    ...PermissionChangeCore\n  }\n}\n\nmutation BulkCreateAuditLogs($objects: [audit_audit_log_insert_input!]!) {\n  insertAuditLogs(objects: $objects) {\n    returning {\n      ...AuditLogCore\n    }\n    affected_rows\n  }\n}\n\nmutation UpdateAuditLog($id: uuid!, $set: audit_audit_log_set_input!) {\n  updateAuditLog(pk_columns: {id: $id}, _set: $set) {\n    ...AuditLogWithUser\n  }\n}\n\nmutation CreateMultipleAuditLogs($objects: [audit_audit_log_insert_input!]!) {\n  insertAuditLogs(objects: $objects) {\n    returning {\n      ...AuditLogCore\n    }\n    affected_rows\n  }\n}\n\nmutation CreateMultipleDataAccessLogs($objects: [audit_data_access_log_insert_input!]!) {\n  insertDataAccessLogs(objects: $objects) {\n    returning {\n      ...DataAccessLogCore\n    }\n    affected_rows\n  }\n}": typeof types.CreateAuditLogDocument;
  'query GetAuditLogs($where: audit_audit_log_bool_exp, $order_by: [audit_audit_log_order_by!], $limit: Int, $offset: Int) {\n  auditLogs(where: $where, order_by: $order_by, limit: $limit, offset: $offset) {\n    ...AuditLogWithUser\n  }\n  auditLogsAggregate(where: $where) {\n    aggregate {\n      count\n    }\n  }\n}\n\nquery GetAuditLogsByEntity($entity_type: String!, $entity_id: String!, $limit: Int = 50) {\n  auditLogs(\n    where: {resourceType: {_eq: $entity_type}, resourceId: {_eq: $entity_id}}\n    order_by: {eventTime: desc}\n    limit: $limit\n  ) {\n    ...AuditLogWithUser\n  }\n}\n\nquery GetAuditLogsByUser($user_id: uuid!, $start_date: timestamptz, $end_date: timestamptz) {\n  auditLogs(\n    where: {userId: {_eq: $user_id}, eventTime: {_gte: $start_date, _lte: $end_date}}\n    order_by: {eventTime: desc}\n  ) {\n    ...AuditLogCore\n  }\n}\n\nquery GetFailedAuditLogs($start_date: timestamptz!, $end_date: timestamptz!) {\n  auditLogs(\n    where: {success: {_eq: false}, eventTime: {_gte: $start_date, _lte: $end_date}}\n    order_by: {eventTime: desc}\n  ) {\n    ...AuditLogWithUser\n  }\n}\n\nquery GetDataAccessLogs($where: audit_data_access_log_bool_exp, $order_by: [audit_data_access_log_order_by!], $limit: Int, $offset: Int) {\n  dataAccessLogs(\n    where: $where\n    order_by: $order_by\n    limit: $limit\n    offset: $offset\n  ) {\n    ...DataAccessLogCore\n  }\n  dataAccessLogsAggregate(where: $where) {\n    aggregate {\n      count\n      sum {\n        rowCount\n      }\n    }\n  }\n}\n\nquery GetDataExports($start_date: timestamptz!, $end_date: timestamptz!) {\n  dataAccessLogs(\n    where: {accessType: {_eq: "export"}, accessedAt: {_gte: $start_date, _lte: $end_date}}\n    order_by: {accessedAt: desc}\n  ) {\n    ...DataAccessLogCore\n  }\n}\n\nquery GetAuthEvents($where: audit_auth_events_bool_exp, $order_by: [audit_auth_events_order_by!], $limit: Int, $offset: Int) {\n  authEvents(where: $where, order_by: $order_by, limit: $limit, offset: $offset) {\n    ...AuthEventCore\n  }\n}\n\nquery GetFailedAuthEvents($start_date: timestamptz!, $end_date: timestamptz!) {\n  authEvents(\n    where: {success: {_eq: false}, eventTime: {_gte: $start_date, _lte: $end_date}}\n    order_by: {eventTime: desc}\n  ) {\n    ...AuthEventCore\n  }\n}\n\nquery GetPermissionChanges($where: audit_permission_changes_bool_exp, $order_by: [audit_permission_changes_order_by!], $limit: Int, $offset: Int) {\n  permissionChanges(\n    where: $where\n    order_by: $order_by\n    limit: $limit\n    offset: $offset\n  ) {\n    ...PermissionChangeCore\n  }\n}\n\nquery SecurityOverview($twentyFourHoursAgo: timestamptz!, $sevenDaysAgo: timestamptz!) {\n  recent_audit_logs: auditLogs(\n    where: {eventTime: {_gte: $twentyFourHoursAgo}}\n    order_by: {eventTime: desc}\n    limit: 100\n  ) {\n    id\n    eventTime\n    user_email\n    user_role\n    action\n    resourceType\n    resourceId\n    success\n    error_message\n    ipAddress\n    metadata\n  }\n  audit_log_count: auditLogsAggregate(\n    where: {eventTime: {_gte: $twentyFourHoursAgo}}\n  ) {\n    aggregate {\n      count\n    }\n  }\n  failed_operations: auditLogs(\n    where: {success: {_eq: false}, eventTime: {_gte: $twentyFourHoursAgo}}\n    order_by: {eventTime: desc}\n    limit: 50\n  ) {\n    id\n    eventTime\n    user_email\n    action\n    resourceType\n    error_message\n    ipAddress\n  }\n  data_access_summary: dataAccessLogs(\n    where: {accessedAt: {_gte: $sevenDaysAgo}}\n    order_by: {accessedAt: desc}\n    limit: 100\n  ) {\n    id\n    accessedAt\n    userId\n    resourceType\n    accessType\n    dataClassification\n    rowCount\n    ipAddress\n  }\n  auth_events_summary: authEvents(\n    where: {eventTime: {_gte: $sevenDaysAgo}}\n    order_by: {eventTime: desc}\n    limit: 50\n  ) {\n    id\n    eventTime\n    eventType\n    userId\n    userEmail\n    success\n    failureReason\n    ipAddress\n  }\n}\n\nquery ComplianceReport($startDate: timestamptz!, $endDate: timestamptz!) {\n  audit_metrics: auditLogsAggregate(\n    where: {created_at: {_gte: $startDate, _lte: $endDate}}\n  ) {\n    aggregate {\n      count\n    }\n    nodes {\n      success\n      action\n    }\n  }\n  failed_by_type: auditLogs(where: {success: {_eq: false}}) {\n    action\n    error_message\n  }\n  data_access_stats: dataAccessLogsAggregate(\n    where: {accessedAt: {_gte: $startDate, _lte: $endDate}}\n  ) {\n    aggregate {\n      count\n      sum {\n        rowCount\n      }\n    }\n    nodes {\n      dataClassification\n    }\n  }\n  user_activity: auditLogs(\n    where: {eventTime: {_gte: $startDate, _lte: $endDate}}\n    distinct_on: userId\n  ) {\n    userId\n    user_email\n    user_role\n    eventTime\n    action\n  }\n}\n\nquery GetAuditAnalytics($startDate: timestamptz!, $endDate: timestamptz!) {\n  audit_summary: auditLogsAggregate(\n    where: {eventTime: {_gte: $startDate, _lte: $endDate}}\n  ) {\n    aggregate {\n      count\n    }\n  }\n  failed_by_type: auditLogs(\n    where: {success: {_eq: false}, eventTime: {_gte: $startDate, _lte: $endDate}}\n    order_by: {eventTime: desc}\n    limit: 100\n  ) {\n    action\n    resourceType\n    error_message\n  }\n  data_access_stats: dataAccessLogsAggregate(\n    where: {accessedAt: {_gte: $startDate, _lte: $endDate}}\n  ) {\n    aggregate {\n      count\n      sum {\n        rowCount\n      }\n    }\n  }\n  user_activity: auditLogs(\n    where: {eventTime: {_gte: $startDate, _lte: $endDate}}\n    distinct_on: userId\n    order_by: {userId: asc, eventTime: desc}\n    limit: 100\n  ) {\n    userId\n    user_email\n    user_role\n    action\n    eventTime\n  }\n}': typeof types.GetAuditLogsDocument;
  "subscription SubscribeToAuditLogs {\n  auditLogs(order_by: {eventTime: desc}, limit: 1) {\n    ...AuditLogWithUser\n  }\n}\n\nsubscription SubscribeToFailedOperations {\n  auditLogs(\n    where: {success: {_eq: false}}\n    order_by: {eventTime: desc}\n    limit: 10\n  ) {\n    ...AuditLogCore\n  }\n}\n\nsubscription SubscribeToUserAuditActivity($user_id: uuid!) {\n  auditLogs(\n    where: {userId: {_eq: $user_id}}\n    order_by: {eventTime: desc}\n    limit: 20\n  ) {\n    ...AuditLogCore\n  }\n}\n\nsubscription SubscribeToDataAccessLogs {\n  dataAccessLogs(order_by: {accessedAt: desc}, limit: 10) {\n    ...DataAccessLogCore\n  }\n}": typeof types.SubscribeToAuditLogsDocument;
};
const documents: Documents = {
  "fragment AuditLogCore on audit_audit_log {\n  id\n  userId\n  eventTime\n  user_email\n  user_role\n  action\n  resourceType\n  resourceId\n  success\n  ipAddress\n  userAgent\n  sessionId\n  metadata\n}\n\nfragment AuditLogWithUser on audit_audit_log {\n  ...AuditLogCore\n  oldValues\n  newValues\n  error_message\n  request_id\n  created_at\n}\n\nfragment DataAccessLogCore on audit_data_access_log {\n  id\n  userId\n  accessedAt\n  resourceType\n  resourceId\n  accessType\n  dataClassification\n  fieldsAccessed\n  queryExecuted\n  rowCount\n  ipAddress\n  sessionId\n  metadata\n}\n\nfragment AuthEventCore on audit_auth_events {\n  id\n  eventTime\n  eventType\n  userId\n  userEmail\n  ipAddress\n  userAgent\n  success\n  failureReason\n  metadata\n  createdAt\n}\n\nfragment PermissionChangeCore on audit_permission_changes {\n  id\n  changedAt\n  changedByUserId\n  targetUserId\n  targetRoleId\n  changeType\n  permissionType\n  oldPermissions\n  newPermissions\n  reason\n  approvedByUserId\n  metadata\n}":
    types.AuditLogCoreFragmentDoc,
  "mutation CreateAuditLog($object: audit_audit_log_insert_input!) {\n  insertAuditLog(object: $object) {\n    ...AuditLogCore\n  }\n}\n\nmutation CreateDataAccessLog($object: audit_data_access_log_insert_input!) {\n  insertDataAccessLog(object: $object) {\n    ...DataAccessLogCore\n  }\n}\n\nmutation CreateAuthEvent($object: audit_auth_events_insert_input!) {\n  insertAuthEvent(object: $object) {\n    ...AuthEventCore\n  }\n}\n\nmutation CreatePermissionChange($object: audit_permission_changes_insert_input!) {\n  insertPermissionChange(object: $object) {\n    ...PermissionChangeCore\n  }\n}\n\nmutation BulkCreateAuditLogs($objects: [audit_audit_log_insert_input!]!) {\n  insertAuditLogs(objects: $objects) {\n    returning {\n      ...AuditLogCore\n    }\n    affected_rows\n  }\n}\n\nmutation UpdateAuditLog($id: uuid!, $set: audit_audit_log_set_input!) {\n  updateAuditLog(pk_columns: {id: $id}, _set: $set) {\n    ...AuditLogWithUser\n  }\n}\n\nmutation CreateMultipleAuditLogs($objects: [audit_audit_log_insert_input!]!) {\n  insertAuditLogs(objects: $objects) {\n    returning {\n      ...AuditLogCore\n    }\n    affected_rows\n  }\n}\n\nmutation CreateMultipleDataAccessLogs($objects: [audit_data_access_log_insert_input!]!) {\n  insertDataAccessLogs(objects: $objects) {\n    returning {\n      ...DataAccessLogCore\n    }\n    affected_rows\n  }\n}":
    types.CreateAuditLogDocument,
  'query GetAuditLogs($where: audit_audit_log_bool_exp, $order_by: [audit_audit_log_order_by!], $limit: Int, $offset: Int) {\n  auditLogs(where: $where, order_by: $order_by, limit: $limit, offset: $offset) {\n    ...AuditLogWithUser\n  }\n  auditLogsAggregate(where: $where) {\n    aggregate {\n      count\n    }\n  }\n}\n\nquery GetAuditLogsByEntity($entity_type: String!, $entity_id: String!, $limit: Int = 50) {\n  auditLogs(\n    where: {resourceType: {_eq: $entity_type}, resourceId: {_eq: $entity_id}}\n    order_by: {eventTime: desc}\n    limit: $limit\n  ) {\n    ...AuditLogWithUser\n  }\n}\n\nquery GetAuditLogsByUser($user_id: uuid!, $start_date: timestamptz, $end_date: timestamptz) {\n  auditLogs(\n    where: {userId: {_eq: $user_id}, eventTime: {_gte: $start_date, _lte: $end_date}}\n    order_by: {eventTime: desc}\n  ) {\n    ...AuditLogCore\n  }\n}\n\nquery GetFailedAuditLogs($start_date: timestamptz!, $end_date: timestamptz!) {\n  auditLogs(\n    where: {success: {_eq: false}, eventTime: {_gte: $start_date, _lte: $end_date}}\n    order_by: {eventTime: desc}\n  ) {\n    ...AuditLogWithUser\n  }\n}\n\nquery GetDataAccessLogs($where: audit_data_access_log_bool_exp, $order_by: [audit_data_access_log_order_by!], $limit: Int, $offset: Int) {\n  dataAccessLogs(\n    where: $where\n    order_by: $order_by\n    limit: $limit\n    offset: $offset\n  ) {\n    ...DataAccessLogCore\n  }\n  dataAccessLogsAggregate(where: $where) {\n    aggregate {\n      count\n      sum {\n        rowCount\n      }\n    }\n  }\n}\n\nquery GetDataExports($start_date: timestamptz!, $end_date: timestamptz!) {\n  dataAccessLogs(\n    where: {accessType: {_eq: "export"}, accessedAt: {_gte: $start_date, _lte: $end_date}}\n    order_by: {accessedAt: desc}\n  ) {\n    ...DataAccessLogCore\n  }\n}\n\nquery GetAuthEvents($where: audit_auth_events_bool_exp, $order_by: [audit_auth_events_order_by!], $limit: Int, $offset: Int) {\n  authEvents(where: $where, order_by: $order_by, limit: $limit, offset: $offset) {\n    ...AuthEventCore\n  }\n}\n\nquery GetFailedAuthEvents($start_date: timestamptz!, $end_date: timestamptz!) {\n  authEvents(\n    where: {success: {_eq: false}, eventTime: {_gte: $start_date, _lte: $end_date}}\n    order_by: {eventTime: desc}\n  ) {\n    ...AuthEventCore\n  }\n}\n\nquery GetPermissionChanges($where: audit_permission_changes_bool_exp, $order_by: [audit_permission_changes_order_by!], $limit: Int, $offset: Int) {\n  permissionChanges(\n    where: $where\n    order_by: $order_by\n    limit: $limit\n    offset: $offset\n  ) {\n    ...PermissionChangeCore\n  }\n}\n\nquery SecurityOverview($twentyFourHoursAgo: timestamptz!, $sevenDaysAgo: timestamptz!) {\n  recent_audit_logs: auditLogs(\n    where: {eventTime: {_gte: $twentyFourHoursAgo}}\n    order_by: {eventTime: desc}\n    limit: 100\n  ) {\n    id\n    eventTime\n    user_email\n    user_role\n    action\n    resourceType\n    resourceId\n    success\n    error_message\n    ipAddress\n    metadata\n  }\n  audit_log_count: auditLogsAggregate(\n    where: {eventTime: {_gte: $twentyFourHoursAgo}}\n  ) {\n    aggregate {\n      count\n    }\n  }\n  failed_operations: auditLogs(\n    where: {success: {_eq: false}, eventTime: {_gte: $twentyFourHoursAgo}}\n    order_by: {eventTime: desc}\n    limit: 50\n  ) {\n    id\n    eventTime\n    user_email\n    action\n    resourceType\n    error_message\n    ipAddress\n  }\n  data_access_summary: dataAccessLogs(\n    where: {accessedAt: {_gte: $sevenDaysAgo}}\n    order_by: {accessedAt: desc}\n    limit: 100\n  ) {\n    id\n    accessedAt\n    userId\n    resourceType\n    accessType\n    dataClassification\n    rowCount\n    ipAddress\n  }\n  auth_events_summary: authEvents(\n    where: {eventTime: {_gte: $sevenDaysAgo}}\n    order_by: {eventTime: desc}\n    limit: 50\n  ) {\n    id\n    eventTime\n    eventType\n    userId\n    userEmail\n    success\n    failureReason\n    ipAddress\n  }\n}\n\nquery ComplianceReport($startDate: timestamptz!, $endDate: timestamptz!) {\n  audit_metrics: auditLogsAggregate(\n    where: {created_at: {_gte: $startDate, _lte: $endDate}}\n  ) {\n    aggregate {\n      count\n    }\n    nodes {\n      success\n      action\n    }\n  }\n  failed_by_type: auditLogs(where: {success: {_eq: false}}) {\n    action\n    error_message\n  }\n  data_access_stats: dataAccessLogsAggregate(\n    where: {accessedAt: {_gte: $startDate, _lte: $endDate}}\n  ) {\n    aggregate {\n      count\n      sum {\n        rowCount\n      }\n    }\n    nodes {\n      dataClassification\n    }\n  }\n  user_activity: auditLogs(\n    where: {eventTime: {_gte: $startDate, _lte: $endDate}}\n    distinct_on: userId\n  ) {\n    userId\n    user_email\n    user_role\n    eventTime\n    action\n  }\n}\n\nquery GetAuditAnalytics($startDate: timestamptz!, $endDate: timestamptz!) {\n  audit_summary: auditLogsAggregate(\n    where: {eventTime: {_gte: $startDate, _lte: $endDate}}\n  ) {\n    aggregate {\n      count\n    }\n  }\n  failed_by_type: auditLogs(\n    where: {success: {_eq: false}, eventTime: {_gte: $startDate, _lte: $endDate}}\n    order_by: {eventTime: desc}\n    limit: 100\n  ) {\n    action\n    resourceType\n    error_message\n  }\n  data_access_stats: dataAccessLogsAggregate(\n    where: {accessedAt: {_gte: $startDate, _lte: $endDate}}\n  ) {\n    aggregate {\n      count\n      sum {\n        rowCount\n      }\n    }\n  }\n  user_activity: auditLogs(\n    where: {eventTime: {_gte: $startDate, _lte: $endDate}}\n    distinct_on: userId\n    order_by: {userId: asc, eventTime: desc}\n    limit: 100\n  ) {\n    userId\n    user_email\n    user_role\n    action\n    eventTime\n  }\n}':
    types.GetAuditLogsDocument,
  "subscription SubscribeToAuditLogs {\n  auditLogs(order_by: {eventTime: desc}, limit: 1) {\n    ...AuditLogWithUser\n  }\n}\n\nsubscription SubscribeToFailedOperations {\n  auditLogs(\n    where: {success: {_eq: false}}\n    order_by: {eventTime: desc}\n    limit: 10\n  ) {\n    ...AuditLogCore\n  }\n}\n\nsubscription SubscribeToUserAuditActivity($user_id: uuid!) {\n  auditLogs(\n    where: {userId: {_eq: $user_id}}\n    order_by: {eventTime: desc}\n    limit: 20\n  ) {\n    ...AuditLogCore\n  }\n}\n\nsubscription SubscribeToDataAccessLogs {\n  dataAccessLogs(order_by: {accessedAt: desc}, limit: 10) {\n    ...DataAccessLogCore\n  }\n}":
    types.SubscribeToAuditLogsDocument,
};

/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 *
 *
 * @example
 * ```ts
 * const query = graphql(`query GetUser($id: ID!) { user(id: $id) { name } }`);
 * ```
 *
 * The query argument is unknown!
 * Please regenerate the types.
 */
export function graphql(source: string): unknown;

/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(
  source: "fragment AuditLogCore on audit_audit_log {\n  id\n  userId\n  eventTime\n  user_email\n  user_role\n  action\n  resourceType\n  resourceId\n  success\n  ipAddress\n  userAgent\n  sessionId\n  metadata\n}\n\nfragment AuditLogWithUser on audit_audit_log {\n  ...AuditLogCore\n  oldValues\n  newValues\n  error_message\n  request_id\n  created_at\n}\n\nfragment DataAccessLogCore on audit_data_access_log {\n  id\n  userId\n  accessedAt\n  resourceType\n  resourceId\n  accessType\n  dataClassification\n  fieldsAccessed\n  queryExecuted\n  rowCount\n  ipAddress\n  sessionId\n  metadata\n}\n\nfragment AuthEventCore on audit_auth_events {\n  id\n  eventTime\n  eventType\n  userId\n  userEmail\n  ipAddress\n  userAgent\n  success\n  failureReason\n  metadata\n  createdAt\n}\n\nfragment PermissionChangeCore on audit_permission_changes {\n  id\n  changedAt\n  changedByUserId\n  targetUserId\n  targetRoleId\n  changeType\n  permissionType\n  oldPermissions\n  newPermissions\n  reason\n  approvedByUserId\n  metadata\n}"
): (typeof documents)["fragment AuditLogCore on audit_audit_log {\n  id\n  userId\n  eventTime\n  user_email\n  user_role\n  action\n  resourceType\n  resourceId\n  success\n  ipAddress\n  userAgent\n  sessionId\n  metadata\n}\n\nfragment AuditLogWithUser on audit_audit_log {\n  ...AuditLogCore\n  oldValues\n  newValues\n  error_message\n  request_id\n  created_at\n}\n\nfragment DataAccessLogCore on audit_data_access_log {\n  id\n  userId\n  accessedAt\n  resourceType\n  resourceId\n  accessType\n  dataClassification\n  fieldsAccessed\n  queryExecuted\n  rowCount\n  ipAddress\n  sessionId\n  metadata\n}\n\nfragment AuthEventCore on audit_auth_events {\n  id\n  eventTime\n  eventType\n  userId\n  userEmail\n  ipAddress\n  userAgent\n  success\n  failureReason\n  metadata\n  createdAt\n}\n\nfragment PermissionChangeCore on audit_permission_changes {\n  id\n  changedAt\n  changedByUserId\n  targetUserId\n  targetRoleId\n  changeType\n  permissionType\n  oldPermissions\n  newPermissions\n  reason\n  approvedByUserId\n  metadata\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(
  source: "mutation CreateAuditLog($object: audit_audit_log_insert_input!) {\n  insertAuditLog(object: $object) {\n    ...AuditLogCore\n  }\n}\n\nmutation CreateDataAccessLog($object: audit_data_access_log_insert_input!) {\n  insertDataAccessLog(object: $object) {\n    ...DataAccessLogCore\n  }\n}\n\nmutation CreateAuthEvent($object: audit_auth_events_insert_input!) {\n  insertAuthEvent(object: $object) {\n    ...AuthEventCore\n  }\n}\n\nmutation CreatePermissionChange($object: audit_permission_changes_insert_input!) {\n  insertPermissionChange(object: $object) {\n    ...PermissionChangeCore\n  }\n}\n\nmutation BulkCreateAuditLogs($objects: [audit_audit_log_insert_input!]!) {\n  insertAuditLogs(objects: $objects) {\n    returning {\n      ...AuditLogCore\n    }\n    affected_rows\n  }\n}\n\nmutation UpdateAuditLog($id: uuid!, $set: audit_audit_log_set_input!) {\n  updateAuditLog(pk_columns: {id: $id}, _set: $set) {\n    ...AuditLogWithUser\n  }\n}\n\nmutation CreateMultipleAuditLogs($objects: [audit_audit_log_insert_input!]!) {\n  insertAuditLogs(objects: $objects) {\n    returning {\n      ...AuditLogCore\n    }\n    affected_rows\n  }\n}\n\nmutation CreateMultipleDataAccessLogs($objects: [audit_data_access_log_insert_input!]!) {\n  insertDataAccessLogs(objects: $objects) {\n    returning {\n      ...DataAccessLogCore\n    }\n    affected_rows\n  }\n}"
): (typeof documents)["mutation CreateAuditLog($object: audit_audit_log_insert_input!) {\n  insertAuditLog(object: $object) {\n    ...AuditLogCore\n  }\n}\n\nmutation CreateDataAccessLog($object: audit_data_access_log_insert_input!) {\n  insertDataAccessLog(object: $object) {\n    ...DataAccessLogCore\n  }\n}\n\nmutation CreateAuthEvent($object: audit_auth_events_insert_input!) {\n  insertAuthEvent(object: $object) {\n    ...AuthEventCore\n  }\n}\n\nmutation CreatePermissionChange($object: audit_permission_changes_insert_input!) {\n  insertPermissionChange(object: $object) {\n    ...PermissionChangeCore\n  }\n}\n\nmutation BulkCreateAuditLogs($objects: [audit_audit_log_insert_input!]!) {\n  insertAuditLogs(objects: $objects) {\n    returning {\n      ...AuditLogCore\n    }\n    affected_rows\n  }\n}\n\nmutation UpdateAuditLog($id: uuid!, $set: audit_audit_log_set_input!) {\n  updateAuditLog(pk_columns: {id: $id}, _set: $set) {\n    ...AuditLogWithUser\n  }\n}\n\nmutation CreateMultipleAuditLogs($objects: [audit_audit_log_insert_input!]!) {\n  insertAuditLogs(objects: $objects) {\n    returning {\n      ...AuditLogCore\n    }\n    affected_rows\n  }\n}\n\nmutation CreateMultipleDataAccessLogs($objects: [audit_data_access_log_insert_input!]!) {\n  insertDataAccessLogs(objects: $objects) {\n    returning {\n      ...DataAccessLogCore\n    }\n    affected_rows\n  }\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(
  source: 'query GetAuditLogs($where: audit_audit_log_bool_exp, $order_by: [audit_audit_log_order_by!], $limit: Int, $offset: Int) {\n  auditLogs(where: $where, order_by: $order_by, limit: $limit, offset: $offset) {\n    ...AuditLogWithUser\n  }\n  auditLogsAggregate(where: $where) {\n    aggregate {\n      count\n    }\n  }\n}\n\nquery GetAuditLogsByEntity($entity_type: String!, $entity_id: String!, $limit: Int = 50) {\n  auditLogs(\n    where: {resourceType: {_eq: $entity_type}, resourceId: {_eq: $entity_id}}\n    order_by: {eventTime: desc}\n    limit: $limit\n  ) {\n    ...AuditLogWithUser\n  }\n}\n\nquery GetAuditLogsByUser($user_id: uuid!, $start_date: timestamptz, $end_date: timestamptz) {\n  auditLogs(\n    where: {userId: {_eq: $user_id}, eventTime: {_gte: $start_date, _lte: $end_date}}\n    order_by: {eventTime: desc}\n  ) {\n    ...AuditLogCore\n  }\n}\n\nquery GetFailedAuditLogs($start_date: timestamptz!, $end_date: timestamptz!) {\n  auditLogs(\n    where: {success: {_eq: false}, eventTime: {_gte: $start_date, _lte: $end_date}}\n    order_by: {eventTime: desc}\n  ) {\n    ...AuditLogWithUser\n  }\n}\n\nquery GetDataAccessLogs($where: audit_data_access_log_bool_exp, $order_by: [audit_data_access_log_order_by!], $limit: Int, $offset: Int) {\n  dataAccessLogs(\n    where: $where\n    order_by: $order_by\n    limit: $limit\n    offset: $offset\n  ) {\n    ...DataAccessLogCore\n  }\n  dataAccessLogsAggregate(where: $where) {\n    aggregate {\n      count\n      sum {\n        rowCount\n      }\n    }\n  }\n}\n\nquery GetDataExports($start_date: timestamptz!, $end_date: timestamptz!) {\n  dataAccessLogs(\n    where: {accessType: {_eq: "export"}, accessedAt: {_gte: $start_date, _lte: $end_date}}\n    order_by: {accessedAt: desc}\n  ) {\n    ...DataAccessLogCore\n  }\n}\n\nquery GetAuthEvents($where: audit_auth_events_bool_exp, $order_by: [audit_auth_events_order_by!], $limit: Int, $offset: Int) {\n  authEvents(where: $where, order_by: $order_by, limit: $limit, offset: $offset) {\n    ...AuthEventCore\n  }\n}\n\nquery GetFailedAuthEvents($start_date: timestamptz!, $end_date: timestamptz!) {\n  authEvents(\n    where: {success: {_eq: false}, eventTime: {_gte: $start_date, _lte: $end_date}}\n    order_by: {eventTime: desc}\n  ) {\n    ...AuthEventCore\n  }\n}\n\nquery GetPermissionChanges($where: audit_permission_changes_bool_exp, $order_by: [audit_permission_changes_order_by!], $limit: Int, $offset: Int) {\n  permissionChanges(\n    where: $where\n    order_by: $order_by\n    limit: $limit\n    offset: $offset\n  ) {\n    ...PermissionChangeCore\n  }\n}\n\nquery SecurityOverview($twentyFourHoursAgo: timestamptz!, $sevenDaysAgo: timestamptz!) {\n  recent_audit_logs: auditLogs(\n    where: {eventTime: {_gte: $twentyFourHoursAgo}}\n    order_by: {eventTime: desc}\n    limit: 100\n  ) {\n    id\n    eventTime\n    user_email\n    user_role\n    action\n    resourceType\n    resourceId\n    success\n    error_message\n    ipAddress\n    metadata\n  }\n  audit_log_count: auditLogsAggregate(\n    where: {eventTime: {_gte: $twentyFourHoursAgo}}\n  ) {\n    aggregate {\n      count\n    }\n  }\n  failed_operations: auditLogs(\n    where: {success: {_eq: false}, eventTime: {_gte: $twentyFourHoursAgo}}\n    order_by: {eventTime: desc}\n    limit: 50\n  ) {\n    id\n    eventTime\n    user_email\n    action\n    resourceType\n    error_message\n    ipAddress\n  }\n  data_access_summary: dataAccessLogs(\n    where: {accessedAt: {_gte: $sevenDaysAgo}}\n    order_by: {accessedAt: desc}\n    limit: 100\n  ) {\n    id\n    accessedAt\n    userId\n    resourceType\n    accessType\n    dataClassification\n    rowCount\n    ipAddress\n  }\n  auth_events_summary: authEvents(\n    where: {eventTime: {_gte: $sevenDaysAgo}}\n    order_by: {eventTime: desc}\n    limit: 50\n  ) {\n    id\n    eventTime\n    eventType\n    userId\n    userEmail\n    success\n    failureReason\n    ipAddress\n  }\n}\n\nquery ComplianceReport($startDate: timestamptz!, $endDate: timestamptz!) {\n  audit_metrics: auditLogsAggregate(\n    where: {created_at: {_gte: $startDate, _lte: $endDate}}\n  ) {\n    aggregate {\n      count\n    }\n    nodes {\n      success\n      action\n    }\n  }\n  failed_by_type: auditLogs(where: {success: {_eq: false}}) {\n    action\n    error_message\n  }\n  data_access_stats: dataAccessLogsAggregate(\n    where: {accessedAt: {_gte: $startDate, _lte: $endDate}}\n  ) {\n    aggregate {\n      count\n      sum {\n        rowCount\n      }\n    }\n    nodes {\n      dataClassification\n    }\n  }\n  user_activity: auditLogs(\n    where: {eventTime: {_gte: $startDate, _lte: $endDate}}\n    distinct_on: userId\n  ) {\n    userId\n    user_email\n    user_role\n    eventTime\n    action\n  }\n}\n\nquery GetAuditAnalytics($startDate: timestamptz!, $endDate: timestamptz!) {\n  audit_summary: auditLogsAggregate(\n    where: {eventTime: {_gte: $startDate, _lte: $endDate}}\n  ) {\n    aggregate {\n      count\n    }\n  }\n  failed_by_type: auditLogs(\n    where: {success: {_eq: false}, eventTime: {_gte: $startDate, _lte: $endDate}}\n    order_by: {eventTime: desc}\n    limit: 100\n  ) {\n    action\n    resourceType\n    error_message\n  }\n  data_access_stats: dataAccessLogsAggregate(\n    where: {accessedAt: {_gte: $startDate, _lte: $endDate}}\n  ) {\n    aggregate {\n      count\n      sum {\n        rowCount\n      }\n    }\n  }\n  user_activity: auditLogs(\n    where: {eventTime: {_gte: $startDate, _lte: $endDate}}\n    distinct_on: userId\n    order_by: {userId: asc, eventTime: desc}\n    limit: 100\n  ) {\n    userId\n    user_email\n    user_role\n    action\n    eventTime\n  }\n}'
): (typeof documents)['query GetAuditLogs($where: audit_audit_log_bool_exp, $order_by: [audit_audit_log_order_by!], $limit: Int, $offset: Int) {\n  auditLogs(where: $where, order_by: $order_by, limit: $limit, offset: $offset) {\n    ...AuditLogWithUser\n  }\n  auditLogsAggregate(where: $where) {\n    aggregate {\n      count\n    }\n  }\n}\n\nquery GetAuditLogsByEntity($entity_type: String!, $entity_id: String!, $limit: Int = 50) {\n  auditLogs(\n    where: {resourceType: {_eq: $entity_type}, resourceId: {_eq: $entity_id}}\n    order_by: {eventTime: desc}\n    limit: $limit\n  ) {\n    ...AuditLogWithUser\n  }\n}\n\nquery GetAuditLogsByUser($user_id: uuid!, $start_date: timestamptz, $end_date: timestamptz) {\n  auditLogs(\n    where: {userId: {_eq: $user_id}, eventTime: {_gte: $start_date, _lte: $end_date}}\n    order_by: {eventTime: desc}\n  ) {\n    ...AuditLogCore\n  }\n}\n\nquery GetFailedAuditLogs($start_date: timestamptz!, $end_date: timestamptz!) {\n  auditLogs(\n    where: {success: {_eq: false}, eventTime: {_gte: $start_date, _lte: $end_date}}\n    order_by: {eventTime: desc}\n  ) {\n    ...AuditLogWithUser\n  }\n}\n\nquery GetDataAccessLogs($where: audit_data_access_log_bool_exp, $order_by: [audit_data_access_log_order_by!], $limit: Int, $offset: Int) {\n  dataAccessLogs(\n    where: $where\n    order_by: $order_by\n    limit: $limit\n    offset: $offset\n  ) {\n    ...DataAccessLogCore\n  }\n  dataAccessLogsAggregate(where: $where) {\n    aggregate {\n      count\n      sum {\n        rowCount\n      }\n    }\n  }\n}\n\nquery GetDataExports($start_date: timestamptz!, $end_date: timestamptz!) {\n  dataAccessLogs(\n    where: {accessType: {_eq: "export"}, accessedAt: {_gte: $start_date, _lte: $end_date}}\n    order_by: {accessedAt: desc}\n  ) {\n    ...DataAccessLogCore\n  }\n}\n\nquery GetAuthEvents($where: audit_auth_events_bool_exp, $order_by: [audit_auth_events_order_by!], $limit: Int, $offset: Int) {\n  authEvents(where: $where, order_by: $order_by, limit: $limit, offset: $offset) {\n    ...AuthEventCore\n  }\n}\n\nquery GetFailedAuthEvents($start_date: timestamptz!, $end_date: timestamptz!) {\n  authEvents(\n    where: {success: {_eq: false}, eventTime: {_gte: $start_date, _lte: $end_date}}\n    order_by: {eventTime: desc}\n  ) {\n    ...AuthEventCore\n  }\n}\n\nquery GetPermissionChanges($where: audit_permission_changes_bool_exp, $order_by: [audit_permission_changes_order_by!], $limit: Int, $offset: Int) {\n  permissionChanges(\n    where: $where\n    order_by: $order_by\n    limit: $limit\n    offset: $offset\n  ) {\n    ...PermissionChangeCore\n  }\n}\n\nquery SecurityOverview($twentyFourHoursAgo: timestamptz!, $sevenDaysAgo: timestamptz!) {\n  recent_audit_logs: auditLogs(\n    where: {eventTime: {_gte: $twentyFourHoursAgo}}\n    order_by: {eventTime: desc}\n    limit: 100\n  ) {\n    id\n    eventTime\n    user_email\n    user_role\n    action\n    resourceType\n    resourceId\n    success\n    error_message\n    ipAddress\n    metadata\n  }\n  audit_log_count: auditLogsAggregate(\n    where: {eventTime: {_gte: $twentyFourHoursAgo}}\n  ) {\n    aggregate {\n      count\n    }\n  }\n  failed_operations: auditLogs(\n    where: {success: {_eq: false}, eventTime: {_gte: $twentyFourHoursAgo}}\n    order_by: {eventTime: desc}\n    limit: 50\n  ) {\n    id\n    eventTime\n    user_email\n    action\n    resourceType\n    error_message\n    ipAddress\n  }\n  data_access_summary: dataAccessLogs(\n    where: {accessedAt: {_gte: $sevenDaysAgo}}\n    order_by: {accessedAt: desc}\n    limit: 100\n  ) {\n    id\n    accessedAt\n    userId\n    resourceType\n    accessType\n    dataClassification\n    rowCount\n    ipAddress\n  }\n  auth_events_summary: authEvents(\n    where: {eventTime: {_gte: $sevenDaysAgo}}\n    order_by: {eventTime: desc}\n    limit: 50\n  ) {\n    id\n    eventTime\n    eventType\n    userId\n    userEmail\n    success\n    failureReason\n    ipAddress\n  }\n}\n\nquery ComplianceReport($startDate: timestamptz!, $endDate: timestamptz!) {\n  audit_metrics: auditLogsAggregate(\n    where: {created_at: {_gte: $startDate, _lte: $endDate}}\n  ) {\n    aggregate {\n      count\n    }\n    nodes {\n      success\n      action\n    }\n  }\n  failed_by_type: auditLogs(where: {success: {_eq: false}}) {\n    action\n    error_message\n  }\n  data_access_stats: dataAccessLogsAggregate(\n    where: {accessedAt: {_gte: $startDate, _lte: $endDate}}\n  ) {\n    aggregate {\n      count\n      sum {\n        rowCount\n      }\n    }\n    nodes {\n      dataClassification\n    }\n  }\n  user_activity: auditLogs(\n    where: {eventTime: {_gte: $startDate, _lte: $endDate}}\n    distinct_on: userId\n  ) {\n    userId\n    user_email\n    user_role\n    eventTime\n    action\n  }\n}\n\nquery GetAuditAnalytics($startDate: timestamptz!, $endDate: timestamptz!) {\n  audit_summary: auditLogsAggregate(\n    where: {eventTime: {_gte: $startDate, _lte: $endDate}}\n  ) {\n    aggregate {\n      count\n    }\n  }\n  failed_by_type: auditLogs(\n    where: {success: {_eq: false}, eventTime: {_gte: $startDate, _lte: $endDate}}\n    order_by: {eventTime: desc}\n    limit: 100\n  ) {\n    action\n    resourceType\n    error_message\n  }\n  data_access_stats: dataAccessLogsAggregate(\n    where: {accessedAt: {_gte: $startDate, _lte: $endDate}}\n  ) {\n    aggregate {\n      count\n      sum {\n        rowCount\n      }\n    }\n  }\n  user_activity: auditLogs(\n    where: {eventTime: {_gte: $startDate, _lte: $endDate}}\n    distinct_on: userId\n    order_by: {userId: asc, eventTime: desc}\n    limit: 100\n  ) {\n    userId\n    user_email\n    user_role\n    action\n    eventTime\n  }\n}'];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(
  source: "subscription SubscribeToAuditLogs {\n  auditLogs(order_by: {eventTime: desc}, limit: 1) {\n    ...AuditLogWithUser\n  }\n}\n\nsubscription SubscribeToFailedOperations {\n  auditLogs(\n    where: {success: {_eq: false}}\n    order_by: {eventTime: desc}\n    limit: 10\n  ) {\n    ...AuditLogCore\n  }\n}\n\nsubscription SubscribeToUserAuditActivity($user_id: uuid!) {\n  auditLogs(\n    where: {userId: {_eq: $user_id}}\n    order_by: {eventTime: desc}\n    limit: 20\n  ) {\n    ...AuditLogCore\n  }\n}\n\nsubscription SubscribeToDataAccessLogs {\n  dataAccessLogs(order_by: {accessedAt: desc}, limit: 10) {\n    ...DataAccessLogCore\n  }\n}"
): (typeof documents)["subscription SubscribeToAuditLogs {\n  auditLogs(order_by: {eventTime: desc}, limit: 1) {\n    ...AuditLogWithUser\n  }\n}\n\nsubscription SubscribeToFailedOperations {\n  auditLogs(\n    where: {success: {_eq: false}}\n    order_by: {eventTime: desc}\n    limit: 10\n  ) {\n    ...AuditLogCore\n  }\n}\n\nsubscription SubscribeToUserAuditActivity($user_id: uuid!) {\n  auditLogs(\n    where: {userId: {_eq: $user_id}}\n    order_by: {eventTime: desc}\n    limit: 20\n  ) {\n    ...AuditLogCore\n  }\n}\n\nsubscription SubscribeToDataAccessLogs {\n  dataAccessLogs(order_by: {accessedAt: desc}, limit: 10) {\n    ...DataAccessLogCore\n  }\n}"];

export function graphql(source: string) {
  return (documents as any)[source] ?? {};
}

export type DocumentType<TDocumentNode extends DocumentNode<any, any>> =
  TDocumentNode extends DocumentNode<infer TType, any> ? TType : never;
