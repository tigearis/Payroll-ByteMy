/* eslint-disable */
import * as types from './graphql';
import { TypedDocumentNode as DocumentNode } from '@graphql-typed-document-node/core';

/**
 * Map of all GraphQL operations in the project.
 *
 * This map has several performance disadvantages:
 * 1. It is not tree-shakeable, so it will include all operations in the project.
 * 2. It is not minifiable, so the string of a GraphQL query will be multiple times inside the bundle.
 * 3. It does not support dead code elimination, so it will add unused operations.
 *
 * Therefore it is highly recommended to use the babel or swc plugin for production.
 * Learn more about it here: https://the-guild.dev/graphql/codegen/plugins/presets/preset-client#reducing-bundle-size
 */
type Documents = {
    "mutation CreateAuditLog($userId: uuid!, $action: String!, $resourceType: String!, $resourceId: String, $metadata: jsonb, $ipAddress: inet, $userAgent: String) {\n  insertAuditLog(\n    object: {userId: $userId, action: $action, resourceType: $resourceType, resourceId: $resourceId, metadata: $metadata, ipAddress: $ipAddress, userAgent: $userAgent}\n  ) {\n    id\n    eventTime\n  }\n}\n\nmutation CreateAuthEvent($userId: uuid, $eventType: String!, $success: Boolean!, $ipAddress: inet, $userAgent: String, $metadata: jsonb) {\n  insertAuthEvent(\n    object: {userId: $userId, eventType: $eventType, success: $success, ipAddress: $ipAddress, userAgent: $userAgent, metadata: $metadata}\n  ) {\n    id\n    eventTime\n  }\n}\n\nmutation LogAuthEvent($eventType: String!, $userId: uuid, $metadata: jsonb, $ipAddress: inet, $userAgent: String, $success: Boolean = true, $failureReason: String) {\n  insertAuthEvent(\n    object: {eventType: $eventType, userId: $userId, metadata: $metadata, ipAddress: $ipAddress, userAgent: $userAgent, success: $success, failureReason: $failureReason}\n  ) {\n    id\n    eventTime\n  }\n}\n\nmutation LogDataAccessEvent($userId: uuid!, $resourceType: String!, $resourceId: String, $accessType: String!, $ipAddress: inet, $metadata: jsonb) {\n  insertDataAccessLog(\n    object: {userId: $userId, resourceType: $resourceType, resourceId: $resourceId, accessType: $accessType, ipAddress: $ipAddress, metadata: $metadata}\n  ) {\n    id\n    accessedAt\n  }\n}\n\nmutation LogPermissionAuditEvent($userId: uuid!, $action: String!, $resource: String!, $operation: String, $reason: String) {\n  insertPermissionAuditLog(\n    object: {userId: $userId, action: $action, resource: $resource, operation: $operation, reason: $reason}\n  ) {\n    id\n    createdAt\n  }\n}\n\nmutation DeleteOldAuditLogs($beforeDate: timestamptz!) {\n  bulkDeleteAuditLogs(where: {eventTime: {_lt: $beforeDate}}) {\n    affectedRows\n  }\n}": typeof types.CreateAuditLogDocument,
    "query GetAuditLogs($limit: Int = 50, $offset: Int = 0, $where: auditLogsBoolExp, $orderBy: [auditLogsOrderBy!] = {eventTime: DESC}) {\n  auditLogs(limit: $limit, offset: $offset, where: $where, orderBy: $orderBy) {\n    ...AuditLogEntry\n  }\n  auditLogsAggregate(where: $where) {\n    aggregate {\n      count\n    }\n  }\n}\n\nquery GetAuthEvents($limit: Int = 20, $offset: Int = 0, $where: authEventsBoolExp, $orderBy: [authEventsOrderBy!] = {eventTime: DESC}) {\n  authEvents(limit: $limit, offset: $offset, where: $where, orderBy: $orderBy) {\n    ...AuthEvent\n  }\n  authEventsAggregate(where: $where) {\n    aggregate {\n      count\n    }\n  }\n}\n\nquery GetAuditSummary($timeRange: timestamptz!) {\n  totalActions: auditLogsAggregate(where: {eventTime: {_gte: $timeRange}}) {\n    aggregate {\n      count\n    }\n  }\n  actionsByType: auditLogs(\n    where: {eventTime: {_gte: $timeRange}}\n    distinctOn: action\n  ) {\n    action\n  }\n  mostActiveUsers: auditLogs(\n    where: {eventTime: {_gte: $timeRange}}\n    distinctOn: userId\n    orderBy: {userId: ASC}\n    limit: 5\n  ) {\n    userId\n  }\n  authEventsByType: authEvents(\n    where: {eventTime: {_gte: $timeRange}}\n    distinctOn: eventType\n  ) {\n    eventType\n  }\n}\n\nquery GetResourceAccessHistory($resourceType: String!, $resourceId: String!, $limit: Int = 50) {\n  auditLogs(\n    where: {resourceType: {_eq: $resourceType}, resourceId: {_eq: $resourceId}}\n    orderBy: {eventTime: DESC}\n    limit: $limit\n  ) {\n    ...AuditLogEntry\n  }\n}\n\nquery GetUserActivityTimeline($userId: uuid!, $startDate: timestamptz!, $endDate: timestamptz!) {\n  auditLogs(\n    where: {userId: {_eq: $userId}, eventTime: {_gte: $startDate, _lte: $endDate}}\n    orderBy: {eventTime: DESC}\n  ) {\n    ...AuditLogEntry\n  }\n  authEvents(\n    where: {userId: {_eq: $userId}, eventTime: {_gte: $startDate, _lte: $endDate}}\n    orderBy: {eventTime: DESC}\n  ) {\n    id\n    eventType\n    success\n    eventTime\n    ipAddress\n    userAgent\n  }\n}\n\nquery GetDataAccessReport($startDate: timestamptz!, $endDate: timestamptz!, $resourceType: String) {\n  dataAccessLogs(\n    where: {accessedAt: {_gte: $startDate, _lte: $endDate}, resourceType: {_eq: $resourceType}}\n    orderBy: {accessedAt: DESC}\n  ) {\n    ...DataAccessLog\n  }\n}\n\nquery GetComplianceAuditTrail($startDate: timestamptz!, $endDate: timestamptz!) {\n  permissionChanges: auditLogs(\n    where: {resourceType: {_in: [\"permission\", \"role\", \"permission_override\"]}, eventTime: {_gte: $startDate, _lte: $endDate}}\n    orderBy: {eventTime: DESC}\n  ) {\n    ...AuditLogEntry\n  }\n  userChanges: auditLogs(\n    where: {resourceType: {_eq: \"user\"}, action: {_in: [\"create\", \"update\", \"delete\"]}, eventTime: {_gte: $startDate, _lte: $endDate}}\n    orderBy: {eventTime: DESC}\n  ) {\n    ...AuditLogEntry\n  }\n  dataExports: auditLogs(\n    where: {action: {_eq: \"export\"}, eventTime: {_gte: $startDate, _lte: $endDate}}\n    orderBy: {eventTime: DESC}\n  ) {\n    ...AuditLogEntry\n  }\n}\n\nquery GenerateSOC2AuditReport($startDate: timestamptz!, $endDate: timestamptz!, $limit: Int = 1000) {\n  authenticationEvents: authEvents(\n    where: {eventTime: {_gte: $startDate, _lte: $endDate}}\n    orderBy: {eventTime: DESC}\n    limit: $limit\n  ) {\n    ...AuthEvent\n  }\n  dataAccessEvents: dataAccessLogs(\n    where: {accessedAt: {_gte: $startDate, _lte: $endDate}}\n    orderBy: {accessedAt: DESC}\n    limit: $limit\n  ) {\n    ...DataAccessLog\n  }\n  systemChanges: auditLogs(\n    where: {eventTime: {_gte: $startDate, _lte: $endDate}, resourceType: {_in: [\"system\", \"configuration\", \"database\"]}}\n    orderBy: {eventTime: DESC}\n    limit: $limit\n  ) {\n    ...AuditLogEntry\n  }\n  privilegedAccess: auditLogs(\n    where: {eventTime: {_gte: $startDate, _lte: $endDate}, userRole: {_in: [\"admin\", \"super_admin\"]}}\n    orderBy: {eventTime: DESC}\n    limit: $limit\n  ) {\n    ...AuditLogEntry\n  }\n}\n\nquery AuditLog($id: uuid!) {\n  auditLogById(id: $id) {\n    ...AuditLogEntry\n  }\n}\n\nquery ComplianceReport($startDate: timestamptz!, $endDate: timestamptz!) {\n  auditLogs(\n    where: {eventTime: {_gte: $startDate, _lte: $endDate}}\n    orderBy: {eventTime: DESC}\n  ) {\n    ...AuditLogEntry\n  }\n}\n\nquery ComplianceAuditLogs($startDate: timestamptz!, $endDate: timestamptz!) {\n  auditLogs(\n    where: {eventTime: {_gte: $startDate, _lte: $endDate}}\n    orderBy: {eventTime: DESC}\n  ) {\n    ...AuditLogEntry\n  }\n}\n\nquery SecurityOverview($timeRange: timestamptz!) {\n  totalAuditLogs: auditLogsAggregate(where: {eventTime: {_gte: $timeRange}}) {\n    aggregate {\n      count\n    }\n  }\n  failedLogins: authEventsAggregate(\n    where: {eventTime: {_gte: $timeRange}, success: {_eq: false}}\n  ) {\n    aggregate {\n      count\n    }\n  }\n}\n\nquery CleanAllPayrollDates {\n  payrollDates {\n    id\n    payrollId\n    originalEftDate\n  }\n}\n\nquery GetSecurityIncidentAnalysis($startDate: timestamptz!, $endDate: timestamptz!) {\n  failedAuthentications: authEvents(\n    where: {eventTime: {_gte: $startDate, _lte: $endDate}, success: {_eq: false}}\n    orderBy: {eventTime: DESC}\n  ) {\n    ...AuthEvent\n  }\n  suspiciousActivity: auditLogs(\n    where: {eventTime: {_gte: $startDate, _lte: $endDate}, action: {_in: [\"bulk_export\", \"mass_delete\", \"privilege_escalation\"]}}\n    orderBy: {eventTime: DESC}\n  ) {\n    ...AuditLogEntry\n  }\n  permissionDenials: auditLogs(\n    where: {eventTime: {_gte: $startDate, _lte: $endDate}, success: {_eq: false}, action: {_like: \"%denied%\"}}\n    orderBy: {eventTime: DESC}\n  ) {\n    ...AuditLogEntry\n  }\n}\n\nquery GetUserActivityAnalytics($startDate: timestamptz!, $endDate: timestamptz!, $userId: uuid) {\n  userSessions: authEvents(\n    where: {eventTime: {_gte: $startDate, _lte: $endDate}, userId: {_eq: $userId}, eventType: {_in: [\"login\", \"logout\", \"session_timeout\"]}}\n    orderBy: {eventTime: DESC}\n  ) {\n    ...AuthEvent\n  }\n  resourceAccess: auditLogs(\n    where: {eventTime: {_gte: $startDate, _lte: $endDate}, userId: {_eq: $userId}, action: {_in: [\"view\", \"edit\", \"delete\", \"export\"]}}\n    orderBy: {eventTime: DESC}\n  ) {\n    ...AuditLogEntry\n  }\n  permissionUsage: auditLogs(\n    where: {eventTime: {_gte: $startDate, _lte: $endDate}, userId: {_eq: $userId}, resourceType: {_in: [\"client\", \"payroll\", \"user\", \"billing\"]}}\n    orderBy: {eventTime: DESC}\n  ) {\n    ...AuditLogEntry\n  }\n}\n\nquery GetDataRetentionAnalytics($retentionDate: timestamptz!) {\n  auditLogRetention: auditLogsAggregate {\n    aggregate {\n      count\n      min {\n        eventTime\n      }\n      max {\n        eventTime\n      }\n    }\n  }\n  dataAccessRetention: dataAccessLogsAggregate {\n    aggregate {\n      count\n      min {\n        accessedAt\n      }\n      max {\n        accessedAt\n      }\n    }\n  }\n  oldAuditLogs: auditLogsAggregate(where: {eventTime: {_lt: $retentionDate}}) {\n    aggregate {\n      count\n    }\n  }\n}\n\nquery GetSystemHealthAnalytics($timeRange: timestamptz!) {\n  apiUsage: auditLogsAggregate(\n    where: {eventTime: {_gte: $timeRange}, action: {_like: \"api_%\"}}\n  ) {\n    aggregate {\n      count\n    }\n  }\n  systemErrors: auditLogsAggregate(\n    where: {eventTime: {_gte: $timeRange}, success: {_eq: false}}\n  ) {\n    aggregate {\n      count\n    }\n  }\n  resourceUsageStats: auditLogsAggregate(where: {eventTime: {_gte: $timeRange}}) {\n    aggregate {\n      count\n    }\n  }\n}\n\nquery SearchAuditLogs($searchTerm: String!, $startDate: timestamptz, $endDate: timestamptz, $resourceTypes: [String!], $actions: [String!], $userIds: [uuid!], $limit: Int = 100, $offset: Int = 0) {\n  auditLogs(\n    where: {_and: [{eventTime: {_gte: $startDate, _lte: $endDate}}, {_or: [{action: {_ilike: $searchTerm}}, {resourceType: {_ilike: $searchTerm}}, {resourceId: {_ilike: $searchTerm}}, {userEmail: {_ilike: $searchTerm}}]}, {resourceType: {_in: $resourceTypes}}, {action: {_in: $actions}}, {userId: {_in: $userIds}}]}\n    orderBy: {eventTime: DESC}\n    limit: $limit\n    offset: $offset\n  ) {\n    ...AuditLogEntry\n  }\n  searchResults: auditLogsAggregate(\n    where: {_and: [{eventTime: {_gte: $startDate, _lte: $endDate}}, {_or: [{action: {_ilike: $searchTerm}}, {resourceType: {_ilike: $searchTerm}}, {resourceId: {_ilike: $searchTerm}}, {userEmail: {_ilike: $searchTerm}}]}, {resourceType: {_in: $resourceTypes}}, {action: {_in: $actions}}, {userId: {_in: $userIds}}]}\n  ) {\n    aggregate {\n      count\n    }\n  }\n}\n\nquery GetComplianceMonitoringData($timeRange: timestamptz!) {\n  criticalEvents: auditLogs(\n    where: {eventTime: {_gte: $timeRange}, action: {_in: [\"delete\", \"export\", \"privilege_change\", \"system_config\"]}}\n    orderBy: {eventTime: DESC}\n    limit: 20\n  ) {\n    ...AuditLogEntry\n  }\n  authMetrics: authEventsAggregate(where: {eventTime: {_gte: $timeRange}}) {\n    aggregate {\n      count\n    }\n  }\n  failedAccess: authEventsAggregate(\n    where: {eventTime: {_gte: $timeRange}, success: {_eq: false}}\n  ) {\n    aggregate {\n      count\n    }\n  }\n  sensitiveDataAccess: dataAccessLogsAggregate(\n    where: {accessedAt: {_gte: $timeRange}, dataClassification: {_in: [\"CRITICAL\", \"HIGH\"]}}\n  ) {\n    aggregate {\n      count\n    }\n  }\n}": typeof types.GetAuditLogsDocument,
    "subscription AuditLogStream($resourceTypes: [String!], $actions: [String!], $sinceTimestamp: timestamptz!) {\n  auditLogs(\n    where: {resourceType: {_in: $resourceTypes}, action: {_in: $actions}, eventTime: {_gte: $sinceTimestamp}}\n    orderBy: {eventTime: DESC}\n  ) {\n    ...AuditLogEntry\n  }\n}\n\nsubscription AuthEventStream($eventTypes: [String!], $sinceTimestamp: timestamptz!) {\n  authEvents(\n    where: {eventType: {_in: $eventTypes}, eventTime: {_gte: $sinceTimestamp}}\n    orderBy: {eventTime: DESC}\n  ) {\n    ...AuthEvent\n  }\n}\n\nsubscription SubscribeToAuditLogs($limit: Int = 50) {\n  auditLogs(orderBy: {eventTime: DESC}, limit: $limit) {\n    ...AuditLogEntry\n  }\n}\n\nsubscription SecurityEventsStream {\n  auditLogs(\n    where: {resourceType: {_in: [\"security\", \"auth\", \"permission\"]}}\n    orderBy: {eventTime: DESC}\n    limit: 100\n  ) {\n    ...AuditLogEntry\n  }\n}\n\nsubscription FailedOperationsStream {\n  auditLogs(where: {success: {_eq: false}}, orderBy: {eventTime: DESC}, limit: 50) {\n    ...AuditLogEntry\n  }\n}\n\nsubscription CriticalDataAccessStream {\n  auditLogs(\n    where: {resourceType: {_in: [\"users\", \"clients\", \"payrolls\"]}, action: {_in: [\"delete\", \"create\", \"update\"]}}\n    orderBy: {eventTime: DESC}\n    limit: 100\n  ) {\n    ...AuditLogEntry\n  }\n}\n\nsubscription DataAccessStream($resourceTypes: [String!], $sinceTimestamp: timestamptz!) {\n  dataAccessLogs(\n    where: {resourceType: {_in: $resourceTypes}, accessedAt: {_gte: $sinceTimestamp}}\n    orderBy: {accessedAt: DESC}\n  ) {\n    ...DataAccessLog\n  }\n}\n\nsubscription SensitiveAuditStream($resourceTypes: [String!]!, $sinceTimestamp: timestamptz!) {\n  auditLogs(\n    where: {resourceType: {_in: $resourceTypes}, action: {_in: [\"view\", \"export\", \"update\", \"delete\"]}, eventTime: {_gte: $sinceTimestamp}}\n    orderBy: {eventTime: DESC}\n  ) {\n    ...AuditLogEntry\n  }\n}\n\nsubscription PermissionAuditStream($sinceTimestamp: timestamptz!) {\n  permissionAuditLogs(\n    where: {operation: {_eq: \"deny\"}, createdAt: {_gte: $sinceTimestamp}}\n    orderBy: {createdAt: DESC}\n  ) {\n    id\n    userId\n    action\n    resource\n    operation\n    reason\n    createdAt\n  }\n}": typeof types.AuditLogStreamDocument,
    "fragment UserMinimal on users {\n  id\n  name\n  email\n}\n\nfragment UserCoreShared on users {\n  ...UserMinimal\n  role\n  isActive\n}\n\nfragment UserBasic on users {\n  ...UserCoreShared\n  createdAt\n  updatedAt\n}\n\nfragment UserBase on users {\n  ...UserBasic\n}\n\nfragment UserWithRole on users {\n  ...UserBasic\n  assignedRoles {\n    assignedRole {\n      id\n      name\n      displayName\n    }\n  }\n}\n\nfragment UserProfile on users {\n  ...UserWithRole\n  username\n  clerkUserId\n  image\n  isStaff\n  managerId\n  deactivatedAt\n  deactivatedBy\n  managerUser {\n    ...UserMinimal\n  }\n}\n\nfragment UserSearchResult on users {\n  ...UserCoreShared\n  username\n  isStaff\n}\n\nfragment ClientMinimal on clients {\n  id\n  name\n}\n\nfragment ClientBase on clients {\n  id\n  name\n  active\n  contactEmail\n  contactPerson\n  contactPhone\n  createdAt\n}\n\nfragment ClientWithStats on clients {\n  ...ClientBase\n  currentEmployeeCount: payrollsAggregate(\n    where: {supersededDate: {_isNull: true}}\n  ) {\n    aggregate {\n      sum {\n        employeeCount\n      }\n    }\n  }\n  activePayrollCount: payrollsAggregate(\n    where: {supersededDate: {_isNull: true}, status: {_eq: \"Active\"}}\n  ) {\n    aggregate {\n      count\n    }\n  }\n}\n\nfragment ClientListBase on clients {\n  ...ClientBase\n  payrollCount: payrollsAggregate(where: {supersededDate: {_isNull: true}}) {\n    aggregate {\n      count\n    }\n  }\n}\n\nfragment PayrollMinimal on payrolls {\n  id\n  name\n  employeeCount\n  status\n}\n\nfragment PayrollBase on payrolls {\n  id\n  name\n  employeeCount\n  status\n  payrollSystem\n  processingTime\n  processingDaysBeforeEft\n  versionNumber\n  createdAt\n  updatedAt\n}\n\nfragment PayrollWithClient on payrolls {\n  ...PayrollBase\n  clientId\n  client {\n    id\n    name\n    active\n  }\n}\n\nfragment PayrollListItem on payrolls {\n  ...PayrollWithClient\n  primaryConsultantUserId\n  backupConsultantUserId\n  managerUserId\n  createdByUserId\n  primaryConsultant {\n    ...UserMinimal\n  }\n  backupConsultant {\n    ...UserMinimal\n  }\n  manager {\n    ...UserMinimal\n  }\n}\n\nfragment PayrollWithDates on payrolls {\n  ...PayrollBase\n  goLiveDate\n  payrollDates(orderBy: {originalEftDate: ASC}) {\n    id\n    originalEftDate\n    adjustedEftDate\n    notes\n  }\n}\n\nfragment PayrollFullDetail on payrolls {\n  ...PayrollWithDates\n  ...PayrollWithClient\n  dateTypeId\n  cycleId\n  dateValue\n  versionReason\n  supersededDate\n  parentPayrollId\n  parentPayroll {\n    id\n    versionNumber\n  }\n  childPayrolls(orderBy: {versionNumber: DESC}) {\n    id\n    versionNumber\n    versionReason\n    createdAt\n  }\n  primaryConsultant {\n    ...UserMinimal\n  }\n  backupConsultant {\n    ...UserMinimal\n  }\n  manager {\n    ...UserMinimal\n  }\n}\n\nfragment NoteWithAuthor on notes {\n  id\n  content\n  isImportant\n  createdAt\n  entityId\n  entityType\n  authorUser {\n    ...UserMinimal\n  }\n}\n\nfragment PermissionBase on permissions {\n  id\n  resourceId\n  description\n  legacyPermissionName\n  action\n}\n\nfragment RoleWithPermissions on roles {\n  id\n  name\n  displayName\n  description\n  isSystemRole\n  priority\n  assignedPermissions {\n    grantedPermission {\n      ...PermissionBase\n    }\n  }\n}\n\nfragment AuditLogEntry on auditLogs {\n  id\n  userId\n  userEmail\n  userRole\n  action\n  resourceType\n  resourceId\n  eventTime\n  success\n  errorMessage\n  ipAddress\n  userAgent\n  requestId\n  sessionId\n  metadata\n  oldValues\n  newValues\n  createdAt\n}\n\nfragment AuthEvent on authEvents {\n  id\n  userId\n  userEmail\n  eventType\n  eventTime\n  success\n  failureReason\n  ipAddress\n  userAgent\n  metadata\n}\n\nfragment DataAccessLog on dataAccessLogs {\n  id\n  userId\n  resourceType\n  resourceId\n  accessType\n  accessedAt\n  dataClassification\n  fieldsAccessed\n  rowCount\n  ipAddress\n  metadata\n}\n\nfragment PermissionChange on permissionChanges {\n  id\n  changedAt\n  changedByUserId\n  targetUserId\n  targetRoleId\n  changeType\n  permissionType\n  oldPermissions\n  newPermissions\n  reason\n  approvedByUserId\n}\n\nfragment PayrollDateInfo on payrollDates {\n  id\n  originalEftDate\n  adjustedEftDate\n  notes\n  createdAt\n}\n\nfragment PermissionOverrideInfo on permissionOverrides {\n  id\n  userId\n  role\n  resource\n  operation\n  granted\n  reason\n  conditions\n  expiresAt\n  createdBy\n  createdAt\n}": typeof types.UserMinimalFragmentDoc,
    "mutation LogAuditEvent($input: auditLogsInsertInput!) {\n  insertAuditLogsOne: insertAuditLog(object: $input) {\n    id\n    eventTime\n  }\n}\n\nmutation RefreshData {\n  __typename\n}": typeof types.LogAuditEventDocument,
    "query GetDashboardMetrics($userId: uuid!) {\n  clientsAggregate(where: {active: {_eq: true}}) {\n    aggregate {\n      count\n    }\n  }\n  activePayrollsAggregate: payrollsAggregate(\n    where: {supersededDate: {_isNull: true}, status: {_nin: [\"Completed\", \"Failed\"]}}\n  ) {\n    aggregate {\n      count\n    }\n  }\n  totalEmployeesAggregate: payrollsAggregate(\n    where: {supersededDate: {_isNull: true}}\n  ) {\n    aggregate {\n      sum {\n        employeeCount\n      }\n    }\n  }\n  upcomingPayrolls: payrolls(\n    where: {supersededDate: {_isNull: true}, status: {_nin: [\"Completed\", \"Failed\", \"Cancelled\"]}}\n    orderBy: {updatedAt: DESC}\n    limit: 5\n  ) {\n    ...PayrollMinimal\n    client {\n      ...ClientMinimal\n    }\n  }\n}\n\nquery GetDashboardStatsOptimized($limit: Int = 10) {\n  clientsAggregate {\n    aggregate {\n      count\n    }\n  }\n  totalPayrolls: payrollsAggregate(where: {supersededDate: {_isNull: true}}) {\n    aggregate {\n      count\n    }\n  }\n  activePayrolls: payrollsAggregate(\n    where: {supersededDate: {_isNull: true}, status: {_eq: \"Active\"}}\n  ) {\n    aggregate {\n      count\n    }\n  }\n  upcomingPayrolls: payrolls(\n    where: {supersededDate: {_isNull: true}, status: {_eq: \"Active\"}}\n    orderBy: {updatedAt: DESC}\n    limit: $limit\n  ) {\n    id\n    name\n    status\n    client {\n      id\n      name\n    }\n  }\n}\n\nquery GetClientsDashboardStats {\n  activeClientsCount: clientsAggregate(where: {active: {_eq: true}}) {\n    aggregate {\n      count\n    }\n  }\n  totalPayrollsCount: payrollsAggregate(where: {supersededDate: {_isNull: true}}) {\n    aggregate {\n      count\n    }\n  }\n  totalEmployeesSum: payrollsAggregate(where: {supersededDate: {_isNull: true}}) {\n    aggregate {\n      sum {\n        employeeCount\n      }\n    }\n  }\n  clientsNeedingAttention: clients(\n    where: {active: {_eq: true}, _not: {payrolls: {supersededDate: {_isNull: true}}}}\n  ) {\n    ...ClientMinimal\n  }\n}\n\nquery GetCurrentUser($userId: uuid!) {\n  user: userById(id: $userId) {\n    ...UserProfile\n  }\n}\n\nquery GetUsersForDropdown($role: user_role) {\n  users(where: {isActive: {_eq: true}, role: {_eq: $role}}, orderBy: {name: ASC}) {\n    ...UserMinimal\n  }\n}\n\nquery GetSystemHealth {\n  databaseHealth: users(limit: 1) {\n    id\n  }\n  recentActivity: auditLogsAggregate(\n    where: {eventTime: {_gte: \"now() - interval '1 hour'\"}}\n  ) {\n    aggregate {\n      count\n    }\n  }\n}\n\nquery GlobalSearch($searchTerm: String!) {\n  clients(\n    where: {_or: [{name: {_ilike: $searchTerm}}, {contactEmail: {_ilike: $searchTerm}}]}\n    limit: 5\n  ) {\n    ...ClientMinimal\n  }\n  users(\n    where: {_or: [{name: {_ilike: $searchTerm}}, {email: {_ilike: $searchTerm}}]}\n    limit: 5\n  ) {\n    ...UserMinimal\n  }\n  payrolls(\n    where: {client: {name: {_ilike: $searchTerm}}, supersededDate: {_isNull: true}}\n    limit: 5\n  ) {\n    ...PayrollMinimal\n    client {\n      ...ClientMinimal\n    }\n  }\n}": typeof types.GetDashboardMetricsDocument,
    "subscription RecentActivity($resourceTypes: [String!]) {\n  auditLogs(\n    where: {resourceType: {_in: $resourceTypes}, eventTime: {_gte: \"now() - interval '5 minutes'\"}}\n    orderBy: {eventTime: DESC}\n    limit: 20\n  ) {\n    ...AuditLogEntry\n  }\n}\n\nsubscription AuthenticationEvents($userId: uuid) {\n  authEvents(\n    where: {userId: {_eq: $userId}, eventTime: {_gte: \"now() - interval '10 minutes'\"}}\n    orderBy: {eventTime: DESC}\n  ) {\n    ...AuthEvent\n  }\n}\n\nsubscription SensitiveDataAccess($resourceTypes: [String!]!) {\n  dataAccessLogs(\n    where: {resourceType: {_in: $resourceTypes}, accessedAt: {_gte: \"now() - interval '10 minutes'\"}}\n    orderBy: {accessedAt: DESC}\n  ) {\n    ...DataAccessLog\n  }\n}\n\nsubscription PermissionChangeStream {\n  permissionChanges(orderBy: {changedAt: DESC}, limit: 10) {\n    ...PermissionChange\n  }\n}": typeof types.RecentActivityDocument,
};
const documents: Documents = {
    "mutation CreateAuditLog($userId: uuid!, $action: String!, $resourceType: String!, $resourceId: String, $metadata: jsonb, $ipAddress: inet, $userAgent: String) {\n  insertAuditLog(\n    object: {userId: $userId, action: $action, resourceType: $resourceType, resourceId: $resourceId, metadata: $metadata, ipAddress: $ipAddress, userAgent: $userAgent}\n  ) {\n    id\n    eventTime\n  }\n}\n\nmutation CreateAuthEvent($userId: uuid, $eventType: String!, $success: Boolean!, $ipAddress: inet, $userAgent: String, $metadata: jsonb) {\n  insertAuthEvent(\n    object: {userId: $userId, eventType: $eventType, success: $success, ipAddress: $ipAddress, userAgent: $userAgent, metadata: $metadata}\n  ) {\n    id\n    eventTime\n  }\n}\n\nmutation LogAuthEvent($eventType: String!, $userId: uuid, $metadata: jsonb, $ipAddress: inet, $userAgent: String, $success: Boolean = true, $failureReason: String) {\n  insertAuthEvent(\n    object: {eventType: $eventType, userId: $userId, metadata: $metadata, ipAddress: $ipAddress, userAgent: $userAgent, success: $success, failureReason: $failureReason}\n  ) {\n    id\n    eventTime\n  }\n}\n\nmutation LogDataAccessEvent($userId: uuid!, $resourceType: String!, $resourceId: String, $accessType: String!, $ipAddress: inet, $metadata: jsonb) {\n  insertDataAccessLog(\n    object: {userId: $userId, resourceType: $resourceType, resourceId: $resourceId, accessType: $accessType, ipAddress: $ipAddress, metadata: $metadata}\n  ) {\n    id\n    accessedAt\n  }\n}\n\nmutation LogPermissionAuditEvent($userId: uuid!, $action: String!, $resource: String!, $operation: String, $reason: String) {\n  insertPermissionAuditLog(\n    object: {userId: $userId, action: $action, resource: $resource, operation: $operation, reason: $reason}\n  ) {\n    id\n    createdAt\n  }\n}\n\nmutation DeleteOldAuditLogs($beforeDate: timestamptz!) {\n  bulkDeleteAuditLogs(where: {eventTime: {_lt: $beforeDate}}) {\n    affectedRows\n  }\n}": types.CreateAuditLogDocument,
    "query GetAuditLogs($limit: Int = 50, $offset: Int = 0, $where: auditLogsBoolExp, $orderBy: [auditLogsOrderBy!] = {eventTime: DESC}) {\n  auditLogs(limit: $limit, offset: $offset, where: $where, orderBy: $orderBy) {\n    ...AuditLogEntry\n  }\n  auditLogsAggregate(where: $where) {\n    aggregate {\n      count\n    }\n  }\n}\n\nquery GetAuthEvents($limit: Int = 20, $offset: Int = 0, $where: authEventsBoolExp, $orderBy: [authEventsOrderBy!] = {eventTime: DESC}) {\n  authEvents(limit: $limit, offset: $offset, where: $where, orderBy: $orderBy) {\n    ...AuthEvent\n  }\n  authEventsAggregate(where: $where) {\n    aggregate {\n      count\n    }\n  }\n}\n\nquery GetAuditSummary($timeRange: timestamptz!) {\n  totalActions: auditLogsAggregate(where: {eventTime: {_gte: $timeRange}}) {\n    aggregate {\n      count\n    }\n  }\n  actionsByType: auditLogs(\n    where: {eventTime: {_gte: $timeRange}}\n    distinctOn: action\n  ) {\n    action\n  }\n  mostActiveUsers: auditLogs(\n    where: {eventTime: {_gte: $timeRange}}\n    distinctOn: userId\n    orderBy: {userId: ASC}\n    limit: 5\n  ) {\n    userId\n  }\n  authEventsByType: authEvents(\n    where: {eventTime: {_gte: $timeRange}}\n    distinctOn: eventType\n  ) {\n    eventType\n  }\n}\n\nquery GetResourceAccessHistory($resourceType: String!, $resourceId: String!, $limit: Int = 50) {\n  auditLogs(\n    where: {resourceType: {_eq: $resourceType}, resourceId: {_eq: $resourceId}}\n    orderBy: {eventTime: DESC}\n    limit: $limit\n  ) {\n    ...AuditLogEntry\n  }\n}\n\nquery GetUserActivityTimeline($userId: uuid!, $startDate: timestamptz!, $endDate: timestamptz!) {\n  auditLogs(\n    where: {userId: {_eq: $userId}, eventTime: {_gte: $startDate, _lte: $endDate}}\n    orderBy: {eventTime: DESC}\n  ) {\n    ...AuditLogEntry\n  }\n  authEvents(\n    where: {userId: {_eq: $userId}, eventTime: {_gte: $startDate, _lte: $endDate}}\n    orderBy: {eventTime: DESC}\n  ) {\n    id\n    eventType\n    success\n    eventTime\n    ipAddress\n    userAgent\n  }\n}\n\nquery GetDataAccessReport($startDate: timestamptz!, $endDate: timestamptz!, $resourceType: String) {\n  dataAccessLogs(\n    where: {accessedAt: {_gte: $startDate, _lte: $endDate}, resourceType: {_eq: $resourceType}}\n    orderBy: {accessedAt: DESC}\n  ) {\n    ...DataAccessLog\n  }\n}\n\nquery GetComplianceAuditTrail($startDate: timestamptz!, $endDate: timestamptz!) {\n  permissionChanges: auditLogs(\n    where: {resourceType: {_in: [\"permission\", \"role\", \"permission_override\"]}, eventTime: {_gte: $startDate, _lte: $endDate}}\n    orderBy: {eventTime: DESC}\n  ) {\n    ...AuditLogEntry\n  }\n  userChanges: auditLogs(\n    where: {resourceType: {_eq: \"user\"}, action: {_in: [\"create\", \"update\", \"delete\"]}, eventTime: {_gte: $startDate, _lte: $endDate}}\n    orderBy: {eventTime: DESC}\n  ) {\n    ...AuditLogEntry\n  }\n  dataExports: auditLogs(\n    where: {action: {_eq: \"export\"}, eventTime: {_gte: $startDate, _lte: $endDate}}\n    orderBy: {eventTime: DESC}\n  ) {\n    ...AuditLogEntry\n  }\n}\n\nquery GenerateSOC2AuditReport($startDate: timestamptz!, $endDate: timestamptz!, $limit: Int = 1000) {\n  authenticationEvents: authEvents(\n    where: {eventTime: {_gte: $startDate, _lte: $endDate}}\n    orderBy: {eventTime: DESC}\n    limit: $limit\n  ) {\n    ...AuthEvent\n  }\n  dataAccessEvents: dataAccessLogs(\n    where: {accessedAt: {_gte: $startDate, _lte: $endDate}}\n    orderBy: {accessedAt: DESC}\n    limit: $limit\n  ) {\n    ...DataAccessLog\n  }\n  systemChanges: auditLogs(\n    where: {eventTime: {_gte: $startDate, _lte: $endDate}, resourceType: {_in: [\"system\", \"configuration\", \"database\"]}}\n    orderBy: {eventTime: DESC}\n    limit: $limit\n  ) {\n    ...AuditLogEntry\n  }\n  privilegedAccess: auditLogs(\n    where: {eventTime: {_gte: $startDate, _lte: $endDate}, userRole: {_in: [\"admin\", \"super_admin\"]}}\n    orderBy: {eventTime: DESC}\n    limit: $limit\n  ) {\n    ...AuditLogEntry\n  }\n}\n\nquery AuditLog($id: uuid!) {\n  auditLogById(id: $id) {\n    ...AuditLogEntry\n  }\n}\n\nquery ComplianceReport($startDate: timestamptz!, $endDate: timestamptz!) {\n  auditLogs(\n    where: {eventTime: {_gte: $startDate, _lte: $endDate}}\n    orderBy: {eventTime: DESC}\n  ) {\n    ...AuditLogEntry\n  }\n}\n\nquery ComplianceAuditLogs($startDate: timestamptz!, $endDate: timestamptz!) {\n  auditLogs(\n    where: {eventTime: {_gte: $startDate, _lte: $endDate}}\n    orderBy: {eventTime: DESC}\n  ) {\n    ...AuditLogEntry\n  }\n}\n\nquery SecurityOverview($timeRange: timestamptz!) {\n  totalAuditLogs: auditLogsAggregate(where: {eventTime: {_gte: $timeRange}}) {\n    aggregate {\n      count\n    }\n  }\n  failedLogins: authEventsAggregate(\n    where: {eventTime: {_gte: $timeRange}, success: {_eq: false}}\n  ) {\n    aggregate {\n      count\n    }\n  }\n}\n\nquery CleanAllPayrollDates {\n  payrollDates {\n    id\n    payrollId\n    originalEftDate\n  }\n}\n\nquery GetSecurityIncidentAnalysis($startDate: timestamptz!, $endDate: timestamptz!) {\n  failedAuthentications: authEvents(\n    where: {eventTime: {_gte: $startDate, _lte: $endDate}, success: {_eq: false}}\n    orderBy: {eventTime: DESC}\n  ) {\n    ...AuthEvent\n  }\n  suspiciousActivity: auditLogs(\n    where: {eventTime: {_gte: $startDate, _lte: $endDate}, action: {_in: [\"bulk_export\", \"mass_delete\", \"privilege_escalation\"]}}\n    orderBy: {eventTime: DESC}\n  ) {\n    ...AuditLogEntry\n  }\n  permissionDenials: auditLogs(\n    where: {eventTime: {_gte: $startDate, _lte: $endDate}, success: {_eq: false}, action: {_like: \"%denied%\"}}\n    orderBy: {eventTime: DESC}\n  ) {\n    ...AuditLogEntry\n  }\n}\n\nquery GetUserActivityAnalytics($startDate: timestamptz!, $endDate: timestamptz!, $userId: uuid) {\n  userSessions: authEvents(\n    where: {eventTime: {_gte: $startDate, _lte: $endDate}, userId: {_eq: $userId}, eventType: {_in: [\"login\", \"logout\", \"session_timeout\"]}}\n    orderBy: {eventTime: DESC}\n  ) {\n    ...AuthEvent\n  }\n  resourceAccess: auditLogs(\n    where: {eventTime: {_gte: $startDate, _lte: $endDate}, userId: {_eq: $userId}, action: {_in: [\"view\", \"edit\", \"delete\", \"export\"]}}\n    orderBy: {eventTime: DESC}\n  ) {\n    ...AuditLogEntry\n  }\n  permissionUsage: auditLogs(\n    where: {eventTime: {_gte: $startDate, _lte: $endDate}, userId: {_eq: $userId}, resourceType: {_in: [\"client\", \"payroll\", \"user\", \"billing\"]}}\n    orderBy: {eventTime: DESC}\n  ) {\n    ...AuditLogEntry\n  }\n}\n\nquery GetDataRetentionAnalytics($retentionDate: timestamptz!) {\n  auditLogRetention: auditLogsAggregate {\n    aggregate {\n      count\n      min {\n        eventTime\n      }\n      max {\n        eventTime\n      }\n    }\n  }\n  dataAccessRetention: dataAccessLogsAggregate {\n    aggregate {\n      count\n      min {\n        accessedAt\n      }\n      max {\n        accessedAt\n      }\n    }\n  }\n  oldAuditLogs: auditLogsAggregate(where: {eventTime: {_lt: $retentionDate}}) {\n    aggregate {\n      count\n    }\n  }\n}\n\nquery GetSystemHealthAnalytics($timeRange: timestamptz!) {\n  apiUsage: auditLogsAggregate(\n    where: {eventTime: {_gte: $timeRange}, action: {_like: \"api_%\"}}\n  ) {\n    aggregate {\n      count\n    }\n  }\n  systemErrors: auditLogsAggregate(\n    where: {eventTime: {_gte: $timeRange}, success: {_eq: false}}\n  ) {\n    aggregate {\n      count\n    }\n  }\n  resourceUsageStats: auditLogsAggregate(where: {eventTime: {_gte: $timeRange}}) {\n    aggregate {\n      count\n    }\n  }\n}\n\nquery SearchAuditLogs($searchTerm: String!, $startDate: timestamptz, $endDate: timestamptz, $resourceTypes: [String!], $actions: [String!], $userIds: [uuid!], $limit: Int = 100, $offset: Int = 0) {\n  auditLogs(\n    where: {_and: [{eventTime: {_gte: $startDate, _lte: $endDate}}, {_or: [{action: {_ilike: $searchTerm}}, {resourceType: {_ilike: $searchTerm}}, {resourceId: {_ilike: $searchTerm}}, {userEmail: {_ilike: $searchTerm}}]}, {resourceType: {_in: $resourceTypes}}, {action: {_in: $actions}}, {userId: {_in: $userIds}}]}\n    orderBy: {eventTime: DESC}\n    limit: $limit\n    offset: $offset\n  ) {\n    ...AuditLogEntry\n  }\n  searchResults: auditLogsAggregate(\n    where: {_and: [{eventTime: {_gte: $startDate, _lte: $endDate}}, {_or: [{action: {_ilike: $searchTerm}}, {resourceType: {_ilike: $searchTerm}}, {resourceId: {_ilike: $searchTerm}}, {userEmail: {_ilike: $searchTerm}}]}, {resourceType: {_in: $resourceTypes}}, {action: {_in: $actions}}, {userId: {_in: $userIds}}]}\n  ) {\n    aggregate {\n      count\n    }\n  }\n}\n\nquery GetComplianceMonitoringData($timeRange: timestamptz!) {\n  criticalEvents: auditLogs(\n    where: {eventTime: {_gte: $timeRange}, action: {_in: [\"delete\", \"export\", \"privilege_change\", \"system_config\"]}}\n    orderBy: {eventTime: DESC}\n    limit: 20\n  ) {\n    ...AuditLogEntry\n  }\n  authMetrics: authEventsAggregate(where: {eventTime: {_gte: $timeRange}}) {\n    aggregate {\n      count\n    }\n  }\n  failedAccess: authEventsAggregate(\n    where: {eventTime: {_gte: $timeRange}, success: {_eq: false}}\n  ) {\n    aggregate {\n      count\n    }\n  }\n  sensitiveDataAccess: dataAccessLogsAggregate(\n    where: {accessedAt: {_gte: $timeRange}, dataClassification: {_in: [\"CRITICAL\", \"HIGH\"]}}\n  ) {\n    aggregate {\n      count\n    }\n  }\n}": types.GetAuditLogsDocument,
    "subscription AuditLogStream($resourceTypes: [String!], $actions: [String!], $sinceTimestamp: timestamptz!) {\n  auditLogs(\n    where: {resourceType: {_in: $resourceTypes}, action: {_in: $actions}, eventTime: {_gte: $sinceTimestamp}}\n    orderBy: {eventTime: DESC}\n  ) {\n    ...AuditLogEntry\n  }\n}\n\nsubscription AuthEventStream($eventTypes: [String!], $sinceTimestamp: timestamptz!) {\n  authEvents(\n    where: {eventType: {_in: $eventTypes}, eventTime: {_gte: $sinceTimestamp}}\n    orderBy: {eventTime: DESC}\n  ) {\n    ...AuthEvent\n  }\n}\n\nsubscription SubscribeToAuditLogs($limit: Int = 50) {\n  auditLogs(orderBy: {eventTime: DESC}, limit: $limit) {\n    ...AuditLogEntry\n  }\n}\n\nsubscription SecurityEventsStream {\n  auditLogs(\n    where: {resourceType: {_in: [\"security\", \"auth\", \"permission\"]}}\n    orderBy: {eventTime: DESC}\n    limit: 100\n  ) {\n    ...AuditLogEntry\n  }\n}\n\nsubscription FailedOperationsStream {\n  auditLogs(where: {success: {_eq: false}}, orderBy: {eventTime: DESC}, limit: 50) {\n    ...AuditLogEntry\n  }\n}\n\nsubscription CriticalDataAccessStream {\n  auditLogs(\n    where: {resourceType: {_in: [\"users\", \"clients\", \"payrolls\"]}, action: {_in: [\"delete\", \"create\", \"update\"]}}\n    orderBy: {eventTime: DESC}\n    limit: 100\n  ) {\n    ...AuditLogEntry\n  }\n}\n\nsubscription DataAccessStream($resourceTypes: [String!], $sinceTimestamp: timestamptz!) {\n  dataAccessLogs(\n    where: {resourceType: {_in: $resourceTypes}, accessedAt: {_gte: $sinceTimestamp}}\n    orderBy: {accessedAt: DESC}\n  ) {\n    ...DataAccessLog\n  }\n}\n\nsubscription SensitiveAuditStream($resourceTypes: [String!]!, $sinceTimestamp: timestamptz!) {\n  auditLogs(\n    where: {resourceType: {_in: $resourceTypes}, action: {_in: [\"view\", \"export\", \"update\", \"delete\"]}, eventTime: {_gte: $sinceTimestamp}}\n    orderBy: {eventTime: DESC}\n  ) {\n    ...AuditLogEntry\n  }\n}\n\nsubscription PermissionAuditStream($sinceTimestamp: timestamptz!) {\n  permissionAuditLogs(\n    where: {operation: {_eq: \"deny\"}, createdAt: {_gte: $sinceTimestamp}}\n    orderBy: {createdAt: DESC}\n  ) {\n    id\n    userId\n    action\n    resource\n    operation\n    reason\n    createdAt\n  }\n}": types.AuditLogStreamDocument,
    "fragment UserMinimal on users {\n  id\n  name\n  email\n}\n\nfragment UserCoreShared on users {\n  ...UserMinimal\n  role\n  isActive\n}\n\nfragment UserBasic on users {\n  ...UserCoreShared\n  createdAt\n  updatedAt\n}\n\nfragment UserBase on users {\n  ...UserBasic\n}\n\nfragment UserWithRole on users {\n  ...UserBasic\n  assignedRoles {\n    assignedRole {\n      id\n      name\n      displayName\n    }\n  }\n}\n\nfragment UserProfile on users {\n  ...UserWithRole\n  username\n  clerkUserId\n  image\n  isStaff\n  managerId\n  deactivatedAt\n  deactivatedBy\n  managerUser {\n    ...UserMinimal\n  }\n}\n\nfragment UserSearchResult on users {\n  ...UserCoreShared\n  username\n  isStaff\n}\n\nfragment ClientMinimal on clients {\n  id\n  name\n}\n\nfragment ClientBase on clients {\n  id\n  name\n  active\n  contactEmail\n  contactPerson\n  contactPhone\n  createdAt\n}\n\nfragment ClientWithStats on clients {\n  ...ClientBase\n  currentEmployeeCount: payrollsAggregate(\n    where: {supersededDate: {_isNull: true}}\n  ) {\n    aggregate {\n      sum {\n        employeeCount\n      }\n    }\n  }\n  activePayrollCount: payrollsAggregate(\n    where: {supersededDate: {_isNull: true}, status: {_eq: \"Active\"}}\n  ) {\n    aggregate {\n      count\n    }\n  }\n}\n\nfragment ClientListBase on clients {\n  ...ClientBase\n  payrollCount: payrollsAggregate(where: {supersededDate: {_isNull: true}}) {\n    aggregate {\n      count\n    }\n  }\n}\n\nfragment PayrollMinimal on payrolls {\n  id\n  name\n  employeeCount\n  status\n}\n\nfragment PayrollBase on payrolls {\n  id\n  name\n  employeeCount\n  status\n  payrollSystem\n  processingTime\n  processingDaysBeforeEft\n  versionNumber\n  createdAt\n  updatedAt\n}\n\nfragment PayrollWithClient on payrolls {\n  ...PayrollBase\n  clientId\n  client {\n    id\n    name\n    active\n  }\n}\n\nfragment PayrollListItem on payrolls {\n  ...PayrollWithClient\n  primaryConsultantUserId\n  backupConsultantUserId\n  managerUserId\n  createdByUserId\n  primaryConsultant {\n    ...UserMinimal\n  }\n  backupConsultant {\n    ...UserMinimal\n  }\n  manager {\n    ...UserMinimal\n  }\n}\n\nfragment PayrollWithDates on payrolls {\n  ...PayrollBase\n  goLiveDate\n  payrollDates(orderBy: {originalEftDate: ASC}) {\n    id\n    originalEftDate\n    adjustedEftDate\n    notes\n  }\n}\n\nfragment PayrollFullDetail on payrolls {\n  ...PayrollWithDates\n  ...PayrollWithClient\n  dateTypeId\n  cycleId\n  dateValue\n  versionReason\n  supersededDate\n  parentPayrollId\n  parentPayroll {\n    id\n    versionNumber\n  }\n  childPayrolls(orderBy: {versionNumber: DESC}) {\n    id\n    versionNumber\n    versionReason\n    createdAt\n  }\n  primaryConsultant {\n    ...UserMinimal\n  }\n  backupConsultant {\n    ...UserMinimal\n  }\n  manager {\n    ...UserMinimal\n  }\n}\n\nfragment NoteWithAuthor on notes {\n  id\n  content\n  isImportant\n  createdAt\n  entityId\n  entityType\n  authorUser {\n    ...UserMinimal\n  }\n}\n\nfragment PermissionBase on permissions {\n  id\n  resourceId\n  description\n  legacyPermissionName\n  action\n}\n\nfragment RoleWithPermissions on roles {\n  id\n  name\n  displayName\n  description\n  isSystemRole\n  priority\n  assignedPermissions {\n    grantedPermission {\n      ...PermissionBase\n    }\n  }\n}\n\nfragment AuditLogEntry on auditLogs {\n  id\n  userId\n  userEmail\n  userRole\n  action\n  resourceType\n  resourceId\n  eventTime\n  success\n  errorMessage\n  ipAddress\n  userAgent\n  requestId\n  sessionId\n  metadata\n  oldValues\n  newValues\n  createdAt\n}\n\nfragment AuthEvent on authEvents {\n  id\n  userId\n  userEmail\n  eventType\n  eventTime\n  success\n  failureReason\n  ipAddress\n  userAgent\n  metadata\n}\n\nfragment DataAccessLog on dataAccessLogs {\n  id\n  userId\n  resourceType\n  resourceId\n  accessType\n  accessedAt\n  dataClassification\n  fieldsAccessed\n  rowCount\n  ipAddress\n  metadata\n}\n\nfragment PermissionChange on permissionChanges {\n  id\n  changedAt\n  changedByUserId\n  targetUserId\n  targetRoleId\n  changeType\n  permissionType\n  oldPermissions\n  newPermissions\n  reason\n  approvedByUserId\n}\n\nfragment PayrollDateInfo on payrollDates {\n  id\n  originalEftDate\n  adjustedEftDate\n  notes\n  createdAt\n}\n\nfragment PermissionOverrideInfo on permissionOverrides {\n  id\n  userId\n  role\n  resource\n  operation\n  granted\n  reason\n  conditions\n  expiresAt\n  createdBy\n  createdAt\n}": types.UserMinimalFragmentDoc,
    "mutation LogAuditEvent($input: auditLogsInsertInput!) {\n  insertAuditLogsOne: insertAuditLog(object: $input) {\n    id\n    eventTime\n  }\n}\n\nmutation RefreshData {\n  __typename\n}": types.LogAuditEventDocument,
    "query GetDashboardMetrics($userId: uuid!) {\n  clientsAggregate(where: {active: {_eq: true}}) {\n    aggregate {\n      count\n    }\n  }\n  activePayrollsAggregate: payrollsAggregate(\n    where: {supersededDate: {_isNull: true}, status: {_nin: [\"Completed\", \"Failed\"]}}\n  ) {\n    aggregate {\n      count\n    }\n  }\n  totalEmployeesAggregate: payrollsAggregate(\n    where: {supersededDate: {_isNull: true}}\n  ) {\n    aggregate {\n      sum {\n        employeeCount\n      }\n    }\n  }\n  upcomingPayrolls: payrolls(\n    where: {supersededDate: {_isNull: true}, status: {_nin: [\"Completed\", \"Failed\", \"Cancelled\"]}}\n    orderBy: {updatedAt: DESC}\n    limit: 5\n  ) {\n    ...PayrollMinimal\n    client {\n      ...ClientMinimal\n    }\n  }\n}\n\nquery GetDashboardStatsOptimized($limit: Int = 10) {\n  clientsAggregate {\n    aggregate {\n      count\n    }\n  }\n  totalPayrolls: payrollsAggregate(where: {supersededDate: {_isNull: true}}) {\n    aggregate {\n      count\n    }\n  }\n  activePayrolls: payrollsAggregate(\n    where: {supersededDate: {_isNull: true}, status: {_eq: \"Active\"}}\n  ) {\n    aggregate {\n      count\n    }\n  }\n  upcomingPayrolls: payrolls(\n    where: {supersededDate: {_isNull: true}, status: {_eq: \"Active\"}}\n    orderBy: {updatedAt: DESC}\n    limit: $limit\n  ) {\n    id\n    name\n    status\n    client {\n      id\n      name\n    }\n  }\n}\n\nquery GetClientsDashboardStats {\n  activeClientsCount: clientsAggregate(where: {active: {_eq: true}}) {\n    aggregate {\n      count\n    }\n  }\n  totalPayrollsCount: payrollsAggregate(where: {supersededDate: {_isNull: true}}) {\n    aggregate {\n      count\n    }\n  }\n  totalEmployeesSum: payrollsAggregate(where: {supersededDate: {_isNull: true}}) {\n    aggregate {\n      sum {\n        employeeCount\n      }\n    }\n  }\n  clientsNeedingAttention: clients(\n    where: {active: {_eq: true}, _not: {payrolls: {supersededDate: {_isNull: true}}}}\n  ) {\n    ...ClientMinimal\n  }\n}\n\nquery GetCurrentUser($userId: uuid!) {\n  user: userById(id: $userId) {\n    ...UserProfile\n  }\n}\n\nquery GetUsersForDropdown($role: user_role) {\n  users(where: {isActive: {_eq: true}, role: {_eq: $role}}, orderBy: {name: ASC}) {\n    ...UserMinimal\n  }\n}\n\nquery GetSystemHealth {\n  databaseHealth: users(limit: 1) {\n    id\n  }\n  recentActivity: auditLogsAggregate(\n    where: {eventTime: {_gte: \"now() - interval '1 hour'\"}}\n  ) {\n    aggregate {\n      count\n    }\n  }\n}\n\nquery GlobalSearch($searchTerm: String!) {\n  clients(\n    where: {_or: [{name: {_ilike: $searchTerm}}, {contactEmail: {_ilike: $searchTerm}}]}\n    limit: 5\n  ) {\n    ...ClientMinimal\n  }\n  users(\n    where: {_or: [{name: {_ilike: $searchTerm}}, {email: {_ilike: $searchTerm}}]}\n    limit: 5\n  ) {\n    ...UserMinimal\n  }\n  payrolls(\n    where: {client: {name: {_ilike: $searchTerm}}, supersededDate: {_isNull: true}}\n    limit: 5\n  ) {\n    ...PayrollMinimal\n    client {\n      ...ClientMinimal\n    }\n  }\n}": types.GetDashboardMetricsDocument,
    "subscription RecentActivity($resourceTypes: [String!]) {\n  auditLogs(\n    where: {resourceType: {_in: $resourceTypes}, eventTime: {_gte: \"now() - interval '5 minutes'\"}}\n    orderBy: {eventTime: DESC}\n    limit: 20\n  ) {\n    ...AuditLogEntry\n  }\n}\n\nsubscription AuthenticationEvents($userId: uuid) {\n  authEvents(\n    where: {userId: {_eq: $userId}, eventTime: {_gte: \"now() - interval '10 minutes'\"}}\n    orderBy: {eventTime: DESC}\n  ) {\n    ...AuthEvent\n  }\n}\n\nsubscription SensitiveDataAccess($resourceTypes: [String!]!) {\n  dataAccessLogs(\n    where: {resourceType: {_in: $resourceTypes}, accessedAt: {_gte: \"now() - interval '10 minutes'\"}}\n    orderBy: {accessedAt: DESC}\n  ) {\n    ...DataAccessLog\n  }\n}\n\nsubscription PermissionChangeStream {\n  permissionChanges(orderBy: {changedAt: DESC}, limit: 10) {\n    ...PermissionChange\n  }\n}": types.RecentActivityDocument,
};

/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 *
 *
 * @example
 * ```ts
 * const query = gql(`query GetUser($id: ID!) { user(id: $id) { name } }`);
 * ```
 *
 * The query argument is unknown!
 * Please regenerate the types.
 */
export function gql(source: string): unknown;

/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "mutation CreateAuditLog($userId: uuid!, $action: String!, $resourceType: String!, $resourceId: String, $metadata: jsonb, $ipAddress: inet, $userAgent: String) {\n  insertAuditLog(\n    object: {userId: $userId, action: $action, resourceType: $resourceType, resourceId: $resourceId, metadata: $metadata, ipAddress: $ipAddress, userAgent: $userAgent}\n  ) {\n    id\n    eventTime\n  }\n}\n\nmutation CreateAuthEvent($userId: uuid, $eventType: String!, $success: Boolean!, $ipAddress: inet, $userAgent: String, $metadata: jsonb) {\n  insertAuthEvent(\n    object: {userId: $userId, eventType: $eventType, success: $success, ipAddress: $ipAddress, userAgent: $userAgent, metadata: $metadata}\n  ) {\n    id\n    eventTime\n  }\n}\n\nmutation LogAuthEvent($eventType: String!, $userId: uuid, $metadata: jsonb, $ipAddress: inet, $userAgent: String, $success: Boolean = true, $failureReason: String) {\n  insertAuthEvent(\n    object: {eventType: $eventType, userId: $userId, metadata: $metadata, ipAddress: $ipAddress, userAgent: $userAgent, success: $success, failureReason: $failureReason}\n  ) {\n    id\n    eventTime\n  }\n}\n\nmutation LogDataAccessEvent($userId: uuid!, $resourceType: String!, $resourceId: String, $accessType: String!, $ipAddress: inet, $metadata: jsonb) {\n  insertDataAccessLog(\n    object: {userId: $userId, resourceType: $resourceType, resourceId: $resourceId, accessType: $accessType, ipAddress: $ipAddress, metadata: $metadata}\n  ) {\n    id\n    accessedAt\n  }\n}\n\nmutation LogPermissionAuditEvent($userId: uuid!, $action: String!, $resource: String!, $operation: String, $reason: String) {\n  insertPermissionAuditLog(\n    object: {userId: $userId, action: $action, resource: $resource, operation: $operation, reason: $reason}\n  ) {\n    id\n    createdAt\n  }\n}\n\nmutation DeleteOldAuditLogs($beforeDate: timestamptz!) {\n  bulkDeleteAuditLogs(where: {eventTime: {_lt: $beforeDate}}) {\n    affectedRows\n  }\n}"): (typeof documents)["mutation CreateAuditLog($userId: uuid!, $action: String!, $resourceType: String!, $resourceId: String, $metadata: jsonb, $ipAddress: inet, $userAgent: String) {\n  insertAuditLog(\n    object: {userId: $userId, action: $action, resourceType: $resourceType, resourceId: $resourceId, metadata: $metadata, ipAddress: $ipAddress, userAgent: $userAgent}\n  ) {\n    id\n    eventTime\n  }\n}\n\nmutation CreateAuthEvent($userId: uuid, $eventType: String!, $success: Boolean!, $ipAddress: inet, $userAgent: String, $metadata: jsonb) {\n  insertAuthEvent(\n    object: {userId: $userId, eventType: $eventType, success: $success, ipAddress: $ipAddress, userAgent: $userAgent, metadata: $metadata}\n  ) {\n    id\n    eventTime\n  }\n}\n\nmutation LogAuthEvent($eventType: String!, $userId: uuid, $metadata: jsonb, $ipAddress: inet, $userAgent: String, $success: Boolean = true, $failureReason: String) {\n  insertAuthEvent(\n    object: {eventType: $eventType, userId: $userId, metadata: $metadata, ipAddress: $ipAddress, userAgent: $userAgent, success: $success, failureReason: $failureReason}\n  ) {\n    id\n    eventTime\n  }\n}\n\nmutation LogDataAccessEvent($userId: uuid!, $resourceType: String!, $resourceId: String, $accessType: String!, $ipAddress: inet, $metadata: jsonb) {\n  insertDataAccessLog(\n    object: {userId: $userId, resourceType: $resourceType, resourceId: $resourceId, accessType: $accessType, ipAddress: $ipAddress, metadata: $metadata}\n  ) {\n    id\n    accessedAt\n  }\n}\n\nmutation LogPermissionAuditEvent($userId: uuid!, $action: String!, $resource: String!, $operation: String, $reason: String) {\n  insertPermissionAuditLog(\n    object: {userId: $userId, action: $action, resource: $resource, operation: $operation, reason: $reason}\n  ) {\n    id\n    createdAt\n  }\n}\n\nmutation DeleteOldAuditLogs($beforeDate: timestamptz!) {\n  bulkDeleteAuditLogs(where: {eventTime: {_lt: $beforeDate}}) {\n    affectedRows\n  }\n}"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "query GetAuditLogs($limit: Int = 50, $offset: Int = 0, $where: auditLogsBoolExp, $orderBy: [auditLogsOrderBy!] = {eventTime: DESC}) {\n  auditLogs(limit: $limit, offset: $offset, where: $where, orderBy: $orderBy) {\n    ...AuditLogEntry\n  }\n  auditLogsAggregate(where: $where) {\n    aggregate {\n      count\n    }\n  }\n}\n\nquery GetAuthEvents($limit: Int = 20, $offset: Int = 0, $where: authEventsBoolExp, $orderBy: [authEventsOrderBy!] = {eventTime: DESC}) {\n  authEvents(limit: $limit, offset: $offset, where: $where, orderBy: $orderBy) {\n    ...AuthEvent\n  }\n  authEventsAggregate(where: $where) {\n    aggregate {\n      count\n    }\n  }\n}\n\nquery GetAuditSummary($timeRange: timestamptz!) {\n  totalActions: auditLogsAggregate(where: {eventTime: {_gte: $timeRange}}) {\n    aggregate {\n      count\n    }\n  }\n  actionsByType: auditLogs(\n    where: {eventTime: {_gte: $timeRange}}\n    distinctOn: action\n  ) {\n    action\n  }\n  mostActiveUsers: auditLogs(\n    where: {eventTime: {_gte: $timeRange}}\n    distinctOn: userId\n    orderBy: {userId: ASC}\n    limit: 5\n  ) {\n    userId\n  }\n  authEventsByType: authEvents(\n    where: {eventTime: {_gte: $timeRange}}\n    distinctOn: eventType\n  ) {\n    eventType\n  }\n}\n\nquery GetResourceAccessHistory($resourceType: String!, $resourceId: String!, $limit: Int = 50) {\n  auditLogs(\n    where: {resourceType: {_eq: $resourceType}, resourceId: {_eq: $resourceId}}\n    orderBy: {eventTime: DESC}\n    limit: $limit\n  ) {\n    ...AuditLogEntry\n  }\n}\n\nquery GetUserActivityTimeline($userId: uuid!, $startDate: timestamptz!, $endDate: timestamptz!) {\n  auditLogs(\n    where: {userId: {_eq: $userId}, eventTime: {_gte: $startDate, _lte: $endDate}}\n    orderBy: {eventTime: DESC}\n  ) {\n    ...AuditLogEntry\n  }\n  authEvents(\n    where: {userId: {_eq: $userId}, eventTime: {_gte: $startDate, _lte: $endDate}}\n    orderBy: {eventTime: DESC}\n  ) {\n    id\n    eventType\n    success\n    eventTime\n    ipAddress\n    userAgent\n  }\n}\n\nquery GetDataAccessReport($startDate: timestamptz!, $endDate: timestamptz!, $resourceType: String) {\n  dataAccessLogs(\n    where: {accessedAt: {_gte: $startDate, _lte: $endDate}, resourceType: {_eq: $resourceType}}\n    orderBy: {accessedAt: DESC}\n  ) {\n    ...DataAccessLog\n  }\n}\n\nquery GetComplianceAuditTrail($startDate: timestamptz!, $endDate: timestamptz!) {\n  permissionChanges: auditLogs(\n    where: {resourceType: {_in: [\"permission\", \"role\", \"permission_override\"]}, eventTime: {_gte: $startDate, _lte: $endDate}}\n    orderBy: {eventTime: DESC}\n  ) {\n    ...AuditLogEntry\n  }\n  userChanges: auditLogs(\n    where: {resourceType: {_eq: \"user\"}, action: {_in: [\"create\", \"update\", \"delete\"]}, eventTime: {_gte: $startDate, _lte: $endDate}}\n    orderBy: {eventTime: DESC}\n  ) {\n    ...AuditLogEntry\n  }\n  dataExports: auditLogs(\n    where: {action: {_eq: \"export\"}, eventTime: {_gte: $startDate, _lte: $endDate}}\n    orderBy: {eventTime: DESC}\n  ) {\n    ...AuditLogEntry\n  }\n}\n\nquery GenerateSOC2AuditReport($startDate: timestamptz!, $endDate: timestamptz!, $limit: Int = 1000) {\n  authenticationEvents: authEvents(\n    where: {eventTime: {_gte: $startDate, _lte: $endDate}}\n    orderBy: {eventTime: DESC}\n    limit: $limit\n  ) {\n    ...AuthEvent\n  }\n  dataAccessEvents: dataAccessLogs(\n    where: {accessedAt: {_gte: $startDate, _lte: $endDate}}\n    orderBy: {accessedAt: DESC}\n    limit: $limit\n  ) {\n    ...DataAccessLog\n  }\n  systemChanges: auditLogs(\n    where: {eventTime: {_gte: $startDate, _lte: $endDate}, resourceType: {_in: [\"system\", \"configuration\", \"database\"]}}\n    orderBy: {eventTime: DESC}\n    limit: $limit\n  ) {\n    ...AuditLogEntry\n  }\n  privilegedAccess: auditLogs(\n    where: {eventTime: {_gte: $startDate, _lte: $endDate}, userRole: {_in: [\"admin\", \"super_admin\"]}}\n    orderBy: {eventTime: DESC}\n    limit: $limit\n  ) {\n    ...AuditLogEntry\n  }\n}\n\nquery AuditLog($id: uuid!) {\n  auditLogById(id: $id) {\n    ...AuditLogEntry\n  }\n}\n\nquery ComplianceReport($startDate: timestamptz!, $endDate: timestamptz!) {\n  auditLogs(\n    where: {eventTime: {_gte: $startDate, _lte: $endDate}}\n    orderBy: {eventTime: DESC}\n  ) {\n    ...AuditLogEntry\n  }\n}\n\nquery ComplianceAuditLogs($startDate: timestamptz!, $endDate: timestamptz!) {\n  auditLogs(\n    where: {eventTime: {_gte: $startDate, _lte: $endDate}}\n    orderBy: {eventTime: DESC}\n  ) {\n    ...AuditLogEntry\n  }\n}\n\nquery SecurityOverview($timeRange: timestamptz!) {\n  totalAuditLogs: auditLogsAggregate(where: {eventTime: {_gte: $timeRange}}) {\n    aggregate {\n      count\n    }\n  }\n  failedLogins: authEventsAggregate(\n    where: {eventTime: {_gte: $timeRange}, success: {_eq: false}}\n  ) {\n    aggregate {\n      count\n    }\n  }\n}\n\nquery CleanAllPayrollDates {\n  payrollDates {\n    id\n    payrollId\n    originalEftDate\n  }\n}\n\nquery GetSecurityIncidentAnalysis($startDate: timestamptz!, $endDate: timestamptz!) {\n  failedAuthentications: authEvents(\n    where: {eventTime: {_gte: $startDate, _lte: $endDate}, success: {_eq: false}}\n    orderBy: {eventTime: DESC}\n  ) {\n    ...AuthEvent\n  }\n  suspiciousActivity: auditLogs(\n    where: {eventTime: {_gte: $startDate, _lte: $endDate}, action: {_in: [\"bulk_export\", \"mass_delete\", \"privilege_escalation\"]}}\n    orderBy: {eventTime: DESC}\n  ) {\n    ...AuditLogEntry\n  }\n  permissionDenials: auditLogs(\n    where: {eventTime: {_gte: $startDate, _lte: $endDate}, success: {_eq: false}, action: {_like: \"%denied%\"}}\n    orderBy: {eventTime: DESC}\n  ) {\n    ...AuditLogEntry\n  }\n}\n\nquery GetUserActivityAnalytics($startDate: timestamptz!, $endDate: timestamptz!, $userId: uuid) {\n  userSessions: authEvents(\n    where: {eventTime: {_gte: $startDate, _lte: $endDate}, userId: {_eq: $userId}, eventType: {_in: [\"login\", \"logout\", \"session_timeout\"]}}\n    orderBy: {eventTime: DESC}\n  ) {\n    ...AuthEvent\n  }\n  resourceAccess: auditLogs(\n    where: {eventTime: {_gte: $startDate, _lte: $endDate}, userId: {_eq: $userId}, action: {_in: [\"view\", \"edit\", \"delete\", \"export\"]}}\n    orderBy: {eventTime: DESC}\n  ) {\n    ...AuditLogEntry\n  }\n  permissionUsage: auditLogs(\n    where: {eventTime: {_gte: $startDate, _lte: $endDate}, userId: {_eq: $userId}, resourceType: {_in: [\"client\", \"payroll\", \"user\", \"billing\"]}}\n    orderBy: {eventTime: DESC}\n  ) {\n    ...AuditLogEntry\n  }\n}\n\nquery GetDataRetentionAnalytics($retentionDate: timestamptz!) {\n  auditLogRetention: auditLogsAggregate {\n    aggregate {\n      count\n      min {\n        eventTime\n      }\n      max {\n        eventTime\n      }\n    }\n  }\n  dataAccessRetention: dataAccessLogsAggregate {\n    aggregate {\n      count\n      min {\n        accessedAt\n      }\n      max {\n        accessedAt\n      }\n    }\n  }\n  oldAuditLogs: auditLogsAggregate(where: {eventTime: {_lt: $retentionDate}}) {\n    aggregate {\n      count\n    }\n  }\n}\n\nquery GetSystemHealthAnalytics($timeRange: timestamptz!) {\n  apiUsage: auditLogsAggregate(\n    where: {eventTime: {_gte: $timeRange}, action: {_like: \"api_%\"}}\n  ) {\n    aggregate {\n      count\n    }\n  }\n  systemErrors: auditLogsAggregate(\n    where: {eventTime: {_gte: $timeRange}, success: {_eq: false}}\n  ) {\n    aggregate {\n      count\n    }\n  }\n  resourceUsageStats: auditLogsAggregate(where: {eventTime: {_gte: $timeRange}}) {\n    aggregate {\n      count\n    }\n  }\n}\n\nquery SearchAuditLogs($searchTerm: String!, $startDate: timestamptz, $endDate: timestamptz, $resourceTypes: [String!], $actions: [String!], $userIds: [uuid!], $limit: Int = 100, $offset: Int = 0) {\n  auditLogs(\n    where: {_and: [{eventTime: {_gte: $startDate, _lte: $endDate}}, {_or: [{action: {_ilike: $searchTerm}}, {resourceType: {_ilike: $searchTerm}}, {resourceId: {_ilike: $searchTerm}}, {userEmail: {_ilike: $searchTerm}}]}, {resourceType: {_in: $resourceTypes}}, {action: {_in: $actions}}, {userId: {_in: $userIds}}]}\n    orderBy: {eventTime: DESC}\n    limit: $limit\n    offset: $offset\n  ) {\n    ...AuditLogEntry\n  }\n  searchResults: auditLogsAggregate(\n    where: {_and: [{eventTime: {_gte: $startDate, _lte: $endDate}}, {_or: [{action: {_ilike: $searchTerm}}, {resourceType: {_ilike: $searchTerm}}, {resourceId: {_ilike: $searchTerm}}, {userEmail: {_ilike: $searchTerm}}]}, {resourceType: {_in: $resourceTypes}}, {action: {_in: $actions}}, {userId: {_in: $userIds}}]}\n  ) {\n    aggregate {\n      count\n    }\n  }\n}\n\nquery GetComplianceMonitoringData($timeRange: timestamptz!) {\n  criticalEvents: auditLogs(\n    where: {eventTime: {_gte: $timeRange}, action: {_in: [\"delete\", \"export\", \"privilege_change\", \"system_config\"]}}\n    orderBy: {eventTime: DESC}\n    limit: 20\n  ) {\n    ...AuditLogEntry\n  }\n  authMetrics: authEventsAggregate(where: {eventTime: {_gte: $timeRange}}) {\n    aggregate {\n      count\n    }\n  }\n  failedAccess: authEventsAggregate(\n    where: {eventTime: {_gte: $timeRange}, success: {_eq: false}}\n  ) {\n    aggregate {\n      count\n    }\n  }\n  sensitiveDataAccess: dataAccessLogsAggregate(\n    where: {accessedAt: {_gte: $timeRange}, dataClassification: {_in: [\"CRITICAL\", \"HIGH\"]}}\n  ) {\n    aggregate {\n      count\n    }\n  }\n}"): (typeof documents)["query GetAuditLogs($limit: Int = 50, $offset: Int = 0, $where: auditLogsBoolExp, $orderBy: [auditLogsOrderBy!] = {eventTime: DESC}) {\n  auditLogs(limit: $limit, offset: $offset, where: $where, orderBy: $orderBy) {\n    ...AuditLogEntry\n  }\n  auditLogsAggregate(where: $where) {\n    aggregate {\n      count\n    }\n  }\n}\n\nquery GetAuthEvents($limit: Int = 20, $offset: Int = 0, $where: authEventsBoolExp, $orderBy: [authEventsOrderBy!] = {eventTime: DESC}) {\n  authEvents(limit: $limit, offset: $offset, where: $where, orderBy: $orderBy) {\n    ...AuthEvent\n  }\n  authEventsAggregate(where: $where) {\n    aggregate {\n      count\n    }\n  }\n}\n\nquery GetAuditSummary($timeRange: timestamptz!) {\n  totalActions: auditLogsAggregate(where: {eventTime: {_gte: $timeRange}}) {\n    aggregate {\n      count\n    }\n  }\n  actionsByType: auditLogs(\n    where: {eventTime: {_gte: $timeRange}}\n    distinctOn: action\n  ) {\n    action\n  }\n  mostActiveUsers: auditLogs(\n    where: {eventTime: {_gte: $timeRange}}\n    distinctOn: userId\n    orderBy: {userId: ASC}\n    limit: 5\n  ) {\n    userId\n  }\n  authEventsByType: authEvents(\n    where: {eventTime: {_gte: $timeRange}}\n    distinctOn: eventType\n  ) {\n    eventType\n  }\n}\n\nquery GetResourceAccessHistory($resourceType: String!, $resourceId: String!, $limit: Int = 50) {\n  auditLogs(\n    where: {resourceType: {_eq: $resourceType}, resourceId: {_eq: $resourceId}}\n    orderBy: {eventTime: DESC}\n    limit: $limit\n  ) {\n    ...AuditLogEntry\n  }\n}\n\nquery GetUserActivityTimeline($userId: uuid!, $startDate: timestamptz!, $endDate: timestamptz!) {\n  auditLogs(\n    where: {userId: {_eq: $userId}, eventTime: {_gte: $startDate, _lte: $endDate}}\n    orderBy: {eventTime: DESC}\n  ) {\n    ...AuditLogEntry\n  }\n  authEvents(\n    where: {userId: {_eq: $userId}, eventTime: {_gte: $startDate, _lte: $endDate}}\n    orderBy: {eventTime: DESC}\n  ) {\n    id\n    eventType\n    success\n    eventTime\n    ipAddress\n    userAgent\n  }\n}\n\nquery GetDataAccessReport($startDate: timestamptz!, $endDate: timestamptz!, $resourceType: String) {\n  dataAccessLogs(\n    where: {accessedAt: {_gte: $startDate, _lte: $endDate}, resourceType: {_eq: $resourceType}}\n    orderBy: {accessedAt: DESC}\n  ) {\n    ...DataAccessLog\n  }\n}\n\nquery GetComplianceAuditTrail($startDate: timestamptz!, $endDate: timestamptz!) {\n  permissionChanges: auditLogs(\n    where: {resourceType: {_in: [\"permission\", \"role\", \"permission_override\"]}, eventTime: {_gte: $startDate, _lte: $endDate}}\n    orderBy: {eventTime: DESC}\n  ) {\n    ...AuditLogEntry\n  }\n  userChanges: auditLogs(\n    where: {resourceType: {_eq: \"user\"}, action: {_in: [\"create\", \"update\", \"delete\"]}, eventTime: {_gte: $startDate, _lte: $endDate}}\n    orderBy: {eventTime: DESC}\n  ) {\n    ...AuditLogEntry\n  }\n  dataExports: auditLogs(\n    where: {action: {_eq: \"export\"}, eventTime: {_gte: $startDate, _lte: $endDate}}\n    orderBy: {eventTime: DESC}\n  ) {\n    ...AuditLogEntry\n  }\n}\n\nquery GenerateSOC2AuditReport($startDate: timestamptz!, $endDate: timestamptz!, $limit: Int = 1000) {\n  authenticationEvents: authEvents(\n    where: {eventTime: {_gte: $startDate, _lte: $endDate}}\n    orderBy: {eventTime: DESC}\n    limit: $limit\n  ) {\n    ...AuthEvent\n  }\n  dataAccessEvents: dataAccessLogs(\n    where: {accessedAt: {_gte: $startDate, _lte: $endDate}}\n    orderBy: {accessedAt: DESC}\n    limit: $limit\n  ) {\n    ...DataAccessLog\n  }\n  systemChanges: auditLogs(\n    where: {eventTime: {_gte: $startDate, _lte: $endDate}, resourceType: {_in: [\"system\", \"configuration\", \"database\"]}}\n    orderBy: {eventTime: DESC}\n    limit: $limit\n  ) {\n    ...AuditLogEntry\n  }\n  privilegedAccess: auditLogs(\n    where: {eventTime: {_gte: $startDate, _lte: $endDate}, userRole: {_in: [\"admin\", \"super_admin\"]}}\n    orderBy: {eventTime: DESC}\n    limit: $limit\n  ) {\n    ...AuditLogEntry\n  }\n}\n\nquery AuditLog($id: uuid!) {\n  auditLogById(id: $id) {\n    ...AuditLogEntry\n  }\n}\n\nquery ComplianceReport($startDate: timestamptz!, $endDate: timestamptz!) {\n  auditLogs(\n    where: {eventTime: {_gte: $startDate, _lte: $endDate}}\n    orderBy: {eventTime: DESC}\n  ) {\n    ...AuditLogEntry\n  }\n}\n\nquery ComplianceAuditLogs($startDate: timestamptz!, $endDate: timestamptz!) {\n  auditLogs(\n    where: {eventTime: {_gte: $startDate, _lte: $endDate}}\n    orderBy: {eventTime: DESC}\n  ) {\n    ...AuditLogEntry\n  }\n}\n\nquery SecurityOverview($timeRange: timestamptz!) {\n  totalAuditLogs: auditLogsAggregate(where: {eventTime: {_gte: $timeRange}}) {\n    aggregate {\n      count\n    }\n  }\n  failedLogins: authEventsAggregate(\n    where: {eventTime: {_gte: $timeRange}, success: {_eq: false}}\n  ) {\n    aggregate {\n      count\n    }\n  }\n}\n\nquery CleanAllPayrollDates {\n  payrollDates {\n    id\n    payrollId\n    originalEftDate\n  }\n}\n\nquery GetSecurityIncidentAnalysis($startDate: timestamptz!, $endDate: timestamptz!) {\n  failedAuthentications: authEvents(\n    where: {eventTime: {_gte: $startDate, _lte: $endDate}, success: {_eq: false}}\n    orderBy: {eventTime: DESC}\n  ) {\n    ...AuthEvent\n  }\n  suspiciousActivity: auditLogs(\n    where: {eventTime: {_gte: $startDate, _lte: $endDate}, action: {_in: [\"bulk_export\", \"mass_delete\", \"privilege_escalation\"]}}\n    orderBy: {eventTime: DESC}\n  ) {\n    ...AuditLogEntry\n  }\n  permissionDenials: auditLogs(\n    where: {eventTime: {_gte: $startDate, _lte: $endDate}, success: {_eq: false}, action: {_like: \"%denied%\"}}\n    orderBy: {eventTime: DESC}\n  ) {\n    ...AuditLogEntry\n  }\n}\n\nquery GetUserActivityAnalytics($startDate: timestamptz!, $endDate: timestamptz!, $userId: uuid) {\n  userSessions: authEvents(\n    where: {eventTime: {_gte: $startDate, _lte: $endDate}, userId: {_eq: $userId}, eventType: {_in: [\"login\", \"logout\", \"session_timeout\"]}}\n    orderBy: {eventTime: DESC}\n  ) {\n    ...AuthEvent\n  }\n  resourceAccess: auditLogs(\n    where: {eventTime: {_gte: $startDate, _lte: $endDate}, userId: {_eq: $userId}, action: {_in: [\"view\", \"edit\", \"delete\", \"export\"]}}\n    orderBy: {eventTime: DESC}\n  ) {\n    ...AuditLogEntry\n  }\n  permissionUsage: auditLogs(\n    where: {eventTime: {_gte: $startDate, _lte: $endDate}, userId: {_eq: $userId}, resourceType: {_in: [\"client\", \"payroll\", \"user\", \"billing\"]}}\n    orderBy: {eventTime: DESC}\n  ) {\n    ...AuditLogEntry\n  }\n}\n\nquery GetDataRetentionAnalytics($retentionDate: timestamptz!) {\n  auditLogRetention: auditLogsAggregate {\n    aggregate {\n      count\n      min {\n        eventTime\n      }\n      max {\n        eventTime\n      }\n    }\n  }\n  dataAccessRetention: dataAccessLogsAggregate {\n    aggregate {\n      count\n      min {\n        accessedAt\n      }\n      max {\n        accessedAt\n      }\n    }\n  }\n  oldAuditLogs: auditLogsAggregate(where: {eventTime: {_lt: $retentionDate}}) {\n    aggregate {\n      count\n    }\n  }\n}\n\nquery GetSystemHealthAnalytics($timeRange: timestamptz!) {\n  apiUsage: auditLogsAggregate(\n    where: {eventTime: {_gte: $timeRange}, action: {_like: \"api_%\"}}\n  ) {\n    aggregate {\n      count\n    }\n  }\n  systemErrors: auditLogsAggregate(\n    where: {eventTime: {_gte: $timeRange}, success: {_eq: false}}\n  ) {\n    aggregate {\n      count\n    }\n  }\n  resourceUsageStats: auditLogsAggregate(where: {eventTime: {_gte: $timeRange}}) {\n    aggregate {\n      count\n    }\n  }\n}\n\nquery SearchAuditLogs($searchTerm: String!, $startDate: timestamptz, $endDate: timestamptz, $resourceTypes: [String!], $actions: [String!], $userIds: [uuid!], $limit: Int = 100, $offset: Int = 0) {\n  auditLogs(\n    where: {_and: [{eventTime: {_gte: $startDate, _lte: $endDate}}, {_or: [{action: {_ilike: $searchTerm}}, {resourceType: {_ilike: $searchTerm}}, {resourceId: {_ilike: $searchTerm}}, {userEmail: {_ilike: $searchTerm}}]}, {resourceType: {_in: $resourceTypes}}, {action: {_in: $actions}}, {userId: {_in: $userIds}}]}\n    orderBy: {eventTime: DESC}\n    limit: $limit\n    offset: $offset\n  ) {\n    ...AuditLogEntry\n  }\n  searchResults: auditLogsAggregate(\n    where: {_and: [{eventTime: {_gte: $startDate, _lte: $endDate}}, {_or: [{action: {_ilike: $searchTerm}}, {resourceType: {_ilike: $searchTerm}}, {resourceId: {_ilike: $searchTerm}}, {userEmail: {_ilike: $searchTerm}}]}, {resourceType: {_in: $resourceTypes}}, {action: {_in: $actions}}, {userId: {_in: $userIds}}]}\n  ) {\n    aggregate {\n      count\n    }\n  }\n}\n\nquery GetComplianceMonitoringData($timeRange: timestamptz!) {\n  criticalEvents: auditLogs(\n    where: {eventTime: {_gte: $timeRange}, action: {_in: [\"delete\", \"export\", \"privilege_change\", \"system_config\"]}}\n    orderBy: {eventTime: DESC}\n    limit: 20\n  ) {\n    ...AuditLogEntry\n  }\n  authMetrics: authEventsAggregate(where: {eventTime: {_gte: $timeRange}}) {\n    aggregate {\n      count\n    }\n  }\n  failedAccess: authEventsAggregate(\n    where: {eventTime: {_gte: $timeRange}, success: {_eq: false}}\n  ) {\n    aggregate {\n      count\n    }\n  }\n  sensitiveDataAccess: dataAccessLogsAggregate(\n    where: {accessedAt: {_gte: $timeRange}, dataClassification: {_in: [\"CRITICAL\", \"HIGH\"]}}\n  ) {\n    aggregate {\n      count\n    }\n  }\n}"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "subscription AuditLogStream($resourceTypes: [String!], $actions: [String!], $sinceTimestamp: timestamptz!) {\n  auditLogs(\n    where: {resourceType: {_in: $resourceTypes}, action: {_in: $actions}, eventTime: {_gte: $sinceTimestamp}}\n    orderBy: {eventTime: DESC}\n  ) {\n    ...AuditLogEntry\n  }\n}\n\nsubscription AuthEventStream($eventTypes: [String!], $sinceTimestamp: timestamptz!) {\n  authEvents(\n    where: {eventType: {_in: $eventTypes}, eventTime: {_gte: $sinceTimestamp}}\n    orderBy: {eventTime: DESC}\n  ) {\n    ...AuthEvent\n  }\n}\n\nsubscription SubscribeToAuditLogs($limit: Int = 50) {\n  auditLogs(orderBy: {eventTime: DESC}, limit: $limit) {\n    ...AuditLogEntry\n  }\n}\n\nsubscription SecurityEventsStream {\n  auditLogs(\n    where: {resourceType: {_in: [\"security\", \"auth\", \"permission\"]}}\n    orderBy: {eventTime: DESC}\n    limit: 100\n  ) {\n    ...AuditLogEntry\n  }\n}\n\nsubscription FailedOperationsStream {\n  auditLogs(where: {success: {_eq: false}}, orderBy: {eventTime: DESC}, limit: 50) {\n    ...AuditLogEntry\n  }\n}\n\nsubscription CriticalDataAccessStream {\n  auditLogs(\n    where: {resourceType: {_in: [\"users\", \"clients\", \"payrolls\"]}, action: {_in: [\"delete\", \"create\", \"update\"]}}\n    orderBy: {eventTime: DESC}\n    limit: 100\n  ) {\n    ...AuditLogEntry\n  }\n}\n\nsubscription DataAccessStream($resourceTypes: [String!], $sinceTimestamp: timestamptz!) {\n  dataAccessLogs(\n    where: {resourceType: {_in: $resourceTypes}, accessedAt: {_gte: $sinceTimestamp}}\n    orderBy: {accessedAt: DESC}\n  ) {\n    ...DataAccessLog\n  }\n}\n\nsubscription SensitiveAuditStream($resourceTypes: [String!]!, $sinceTimestamp: timestamptz!) {\n  auditLogs(\n    where: {resourceType: {_in: $resourceTypes}, action: {_in: [\"view\", \"export\", \"update\", \"delete\"]}, eventTime: {_gte: $sinceTimestamp}}\n    orderBy: {eventTime: DESC}\n  ) {\n    ...AuditLogEntry\n  }\n}\n\nsubscription PermissionAuditStream($sinceTimestamp: timestamptz!) {\n  permissionAuditLogs(\n    where: {operation: {_eq: \"deny\"}, createdAt: {_gte: $sinceTimestamp}}\n    orderBy: {createdAt: DESC}\n  ) {\n    id\n    userId\n    action\n    resource\n    operation\n    reason\n    createdAt\n  }\n}"): (typeof documents)["subscription AuditLogStream($resourceTypes: [String!], $actions: [String!], $sinceTimestamp: timestamptz!) {\n  auditLogs(\n    where: {resourceType: {_in: $resourceTypes}, action: {_in: $actions}, eventTime: {_gte: $sinceTimestamp}}\n    orderBy: {eventTime: DESC}\n  ) {\n    ...AuditLogEntry\n  }\n}\n\nsubscription AuthEventStream($eventTypes: [String!], $sinceTimestamp: timestamptz!) {\n  authEvents(\n    where: {eventType: {_in: $eventTypes}, eventTime: {_gte: $sinceTimestamp}}\n    orderBy: {eventTime: DESC}\n  ) {\n    ...AuthEvent\n  }\n}\n\nsubscription SubscribeToAuditLogs($limit: Int = 50) {\n  auditLogs(orderBy: {eventTime: DESC}, limit: $limit) {\n    ...AuditLogEntry\n  }\n}\n\nsubscription SecurityEventsStream {\n  auditLogs(\n    where: {resourceType: {_in: [\"security\", \"auth\", \"permission\"]}}\n    orderBy: {eventTime: DESC}\n    limit: 100\n  ) {\n    ...AuditLogEntry\n  }\n}\n\nsubscription FailedOperationsStream {\n  auditLogs(where: {success: {_eq: false}}, orderBy: {eventTime: DESC}, limit: 50) {\n    ...AuditLogEntry\n  }\n}\n\nsubscription CriticalDataAccessStream {\n  auditLogs(\n    where: {resourceType: {_in: [\"users\", \"clients\", \"payrolls\"]}, action: {_in: [\"delete\", \"create\", \"update\"]}}\n    orderBy: {eventTime: DESC}\n    limit: 100\n  ) {\n    ...AuditLogEntry\n  }\n}\n\nsubscription DataAccessStream($resourceTypes: [String!], $sinceTimestamp: timestamptz!) {\n  dataAccessLogs(\n    where: {resourceType: {_in: $resourceTypes}, accessedAt: {_gte: $sinceTimestamp}}\n    orderBy: {accessedAt: DESC}\n  ) {\n    ...DataAccessLog\n  }\n}\n\nsubscription SensitiveAuditStream($resourceTypes: [String!]!, $sinceTimestamp: timestamptz!) {\n  auditLogs(\n    where: {resourceType: {_in: $resourceTypes}, action: {_in: [\"view\", \"export\", \"update\", \"delete\"]}, eventTime: {_gte: $sinceTimestamp}}\n    orderBy: {eventTime: DESC}\n  ) {\n    ...AuditLogEntry\n  }\n}\n\nsubscription PermissionAuditStream($sinceTimestamp: timestamptz!) {\n  permissionAuditLogs(\n    where: {operation: {_eq: \"deny\"}, createdAt: {_gte: $sinceTimestamp}}\n    orderBy: {createdAt: DESC}\n  ) {\n    id\n    userId\n    action\n    resource\n    operation\n    reason\n    createdAt\n  }\n}"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "fragment UserMinimal on users {\n  id\n  name\n  email\n}\n\nfragment UserCoreShared on users {\n  ...UserMinimal\n  role\n  isActive\n}\n\nfragment UserBasic on users {\n  ...UserCoreShared\n  createdAt\n  updatedAt\n}\n\nfragment UserBase on users {\n  ...UserBasic\n}\n\nfragment UserWithRole on users {\n  ...UserBasic\n  assignedRoles {\n    assignedRole {\n      id\n      name\n      displayName\n    }\n  }\n}\n\nfragment UserProfile on users {\n  ...UserWithRole\n  username\n  clerkUserId\n  image\n  isStaff\n  managerId\n  deactivatedAt\n  deactivatedBy\n  managerUser {\n    ...UserMinimal\n  }\n}\n\nfragment UserSearchResult on users {\n  ...UserCoreShared\n  username\n  isStaff\n}\n\nfragment ClientMinimal on clients {\n  id\n  name\n}\n\nfragment ClientBase on clients {\n  id\n  name\n  active\n  contactEmail\n  contactPerson\n  contactPhone\n  createdAt\n}\n\nfragment ClientWithStats on clients {\n  ...ClientBase\n  currentEmployeeCount: payrollsAggregate(\n    where: {supersededDate: {_isNull: true}}\n  ) {\n    aggregate {\n      sum {\n        employeeCount\n      }\n    }\n  }\n  activePayrollCount: payrollsAggregate(\n    where: {supersededDate: {_isNull: true}, status: {_eq: \"Active\"}}\n  ) {\n    aggregate {\n      count\n    }\n  }\n}\n\nfragment ClientListBase on clients {\n  ...ClientBase\n  payrollCount: payrollsAggregate(where: {supersededDate: {_isNull: true}}) {\n    aggregate {\n      count\n    }\n  }\n}\n\nfragment PayrollMinimal on payrolls {\n  id\n  name\n  employeeCount\n  status\n}\n\nfragment PayrollBase on payrolls {\n  id\n  name\n  employeeCount\n  status\n  payrollSystem\n  processingTime\n  processingDaysBeforeEft\n  versionNumber\n  createdAt\n  updatedAt\n}\n\nfragment PayrollWithClient on payrolls {\n  ...PayrollBase\n  clientId\n  client {\n    id\n    name\n    active\n  }\n}\n\nfragment PayrollListItem on payrolls {\n  ...PayrollWithClient\n  primaryConsultantUserId\n  backupConsultantUserId\n  managerUserId\n  createdByUserId\n  primaryConsultant {\n    ...UserMinimal\n  }\n  backupConsultant {\n    ...UserMinimal\n  }\n  manager {\n    ...UserMinimal\n  }\n}\n\nfragment PayrollWithDates on payrolls {\n  ...PayrollBase\n  goLiveDate\n  payrollDates(orderBy: {originalEftDate: ASC}) {\n    id\n    originalEftDate\n    adjustedEftDate\n    notes\n  }\n}\n\nfragment PayrollFullDetail on payrolls {\n  ...PayrollWithDates\n  ...PayrollWithClient\n  dateTypeId\n  cycleId\n  dateValue\n  versionReason\n  supersededDate\n  parentPayrollId\n  parentPayroll {\n    id\n    versionNumber\n  }\n  childPayrolls(orderBy: {versionNumber: DESC}) {\n    id\n    versionNumber\n    versionReason\n    createdAt\n  }\n  primaryConsultant {\n    ...UserMinimal\n  }\n  backupConsultant {\n    ...UserMinimal\n  }\n  manager {\n    ...UserMinimal\n  }\n}\n\nfragment NoteWithAuthor on notes {\n  id\n  content\n  isImportant\n  createdAt\n  entityId\n  entityType\n  authorUser {\n    ...UserMinimal\n  }\n}\n\nfragment PermissionBase on permissions {\n  id\n  resourceId\n  description\n  legacyPermissionName\n  action\n}\n\nfragment RoleWithPermissions on roles {\n  id\n  name\n  displayName\n  description\n  isSystemRole\n  priority\n  assignedPermissions {\n    grantedPermission {\n      ...PermissionBase\n    }\n  }\n}\n\nfragment AuditLogEntry on auditLogs {\n  id\n  userId\n  userEmail\n  userRole\n  action\n  resourceType\n  resourceId\n  eventTime\n  success\n  errorMessage\n  ipAddress\n  userAgent\n  requestId\n  sessionId\n  metadata\n  oldValues\n  newValues\n  createdAt\n}\n\nfragment AuthEvent on authEvents {\n  id\n  userId\n  userEmail\n  eventType\n  eventTime\n  success\n  failureReason\n  ipAddress\n  userAgent\n  metadata\n}\n\nfragment DataAccessLog on dataAccessLogs {\n  id\n  userId\n  resourceType\n  resourceId\n  accessType\n  accessedAt\n  dataClassification\n  fieldsAccessed\n  rowCount\n  ipAddress\n  metadata\n}\n\nfragment PermissionChange on permissionChanges {\n  id\n  changedAt\n  changedByUserId\n  targetUserId\n  targetRoleId\n  changeType\n  permissionType\n  oldPermissions\n  newPermissions\n  reason\n  approvedByUserId\n}\n\nfragment PayrollDateInfo on payrollDates {\n  id\n  originalEftDate\n  adjustedEftDate\n  notes\n  createdAt\n}\n\nfragment PermissionOverrideInfo on permissionOverrides {\n  id\n  userId\n  role\n  resource\n  operation\n  granted\n  reason\n  conditions\n  expiresAt\n  createdBy\n  createdAt\n}"): (typeof documents)["fragment UserMinimal on users {\n  id\n  name\n  email\n}\n\nfragment UserCoreShared on users {\n  ...UserMinimal\n  role\n  isActive\n}\n\nfragment UserBasic on users {\n  ...UserCoreShared\n  createdAt\n  updatedAt\n}\n\nfragment UserBase on users {\n  ...UserBasic\n}\n\nfragment UserWithRole on users {\n  ...UserBasic\n  assignedRoles {\n    assignedRole {\n      id\n      name\n      displayName\n    }\n  }\n}\n\nfragment UserProfile on users {\n  ...UserWithRole\n  username\n  clerkUserId\n  image\n  isStaff\n  managerId\n  deactivatedAt\n  deactivatedBy\n  managerUser {\n    ...UserMinimal\n  }\n}\n\nfragment UserSearchResult on users {\n  ...UserCoreShared\n  username\n  isStaff\n}\n\nfragment ClientMinimal on clients {\n  id\n  name\n}\n\nfragment ClientBase on clients {\n  id\n  name\n  active\n  contactEmail\n  contactPerson\n  contactPhone\n  createdAt\n}\n\nfragment ClientWithStats on clients {\n  ...ClientBase\n  currentEmployeeCount: payrollsAggregate(\n    where: {supersededDate: {_isNull: true}}\n  ) {\n    aggregate {\n      sum {\n        employeeCount\n      }\n    }\n  }\n  activePayrollCount: payrollsAggregate(\n    where: {supersededDate: {_isNull: true}, status: {_eq: \"Active\"}}\n  ) {\n    aggregate {\n      count\n    }\n  }\n}\n\nfragment ClientListBase on clients {\n  ...ClientBase\n  payrollCount: payrollsAggregate(where: {supersededDate: {_isNull: true}}) {\n    aggregate {\n      count\n    }\n  }\n}\n\nfragment PayrollMinimal on payrolls {\n  id\n  name\n  employeeCount\n  status\n}\n\nfragment PayrollBase on payrolls {\n  id\n  name\n  employeeCount\n  status\n  payrollSystem\n  processingTime\n  processingDaysBeforeEft\n  versionNumber\n  createdAt\n  updatedAt\n}\n\nfragment PayrollWithClient on payrolls {\n  ...PayrollBase\n  clientId\n  client {\n    id\n    name\n    active\n  }\n}\n\nfragment PayrollListItem on payrolls {\n  ...PayrollWithClient\n  primaryConsultantUserId\n  backupConsultantUserId\n  managerUserId\n  createdByUserId\n  primaryConsultant {\n    ...UserMinimal\n  }\n  backupConsultant {\n    ...UserMinimal\n  }\n  manager {\n    ...UserMinimal\n  }\n}\n\nfragment PayrollWithDates on payrolls {\n  ...PayrollBase\n  goLiveDate\n  payrollDates(orderBy: {originalEftDate: ASC}) {\n    id\n    originalEftDate\n    adjustedEftDate\n    notes\n  }\n}\n\nfragment PayrollFullDetail on payrolls {\n  ...PayrollWithDates\n  ...PayrollWithClient\n  dateTypeId\n  cycleId\n  dateValue\n  versionReason\n  supersededDate\n  parentPayrollId\n  parentPayroll {\n    id\n    versionNumber\n  }\n  childPayrolls(orderBy: {versionNumber: DESC}) {\n    id\n    versionNumber\n    versionReason\n    createdAt\n  }\n  primaryConsultant {\n    ...UserMinimal\n  }\n  backupConsultant {\n    ...UserMinimal\n  }\n  manager {\n    ...UserMinimal\n  }\n}\n\nfragment NoteWithAuthor on notes {\n  id\n  content\n  isImportant\n  createdAt\n  entityId\n  entityType\n  authorUser {\n    ...UserMinimal\n  }\n}\n\nfragment PermissionBase on permissions {\n  id\n  resourceId\n  description\n  legacyPermissionName\n  action\n}\n\nfragment RoleWithPermissions on roles {\n  id\n  name\n  displayName\n  description\n  isSystemRole\n  priority\n  assignedPermissions {\n    grantedPermission {\n      ...PermissionBase\n    }\n  }\n}\n\nfragment AuditLogEntry on auditLogs {\n  id\n  userId\n  userEmail\n  userRole\n  action\n  resourceType\n  resourceId\n  eventTime\n  success\n  errorMessage\n  ipAddress\n  userAgent\n  requestId\n  sessionId\n  metadata\n  oldValues\n  newValues\n  createdAt\n}\n\nfragment AuthEvent on authEvents {\n  id\n  userId\n  userEmail\n  eventType\n  eventTime\n  success\n  failureReason\n  ipAddress\n  userAgent\n  metadata\n}\n\nfragment DataAccessLog on dataAccessLogs {\n  id\n  userId\n  resourceType\n  resourceId\n  accessType\n  accessedAt\n  dataClassification\n  fieldsAccessed\n  rowCount\n  ipAddress\n  metadata\n}\n\nfragment PermissionChange on permissionChanges {\n  id\n  changedAt\n  changedByUserId\n  targetUserId\n  targetRoleId\n  changeType\n  permissionType\n  oldPermissions\n  newPermissions\n  reason\n  approvedByUserId\n}\n\nfragment PayrollDateInfo on payrollDates {\n  id\n  originalEftDate\n  adjustedEftDate\n  notes\n  createdAt\n}\n\nfragment PermissionOverrideInfo on permissionOverrides {\n  id\n  userId\n  role\n  resource\n  operation\n  granted\n  reason\n  conditions\n  expiresAt\n  createdBy\n  createdAt\n}"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "mutation LogAuditEvent($input: auditLogsInsertInput!) {\n  insertAuditLogsOne: insertAuditLog(object: $input) {\n    id\n    eventTime\n  }\n}\n\nmutation RefreshData {\n  __typename\n}"): (typeof documents)["mutation LogAuditEvent($input: auditLogsInsertInput!) {\n  insertAuditLogsOne: insertAuditLog(object: $input) {\n    id\n    eventTime\n  }\n}\n\nmutation RefreshData {\n  __typename\n}"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "query GetDashboardMetrics($userId: uuid!) {\n  clientsAggregate(where: {active: {_eq: true}}) {\n    aggregate {\n      count\n    }\n  }\n  activePayrollsAggregate: payrollsAggregate(\n    where: {supersededDate: {_isNull: true}, status: {_nin: [\"Completed\", \"Failed\"]}}\n  ) {\n    aggregate {\n      count\n    }\n  }\n  totalEmployeesAggregate: payrollsAggregate(\n    where: {supersededDate: {_isNull: true}}\n  ) {\n    aggregate {\n      sum {\n        employeeCount\n      }\n    }\n  }\n  upcomingPayrolls: payrolls(\n    where: {supersededDate: {_isNull: true}, status: {_nin: [\"Completed\", \"Failed\", \"Cancelled\"]}}\n    orderBy: {updatedAt: DESC}\n    limit: 5\n  ) {\n    ...PayrollMinimal\n    client {\n      ...ClientMinimal\n    }\n  }\n}\n\nquery GetDashboardStatsOptimized($limit: Int = 10) {\n  clientsAggregate {\n    aggregate {\n      count\n    }\n  }\n  totalPayrolls: payrollsAggregate(where: {supersededDate: {_isNull: true}}) {\n    aggregate {\n      count\n    }\n  }\n  activePayrolls: payrollsAggregate(\n    where: {supersededDate: {_isNull: true}, status: {_eq: \"Active\"}}\n  ) {\n    aggregate {\n      count\n    }\n  }\n  upcomingPayrolls: payrolls(\n    where: {supersededDate: {_isNull: true}, status: {_eq: \"Active\"}}\n    orderBy: {updatedAt: DESC}\n    limit: $limit\n  ) {\n    id\n    name\n    status\n    client {\n      id\n      name\n    }\n  }\n}\n\nquery GetClientsDashboardStats {\n  activeClientsCount: clientsAggregate(where: {active: {_eq: true}}) {\n    aggregate {\n      count\n    }\n  }\n  totalPayrollsCount: payrollsAggregate(where: {supersededDate: {_isNull: true}}) {\n    aggregate {\n      count\n    }\n  }\n  totalEmployeesSum: payrollsAggregate(where: {supersededDate: {_isNull: true}}) {\n    aggregate {\n      sum {\n        employeeCount\n      }\n    }\n  }\n  clientsNeedingAttention: clients(\n    where: {active: {_eq: true}, _not: {payrolls: {supersededDate: {_isNull: true}}}}\n  ) {\n    ...ClientMinimal\n  }\n}\n\nquery GetCurrentUser($userId: uuid!) {\n  user: userById(id: $userId) {\n    ...UserProfile\n  }\n}\n\nquery GetUsersForDropdown($role: user_role) {\n  users(where: {isActive: {_eq: true}, role: {_eq: $role}}, orderBy: {name: ASC}) {\n    ...UserMinimal\n  }\n}\n\nquery GetSystemHealth {\n  databaseHealth: users(limit: 1) {\n    id\n  }\n  recentActivity: auditLogsAggregate(\n    where: {eventTime: {_gte: \"now() - interval '1 hour'\"}}\n  ) {\n    aggregate {\n      count\n    }\n  }\n}\n\nquery GlobalSearch($searchTerm: String!) {\n  clients(\n    where: {_or: [{name: {_ilike: $searchTerm}}, {contactEmail: {_ilike: $searchTerm}}]}\n    limit: 5\n  ) {\n    ...ClientMinimal\n  }\n  users(\n    where: {_or: [{name: {_ilike: $searchTerm}}, {email: {_ilike: $searchTerm}}]}\n    limit: 5\n  ) {\n    ...UserMinimal\n  }\n  payrolls(\n    where: {client: {name: {_ilike: $searchTerm}}, supersededDate: {_isNull: true}}\n    limit: 5\n  ) {\n    ...PayrollMinimal\n    client {\n      ...ClientMinimal\n    }\n  }\n}"): (typeof documents)["query GetDashboardMetrics($userId: uuid!) {\n  clientsAggregate(where: {active: {_eq: true}}) {\n    aggregate {\n      count\n    }\n  }\n  activePayrollsAggregate: payrollsAggregate(\n    where: {supersededDate: {_isNull: true}, status: {_nin: [\"Completed\", \"Failed\"]}}\n  ) {\n    aggregate {\n      count\n    }\n  }\n  totalEmployeesAggregate: payrollsAggregate(\n    where: {supersededDate: {_isNull: true}}\n  ) {\n    aggregate {\n      sum {\n        employeeCount\n      }\n    }\n  }\n  upcomingPayrolls: payrolls(\n    where: {supersededDate: {_isNull: true}, status: {_nin: [\"Completed\", \"Failed\", \"Cancelled\"]}}\n    orderBy: {updatedAt: DESC}\n    limit: 5\n  ) {\n    ...PayrollMinimal\n    client {\n      ...ClientMinimal\n    }\n  }\n}\n\nquery GetDashboardStatsOptimized($limit: Int = 10) {\n  clientsAggregate {\n    aggregate {\n      count\n    }\n  }\n  totalPayrolls: payrollsAggregate(where: {supersededDate: {_isNull: true}}) {\n    aggregate {\n      count\n    }\n  }\n  activePayrolls: payrollsAggregate(\n    where: {supersededDate: {_isNull: true}, status: {_eq: \"Active\"}}\n  ) {\n    aggregate {\n      count\n    }\n  }\n  upcomingPayrolls: payrolls(\n    where: {supersededDate: {_isNull: true}, status: {_eq: \"Active\"}}\n    orderBy: {updatedAt: DESC}\n    limit: $limit\n  ) {\n    id\n    name\n    status\n    client {\n      id\n      name\n    }\n  }\n}\n\nquery GetClientsDashboardStats {\n  activeClientsCount: clientsAggregate(where: {active: {_eq: true}}) {\n    aggregate {\n      count\n    }\n  }\n  totalPayrollsCount: payrollsAggregate(where: {supersededDate: {_isNull: true}}) {\n    aggregate {\n      count\n    }\n  }\n  totalEmployeesSum: payrollsAggregate(where: {supersededDate: {_isNull: true}}) {\n    aggregate {\n      sum {\n        employeeCount\n      }\n    }\n  }\n  clientsNeedingAttention: clients(\n    where: {active: {_eq: true}, _not: {payrolls: {supersededDate: {_isNull: true}}}}\n  ) {\n    ...ClientMinimal\n  }\n}\n\nquery GetCurrentUser($userId: uuid!) {\n  user: userById(id: $userId) {\n    ...UserProfile\n  }\n}\n\nquery GetUsersForDropdown($role: user_role) {\n  users(where: {isActive: {_eq: true}, role: {_eq: $role}}, orderBy: {name: ASC}) {\n    ...UserMinimal\n  }\n}\n\nquery GetSystemHealth {\n  databaseHealth: users(limit: 1) {\n    id\n  }\n  recentActivity: auditLogsAggregate(\n    where: {eventTime: {_gte: \"now() - interval '1 hour'\"}}\n  ) {\n    aggregate {\n      count\n    }\n  }\n}\n\nquery GlobalSearch($searchTerm: String!) {\n  clients(\n    where: {_or: [{name: {_ilike: $searchTerm}}, {contactEmail: {_ilike: $searchTerm}}]}\n    limit: 5\n  ) {\n    ...ClientMinimal\n  }\n  users(\n    where: {_or: [{name: {_ilike: $searchTerm}}, {email: {_ilike: $searchTerm}}]}\n    limit: 5\n  ) {\n    ...UserMinimal\n  }\n  payrolls(\n    where: {client: {name: {_ilike: $searchTerm}}, supersededDate: {_isNull: true}}\n    limit: 5\n  ) {\n    ...PayrollMinimal\n    client {\n      ...ClientMinimal\n    }\n  }\n}"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "subscription RecentActivity($resourceTypes: [String!]) {\n  auditLogs(\n    where: {resourceType: {_in: $resourceTypes}, eventTime: {_gte: \"now() - interval '5 minutes'\"}}\n    orderBy: {eventTime: DESC}\n    limit: 20\n  ) {\n    ...AuditLogEntry\n  }\n}\n\nsubscription AuthenticationEvents($userId: uuid) {\n  authEvents(\n    where: {userId: {_eq: $userId}, eventTime: {_gte: \"now() - interval '10 minutes'\"}}\n    orderBy: {eventTime: DESC}\n  ) {\n    ...AuthEvent\n  }\n}\n\nsubscription SensitiveDataAccess($resourceTypes: [String!]!) {\n  dataAccessLogs(\n    where: {resourceType: {_in: $resourceTypes}, accessedAt: {_gte: \"now() - interval '10 minutes'\"}}\n    orderBy: {accessedAt: DESC}\n  ) {\n    ...DataAccessLog\n  }\n}\n\nsubscription PermissionChangeStream {\n  permissionChanges(orderBy: {changedAt: DESC}, limit: 10) {\n    ...PermissionChange\n  }\n}"): (typeof documents)["subscription RecentActivity($resourceTypes: [String!]) {\n  auditLogs(\n    where: {resourceType: {_in: $resourceTypes}, eventTime: {_gte: \"now() - interval '5 minutes'\"}}\n    orderBy: {eventTime: DESC}\n    limit: 20\n  ) {\n    ...AuditLogEntry\n  }\n}\n\nsubscription AuthenticationEvents($userId: uuid) {\n  authEvents(\n    where: {userId: {_eq: $userId}, eventTime: {_gte: \"now() - interval '10 minutes'\"}}\n    orderBy: {eventTime: DESC}\n  ) {\n    ...AuthEvent\n  }\n}\n\nsubscription SensitiveDataAccess($resourceTypes: [String!]!) {\n  dataAccessLogs(\n    where: {resourceType: {_in: $resourceTypes}, accessedAt: {_gte: \"now() - interval '10 minutes'\"}}\n    orderBy: {accessedAt: DESC}\n  ) {\n    ...DataAccessLog\n  }\n}\n\nsubscription PermissionChangeStream {\n  permissionChanges(orderBy: {changedAt: DESC}, limit: 10) {\n    ...PermissionChange\n  }\n}"];

export function gql(source: string) {
  return (documents as any)[source] ?? {};
}

export type DocumentType<TDocumentNode extends DocumentNode<any, any>> = TDocumentNode extends DocumentNode<  infer TType,  any>  ? TType  : never;