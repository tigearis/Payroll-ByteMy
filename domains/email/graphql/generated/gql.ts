/* eslint-disable */
import * as types from './graphql';
import { TypedDocumentNode as DocumentNode } from '@graphql-typed-document-node/core';

/**
 * Map of all GraphQL operations in the project.
 *
 * This map has several performance disadvantages:
 * 1. It is not tree-shakeable, so it will include all operations in the project.
 * 2. It is not minifiable, so the string of a GraphQL query will be multiple times inside the bundle.
 * 3. It does not support dead code elimination, so it will add unused operations.
 *
 * Therefore it is highly recommended to use the babel or swc plugin for production.
 * Learn more about it here: https://the-guild.dev/graphql/codegen/plugins/presets/preset-client#reducing-bundle-size
 */
type Documents = {
    "fragment EmailTemplateBase on EmailTemplates {\n  id\n  name\n  description\n  category\n  subjectTemplate\n  htmlContent\n  textContent\n  availableVariables\n  isActive\n  isSystemTemplate\n  requiresApproval\n  createdAt\n  updatedAt\n}\n\nfragment EmailTemplateWithRelations on EmailTemplates {\n  ...EmailTemplateBase\n  createdByUserId\n  approvedByUserId\n  approvedAt\n  createdByUser {\n    id\n    firstName\n    lastName\n    computedName\n    email\n  }\n  approvedByUser {\n    id\n    firstName\n    lastName\n    computedName\n    email\n  }\n}\n\nfragment EmailSendLogBase on EmailSendLogs {\n  id\n  templateId\n  resendEmailId\n  recipientEmails\n  senderUserId\n  subject\n  businessContext\n  sendStatus\n  scheduledFor\n  sentAt\n  deliveredAt\n  openedAt\n  clickedAt\n  createdAt\n}\n\nfragment EmailSendLogWithRelations on EmailSendLogs {\n  ...EmailSendLogBase\n  htmlContent\n  textContent\n  resendResponse\n  errorMessage\n  emailTemplate {\n    id\n    name\n    category\n  }\n  senderUser {\n    id\n    firstName\n    lastName\n    computedName\n    email\n  }\n}\n\nfragment EmailDraftBase on EmailDrafts {\n  id\n  userId\n  templateId\n  recipientEmails\n  subject\n  htmlContent\n  textContent\n  variableValues\n  businessContext\n  scheduledFor\n  createdAt\n  updatedAt\n}\n\nfragment EmailDraftWithRelations on EmailDrafts {\n  ...EmailDraftBase\n  user {\n    id\n    firstName\n    lastName\n    computedName\n    email\n  }\n  emailTemplate {\n    id\n    name\n    category\n    subjectTemplate\n    htmlContent\n    availableVariables\n  }\n}\n\nfragment UserEmailTemplateFavorite on UserEmailTemplateFavorites {\n  id\n  userId\n  templateId\n  createdAt\n  emailTemplate {\n    ...EmailTemplateBase\n  }\n}\n\nfragment TemplateUsageStats on EmailTemplates {\n  id\n  name\n  category\n  emailSendLogsAggregate {\n    aggregate {\n      count\n    }\n  }\n}": typeof types.EmailTemplateBaseFragmentDoc,
    "mutation CreateEmailTemplate($input: EmailTemplatesInsertInput!) {\n  insertEmailTemplatesOne(object: $input) {\n    ...EmailTemplateWithRelations\n  }\n}\n\nmutation UpdateEmailTemplate($templateId: uuid!, $updates: EmailTemplatesSetInput!) {\n  updateEmailTemplatesByPk(pkColumns: {id: $templateId}, _set: $updates) {\n    ...EmailTemplateWithRelations\n  }\n}\n\nmutation DeleteEmailTemplate($templateId: uuid!) {\n  deleteEmailTemplatesByPk(id: $templateId) {\n    id\n    name\n  }\n}\n\nmutation ApproveEmailTemplate($templateId: uuid!, $approverId: uuid!) {\n  updateEmailTemplatesByPk(\n    pkColumns: {id: $templateId}\n    _set: {approvedByUserId: $approverId, approvedAt: \"now()\"}\n  ) {\n    ...EmailTemplateWithRelations\n  }\n}\n\nmutation LogEmailSend($input: EmailSendLogsInsertInput!) {\n  insertEmailSendLogsOne(object: $input) {\n    ...EmailSendLogBase\n  }\n}\n\nmutation UpdateEmailSendStatus($logId: uuid!, $status: String!, $resendResponse: jsonb, $errorMessage: String, $sentAt: timestamptz, $deliveredAt: timestamptz, $openedAt: timestamptz, $clickedAt: timestamptz) {\n  updateEmailSendLogsByPk(\n    pkColumns: {id: $logId}\n    _set: {sendStatus: $status, resendResponse: $resendResponse, errorMessage: $errorMessage, sentAt: $sentAt, deliveredAt: $deliveredAt, openedAt: $openedAt, clickedAt: $clickedAt}\n  ) {\n    ...EmailSendLogBase\n  }\n}\n\nmutation CreateEmailDraft($input: EmailDraftsInsertInput!) {\n  insertEmailDraftsOne(object: $input) {\n    ...EmailDraftWithRelations\n  }\n}\n\nmutation UpdateEmailDraft($draftId: uuid!, $updates: EmailDraftsSetInput!) {\n  updateEmailDraftsByPk(pkColumns: {id: $draftId}, _set: $updates) {\n    ...EmailDraftWithRelations\n  }\n}\n\nmutation DeleteEmailDraft($draftId: uuid!) {\n  deleteEmailDraftsByPk(id: $draftId) {\n    id\n  }\n}\n\nmutation AddTemplateFavorite($userId: uuid!, $templateId: uuid!) {\n  insertUserEmailTemplateFavoritesOne(\n    object: {userId: $userId, templateId: $templateId}\n    onConflict: {constraint: user_email_template_favorites_user_id_template_id_key, updateColumns: []}\n  ) {\n    ...UserEmailTemplateFavorite\n  }\n}\n\nmutation RemoveTemplateFavorite($userId: uuid!, $templateId: uuid!) {\n  deleteUserEmailTemplateFavorites(\n    where: {userId: {_eq: $userId}, templateId: {_eq: $templateId}}\n  ) {\n    affectedRows\n  }\n}\n\nmutation BulkCreateEmailTemplates($templates: [EmailTemplatesInsertInput!]!) {\n  insertEmailTemplates(objects: $templates) {\n    affectedRows\n    returning {\n      id\n      name\n      category\n    }\n  }\n}\n\nmutation DuplicateEmailTemplate($sourceTemplateId: uuid!, $newName: String!, $userId: uuid!) {\n  insertEmailTemplatesOne(\n    object: {name: $newName, description: \"Copy of template\", category: \"system\", subjectTemplate: \"\", htmlContent: \"\", availableVariables: \"[]\", isActive: true, isSystemTemplate: false, createdByUserId: $userId}\n  ) {\n    id\n  }\n}\n\nmutation BulkUpdateEmailSendStatuses($updates: [EmailSendLogsUpdates!]!) {\n  updateEmailSendLogsMany(updates: $updates) {\n    affectedRows\n  }\n}\n\nmutation ArchiveOldEmailLogs($beforeDate: timestamptz!) {\n  deleteEmailSendLogs(\n    where: {createdAt: {_lt: $beforeDate}, sendStatus: {_in: [\"delivered\", \"failed\", \"bounced\"]}}\n  ) {\n    affectedRows\n  }\n}\n\nmutation ToggleEmailTemplateStatus($templateId: uuid!, $isActive: Boolean!) {\n  updateEmailTemplatesByPk(\n    pkColumns: {id: $templateId}\n    _set: {isActive: $isActive}\n  ) {\n    id\n    name\n    isActive\n  }\n}": typeof types.CreateEmailTemplateDocument,
    "query GetEmailTemplates($category: String, $isActive: Boolean = true) {\n  emailTemplates(\n    where: {category: {_eq: $category}, isActive: {_eq: $isActive}}\n    orderBy: {createdAt: DESC}\n  ) {\n    ...EmailTemplateWithRelations\n  }\n}\n\nquery GetEmailTemplateById($templateId: uuid!) {\n  emailTemplatesByPk(id: $templateId) {\n    ...EmailTemplateWithRelations\n  }\n}\n\nquery GetSystemEmailTemplates {\n  emailTemplates(\n    where: {isSystemTemplate: {_eq: true}, isActive: {_eq: true}}\n    orderBy: [{category: ASC}, {name: ASC}]\n  ) {\n    ...EmailTemplateBase\n  }\n}\n\nquery GetUserFavoriteTemplates($userId: uuid!) {\n  userEmailTemplateFavorites(\n    where: {userId: {_eq: $userId}}\n    orderBy: {createdAt: DESC}\n  ) {\n    ...UserEmailTemplateFavorite\n  }\n}\n\nquery GetEmailTemplatesByCategory($category: String!) {\n  emailTemplates(\n    where: {category: {_eq: $category}, isActive: {_eq: true}}\n    orderBy: {name: ASC}\n  ) {\n    ...EmailTemplateBase\n    ...TemplateUsageStats\n  }\n}\n\nquery GetEmailSendLogs($limit: Int = 50, $offset: Int = 0, $senderId: uuid, $status: String, $fromDate: timestamptz, $toDate: timestamptz) {\n  emailSendLogs(\n    limit: $limit\n    offset: $offset\n    where: {senderUserId: {_eq: $senderId}, sendStatus: {_eq: $status}, createdAt: {_gte: $fromDate, _lte: $toDate}}\n    orderBy: {createdAt: DESC}\n  ) {\n    ...EmailSendLogWithRelations\n  }\n}\n\nquery GetEmailSendLogById($logId: uuid!) {\n  emailSendLogsByPk(id: $logId) {\n    ...EmailSendLogWithRelations\n  }\n}\n\nquery GetUserEmailDrafts($userId: uuid!) {\n  emailDrafts(where: {userId: {_eq: $userId}}, orderBy: {updatedAt: DESC}) {\n    ...EmailDraftWithRelations\n  }\n}\n\nquery GetEmailDraftById($draftId: uuid!) {\n  emailDraftsByPk(id: $draftId) {\n    ...EmailDraftWithRelations\n  }\n}\n\nquery GetEmailAnalytics($fromDate: timestamptz!, $toDate: timestamptz!, $userId: uuid) {\n  emailSendLogsAggregate(\n    where: {createdAt: {_gte: $fromDate, _lte: $toDate}, senderUserId: {_eq: $userId}}\n  ) {\n    aggregate {\n      count\n    }\n  }\n  sentEmails: emailSendLogsAggregate(\n    where: {createdAt: {_gte: $fromDate, _lte: $toDate}, senderUserId: {_eq: $userId}, sendStatus: {_eq: \"sent\"}}\n  ) {\n    aggregate {\n      count\n    }\n  }\n  deliveredEmails: emailSendLogsAggregate(\n    where: {createdAt: {_gte: $fromDate, _lte: $toDate}, senderUserId: {_eq: $userId}, sendStatus: {_eq: \"delivered\"}}\n  ) {\n    aggregate {\n      count\n    }\n  }\n  failedEmails: emailSendLogsAggregate(\n    where: {createdAt: {_gte: $fromDate, _lte: $toDate}, senderUserId: {_eq: $userId}, sendStatus: {_eq: \"failed\"}}\n  ) {\n    aggregate {\n      count\n    }\n  }\n}\n\nquery GetRecentEmailActivity($limit: Int = 10, $userId: uuid) {\n  emailSendLogs(\n    limit: $limit\n    where: {senderUserId: {_eq: $userId}}\n    orderBy: {createdAt: DESC}\n  ) {\n    id\n    subject\n    recipientEmails\n    sendStatus\n    sentAt\n    createdAt\n    emailTemplate {\n      name\n      category\n    }\n  }\n}\n\nquery SearchEmailTemplates($searchTerm: String!, $category: String) {\n  emailTemplates(\n    where: {_and: [{_or: [{name: {_ilike: $searchTerm}}, {description: {_ilike: $searchTerm}}]}, {category: {_eq: $category}}, {isActive: {_eq: true}}]}\n    orderBy: {name: ASC}\n  ) {\n    ...EmailTemplateBase\n    ...TemplateUsageStats\n  }\n}\n\nquery GetTemplateUsageStats($templateId: uuid!, $fromDate: timestamptz!) {\n  emailTemplatesByPk(id: $templateId) {\n    id\n    name\n    category\n    emailSendLogsAggregate(where: {createdAt: {_gte: $fromDate}}) {\n      aggregate {\n        count\n      }\n    }\n  }\n  emailSendLogs(\n    where: {templateId: {_eq: $templateId}, createdAt: {_gte: $fromDate}}\n    orderBy: {createdAt: DESC}\n    limit: 10\n  ) {\n    id\n    recipientEmails\n    sendStatus\n    sentAt\n    senderUser {\n      firstName\n      lastName\n      computedName\n    }\n  }\n}": typeof types.GetEmailTemplatesDocument,
    "fragment UserMinimal on users {\n  id\n  firstName\n  lastName\n  computedName\n  email\n}\n\nfragment UserCoreShared on users {\n  ...UserMinimal\n  role\n  isActive\n}\n\nfragment UserBasic on users {\n  ...UserCoreShared\n  clerkUserId\n  createdAt\n  updatedAt\n}\n\nfragment UserBase on users {\n  ...UserBasic\n}\n\nfragment UserWithRole on users {\n  ...UserBasic\n  username\n  isStaff\n}\n\nfragment UserProfile on users {\n  ...UserWithRole\n  clerkUserId\n  image\n  managerId\n  deactivatedAt\n  deactivatedBy\n  managerUser {\n    ...UserMinimal\n  }\n}\n\nfragment UserSearchResult on users {\n  ...UserCoreShared\n  username\n  isStaff\n}\n\nfragment ClientMinimal on clients {\n  id\n  name\n}\n\nfragment ClientBase on clients {\n  id\n  name\n  active\n  contactEmail\n  contactPerson\n  contactPhone\n  createdAt\n}\n\nfragment ClientWithStats on clients {\n  ...ClientBase\n  currentEmployeeCount: payrollsAggregate(\n    where: {supersededDate: {_isNull: true}}\n  ) {\n    aggregate {\n      sum {\n        employeeCount\n      }\n    }\n  }\n  activePayrollCount: payrollsAggregate(\n    where: {supersededDate: {_isNull: true}, status: {_eq: \"Active\"}}\n  ) {\n    aggregate {\n      count\n    }\n  }\n}\n\nfragment ClientListBase on clients {\n  ...ClientBase\n  payrollCount: payrollsAggregate(where: {supersededDate: {_isNull: true}}) {\n    aggregate {\n      count\n    }\n  }\n}\n\nfragment PayrollMinimal on payrolls {\n  id\n  name\n  employeeCount\n  status\n}\n\nfragment PayrollBase on payrolls {\n  id\n  name\n  employeeCount\n  status\n  payrollSystem\n  processingTime\n  processingDaysBeforeEft\n  versionNumber\n  supersededDate\n  createdAt\n  updatedAt\n}\n\nfragment PayrollWithClient on payrolls {\n  ...PayrollBase\n  clientId\n  client {\n    id\n    name\n    active\n  }\n}\n\nfragment PayrollListItem on payrolls {\n  ...PayrollWithClient\n  primaryConsultantUserId\n  backupConsultantUserId\n  managerUserId\n  createdByUserId\n  cycleId\n  dateTypeId\n  dateValue\n  payrollCycle {\n    id\n    name\n    description\n  }\n  payrollDateType {\n    id\n    name\n    description\n  }\n  primaryConsultant {\n    ...UserMinimal\n  }\n  backupConsultant {\n    ...UserMinimal\n  }\n  manager {\n    ...UserMinimal\n  }\n}\n\nfragment PayrollWithDates on payrolls {\n  ...PayrollBase\n  goLiveDate\n  payrollDates(orderBy: {originalEftDate: ASC}) {\n    id\n    originalEftDate\n    adjustedEftDate\n    notes\n  }\n}\n\nfragment PayrollFullDetail on payrolls {\n  ...PayrollWithDates\n  ...PayrollWithClient\n  dateTypeId\n  cycleId\n  dateValue\n  versionReason\n  supersededDate\n  parentPayrollId\n  parentPayroll {\n    id\n    versionNumber\n  }\n  childPayrolls(orderBy: {versionNumber: DESC}) {\n    id\n    versionNumber\n    versionReason\n    createdAt\n  }\n  primaryConsultant {\n    ...UserMinimal\n  }\n  backupConsultant {\n    ...UserMinimal\n  }\n  manager {\n    ...UserMinimal\n  }\n}\n\nfragment NoteWithAuthor on notes {\n  id\n  content\n  isImportant\n  createdAt\n  entityId\n  entityType\n  authorUser {\n    ...UserMinimal\n  }\n}\n\nfragment PermissionBase on permissions {\n  id\n  resourceId\n  description\n  legacyPermissionName\n  action\n}\n\nfragment RoleWithPermissions on roles {\n  id\n  name\n  displayName\n  description\n  isSystemRole\n  priority\n  assignedPermissions {\n    grantedPermission {\n      ...PermissionBase\n    }\n  }\n}\n\nfragment AuditLogEntry on auditLogs {\n  id\n  userId\n  userEmail\n  userRole\n  action\n  resourceType\n  resourceId\n  eventTime\n  success\n  errorMessage\n  ipAddress\n  userAgent\n  requestId\n  sessionId\n  metadata\n  oldValues\n  newValues\n  createdAt\n}\n\nfragment AuthEvent on authEvents {\n  id\n  userId\n  userEmail\n  eventType\n  eventTime\n  success\n  failureReason\n  ipAddress\n  userAgent\n  metadata\n}\n\nfragment DataAccessLog on dataAccessLogs {\n  id\n  userId\n  resourceType\n  resourceId\n  accessType\n  accessedAt\n  dataClassification\n  fieldsAccessed\n  rowCount\n  ipAddress\n  metadata\n}\n\nfragment PermissionChange on permissionChanges {\n  id\n  changedAt\n  changedByUserId\n  targetUserId\n  targetRoleId\n  changeType\n  permissionType\n  oldPermissions\n  newPermissions\n  reason\n  approvedByUserId\n}\n\nfragment PayrollDateInfo on payrollDates {\n  id\n  originalEftDate\n  adjustedEftDate\n  notes\n  createdAt\n}\n\nfragment PermissionOverrideInfo on permissionOverrides {\n  id\n  userId\n  role\n  resource\n  operation\n  granted\n  reason\n  conditions\n  expiresAt\n  createdBy\n  createdAt\n}": typeof types.UserMinimalFragmentDoc,
    "mutation LogAuditEvent($input: auditLogsInsertInput!) {\n  insertAuditLogsOne: insertAuditLog(object: $input) {\n    id\n    eventTime\n  }\n}\n\nmutation InsertFile($input: filesInsertInput!) {\n  insertFile(object: $input) {\n    id\n    filename\n    bucket\n    objectKey\n    size\n    mimetype\n    url\n    clientId\n    payrollId\n    uploadedBy\n    category\n    isPublic\n    metadata\n    fileType\n    createdAt\n  }\n}\n\nmutation UpdateFileMetadata($id: uuid!, $updates: filesSetInput!) {\n  updateFileById(pkColumns: {id: $id}, _set: $updates) {\n    id\n    filename\n    bucket\n    objectKey\n    size\n    mimetype\n    url\n    clientId\n    payrollId\n    uploadedBy\n    category\n    isPublic\n    metadata\n    fileType\n    createdAt\n  }\n}\n\nmutation DeleteFile($id: uuid!) {\n  deleteFileById(id: $id) {\n    id\n    filename\n    objectKey\n  }\n}\n\nmutation RefreshData {\n  __typename\n}": typeof types.LogAuditEventDocument,
    "query GetDashboardMetrics($userId: uuid!) {\n  clientsAggregate(where: {active: {_eq: true}}) {\n    aggregate {\n      count\n    }\n  }\n  activePayrollsAggregate: payrollsAggregate(\n    where: {supersededDate: {_isNull: true}, status: {_nin: [\"Completed\", \"Failed\"]}}\n  ) {\n    aggregate {\n      count\n    }\n  }\n  totalEmployeesAggregate: payrollsAggregate(\n    where: {supersededDate: {_isNull: true}}\n  ) {\n    aggregate {\n      sum {\n        employeeCount\n      }\n    }\n  }\n  upcomingPayrolls: payrolls(\n    where: {supersededDate: {_isNull: true}, status: {_nin: [\"Completed\", \"Failed\", \"Cancelled\"]}}\n    orderBy: {updatedAt: DESC}\n    limit: 5\n  ) {\n    ...PayrollMinimal\n    client {\n      ...ClientMinimal\n    }\n  }\n}\n\nquery GetDashboardStatsOptimized($limit: Int = 10) {\n  clientsAggregate {\n    aggregate {\n      count\n    }\n  }\n  totalPayrolls: payrollsAggregate(where: {supersededDate: {_isNull: true}}) {\n    aggregate {\n      count\n    }\n  }\n  activePayrolls: payrollsAggregate(\n    where: {supersededDate: {_isNull: true}, status: {_eq: \"Active\"}}\n  ) {\n    aggregate {\n      count\n    }\n  }\n  upcomingPayrolls: payrolls(\n    where: {supersededDate: {_isNull: true}, status: {_eq: \"Active\"}}\n    orderBy: {updatedAt: DESC}\n    limit: $limit\n  ) {\n    id\n    name\n    status\n    client {\n      id\n      name\n    }\n  }\n}\n\nquery GetClientsDashboardStats {\n  activeClientsCount: clientsAggregate(where: {active: {_eq: true}}) {\n    aggregate {\n      count\n    }\n  }\n  totalPayrollsCount: payrollsAggregate(where: {supersededDate: {_isNull: true}}) {\n    aggregate {\n      count\n    }\n  }\n  totalEmployeesSum: payrollsAggregate(where: {supersededDate: {_isNull: true}}) {\n    aggregate {\n      sum {\n        employeeCount\n      }\n    }\n  }\n  clientsNeedingAttention: clients(\n    where: {active: {_eq: true}, _not: {payrolls: {supersededDate: {_isNull: true}}}}\n  ) {\n    ...ClientMinimal\n  }\n}\n\nquery GetCurrentUser($userId: uuid!) {\n  user: userById(id: $userId) {\n    ...UserProfile\n  }\n}\n\nquery GetUsersForDropdown($role: user_role) {\n  users(\n    where: {isActive: {_eq: true}, role: {_eq: $role}}\n    orderBy: {computedName: ASC}\n  ) {\n    ...UserMinimal\n  }\n}\n\nquery GetSystemHealth {\n  databaseHealth: users(limit: 1) {\n    id\n  }\n  recentActivity: auditLogsAggregate(\n    where: {eventTime: {_gte: \"now() - interval '1 hour'\"}}\n  ) {\n    aggregate {\n      count\n    }\n  }\n}\n\nquery GlobalSearch($searchTerm: String!) {\n  clients(\n    where: {_or: [{name: {_ilike: $searchTerm}}, {contactEmail: {_ilike: $searchTerm}}]}\n    limit: 5\n  ) {\n    ...ClientMinimal\n  }\n  users(\n    where: {_or: [{computedName: {_ilike: $searchTerm}}, {firstName: {_ilike: $searchTerm}}, {lastName: {_ilike: $searchTerm}}, {email: {_ilike: $searchTerm}}]}\n    limit: 5\n  ) {\n    ...UserMinimal\n  }\n  payrolls(\n    where: {client: {name: {_ilike: $searchTerm}}, supersededDate: {_isNull: true}}\n    limit: 5\n  ) {\n    ...PayrollMinimal\n    client {\n      ...ClientMinimal\n    }\n  }\n}\n\nquery GetFileById($id: uuid!) {\n  fileById(id: $id) {\n    id\n    filename\n    bucket\n    objectKey\n    size\n    mimetype\n    url\n    clientId\n    payrollId\n    uploadedBy\n    category\n    isPublic\n    metadata\n    fileType\n    createdAt\n    client {\n      name\n    }\n    payroll {\n      name\n    }\n    uploader {\n      firstName\n      lastName\n      computedName\n    }\n  }\n}\n\nquery ListFiles($where: filesBoolExp, $limit: Int, $offset: Int, $orderBy: [filesOrderBy!]) {\n  files(where: $where, limit: $limit, offset: $offset, orderBy: $orderBy) {\n    id\n    filename\n    bucket\n    objectKey\n    size\n    mimetype\n    url\n    clientId\n    payrollId\n    uploadedBy\n    category\n    isPublic\n    metadata\n    fileType\n    createdAt\n    client {\n      name\n    }\n    payroll {\n      name\n    }\n    uploader {\n      firstName\n      lastName\n      computedName\n    }\n  }\n  filesAggregate(where: $where) {\n    aggregate {\n      count\n    }\n  }\n}": typeof types.GetDashboardMetricsDocument,
    "subscription RecentActivity($resourceTypes: [String!]) {\n  auditLogs(\n    where: {resourceType: {_in: $resourceTypes}, eventTime: {_gte: \"now() - interval '5 minutes'\"}}\n    orderBy: {eventTime: DESC}\n    limit: 20\n  ) {\n    ...AuditLogEntry\n  }\n}\n\nsubscription AuthenticationEvents($userId: uuid) {\n  authEvents(\n    where: {userId: {_eq: $userId}, eventTime: {_gte: \"now() - interval '10 minutes'\"}}\n    orderBy: {eventTime: DESC}\n  ) {\n    ...AuthEvent\n  }\n}\n\nsubscription SensitiveDataAccess($resourceTypes: [String!]!) {\n  dataAccessLogs(\n    where: {resourceType: {_in: $resourceTypes}, accessedAt: {_gte: \"now() - interval '10 minutes'\"}}\n    orderBy: {accessedAt: DESC}\n  ) {\n    ...DataAccessLog\n  }\n}\n\nsubscription PermissionChangeStream {\n  permissionChanges(orderBy: {changedAt: DESC}, limit: 10) {\n    ...PermissionChange\n  }\n}": typeof types.RecentActivityDocument,
};
const documents: Documents = {
    "fragment EmailTemplateBase on EmailTemplates {\n  id\n  name\n  description\n  category\n  subjectTemplate\n  htmlContent\n  textContent\n  availableVariables\n  isActive\n  isSystemTemplate\n  requiresApproval\n  createdAt\n  updatedAt\n}\n\nfragment EmailTemplateWithRelations on EmailTemplates {\n  ...EmailTemplateBase\n  createdByUserId\n  approvedByUserId\n  approvedAt\n  createdByUser {\n    id\n    firstName\n    lastName\n    computedName\n    email\n  }\n  approvedByUser {\n    id\n    firstName\n    lastName\n    computedName\n    email\n  }\n}\n\nfragment EmailSendLogBase on EmailSendLogs {\n  id\n  templateId\n  resendEmailId\n  recipientEmails\n  senderUserId\n  subject\n  businessContext\n  sendStatus\n  scheduledFor\n  sentAt\n  deliveredAt\n  openedAt\n  clickedAt\n  createdAt\n}\n\nfragment EmailSendLogWithRelations on EmailSendLogs {\n  ...EmailSendLogBase\n  htmlContent\n  textContent\n  resendResponse\n  errorMessage\n  emailTemplate {\n    id\n    name\n    category\n  }\n  senderUser {\n    id\n    firstName\n    lastName\n    computedName\n    email\n  }\n}\n\nfragment EmailDraftBase on EmailDrafts {\n  id\n  userId\n  templateId\n  recipientEmails\n  subject\n  htmlContent\n  textContent\n  variableValues\n  businessContext\n  scheduledFor\n  createdAt\n  updatedAt\n}\n\nfragment EmailDraftWithRelations on EmailDrafts {\n  ...EmailDraftBase\n  user {\n    id\n    firstName\n    lastName\n    computedName\n    email\n  }\n  emailTemplate {\n    id\n    name\n    category\n    subjectTemplate\n    htmlContent\n    availableVariables\n  }\n}\n\nfragment UserEmailTemplateFavorite on UserEmailTemplateFavorites {\n  id\n  userId\n  templateId\n  createdAt\n  emailTemplate {\n    ...EmailTemplateBase\n  }\n}\n\nfragment TemplateUsageStats on EmailTemplates {\n  id\n  name\n  category\n  emailSendLogsAggregate {\n    aggregate {\n      count\n    }\n  }\n}": types.EmailTemplateBaseFragmentDoc,
    "mutation CreateEmailTemplate($input: EmailTemplatesInsertInput!) {\n  insertEmailTemplatesOne(object: $input) {\n    ...EmailTemplateWithRelations\n  }\n}\n\nmutation UpdateEmailTemplate($templateId: uuid!, $updates: EmailTemplatesSetInput!) {\n  updateEmailTemplatesByPk(pkColumns: {id: $templateId}, _set: $updates) {\n    ...EmailTemplateWithRelations\n  }\n}\n\nmutation DeleteEmailTemplate($templateId: uuid!) {\n  deleteEmailTemplatesByPk(id: $templateId) {\n    id\n    name\n  }\n}\n\nmutation ApproveEmailTemplate($templateId: uuid!, $approverId: uuid!) {\n  updateEmailTemplatesByPk(\n    pkColumns: {id: $templateId}\n    _set: {approvedByUserId: $approverId, approvedAt: \"now()\"}\n  ) {\n    ...EmailTemplateWithRelations\n  }\n}\n\nmutation LogEmailSend($input: EmailSendLogsInsertInput!) {\n  insertEmailSendLogsOne(object: $input) {\n    ...EmailSendLogBase\n  }\n}\n\nmutation UpdateEmailSendStatus($logId: uuid!, $status: String!, $resendResponse: jsonb, $errorMessage: String, $sentAt: timestamptz, $deliveredAt: timestamptz, $openedAt: timestamptz, $clickedAt: timestamptz) {\n  updateEmailSendLogsByPk(\n    pkColumns: {id: $logId}\n    _set: {sendStatus: $status, resendResponse: $resendResponse, errorMessage: $errorMessage, sentAt: $sentAt, deliveredAt: $deliveredAt, openedAt: $openedAt, clickedAt: $clickedAt}\n  ) {\n    ...EmailSendLogBase\n  }\n}\n\nmutation CreateEmailDraft($input: EmailDraftsInsertInput!) {\n  insertEmailDraftsOne(object: $input) {\n    ...EmailDraftWithRelations\n  }\n}\n\nmutation UpdateEmailDraft($draftId: uuid!, $updates: EmailDraftsSetInput!) {\n  updateEmailDraftsByPk(pkColumns: {id: $draftId}, _set: $updates) {\n    ...EmailDraftWithRelations\n  }\n}\n\nmutation DeleteEmailDraft($draftId: uuid!) {\n  deleteEmailDraftsByPk(id: $draftId) {\n    id\n  }\n}\n\nmutation AddTemplateFavorite($userId: uuid!, $templateId: uuid!) {\n  insertUserEmailTemplateFavoritesOne(\n    object: {userId: $userId, templateId: $templateId}\n    onConflict: {constraint: user_email_template_favorites_user_id_template_id_key, updateColumns: []}\n  ) {\n    ...UserEmailTemplateFavorite\n  }\n}\n\nmutation RemoveTemplateFavorite($userId: uuid!, $templateId: uuid!) {\n  deleteUserEmailTemplateFavorites(\n    where: {userId: {_eq: $userId}, templateId: {_eq: $templateId}}\n  ) {\n    affectedRows\n  }\n}\n\nmutation BulkCreateEmailTemplates($templates: [EmailTemplatesInsertInput!]!) {\n  insertEmailTemplates(objects: $templates) {\n    affectedRows\n    returning {\n      id\n      name\n      category\n    }\n  }\n}\n\nmutation DuplicateEmailTemplate($sourceTemplateId: uuid!, $newName: String!, $userId: uuid!) {\n  insertEmailTemplatesOne(\n    object: {name: $newName, description: \"Copy of template\", category: \"system\", subjectTemplate: \"\", htmlContent: \"\", availableVariables: \"[]\", isActive: true, isSystemTemplate: false, createdByUserId: $userId}\n  ) {\n    id\n  }\n}\n\nmutation BulkUpdateEmailSendStatuses($updates: [EmailSendLogsUpdates!]!) {\n  updateEmailSendLogsMany(updates: $updates) {\n    affectedRows\n  }\n}\n\nmutation ArchiveOldEmailLogs($beforeDate: timestamptz!) {\n  deleteEmailSendLogs(\n    where: {createdAt: {_lt: $beforeDate}, sendStatus: {_in: [\"delivered\", \"failed\", \"bounced\"]}}\n  ) {\n    affectedRows\n  }\n}\n\nmutation ToggleEmailTemplateStatus($templateId: uuid!, $isActive: Boolean!) {\n  updateEmailTemplatesByPk(\n    pkColumns: {id: $templateId}\n    _set: {isActive: $isActive}\n  ) {\n    id\n    name\n    isActive\n  }\n}": types.CreateEmailTemplateDocument,
    "query GetEmailTemplates($category: String, $isActive: Boolean = true) {\n  emailTemplates(\n    where: {category: {_eq: $category}, isActive: {_eq: $isActive}}\n    orderBy: {createdAt: DESC}\n  ) {\n    ...EmailTemplateWithRelations\n  }\n}\n\nquery GetEmailTemplateById($templateId: uuid!) {\n  emailTemplatesByPk(id: $templateId) {\n    ...EmailTemplateWithRelations\n  }\n}\n\nquery GetSystemEmailTemplates {\n  emailTemplates(\n    where: {isSystemTemplate: {_eq: true}, isActive: {_eq: true}}\n    orderBy: [{category: ASC}, {name: ASC}]\n  ) {\n    ...EmailTemplateBase\n  }\n}\n\nquery GetUserFavoriteTemplates($userId: uuid!) {\n  userEmailTemplateFavorites(\n    where: {userId: {_eq: $userId}}\n    orderBy: {createdAt: DESC}\n  ) {\n    ...UserEmailTemplateFavorite\n  }\n}\n\nquery GetEmailTemplatesByCategory($category: String!) {\n  emailTemplates(\n    where: {category: {_eq: $category}, isActive: {_eq: true}}\n    orderBy: {name: ASC}\n  ) {\n    ...EmailTemplateBase\n    ...TemplateUsageStats\n  }\n}\n\nquery GetEmailSendLogs($limit: Int = 50, $offset: Int = 0, $senderId: uuid, $status: String, $fromDate: timestamptz, $toDate: timestamptz) {\n  emailSendLogs(\n    limit: $limit\n    offset: $offset\n    where: {senderUserId: {_eq: $senderId}, sendStatus: {_eq: $status}, createdAt: {_gte: $fromDate, _lte: $toDate}}\n    orderBy: {createdAt: DESC}\n  ) {\n    ...EmailSendLogWithRelations\n  }\n}\n\nquery GetEmailSendLogById($logId: uuid!) {\n  emailSendLogsByPk(id: $logId) {\n    ...EmailSendLogWithRelations\n  }\n}\n\nquery GetUserEmailDrafts($userId: uuid!) {\n  emailDrafts(where: {userId: {_eq: $userId}}, orderBy: {updatedAt: DESC}) {\n    ...EmailDraftWithRelations\n  }\n}\n\nquery GetEmailDraftById($draftId: uuid!) {\n  emailDraftsByPk(id: $draftId) {\n    ...EmailDraftWithRelations\n  }\n}\n\nquery GetEmailAnalytics($fromDate: timestamptz!, $toDate: timestamptz!, $userId: uuid) {\n  emailSendLogsAggregate(\n    where: {createdAt: {_gte: $fromDate, _lte: $toDate}, senderUserId: {_eq: $userId}}\n  ) {\n    aggregate {\n      count\n    }\n  }\n  sentEmails: emailSendLogsAggregate(\n    where: {createdAt: {_gte: $fromDate, _lte: $toDate}, senderUserId: {_eq: $userId}, sendStatus: {_eq: \"sent\"}}\n  ) {\n    aggregate {\n      count\n    }\n  }\n  deliveredEmails: emailSendLogsAggregate(\n    where: {createdAt: {_gte: $fromDate, _lte: $toDate}, senderUserId: {_eq: $userId}, sendStatus: {_eq: \"delivered\"}}\n  ) {\n    aggregate {\n      count\n    }\n  }\n  failedEmails: emailSendLogsAggregate(\n    where: {createdAt: {_gte: $fromDate, _lte: $toDate}, senderUserId: {_eq: $userId}, sendStatus: {_eq: \"failed\"}}\n  ) {\n    aggregate {\n      count\n    }\n  }\n}\n\nquery GetRecentEmailActivity($limit: Int = 10, $userId: uuid) {\n  emailSendLogs(\n    limit: $limit\n    where: {senderUserId: {_eq: $userId}}\n    orderBy: {createdAt: DESC}\n  ) {\n    id\n    subject\n    recipientEmails\n    sendStatus\n    sentAt\n    createdAt\n    emailTemplate {\n      name\n      category\n    }\n  }\n}\n\nquery SearchEmailTemplates($searchTerm: String!, $category: String) {\n  emailTemplates(\n    where: {_and: [{_or: [{name: {_ilike: $searchTerm}}, {description: {_ilike: $searchTerm}}]}, {category: {_eq: $category}}, {isActive: {_eq: true}}]}\n    orderBy: {name: ASC}\n  ) {\n    ...EmailTemplateBase\n    ...TemplateUsageStats\n  }\n}\n\nquery GetTemplateUsageStats($templateId: uuid!, $fromDate: timestamptz!) {\n  emailTemplatesByPk(id: $templateId) {\n    id\n    name\n    category\n    emailSendLogsAggregate(where: {createdAt: {_gte: $fromDate}}) {\n      aggregate {\n        count\n      }\n    }\n  }\n  emailSendLogs(\n    where: {templateId: {_eq: $templateId}, createdAt: {_gte: $fromDate}}\n    orderBy: {createdAt: DESC}\n    limit: 10\n  ) {\n    id\n    recipientEmails\n    sendStatus\n    sentAt\n    senderUser {\n      firstName\n      lastName\n      computedName\n    }\n  }\n}": types.GetEmailTemplatesDocument,
    "fragment UserMinimal on users {\n  id\n  firstName\n  lastName\n  computedName\n  email\n}\n\nfragment UserCoreShared on users {\n  ...UserMinimal\n  role\n  isActive\n}\n\nfragment UserBasic on users {\n  ...UserCoreShared\n  clerkUserId\n  createdAt\n  updatedAt\n}\n\nfragment UserBase on users {\n  ...UserBasic\n}\n\nfragment UserWithRole on users {\n  ...UserBasic\n  username\n  isStaff\n}\n\nfragment UserProfile on users {\n  ...UserWithRole\n  clerkUserId\n  image\n  managerId\n  deactivatedAt\n  deactivatedBy\n  managerUser {\n    ...UserMinimal\n  }\n}\n\nfragment UserSearchResult on users {\n  ...UserCoreShared\n  username\n  isStaff\n}\n\nfragment ClientMinimal on clients {\n  id\n  name\n}\n\nfragment ClientBase on clients {\n  id\n  name\n  active\n  contactEmail\n  contactPerson\n  contactPhone\n  createdAt\n}\n\nfragment ClientWithStats on clients {\n  ...ClientBase\n  currentEmployeeCount: payrollsAggregate(\n    where: {supersededDate: {_isNull: true}}\n  ) {\n    aggregate {\n      sum {\n        employeeCount\n      }\n    }\n  }\n  activePayrollCount: payrollsAggregate(\n    where: {supersededDate: {_isNull: true}, status: {_eq: \"Active\"}}\n  ) {\n    aggregate {\n      count\n    }\n  }\n}\n\nfragment ClientListBase on clients {\n  ...ClientBase\n  payrollCount: payrollsAggregate(where: {supersededDate: {_isNull: true}}) {\n    aggregate {\n      count\n    }\n  }\n}\n\nfragment PayrollMinimal on payrolls {\n  id\n  name\n  employeeCount\n  status\n}\n\nfragment PayrollBase on payrolls {\n  id\n  name\n  employeeCount\n  status\n  payrollSystem\n  processingTime\n  processingDaysBeforeEft\n  versionNumber\n  supersededDate\n  createdAt\n  updatedAt\n}\n\nfragment PayrollWithClient on payrolls {\n  ...PayrollBase\n  clientId\n  client {\n    id\n    name\n    active\n  }\n}\n\nfragment PayrollListItem on payrolls {\n  ...PayrollWithClient\n  primaryConsultantUserId\n  backupConsultantUserId\n  managerUserId\n  createdByUserId\n  cycleId\n  dateTypeId\n  dateValue\n  payrollCycle {\n    id\n    name\n    description\n  }\n  payrollDateType {\n    id\n    name\n    description\n  }\n  primaryConsultant {\n    ...UserMinimal\n  }\n  backupConsultant {\n    ...UserMinimal\n  }\n  manager {\n    ...UserMinimal\n  }\n}\n\nfragment PayrollWithDates on payrolls {\n  ...PayrollBase\n  goLiveDate\n  payrollDates(orderBy: {originalEftDate: ASC}) {\n    id\n    originalEftDate\n    adjustedEftDate\n    notes\n  }\n}\n\nfragment PayrollFullDetail on payrolls {\n  ...PayrollWithDates\n  ...PayrollWithClient\n  dateTypeId\n  cycleId\n  dateValue\n  versionReason\n  supersededDate\n  parentPayrollId\n  parentPayroll {\n    id\n    versionNumber\n  }\n  childPayrolls(orderBy: {versionNumber: DESC}) {\n    id\n    versionNumber\n    versionReason\n    createdAt\n  }\n  primaryConsultant {\n    ...UserMinimal\n  }\n  backupConsultant {\n    ...UserMinimal\n  }\n  manager {\n    ...UserMinimal\n  }\n}\n\nfragment NoteWithAuthor on notes {\n  id\n  content\n  isImportant\n  createdAt\n  entityId\n  entityType\n  authorUser {\n    ...UserMinimal\n  }\n}\n\nfragment PermissionBase on permissions {\n  id\n  resourceId\n  description\n  legacyPermissionName\n  action\n}\n\nfragment RoleWithPermissions on roles {\n  id\n  name\n  displayName\n  description\n  isSystemRole\n  priority\n  assignedPermissions {\n    grantedPermission {\n      ...PermissionBase\n    }\n  }\n}\n\nfragment AuditLogEntry on auditLogs {\n  id\n  userId\n  userEmail\n  userRole\n  action\n  resourceType\n  resourceId\n  eventTime\n  success\n  errorMessage\n  ipAddress\n  userAgent\n  requestId\n  sessionId\n  metadata\n  oldValues\n  newValues\n  createdAt\n}\n\nfragment AuthEvent on authEvents {\n  id\n  userId\n  userEmail\n  eventType\n  eventTime\n  success\n  failureReason\n  ipAddress\n  userAgent\n  metadata\n}\n\nfragment DataAccessLog on dataAccessLogs {\n  id\n  userId\n  resourceType\n  resourceId\n  accessType\n  accessedAt\n  dataClassification\n  fieldsAccessed\n  rowCount\n  ipAddress\n  metadata\n}\n\nfragment PermissionChange on permissionChanges {\n  id\n  changedAt\n  changedByUserId\n  targetUserId\n  targetRoleId\n  changeType\n  permissionType\n  oldPermissions\n  newPermissions\n  reason\n  approvedByUserId\n}\n\nfragment PayrollDateInfo on payrollDates {\n  id\n  originalEftDate\n  adjustedEftDate\n  notes\n  createdAt\n}\n\nfragment PermissionOverrideInfo on permissionOverrides {\n  id\n  userId\n  role\n  resource\n  operation\n  granted\n  reason\n  conditions\n  expiresAt\n  createdBy\n  createdAt\n}": types.UserMinimalFragmentDoc,
    "mutation LogAuditEvent($input: auditLogsInsertInput!) {\n  insertAuditLogsOne: insertAuditLog(object: $input) {\n    id\n    eventTime\n  }\n}\n\nmutation InsertFile($input: filesInsertInput!) {\n  insertFile(object: $input) {\n    id\n    filename\n    bucket\n    objectKey\n    size\n    mimetype\n    url\n    clientId\n    payrollId\n    uploadedBy\n    category\n    isPublic\n    metadata\n    fileType\n    createdAt\n  }\n}\n\nmutation UpdateFileMetadata($id: uuid!, $updates: filesSetInput!) {\n  updateFileById(pkColumns: {id: $id}, _set: $updates) {\n    id\n    filename\n    bucket\n    objectKey\n    size\n    mimetype\n    url\n    clientId\n    payrollId\n    uploadedBy\n    category\n    isPublic\n    metadata\n    fileType\n    createdAt\n  }\n}\n\nmutation DeleteFile($id: uuid!) {\n  deleteFileById(id: $id) {\n    id\n    filename\n    objectKey\n  }\n}\n\nmutation RefreshData {\n  __typename\n}": types.LogAuditEventDocument,
    "query GetDashboardMetrics($userId: uuid!) {\n  clientsAggregate(where: {active: {_eq: true}}) {\n    aggregate {\n      count\n    }\n  }\n  activePayrollsAggregate: payrollsAggregate(\n    where: {supersededDate: {_isNull: true}, status: {_nin: [\"Completed\", \"Failed\"]}}\n  ) {\n    aggregate {\n      count\n    }\n  }\n  totalEmployeesAggregate: payrollsAggregate(\n    where: {supersededDate: {_isNull: true}}\n  ) {\n    aggregate {\n      sum {\n        employeeCount\n      }\n    }\n  }\n  upcomingPayrolls: payrolls(\n    where: {supersededDate: {_isNull: true}, status: {_nin: [\"Completed\", \"Failed\", \"Cancelled\"]}}\n    orderBy: {updatedAt: DESC}\n    limit: 5\n  ) {\n    ...PayrollMinimal\n    client {\n      ...ClientMinimal\n    }\n  }\n}\n\nquery GetDashboardStatsOptimized($limit: Int = 10) {\n  clientsAggregate {\n    aggregate {\n      count\n    }\n  }\n  totalPayrolls: payrollsAggregate(where: {supersededDate: {_isNull: true}}) {\n    aggregate {\n      count\n    }\n  }\n  activePayrolls: payrollsAggregate(\n    where: {supersededDate: {_isNull: true}, status: {_eq: \"Active\"}}\n  ) {\n    aggregate {\n      count\n    }\n  }\n  upcomingPayrolls: payrolls(\n    where: {supersededDate: {_isNull: true}, status: {_eq: \"Active\"}}\n    orderBy: {updatedAt: DESC}\n    limit: $limit\n  ) {\n    id\n    name\n    status\n    client {\n      id\n      name\n    }\n  }\n}\n\nquery GetClientsDashboardStats {\n  activeClientsCount: clientsAggregate(where: {active: {_eq: true}}) {\n    aggregate {\n      count\n    }\n  }\n  totalPayrollsCount: payrollsAggregate(where: {supersededDate: {_isNull: true}}) {\n    aggregate {\n      count\n    }\n  }\n  totalEmployeesSum: payrollsAggregate(where: {supersededDate: {_isNull: true}}) {\n    aggregate {\n      sum {\n        employeeCount\n      }\n    }\n  }\n  clientsNeedingAttention: clients(\n    where: {active: {_eq: true}, _not: {payrolls: {supersededDate: {_isNull: true}}}}\n  ) {\n    ...ClientMinimal\n  }\n}\n\nquery GetCurrentUser($userId: uuid!) {\n  user: userById(id: $userId) {\n    ...UserProfile\n  }\n}\n\nquery GetUsersForDropdown($role: user_role) {\n  users(\n    where: {isActive: {_eq: true}, role: {_eq: $role}}\n    orderBy: {computedName: ASC}\n  ) {\n    ...UserMinimal\n  }\n}\n\nquery GetSystemHealth {\n  databaseHealth: users(limit: 1) {\n    id\n  }\n  recentActivity: auditLogsAggregate(\n    where: {eventTime: {_gte: \"now() - interval '1 hour'\"}}\n  ) {\n    aggregate {\n      count\n    }\n  }\n}\n\nquery GlobalSearch($searchTerm: String!) {\n  clients(\n    where: {_or: [{name: {_ilike: $searchTerm}}, {contactEmail: {_ilike: $searchTerm}}]}\n    limit: 5\n  ) {\n    ...ClientMinimal\n  }\n  users(\n    where: {_or: [{computedName: {_ilike: $searchTerm}}, {firstName: {_ilike: $searchTerm}}, {lastName: {_ilike: $searchTerm}}, {email: {_ilike: $searchTerm}}]}\n    limit: 5\n  ) {\n    ...UserMinimal\n  }\n  payrolls(\n    where: {client: {name: {_ilike: $searchTerm}}, supersededDate: {_isNull: true}}\n    limit: 5\n  ) {\n    ...PayrollMinimal\n    client {\n      ...ClientMinimal\n    }\n  }\n}\n\nquery GetFileById($id: uuid!) {\n  fileById(id: $id) {\n    id\n    filename\n    bucket\n    objectKey\n    size\n    mimetype\n    url\n    clientId\n    payrollId\n    uploadedBy\n    category\n    isPublic\n    metadata\n    fileType\n    createdAt\n    client {\n      name\n    }\n    payroll {\n      name\n    }\n    uploader {\n      firstName\n      lastName\n      computedName\n    }\n  }\n}\n\nquery ListFiles($where: filesBoolExp, $limit: Int, $offset: Int, $orderBy: [filesOrderBy!]) {\n  files(where: $where, limit: $limit, offset: $offset, orderBy: $orderBy) {\n    id\n    filename\n    bucket\n    objectKey\n    size\n    mimetype\n    url\n    clientId\n    payrollId\n    uploadedBy\n    category\n    isPublic\n    metadata\n    fileType\n    createdAt\n    client {\n      name\n    }\n    payroll {\n      name\n    }\n    uploader {\n      firstName\n      lastName\n      computedName\n    }\n  }\n  filesAggregate(where: $where) {\n    aggregate {\n      count\n    }\n  }\n}": types.GetDashboardMetricsDocument,
    "subscription RecentActivity($resourceTypes: [String!]) {\n  auditLogs(\n    where: {resourceType: {_in: $resourceTypes}, eventTime: {_gte: \"now() - interval '5 minutes'\"}}\n    orderBy: {eventTime: DESC}\n    limit: 20\n  ) {\n    ...AuditLogEntry\n  }\n}\n\nsubscription AuthenticationEvents($userId: uuid) {\n  authEvents(\n    where: {userId: {_eq: $userId}, eventTime: {_gte: \"now() - interval '10 minutes'\"}}\n    orderBy: {eventTime: DESC}\n  ) {\n    ...AuthEvent\n  }\n}\n\nsubscription SensitiveDataAccess($resourceTypes: [String!]!) {\n  dataAccessLogs(\n    where: {resourceType: {_in: $resourceTypes}, accessedAt: {_gte: \"now() - interval '10 minutes'\"}}\n    orderBy: {accessedAt: DESC}\n  ) {\n    ...DataAccessLog\n  }\n}\n\nsubscription PermissionChangeStream {\n  permissionChanges(orderBy: {changedAt: DESC}, limit: 10) {\n    ...PermissionChange\n  }\n}": types.RecentActivityDocument,
};

/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 *
 *
 * @example
 * ```ts
 * const query = gql(`query GetUser($id: ID!) { user(id: $id) { name } }`);
 * ```
 *
 * The query argument is unknown!
 * Please regenerate the types.
 */
export function gql(source: string): unknown;

/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "fragment EmailTemplateBase on EmailTemplates {\n  id\n  name\n  description\n  category\n  subjectTemplate\n  htmlContent\n  textContent\n  availableVariables\n  isActive\n  isSystemTemplate\n  requiresApproval\n  createdAt\n  updatedAt\n}\n\nfragment EmailTemplateWithRelations on EmailTemplates {\n  ...EmailTemplateBase\n  createdByUserId\n  approvedByUserId\n  approvedAt\n  createdByUser {\n    id\n    firstName\n    lastName\n    computedName\n    email\n  }\n  approvedByUser {\n    id\n    firstName\n    lastName\n    computedName\n    email\n  }\n}\n\nfragment EmailSendLogBase on EmailSendLogs {\n  id\n  templateId\n  resendEmailId\n  recipientEmails\n  senderUserId\n  subject\n  businessContext\n  sendStatus\n  scheduledFor\n  sentAt\n  deliveredAt\n  openedAt\n  clickedAt\n  createdAt\n}\n\nfragment EmailSendLogWithRelations on EmailSendLogs {\n  ...EmailSendLogBase\n  htmlContent\n  textContent\n  resendResponse\n  errorMessage\n  emailTemplate {\n    id\n    name\n    category\n  }\n  senderUser {\n    id\n    firstName\n    lastName\n    computedName\n    email\n  }\n}\n\nfragment EmailDraftBase on EmailDrafts {\n  id\n  userId\n  templateId\n  recipientEmails\n  subject\n  htmlContent\n  textContent\n  variableValues\n  businessContext\n  scheduledFor\n  createdAt\n  updatedAt\n}\n\nfragment EmailDraftWithRelations on EmailDrafts {\n  ...EmailDraftBase\n  user {\n    id\n    firstName\n    lastName\n    computedName\n    email\n  }\n  emailTemplate {\n    id\n    name\n    category\n    subjectTemplate\n    htmlContent\n    availableVariables\n  }\n}\n\nfragment UserEmailTemplateFavorite on UserEmailTemplateFavorites {\n  id\n  userId\n  templateId\n  createdAt\n  emailTemplate {\n    ...EmailTemplateBase\n  }\n}\n\nfragment TemplateUsageStats on EmailTemplates {\n  id\n  name\n  category\n  emailSendLogsAggregate {\n    aggregate {\n      count\n    }\n  }\n}"): (typeof documents)["fragment EmailTemplateBase on EmailTemplates {\n  id\n  name\n  description\n  category\n  subjectTemplate\n  htmlContent\n  textContent\n  availableVariables\n  isActive\n  isSystemTemplate\n  requiresApproval\n  createdAt\n  updatedAt\n}\n\nfragment EmailTemplateWithRelations on EmailTemplates {\n  ...EmailTemplateBase\n  createdByUserId\n  approvedByUserId\n  approvedAt\n  createdByUser {\n    id\n    firstName\n    lastName\n    computedName\n    email\n  }\n  approvedByUser {\n    id\n    firstName\n    lastName\n    computedName\n    email\n  }\n}\n\nfragment EmailSendLogBase on EmailSendLogs {\n  id\n  templateId\n  resendEmailId\n  recipientEmails\n  senderUserId\n  subject\n  businessContext\n  sendStatus\n  scheduledFor\n  sentAt\n  deliveredAt\n  openedAt\n  clickedAt\n  createdAt\n}\n\nfragment EmailSendLogWithRelations on EmailSendLogs {\n  ...EmailSendLogBase\n  htmlContent\n  textContent\n  resendResponse\n  errorMessage\n  emailTemplate {\n    id\n    name\n    category\n  }\n  senderUser {\n    id\n    firstName\n    lastName\n    computedName\n    email\n  }\n}\n\nfragment EmailDraftBase on EmailDrafts {\n  id\n  userId\n  templateId\n  recipientEmails\n  subject\n  htmlContent\n  textContent\n  variableValues\n  businessContext\n  scheduledFor\n  createdAt\n  updatedAt\n}\n\nfragment EmailDraftWithRelations on EmailDrafts {\n  ...EmailDraftBase\n  user {\n    id\n    firstName\n    lastName\n    computedName\n    email\n  }\n  emailTemplate {\n    id\n    name\n    category\n    subjectTemplate\n    htmlContent\n    availableVariables\n  }\n}\n\nfragment UserEmailTemplateFavorite on UserEmailTemplateFavorites {\n  id\n  userId\n  templateId\n  createdAt\n  emailTemplate {\n    ...EmailTemplateBase\n  }\n}\n\nfragment TemplateUsageStats on EmailTemplates {\n  id\n  name\n  category\n  emailSendLogsAggregate {\n    aggregate {\n      count\n    }\n  }\n}"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "mutation CreateEmailTemplate($input: EmailTemplatesInsertInput!) {\n  insertEmailTemplatesOne(object: $input) {\n    ...EmailTemplateWithRelations\n  }\n}\n\nmutation UpdateEmailTemplate($templateId: uuid!, $updates: EmailTemplatesSetInput!) {\n  updateEmailTemplatesByPk(pkColumns: {id: $templateId}, _set: $updates) {\n    ...EmailTemplateWithRelations\n  }\n}\n\nmutation DeleteEmailTemplate($templateId: uuid!) {\n  deleteEmailTemplatesByPk(id: $templateId) {\n    id\n    name\n  }\n}\n\nmutation ApproveEmailTemplate($templateId: uuid!, $approverId: uuid!) {\n  updateEmailTemplatesByPk(\n    pkColumns: {id: $templateId}\n    _set: {approvedByUserId: $approverId, approvedAt: \"now()\"}\n  ) {\n    ...EmailTemplateWithRelations\n  }\n}\n\nmutation LogEmailSend($input: EmailSendLogsInsertInput!) {\n  insertEmailSendLogsOne(object: $input) {\n    ...EmailSendLogBase\n  }\n}\n\nmutation UpdateEmailSendStatus($logId: uuid!, $status: String!, $resendResponse: jsonb, $errorMessage: String, $sentAt: timestamptz, $deliveredAt: timestamptz, $openedAt: timestamptz, $clickedAt: timestamptz) {\n  updateEmailSendLogsByPk(\n    pkColumns: {id: $logId}\n    _set: {sendStatus: $status, resendResponse: $resendResponse, errorMessage: $errorMessage, sentAt: $sentAt, deliveredAt: $deliveredAt, openedAt: $openedAt, clickedAt: $clickedAt}\n  ) {\n    ...EmailSendLogBase\n  }\n}\n\nmutation CreateEmailDraft($input: EmailDraftsInsertInput!) {\n  insertEmailDraftsOne(object: $input) {\n    ...EmailDraftWithRelations\n  }\n}\n\nmutation UpdateEmailDraft($draftId: uuid!, $updates: EmailDraftsSetInput!) {\n  updateEmailDraftsByPk(pkColumns: {id: $draftId}, _set: $updates) {\n    ...EmailDraftWithRelations\n  }\n}\n\nmutation DeleteEmailDraft($draftId: uuid!) {\n  deleteEmailDraftsByPk(id: $draftId) {\n    id\n  }\n}\n\nmutation AddTemplateFavorite($userId: uuid!, $templateId: uuid!) {\n  insertUserEmailTemplateFavoritesOne(\n    object: {userId: $userId, templateId: $templateId}\n    onConflict: {constraint: user_email_template_favorites_user_id_template_id_key, updateColumns: []}\n  ) {\n    ...UserEmailTemplateFavorite\n  }\n}\n\nmutation RemoveTemplateFavorite($userId: uuid!, $templateId: uuid!) {\n  deleteUserEmailTemplateFavorites(\n    where: {userId: {_eq: $userId}, templateId: {_eq: $templateId}}\n  ) {\n    affectedRows\n  }\n}\n\nmutation BulkCreateEmailTemplates($templates: [EmailTemplatesInsertInput!]!) {\n  insertEmailTemplates(objects: $templates) {\n    affectedRows\n    returning {\n      id\n      name\n      category\n    }\n  }\n}\n\nmutation DuplicateEmailTemplate($sourceTemplateId: uuid!, $newName: String!, $userId: uuid!) {\n  insertEmailTemplatesOne(\n    object: {name: $newName, description: \"Copy of template\", category: \"system\", subjectTemplate: \"\", htmlContent: \"\", availableVariables: \"[]\", isActive: true, isSystemTemplate: false, createdByUserId: $userId}\n  ) {\n    id\n  }\n}\n\nmutation BulkUpdateEmailSendStatuses($updates: [EmailSendLogsUpdates!]!) {\n  updateEmailSendLogsMany(updates: $updates) {\n    affectedRows\n  }\n}\n\nmutation ArchiveOldEmailLogs($beforeDate: timestamptz!) {\n  deleteEmailSendLogs(\n    where: {createdAt: {_lt: $beforeDate}, sendStatus: {_in: [\"delivered\", \"failed\", \"bounced\"]}}\n  ) {\n    affectedRows\n  }\n}\n\nmutation ToggleEmailTemplateStatus($templateId: uuid!, $isActive: Boolean!) {\n  updateEmailTemplatesByPk(\n    pkColumns: {id: $templateId}\n    _set: {isActive: $isActive}\n  ) {\n    id\n    name\n    isActive\n  }\n}"): (typeof documents)["mutation CreateEmailTemplate($input: EmailTemplatesInsertInput!) {\n  insertEmailTemplatesOne(object: $input) {\n    ...EmailTemplateWithRelations\n  }\n}\n\nmutation UpdateEmailTemplate($templateId: uuid!, $updates: EmailTemplatesSetInput!) {\n  updateEmailTemplatesByPk(pkColumns: {id: $templateId}, _set: $updates) {\n    ...EmailTemplateWithRelations\n  }\n}\n\nmutation DeleteEmailTemplate($templateId: uuid!) {\n  deleteEmailTemplatesByPk(id: $templateId) {\n    id\n    name\n  }\n}\n\nmutation ApproveEmailTemplate($templateId: uuid!, $approverId: uuid!) {\n  updateEmailTemplatesByPk(\n    pkColumns: {id: $templateId}\n    _set: {approvedByUserId: $approverId, approvedAt: \"now()\"}\n  ) {\n    ...EmailTemplateWithRelations\n  }\n}\n\nmutation LogEmailSend($input: EmailSendLogsInsertInput!) {\n  insertEmailSendLogsOne(object: $input) {\n    ...EmailSendLogBase\n  }\n}\n\nmutation UpdateEmailSendStatus($logId: uuid!, $status: String!, $resendResponse: jsonb, $errorMessage: String, $sentAt: timestamptz, $deliveredAt: timestamptz, $openedAt: timestamptz, $clickedAt: timestamptz) {\n  updateEmailSendLogsByPk(\n    pkColumns: {id: $logId}\n    _set: {sendStatus: $status, resendResponse: $resendResponse, errorMessage: $errorMessage, sentAt: $sentAt, deliveredAt: $deliveredAt, openedAt: $openedAt, clickedAt: $clickedAt}\n  ) {\n    ...EmailSendLogBase\n  }\n}\n\nmutation CreateEmailDraft($input: EmailDraftsInsertInput!) {\n  insertEmailDraftsOne(object: $input) {\n    ...EmailDraftWithRelations\n  }\n}\n\nmutation UpdateEmailDraft($draftId: uuid!, $updates: EmailDraftsSetInput!) {\n  updateEmailDraftsByPk(pkColumns: {id: $draftId}, _set: $updates) {\n    ...EmailDraftWithRelations\n  }\n}\n\nmutation DeleteEmailDraft($draftId: uuid!) {\n  deleteEmailDraftsByPk(id: $draftId) {\n    id\n  }\n}\n\nmutation AddTemplateFavorite($userId: uuid!, $templateId: uuid!) {\n  insertUserEmailTemplateFavoritesOne(\n    object: {userId: $userId, templateId: $templateId}\n    onConflict: {constraint: user_email_template_favorites_user_id_template_id_key, updateColumns: []}\n  ) {\n    ...UserEmailTemplateFavorite\n  }\n}\n\nmutation RemoveTemplateFavorite($userId: uuid!, $templateId: uuid!) {\n  deleteUserEmailTemplateFavorites(\n    where: {userId: {_eq: $userId}, templateId: {_eq: $templateId}}\n  ) {\n    affectedRows\n  }\n}\n\nmutation BulkCreateEmailTemplates($templates: [EmailTemplatesInsertInput!]!) {\n  insertEmailTemplates(objects: $templates) {\n    affectedRows\n    returning {\n      id\n      name\n      category\n    }\n  }\n}\n\nmutation DuplicateEmailTemplate($sourceTemplateId: uuid!, $newName: String!, $userId: uuid!) {\n  insertEmailTemplatesOne(\n    object: {name: $newName, description: \"Copy of template\", category: \"system\", subjectTemplate: \"\", htmlContent: \"\", availableVariables: \"[]\", isActive: true, isSystemTemplate: false, createdByUserId: $userId}\n  ) {\n    id\n  }\n}\n\nmutation BulkUpdateEmailSendStatuses($updates: [EmailSendLogsUpdates!]!) {\n  updateEmailSendLogsMany(updates: $updates) {\n    affectedRows\n  }\n}\n\nmutation ArchiveOldEmailLogs($beforeDate: timestamptz!) {\n  deleteEmailSendLogs(\n    where: {createdAt: {_lt: $beforeDate}, sendStatus: {_in: [\"delivered\", \"failed\", \"bounced\"]}}\n  ) {\n    affectedRows\n  }\n}\n\nmutation ToggleEmailTemplateStatus($templateId: uuid!, $isActive: Boolean!) {\n  updateEmailTemplatesByPk(\n    pkColumns: {id: $templateId}\n    _set: {isActive: $isActive}\n  ) {\n    id\n    name\n    isActive\n  }\n}"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "query GetEmailTemplates($category: String, $isActive: Boolean = true) {\n  emailTemplates(\n    where: {category: {_eq: $category}, isActive: {_eq: $isActive}}\n    orderBy: {createdAt: DESC}\n  ) {\n    ...EmailTemplateWithRelations\n  }\n}\n\nquery GetEmailTemplateById($templateId: uuid!) {\n  emailTemplatesByPk(id: $templateId) {\n    ...EmailTemplateWithRelations\n  }\n}\n\nquery GetSystemEmailTemplates {\n  emailTemplates(\n    where: {isSystemTemplate: {_eq: true}, isActive: {_eq: true}}\n    orderBy: [{category: ASC}, {name: ASC}]\n  ) {\n    ...EmailTemplateBase\n  }\n}\n\nquery GetUserFavoriteTemplates($userId: uuid!) {\n  userEmailTemplateFavorites(\n    where: {userId: {_eq: $userId}}\n    orderBy: {createdAt: DESC}\n  ) {\n    ...UserEmailTemplateFavorite\n  }\n}\n\nquery GetEmailTemplatesByCategory($category: String!) {\n  emailTemplates(\n    where: {category: {_eq: $category}, isActive: {_eq: true}}\n    orderBy: {name: ASC}\n  ) {\n    ...EmailTemplateBase\n    ...TemplateUsageStats\n  }\n}\n\nquery GetEmailSendLogs($limit: Int = 50, $offset: Int = 0, $senderId: uuid, $status: String, $fromDate: timestamptz, $toDate: timestamptz) {\n  emailSendLogs(\n    limit: $limit\n    offset: $offset\n    where: {senderUserId: {_eq: $senderId}, sendStatus: {_eq: $status}, createdAt: {_gte: $fromDate, _lte: $toDate}}\n    orderBy: {createdAt: DESC}\n  ) {\n    ...EmailSendLogWithRelations\n  }\n}\n\nquery GetEmailSendLogById($logId: uuid!) {\n  emailSendLogsByPk(id: $logId) {\n    ...EmailSendLogWithRelations\n  }\n}\n\nquery GetUserEmailDrafts($userId: uuid!) {\n  emailDrafts(where: {userId: {_eq: $userId}}, orderBy: {updatedAt: DESC}) {\n    ...EmailDraftWithRelations\n  }\n}\n\nquery GetEmailDraftById($draftId: uuid!) {\n  emailDraftsByPk(id: $draftId) {\n    ...EmailDraftWithRelations\n  }\n}\n\nquery GetEmailAnalytics($fromDate: timestamptz!, $toDate: timestamptz!, $userId: uuid) {\n  emailSendLogsAggregate(\n    where: {createdAt: {_gte: $fromDate, _lte: $toDate}, senderUserId: {_eq: $userId}}\n  ) {\n    aggregate {\n      count\n    }\n  }\n  sentEmails: emailSendLogsAggregate(\n    where: {createdAt: {_gte: $fromDate, _lte: $toDate}, senderUserId: {_eq: $userId}, sendStatus: {_eq: \"sent\"}}\n  ) {\n    aggregate {\n      count\n    }\n  }\n  deliveredEmails: emailSendLogsAggregate(\n    where: {createdAt: {_gte: $fromDate, _lte: $toDate}, senderUserId: {_eq: $userId}, sendStatus: {_eq: \"delivered\"}}\n  ) {\n    aggregate {\n      count\n    }\n  }\n  failedEmails: emailSendLogsAggregate(\n    where: {createdAt: {_gte: $fromDate, _lte: $toDate}, senderUserId: {_eq: $userId}, sendStatus: {_eq: \"failed\"}}\n  ) {\n    aggregate {\n      count\n    }\n  }\n}\n\nquery GetRecentEmailActivity($limit: Int = 10, $userId: uuid) {\n  emailSendLogs(\n    limit: $limit\n    where: {senderUserId: {_eq: $userId}}\n    orderBy: {createdAt: DESC}\n  ) {\n    id\n    subject\n    recipientEmails\n    sendStatus\n    sentAt\n    createdAt\n    emailTemplate {\n      name\n      category\n    }\n  }\n}\n\nquery SearchEmailTemplates($searchTerm: String!, $category: String) {\n  emailTemplates(\n    where: {_and: [{_or: [{name: {_ilike: $searchTerm}}, {description: {_ilike: $searchTerm}}]}, {category: {_eq: $category}}, {isActive: {_eq: true}}]}\n    orderBy: {name: ASC}\n  ) {\n    ...EmailTemplateBase\n    ...TemplateUsageStats\n  }\n}\n\nquery GetTemplateUsageStats($templateId: uuid!, $fromDate: timestamptz!) {\n  emailTemplatesByPk(id: $templateId) {\n    id\n    name\n    category\n    emailSendLogsAggregate(where: {createdAt: {_gte: $fromDate}}) {\n      aggregate {\n        count\n      }\n    }\n  }\n  emailSendLogs(\n    where: {templateId: {_eq: $templateId}, createdAt: {_gte: $fromDate}}\n    orderBy: {createdAt: DESC}\n    limit: 10\n  ) {\n    id\n    recipientEmails\n    sendStatus\n    sentAt\n    senderUser {\n      firstName\n      lastName\n      computedName\n    }\n  }\n}"): (typeof documents)["query GetEmailTemplates($category: String, $isActive: Boolean = true) {\n  emailTemplates(\n    where: {category: {_eq: $category}, isActive: {_eq: $isActive}}\n    orderBy: {createdAt: DESC}\n  ) {\n    ...EmailTemplateWithRelations\n  }\n}\n\nquery GetEmailTemplateById($templateId: uuid!) {\n  emailTemplatesByPk(id: $templateId) {\n    ...EmailTemplateWithRelations\n  }\n}\n\nquery GetSystemEmailTemplates {\n  emailTemplates(\n    where: {isSystemTemplate: {_eq: true}, isActive: {_eq: true}}\n    orderBy: [{category: ASC}, {name: ASC}]\n  ) {\n    ...EmailTemplateBase\n  }\n}\n\nquery GetUserFavoriteTemplates($userId: uuid!) {\n  userEmailTemplateFavorites(\n    where: {userId: {_eq: $userId}}\n    orderBy: {createdAt: DESC}\n  ) {\n    ...UserEmailTemplateFavorite\n  }\n}\n\nquery GetEmailTemplatesByCategory($category: String!) {\n  emailTemplates(\n    where: {category: {_eq: $category}, isActive: {_eq: true}}\n    orderBy: {name: ASC}\n  ) {\n    ...EmailTemplateBase\n    ...TemplateUsageStats\n  }\n}\n\nquery GetEmailSendLogs($limit: Int = 50, $offset: Int = 0, $senderId: uuid, $status: String, $fromDate: timestamptz, $toDate: timestamptz) {\n  emailSendLogs(\n    limit: $limit\n    offset: $offset\n    where: {senderUserId: {_eq: $senderId}, sendStatus: {_eq: $status}, createdAt: {_gte: $fromDate, _lte: $toDate}}\n    orderBy: {createdAt: DESC}\n  ) {\n    ...EmailSendLogWithRelations\n  }\n}\n\nquery GetEmailSendLogById($logId: uuid!) {\n  emailSendLogsByPk(id: $logId) {\n    ...EmailSendLogWithRelations\n  }\n}\n\nquery GetUserEmailDrafts($userId: uuid!) {\n  emailDrafts(where: {userId: {_eq: $userId}}, orderBy: {updatedAt: DESC}) {\n    ...EmailDraftWithRelations\n  }\n}\n\nquery GetEmailDraftById($draftId: uuid!) {\n  emailDraftsByPk(id: $draftId) {\n    ...EmailDraftWithRelations\n  }\n}\n\nquery GetEmailAnalytics($fromDate: timestamptz!, $toDate: timestamptz!, $userId: uuid) {\n  emailSendLogsAggregate(\n    where: {createdAt: {_gte: $fromDate, _lte: $toDate}, senderUserId: {_eq: $userId}}\n  ) {\n    aggregate {\n      count\n    }\n  }\n  sentEmails: emailSendLogsAggregate(\n    where: {createdAt: {_gte: $fromDate, _lte: $toDate}, senderUserId: {_eq: $userId}, sendStatus: {_eq: \"sent\"}}\n  ) {\n    aggregate {\n      count\n    }\n  }\n  deliveredEmails: emailSendLogsAggregate(\n    where: {createdAt: {_gte: $fromDate, _lte: $toDate}, senderUserId: {_eq: $userId}, sendStatus: {_eq: \"delivered\"}}\n  ) {\n    aggregate {\n      count\n    }\n  }\n  failedEmails: emailSendLogsAggregate(\n    where: {createdAt: {_gte: $fromDate, _lte: $toDate}, senderUserId: {_eq: $userId}, sendStatus: {_eq: \"failed\"}}\n  ) {\n    aggregate {\n      count\n    }\n  }\n}\n\nquery GetRecentEmailActivity($limit: Int = 10, $userId: uuid) {\n  emailSendLogs(\n    limit: $limit\n    where: {senderUserId: {_eq: $userId}}\n    orderBy: {createdAt: DESC}\n  ) {\n    id\n    subject\n    recipientEmails\n    sendStatus\n    sentAt\n    createdAt\n    emailTemplate {\n      name\n      category\n    }\n  }\n}\n\nquery SearchEmailTemplates($searchTerm: String!, $category: String) {\n  emailTemplates(\n    where: {_and: [{_or: [{name: {_ilike: $searchTerm}}, {description: {_ilike: $searchTerm}}]}, {category: {_eq: $category}}, {isActive: {_eq: true}}]}\n    orderBy: {name: ASC}\n  ) {\n    ...EmailTemplateBase\n    ...TemplateUsageStats\n  }\n}\n\nquery GetTemplateUsageStats($templateId: uuid!, $fromDate: timestamptz!) {\n  emailTemplatesByPk(id: $templateId) {\n    id\n    name\n    category\n    emailSendLogsAggregate(where: {createdAt: {_gte: $fromDate}}) {\n      aggregate {\n        count\n      }\n    }\n  }\n  emailSendLogs(\n    where: {templateId: {_eq: $templateId}, createdAt: {_gte: $fromDate}}\n    orderBy: {createdAt: DESC}\n    limit: 10\n  ) {\n    id\n    recipientEmails\n    sendStatus\n    sentAt\n    senderUser {\n      firstName\n      lastName\n      computedName\n    }\n  }\n}"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "fragment UserMinimal on users {\n  id\n  firstName\n  lastName\n  computedName\n  email\n}\n\nfragment UserCoreShared on users {\n  ...UserMinimal\n  role\n  isActive\n}\n\nfragment UserBasic on users {\n  ...UserCoreShared\n  clerkUserId\n  createdAt\n  updatedAt\n}\n\nfragment UserBase on users {\n  ...UserBasic\n}\n\nfragment UserWithRole on users {\n  ...UserBasic\n  username\n  isStaff\n}\n\nfragment UserProfile on users {\n  ...UserWithRole\n  clerkUserId\n  image\n  managerId\n  deactivatedAt\n  deactivatedBy\n  managerUser {\n    ...UserMinimal\n  }\n}\n\nfragment UserSearchResult on users {\n  ...UserCoreShared\n  username\n  isStaff\n}\n\nfragment ClientMinimal on clients {\n  id\n  name\n}\n\nfragment ClientBase on clients {\n  id\n  name\n  active\n  contactEmail\n  contactPerson\n  contactPhone\n  createdAt\n}\n\nfragment ClientWithStats on clients {\n  ...ClientBase\n  currentEmployeeCount: payrollsAggregate(\n    where: {supersededDate: {_isNull: true}}\n  ) {\n    aggregate {\n      sum {\n        employeeCount\n      }\n    }\n  }\n  activePayrollCount: payrollsAggregate(\n    where: {supersededDate: {_isNull: true}, status: {_eq: \"Active\"}}\n  ) {\n    aggregate {\n      count\n    }\n  }\n}\n\nfragment ClientListBase on clients {\n  ...ClientBase\n  payrollCount: payrollsAggregate(where: {supersededDate: {_isNull: true}}) {\n    aggregate {\n      count\n    }\n  }\n}\n\nfragment PayrollMinimal on payrolls {\n  id\n  name\n  employeeCount\n  status\n}\n\nfragment PayrollBase on payrolls {\n  id\n  name\n  employeeCount\n  status\n  payrollSystem\n  processingTime\n  processingDaysBeforeEft\n  versionNumber\n  supersededDate\n  createdAt\n  updatedAt\n}\n\nfragment PayrollWithClient on payrolls {\n  ...PayrollBase\n  clientId\n  client {\n    id\n    name\n    active\n  }\n}\n\nfragment PayrollListItem on payrolls {\n  ...PayrollWithClient\n  primaryConsultantUserId\n  backupConsultantUserId\n  managerUserId\n  createdByUserId\n  cycleId\n  dateTypeId\n  dateValue\n  payrollCycle {\n    id\n    name\n    description\n  }\n  payrollDateType {\n    id\n    name\n    description\n  }\n  primaryConsultant {\n    ...UserMinimal\n  }\n  backupConsultant {\n    ...UserMinimal\n  }\n  manager {\n    ...UserMinimal\n  }\n}\n\nfragment PayrollWithDates on payrolls {\n  ...PayrollBase\n  goLiveDate\n  payrollDates(orderBy: {originalEftDate: ASC}) {\n    id\n    originalEftDate\n    adjustedEftDate\n    notes\n  }\n}\n\nfragment PayrollFullDetail on payrolls {\n  ...PayrollWithDates\n  ...PayrollWithClient\n  dateTypeId\n  cycleId\n  dateValue\n  versionReason\n  supersededDate\n  parentPayrollId\n  parentPayroll {\n    id\n    versionNumber\n  }\n  childPayrolls(orderBy: {versionNumber: DESC}) {\n    id\n    versionNumber\n    versionReason\n    createdAt\n  }\n  primaryConsultant {\n    ...UserMinimal\n  }\n  backupConsultant {\n    ...UserMinimal\n  }\n  manager {\n    ...UserMinimal\n  }\n}\n\nfragment NoteWithAuthor on notes {\n  id\n  content\n  isImportant\n  createdAt\n  entityId\n  entityType\n  authorUser {\n    ...UserMinimal\n  }\n}\n\nfragment PermissionBase on permissions {\n  id\n  resourceId\n  description\n  legacyPermissionName\n  action\n}\n\nfragment RoleWithPermissions on roles {\n  id\n  name\n  displayName\n  description\n  isSystemRole\n  priority\n  assignedPermissions {\n    grantedPermission {\n      ...PermissionBase\n    }\n  }\n}\n\nfragment AuditLogEntry on auditLogs {\n  id\n  userId\n  userEmail\n  userRole\n  action\n  resourceType\n  resourceId\n  eventTime\n  success\n  errorMessage\n  ipAddress\n  userAgent\n  requestId\n  sessionId\n  metadata\n  oldValues\n  newValues\n  createdAt\n}\n\nfragment AuthEvent on authEvents {\n  id\n  userId\n  userEmail\n  eventType\n  eventTime\n  success\n  failureReason\n  ipAddress\n  userAgent\n  metadata\n}\n\nfragment DataAccessLog on dataAccessLogs {\n  id\n  userId\n  resourceType\n  resourceId\n  accessType\n  accessedAt\n  dataClassification\n  fieldsAccessed\n  rowCount\n  ipAddress\n  metadata\n}\n\nfragment PermissionChange on permissionChanges {\n  id\n  changedAt\n  changedByUserId\n  targetUserId\n  targetRoleId\n  changeType\n  permissionType\n  oldPermissions\n  newPermissions\n  reason\n  approvedByUserId\n}\n\nfragment PayrollDateInfo on payrollDates {\n  id\n  originalEftDate\n  adjustedEftDate\n  notes\n  createdAt\n}\n\nfragment PermissionOverrideInfo on permissionOverrides {\n  id\n  userId\n  role\n  resource\n  operation\n  granted\n  reason\n  conditions\n  expiresAt\n  createdBy\n  createdAt\n}"): (typeof documents)["fragment UserMinimal on users {\n  id\n  firstName\n  lastName\n  computedName\n  email\n}\n\nfragment UserCoreShared on users {\n  ...UserMinimal\n  role\n  isActive\n}\n\nfragment UserBasic on users {\n  ...UserCoreShared\n  clerkUserId\n  createdAt\n  updatedAt\n}\n\nfragment UserBase on users {\n  ...UserBasic\n}\n\nfragment UserWithRole on users {\n  ...UserBasic\n  username\n  isStaff\n}\n\nfragment UserProfile on users {\n  ...UserWithRole\n  clerkUserId\n  image\n  managerId\n  deactivatedAt\n  deactivatedBy\n  managerUser {\n    ...UserMinimal\n  }\n}\n\nfragment UserSearchResult on users {\n  ...UserCoreShared\n  username\n  isStaff\n}\n\nfragment ClientMinimal on clients {\n  id\n  name\n}\n\nfragment ClientBase on clients {\n  id\n  name\n  active\n  contactEmail\n  contactPerson\n  contactPhone\n  createdAt\n}\n\nfragment ClientWithStats on clients {\n  ...ClientBase\n  currentEmployeeCount: payrollsAggregate(\n    where: {supersededDate: {_isNull: true}}\n  ) {\n    aggregate {\n      sum {\n        employeeCount\n      }\n    }\n  }\n  activePayrollCount: payrollsAggregate(\n    where: {supersededDate: {_isNull: true}, status: {_eq: \"Active\"}}\n  ) {\n    aggregate {\n      count\n    }\n  }\n}\n\nfragment ClientListBase on clients {\n  ...ClientBase\n  payrollCount: payrollsAggregate(where: {supersededDate: {_isNull: true}}) {\n    aggregate {\n      count\n    }\n  }\n}\n\nfragment PayrollMinimal on payrolls {\n  id\n  name\n  employeeCount\n  status\n}\n\nfragment PayrollBase on payrolls {\n  id\n  name\n  employeeCount\n  status\n  payrollSystem\n  processingTime\n  processingDaysBeforeEft\n  versionNumber\n  supersededDate\n  createdAt\n  updatedAt\n}\n\nfragment PayrollWithClient on payrolls {\n  ...PayrollBase\n  clientId\n  client {\n    id\n    name\n    active\n  }\n}\n\nfragment PayrollListItem on payrolls {\n  ...PayrollWithClient\n  primaryConsultantUserId\n  backupConsultantUserId\n  managerUserId\n  createdByUserId\n  cycleId\n  dateTypeId\n  dateValue\n  payrollCycle {\n    id\n    name\n    description\n  }\n  payrollDateType {\n    id\n    name\n    description\n  }\n  primaryConsultant {\n    ...UserMinimal\n  }\n  backupConsultant {\n    ...UserMinimal\n  }\n  manager {\n    ...UserMinimal\n  }\n}\n\nfragment PayrollWithDates on payrolls {\n  ...PayrollBase\n  goLiveDate\n  payrollDates(orderBy: {originalEftDate: ASC}) {\n    id\n    originalEftDate\n    adjustedEftDate\n    notes\n  }\n}\n\nfragment PayrollFullDetail on payrolls {\n  ...PayrollWithDates\n  ...PayrollWithClient\n  dateTypeId\n  cycleId\n  dateValue\n  versionReason\n  supersededDate\n  parentPayrollId\n  parentPayroll {\n    id\n    versionNumber\n  }\n  childPayrolls(orderBy: {versionNumber: DESC}) {\n    id\n    versionNumber\n    versionReason\n    createdAt\n  }\n  primaryConsultant {\n    ...UserMinimal\n  }\n  backupConsultant {\n    ...UserMinimal\n  }\n  manager {\n    ...UserMinimal\n  }\n}\n\nfragment NoteWithAuthor on notes {\n  id\n  content\n  isImportant\n  createdAt\n  entityId\n  entityType\n  authorUser {\n    ...UserMinimal\n  }\n}\n\nfragment PermissionBase on permissions {\n  id\n  resourceId\n  description\n  legacyPermissionName\n  action\n}\n\nfragment RoleWithPermissions on roles {\n  id\n  name\n  displayName\n  description\n  isSystemRole\n  priority\n  assignedPermissions {\n    grantedPermission {\n      ...PermissionBase\n    }\n  }\n}\n\nfragment AuditLogEntry on auditLogs {\n  id\n  userId\n  userEmail\n  userRole\n  action\n  resourceType\n  resourceId\n  eventTime\n  success\n  errorMessage\n  ipAddress\n  userAgent\n  requestId\n  sessionId\n  metadata\n  oldValues\n  newValues\n  createdAt\n}\n\nfragment AuthEvent on authEvents {\n  id\n  userId\n  userEmail\n  eventType\n  eventTime\n  success\n  failureReason\n  ipAddress\n  userAgent\n  metadata\n}\n\nfragment DataAccessLog on dataAccessLogs {\n  id\n  userId\n  resourceType\n  resourceId\n  accessType\n  accessedAt\n  dataClassification\n  fieldsAccessed\n  rowCount\n  ipAddress\n  metadata\n}\n\nfragment PermissionChange on permissionChanges {\n  id\n  changedAt\n  changedByUserId\n  targetUserId\n  targetRoleId\n  changeType\n  permissionType\n  oldPermissions\n  newPermissions\n  reason\n  approvedByUserId\n}\n\nfragment PayrollDateInfo on payrollDates {\n  id\n  originalEftDate\n  adjustedEftDate\n  notes\n  createdAt\n}\n\nfragment PermissionOverrideInfo on permissionOverrides {\n  id\n  userId\n  role\n  resource\n  operation\n  granted\n  reason\n  conditions\n  expiresAt\n  createdBy\n  createdAt\n}"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "mutation LogAuditEvent($input: auditLogsInsertInput!) {\n  insertAuditLogsOne: insertAuditLog(object: $input) {\n    id\n    eventTime\n  }\n}\n\nmutation InsertFile($input: filesInsertInput!) {\n  insertFile(object: $input) {\n    id\n    filename\n    bucket\n    objectKey\n    size\n    mimetype\n    url\n    clientId\n    payrollId\n    uploadedBy\n    category\n    isPublic\n    metadata\n    fileType\n    createdAt\n  }\n}\n\nmutation UpdateFileMetadata($id: uuid!, $updates: filesSetInput!) {\n  updateFileById(pkColumns: {id: $id}, _set: $updates) {\n    id\n    filename\n    bucket\n    objectKey\n    size\n    mimetype\n    url\n    clientId\n    payrollId\n    uploadedBy\n    category\n    isPublic\n    metadata\n    fileType\n    createdAt\n  }\n}\n\nmutation DeleteFile($id: uuid!) {\n  deleteFileById(id: $id) {\n    id\n    filename\n    objectKey\n  }\n}\n\nmutation RefreshData {\n  __typename\n}"): (typeof documents)["mutation LogAuditEvent($input: auditLogsInsertInput!) {\n  insertAuditLogsOne: insertAuditLog(object: $input) {\n    id\n    eventTime\n  }\n}\n\nmutation InsertFile($input: filesInsertInput!) {\n  insertFile(object: $input) {\n    id\n    filename\n    bucket\n    objectKey\n    size\n    mimetype\n    url\n    clientId\n    payrollId\n    uploadedBy\n    category\n    isPublic\n    metadata\n    fileType\n    createdAt\n  }\n}\n\nmutation UpdateFileMetadata($id: uuid!, $updates: filesSetInput!) {\n  updateFileById(pkColumns: {id: $id}, _set: $updates) {\n    id\n    filename\n    bucket\n    objectKey\n    size\n    mimetype\n    url\n    clientId\n    payrollId\n    uploadedBy\n    category\n    isPublic\n    metadata\n    fileType\n    createdAt\n  }\n}\n\nmutation DeleteFile($id: uuid!) {\n  deleteFileById(id: $id) {\n    id\n    filename\n    objectKey\n  }\n}\n\nmutation RefreshData {\n  __typename\n}"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "query GetDashboardMetrics($userId: uuid!) {\n  clientsAggregate(where: {active: {_eq: true}}) {\n    aggregate {\n      count\n    }\n  }\n  activePayrollsAggregate: payrollsAggregate(\n    where: {supersededDate: {_isNull: true}, status: {_nin: [\"Completed\", \"Failed\"]}}\n  ) {\n    aggregate {\n      count\n    }\n  }\n  totalEmployeesAggregate: payrollsAggregate(\n    where: {supersededDate: {_isNull: true}}\n  ) {\n    aggregate {\n      sum {\n        employeeCount\n      }\n    }\n  }\n  upcomingPayrolls: payrolls(\n    where: {supersededDate: {_isNull: true}, status: {_nin: [\"Completed\", \"Failed\", \"Cancelled\"]}}\n    orderBy: {updatedAt: DESC}\n    limit: 5\n  ) {\n    ...PayrollMinimal\n    client {\n      ...ClientMinimal\n    }\n  }\n}\n\nquery GetDashboardStatsOptimized($limit: Int = 10) {\n  clientsAggregate {\n    aggregate {\n      count\n    }\n  }\n  totalPayrolls: payrollsAggregate(where: {supersededDate: {_isNull: true}}) {\n    aggregate {\n      count\n    }\n  }\n  activePayrolls: payrollsAggregate(\n    where: {supersededDate: {_isNull: true}, status: {_eq: \"Active\"}}\n  ) {\n    aggregate {\n      count\n    }\n  }\n  upcomingPayrolls: payrolls(\n    where: {supersededDate: {_isNull: true}, status: {_eq: \"Active\"}}\n    orderBy: {updatedAt: DESC}\n    limit: $limit\n  ) {\n    id\n    name\n    status\n    client {\n      id\n      name\n    }\n  }\n}\n\nquery GetClientsDashboardStats {\n  activeClientsCount: clientsAggregate(where: {active: {_eq: true}}) {\n    aggregate {\n      count\n    }\n  }\n  totalPayrollsCount: payrollsAggregate(where: {supersededDate: {_isNull: true}}) {\n    aggregate {\n      count\n    }\n  }\n  totalEmployeesSum: payrollsAggregate(where: {supersededDate: {_isNull: true}}) {\n    aggregate {\n      sum {\n        employeeCount\n      }\n    }\n  }\n  clientsNeedingAttention: clients(\n    where: {active: {_eq: true}, _not: {payrolls: {supersededDate: {_isNull: true}}}}\n  ) {\n    ...ClientMinimal\n  }\n}\n\nquery GetCurrentUser($userId: uuid!) {\n  user: userById(id: $userId) {\n    ...UserProfile\n  }\n}\n\nquery GetUsersForDropdown($role: user_role) {\n  users(\n    where: {isActive: {_eq: true}, role: {_eq: $role}}\n    orderBy: {computedName: ASC}\n  ) {\n    ...UserMinimal\n  }\n}\n\nquery GetSystemHealth {\n  databaseHealth: users(limit: 1) {\n    id\n  }\n  recentActivity: auditLogsAggregate(\n    where: {eventTime: {_gte: \"now() - interval '1 hour'\"}}\n  ) {\n    aggregate {\n      count\n    }\n  }\n}\n\nquery GlobalSearch($searchTerm: String!) {\n  clients(\n    where: {_or: [{name: {_ilike: $searchTerm}}, {contactEmail: {_ilike: $searchTerm}}]}\n    limit: 5\n  ) {\n    ...ClientMinimal\n  }\n  users(\n    where: {_or: [{computedName: {_ilike: $searchTerm}}, {firstName: {_ilike: $searchTerm}}, {lastName: {_ilike: $searchTerm}}, {email: {_ilike: $searchTerm}}]}\n    limit: 5\n  ) {\n    ...UserMinimal\n  }\n  payrolls(\n    where: {client: {name: {_ilike: $searchTerm}}, supersededDate: {_isNull: true}}\n    limit: 5\n  ) {\n    ...PayrollMinimal\n    client {\n      ...ClientMinimal\n    }\n  }\n}\n\nquery GetFileById($id: uuid!) {\n  fileById(id: $id) {\n    id\n    filename\n    bucket\n    objectKey\n    size\n    mimetype\n    url\n    clientId\n    payrollId\n    uploadedBy\n    category\n    isPublic\n    metadata\n    fileType\n    createdAt\n    client {\n      name\n    }\n    payroll {\n      name\n    }\n    uploader {\n      firstName\n      lastName\n      computedName\n    }\n  }\n}\n\nquery ListFiles($where: filesBoolExp, $limit: Int, $offset: Int, $orderBy: [filesOrderBy!]) {\n  files(where: $where, limit: $limit, offset: $offset, orderBy: $orderBy) {\n    id\n    filename\n    bucket\n    objectKey\n    size\n    mimetype\n    url\n    clientId\n    payrollId\n    uploadedBy\n    category\n    isPublic\n    metadata\n    fileType\n    createdAt\n    client {\n      name\n    }\n    payroll {\n      name\n    }\n    uploader {\n      firstName\n      lastName\n      computedName\n    }\n  }\n  filesAggregate(where: $where) {\n    aggregate {\n      count\n    }\n  }\n}"): (typeof documents)["query GetDashboardMetrics($userId: uuid!) {\n  clientsAggregate(where: {active: {_eq: true}}) {\n    aggregate {\n      count\n    }\n  }\n  activePayrollsAggregate: payrollsAggregate(\n    where: {supersededDate: {_isNull: true}, status: {_nin: [\"Completed\", \"Failed\"]}}\n  ) {\n    aggregate {\n      count\n    }\n  }\n  totalEmployeesAggregate: payrollsAggregate(\n    where: {supersededDate: {_isNull: true}}\n  ) {\n    aggregate {\n      sum {\n        employeeCount\n      }\n    }\n  }\n  upcomingPayrolls: payrolls(\n    where: {supersededDate: {_isNull: true}, status: {_nin: [\"Completed\", \"Failed\", \"Cancelled\"]}}\n    orderBy: {updatedAt: DESC}\n    limit: 5\n  ) {\n    ...PayrollMinimal\n    client {\n      ...ClientMinimal\n    }\n  }\n}\n\nquery GetDashboardStatsOptimized($limit: Int = 10) {\n  clientsAggregate {\n    aggregate {\n      count\n    }\n  }\n  totalPayrolls: payrollsAggregate(where: {supersededDate: {_isNull: true}}) {\n    aggregate {\n      count\n    }\n  }\n  activePayrolls: payrollsAggregate(\n    where: {supersededDate: {_isNull: true}, status: {_eq: \"Active\"}}\n  ) {\n    aggregate {\n      count\n    }\n  }\n  upcomingPayrolls: payrolls(\n    where: {supersededDate: {_isNull: true}, status: {_eq: \"Active\"}}\n    orderBy: {updatedAt: DESC}\n    limit: $limit\n  ) {\n    id\n    name\n    status\n    client {\n      id\n      name\n    }\n  }\n}\n\nquery GetClientsDashboardStats {\n  activeClientsCount: clientsAggregate(where: {active: {_eq: true}}) {\n    aggregate {\n      count\n    }\n  }\n  totalPayrollsCount: payrollsAggregate(where: {supersededDate: {_isNull: true}}) {\n    aggregate {\n      count\n    }\n  }\n  totalEmployeesSum: payrollsAggregate(where: {supersededDate: {_isNull: true}}) {\n    aggregate {\n      sum {\n        employeeCount\n      }\n    }\n  }\n  clientsNeedingAttention: clients(\n    where: {active: {_eq: true}, _not: {payrolls: {supersededDate: {_isNull: true}}}}\n  ) {\n    ...ClientMinimal\n  }\n}\n\nquery GetCurrentUser($userId: uuid!) {\n  user: userById(id: $userId) {\n    ...UserProfile\n  }\n}\n\nquery GetUsersForDropdown($role: user_role) {\n  users(\n    where: {isActive: {_eq: true}, role: {_eq: $role}}\n    orderBy: {computedName: ASC}\n  ) {\n    ...UserMinimal\n  }\n}\n\nquery GetSystemHealth {\n  databaseHealth: users(limit: 1) {\n    id\n  }\n  recentActivity: auditLogsAggregate(\n    where: {eventTime: {_gte: \"now() - interval '1 hour'\"}}\n  ) {\n    aggregate {\n      count\n    }\n  }\n}\n\nquery GlobalSearch($searchTerm: String!) {\n  clients(\n    where: {_or: [{name: {_ilike: $searchTerm}}, {contactEmail: {_ilike: $searchTerm}}]}\n    limit: 5\n  ) {\n    ...ClientMinimal\n  }\n  users(\n    where: {_or: [{computedName: {_ilike: $searchTerm}}, {firstName: {_ilike: $searchTerm}}, {lastName: {_ilike: $searchTerm}}, {email: {_ilike: $searchTerm}}]}\n    limit: 5\n  ) {\n    ...UserMinimal\n  }\n  payrolls(\n    where: {client: {name: {_ilike: $searchTerm}}, supersededDate: {_isNull: true}}\n    limit: 5\n  ) {\n    ...PayrollMinimal\n    client {\n      ...ClientMinimal\n    }\n  }\n}\n\nquery GetFileById($id: uuid!) {\n  fileById(id: $id) {\n    id\n    filename\n    bucket\n    objectKey\n    size\n    mimetype\n    url\n    clientId\n    payrollId\n    uploadedBy\n    category\n    isPublic\n    metadata\n    fileType\n    createdAt\n    client {\n      name\n    }\n    payroll {\n      name\n    }\n    uploader {\n      firstName\n      lastName\n      computedName\n    }\n  }\n}\n\nquery ListFiles($where: filesBoolExp, $limit: Int, $offset: Int, $orderBy: [filesOrderBy!]) {\n  files(where: $where, limit: $limit, offset: $offset, orderBy: $orderBy) {\n    id\n    filename\n    bucket\n    objectKey\n    size\n    mimetype\n    url\n    clientId\n    payrollId\n    uploadedBy\n    category\n    isPublic\n    metadata\n    fileType\n    createdAt\n    client {\n      name\n    }\n    payroll {\n      name\n    }\n    uploader {\n      firstName\n      lastName\n      computedName\n    }\n  }\n  filesAggregate(where: $where) {\n    aggregate {\n      count\n    }\n  }\n}"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "subscription RecentActivity($resourceTypes: [String!]) {\n  auditLogs(\n    where: {resourceType: {_in: $resourceTypes}, eventTime: {_gte: \"now() - interval '5 minutes'\"}}\n    orderBy: {eventTime: DESC}\n    limit: 20\n  ) {\n    ...AuditLogEntry\n  }\n}\n\nsubscription AuthenticationEvents($userId: uuid) {\n  authEvents(\n    where: {userId: {_eq: $userId}, eventTime: {_gte: \"now() - interval '10 minutes'\"}}\n    orderBy: {eventTime: DESC}\n  ) {\n    ...AuthEvent\n  }\n}\n\nsubscription SensitiveDataAccess($resourceTypes: [String!]!) {\n  dataAccessLogs(\n    where: {resourceType: {_in: $resourceTypes}, accessedAt: {_gte: \"now() - interval '10 minutes'\"}}\n    orderBy: {accessedAt: DESC}\n  ) {\n    ...DataAccessLog\n  }\n}\n\nsubscription PermissionChangeStream {\n  permissionChanges(orderBy: {changedAt: DESC}, limit: 10) {\n    ...PermissionChange\n  }\n}"): (typeof documents)["subscription RecentActivity($resourceTypes: [String!]) {\n  auditLogs(\n    where: {resourceType: {_in: $resourceTypes}, eventTime: {_gte: \"now() - interval '5 minutes'\"}}\n    orderBy: {eventTime: DESC}\n    limit: 20\n  ) {\n    ...AuditLogEntry\n  }\n}\n\nsubscription AuthenticationEvents($userId: uuid) {\n  authEvents(\n    where: {userId: {_eq: $userId}, eventTime: {_gte: \"now() - interval '10 minutes'\"}}\n    orderBy: {eventTime: DESC}\n  ) {\n    ...AuthEvent\n  }\n}\n\nsubscription SensitiveDataAccess($resourceTypes: [String!]!) {\n  dataAccessLogs(\n    where: {resourceType: {_in: $resourceTypes}, accessedAt: {_gte: \"now() - interval '10 minutes'\"}}\n    orderBy: {accessedAt: DESC}\n  ) {\n    ...DataAccessLog\n  }\n}\n\nsubscription PermissionChangeStream {\n  permissionChanges(orderBy: {changedAt: DESC}, limit: 10) {\n    ...PermissionChange\n  }\n}"];

export function gql(source: string) {
  return (documents as any)[source] ?? {};
}

export type DocumentType<TDocumentNode extends DocumentNode<any, any>> = TDocumentNode extends DocumentNode<  infer TType,  any>  ? TType  : never;