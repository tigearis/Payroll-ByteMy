/* eslint-disable */
import * as types from './graphql';
import { TypedDocumentNode as DocumentNode } from '@graphql-typed-document-node/core';

/**
 * Map of all GraphQL operations in the project.
 *
 * This map has several performance disadvantages:
 * 1. It is not tree-shakeable, so it will include all operations in the project.
 * 2. It is not minifiable, so the string of a GraphQL query will be multiple times inside the bundle.
 * 3. It does not support dead code elimination, so it will add unused operations.
 *
 * Therefore it is highly recommended to use the babel or swc plugin for production.
 * Learn more about it here: https://the-guild.dev/graphql/codegen/plugins/presets/preset-client#reducing-bundle-size
 */
type Documents = {
    "fragment LeaveCore on leave {\n  id\n  user_id\n  start_date\n  end_date\n  leave_type\n  reason\n  status\n}\n\nfragment LeaveWithUser on leave {\n  ...LeaveCore\n  user {\n    id\n    name\n    email\n    is_staff\n    manager_id\n  }\n}\n\nfragment LeaveWithManager on leave {\n  ...LeaveWithUser\n  user {\n    manager {\n      id\n      name\n      email\n    }\n  }\n}": typeof types.LeaveCoreFragmentDoc,
    "mutation CreateLeaveRequest($object: leave_insert_input!) {\n  insert_leave_one(object: $object) {\n    ...LeaveWithManager\n  }\n}\n\nmutation UpdateLeaveRequest($id: uuid!, $set: leave_set_input!) {\n  update_leave_by_pk(pk_columns: {id: $id}, _set: $set) {\n    ...LeaveWithManager\n  }\n}\n\nmutation ApproveLeaveRequest($id: uuid!) {\n  update_leave_by_pk(pk_columns: {id: $id}, _set: {status: \"Approved\"}) {\n    ...LeaveCore\n  }\n}\n\nmutation RejectLeaveRequest($id: uuid!, $reason: String) {\n  update_leave_by_pk(\n    pk_columns: {id: $id}\n    _set: {status: \"Rejected\", reason: $reason}\n  ) {\n    ...LeaveCore\n  }\n}\n\nmutation DeleteLeaveRequest($id: uuid!) {\n  delete_leave_by_pk(id: $id) {\n    id\n  }\n}\n\nmutation BulkApproveLeaveRequests($ids: [uuid!]!) {\n  update_leave(where: {id: {_in: $ids}}, _set: {status: \"Approved\"}) {\n    affected_rows\n    returning {\n      ...LeaveCore\n    }\n  }\n}\n\nmutation BulkRejectLeaveRequests($ids: [uuid!]!, $reason: String) {\n  update_leave(\n    where: {id: {_in: $ids}}\n    _set: {status: \"Rejected\", reason: $reason}\n  ) {\n    affected_rows\n    returning {\n      ...LeaveCore\n    }\n  }\n}": typeof types.CreateLeaveRequestDocument,
    "query GetLeaveRequests($where: leave_bool_exp, $order_by: [leave_order_by!], $limit: Int, $offset: Int) {\n  leave(where: $where, order_by: $order_by, limit: $limit, offset: $offset) {\n    ...LeaveWithManager\n  }\n  leave_aggregate(where: $where) {\n    aggregate {\n      count\n    }\n  }\n}\n\nquery GetLeaveRequestById($id: uuid!) {\n  leave_by_pk(id: $id) {\n    ...LeaveWithManager\n  }\n}\n\nquery GetLeaveRequestsByUser($user_id: uuid!, $start_date: date, $end_date: date) {\n  leave(\n    where: {user_id: {_eq: $user_id}, _and: [{start_date: {_lte: $end_date}}, {end_date: {_gte: $start_date}}]}\n    order_by: {start_date: desc}\n  ) {\n    ...LeaveCore\n  }\n}\n\nquery GetPendingLeaveRequests($manager_id: uuid) {\n  leave(\n    where: {status: {_eq: \"Pending\"}, user: {manager_id: {_eq: $manager_id}}}\n    order_by: {start_date: asc}\n  ) {\n    ...LeaveWithUser\n  }\n}\n\nquery GetLeaveOverlaps($start_date: date!, $end_date: date!, $exclude_id: uuid) {\n  leave(\n    where: {_and: [{start_date: {_lte: $end_date}}, {end_date: {_gte: $start_date}}, {status: {_neq: \"Rejected\"}}, {id: {_neq: $exclude_id}}]}\n  ) {\n    ...LeaveWithUser\n  }\n}\n\nquery GetLeaveCalendar($start_date: date!, $end_date: date!, $user_ids: [uuid!]) {\n  leave(\n    where: {_and: [{start_date: {_lte: $end_date}}, {end_date: {_gte: $start_date}}, {status: {_eq: \"Approved\"}}, {user_id: {_in: $user_ids}}]}\n    order_by: {start_date: asc}\n  ) {\n    ...LeaveWithUser\n  }\n}\n\nquery GetLeaveAnalytics($start_date: date!, $end_date: date!) {\n  leave_by_type: leave_aggregate(\n    where: {start_date: {_gte: $start_date, _lte: $end_date}, status: {_eq: \"Approved\"}}\n  ) {\n    nodes {\n      leave_type\n    }\n    aggregate {\n      count\n    }\n  }\n  leave_by_status: leave_aggregate(\n    where: {start_date: {_gte: $start_date, _lte: $end_date}}\n  ) {\n    nodes {\n      status\n    }\n    aggregate {\n      count\n    }\n  }\n  leave_by_user: leave(\n    where: {start_date: {_gte: $start_date, _lte: $end_date}, status: {_eq: \"Approved\"}}\n  ) {\n    user {\n      id\n      name\n    }\n    leave_type\n  }\n}": typeof types.GetLeaveRequestsDocument,
    "subscription SubscribeToLeaveRequests($user_id: uuid) {\n  leave(where: {user_id: {_eq: $user_id}}, order_by: {start_date: desc}) {\n    ...LeaveWithManager\n  }\n}\n\nsubscription SubscribeToPendingLeaveRequests($manager_id: uuid!) {\n  leave(\n    where: {status: {_eq: \"Pending\"}, user: {manager_id: {_eq: $manager_id}}}\n    order_by: {start_date: asc}\n  ) {\n    ...LeaveWithUser\n  }\n}\n\nsubscription SubscribeToTeamLeave($user_ids: [uuid!]!) {\n  leave(\n    where: {user_id: {_in: $user_ids}, status: {_eq: \"Approved\"}}\n    order_by: {start_date: asc}\n  ) {\n    ...LeaveWithUser\n  }\n}": typeof types.SubscribeToLeaveRequestsDocument,
};
const documents: Documents = {
    "fragment LeaveCore on leave {\n  id\n  user_id\n  start_date\n  end_date\n  leave_type\n  reason\n  status\n}\n\nfragment LeaveWithUser on leave {\n  ...LeaveCore\n  user {\n    id\n    name\n    email\n    is_staff\n    manager_id\n  }\n}\n\nfragment LeaveWithManager on leave {\n  ...LeaveWithUser\n  user {\n    manager {\n      id\n      name\n      email\n    }\n  }\n}": types.LeaveCoreFragmentDoc,
    "mutation CreateLeaveRequest($object: leave_insert_input!) {\n  insert_leave_one(object: $object) {\n    ...LeaveWithManager\n  }\n}\n\nmutation UpdateLeaveRequest($id: uuid!, $set: leave_set_input!) {\n  update_leave_by_pk(pk_columns: {id: $id}, _set: $set) {\n    ...LeaveWithManager\n  }\n}\n\nmutation ApproveLeaveRequest($id: uuid!) {\n  update_leave_by_pk(pk_columns: {id: $id}, _set: {status: \"Approved\"}) {\n    ...LeaveCore\n  }\n}\n\nmutation RejectLeaveRequest($id: uuid!, $reason: String) {\n  update_leave_by_pk(\n    pk_columns: {id: $id}\n    _set: {status: \"Rejected\", reason: $reason}\n  ) {\n    ...LeaveCore\n  }\n}\n\nmutation DeleteLeaveRequest($id: uuid!) {\n  delete_leave_by_pk(id: $id) {\n    id\n  }\n}\n\nmutation BulkApproveLeaveRequests($ids: [uuid!]!) {\n  update_leave(where: {id: {_in: $ids}}, _set: {status: \"Approved\"}) {\n    affected_rows\n    returning {\n      ...LeaveCore\n    }\n  }\n}\n\nmutation BulkRejectLeaveRequests($ids: [uuid!]!, $reason: String) {\n  update_leave(\n    where: {id: {_in: $ids}}\n    _set: {status: \"Rejected\", reason: $reason}\n  ) {\n    affected_rows\n    returning {\n      ...LeaveCore\n    }\n  }\n}": types.CreateLeaveRequestDocument,
    "query GetLeaveRequests($where: leave_bool_exp, $order_by: [leave_order_by!], $limit: Int, $offset: Int) {\n  leave(where: $where, order_by: $order_by, limit: $limit, offset: $offset) {\n    ...LeaveWithManager\n  }\n  leave_aggregate(where: $where) {\n    aggregate {\n      count\n    }\n  }\n}\n\nquery GetLeaveRequestById($id: uuid!) {\n  leave_by_pk(id: $id) {\n    ...LeaveWithManager\n  }\n}\n\nquery GetLeaveRequestsByUser($user_id: uuid!, $start_date: date, $end_date: date) {\n  leave(\n    where: {user_id: {_eq: $user_id}, _and: [{start_date: {_lte: $end_date}}, {end_date: {_gte: $start_date}}]}\n    order_by: {start_date: desc}\n  ) {\n    ...LeaveCore\n  }\n}\n\nquery GetPendingLeaveRequests($manager_id: uuid) {\n  leave(\n    where: {status: {_eq: \"Pending\"}, user: {manager_id: {_eq: $manager_id}}}\n    order_by: {start_date: asc}\n  ) {\n    ...LeaveWithUser\n  }\n}\n\nquery GetLeaveOverlaps($start_date: date!, $end_date: date!, $exclude_id: uuid) {\n  leave(\n    where: {_and: [{start_date: {_lte: $end_date}}, {end_date: {_gte: $start_date}}, {status: {_neq: \"Rejected\"}}, {id: {_neq: $exclude_id}}]}\n  ) {\n    ...LeaveWithUser\n  }\n}\n\nquery GetLeaveCalendar($start_date: date!, $end_date: date!, $user_ids: [uuid!]) {\n  leave(\n    where: {_and: [{start_date: {_lte: $end_date}}, {end_date: {_gte: $start_date}}, {status: {_eq: \"Approved\"}}, {user_id: {_in: $user_ids}}]}\n    order_by: {start_date: asc}\n  ) {\n    ...LeaveWithUser\n  }\n}\n\nquery GetLeaveAnalytics($start_date: date!, $end_date: date!) {\n  leave_by_type: leave_aggregate(\n    where: {start_date: {_gte: $start_date, _lte: $end_date}, status: {_eq: \"Approved\"}}\n  ) {\n    nodes {\n      leave_type\n    }\n    aggregate {\n      count\n    }\n  }\n  leave_by_status: leave_aggregate(\n    where: {start_date: {_gte: $start_date, _lte: $end_date}}\n  ) {\n    nodes {\n      status\n    }\n    aggregate {\n      count\n    }\n  }\n  leave_by_user: leave(\n    where: {start_date: {_gte: $start_date, _lte: $end_date}, status: {_eq: \"Approved\"}}\n  ) {\n    user {\n      id\n      name\n    }\n    leave_type\n  }\n}": types.GetLeaveRequestsDocument,
    "subscription SubscribeToLeaveRequests($user_id: uuid) {\n  leave(where: {user_id: {_eq: $user_id}}, order_by: {start_date: desc}) {\n    ...LeaveWithManager\n  }\n}\n\nsubscription SubscribeToPendingLeaveRequests($manager_id: uuid!) {\n  leave(\n    where: {status: {_eq: \"Pending\"}, user: {manager_id: {_eq: $manager_id}}}\n    order_by: {start_date: asc}\n  ) {\n    ...LeaveWithUser\n  }\n}\n\nsubscription SubscribeToTeamLeave($user_ids: [uuid!]!) {\n  leave(\n    where: {user_id: {_in: $user_ids}, status: {_eq: \"Approved\"}}\n    order_by: {start_date: asc}\n  ) {\n    ...LeaveWithUser\n  }\n}": types.SubscribeToLeaveRequestsDocument,
};

/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 *
 *
 * @example
 * ```ts
 * const query = graphql(`query GetUser($id: ID!) { user(id: $id) { name } }`);
 * ```
 *
 * The query argument is unknown!
 * Please regenerate the types.
 */
export function graphql(source: string): unknown;

/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "fragment LeaveCore on leave {\n  id\n  user_id\n  start_date\n  end_date\n  leave_type\n  reason\n  status\n}\n\nfragment LeaveWithUser on leave {\n  ...LeaveCore\n  user {\n    id\n    name\n    email\n    is_staff\n    manager_id\n  }\n}\n\nfragment LeaveWithManager on leave {\n  ...LeaveWithUser\n  user {\n    manager {\n      id\n      name\n      email\n    }\n  }\n}"): (typeof documents)["fragment LeaveCore on leave {\n  id\n  user_id\n  start_date\n  end_date\n  leave_type\n  reason\n  status\n}\n\nfragment LeaveWithUser on leave {\n  ...LeaveCore\n  user {\n    id\n    name\n    email\n    is_staff\n    manager_id\n  }\n}\n\nfragment LeaveWithManager on leave {\n  ...LeaveWithUser\n  user {\n    manager {\n      id\n      name\n      email\n    }\n  }\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "mutation CreateLeaveRequest($object: leave_insert_input!) {\n  insert_leave_one(object: $object) {\n    ...LeaveWithManager\n  }\n}\n\nmutation UpdateLeaveRequest($id: uuid!, $set: leave_set_input!) {\n  update_leave_by_pk(pk_columns: {id: $id}, _set: $set) {\n    ...LeaveWithManager\n  }\n}\n\nmutation ApproveLeaveRequest($id: uuid!) {\n  update_leave_by_pk(pk_columns: {id: $id}, _set: {status: \"Approved\"}) {\n    ...LeaveCore\n  }\n}\n\nmutation RejectLeaveRequest($id: uuid!, $reason: String) {\n  update_leave_by_pk(\n    pk_columns: {id: $id}\n    _set: {status: \"Rejected\", reason: $reason}\n  ) {\n    ...LeaveCore\n  }\n}\n\nmutation DeleteLeaveRequest($id: uuid!) {\n  delete_leave_by_pk(id: $id) {\n    id\n  }\n}\n\nmutation BulkApproveLeaveRequests($ids: [uuid!]!) {\n  update_leave(where: {id: {_in: $ids}}, _set: {status: \"Approved\"}) {\n    affected_rows\n    returning {\n      ...LeaveCore\n    }\n  }\n}\n\nmutation BulkRejectLeaveRequests($ids: [uuid!]!, $reason: String) {\n  update_leave(\n    where: {id: {_in: $ids}}\n    _set: {status: \"Rejected\", reason: $reason}\n  ) {\n    affected_rows\n    returning {\n      ...LeaveCore\n    }\n  }\n}"): (typeof documents)["mutation CreateLeaveRequest($object: leave_insert_input!) {\n  insert_leave_one(object: $object) {\n    ...LeaveWithManager\n  }\n}\n\nmutation UpdateLeaveRequest($id: uuid!, $set: leave_set_input!) {\n  update_leave_by_pk(pk_columns: {id: $id}, _set: $set) {\n    ...LeaveWithManager\n  }\n}\n\nmutation ApproveLeaveRequest($id: uuid!) {\n  update_leave_by_pk(pk_columns: {id: $id}, _set: {status: \"Approved\"}) {\n    ...LeaveCore\n  }\n}\n\nmutation RejectLeaveRequest($id: uuid!, $reason: String) {\n  update_leave_by_pk(\n    pk_columns: {id: $id}\n    _set: {status: \"Rejected\", reason: $reason}\n  ) {\n    ...LeaveCore\n  }\n}\n\nmutation DeleteLeaveRequest($id: uuid!) {\n  delete_leave_by_pk(id: $id) {\n    id\n  }\n}\n\nmutation BulkApproveLeaveRequests($ids: [uuid!]!) {\n  update_leave(where: {id: {_in: $ids}}, _set: {status: \"Approved\"}) {\n    affected_rows\n    returning {\n      ...LeaveCore\n    }\n  }\n}\n\nmutation BulkRejectLeaveRequests($ids: [uuid!]!, $reason: String) {\n  update_leave(\n    where: {id: {_in: $ids}}\n    _set: {status: \"Rejected\", reason: $reason}\n  ) {\n    affected_rows\n    returning {\n      ...LeaveCore\n    }\n  }\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "query GetLeaveRequests($where: leave_bool_exp, $order_by: [leave_order_by!], $limit: Int, $offset: Int) {\n  leave(where: $where, order_by: $order_by, limit: $limit, offset: $offset) {\n    ...LeaveWithManager\n  }\n  leave_aggregate(where: $where) {\n    aggregate {\n      count\n    }\n  }\n}\n\nquery GetLeaveRequestById($id: uuid!) {\n  leave_by_pk(id: $id) {\n    ...LeaveWithManager\n  }\n}\n\nquery GetLeaveRequestsByUser($user_id: uuid!, $start_date: date, $end_date: date) {\n  leave(\n    where: {user_id: {_eq: $user_id}, _and: [{start_date: {_lte: $end_date}}, {end_date: {_gte: $start_date}}]}\n    order_by: {start_date: desc}\n  ) {\n    ...LeaveCore\n  }\n}\n\nquery GetPendingLeaveRequests($manager_id: uuid) {\n  leave(\n    where: {status: {_eq: \"Pending\"}, user: {manager_id: {_eq: $manager_id}}}\n    order_by: {start_date: asc}\n  ) {\n    ...LeaveWithUser\n  }\n}\n\nquery GetLeaveOverlaps($start_date: date!, $end_date: date!, $exclude_id: uuid) {\n  leave(\n    where: {_and: [{start_date: {_lte: $end_date}}, {end_date: {_gte: $start_date}}, {status: {_neq: \"Rejected\"}}, {id: {_neq: $exclude_id}}]}\n  ) {\n    ...LeaveWithUser\n  }\n}\n\nquery GetLeaveCalendar($start_date: date!, $end_date: date!, $user_ids: [uuid!]) {\n  leave(\n    where: {_and: [{start_date: {_lte: $end_date}}, {end_date: {_gte: $start_date}}, {status: {_eq: \"Approved\"}}, {user_id: {_in: $user_ids}}]}\n    order_by: {start_date: asc}\n  ) {\n    ...LeaveWithUser\n  }\n}\n\nquery GetLeaveAnalytics($start_date: date!, $end_date: date!) {\n  leave_by_type: leave_aggregate(\n    where: {start_date: {_gte: $start_date, _lte: $end_date}, status: {_eq: \"Approved\"}}\n  ) {\n    nodes {\n      leave_type\n    }\n    aggregate {\n      count\n    }\n  }\n  leave_by_status: leave_aggregate(\n    where: {start_date: {_gte: $start_date, _lte: $end_date}}\n  ) {\n    nodes {\n      status\n    }\n    aggregate {\n      count\n    }\n  }\n  leave_by_user: leave(\n    where: {start_date: {_gte: $start_date, _lte: $end_date}, status: {_eq: \"Approved\"}}\n  ) {\n    user {\n      id\n      name\n    }\n    leave_type\n  }\n}"): (typeof documents)["query GetLeaveRequests($where: leave_bool_exp, $order_by: [leave_order_by!], $limit: Int, $offset: Int) {\n  leave(where: $where, order_by: $order_by, limit: $limit, offset: $offset) {\n    ...LeaveWithManager\n  }\n  leave_aggregate(where: $where) {\n    aggregate {\n      count\n    }\n  }\n}\n\nquery GetLeaveRequestById($id: uuid!) {\n  leave_by_pk(id: $id) {\n    ...LeaveWithManager\n  }\n}\n\nquery GetLeaveRequestsByUser($user_id: uuid!, $start_date: date, $end_date: date) {\n  leave(\n    where: {user_id: {_eq: $user_id}, _and: [{start_date: {_lte: $end_date}}, {end_date: {_gte: $start_date}}]}\n    order_by: {start_date: desc}\n  ) {\n    ...LeaveCore\n  }\n}\n\nquery GetPendingLeaveRequests($manager_id: uuid) {\n  leave(\n    where: {status: {_eq: \"Pending\"}, user: {manager_id: {_eq: $manager_id}}}\n    order_by: {start_date: asc}\n  ) {\n    ...LeaveWithUser\n  }\n}\n\nquery GetLeaveOverlaps($start_date: date!, $end_date: date!, $exclude_id: uuid) {\n  leave(\n    where: {_and: [{start_date: {_lte: $end_date}}, {end_date: {_gte: $start_date}}, {status: {_neq: \"Rejected\"}}, {id: {_neq: $exclude_id}}]}\n  ) {\n    ...LeaveWithUser\n  }\n}\n\nquery GetLeaveCalendar($start_date: date!, $end_date: date!, $user_ids: [uuid!]) {\n  leave(\n    where: {_and: [{start_date: {_lte: $end_date}}, {end_date: {_gte: $start_date}}, {status: {_eq: \"Approved\"}}, {user_id: {_in: $user_ids}}]}\n    order_by: {start_date: asc}\n  ) {\n    ...LeaveWithUser\n  }\n}\n\nquery GetLeaveAnalytics($start_date: date!, $end_date: date!) {\n  leave_by_type: leave_aggregate(\n    where: {start_date: {_gte: $start_date, _lte: $end_date}, status: {_eq: \"Approved\"}}\n  ) {\n    nodes {\n      leave_type\n    }\n    aggregate {\n      count\n    }\n  }\n  leave_by_status: leave_aggregate(\n    where: {start_date: {_gte: $start_date, _lte: $end_date}}\n  ) {\n    nodes {\n      status\n    }\n    aggregate {\n      count\n    }\n  }\n  leave_by_user: leave(\n    where: {start_date: {_gte: $start_date, _lte: $end_date}, status: {_eq: \"Approved\"}}\n  ) {\n    user {\n      id\n      name\n    }\n    leave_type\n  }\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "subscription SubscribeToLeaveRequests($user_id: uuid) {\n  leave(where: {user_id: {_eq: $user_id}}, order_by: {start_date: desc}) {\n    ...LeaveWithManager\n  }\n}\n\nsubscription SubscribeToPendingLeaveRequests($manager_id: uuid!) {\n  leave(\n    where: {status: {_eq: \"Pending\"}, user: {manager_id: {_eq: $manager_id}}}\n    order_by: {start_date: asc}\n  ) {\n    ...LeaveWithUser\n  }\n}\n\nsubscription SubscribeToTeamLeave($user_ids: [uuid!]!) {\n  leave(\n    where: {user_id: {_in: $user_ids}, status: {_eq: \"Approved\"}}\n    order_by: {start_date: asc}\n  ) {\n    ...LeaveWithUser\n  }\n}"): (typeof documents)["subscription SubscribeToLeaveRequests($user_id: uuid) {\n  leave(where: {user_id: {_eq: $user_id}}, order_by: {start_date: desc}) {\n    ...LeaveWithManager\n  }\n}\n\nsubscription SubscribeToPendingLeaveRequests($manager_id: uuid!) {\n  leave(\n    where: {status: {_eq: \"Pending\"}, user: {manager_id: {_eq: $manager_id}}}\n    order_by: {start_date: asc}\n  ) {\n    ...LeaveWithUser\n  }\n}\n\nsubscription SubscribeToTeamLeave($user_ids: [uuid!]!) {\n  leave(\n    where: {user_id: {_in: $user_ids}, status: {_eq: \"Approved\"}}\n    order_by: {start_date: asc}\n  ) {\n    ...LeaveWithUser\n  }\n}"];

export function graphql(source: string) {
  return (documents as any)[source] ?? {};
}

export type DocumentType<TDocumentNode extends DocumentNode<any, any>> = TDocumentNode extends DocumentNode<  infer TType,  any>  ? TType  : never;